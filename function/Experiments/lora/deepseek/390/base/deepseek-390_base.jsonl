[
    {
        "task_id": 11,
        "completion": "def remove_occ(str1, char):\n    first_index = str1.index(char)\n    last_index = str1.rindex(char)\n    str1 = str1[:first_index] + str1[first_index + 1:]\n    str1 = str1[:last_index] + str1[last_index + 1:]\n    return str1\n"
    },
    {
        "task_id": 12,
        "completion": "def sort_matrix(matrix):\n    return sorted(matrix, key=sum)\n"
    },
    {
        "task_id": 13,
        "completion": "Sure, here is a simple function that counts the most common words in a dictionary. This function uses the `collections.Counter` class to count the occurrences of each word, and then returns the most common word(s) along with their counts.\n\n```python\nimport collections\n\ndef count_common(word_dict):\n    counter = collections.Counter(word_dict)\n    most_common = counter.most_common(1)\n    return most_common[0] if most_common else (None, 0)\n```\n\nIn this function, `most_common(1)` returns a list of one tuple, where the first element is the most common word and the second element is its count. If the dictionary is empty, `most_common(1)` returns an empty list, so we handle this case by returning `(None, 0)`.\n\nNote: This function assumes that `word_dict` is a dictionary where the keys are words and the values are their counts. If `word_dict` is a list of words, you can use `collections.Counter(word_dict)` to count the occurrences of each word.\n"
    },
    {
        "task_id": 14,
        "completion": "Sure, here is a simple function in Python that calculates the volume of a triangular prism:\n\n```python\ndef find_volume(base, height, length):\n    \"\"\"\n    Function to calculate the volume of a triangular prism.\n\n    Parameters:\n    base (float): The base of the triangular face of the prism.\n    height (float): The height of the triangular face of the prism.\n    length (float): The length of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    area = 0.5 * base * height\n    volume = area * length\n    return volume\n```\n\nThis function takes the base, height, and length of the triangular prism as arguments and returns the volume. The area of the triangular face is calculated as 0.5 * base * height, and then multiplied by the length to get the volume.\n"
    },
    {
        "task_id": 15,
        "completion": "def split_lowerstring(s):\n    return [x for x in s.split(' ') if x.islower()]\n"
    },
    {
        "task_id": 16,
        "completion": "Sure, here is a function that uses regular expressions to find sequences of lowercase letters joined with an underscore:\n\n```python\nimport re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    matches = re.findall(pattern, text)\n    return matches\n```\n\nThis function will return a list of all matches in the input text. Each match is a string containing a sequence of lowercase letters joined with an underscore.\n"
    },
    {
        "task_id": 17,
        "completion": "Sure, here is a simple function in Python to calculate the perimeter of a square:\n\n```python\ndef square_perimeter(side_length):\n    return 4 * side_length\n```\n\nThis function takes the length of one side of the square as an argument and returns the perimeter. The perimeter of a square is simply the side length multiplied by 4.\n"
    },
    {
        "task_id": 18,
        "completion": "def remove_dirty_chars(str1, str2):\n    result = ''.join(ch for ch in str1 if ch not in str2)\n    return result\n"
    },
    {
        "task_id": 19,
        "completion": "def test_duplicate(arr):\n    if len(arr) == len(set(arr)):\n        return False\n    else:\n        return True\n"
    },
    {
        "task_id": 20,
        "completion": "A Woodall number is a number of the form n * 2^n - 1, where n is a non-negative integer. Here is a Python function to check if a number is a Woodall number:\n\n```python\ndef is_woodall(n):\n    i = 0\n    while True:\n        woodall = i * 2**i - 1\n        if woodall == n:\n            return True\n        if woodall > n:\n            return False\n        i += 1\n```\n\nThis function works by iterating over all non-negative integers i and checking if the corresponding Woodall number is equal to the input number. If the Woodall number is greater than the input number, the function returns False. If the Woodall number is equal to the input number, the function returns True.\n"
    },
    {
        "task_id": 21,
        "completion": "Sure, here is a simple function in Python that accomplishes this:\n\n```python\ndef multiples_of_num(n, m):\n    multiples = [i * n for i in range(1, m + 1)]\n    return multiples\n```\n\nThis function takes two arguments: `n` and `m`. `n` is the number you want to find multiples of, and `m` is the number of multiples you want to find. The function uses a list comprehension to generate a list of the first `m` multiples of `n`.\n"
    },
    {
        "task_id": 22,
        "completion": "def find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1\n"
    },
    {
        "task_id": 23,
        "completion": "def maximum_sum(list_of_lists):\n    return max(sum(sub_list) for sub_list in list_of_lists)\n"
    },
    {
        "task_id": 24,
        "completion": "def binary_to_decimal(binary):\n    binary = str(binary)\n    decimal = 0\n    for digit in binary:\n        decimal = decimal*2 + int(digit)\n    return decimal\n"
    },
    {
        "task_id": 25,
        "completion": "def find_product(arr):\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    product = 1\n    for num, count in count_dict.items():\n        if count == 1:\n            product *= num\n    return product\n"
    },
    {
        "task_id": 26,
        "completion": "def check_k_elements(list_of_tuples, k):\n    for tuple in list_of_tuples:\n        if len(tuple) != k:\n            return False\n    return True\n"
    },
    {
        "task_id": 27,
        "completion": "def remove(list_of_strings):\n    return [''.join(filter(lambda x: not x.isdigit(), s)) for s in list_of_strings]\n"
    },
    {
        "task_id": 28,
        "completion": "Sure, here is a simple Python function to calculate the binomial coefficient using dynamic programming:\n\n```python\ndef binomial_coeff(n, k):\n    C = [[0 for x in range(k+1)] for x in range(n+1)]\n\n    for i in range(n+1):\n        for j in range(min(i, k)+1):\n            if j == 0 or j == i:\n                C[i][j] = 1\n            else:\n                C[i][j] = C[i-1][j-1] + C[i-1][j]\n\n    return C[n][k]\n```\n\nThis function uses a 2D array `C` to store the results of sub-problems. The `C[i][j]` stores the binomial coefficient of `i` and `j`. The function iterates over the array and fills it in a bottom-up manner. The time complexity of this function is O(n*k).\n"
    },
    {
        "task_id": 29,
        "completion": "def get_odd_occurrence(arr):\n    res = 0\n    for element in arr:\n        res ^= element\n    return res\n"
    },
    {
        "task_id": 30,
        "completion": "def count_substring_with_equal_ends(s):\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                count += 1\n    return count\n"
    },
    {
        "task_id": 31,
        "completion": "Sure, here is a Python function that uses the heapq module to find the top k integers that occur most frequently from a given list of sorted and distinct integers:\n\n```python\nimport heapq\n\ndef func(nums, k):\n    count = {}\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n\n    heap = []\n    for num, freq in count.items():\n        if len(heap) < k:\n            heapq.heappush(heap, (freq, num))\n        else:\n            heapq.heappushpop(heap, (freq, num))\n\n    return [num for freq, num in heap]\n```\n\nThis function works by first counting the frequency of each number in the input list. Then, it uses a heap to keep track of the top k numbers with the highest frequency. The heap is a binary tree where the parent node is always smaller than or equal to its child nodes. This property allows us to efficiently push and pop elements. When the heap size is less than k, we simply push the element. When the heap size is equal to k, we push and pop the element to ensure that the heap always contains the top k elements. Finally, we return the numbers in the heap.\n"
    },
    {
        "task_id": 32,
        "completion": "def max_prime_factors(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n"
    },
    {
        "task_id": 33,
        "completion": "Sure, here is a simple function in Python that converts a decimal number to a binary number:\n\n```python\ndef decimal_to_binary(n):\n    if n == 0:\n        return 0\n    else:\n        return n % 2 + 10 * decimal_to_binary(int(n / 2))\n```\n\nThis function uses recursion to convert the decimal number to binary. It takes the remainder of the number when divided by 2 (which will be 0 or 1) and adds it to the result of recursively calling the function on the number divided by 2. The function returns 0 when the number is 0, which is the base case for the recursion.\n"
    },
    {
        "task_id": 34,
        "completion": "Sure, here is a simple function that uses binary search to find the missing number in a sorted array.\n\n```python\ndef find_missing(arr):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] != mid + 1 and (mid == 0 or arr[mid - 1] == mid):\n            return mid + 1\n        elif arr[mid] == mid + 1:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n```\n\nThis function works by checking the middle element of the array. If the middle element is not equal to its index + 1, and the element before it is equal to its index, then the missing number is the index + 1. If the middle element is equal to its index + 1, then the missing number is to the right of the middle element, so we move the low pointer to mid + 1. If the middle element is not equal to its index + 1 and the element before it is not equal to its index, then the missing number is to the left of the middle element, so we move the high pointer to mid - 1.\n\nNote: This function assumes that the array is sorted in ascending order and contains no duplicate numbers.\n"
    },
    {
        "task_id": 35,
        "completion": "A rectangular number is a number that can be represented as the product of two positive integers. For example, 1, 2, 3, 4, 6, 8, 10, 12, 15, 16, 18, 20, 24, 25, 27, 30, 32, 36, 40, 42, 45, 48, 50, 54, 56, 60, 64, 70, 72, 75, 80, 84, 90, 96, 100, 105, 110, 112, 120, 125, 126, 132, 140, 144, 150, 160, 168, 175, 180, 192, 200, 210, 224, 225, 240, 250, 252, 260, 270, 280, 288, 300, 308, 315, 320, 336, 350, 360, 375, 384, 400, 420, 440, 450, 480, 500, 504, 520, 540, 560, 576, 600, 612, 630, 640, 672, 700, 720, 750, 768, 800, 840, 880, 900, 960, 1000, 1024, 1050, 1100, 1120, 1176, 1200, 1250, 1260, 1320, 1400, 1440, 1500, 1536, 1600, 1680, 1750, 1800, 1920, 2000, 2048, 2100, 2200, 2240, 2352, 2400, 2500, 2520, 2600, 2700, 2800, 2880, 3000, 3125, 3200, 3360, 3500, 3600, 3840, 4000, 4096, 4200, 4400, 4480, 4704, 4800, 5000, 5040, 5200, 5400, 5600, 5760, 6000, 6250, 6400, 6720, 7000, 7200, 7680, 8000, 8192, 8400, 8800, 9000, 9600, 10000, 10240, 1048576, 10800, 11200, 11760, 12000, 12500, 12600, 13200, 14000, 14400, 15000, 15360, 16000, 16384, 16800, 17500, 18000, 19200, 20000, 20480, 21000, 22000, 22400, "
    },
    {
        "task_id": 36,
        "completion": "Sure, here is a Python function that finds the nth digit in the proper fraction of two given numbers:\n\n```python\ndef find_nth_digit(num1, num2, n):\n    # Convert the numbers to strings\n    str_num1 = str(num1)\n    str_num2 = str(num2)\n\n    # Concatenate the strings\n    str_num = str_num1 + str_num2\n\n    # Return the nth digit\n    return int(str_num[n - 1])\n```\n\nThis function works by first converting the two given numbers to strings. It then concatenates these strings together. Finally, it returns the nth digit of the resulting string, where the index is 0-based (i.e., the first digit is at index 0).\n"
    },
    {
        "task_id": 37,
        "completion": "def sort_mixed_list(mixed_list):\n    \"\"\"\n    Sorts a mixed list of integers and strings.\n\n    Args:\n        mixed_list (list): A list containing integers and strings.\n\n    Returns:\n        list: A sorted list.\n    \"\"\"\n    return sorted(mixed_list, key=lambda x: (isinstance(x, int), x))\n"
    },
    {
        "task_id": 38,
        "completion": "def div_even_odd(nums):\n    even = [x for x in nums if x % 2 == 0]\n    odd = [x for x in nums if x % 2 != 0]\n    if even and odd:\n        return even[0] / odd[0]\n    else:\n        return None\n"
    },
    {
        "task_id": 39,
        "completion": "def rearrange_string(s):\n    s = sorted(s)\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return False\n    return True\n"
    },
    {
        "task_id": 40,
        "completion": "Sure, here is a function that uses the `collections` module to find the frequency of elements in a given list of lists:\n\n```python\nimport collections\n\ndef freq_element(list_of_lists):\n    flat_list = [item for sublist in list_of_lists for item in sublist]\n    freq_dict = collections.Counter(flat_list)\n    return freq_dict\n```\n\nIn this function, we first flatten the list of lists into a single list using list comprehension. Then, we use `collections.Counter` to count the frequency of each element in the list. The function returns a dictionary where the keys are the elements and the values are their frequencies.\n"
    },
    {
        "task_id": 41,
        "completion": "Sure, here is a simple function that uses a lambda function to filter even numbers from a list:\n\n```python\ndef filter_evennumbers(numbers):\n    return list(filter(lambda x: (x%2 == 0), numbers))\n```\n\nThis function takes a list of numbers as input, and returns a new list that contains only the even numbers. The lambda function `(x%2 == 0)` checks if a number is even by checking if the remainder of the number divided by 2 is 0. If the remainder is 0, the number is even, and the lambda function returns `True`, otherwise it returns `False`. The `filter` function then uses this lambda function to filter the list of numbers.\n"
    },
    {
        "task_id": 42,
        "completion": "Sure, here is a simple Python function that uses a dictionary to find the sum of repeated elements in a given array.\n\n```python\ndef find_sum(arr):\n    # Create a dictionary to store the count of each element\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Find the sum of elements that appear more than once\n    sum_repeated = 0\n    for num, count in count_dict.items():\n        if count > 1:\n            sum_repeated += num * count\n\n    return sum_repeated\n```\n\nThis function works by first counting the occurrences of each element in the array. Then, it sums up the elements that appear more than once, taking into account their count.\n"
    },
    {
        "task_id": 43,
        "completion": "Sure, here is a Python function that uses regex to find sequences of lowercase letters joined with an underscore:\n\n```python\nimport re\n\ndef text_match(text):\n    patterns = '[_]+'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```\n\nIn this function, `patterns` is a string that represents the regex pattern to match. The pattern `[_]+` matches one or more underscores. The `re.search` function is used to search for the pattern in the input text. If a match is found, the function returns 'Found a match!', otherwise it returns 'Not matched!'.\n"
    },
    {
        "task_id": 44,
        "completion": "Sure, here is a simple function in Python that uses the `re` module to match a word at the beginning of a string:\n\n```python\nimport re\n\ndef text_match_string(text, pattern):\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```\n\nIn this function, `text` is the string you want to search in, and `pattern` is the word you want to match at the beginning of the string. The function uses `re.search` to search for the pattern in the text. If a match is found, the function returns 'Found a match!', otherwise it returns 'Not matched!'.\n"
    },
    {
        "task_id": 45,
        "completion": "def get_gcd(arr):\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    result = arr[0]\n    for i in range(1, len(arr)):\n        result = gcd(result, arr[i])\n\n    return result\n"
    },
    {
        "task_id": 46,
        "completion": "Sure, here is a simple Python function that checks if all numbers in a list are distinct:\n\n```python\ndef test_distinct(nums):\n    return len(nums) == len(set(nums))\n```\n\nThis function works by converting the list to a set, which automatically removes duplicates. If the length of the list and the set are the same, then all numbers are distinct. If they are not the same, then there is at least one duplicate number.\n"
    },
    {
        "task_id": 47,
        "completion": "Sure, here is a Python function that computes the last digit of the factorial of a number divided by the factorial of another number:\n\n```python\ndef compute_last_digit(a, b):\n    # Calculate the last digit of factorial(a)\n    last_digit_a = (a % 10)\n\n    # Calculate the last digit of factorial(b)\n    last_digit_b = (b % 10)\n\n    # Calculate the last digit of factorial(a) / factorial(b)\n    last_digit_result = (last_digit_a * last_digit_b) % 10\n\n    return last_digit_result\n```\n\nThis function works by first calculating the last digit of `a` and `b` using the modulo operator (`%`). Then, it multiplies these last digits together and takes the modulo 10 of the result to get the last digit of the factorial of `a` divided by the factorial of `b`.\n"
    },
    {
        "task_id": 48,
        "completion": "def odd_bit_set_number(n):\n    # Create a mask with all odd bits set\n    mask = 0xAAAAAAAA\n    # Use bitwise OR to set all odd bits in n\n    result = n | mask\n    return result\n"
    },
    {
        "task_id": 49,
        "completion": "def specified_element(list1, element):\n    result = []\n    for sublist in list1:\n        if sublist[0] == element:\n            result.append(sublist)\n    return result\n"
    },
    {
        "task_id": 50,
        "completion": "def min_length_list(list1, list2):\n    return min(list1, list2, key=lambda x: len(x))\n"
    },
    {
        "task_id": 51,
        "completion": "Sure, here is a simple function in Python that checks if a triangle is equilateral:\n\n```python\ndef check_equilateral(a, b, c):\n    if a == b == c:\n        return \"The triangle is equilateral\"\n    else:\n        return \"The triangle is not equilateral\"\n```\n\nThis function takes three arguments, `a`, `b`, and `c`, which represent the lengths of the sides of the triangle. If all three sides are equal, the function returns \"The triangle is equilateral\". Otherwise, it returns \"The triangle is not equilateral\".\n"
    },
    {
        "task_id": 52,
        "completion": "Sure, here is a simple function in Python to calculate the area of a parallelogram:\n\n```python\ndef parallelogram_area(base, height):\n    return base * height\n```\n\nThis function takes two arguments: the base and the height of the parallelogram. It then returns the product of these two values, which is the area of the parallelogram.\n"
    },
    {
        "task_id": 53,
        "completion": "def check_equality(str1):\n    if str1[0] == str1[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "task_id": 54,
        "completion": "Sure, here is a Python function that uses the counting sort algorithm to sort an array:\n\n```python\ndef counting_sort(array1, max_val):\n    m = max_val + 1\n    count = [0] * m                \n\n    for a in array1:\n        count[a] += 1             \n    i = 0\n    for a in range(m):            \n        for c in range(count[a]):  \n            array1[i] = a\n            i += 1\n    return array1\n```\n\nThis function works by first creating a count array of size `max_val + 1` and initializing all elements to 0. Then, it iterates over the input array and increments the count of each element in the count array. After that, it iterates over the count array and fills the input array with the elements in sorted order.\n\nPlease note that the function assumes that the input array contains non-negative integers. If the array contains negative integers, you will need to adjust the function to handle that case.\n"
    },
    {
        "task_id": 55,
        "completion": "Sure, here is a simple function in Python to find the t-nth term of a geometric series:\n\n```python\ndef tn_gp(a, r, t):\n    \"\"\"\n    Returns the t-nth term of a geometric series.\n\n    Parameters:\n    a (float): the first term of the series\n    r (float): the common ratio of the series\n    t (int): the term number to find\n\n    Returns:\n    float: the t-nth term of the series\n    \"\"\"\n    return a * (r ** (t - 1))\n```\n\nThis function takes the first term `a` and the common ratio `r` of the series, and returns the `t`-th term of the series. The formula used is `a * (r ** (t - 1))`, which is the standard formula for the n-th term of a geometric series.\n"
    },
    {
        "task_id": 56,
        "completion": "Sure, here is a Python function that checks if a given number is one less than twice its reverse:\n\n```python\ndef check(n):\n    n = str(n)\n    rev = n[::-1]\n    if int(rev) * 2 - 1 == int(n):\n        return True\n    else:\n        return False\n```\n\nThis function works by first converting the input number to a string, then reversing it to get the reverse of the number. It then checks if the reverse is one less than twice the original number. If it is, the function returns `True`; otherwise, it returns `False`.\n"
    },
    {
        "task_id": 57,
        "completion": "def find_max_num(nums):\n    nums.sort(reverse=True)\n    return int(''.join(map(str, nums)))\n"
    },
    {
        "task_id": 58,
        "completion": "def opposite_signs(num1, num2):\n    return (num1 ^ num2) < 0\n"
    },
    {
        "task_id": 59,
        "completion": "Sure, here is a simple function in Python to find the nth octagonal number:\n\n```python\ndef is_octagonal(n):\n    return n * (4 * n - 3)\n```\n\nThis function uses the formula for the nth octagonal number, which is n * (4 * n - 3).\n"
    },
    {
        "task_id": 60,
        "completion": "def max_len_sub(arr, n):\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(0, i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n"
    }
]
{"task_id": 11, "completion": "def remove_occ(str1, char):\n    first_index = str1.index(char)\n    last_index = str1.rindex(char)\n    str1 = str1[:first_index] + str1[first_index + 1:]\n    str1 = str1[:last_index] + str1[last_index + 1:]\n    return str1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1w4e7c8f.py\", line 8, in <module>\n    assert remove_occ(\"hello\",\"l\") == \"heo\"\nAssertionError", "passed": false}
{"task_id": 12, "completion": "def sort_matrix(matrix):\n    return sorted(matrix, key=sum)\n", "result": "passed", "passed": true}
{"task_id": 13, "completion": "import collections\n\ndef count_common(word_dict):\n    counter = collections.Counter(word_dict)\n    most_common = counter.most_common(1)\n    return most_common[0] if most_common else (None, 0)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp911w5ww4.py\", line 8, in <module>\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nAssertionError", "passed": false}
{"task_id": 14, "completion": "def find_volume(base, height, length):\n    \"\"\"\n    Function to calculate the volume of a triangular prism.\n\n    Parameters:\n    base (float): The base of the triangular face of the prism.\n    height (float): The height of the triangular face of the prism.\n    length (float): The length of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    area = 0.5 * base * height\n    volume = area * length\n    return volume\n", "result": "passed", "passed": true}
{"task_id": 15, "completion": "def split_lowerstring(s):\n    return [x for x in s.split(' ') if x.islower()]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpsblsp102.py\", line 4, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    matches = re.findall(pattern, text)\n    return matches\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpsv63q5hm.py\", line 8, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    return 4 * side_length\n", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(str1, str2):\n    result = ''.join(ch for ch in str1 if ch not in str2)\n    return result\n", "result": "passed", "passed": true}
{"task_id": 19, "completion": "def test_duplicate(arr):\n    if len(arr) == len(set(arr)):\n        return False\n    else:\n        return True\n", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(n):\n    i = 0\n    while True:\n        woodall = i * 2**i - 1\n        if woodall == n:\n            return True\n        if woodall > n:\n            return False\n        i += 1\n", "result": "passed", "passed": true}
{"task_id": 21, "completion": "def multiples_of_num(n, m):\n    multiples = [i * n for i in range(1, m + 1)]\n    return multiples\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpfyzmpn97.py\", line 5, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "completion": "def find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1\n", "result": "passed", "passed": true}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists):\n    return max(sum(sub_list) for sub_list in list_of_lists)\n", "result": "passed", "passed": true}
{"task_id": 24, "completion": "def binary_to_decimal(binary):\n    binary = str(binary)\n    decimal = 0\n    for digit in binary:\n        decimal = decimal*2 + int(digit)\n    return decimal\n", "result": "passed", "passed": true}
{"task_id": 25, "completion": "def find_product(arr):\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    product = 1\n    for num, count in count_dict.items():\n        if count == 1:\n            product *= num\n    return product\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmparp479b4.py\", line 14, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(list_of_tuples, k):\n    for tuple in list_of_tuples:\n        if len(tuple) != k:\n            return False\n    return True\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpji_n3wgz.py\", line 7, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "completion": "def remove(list_of_strings):\n    return [''.join(filter(lambda x: not x.isdigit(), s)) for s in list_of_strings]\n", "result": "passed", "passed": true}
{"task_id": 28, "completion": "def binomial_coeff(n, k):\n    C = [[0 for x in range(k+1)] for x in range(n+1)]\n\n    for i in range(n+1):\n        for j in range(min(i, k)+1):\n            if j == 0 or j == i:\n                C[i][j] = 1\n            else:\n                C[i][j] = C[i-1][j-1] + C[i-1][j]\n\n    return C[n][k]\n", "result": "passed", "passed": true}
{"task_id": 29, "completion": "def get_odd_occurrence(arr):\n    res = 0\n    for element in arr:\n        res ^= element\n    return res\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpfbbb2cur.py\", line 7, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                count += 1\n    return count\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpatxueg3n.py\", line 10, in <module>\n    assert count_substring_with_equal_ends(\"abc\") == 3\nAssertionError", "passed": false}
{"task_id": 31, "completion": "import heapq\n\ndef func(nums, k):\n    count = {}\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n\n    heap = []\n    for num, freq in count.items():\n        if len(heap) < k:\n            heapq.heappush(heap, (freq, num))\n        else:\n            heapq.heappushpop(heap, (freq, num))\n\n    return [num for freq, num in heap]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9wkaxl0l.py\", line 20, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n  File \"/tmp/tmp9wkaxl0l.py\", line 6, in func\n    if num in count:\nTypeError: unhashable type: 'list'", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(n):\n    if n == 0:\n        return 0\n    else:\n        return n % 2 + 10 * decimal_to_binary(int(n / 2))\n", "result": "passed", "passed": true}
{"task_id": 34, "completion": "def find_missing(arr):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] != mid + 1 and (mid == 0 or arr[mid - 1] == mid):\n            return mid + 1\n        elif arr[mid] == mid + 1:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppo1ferw5.py\", line 14, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "completion": "A rectangular number is a number that can be represented as the product of two positive integers. For example, 1, 2, 3, 4, 6, 8, 10, 12, 15, 16, 18, 20, 24, 25, 27, 30, 32, 36, 40, 42, 45, 48, 50, 54, 56, 60, 64, 70, 72, 75, 80, 84, 90, 96, 100, 105, 110, 112, 120, 125, 126, 132, 140, 144, 150, 160, 168, 175, 180, 192, 200, 210, 224, 225, 240, 250, 252, 260, 270, 280, 288, 300, 308, 315, 320, 336, 350, 360, 375, 384, 400, 420, 440, 450, 480, 500, 504, 520, 540, 560, 576, 600, 612, 630, 640, 672, 700, 720, 750, 768, 800, 840, 880, 900, 960, 1000, 1024, 1050, 1100, 1120, 1176, 1200, 1250, 1260, 1320, 1400, 1440, 1500, 1536, 1600, 1680, 1750, 1800, 1920, 2000, 2048, 2100, 2200, 2240, 2352, 2400, 2500, 2520, 2600, 2700, 2800, 2880, 3000, 3125, 3200, 3360, 3500, 3600, 3840, 4000, 4096, 4200, 4400, 4480, 4704, 4800, 5000, 5040, 5200, 5400, 5600, 5760, 6000, 6250, 6400, 6720, 7000, 7200, 7680, 8000, 8192, 8400, 8800, 9000, 9600, 10000, 10240, 1048576, 10800, 11200, 11760, 12000, 12500, 12600, 13200, 14000, 14400, 15000, 15360, 16000, 16384, 16800, 17500, 18000, 19200, 20000, 20480, 21000, 22000, 22400, ", "result": "failed: File \"/tmp/tmpqb0ijut9.py\", line 1\n    , 13200, 14000, 14400, 15000, 15360, 16000, 16384, 16800, 17500, 18000, 19200, 20000, 20480, 21000, 22000, 22400, \n      ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 36, "completion": "def find_nth_digit(num1, num2, n):\n    # Convert the numbers to strings\n    str_num1 = str(num1)\n    str_num2 = str(num2)\n\n    # Concatenate the strings\n    str_num = str_num1 + str_num2\n\n    # Return the nth digit\n    return int(str_num[n - 1])\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwan83rgw.py\", line 12, in <module>\n    assert find_nth_digit(1,2,1) == 5\nAssertionError", "passed": false}
{"task_id": 37, "completion": "def sort_mixed_list(mixed_list):\n    \"\"\"\n    Sorts a mixed list of integers and strings.\n\n    Args:\n        mixed_list (list): A list containing integers and strings.\n\n    Returns:\n        list: A sorted list.\n    \"\"\"\n    return sorted(mixed_list, key=lambda x: (isinstance(x, int), x))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8p6kjuz0.py\", line 13, in <module>\n    assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nAssertionError", "passed": false}
{"task_id": 38, "completion": "def div_even_odd(nums):\n    even = [x for x in nums if x % 2 == 0]\n    odd = [x for x in nums if x % 2 != 0]\n    if even and odd:\n        return even[0] / odd[0]\n    else:\n        return None\n", "result": "passed", "passed": true}
{"task_id": 39, "completion": "def rearrange_string(s):\n    s = sorted(s)\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return False\n    return True\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdsobkrtm.py\", line 8, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "completion": "import collections\n\ndef freq_element(list_of_lists):\n    flat_list = [item for sublist in list_of_lists for item in sublist]\n    freq_dict = collections.Counter(flat_list)\n    return freq_dict\n", "result": "passed", "passed": true}
{"task_id": 41, "completion": "def filter_evennumbers(numbers):\n    return list(filter(lambda x: (x%2 == 0), numbers))\n", "result": "passed", "passed": true}
{"task_id": 42, "completion": "def find_sum(arr):\n    # Create a dictionary to store the count of each element\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Find the sum of elements that appear more than once\n    sum_repeated = 0\n    for num, count in count_dict.items():\n        if count > 1:\n            sum_repeated += num * count\n\n    return sum_repeated\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpoypkokzr.py\", line 18, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    patterns = '[_]+'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmptkyv0tdi.py\", line 11, in <module>\n    assert text_match(\"aab_Abbbc\") == 'Not matched!'\nAssertionError", "passed": false}
{"task_id": 44, "completion": "import re\n\ndef text_match_string(text, pattern):\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpn7x74211.py\", line 9, in <module>\n    assert text_match_string(\" python\")==('Not matched!')\nTypeError: text_match_string() missing 1 required positional argument: 'pattern'", "passed": false}
{"task_id": 45, "completion": "def get_gcd(arr):\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    result = arr[0]\n    for i in range(1, len(arr)):\n        result = gcd(result, arr[i])\n\n    return result\n", "result": "passed", "passed": true}
{"task_id": 46, "completion": "def test_distinct(nums):\n    return len(nums) == len(set(nums))\n", "result": "passed", "passed": true}
{"task_id": 47, "completion": "def compute_last_digit(a, b):\n    # Calculate the last digit of factorial(a)\n    last_digit_a = (a % 10)\n\n    # Calculate the last digit of factorial(b)\n    last_digit_b = (b % 10)\n\n    # Calculate the last digit of factorial(a) / factorial(b)\n    last_digit_result = (last_digit_a * last_digit_b) % 10\n\n    return last_digit_result\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpb_cg_qw0.py\", line 13, in <module>\n    assert compute_last_digit(2,4) == 2\nAssertionError", "passed": false}
{"task_id": 48, "completion": "def odd_bit_set_number(n):\n    # Create a mask with all odd bits set\n    mask = 0xAAAAAAAA\n    # Use bitwise OR to set all odd bits in n\n    result = n | mask\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4l5ppg77.py\", line 8, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(list1, element):\n    result = []\n    for sublist in list1:\n        if sublist[0] == element:\n            result.append(sublist)\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_ycn0qow.py\", line 8, in <module>\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\nAssertionError", "passed": false}
{"task_id": 50, "completion": "def min_length_list(list1, list2):\n    return min(list1, list2, key=lambda x: len(x))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmps5brpha0.py\", line 4, in <module>\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nTypeError: min_length_list() missing 1 required positional argument: 'list2'", "passed": false}
{"task_id": 51, "completion": "def check_equilateral(a, b, c):\n    if a == b == c:\n        return \"The triangle is equilateral\"\n    else:\n        return \"The triangle is not equilateral\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpcdpmf2ac.py\", line 7, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    return base * height\n", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(str1):\n    if str1[0] == str1[-1]:\n        return True\n    else:\n        return False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7ngilk83.py\", line 7, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 54, "completion": "def counting_sort(array1, max_val):\n    m = max_val + 1\n    count = [0] * m                \n\n    for a in array1:\n        count[a] += 1             \n    i = 0\n    for a in range(m):            \n        for c in range(count[a]):  \n            array1[i] = a\n            i += 1\n    return array1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7drpbk_q.py\", line 14, in <module>\n    assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\nTypeError: counting_sort() missing 1 required positional argument: 'max_val'", "passed": false}
{"task_id": 55, "completion": "def tn_gp(a, r, t):\n    \"\"\"\n    Returns the t-nth term of a geometric series.\n\n    Parameters:\n    a (float): the first term of the series\n    r (float): the common ratio of the series\n    t (int): the term number to find\n\n    Returns:\n    float: the t-nth term of the series\n    \"\"\"\n    return a * (r ** (t - 1))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpu1yjro8s.py\", line 15, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def check(n):\n    n = str(n)\n    rev = n[::-1]\n    if int(rev) * 2 - 1 == int(n):\n        return True\n    else:\n        return False\n", "result": "passed", "passed": true}
{"task_id": 57, "completion": "def find_max_num(nums):\n    nums.sort(reverse=True)\n    return int(''.join(map(str, nums)))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkvy_gnxx.py\", line 5, in <module>\n    assert find_max_num([1,2,3],3) == 321\nTypeError: find_max_num() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 58, "completion": "def opposite_signs(num1, num2):\n    return (num1 ^ num2) < 0\n", "result": "passed", "passed": true}
{"task_id": 59, "completion": "def is_octagonal(n):\n    return n * (4 * n - 3)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdd5odsoy.py\", line 4, in <module>\n    assert is_octagonal(5) == 65\nAssertionError", "passed": false}
{"task_id": 60, "completion": "def max_len_sub(arr, n):\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(0, i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdkp0u5c2.py\", line 10, in <module>\n    assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4\nAssertionError", "passed": false}

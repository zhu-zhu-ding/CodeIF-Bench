{"task_id": 11, "completion": "def remove_occ(string, char):\n    if char not in string:\n        return string\n    first_index = string.index(char)\n    last_index = string.rindex(char)\n    return string[:first_index] + string[first_index + 1:] + string[last_index + 1:]\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvgsf2265.py\", line 7, in <module>\n    assert remove_occ(\"hello\",\"l\") == \"heo\"\nAssertionError", "passed": false}
{"task_id": 12, "completion": "def sort_matrix(matrix):\n    if not matrix:\n        return []\n    sorted_matrix = sorted(matrix, key=sum)\n    return sorted_matrix\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 13, "completion": "def count_common(words):\n    if not words:\n        return []\n    word_counts = {}\n    for word in words:\n        if word in word_counts:\n            word_counts[word] += 1\n        else:\n            word_counts[word] = 1\n    most_common = sorted(word_counts.items(), key=lambda x: x[1], reverse=True)\n    return most_common[0][0]\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpiitpon4c.py\", line 12, in <module>\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nAssertionError", "passed": false}
{"task_id": 14, "completion": "def find_volume(base, height, length):\n    if base <= 0 or height <= 0 or length <= 0:\n        return \"Error: Dimensions must be positive values.\"\n    else:\n        return (base * height * length) / 2\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 15, "completion": "def split_lowerstring(s):\n    if not any(char.islower() for char in s):\n        return []\n    return [word for word in s.split(' ') if any(char.islower() for char in word)]\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6g_1ccp4.py\", line 5, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "completion": "def text_lowercase_underscore(text):\n    if not text:\n        return 'Not matched!'\n    import re\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvbsb594z.py\", line 10, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    return 4 * side_length\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(str1, str2):\n    if not str2:\n        return str1\n    return ''.join(char for char in str1 if char not in str2)\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 19, "completion": "def test_duplicate(arr):\n    if not arr:\n        return False\n    if len(arr) == 1:\n        return False\n    return len(arr) != len(set(arr))\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(n):\n    if n <= 0:\n        return False\n    x = 1\n    while x <= n:\n        if x * 2**x - 1 == n:\n            return True\n        x += 1\n    return False\n", "requirement": "Edge Case Handling", "result": "timed out", "passed": false}
{"task_id": 21, "completion": "def multiples_of_num(n, m):\n    if m == 0:\n        return []\n    else:\n        return [n * i for i in range(1, m + 1)]\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpn0sxh0ab.py\", line 6, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "completion": "def find_first_duplicate(nums):\n    if not nums:\n        return -1\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists):\n    if not list_of_lists or all(not sublist for sublist in list_of_lists):\n        return 0\n    return max(sum(sublist) for sublist in list_of_lists)\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 24, "completion": "def binary_to_decimal(binary_string):\n    if not binary_string:\n        return 0\n    return int(binary_string, 2)\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpziwsuvbb.py\", line 5, in <module>\n    assert binary_to_decimal(100) == 4\n  File \"/tmp/tmpziwsuvbb.py\", line 4, in binary_to_decimal\n    return int(binary_string, 2)\nTypeError: int() can't convert non-string with explicit base", "passed": false}
{"task_id": 25, "completion": "def find_product(arr):\n    if not arr:\n        return 1\n    product = 1\n    for num in arr:\n        if arr.count(num) == 1:\n            product *= num\n    return product\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpuu5g1c0r.py\", line 9, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(list_of_tuples, k):\n    if not list_of_tuples:\n        return False\n    for tup in list_of_tuples:\n        if len(tup) != k:\n            return False\n    return True\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6euewy9d.py\", line 8, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "completion": "def remove(list_of_strings):\n    if not list_of_strings:\n        return []\n    return [''.join(filter(lambda x: not x.isdigit(), s)) for s in list_of_strings]\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 28, "completion": "def binomial_coeff(n, k):\n    if k == 0 or k == n:\n        return 1\n    if k > n:\n        return 0\n    return binomial_coeff(n - 1, k - 1) + binomial_coeff(n - 1, k)\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 29, "completion": "def get_odd_occurrence(arr):\n    if not arr:\n        return None\n    res = 0\n    for element in arr:\n        res ^= element\n    return res\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7jsag449.py\", line 8, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    if not s:\n        return 0\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n    return count\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 31, "completion": "import heapq\n\ndef func(lists, k):\n    if not any(lists):\n        return []\n\n    # Create a list of tuples (frequency, number) for each list\n    lists = [[(num, i) for num in l] for i, l in enumerate(lists)]\n    # Flatten the list of lists into a single list\n    flat_list = [item for sublist in lists for item in sublist]\n\n    # Use a heap to find the top k frequent numbers\n    heap = []\n    for num, i in flat_list:\n        if len(heap) < k:\n            heapq.heappush(heap, (num, i))\n        else:\n            heapq.heappushpop(heap, (num, i))\n\n    # Extract the top k frequent numbers\n    top_k = [heapq.heappop(heap) for _ in range(len(heap))]\n    top_k.sort(key=lambda x: x[1])  # Sort by the original index\n    return [num for num, _ in top_k]\n\n# Example usage:\nlists = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\nk = 2\nprint(func(lists, k))  # Output: [3, 2]\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpuz21clin.py\", line 24, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    max_prime = -1\n    while n % 2 == 0:\n        max_prime = 2\n        n >>= 1  # equivalent to n /= 2\n\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n / i\n\n    if n > 2:\n        max_prime = n\n\n    return int(max_prime)\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpzjkxqzvm.py\", line 9, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "completion": "def find_missing(arr):\n    if not arr:\n        return 1\n    if arr[0] != 1:\n        return 1\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i - 1] > 1:\n            return arr[i] - 1\n    return arr[-1] + 1\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpzntlv2ab.py\", line 10, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    if n == 1:\n        return 2\n    else:\n        return n * (n + 1)\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 36, "completion": "def find_nth_digit(num1, num2, n):\n    if num1 == 0:\n        return 0\n    if n == 0:\n        return 0\n    if n < 0:\n        return -1\n    if num2 == 0:\n        return -1\n    if num1 < num2:\n        return -1\n    if num1 % num2 == 0:\n        return 0\n    remainder = num1 % num2\n    while remainder != 0 and n > 0:\n        remainder *= 10\n        digit = remainder // num2\n        remainder %= num2\n        n -= 1\n    if n == 0:\n        return digit\n    else:\n        return -1\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpw7bdjh8a.py\", line 24, in <module>\n    assert find_nth_digit(1,2,1) == 5\nAssertionError", "passed": false}
{"task_id": 37, "completion": "def sort_mixed_list(mixed_list):\n    if not mixed_list:\n        return []\n    else:\n        return sorted(mixed_list, key=lambda x: (isinstance(x, int), x))\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_kkfmh_1.py\", line 6, in <module>\n    assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nAssertionError", "passed": false}
{"task_id": 38, "completion": "def div_even_odd(nums):\n    even_num = next((num for num in nums if num % 2 == 0), None)\n    odd_num = next((num for num in nums if num % 2 != 0), None)\n\n    if even_num is None or odd_num is None:\n        return None\n    if even_num == 0:\n        return 0\n    return even_num / odd_num\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 39, "completion": "def rearrange_string(s):\n    if not s:\n        return ''\n    if len(set(s)) == 1:\n        return ''\n    s = sorted(s)\n    result = ''\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            continue\n        result += s[i]\n    result += s[-1]\n    return result\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpyayyz3bm.py\", line 14, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "completion": "import collections\n\ndef freq_element(list_of_lists):\n    if not list_of_lists:\n        return {}\n    flat_list = [item for sublist in list_of_lists for item in sublist]\n    freq_dict = collections.Counter(flat_list)\n    return freq_dict\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 41, "completion": "def filter_evennumbers(nums):\n    if not nums:\n        return []\n    return list(filter(lambda x: x % 2 == 0, nums))\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 42, "completion": "def find_sum(arr):\n    if not arr:\n        return 0\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    return sum(key * value for key, value in count_dict.items() if value > 1)\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpabu0ujv6.py\", line 11, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    if not text:\n        return 'Not matched!'\n    patterns = '[_]+'\n    if re.search(patterns, text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpx28hy_68.py\", line 10, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 44, "completion": "def text_match_string(text, pattern):\n    \"\"\"\n    Matches a word at the beginning of a string.\n\n    Parameters:\n    text (str): The input string to be matched.\n    pattern (str): The word pattern to be matched at the beginning of the string.\n\n    Returns:\n    bool: True if the pattern matches at the beginning of the string, False otherwise.\n    \"\"\"\n    if not text or not pattern:\n        return False\n    return text.startswith(pattern)\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmptjohjj7u.py\", line 5, in <module>\n    assert text_match_string(\" python\")==('Not matched!')\nTypeError: text_match_string() missing 1 required positional argument: 'pattern'", "passed": false}
{"task_id": 46, "completion": "def test_distinct(nums):\n    if not nums:\n        return True\n    return len(nums) == len(set(nums))\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 47, "completion": "def compute_last_digit(a, b):\n    if a == b:\n        return 1\n    a %= 10\n    b %= 10\n    if a == 0 or b == 0:\n        return 0\n    if a == 1 or b == 1:\n        return 1\n    if a == 5 or b == 5:\n        return 5\n    if a == 6 or b == 6:\n        return 6\n    if a == 2 or b == 2:\n        return 2\n    if a == 4 or b == 4:\n        return 4\n    if a == 3 or b == 3:\n        return 3\n    if a == 7 or b == 7:\n        return 7\n    if a == 8 or b == 8:\n        return 8\n    return -1\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkdpgtzo1.py\", line 27, in <module>\n    assert compute_last_digit(1,2) == 2\nAssertionError", "passed": false}
{"task_id": 48, "completion": "def odd_bit_set_number(n):\n    if n == 0:\n        return 1\n    result = 0\n    while n > 0:\n        result |= (n & 1)\n        n >>= 1\n        if n > 0:\n            result |= (n & 1)\n            n >>= 1\n    return result\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpeizg5tlb.py\", line 12, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(list1, index):\n    result = []\n    for sublist in list1:\n        if index < len(sublist):\n            result.append(sublist[index])\n    return result\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 50, "completion": "def min_length_list(lists):\n    if not lists:\n        return None\n    return min(lists, key=lambda x: (len(x), x))\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpyhxo4d09.py\", line 5, in <module>\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nAssertionError", "passed": false}
{"task_id": 51, "completion": "def check_equilateral(a, b, c):\n    if a == 0 and b == 0 and c == 0:\n        return False\n    if a == b == c:\n        return True\n    else:\n        return False\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    if base <= 0 or height <= 0:\n        return 0\n    return base * height\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(str1):\n    if str1 == '':\n        return 'Equal'\n    elif str1[0] == str1[-1]:\n        return 'Equal'\n    else:\n        return 'Not Equal'\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 54, "completion": "def counting_sort(arr):\n    if not arr:\n        return []\n    if len(arr) == 1:\n        return arr\n\n    max_val = max(arr)\n    count = [0] * (max_val + 1)\n    output = [0] * len(arr)\n\n    for num in arr:\n        count[num] += 1\n\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n\n    for i in range(len(arr) - 1, -1, -1):\n        output[count[arr[i]] - 1] = arr[i]\n        count[arr[i]] -= 1\n\n    return output\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 55, "completion": "def tn_gp(a, r, n):\n    if r == 0:\n        return 0 if n > 1 else a\n    else:\n        return a * (r ** (n - 1))\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1khbu2oq.py\", line 6, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def check(n):\n    n = str(n)\n    rev = n[::-1]\n    if int(n) == 2 * int(rev) - 1:\n        return True\n    else:\n        return False\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpu4v0wa7n.py\", line 12, in <module>\n    assert check(1) == False\nAssertionError", "passed": false}
{"task_id": 57, "completion": "def find_max_num(digits):\n    if not digits:\n        return 0\n    digits.sort(reverse=True)\n    return int(''.join(map(str, digits)))\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9dv1z3a2.py\", line 6, in <module>\n    assert find_max_num([1,2,3],3) == 321\nTypeError: find_max_num() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 58, "completion": "def opposite_signs(x, y):\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1eyfdh7t.py\", line 9, in <module>\n    assert opposite_signs(0, -1) == True\nAssertionError", "passed": false}
{"task_id": 59, "completion": "def is_octagonal(n):\n    if n == 1:\n        return 1\n    else:\n        return n * (5 * n - 3) // 2\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpv7jlapag.py\", line 6, in <module>\n    assert is_octagonal(5) == 65\nAssertionError", "passed": false}
{"task_id": 60, "completion": "def max_len_sub(arr):\n    if not arr:\n        return 0\n    n = len(arr)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpff269lj_.py\", line 11, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}

{"task_id": 11, "completion": "def remove_occ(s, c):\n    first_index = s.find(c)\n    last_index = s.rfind(c)\n    if first_index != -1 and last_index != -1:\n        s = s[:first_index] + s[first_index + 1:]\n        s = s[:last_index] + s[last_index + 1:]\n    return s\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9kvuu1su.py\", line 8, in <module>\n    assert remove_occ(\"hello\",\"l\") == \"heo\"\nAssertionError", "passed": false}
{"task_id": 14, "completion": "def find_volume(base, height, length):\n    return (base * height * length) / 2\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 15, "completion": "def split_lowerstring(s):\n    for i, char in enumerate(s):\n        if char.islower():\n            return s[:i], s[i:]\n    return s, ''\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2d7g0htc.py\", line 6, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "completion": "def text_lowercase_underscore(text):\n    return re.findall(r'[a-z]+_[a-z]+', text)\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpr7trucal.py\", line 3, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n  File \"/tmp/tmpr7trucal.py\", line 2, in text_lowercase_underscore\n    return re.findall(r'[a-z]+_[a-z]+', text)\nNameError: name 're' is not defined", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    return 4 * side_length\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(n):\n    return n == (n * 2**n - 1)\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4cvx67h9.py\", line 3, in <module>\n    assert is_woodall(383) == True\nAssertionError", "passed": false}
{"task_id": 21, "completion": "def multiples_of_num(n, m):\n    return [i * n for i in range(1, m + 1)]\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7k9x1mr8.py\", line 3, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 24, "completion": "def binary_to_decimal(binary_num):\n    binary_num = str(binary_num)\n    decimal_num = 0\n    for digit in binary_num:\n        decimal_num = decimal_num * 2 + int(digit)\n    return decimal_num\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpzih6bf14.py\", line 12, in <module>\n    assert cc_visit(inspect.getsource(binary_to_decimal))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(n):\n    if n == 0:\n        return 0\n    else:\n        return n % 2 + 10 * decimal_to_binary(int(n / 2))\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwc3csj2r.py\", line 11, in <module>\n    assert cc_visit(inspect.getsource(decimal_to_binary))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    return n * (n + 1) // 2\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpb3403qys.py\", line 3, in <module>\n    assert find_rect_num(4) == 20\nAssertionError", "passed": false}
{"task_id": 36, "completion": "def find_nth_digit(num1, num2, n):\n    \"\"\"\n    Find the nth digit in the proper fraction of two given numbers.\n\n    Args:\n    num1 (int): The numerator of the fraction.\n    num2 (int): The denominator of the fraction.\n    n (int): The position of the digit to find.\n\n    Returns:\n    int: The nth digit in the proper fraction.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n\n    # Calculate the nth digit\n    result = (num1 * (10 ** n)) // num2\n\n    # Return the nth digit\n    return result\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmput4my3vg.py\", line 10, in <module>\n    assert find_nth_digit(5,6,5) == 3\nAssertionError", "passed": false}
{"task_id": 38, "completion": "def div_even_odd(nums):\n    even = [x for x in nums if x % 2 == 0]\n    odd = [x for x in nums if x % 2 != 0]\n    if even and odd:\n        return even[0] / odd[0]\n    else:\n        return None\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpcyd0wjpr.py\", line 13, in <module>\n    assert cc_visit(inspect.getsource(div_even_odd))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 40, "completion": "from collections import Counter\n\ndef freq_element(list_of_lists):\n    # Flatten the list of lists into a single list\n    flat_list = [item for sublist in list_of_lists for item in sublist]\n    # Use Counter to count frequencies\n    frequency = Counter(flat_list)\n    return frequency\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4mr1grsv.py\", line 13, in <module>\n    assert cc_visit(inspect.getsource(freq_element))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 42, "completion": "def find_sum(arr):\n    from collections import Counter\n    count = Counter(arr)\n    return sum(key for key, value in count.items() if value > 1)\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpaeoosgr5.py\", line 5, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    patterns = '[_]+'\n    if re.search(patterns, text):\n        return True\n    else:\n        return False\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqd_omxck.py\", line 8, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 45, "completion": "def get_gcd(arr):\n    from math import gcd\n    result = arr[0]\n    for i in arr[1:]:\n        result = gcd(result, i)\n    return result\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmputkifu19.py\", line 12, in <module>\n    assert cc_visit(inspect.getsource(get_gcd))[0].complexity <=1\nAssertionError", "passed": false}
{"task_id": 47, "completion": "def compute_last_digit(a, b):\n    \"\"\"\n    Compute the last digit of (factorial(a) % factorial(b))\n    \"\"\"\n    if a == 0:\n        return 1\n    if a < b:\n        return 0\n    if a == b:\n        return a + 1\n    if a > b:\n        return (a + 1) % 10\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpeuf5ek8j.py\", line 10, in <module>\n    assert compute_last_digit(2,4) == 2\nAssertionError", "passed": false}
{"task_id": 51, "completion": "def check_equilateral(a, b, c):\n    if a == b == c:\n        return True\n    else:\n        return False\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppqbmciuf.py\", line 11, in <module>\n    assert cc_visit(inspect.getsource(check_equilateral))[0].complexity ==1\nAssertionError", "passed": false}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    \"\"\"Calculate the area of a parallelogram.\"\"\"\n    return base * height\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(text):\n    return text[0] == text[-1]\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpd66s2_1x.py\", line 3, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def check(n):\n    return n + 1 == int(str(n)[::-1]) * 2\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 58, "completion": "def opposite_signs(x, y):\n    return (x ^ y) < 0\n", "requirement": "Code Complexity", "result": "passed", "passed": true}

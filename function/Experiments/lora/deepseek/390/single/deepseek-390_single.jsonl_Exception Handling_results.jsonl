{"task_id": 11, "completion": "def remove_occ(text, char):\n    if len(char) != 1:\n        raise ValueError('Second parameter must be a single character.')\n    first_index = text.find(char)\n    last_index = text.rfind(char)\n    if first_index == -1 or last_index == -1:\n        return text\n    return text[:first_index] + text[first_index + 1:last_index] + text[last_index + 1:]\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 12, "completion": "def sort_matrix(matrix):\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise TypeError('Input must be a list of lists.')\n    if not all(isinstance(num, int) for row in matrix for num in row):\n        raise TypeError('All elements in the matrix must be integers.')\n    return sorted(matrix, key=sum)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 13, "completion": "def count_common(words):\n    if not isinstance(words, list) or not all(isinstance(word, str) for word in words):\n        raise TypeError('Input must be a list of strings.')\n    word_counts = {}\n    for word in words:\n        if word in word_counts:\n            word_counts[word] += 1\n        else:\n            word_counts[word] = 1\n    most_common_word = max(word_counts, key=word_counts.get)\n    return most_common_word\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5bm8ekr_.py\", line 12, in <module>\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nAssertionError", "passed": false}
{"task_id": 14, "completion": "def find_volume(base, height, length):\n    if not all(isinstance(x, (int, float)) for x in (base, height, length)):\n        raise ValueError('All dimensions must be positive numbers.')\n    if not all(x > 0 for x in (base, height, length)):\n        raise ValueError('All dimensions must be positive numbers.')\n    return (base * height * length) / 2\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 15, "completion": "def split_lowerstring(s):\n    if not isinstance(s, str):\n        raise TypeError('Input must be a string.')\n    return [word for word in s.split() if word.islower()]\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmp4lwu8blf.py\", line 8\n    try: split_lowerstring(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 16, "completion": "def text_lowercase_underscore(text):\n    if not isinstance(text, str):\n        raise TypeError('Input must be a string.')\n    import re\n    pattern = r'[a-z]+_[a-z]+'\n    matches = re.findall(pattern, text)\n    return matches\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpr53rtihm.py\", line 8, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    return 4 * side_length\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(str1, str2):\n    if not isinstance(str1, str) or not isinstance(str2, str):\n        raise TypeError('Both inputs must be strings.')\n    return ''.join(c for c in str1 if c not in str2)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 19, "completion": "def test_duplicate(arr):\n    if not isinstance(arr, list):\n        raise ValueError('Input must be a list of integers')\n    for i in arr:\n        if not isinstance(i, int):\n            raise ValueError('Input must be a list of integers')\n    return len(arr) != len(set(arr))\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpfuupob1o.py\", line 12, in <module>\n    test_duplicate(None)\n  File \"/tmp/tmpfuupob1o.py\", line 3, in test_duplicate\n    raise ValueError('Input must be a list of integers')\nValueError: Input must be a list of integers", "passed": false}
{"task_id": 20, "completion": "def is_woodall(n):\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer.')\n    if n < 0:\n        return False\n    return (n * 2**n - 1) % n == 0\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmy1_r30t.py\", line 7, in <module>\n    assert is_woodall(383) == True\nAssertionError", "passed": false}
{"task_id": 21, "completion": "def multiples_of_num(m, n):\n    if m < 0 or n < 0:\n        raise ValueError(\"Both m and n must be non-negative.\")\n    return [i * n for i in range(1, m + 1)]\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 22, "completion": "def find_first_duplicate(nums):\n    if not isinstance(nums, list) or not all(isinstance(x, int) for x in nums):\n        raise TypeError('Input must be a list of integers.')\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp510jlnhs.py\", line 11, in <module>\n    assert find_first_duplicate([1, 2, 3, 4])==-1\nAssertionError", "passed": false}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists):\n    if not isinstance(list_of_lists, list):\n        raise TypeError('Input must be a list of lists.')\n    for sublist in list_of_lists:\n        if not isinstance(sublist, list):\n            raise TypeError('All elements in the input list must be lists.')\n        for element in sublist:\n            if not isinstance(element, int):\n                raise TypeError('All elements in the sublists must be integers.')\n    return max(map(sum, list_of_lists))\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpv1bxfw_9.py\", line 14\n    try: maximum_sum([[1, 2], [3, 'a']]); assert False, 'Expected TypeError' except TypeError: pass\n                                                                             ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 24, "completion": "def binary_to_decimal(binary_num):\n    if not isinstance(binary_num, str):\n        raise ValueError('Invalid binary number: Input must be a string.')\n    if not all(digit in '01' for digit in binary_num):\n        raise ValueError('Invalid binary number: Input must be a valid binary string.')\n    decimal_num = 0\n    for digit in binary_num:\n        decimal_num = decimal_num * 2 + int(digit)\n    return decimal_num\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpxqte9srk.py\", line 13\n    try: binary_to_decimal('102'); assert False, 'Expected ValueError' except ValueError as e: assert str(e) == 'Invalid binary number'\n                                                                       ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 25, "completion": "def find_product(arr):\n    if not isinstance(arr, list) or not all(isinstance(x, int) for x in arr):\n        raise TypeError('Input must be a list of integers.')\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    product = 1\n    for num, count in count_dict.items():\n        if count == 1:\n            product *= num\n    return product\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpfzif5q00.py\", line 15, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(list_of_tuples, k):\n    if not isinstance(list_of_tuples, list) or not all(isinstance(t, tuple) for t in list_of_tuples):\n        raise TypeError('Input must be a list of tuples.')\n    if not isinstance(k, int):\n        raise TypeError('k must be an integer.')\n    for t in list_of_tuples:\n        if len(t) != k:\n            return False\n    return True\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplnj8iita.py\", line 10, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "completion": "def remove(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError('Input must be a list.')\n    for element in input_list:\n        if not isinstance(element, str):\n            raise TypeError('All elements in the list must be strings.')\n    return [''.join(filter(lambda x: not x.isdigit(), s)) for s in input_list]\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 28, "completion": "def binomial_coeff(n, k):\n    if n < 0 or k < 0:\n        raise ValueError('Inputs must be non-negative.')\n    if k > n:\n        raise ValueError('k must not be greater than n.')\n    res = 1\n    if (k > n - k):\n        k = n - k\n    for x in range(0 , k):\n        res = res * (n - x)\n        res = res // (x + 1)\n    return res\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwv8ro0zo.py\", line 16, in <module>\n    try: binomial_coeff(-1, 2)\n  File \"/tmp/tmpwv8ro0zo.py\", line 3, in binomial_coeff\n    raise ValueError('Inputs must be non-negative.')\nValueError: Inputs must be non-negative.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpwv8ro0zo.py\", line 17, in <module>\n    except ValueError as e: assert str(e) == 'Inputs must be non-negative and k must not be greater than n'\nAssertionError", "passed": false}
{"task_id": 29, "completion": "def get_odd_occurrence(arr):\n    if not isinstance(arr, list) or not all(isinstance(x, int) for x in arr):\n        raise TypeError('Input must be a list of integers.')\n    res = 0\n    for element in arr:\n        res ^= element\n    return res\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpln1ozn0g.py\", line 8, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    if not isinstance(s, str):\n        raise TypeError('Input must be a string.')\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n    return count\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmp0aiggujj.py\", line 14\n    try: count_substring_with_equal_ends(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                                  ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 31, "completion": "import heapq\n\ndef func(lists, k):\n    if k > sum(len(l) for l in lists):\n        raise ValueError('k cannot be greater than the number of distinct integers')\n    counter = {}\n    for l in lists:\n        for num in l:\n            counter[num] = counter.get(num, 0) + 1\n    heap = [(v, k) for k, v in counter.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpe200m4bp.py\", line 12, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError('Input must be a positive integer')\n\n    max_prime = -1\n\n    while n % 2 == 0:\n        max_prime = 2\n        n >>= 1\n\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n / i\n\n    if n > 2:\n        max_prime = n\n\n    return int(max_prime)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(n):\n    if not isinstance(n, int) or n < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmj6ocanw.py\", line 11, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "completion": "def find_missing(arr):\n    if not all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1)):\n        raise ValueError('Input list must be sorted.')\n    n = len(arr) + 1\n    total = n * (n + 1) // 2\n    return total - sum(arr)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmptgn1k6po.py\", line 7, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError('Input must be a positive integer.')\n    return n * (n + 1) // 2\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpn10xjrs0.py\", line 5, in <module>\n    assert find_rect_num(4) == 20\nAssertionError", "passed": false}
{"task_id": 36, "completion": "def find_nth_digit(n, m):\n    if m == 0:\n        raise ValueError('Denominator cannot be zero')\n    return n // m\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpbx147uc8.py\", line 5, in <module>\n    assert find_nth_digit(1,2,1) == 5\nTypeError: find_nth_digit() takes 2 positional arguments but 3 were given", "passed": false}
{"task_id": 37, "completion": "def sort_mixed_list(mixed_list):\n    if not isinstance(mixed_list, list):\n        raise TypeError('Input must be a list.')\n    for item in mixed_list:\n        if not isinstance(item, (int, str)):\n            raise TypeError('List must contain only integers and strings.')\n    return sorted(mixed_list, key=lambda x: (isinstance(x, str), x))\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 38, "completion": "def div_even_odd(nums):\n    even = [x for x in nums if x % 2 == 0]\n    odd = [x for x in nums if x % 2 != 0]\n    if not even or not odd:\n        raise ValueError('List must contain at least one even and one odd number.')\n    return even[0] / odd[0]\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpa4bni9m8.py\", line 10\n    try: div_even_odd([2, 4, 6]); assert False; except ValueError as e: assert str(e) == 'List must contain at least one even and one odd number.'\n                                                ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 39, "completion": "def rearrange_string(s):\n    if not isinstance(s, str):\n        raise ValueError('Input must be a string.')\n    if not s.islower():\n        raise ValueError('Input string must contain only lowercase letters.')\n    s = list(s)\n    s.sort()\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return False\n    return True\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpicz2j0mp.py\", line 12, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "completion": "import collections\n\ndef freq_element(list_of_lists):\n    if not isinstance(list_of_lists, list) or not all(isinstance(sub_list, list) for sub_list in list_of_lists):\n        raise TypeError('Input must be a list of lists.')\n    flat_list = [item for sublist in list_of_lists for item in sublist]\n    freq_dict = collections.Counter(flat_list)\n    return freq_dict\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmp6jh98a6g.py\", line 11\n    try: freq_element('not a list'); assert False; except TypeError: assert True\n                                                   ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 41, "completion": "def filter_evennumbers(numbers):\n    if not isinstance(numbers, list) or not all(isinstance(num, int) for num in numbers):\n        raise TypeError('Input must be a list of integers.')\n    return list(filter(lambda x: x % 2 == 0, numbers))\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 42, "completion": "def find_sum(arr):\n    if not isinstance(arr, list):\n        raise TypeError('Input must be a list.')\n    res = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] == arr[j]:\n                res += arr[i]\n    return res\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8b7hiy2r.py\", line 10, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    if not isinstance(text, str):\n        raise TypeError('Input must be a string.')\n    patterns = '[_]+'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6c9x8asi.py\", line 11, in <module>\n    assert text_match(\"aab_Abbbc\") == 'Not matched!'\nAssertionError", "passed": false}
{"task_id": 44, "completion": "def text_match_string(text):\n    if not isinstance(text, str):\n        raise TypeError('Input must be a string.')\n    patterns = ['hackerrank', 'hackerearth']\n    for pattern in patterns:\n        if re.match(pattern, text):\n            return True\n    return False\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpi2mz74fs.py\", line 12\n    try: text_match_string(123); assert False, 'TypeError not raised' except TypeError: pass\n                                                                      ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 45, "completion": "def get_gcd(arr):\n    if not arr:\n        raise ValueError('Input list cannot be empty.')\n    def gcd(a, b):\n        while b != 0:\n            a, b = b, a % b\n        return a\n\n    num1 = arr[0]\n    num2 = arr[1]\n    result = gcd(num1, num2)\n\n    for i in range(2, len(arr)):\n        result = gcd(result, arr[i])\n\n    return result\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 46, "completion": "def test_distinct(nums):\n    if not isinstance(nums, list):\n        raise TypeError('Input must be a list.')\n    for num in nums:\n        if not isinstance(num, int):\n            raise TypeError('All elements in the list must be integers.')\n    return len(nums) == len(set(nums))\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 47, "completion": "def compute_last_digit(a, b):\n    if a > b:\n        raise ValueError('a should not be greater than b')\n    a %= 10\n    b %= 10\n    if a == 0:\n        return 0\n    if b == 0:\n        return 1\n    if a == 1:\n        return 1\n    if a == 5 or a == 6:\n        return a\n    if a == 2 or a == 3 or a == 7 or a == 8:\n        if b < 4:\n            return a\n        if b < 9:\n            return a * a % 10\n        if b % 4 == 0:\n            return 6\n        if b % 4 == 1:\n            return a\n        if b % 4 == 2:\n            return a * a % 10\n        if b % 4 == 3:\n            return a * a * a % 10\n    return -1\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp02sww7v3.py\", line 28, in <module>\n    assert compute_last_digit(2,4) == 2\nAssertionError", "passed": false}
{"task_id": 48, "completion": "def odd_bit_set_number(n):\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer.')\n    x = 0xAAAAAAAA\n    return (n | x)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8qygbmef.py\", line 6, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(list1, index):\n    result = []\n    for sublist in list1:\n        try:\n            result.append(sublist[index])\n        except IndexError:\n            raise IndexError('Index out of range for sublist')\n    return result\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 50, "completion": "def min_length_list(list_of_lists):\n    if not isinstance(list_of_lists, list) or not all(isinstance(sub_list, list) for sub_list in list_of_lists):\n        raise ValueError('Input must be a list of lists.')\n    return min(list_of_lists, key=lambda x: len(x))\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6ft_lwfx.py\", line 5, in <module>\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nAssertionError", "passed": false}
{"task_id": 51, "completion": "def check_equilateral(a, b, c):\n    if not all(isinstance(i, int) and i > 0 for i in [a, b, c]):\n        raise ValueError('All inputs must be positive integers.')\n    if a == b == c:\n        return 'The triangle is equilateral.'\n    else:\n        return 'The triangle is not equilateral.'\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_cxcoljp.py\", line 8, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    if not (isinstance(base, (int, float)) and isinstance(height, (int, float))):\n        raise TypeError('Both base and height must be numerical.')\n    return base * height\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(input_string):\n    if not isinstance(input_string, str):\n        raise TypeError('Input must be a string')\n    return input_string[0] == input_string[-1]\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1rstkv3_.py\", line 5, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 54, "completion": "def counting_sort(arr):\n    if not isinstance(arr, list):\n        raise TypeError('Input must be a list.')\n    for i in arr:\n        if not isinstance(i, int):\n            raise TypeError('All elements in the list must be integers.')\n    max_val = max(arr)\n    count = [0] * (max_val + 1)\n    for num in arr:\n        count[num] += 1\n    sorted_arr = []\n    for i, freq in enumerate(count):\n        sorted_arr.extend([i] * freq)\n    return sorted_arr\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 55, "completion": "def tn_gp(a, r, n):\n    if n < 1:\n        raise ValueError('Term number must be greater than 0')\n    tn = a * (r ** (n - 1))\n    return tn\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpo0oxglwv.py\", line 6, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def check(n):\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer.')\n    n_str = str(n)\n    reversed_n = int(n_str[::-1])\n    return n == reversed_n - 1\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpf8746cb8.py\", line 9, in <module>\n    assert check(73) == True\nAssertionError", "passed": false}
{"task_id": 57, "completion": "def find_max_num(digits, num_digits):\n    if num_digits > len(digits):\n        raise ValueError('Number of digits exceeds the length of the list.')\n    digits.sort(reverse=True)\n    max_num = int(''.join(map(str, digits[:num_digits])))\n    return max_num\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 58, "completion": "def opposite_signs(x, y):\n    if not all(isinstance(i, int) for i in [x, y]):\n        raise TypeError('Both inputs must be integers.')\n    return (x < 0) != (y < 0)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 59, "completion": "def is_octagonal(n):\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError('Input must be a positive integer.')\n    return n * (4 * n - 3)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphwpef4tn.py\", line 5, in <module>\n    assert is_octagonal(5) == 65\nAssertionError", "passed": false}
{"task_id": 60, "completion": "def max_len_sub(arr, k):\n    if not isinstance(arr, list):\n        raise TypeError('The first parameter must be a list.')\n    if not isinstance(k, int):\n        raise TypeError('The second parameter must be an integer.')\n    n = len(arr)\n    dp = [0] * n\n    dp[0] = 1\n    max_len = 1\n    for i in range(1, n):\n        dp[i] = 1\n        for j in range(i):\n            if abs(arr[i] - arr[j]) <= k:\n                dp[i] = max(dp[i], dp[j] + 1)\n        max_len = max(max_len, dp[i])\n    return max_len\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpsuy2jptp.py\", line 17, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nAssertionError", "passed": false}

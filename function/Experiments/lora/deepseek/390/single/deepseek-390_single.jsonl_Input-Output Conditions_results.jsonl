{"task_id": 14, "completion": "def find_volume(base_area, height, length):\n    if base_area <= 0 or height <= 0 or length <= 0:\n        raise ValueError(\"All inputs must be positive numbers.\")\n    volume = base_area * height * length\n    return volume\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpzdk34bk0.py\", line 6, in <module>\n    assert find_volume(10,8,6) == 240\nAssertionError", "passed": false}
{"task_id": 15, "completion": "def split_lowerstring(s):\n    return ''.join(s.split(s.lower())).split()\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9tr1f4so.py\", line 3, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "completion": "def text_lowercase_underscore(text):\n    import re\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxqibnd0w.py\", line 10, in <module>\n    assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    if not isinstance(side_length, int) or side_length < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    return 4 * side_length\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(s1, s2):\n    if not (s1.isalpha() and s2.isalpha()):\n        raise ValueError('Input strings must only contain alphabetic characters.')\n    return ''.join(c for c in s1 if c not in s2)\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 19, "completion": "def test_duplicate(arr):\n    if not isinstance(arr, list):\n        raise TypeError('Input must be a list of integers.')\n    if len(arr) != len(set(arr)):\n        return True\n    return False\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(n):\n    if n < 0:\n        return False\n    x = 2**n - 1\n    return x == n\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpv8ivb3q_.py\", line 6, in <module>\n    assert is_woodall(383) == True\nAssertionError", "passed": false}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists):\n    max_sum = 0\n    for sublist in list_of_lists:\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n    return max_sum\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 25, "completion": "def find_product(arr):\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    product = 1\n    for num, count in count_dict.items():\n        if count == 1:\n            product *= num\n    return product\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpljeyaojv.py\", line 13, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(list_of_tuples, k):\n    for tup in list_of_tuples:\n        if len(tup) != k:\n            return False\n    return True\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3t5f8eec.py\", line 6, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 28, "completion": "def binomial_coeff(n, k):\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return binomial_coeff(n - 1, k - 1) + binomial_coeff(n - 1, k)\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n    return count\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    max_prime = -1\n    while n % 2 == 0:\n        max_prime = 2\n        n >>= 1\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n / i\n    if n > 2:\n        max_prime = n\n    return int(max_prime)\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 35, "completion": "def find_rect_num(n):\n    return n * (n + 1) // 2\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpa3462x_0.py\", line 3, in <module>\n    assert find_rect_num(4) == 20\nAssertionError", "passed": false}
{"task_id": 36, "completion": "def find_nth_digit(num1, num2, n):\n    fraction = num1 / num2\n    fraction_str = str(fraction)\n    nth_digit = fraction_str[n]\n    return int(nth_digit)\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpfm8tg5o_.py\", line 6, in <module>\n    assert find_nth_digit(1,2,1) == 5\n  File \"/tmp/tmpfm8tg5o_.py\", line 5, in find_nth_digit\n    return int(nth_digit)\nValueError: invalid literal for int() with base 10: '.'", "passed": false}
{"task_id": 38, "completion": "def div_even_odd(nums):\n    even = [x for x in nums if x % 2 == 0]\n    odd = [x for x in nums if x % 2 != 0]\n    if even and odd:\n        return even[0] / odd[0]\n    else:\n        return None\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 39, "completion": "def rearrange_string(s):\n    # Sort the string\n    sorted_s = ''.join(sorted(s))\n    # Initialize the result string\n    result = ''\n    # Iterate over the sorted string\n    for i in range(len(sorted_s)):\n        # If the current character is not the same as the previous one, append it to the result\n        if i == 0 or sorted_s[i] != sorted_s[i - 1]:\n            result += sorted_s[i]\n    # Return the result string\n    return result\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpt7eroff2.py\", line 13, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 42, "completion": "def find_sum(arr):\n    unique_elements = set(arr)\n    repeated_elements = [x for x in arr if arr.count(x) > 1]\n    if not repeated_elements:\n        return 0\n    return sum(repeated_elements)\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpftv18b7p.py\", line 7, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    patterns = '[_]+'\n    if re.search(patterns, text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpw8btitjk.py\", line 8, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 46, "completion": "def test_distinct(numbers):\n    return len(numbers) == len(set(numbers))\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 48, "completion": "def odd_bit_set_number(n):\n    # Create a mask with all odd bits set\n    mask = 0xAAAAAAAA\n    # Use bitwise OR to set all odd bits in n\n    result = n | mask\n    return result\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5abzfb6u.py\", line 7, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(list_2d, index):\n    if not list_2d:\n        return []\n    return [sublist[index] for sublist in list_2d]\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 50, "completion": "def min_length_list(list_of_lists):\n    min_length = min(map(len, list_of_lists))\n    shortest_list = min(list_of_lists, key=lambda x: len(x))\n    return (min_length, shortest_list)\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    if base <= 0 or height <= 0:\n        raise ValueError(\"Base and height must be positive numbers.\")\n    return base * height\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpnoecvj6_.py\", line 9, in <module>\n    assert parallelogram_area(0, 10) == 0\n  File \"/tmp/tmpnoecvj6_.py\", line 3, in parallelogram_area\n    raise ValueError(\"Base and height must be positive numbers.\")\nValueError: Base and height must be positive numbers.", "passed": false}
{"task_id": 53, "completion": "def check_equality(input_string):\n    if not isinstance(input_string, str):\n        raise TypeError('Input must be a string.')\n    if input_string[0] == input_string[-1]:\n        return 'Equal'\n    else:\n        return 'Not Equal'\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 54, "completion": "def counting_sort(arr):\n    if not all(isinstance(x, int) and x >= 0 for x in arr):\n        raise ValueError('Input list must contain only non-negative integers.')\n    \n    max_val = max(arr)\n    count = [0] * (max_val + 1)\n    \n    for num in arr:\n        count[num] += 1\n    \n    sorted_arr = []\n    for i, freq in enumerate(count):\n        sorted_arr.extend([i] * freq)\n    \n    return sorted_arr\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 57, "completion": "def find_max_num(nums, n):\n    nums.sort(reverse=True)\n    max_num = 0\n    for i in range(n):\n        max_num = max_num * 10 + nums[i]\n    return max_num\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 58, "completion": "def opposite_signs(x, y):\n    if not isinstance(x, int) or not isinstance(y, int):\n        raise ValueError('Both inputs must be integers.')\n    return (x ^ y) < 0\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 60, "completion": "def max_len_sub(arr, n):\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpnasoa3b5.py\", line 9, in <module>\n    assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4\nAssertionError", "passed": false}

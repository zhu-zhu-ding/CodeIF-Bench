{"task_id": 11, "requirement": "Code Complexity", "completion": "def remove_occ(s, char):\n    first_index = s.find(char)\n    last_index = s.rfind(char)\n    \n    if first_index != -1 and last_index != -1:\n        s = s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]\n    \n    return s\n", "result": "passed", "passed": true}
{"task_id": 14, "requirement": "Code Complexity", "completion": "def find_volume(base_area, height_prism):\n    return base_area * height_prism\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplv4p3cxw.py\", line 3, in <module>\n    assert find_volume(10,8,6) == 240\nTypeError: find_volume() takes 2 positional arguments but 3 were given", "passed": false}
{"task_id": 15, "requirement": "Code Complexity", "completion": "def split_lowerstring(s):\n    return (word for word in s.split() if word[0].islower())\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpy32byjnk.py\", line 3, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "requirement": "Code Complexity", "completion": "import re\n\ndef text_lowercase_underscore(text):\n    # The regular expression pattern r'\\b[a-z]+_[a-z]+\\b' matches sequences of \n    # one or more lowercase letters followed by an underscore, followed by \n    # one or more lowercase letters, where the sequence is a word boundary.\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    matches = re.findall(pattern, text)\n    return matches\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpowjz5eh4.py\", line 9, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "requirement": "Code Complexity", "completion": "def square_perimeter(side_length):\n    \"\"\"\n    This function calculates the perimeter of a square.\n\n    :param side_length: length of one side of the square\n    :return: perimeter of the square\n    \"\"\"\n    return 4 * side_length\n", "result": "passed", "passed": true}
{"task_id": 20, "requirement": "Code Complexity", "completion": "import math\n\ndef is_woodall(n):\n    if n < 1:\n        return False\n    # Rearrange the Woodall number formula to solve for n:\n    # n = (log(n + 1) + log(2)) / log(2)\n    # We use the math.log function with base 2\n    n_candidate = (math.log(n + 1, 2) + math.log(2, 2)) / math.log(2, 2)\n    # Check if the result is a non-negative integer\n    return n_candidate.is_integer()\n\n# Example usage:\nprint(is_woodall(1))  # True\nprint(is_woodall(3))  # True\nprint(is_woodall(4))  # False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9y54ri1j.py\", line 15, in <module>\n    assert is_woodall(383) == True\nAssertionError", "passed": false}
{"task_id": 21, "requirement": "Code Complexity", "completion": "def multiples_of_num(n, m):\n    return [n * i for i in range(1, m + 1)]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwinmacsw.py\", line 3, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 24, "requirement": "Code Complexity", "completion": "def binary_to_decimal(binary):\n    return int(str(binary), 2)\n", "result": "passed", "passed": true}
{"task_id": 32, "requirement": "Code Complexity", "completion": "def max_prime_factors(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n", "result": "passed", "passed": true}
{"task_id": 33, "requirement": "Code Complexity", "completion": "def decimal_to_binary(n):\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n\n# Test the function\nprint(decimal_to_binary(10))  # Output: 1010\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpm3ocggt8.py\", line 9, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 35, "requirement": "Code Complexity", "completion": "def find_rect_num(n):\n    return n * (n + 1) * (n + 2) // 6\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpnsmai5e2.py\", line 4, in <module>\n    assert find_rect_num(5) == 30\nAssertionError", "passed": false}
{"task_id": 36, "requirement": "Code Complexity", "completion": "def find_nth_digit(num1, num2, n):\n    # Check if n is a valid index\n    if n < 0:\n        return None\n    if n < len(str(num1)):\n        # Return the nth digit from num1\n        return str(num1)[n]\n    else:\n        # Adjust n to start from the beginning of num2\n        n -= len(str(num1))\n        if n < len(str(num2)):\n            # Return the nth digit from num2\n            return str(num2)[n]\n        else:\n            # Return None if n is out of range\n            return None\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpcyly0yf2.py\", line 17, in <module>\n    assert find_nth_digit(1,2,1) == 5\nAssertionError", "passed": false}
{"task_id": 38, "requirement": "Code Complexity", "completion": "def div_even_odd(lst):\n    even = None\n    odd = None\n    for i in lst:\n        if even is None and i % 2 == 0:\n            even = i\n        if odd is None and i % 2 != 0:\n            odd = i\n        if even is not None and odd is not None:\n            return odd / even\n    return \"List does not contain both even and odd numbers\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdj9mwwxf.py\", line 12, in <module>\n    assert div_even_odd([1,3,5,7,4,1,6,8])==4\nAssertionError", "passed": false}
{"task_id": 40, "requirement": "Code Complexity", "completion": "from collections import Counter\n\ndef freq_element(lst):\n    return Counter(item for sublist in lst for item in sublist)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpi978l4du.py\", line 9, in <module>\n    assert cc_visit(inspect.getsource(freq_element))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 42, "requirement": "Code Complexity", "completion": "def find_sum(arr):\n    seen = set()\n    sum_repeated = 0\n    for num in arr:\n        if num in seen:\n            sum_repeated += num\n        else:\n            seen.add(num)\n    return sum_repeated\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpfdwcvz13.py\", line 10, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Code Complexity", "completion": "import re\n\ndef text_match(text):\n    pattern = '[_][a-z]+'\n    return re.search(pattern, text)\n\n# Test the function\nresult = text_match(\"test_string\")\nif result:\n    print(result.group())  # Output: _string\nelse:\n    print(\"No match found\")\n\nresult = text_match(\"testString\")\nif result:\n    print(result.group())  # Output: No match found\nelse:\n    print(\"No match found\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpb2c3rcg6.py\", line 16, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 45, "requirement": "Code Complexity", "completion": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef get_gcd(arr):\n    if not arr:\n        raise ValueError(\"Array must not be empty\")\n    result = arr[0]\n    for num in arr[1:]:\n        result = gcd(result, num)\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpddyf9wp1.py\", line 17, in <module>\n    assert cc_visit(inspect.getsource(get_gcd))[0].complexity <=1\nAssertionError", "passed": false}
{"task_id": 47, "requirement": "Code Complexity", "completion": "def compute_last_digit(a, b):\n    # Count the number of 2s and 5s in the factors of a!\n    count_2 = 0\n    count_5 = 0\n    for i in range(2, a + 1):\n        j = i\n        while j % 2 == 0:\n            j //= 2\n            count_2 += 1\n        while j % 5 == 0:\n            j //= 5\n            count_5 += 1\n\n    # Count the number of 2s and 5s in the factors of b!\n    count_2_b = 0\n    count_5_b = 0\n    for i in range(2, b + 1):\n        j = i\n        while j % 2 == 0:\n            j //= 2\n            count_2_b += 1\n        while j % 5 == 0:\n            j //= 5\n            count_5_b += 1\n\n    # The last digit is determined by the difference in the number of 2s and 5s\n    last_digit = (count_2 - count_2_b + count_5 - count_5_b) % 10\n    return last_digit\n\n# Test the function\nprint(compute_last_digit(5, 7))  # Output: 5\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpm4yliv3w.py\", line 29, in <module>\n    assert compute_last_digit(2,4) == 2\nAssertionError", "passed": false}
{"task_id": 51, "requirement": "Code Complexity", "completion": "def check_equilateral(a, b, c):\n    if a == b == c:\n        return True\n    else:\n        return False\n\n# Example usage:\nresult = check_equilateral(3, 3, 3)\nif result:\n    print(\"The triangle is equilateral.\")\nelse:\n    print(\"The triangle is not equilateral.\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpee_oquji.py\", line 17, in <module>\n    assert cc_visit(inspect.getsource(check_equilateral))[0].complexity ==1\nAssertionError", "passed": false}
{"task_id": 52, "requirement": "Code Complexity", "completion": "def parallelogram_area(base, height):\n    return base * height\n", "result": "passed", "passed": true}
{"task_id": 53, "requirement": "Code Complexity", "completion": "def check_equality(input_string):\n    return input_string[0] == input_string[-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpuf83d2bs.py\", line 3, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 56, "requirement": "Code Complexity", "completion": "def check(n):\n    # Convert the number to a string, reverse it, and convert it back to an integer\n    reverse = int(str(n)[::-1])\n\n    # Check if the number is one less than twice its reverse\n    return n == 2 * reverse - 1\n", "result": "passed", "passed": true}
{"task_id": 58, "requirement": "Code Complexity", "completion": "def opposite_signs(num1, num2):\n    return num1 * num2 < 0\n", "result": "passed", "passed": true}

{"task_id": 14, "requirement": "Input-Output Conditions", "completion": "def find_volume(base_area, height, length):\n    if base_area <= 0 or height <= 0 or length <= 0:\n        raise ValueError(\"All inputs must be positive numbers.\")\n    return base_area * height * length\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpe6bmty2u.py\", line 5, in <module>\n    assert find_volume(10,8,6) == 240\nAssertionError", "passed": false}
{"task_id": 15, "requirement": "Input-Output Conditions", "completion": "import re\n\ndef split_lowerstring(s):\n    # Find all lowercase letters in the string\n    lowercase_positions = [m.start() for m in re.finditer(r'[a-z]', s)]\n    # Split the string at the found positions\n    segments = []\n    start = 0\n    for pos in lowercase_positions:\n        segments.append(s[start:pos])\n        start = pos + 1\n    # Append the remaining part of the string\n    segments.append(s[start:])\n    return segments\n\n# Example usage:\ns = \"HelloWorldthisIsATest\"\nprint(split_lowerstring(s))  # Output: ['Hello', 'World', 'this', 'Is', 'A', 'Test']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp32969idd.py\", line 17, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "requirement": "Input-Output Conditions", "completion": "import re\n\ndef text_lowercase_underscore(text):\n    # The regular expression pattern r'\\b[a-z]+\\_[a-z]+\\b' matches sequences of \n    # one or more lowercase letters followed by an underscore, followed by \n    # one or more lowercase letters, where the sequence is a word boundary.\n    pattern = r'\\b[a-z]+\\_[a-z]+\\b'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n", "result": "passed", "passed": true}
{"task_id": 17, "requirement": "Input-Output Conditions", "completion": "def square_perimeter(side_length):\n    \"\"\"\n    This function calculates the perimeter of a square.\n\n    :param side_length: length of one side of the square (must be a non-negative integer)\n    :return: perimeter of the square (as a non-negative integer)\n    :raises ValueError: if the input is not a non-negative integer\n    \"\"\"\n    if not isinstance(side_length, int) or side_length < 0:\n        raise ValueError(\"Side length must be a non-negative integer.\")\n    return int(4 * side_length)\n", "result": "passed", "passed": true}
{"task_id": 18, "requirement": "Input-Output Conditions", "completion": "def remove_dirty_chars(s1, s2):\n    if not (s1.isalpha() and s2.isalpha()):\n        raise ValueError('Input strings must only contain alphabetic characters.')\n    return ''.join(c for c in s1 if c not in s2)\n", "result": "passed", "passed": true}
{"task_id": 19, "requirement": "Input-Output Conditions", "completion": "def test_duplicate(arr):\n    if not isinstance(arr, list):\n        raise TypeError('Input must be a list of integers.')\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError('All elements in the list must be integers.')\n    if len(arr) == len(set(arr)):\n        return False\n    else:\n        return True\n", "result": "passed", "passed": true}
{"task_id": 20, "requirement": "Input-Output Conditions", "completion": "def is_woodall(n):\n    if n < 0:\n        return False\n    # Check if n is a Woodall number using the formula\n    i = 0\n    while True:\n        woodall_num = i * 2**i - 1\n        if woodall_num == n:\n            return True\n        if woodall_num > n:\n            return False\n        i += 1\n", "result": "passed", "passed": true}
{"task_id": 23, "requirement": "Input-Output Conditions", "completion": "def maximum_sum(list_of_lists):\n    if not list_of_lists:\n        return 0\n    return max(sum(inner_list) for inner_list in list_of_lists)\n", "result": "passed", "passed": true}
{"task_id": 25, "requirement": "Input-Output Conditions", "completion": "def find_product(arr):\n    # Create a set to store the non-repeated elements\n    non_repeated = set()\n    # Create a set to store the repeated elements\n    repeated = set()\n\n    # Iterate through the array to find non-repeated and repeated elements\n    for num in arr:\n        if num in non_repeated:\n            non_repeated.remove(num)\n            repeated.add(num)\n        elif num not in repeated:\n            non_repeated.add(num)\n\n    # Calculate the product of the non-repeated elements\n    product = 1\n    for num in non_repeated:\n        product *= num\n\n    return product\n\n# Example usage:\nprint(find_product([1, 2, 3, 2, 1]))  # Output: 3\nprint(find_product([1, 2, 3, 2, 1, 4, 5, 6, 7, 8, 9, 10]))  # Output: 210\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpq7yvbud9.py\", line 21, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "requirement": "Input-Output Conditions", "completion": "def check_k_elements(tuple_list, k):\n    for t in tuple_list:\n        if len(t) != k:\n            return False\n    return True\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpfec1zzon.py\", line 6, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 28, "requirement": "Input-Output Conditions", "completion": "def binomial_coeff(n, k):\n    # Initialize a 2D list to store binomial coefficients\n    C = [[0 for x in range(k+1)] for x in range(n+1)]\n\n    # Calculate binomial coefficients using dynamic programming\n    for i in range(n+1):\n        for j in range(min(i, k)+1):\n            # Base cases\n            if j == 0 or j == i:\n                C[i][j] = 1\n            # Calculate binomial coefficient using the formula\n            else:\n                C[i][j] = C[i-1][j-1] + C[i-1][j]\n\n    return C[n][k]\n\n# Example usage:\nprint(binomial_coeff(5, 2))  # Output: 10\n", "result": "passed", "passed": true}
{"task_id": 30, "requirement": "Input-Output Conditions", "completion": "def count_substring_with_equal_ends(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] == s[j]:\n                count += 1\n    return count\n\n# Example usage:\nprint(count_substring_with_equal_ends(\"abcab\"))  # Output: 2\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpedig0rub.py\", line 10, in <module>\n    assert count_substring_with_equal_ends(\"abc\") == 3\nAssertionError", "passed": false}
{"task_id": 32, "requirement": "Input-Output Conditions", "completion": "def max_prime_factors(n):\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError('Input must be a positive integer.')\n    \n    max_prime = -1\n    while n % 2 == 0:\n        max_prime = 2\n        n >>= 1\n    \n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n //= i\n    \n    if n > 2:\n        max_prime = n\n    \n    return max_prime\n\n# Example usage:\nprint(max_prime_factors(10))  # Output: 5\nprint(max_prime_factors(17))  # Output: 17\nprint(max_prime_factors(315))  # Output: 7\n", "result": "passed", "passed": true}
{"task_id": 35, "requirement": "Input-Output Conditions", "completion": "def find_rect_num(n):\n    return n * (n + 1) * (n + 2) // 2\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpftvw7uus.py\", line 3, in <module>\n    assert find_rect_num(4) == 20\nAssertionError", "passed": false}
{"task_id": 36, "requirement": "Input-Output Conditions", "completion": "def find_nth_digit(num1, num2, n):\n    # Convert the numbers to strings\n    num1_str = str(num1)\n    num2_str = str(num2)\n\n    # Concatenate the two numbers\n    fraction_str = num1_str + num2_str\n\n    # Check if n is a valid index\n    if n < len(fraction_str):\n        # Return the nth digit as an integer\n        return int(fraction_str[n])\n    else:\n        # Return None if n is out of range\n        return None\n\n# Example usage:\nprint(find_nth_digit(123, 456, 2))  # Output: 3\nprint(find_nth_digit(123, 456, 10))  # Output: None\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvvcszamj.py\", line 17, in <module>\n    assert find_nth_digit(1,2,1) == 5\nAssertionError", "passed": false}
{"task_id": 38, "requirement": "Input-Output Conditions", "completion": "def div_even_odd(lst):\n    even = None\n    odd = None\n    for i in lst:\n        if i % 2 == 0 and even is None:\n            even = i\n        elif i % 2 != 0 and odd is None:\n            odd = i\n        if even is not None and odd is not None:\n            break\n    if even is None or odd is None:\n        raise ValueError(\"List does not contain both even and odd numbers\")\n    else:\n        return odd / even\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmptjexyzys.py\", line 15, in <module>\n    assert div_even_odd([1,3,5,7,4,1,6,8])==4\nAssertionError", "passed": false}
{"task_id": 39, "requirement": "Input-Output Conditions", "completion": "def rearrange_string(s):\n    # Ensure the input is a non-empty string consisting only of lowercase letters\n    if not isinstance(s, str) or not s or not s.islower():\n        raise ValueError('Input must be a non-empty string consisting only of lowercase letters.')\n    \n    # Sort the string to ensure that similar characters are next to each other\n    sorted_s = ''.join(sorted(s))\n    \n    # Initialize the result string with the first character\n    result = sorted_s[0]\n    \n    # Iterate over the sorted string, skipping every second character\n    for i in range(1, len(sorted_s), 2):\n        result += sorted_s[i]\n    \n    # If the length of the sorted string is odd, append the last character\n    if len(sorted_s) % 2 != 0:\n        result += sorted_s[-1]\n    \n    return result\n\n# Example usage:\nprint(rearrange_string('aab'))  # Output: 'aba'\nprint(rearrange_string('aaab'))  # Output: 'ababa'\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpui6w98fp.py\", line 19, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 42, "requirement": "Input-Output Conditions", "completion": "def find_sum(arr):\n    # Create a dictionary to keep track of the frequency of each element\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Sum up the elements that appear more than once\n    sum_repeated = 0\n    for num, count in freq.items():\n        if count > 1:\n            sum_repeated += num * count\n\n    # Return 0 if there are no repeated elements\n    return sum_repeated if sum_repeated > 0 else 0\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpfu7te_8e.py\", line 16, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Input-Output Conditions", "completion": "import re\n\ndef text_match(text):\n    pattern = '[_][a-z]+'\n    if re.search(pattern, text):\n        return re.search(pattern, text).group()\n    else:\n        return 'Not matched!'\n\n# Test the function\nprint(text_match(\"test_string\"))  # Output: _string\nprint(text_match(\"testString\"))  # Output: Not matched!\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpv3jboo22.py\", line 11, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 46, "requirement": "Input-Output Conditions", "completion": "def test_distinct(numbers):\n    if not isinstance(numbers, list):\n        raise TypeError('Input must be a list of integers.')\n    if not all(isinstance(num, int) for num in numbers):\n        raise TypeError('All elements in the list must be integers.')\n    return len(numbers) == len(set(numbers))\n\n# Example usage:\nprint(test_distinct([1, 2, 3, 4, 5]))  # True, all numbers are distinct\nprint(test_distinct([1, 2, 2, 4, 5]))  # False, 2 is repeated\n", "result": "passed", "passed": true}
{"task_id": 48, "requirement": "Input-Output Conditions", "completion": "def odd_bit_set_number(n):\n    # Create a mask with all odd bits set to 1\n    mask = 0xAAAAAAAA\n    # Use bitwise OR to set the odd bits in 'n'\n    result = n | mask\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpo3iq6ct1.py\", line 7, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "requirement": "Input-Output Conditions", "completion": "def specified_element(two_dim_list, position):\n    if not two_dim_list:\n        return []\n    return [row[position] if len(row) > position else None for row in two_dim_list]\n", "result": "passed", "passed": true}
{"task_id": 50, "requirement": "Input-Output Conditions", "completion": "def min_length_list(lst):\n    min_length = min(len(x) for x in lst)\n    shortest_list = min(lst, key=lambda x: len(x))\n    return (min_length, shortest_list)\n", "result": "passed", "passed": true}
{"task_id": 52, "requirement": "Input-Output Conditions", "completion": "def parallelogram_area(base, height):\n    if base <= 0 or height <= 0:\n        raise ValueError(\"Base and height must be positive numbers.\")\n    return base * height\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwqrdawmx.py\", line 9, in <module>\n    assert parallelogram_area(0, 10) == 0\n  File \"/tmp/tmpwqrdawmx.py\", line 3, in parallelogram_area\n    raise ValueError(\"Base and height must be positive numbers.\")\nValueError: Base and height must be positive numbers.", "passed": false}
{"task_id": 53, "requirement": "Input-Output Conditions", "completion": "def check_equality(input_string):\n    if not isinstance(input_string, str):\n        raise ValueError('Input must be a string.')\n    return 'Equal' if input_string[0] == input_string[-1] else 'Not Equal'\n", "result": "passed", "passed": true}
{"task_id": 54, "requirement": "Input-Output Conditions", "completion": "def counting_sort(arr):\n    # Check if the input is a list of non-negative integers\n    if not isinstance(arr, list) or not all(isinstance(x, int) and x >= 0 for x in arr):\n        raise ValueError('Input must be a list of non-negative integers.')\n    \n    # Find the maximum element in the array\n    max_val = max(arr)\n    \n    # Initialize the count array with all zeros\n    count = [0] * (max_val + 1)\n    \n    # Store the count of each element in the count array\n    for num in arr:\n        count[num] += 1\n    \n    # Build the output array\n    output = []\n    for i, freq in enumerate(count):\n        output.extend([i] * freq)\n    \n    return output\n", "result": "passed", "passed": true}
{"task_id": 57, "requirement": "Input-Output Conditions", "completion": "def find_max_num(digits, num_digits):\n    # Ensure the list has at least one digit\n    if not digits:\n        return None\n    # Ensure the number of digits is non-negative\n    if num_digits <= 0:\n        return None\n    # Sort the digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n    # Join the sorted digits to form the largest number\n    max_num = int(''.join(map(str, sorted_digits[:num_digits])))\n    return max_num\n\n# Example usage:\nprint(find_max_num([1, 2, 3], 3))  # Output: 321\nprint(find_max_num([5, 5, 5], 2))  # Output: 55\nprint(find_max_num([9, 8, 7, 6], 4))  # Output: 9876\nprint(find_max_num([], 2))  # Output: None\nprint(find_max_num([1, 2, 3], 0))  # Output: None\n", "result": "passed", "passed": true}
{"task_id": 58, "requirement": "Input-Output Conditions", "completion": "def opposite_signs(num1, num2):\n    if not (isinstance(num1, int) and isinstance(num2, int)):\n        raise TypeError('Both inputs must be integers.')\n    return (num1 > 0) ^ (num2 > 0)\n", "result": "passed", "passed": true}
{"task_id": 60, "requirement": "Input-Output Conditions", "completion": "def max_len_sub(arr, k):\n    n = len(arr)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(0, i):\n            if arr[i] - arr[j] <= k and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    return max(dp)\n\n# Example usage:\nprint(max_len_sub([1, 2, 3, 4], 1))  # Output: 4\nprint(max_len_sub([5, 1, 2, 3, 4], 2))  # Output: 4\nprint(max_len_sub([10, 9, 8, 7, 6], 1))  # Output: 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxwtntigb.py\", line 13, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nAssertionError", "passed": false}

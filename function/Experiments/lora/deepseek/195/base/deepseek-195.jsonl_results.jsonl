{"task_id": 11, "completion": "def remove_occ(s, ch):\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    if first_index != -1 and last_index != -1:\n        s = s[:first_index] + s[first_index+1:]\n        s = s[:last_index] + s[last_index+1:]\n    return s\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpv_62w26i.py\", line 9, in <module>\n    assert remove_occ(\"hello\",\"l\") == \"heo\"\nAssertionError", "passed": false}
{"task_id": 12, "completion": "def sort_matrix(matrix):\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n    # Sort the matrix based on the row sums\n    sorted_matrix = sorted(matrix, key=lambda x: sum(x))\n    return sorted_matrix\n", "result": "passed", "passed": true}
{"task_id": 13, "completion": "from collections import Counter\n\ndef count_common(dictionary):\n    # Convert the dictionary to a list of words\n    words = list(dictionary.values())\n\n    # Count the frequency of each word\n    word_counts = Counter(words)\n\n    # Return the most common word(s)\n    return word_counts.most_common(1)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_50epv3e.py\", line 13, in <module>\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n  File \"/tmp/tmp_50epv3e.py\", line 5, in count_common\n    words = list(dictionary.values())\nAttributeError: 'list' object has no attribute 'values'", "passed": false}
{"task_id": 14, "completion": "def find_volume(base, height, length):\n    # Calculate the area of the triangular base\n    area = 0.5 * base * height\n    # Calculate the volume of the prism\n    volume = area * length\n    return volume\n", "result": "passed", "passed": true}
{"task_id": 15, "completion": "def split_lowerstring(s):\n    return s.split('a')\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpzvjeu1gi.py\", line 4, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    matches = re.findall(pattern, text)\n    return matches\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwc2nolv3.py\", line 8, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    return 4 * side_length\n", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(s1, s2):\n    return ''.join(c for c in s1 if c not in s2)\n", "result": "passed", "passed": true}
{"task_id": 19, "completion": "def test_duplicate(arr):\n    if len(arr) == len(set(arr)):\n        return False\n    else:\n        return True\n", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(n):\n    i = 0\n    while True:\n        woodall_num = 2**i * (2**i - 1)\n        if woodall_num == n:\n            return True\n        if woodall_num > n:\n            return False\n        i += 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpakrosbc4.py\", line 11, in <module>\n    assert is_woodall(383) == True\nAssertionError", "passed": false}
{"task_id": 21, "completion": "def multiples_of_num(n, m):\n    multiples = [i * n for i in range(1, m + 1)]\n    return multiples\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpu9y94aed.py\", line 5, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "completion": "def find_first_duplicate(nums):\n    num_set = set()\n    for num in nums:\n        if num in num_set:\n            return num\n        num_set.add(num)\n    return -1\n", "result": "passed", "passed": true}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists):\n    return max(sum(sub_list) for sub_list in list_of_lists)\n", "result": "passed", "passed": true}
{"task_id": 24, "completion": "def binary_to_decimal(binary):\n    binary = str(binary)\n    decimal = 0\n    for digit in binary:\n        decimal = decimal*2 + int(digit)\n    return decimal\n", "result": "passed", "passed": true}
{"task_id": 25, "completion": "def find_product(arr):\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    product = 1\n    for num, count in count_dict.items():\n        if count == 1:\n            product *= num\n    return product\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphjiyccsx.py\", line 14, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(tuples_list, k):\n    for tup in tuples_list:\n        if len(tup) != k:\n            return False\n    return True\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxzaey0jk.py\", line 7, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "completion": "def remove(input_list):\n    return [''.join([i for i in x if not i.isdigit()]) for x in input_list]\n", "result": "passed", "passed": true}
{"task_id": 28, "completion": "def binomial_coeff(n, k):\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return binomial_coeff(n - 1, k - 1) + binomial_coeff(n - 1, k)\n", "result": "passed", "passed": true}
{"task_id": 29, "completion": "def get_odd_occurrence(arr):\n    res = 0\n    for element in arr:\n        res ^= element\n    return res\n\n# Test the function\narr = [2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2]\nprint(get_odd_occurrence(arr))  # Output: 5\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpo5nm9u8m.py\", line 11, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                count += 1\n    return count\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpr_qj9ody.py\", line 10, in <module>\n    assert count_substring_with_equal_ends(\"abc\") == 3\nAssertionError", "passed": false}
{"task_id": 31, "completion": "import heapq\n\ndef func(nums, k):\n    count_map = {}\n    for num in nums:\n        if num in count_map:\n            count_map[num] += 1\n        else:\n            count_map[num] = 1\n\n    heap = []\n    for num, count in count_map.items():\n        if len(heap) < k:\n            heapq.heappush(heap, (count, num))\n        else:\n            if count > heap[0][0]:\n                heapq.heapreplace(heap, (count, num))\n\n    return [num for _, num in heap]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpw61rqdr2.py\", line 21, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n  File \"/tmp/tmpw61rqdr2.py\", line 6, in func\n    if num in count_map:\nTypeError: unhashable type: 'list'", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    max_prime = -1\n    while n % 2 == 0:\n        max_prime = 2\n        n >>= 1\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n / i\n    if n > 2:\n        max_prime = n\n    return int(max_prime)\n", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(n):\n    return bin(n).replace(\"0b\", \"\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpie6d7snh.py\", line 4, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "completion": "def find_missing(arr):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] != mid + 1 and (mid == 0 or arr[mid - 1] == mid):\n            return mid + 1\n        elif arr[mid] == mid + 1:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmptc_ozf97.py\", line 13, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "completion": "A rectangular number is a number that can be represented as the product of two positive integers. For example, 1, 2, 3, 4, 6, 8, 10, 12, 15, 16, 18, 20, 24, 25, 27, 30, 32, 36, 40, 42, 45, 48, 50, 54, 56, 60, 64, 70, 72, 75, 77, 80, 81, 84, 90, 96, 100, 105, 112, 120, 125, 126, 128, 135, 140, 144, 150, 160, 162, 168, 175, 180, 189, 192, 196, 200, 210, 216, 224, 225, 240, 243, 250, 252, 256, 270, 280, 288, 300, 308, 315, 320, 324, 336, 350, 360, 375, 378, 384, 392, 400, 405, 420, 432, 448, 450, 455, 480, 486, 500, 504, 525, 540, 560, 576, 600, 605, 612, 625, 630, 640, 648, 672, 675, 700, 705, 720, 728, 735, 750, 756, 768, 784, 800, 810, 840, 864, 900, 911, 924, 945, 960, 972, 980, 1000, 1008, 1024, 1050, 1080, 1100, 1120, 1152, 1176, 1200, 1215, 1224, 1250, 1260, 1280, 1296, 1323, 1344, 1350, 1400, 1416, 1440, 1458, 1470, 1500, 1512, 1536, 1568, 1575, 1600, 1620, 1650, 1680, 1728, 1750, 1764, 1792, 1800, 1820, 1848, 1875, 1890, 1920, 1944, 1960, 1984, 2000, 2016, 2025, 2048, 2100, 2160, 2200, 2240, 2268, 2304, 2352, 2400, 2430, 2450, 2475, 2500, 2520, 2560, 2592, 2646, 2688, 2700, 2730, 2800, 2835", "result": "failed: File \"/tmp/tmpu0nurfcb.py\", line 1\n    , 2200, 2240, 2268, 2304, 2352, 2400, 2430, 2450, 2475, 2500, 2520, 2560, 2592, 2646, 2688, 2700, 2730, 2800, 2835\n      ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 36, "completion": "def find_nth_digit(num1, num2, n):\n    # Convert the numbers to strings\n    num1_str = str(num1)\n    num2_str = str(num2)\n\n    # Concatenate the two numbers\n    fraction_str = num1_str + num2_str\n\n    # Check if n is within the range of the fraction\n    if n < 0 or n >= len(fraction_str):\n        return None\n\n    # Return the nth digit\n    return int(fraction_str[n])\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpzstc2_7y.py\", line 16, in <module>\n    assert find_nth_digit(1,2,1) == 5\nAssertionError", "passed": false}
{"task_id": 37, "completion": "def sort_mixed_list(mixed_list):\n    return sorted(mixed_list, key=lambda x: (isinstance(x, int), x))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpake7q42v.py\", line 4, in <module>\n    assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nAssertionError", "passed": false}
{"task_id": 38, "completion": "def div_even_odd(nums):\n    even = [x for x in nums if x % 2 == 0]\n    odd = [x for x in nums if x % 2 != 0]\n    if even and odd:\n        return even[0] / odd[0]\n    else:\n        return \"No even or odd number in the list\"\n", "result": "passed", "passed": true}
{"task_id": 39, "completion": "def rearrange_string(s):\n    # Count the frequency of each character\n    freq = {}\n    for char in s:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Sort the characters by their frequency in descending order\n    sorted_chars = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n\n    # Check if the characters can be rearranged\n    for i in range(len(sorted_chars) - 1):\n        if sorted_chars[i][1] > sorted_chars[i + 1][1]:\n            return False\n\n    return True\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpu5gvoa5c.py\", line 20, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "completion": "import collections\n\ndef freq_element(list_of_lists):\n    flat_list = [item for sublist in list_of_lists for item in sublist]\n    freq_dict = collections.Counter(flat_list)\n    return freq_dict\n", "result": "passed", "passed": true}
{"task_id": 41, "completion": "def filter_evennumbers(numbers):\n    return list(filter(lambda x: (x%2 == 0), numbers))\n", "result": "passed", "passed": true}
{"task_id": 42, "completion": "def find_sum(arr):\n    # Create an empty dictionary to store the count of each element\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Find the sum of elements that appear more than once\n    sum_repeated = 0\n    for num, count in count_dict.items():\n        if count > 1:\n            sum_repeated += num * count\n\n    return sum_repeated\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmptkd6g1px.py\", line 18, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    pattern = '[_][a-z]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmprf2uxojh.py\", line 10, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 44, "completion": "def text_match_string(text, word):\n    if text.startswith(word):\n        return True\n    else:\n        return False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphknsvaxy.py\", line 7, in <module>\n    assert text_match_string(\" python\")==('Not matched!')\nTypeError: text_match_string() missing 1 required positional argument: 'word'", "passed": false}
{"task_id": 45, "completion": "import math\nfrom functools import reduce\n\ndef get_gcd(arr):\n    return reduce(math.gcd, arr)\n", "result": "passed", "passed": true}
{"task_id": 46, "completion": "def test_distinct(nums):\n    return len(nums) == len(set(nums))\n", "result": "passed", "passed": true}
{"task_id": 47, "completion": "def compute_last_digit(a, b):\n    # Calculate the last digit of factorial(a)\n    last_digit_a = (a % 10)\n\n    # Calculate the last digit of factorial(b)\n    last_digit_b = (b % 10)\n\n    # Calculate the last digit of factorial(a) / factorial(b)\n    last_digit_result = (last_digit_a // last_digit_b)\n\n    return last_digit_result\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpnhq87rny.py\", line 13, in <module>\n    assert compute_last_digit(2,4) == 2\nAssertionError", "passed": false}
{"task_id": 48, "completion": "def odd_bit_set_number(n):\n    # Convert the number to binary and reverse it\n    binary = bin(n)[2:][::-1]\n    # Iterate over the binary string\n    for i in range(len(binary)):\n        # If the bit is 0 and the index is odd, set it to 1\n        if binary[i] == '0' and i % 2 != 0:\n            binary = binary[:i] + '1' + binary[i+1:]\n    # Convert the binary string back to a number and return it\n    return int(binary[::-1], 2)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_7dzi6z0.py\", line 12, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(input_list, position=0):\n    return [x[position] for x in input_list]\n", "result": "passed", "passed": true}
{"task_id": 50, "completion": "def min_length_list(list_of_lists):\n    return min(list_of_lists, key=lambda x: len(x))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpirxej99m.py\", line 4, in <module>\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nAssertionError", "passed": false}
{"task_id": 51, "completion": "def check_equilateral(a, b, c):\n    if a == b == c:\n        return \"The triangle is equilateral\"\n    else:\n        return \"The triangle is not equilateral\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp08ljuy80.py\", line 7, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    return base * height\n", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(input_string):\n    if input_string[0] == input_string[-1]:\n        return True\n    else:\n        return False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmptpp3xqn_.py\", line 7, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 54, "completion": "def counting_sort(arr):\n    # Find the maximum element in the array\n    max_val = max(arr)\n\n    # Initialize the count array with zeros\n    count = [0] * (max_val + 1)\n\n    # Store the count of each element in the count array\n    for num in arr:\n        count[num] += 1\n\n    # Reconstruct the sorted array\n    sorted_arr = []\n    for i in range(len(count)):\n        sorted_arr.extend([i] * count[i])\n\n    return sorted_arr\n", "result": "passed", "passed": true}
{"task_id": 55, "completion": "def tn_gp(a, r, t):\n    \"\"\"\n    Calculate the t-nth term of a geometric series.\n\n    Parameters:\n    a (float): The first term of the geometric series.\n    r (float): The common ratio of the geometric series.\n    t (int): The term number to calculate.\n\n    Returns:\n    float: The t-nth term of the geometric series.\n    \"\"\"\n    return a * (r ** (t - 1))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmnl_m401.py\", line 15, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def check(n):\n    n_str = str(n)\n    reverse_n = int(n_str[::-1])\n    return n == 2 * reverse_n - 1\n", "result": "passed", "passed": true}
{"task_id": 57, "completion": "def find_max_num(digits):\n    digits.sort(reverse=True)\n    return int(''.join(map(str, digits)))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2xtnlxn4.py\", line 5, in <module>\n    assert find_max_num([1,2,3],3) == 321\nTypeError: find_max_num() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 58, "completion": "def opposite_signs(num1, num2):\n    return (num1 ^ num2) < 0\n", "result": "passed", "passed": true}
{"task_id": 59, "completion": "def is_octagonal(n):\n    return n * (3 * n - 2)\n", "result": "passed", "passed": true}
{"task_id": 60, "completion": "def max_len_sub(arr):\n    n = len(arr)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == i - j:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqlunplja.py\", line 10, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}

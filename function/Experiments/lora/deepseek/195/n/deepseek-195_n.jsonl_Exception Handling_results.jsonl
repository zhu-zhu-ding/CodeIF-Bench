{"task_id": 11, "requirement": "Exception Handling", "completion": "def remove_occ(s, char):\n    if len(char) != 1:\n        raise ValueError('Second parameter must be a single character.')\n    \n    first_index = s.find(char)\n    last_index = s.rfind(char)\n    \n    if first_index != -1 and last_index != -1:\n        s = s[:first_index] + s[first_index+1:]\n        s = s[:last_index] + s[last_index+1:]\n    \n    return s\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpnkx4lb7n.py\", line 10, in <module>\n    assert remove_occ(\"hello\",\"l\") == \"heo\"\nAssertionError", "passed": false}
{"task_id": 12, "requirement": "Exception Handling", "completion": "def sort_matrix(matrix):\n    # Check if the input is a list of lists\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise TypeError(\"Input must be a list of lists.\")\n    \n    # Check if all elements in the matrix are integers\n    if not all(isinstance(num, int) for row in matrix for num in row):\n        raise TypeError(\"All elements in the matrix must be integers.\")\n    \n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n    \n    # Sort the matrix based on the row sums\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    \n    return sorted_matrix\n", "result": "passed", "passed": true}
{"task_id": 13, "requirement": "Exception Handling", "completion": "def count_common(word_list):\n    if not all(isinstance(word, str) for word in word_list):\n        raise TypeError(\"Input must be a list of strings.\")\n\n    # Count the occurrences of each word\n    word_counts = {}\n    for word in word_list:\n        word_counts[word] = word_counts.get(word, 0) + 1\n\n    # Find the maximum count\n    max_count = max(word_counts.values())\n\n    # Get the words with the maximum count\n    common_words = [word for word, count in word_counts.items() if count == max_count]\n\n    return common_words\n\n# Example usage:\nword_list = ['apple', 'banana', 'cherry', 'apple', 'banana', 'cherry', 'apple']\nprint(count_common(word_list))  # Output: ['apple']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1j_acc8u.py\", line 16, in <module>\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nAssertionError", "passed": false}
{"task_id": 14, "requirement": "Exception Handling", "completion": "def find_volume(base_area, height_base, height_prism):\n    # Check if all inputs are positive numbers\n    if not all(isinstance(x, (int, float)) and x > 0 for x in (base_area, height_base, height_prism)):\n        raise ValueError('All dimensions must be positive numbers.')\n    \n    # Calculate the volume\n    return base_area * height_base * height_prism\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxi3bx1y8.py\", line 7, in <module>\n    assert find_volume(10,8,6) == 240\nAssertionError", "passed": false}
{"task_id": 15, "requirement": "Exception Handling", "completion": "def split_lowerstring(s):\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string.\")\n    return [word for word in s.split() if word[0].islower()]\n", "result": "failed: File \"/tmp/tmpf6agp4uv.py\", line 9\n    try: split_lowerstring(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 16, "requirement": "Exception Handling", "completion": "import re\n\ndef text_lowercase_underscore(text):\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string.\")\n\n    # The regular expression pattern r'\\b[a-z]+\\_[a-z]+\\b' matches sequences of\n    # one or more lowercase letters followed by an underscore, followed by\n    # one or more lowercase letters, where the sequence is a word boundary.\n    pattern = r'\\b[a-z]+\\_[a-z]+\\b'\n    matches = re.findall(pattern, text)\n\n    if matches:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\ntext = \"This is a test_string with some lowercase_letters and an underscore.\"\nprint(text_lowercase_underscore(text))\n", "result": "passed", "passed": true}
{"task_id": 17, "requirement": "Exception Handling", "completion": "def square_perimeter(side_length):\n    \"\"\"\n    This function calculates the perimeter of a square.\n\n    :param side_length: length of one side of the square\n    :return: perimeter of the square\n    :raises ValueError: if the side_length is negative\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length must be a non-negative integer.\")\n    return 4 * side_length\n", "result": "passed", "passed": true}
{"task_id": 18, "requirement": "Exception Handling", "completion": "def remove_dirty_chars(s1, s2):\n    if not isinstance(s1, str) or not isinstance(s2, str):\n        raise TypeError(\"Both inputs must be strings.\")\n    if not s1.isalpha() or not s2.isalpha():\n        raise ValueError('Input strings must only contain alphabetic characters.')\n    return ''.join(c for c in s1 if c not in s2)\n", "result": "passed", "passed": true}
{"task_id": 19, "requirement": "Exception Handling", "completion": "def test_duplicate(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError('Input must be a list.')\n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise ValueError('Input must be a list of integers.')\n    # Check for duplicates\n    if len(arr) == len(set(arr)):\n        return False\n    else:\n        return True\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpnr81orya.py\", line 25, in <module>\n    test_duplicate(None)\n  File \"/tmp/tmpnr81orya.py\", line 4, in test_duplicate\n    raise TypeError('Input must be a list.')\nTypeError: Input must be a list.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpnr81orya.py\", line 28, in <module>\n    assert str(e) == 'Input must be a list of integers'\nAssertionError", "passed": false}
{"task_id": 20, "requirement": "Exception Handling", "completion": "def is_woodall(n):\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    if n < 0:\n        return False\n    i = 0\n    while True:\n        woodall_num = i * 2**i - 1\n        if woodall_num == n:\n            return True\n        if woodall_num > n:\n            return False\n        i += 1\n", "result": "passed", "passed": true}
{"task_id": 21, "requirement": "Exception Handling", "completion": "def multiples_of_num(n, m):\n    if m < 0 or n < 0:\n        raise ValueError(\"Both 'm' and 'n' must be non-negative integers.\")\n    multiples = [n * i for i in range(1, m + 1)]\n    return multiples\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpb2ikh4hu.py\", line 6, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "requirement": "Exception Handling", "completion": "def find_first_duplicate(arr):\n    if not isinstance(arr, list) or not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"Input must be a list of integers.\")\n    \n    num_dict = {}\n    for num in arr:\n        if num in num_dict:\n            return num\n        else:\n            num_dict[num] = 1\n    return None\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqlzxmvep.py\", line 12, in <module>\n    assert find_first_duplicate([1, 2, 3, 4])==-1\nAssertionError", "passed": false}
{"task_id": 23, "requirement": "Exception Handling", "completion": "def maximum_sum(list_of_lists):\n    if not isinstance(list_of_lists, list):\n        raise TypeError(\"Input must be a list of lists.\")\n    for inner_list in list_of_lists:\n        if not isinstance(inner_list, list):\n            raise TypeError(\"All elements in the input list must be lists.\")\n        if not all(isinstance(x, int) for x in inner_list):\n            raise TypeError(\"All elements in the sublists must be integers.\")\n    return max(sum(inner_list) for inner_list in list_of_lists)\n", "result": "failed: File \"/tmp/tmppcu7tu22.py\", line 14\n    try: maximum_sum([[1, 2], [3, 'a']]); assert False, 'Expected TypeError' except TypeError: pass\n                                                                             ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 24, "requirement": "Exception Handling", "completion": "def binary_to_decimal(binary):\n    if not isinstance(binary, str) or not all(digit in '01' for digit in binary):\n        raise ValueError('Invalid binary number')\n\n    binary = binary[::-1]  # Reverse the binary string to start from the least significant bit\n    decimal = 0\n    for i, bit in enumerate(binary):\n        if bit == '1':\n            decimal += 2 ** i\n    return decimal\n", "result": "failed: File \"/tmp/tmp8tac39ai.py\", line 13\n    try: binary_to_decimal('102'); assert False, 'Expected ValueError' except ValueError as e: assert str(e) == 'Invalid binary number'\n                                                                       ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 25, "requirement": "Exception Handling", "completion": "def find_product(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list of integers.\")\n\n    # Check if all elements in the list are integers\n    if not all(isinstance(item, int) for item in arr):\n        raise TypeError(\"All elements in the list must be integers.\")\n\n    # Create a dictionary to store the frequency of each element\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Initialize the product to 1\n    product = 1\n\n    # Multiply the product by each non-repeated element\n    for num, count in freq.items():\n        if count == 1:\n            product *= num\n\n    return product\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpipq8xa9j.py\", line 22, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "requirement": "Exception Handling", "completion": "def check_k_elements(tuple_list, k):\n    # Check if tuple_list is a list\n    if not isinstance(tuple_list, list):\n        raise TypeError(\"The first argument must be a list of tuples.\")\n    # Check if k is an integer\n    if not isinstance(k, int):\n        raise TypeError(\"The second argument must be an integer.\")\n    # Check if all elements in the list are tuples\n    if not all(isinstance(t, tuple) for t in tuple_list):\n        raise TypeError(\"All elements in the list must be tuples.\")\n    # Check if all tuples have exactly k elements\n    for t in tuple_list:\n        if len(t) != k:\n            return False\n    return True\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0_2vw9wu.py\", line 16, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "requirement": "Exception Handling", "completion": "def remove(lst):\n    # Check if the input is a list\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list.\")\n    # Check if all elements in the list are strings\n    if not all(isinstance(item, str) for item in lst):\n        raise TypeError(\"All elements in the list must be strings.\")\n    # Remove digits from each string in the list\n    return [''.join([i for i in s if not i.isdigit()]) for s in lst]\n", "result": "passed", "passed": true}
{"task_id": 28, "requirement": "Exception Handling", "completion": "import math\n\ndef binomial_coeff(n, k):\n    if not isinstance(n, int) or not isinstance(k, int):\n        raise ValueError('Inputs must be integers.')\n    if n < 0 or k < 0:\n        raise ValueError('Inputs must be non-negative.')\n    if k > n:\n        raise ValueError('k must not be greater than n.')\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpd2g7dol2.py\", line 14, in <module>\n    try: binomial_coeff(-1, 2)\n  File \"/tmp/tmpd2g7dol2.py\", line 6, in binomial_coeff\n    raise ValueError('Inputs must be non-negative.')\nValueError: Inputs must be non-negative.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpd2g7dol2.py\", line 15, in <module>\n    except ValueError as e: assert str(e) == 'Inputs must be non-negative and k must not be greater than n'\nAssertionError", "passed": false}
{"task_id": 29, "requirement": "Exception Handling", "completion": "def get_odd_occurrence(lst):\n    # Check if the input is a list\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list of integers.\")\n\n    # Check if all elements in the list are integers\n    if not all(isinstance(item, int) for item in lst):\n        raise TypeError(\"All elements in the list must be integers.\")\n\n    # Create a dictionary to count occurrences\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Find the element with an odd count\n    for num, count in count_dict.items():\n        if count % 2 != 0:\n            return num\n\n    # If no element is found, return None\n    return None\n\n# Example usage:\ntry:\n    print(get_odd_occurrence([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]))  # Output: 1\n    print(get_odd_occurrence(\"not a list\"))  # Raises TypeError\n    print(get_odd_occurrence([1, 2, 2, \"three\", 3, 3, 4, 4, 4, 4]))  # Raises TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpr9g4a35w.py\", line 28, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "requirement": "Exception Handling", "completion": "def count_substring_with_equal_ends(s):\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string.\")\n\n    count = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] == s[j]:\n                count += 1\n    return count\n", "result": "failed: File \"/tmp/tmp2koouyfq.py\", line 14\n    try: count_substring_with_equal_ends(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                                  ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 31, "requirement": "Exception Handling", "completion": "import heapq\n\ndef func(nums, k):\n    # Check if k is greater than the number of distinct integers\n    if k > len(set(nums)):\n        raise ValueError('k cannot be greater than the number of distinct integers')\n\n    # Create a dictionary to store the frequency of each number\n    freq = {}\n    for num in nums:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Use a heap to find the k most frequent numbers\n    heap = []\n    for num, count in freq.items():\n        if len(heap) < k:\n            heapq.heappush(heap, (count, num))\n        else:\n            if count > heap[0][0]:\n                heapq.heapreplace(heap, (count, num))\n\n    # Return the k most frequent numbers\n    return [num for _, num in heap]\n\n# Example usage:\nnums = [1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5]\nk = 3\ntry:\n    print(func(nums, k))  # Output: [5, 3, 4]\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpan8mbbce.py\", line 30, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n  File \"/tmp/tmpan8mbbce.py\", line 4, in func\n    if k > len(set(nums)):\nTypeError: unhashable type: 'list'", "passed": false}
{"task_id": 32, "requirement": "Exception Handling", "completion": "def max_prime_factors(n):\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError('Input must be a positive integer')\n\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n", "result": "passed", "passed": true}
{"task_id": 33, "requirement": "Exception Handling", "completion": "def decimal_to_binary(n):\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n\n# Test the function\ntry:\n    print(decimal_to_binary(10))  # Output: 1010\n    print(decimal_to_binary(0))   # Output: 0\n    print(decimal_to_binary(-5))  # Raises ValueError: Input must be a non-negative integer.\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwannn0ka.py\", line 18, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "requirement": "Exception Handling", "completion": "def find_missing(arr):\n    # Check if the input list is sorted\n    if arr != sorted(arr):\n        raise ValueError('Input list must be sorted.')\n\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] != mid + 1 and (mid == 0 or arr[mid - 1] == mid):\n            return mid + 1\n        elif arr[mid] == mid + 1:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpzy8po1po.py\", line 15, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "requirement": "Exception Handling", "completion": "def find_rect_num(n):\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    return n * (n + 1) * (2 * n + 1) // 6\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpacitw554.py\", line 5, in <module>\n    assert find_rect_num(4) == 20\nAssertionError", "passed": false}
{"task_id": 36, "requirement": "Exception Handling", "completion": "def find_nth_digit(num1, num2):\n    if num2 == 0:\n        raise ValueError('Denominator cannot be zero')\n\n    # Convert the numbers to strings\n    num1_str = str(num1)\n    num2_str = str(num2)\n\n    # Concatenate the two numbers\n    fraction_str = num1_str + num2_str\n\n    # Return the nth digit\n    return fraction_str\n\n# Example usage:\ntry:\n    print(find_nth_digit(123, 0))  # Raises ValueError: Denominator cannot be zero\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpm1q_2igy.py\", line 16, in <module>\n    assert find_nth_digit(1,2,1) == 5\nTypeError: find_nth_digit() takes 2 positional arguments but 3 were given", "passed": false}
{"task_id": 37, "requirement": "Exception Handling", "completion": "def sort_mixed_list(lst):\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list.\")\n    for item in lst:\n        if not isinstance(item, (int, str)):\n            raise TypeError(\"List must contain only integers and strings.\")\n    int_lst = sorted([i for i in lst if isinstance(i, int)])\n    str_lst = sorted([i for i in lst if isinstance(i, str)])\n    return int_lst + str_lst\n\n# Test the function\ntry:\n    print(sort_mixed_list([3, 'a', 1, 'b', 2, 'c', 'd', 4]))\nexcept TypeError as e:\n    print(e)\n\ntry:\n    print(sort_mixed_list([3, 'a', 1, 'b', 'c', 'd', 4]))  # Missing an integer\nexcept TypeError as e:\n    print(e)\n\ntry:\n    print(sort_mixed_list([3, 'a', 1, 'b', 2, 'c', 'd', 4, []]))  # Contains a non-integer or non-string\nexcept TypeError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 38, "requirement": "Exception Handling", "completion": "def div_even_odd(lst):\n    even = None\n    odd = None\n    for i in lst:\n        if i % 2 == 0 and even is None:\n            even = i\n        elif i % 2 != 0 and odd is None:\n            odd = i\n        if even is not None and odd is not None:\n            break\n    if even is None or odd is None:\n        raise ValueError('List must contain at least one even and one odd number.')\n    else:\n        return odd / even\n", "result": "failed: File \"/tmp/tmpn_mypm2j.py\", line 19\n    try: div_even_odd([2, 4, 6]); assert False; except ValueError as e: assert str(e) == 'List must contain at least one even and one odd number.'\n                                                ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 39, "requirement": "Exception Handling", "completion": "from collections import Counter\n\ndef rearrange_string(s):\n    # Check if the input is a string\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string.\")\n    # Check if the string contains only lowercase letters\n    if not s.islower():\n        raise ValueError(\"Input string must contain only lowercase letters.\")\n    \n    # Count the frequency of each character\n    freq = Counter(s)\n    \n    # Check if the frequency of each character is even\n    for char, count in freq.items():\n        if count % 2 != 0:\n            return False\n    \n    return True\n\n# Example usage:\ntry:\n    result = rearrange_string(\"abcabc\")\n    print(result)  # Should print: True\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpzrp0mhjb.py\", line 22, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "requirement": "Exception Handling", "completion": "from collections import Counter\n\ndef freq_element(lst):\n    # Check if the input is a list of lists\n    if not isinstance(lst, list) or not all(isinstance(sublist, list) for sublist in lst):\n        raise TypeError(\"Input must be a list of lists.\")\n    \n    # Flatten the list of lists\n    flat_list = [item for sublist in lst for item in sublist]\n    # Use Counter to get the frequency of each element\n    freq = Counter(flat_list)\n    return freq\n", "result": "failed: File \"/tmp/tmp3kf4vjmd.py\", line 14\n    try: freq_element('not a list'); assert False; except TypeError: assert True\n                                                   ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 41, "requirement": "Exception Handling", "completion": "def filter_evennumbers(numbers):\n    if not isinstance(numbers, list) or not all(isinstance(num, int) for num in numbers):\n        raise TypeError(\"Input must be a list of integers.\")\n    return list(filter(lambda x: x % 2 == 0, numbers))\n", "result": "passed", "passed": true}
{"task_id": 42, "requirement": "Exception Handling", "completion": "def find_sum(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n\n    # Create a dictionary to keep track of the frequency of each element\n    freq = {}\n    for num in arr:\n        if isinstance(num, int):  # Ensure the element is an integer\n            if num in freq:\n                freq[num] += 1\n            else:\n                freq[num] = 1\n\n    # Sum up the elements that appear more than once\n    sum_repeated = 0\n    for num, count in freq.items():\n        if count > 1:\n            sum_repeated += num * count\n\n    return sum_repeated\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7_1hur3a.py\", line 19, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Exception Handling", "completion": "import re\n\ndef text_match(text):\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    pattern = '[_][a-z]+'\n    if re.search(pattern, text):\n        return re.search(pattern, text).group()\n    else:\n        return \"Not matched!\"\n\n# Test the function with valid and invalid inputs\ntry:\n    print(text_match(\"test_string\"))  # Output: _string\n    print(text_match(\"testString\"))   # Output: Not matched!\n    print(text_match(123))            # Raises TypeError: Input must be a string\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpi8shjijr.py\", line 17, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 44, "requirement": "Exception Handling", "completion": "def text_match_string(text, word):\n    if not isinstance(text, str) or not isinstance(word, str):\n        raise TypeError(\"Both 'text' and 'word' must be strings.\")\n    return text.startswith(word)\n", "result": "failed: File \"/tmp/tmph7oqtid3.py\", line 8\n    try: text_match_string(123); assert False, 'TypeError not raised' except TypeError: pass\n                                                                      ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 45, "requirement": "Exception Handling", "completion": "def get_gcd(arr):\n    if not arr:\n        raise ValueError('Input list cannot be empty.')\n\n    def gcd(a, b):\n        while b != 0:\n            a, b = b, a % b\n        return a\n\n    result = arr[0]\n\n    for num in arr[1:]:\n        result = gcd(result, num)\n\n    return result\n", "result": "passed", "passed": true}
{"task_id": 46, "requirement": "Exception Handling", "completion": "def test_distinct(lst):\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(x, int) for x in lst):\n        raise TypeError(\"List must contain only integers.\")\n    return len(lst) == len(set(lst))\n", "result": "passed", "passed": true}
{"task_id": 47, "requirement": "Exception Handling", "completion": "def compute_last_digit(a, b):\n    if a > b:\n        raise ValueError('a should not be greater than b')\n\n    # Calculate the factorial of a and b\n    factorial_a = 1\n    for i in range(1, a + 1):\n        factorial_a *= i\n\n    factorial_b = 1\n    for i in range(1, b + 1):\n        factorial_b *= i\n\n    # Find the last digit of the division\n    last_digit = (factorial_a % 10) * pow(factorial_b, -1, 10)\n    return last_digit % 10\n\n# Test the function\ntry:\n    print(compute_last_digit(5, 7))  # Output: 5\n    print(compute_last_digit(8, 7))  # Raises ValueError: a should not be greater than b\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpfoc8ti70.py\", line 20, in <module>\n    assert compute_last_digit(2,4) == 2\n  File \"/tmp/tmpfoc8ti70.py\", line 12, in compute_last_digit\n    last_digit = (factorial_a % 10) * pow(factorial_b, -1, 10)\nValueError: base is not invertible for the given modulus", "passed": false}
{"task_id": 48, "requirement": "Exception Handling", "completion": "def odd_bit_set_number(n):\n    # Check if the input is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n\n    # Convert the number to binary and reverse it\n    binary = bin(n)[2:][::-1]\n    # Iterate over the binary string\n    for i in range(len(binary)):\n        # If the bit is 0 and its position is odd, set it to 1\n        if i % 2 != 0 and binary[i] == '0':\n            binary = binary[:i] + '1' + binary[i+1:]\n    # Convert the binary string back to a number and return it\n    return int(binary[::-1], 2)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7fxxdxaj.py\", line 14, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "requirement": "Exception Handling", "completion": "def specified_element(two_dim_list, position=0):\n    if not two_dim_list:\n        return []\n\n    if position >= len(two_dim_list[0]):\n        raise IndexError('Index out of range for sublist')\n\n    return [row[position] if len(row) > position else None for row in two_dim_list]\n", "result": "passed", "passed": true}
{"task_id": 50, "requirement": "Exception Handling", "completion": "def min_length_list(lst):\n    if not isinstance(lst, list) or not all(isinstance(sub_lst, list) for sub_lst in lst):\n        raise ValueError('Input must be a list of lists.')\n    return min(lst, key=lambda x: len(x))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpt544mzt3.py\", line 5, in <module>\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nAssertionError", "passed": false}
{"task_id": 51, "requirement": "Exception Handling", "completion": "def check_equilateral(a, b, c):\n    if not all(isinstance(x, int) for x in (a, b, c)):\n        raise ValueError(\"All inputs must be integers.\")\n    if not all(x > 0 for x in (a, b, c)):\n        raise ValueError(\"All inputs must be positive integers.\")\n    if a == b == c:\n        print(\"The triangle is equilateral.\")\n    else:\n        print(\"The triangle is not equilateral.\")\n\n# Test the function with valid inputs\ncheck_equilateral(3, 3, 3)  # This should print \"The triangle is equilateral.\"\ncheck_equilateral(3, 4, 5)  # This should print \"The triangle is not equilateral.\"\n\n# Test the function with invalid inputs\ntry:\n    check_equilateral(-3, 3, 3)  # This should raise ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    check_equilateral(3, 3, 0)  # This should raise ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    check_equilateral(3, '3', 3)  # This should raise ValueError\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8ux9s41g.py\", line 26, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "requirement": "Exception Handling", "completion": "def parallelogram_area(base, height):\n    if not (isinstance(base, (int, float)) and isinstance(height, (int, float))):\n        raise TypeError(\"Both base and height must be numerical (int or float).\")\n    return base * height\n", "result": "passed", "passed": true}
{"task_id": 53, "requirement": "Exception Handling", "completion": "def check_equality(input_string):\n    if not isinstance(input_string, str):\n        raise TypeError('Input must be a string')\n    return input_string[0] == input_string[-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1f6pmn1o.py\", line 5, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 54, "requirement": "Exception Handling", "completion": "def counting_sort(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements in the list must be integers.\")\n    \n    # Find the maximum element in the array\n    max_val = max(arr)\n    \n    # Initialize the count array with all zeros\n    count = [0] * (max_val + 1)\n    \n    # Store the count of each element in the count array\n    for num in arr:\n        if num < 0:\n            raise ValueError(\"Input list must contain non-negative integers.\")\n        count[num] += 1\n    \n    # Store the cumulative count\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    \n    # Build the output array\n    output = [0] * len(arr)\n    for num in arr:\n        output[count[num] - 1] = num\n        count[num] -= 1\n    \n    return output\n", "result": "passed", "passed": true}
{"task_id": 55, "requirement": "Exception Handling", "completion": "def tn_gp(a, r, n):\n    \"\"\"\n    This function calculates the nth term of a geometric series.\n    a: first term of the series\n    r: common ratio of the series\n    n: term number to calculate\n    \"\"\"\n    if n < 1:\n        raise ValueError('Term number must be greater than 0')\n    return a * r ** (n - 1)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpj7u7n17u.py\", line 5, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "requirement": "Exception Handling", "completion": "def check(n):\n    # Check if the input is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n\n    # Convert the number to a string, reverse it, and convert it back to an integer\n    reverse = int(str(n)[::-1])\n\n    # Check if the number is one less than twice its reverse\n    return n == 2 * reverse - 1\n", "result": "passed", "passed": true}
{"task_id": 57, "requirement": "Exception Handling", "completion": "def find_max_num(digits, num_digits):\n    if num_digits > len(digits):\n        raise ValueError('Number of digits exceeds the length of the list.')\n    sorted_digits = sorted(digits, reverse=True)\n    return int(''.join(map(str, sorted_digits[:num_digits])))\n\n# Example usage:\ntry:\n    print(find_max_num([1, 2, 3, 4, 5], 3))  # Output: 543\n    print(find_max_num([9, 8, 7, 6], 2))     # Output: 98\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 58, "requirement": "Exception Handling", "completion": "def opposite_signs(num1, num2):\n    if not all(isinstance(x, int) for x in (num1, num2)):\n        raise TypeError(\"Both inputs must be integers.\")\n    return (num1 > 0) != (num2 > 0)\n", "result": "passed", "passed": true}
{"task_id": 59, "requirement": "Exception Handling", "completion": "def is_octagonal(n):\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    return n * (4 * n - 3) // 2\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmprru7opjm.py\", line 5, in <module>\n    assert is_octagonal(5) == 65\nAssertionError", "passed": false}
{"task_id": 60, "requirement": "Exception Handling", "completion": "def max_len_sub(arr):\n    if not isinstance(arr, list):\n        raise TypeError(\"The input array must be a list.\")\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements in the input array must be integers.\")\n\n    n = len(arr)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(0, i):\n            if arr[i] >= arr[j] and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    return max(dp)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpc75szye4.py\", line 13, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}

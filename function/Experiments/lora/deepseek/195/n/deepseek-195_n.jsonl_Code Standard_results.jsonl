{"task_id": 11, "requirement": "Code Standard", "completion": "def remove_occ(s: str, ch: str) -> str:\n    if len(ch) != 1:\n        raise ValueError('Second parameter must be a single character.')\n\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n\n    if first_index != -1 and last_index != -1:\n        s = s[:first_index] + s[first_index + 1:]\n        s = s[:last_index] + s[last_index + 1:]\n\n    return s\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_a5ulfhn.py\", line 10, in <module>\n    assert remove_occ(\"hello\",\"l\") == \"heo\"\nAssertionError", "passed": false}
{"task_id": 12, "requirement": "Code Standard", "completion": "def sort_matrix(matrix: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Sort a given matrix in ascending order according to the sum of its rows.\n\n    Args:\n        matrix (list[list[int]]): A list of lists containing integers.\n\n    Returns:\n        list[list[int]]: The sorted matrix.\n\n    Raises:\n        TypeError: If the input is not a list of lists or if any element in the matrix is not an integer.\n    \"\"\"\n    if not all(isinstance(row, list) for row in matrix):\n        raise TypeError(\"Input must be a list of lists.\")\n    if not all(all(isinstance(num, int) for num in row) for row in matrix):\n        raise TypeError(\"All elements in the matrix must be integers.\")\n\n    # Extend the function to handle matrices with rows of varying lengths by\n    # treating missing values as zeros.\n    matrix = [list(row) + [0] * (max(len(row) for row in matrix) - len(row)) for row in matrix]\n\n    # Sort the matrix based on the sum of its rows.\n    sorted_matrix = sorted(matrix, key=sum)\n\n    return sorted_matrix\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdpeuzrx3.py\", line 26, in <module>\n    test_annotations()\n  File \"/tmp/tmpdpeuzrx3.py\", line 25, in test_annotations\n    assert hints == {'matrix': 'list[list[int]]', 'return': 'list[list[int]]'}\nAssertionError", "passed": false}
{"task_id": 14, "requirement": "Code Standard", "completion": "def find_volume(base_area: float, height: float, length: float) -> float:\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base_area (float): The base area of the triangular base.\n    height (float): The height of the triangular base.\n    length (float): The length of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n\n    Raises:\n    ValueError: If any of the dimensions are non-positive or non-numeric.\n    \"\"\"\n    if not all(isinstance(dim, (int, float)) for dim in (base_area, height, length)):\n        raise ValueError('All dimensions must be positive numbers.')\n    if not all(dim > 0 for dim in (base_area, height, length)):\n        raise ValueError('All dimensions must be positive numbers.')\n\n    return base_area * height * length\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplxbxtbpo.py\", line 7, in <module>\n    assert find_volume(10,8,6) == 240\nAssertionError", "passed": false}
{"task_id": 15, "requirement": "Code Standard", "completion": "def split_lowerstring(text: str) -> list:\n    \"\"\"\n    Split a string at lowercase letters.\n\n    Parameters:\n    text (str): The input string to be split.\n\n    Returns:\n    list: A list of strings, each representing a segment of the original string\n          split at lowercase letters.\n\n    Raises:\n    TypeError: If the input is not a string.\n    \"\"\"\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string.\")\n\n    segments = []\n    current_segment = ''\n    for char in text:\n        if char.islower():\n            if current_segment:\n                segments.append(current_segment)\n                current_segment = ''\n        current_segment += char\n\n    if current_segment:\n        segments.append(current_segment)\n\n    return segments\n", "result": "failed: File \"/tmp/tmpkyb2upjf.py\", line 19\n    try: split_lowerstring(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 16, "requirement": "Code Standard", "completion": "import re\nfrom typing import List, Union\n\ndef text_lowercase_underscore(text: str) -> Union[List[str], str]:\n    \"\"\"\n    Find sequences of lowercase letters joined with an underscore.\n\n    Args:\n        text (str): The input string to search for matches.\n\n    Returns:\n        Union[List[str], str]: A list of matches or 'Not matched!' if no matches are found.\n\n    Raises:\n        TypeError: If the input is not a string.\n    \"\"\"\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string.\")\n    if not text:\n        return 'Not matched!'\n\n    # The regular expression pattern r'\\b[a-z]+\\_[a-z]+\\b' matches sequences of\n    # one or more lowercase letters followed by an underscore, followed by\n    # one or more lowercase letters, where the sequence is a word boundary.\n    pattern = r'\\b[a-z]+\\_[a-z]+\\b'\n    matches = re.findall(pattern, text)\n\n    if matches:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkp27p2sf.py\", line 28, in <module>\n    assert text_lowercase_underscore.__annotations__ == {'text': str, 'return': str}\nAssertionError", "passed": false}
{"task_id": 17, "requirement": "Code Standard", "completion": "def square_perimeter(side_length: int) -> int:\n    \"\"\"\n    Calculate the perimeter of a square given the length of one side.\n\n    Args:\n        side_length (int): The length of one side of the square.\n\n    Returns:\n        int: The perimeter of the square.\n\n    Raises:\n        ValueError: If the side_length is negative.\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length must be a non-negative integer.\")\n    return 4 * side_length\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqlq2n8d6.py\", line 23, in <module>\n    assert square_perimeter.__annotations__ == {'a': int, 'return': int}\nAssertionError", "passed": false}
{"task_id": 18, "requirement": "Code Standard", "completion": "def remove_dirty_chars(string_one: str, string_two: str) -> str:\n    if not (isinstance(string_one, str) and isinstance(string_two, str)):\n        raise TypeError(\"Both inputs must be strings.\")\n    if not string_one.isalpha() or not string_two.isalpha():\n        raise ValueError(\"Input strings must only contain alphabetic characters.\")\n    if not string_two:\n        return string_one\n    return ''.join(c for c in string_one if c not in string_two)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4trvk1ku.py\", line 21, in <module>\n    assert remove_dirty_chars('example', '') == 'example', 'Function should return the original string if the second string is empty.'\n  File \"/tmp/tmp4trvk1ku.py\", line 5, in remove_dirty_chars\n    raise ValueError(\"Input strings must only contain alphabetic characters.\")\nValueError: Input strings must only contain alphabetic characters.", "passed": false}
{"task_id": 19, "requirement": "Code Standard", "completion": "def test_duplicate(arraynums: list) -> bool:\n    if not isinstance(arraynums, list):\n        raise TypeError('Input must be a list of integers.')\n    if not all(isinstance(num, int) for num in arraynums):\n        raise ValueError('Input must be a list of integers.')\n    return len(arraynums) != len(set(arraynums))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp321_3zw3.py\", line 19, in <module>\n    test_duplicate(None)\n  File \"/tmp/tmp321_3zw3.py\", line 3, in test_duplicate\n    raise TypeError('Input must be a list of integers.')\nTypeError: Input must be a list of integers.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmp321_3zw3.py\", line 22, in <module>\n    assert str(e) == 'Input must be a list of integers'\nAssertionError", "passed": false}
{"task_id": 20, "requirement": "Code Standard", "completion": "def is_woodall(x: int) -> bool:\n    \"\"\"\n    Check if the given number is a Woodall number.\n\n    A Woodall number is a positive integer of the form n * 2^n - 1,\n    where n is a non-negative integer.\n\n    Args:\n        x (int): The number to check.\n\n    Returns:\n        bool: True if the number is a Woodall number, False otherwise.\n\n    Raises:\n        TypeError: If the input is not an integer.\n    \"\"\"\n    if not isinstance(x, int):\n        raise TypeError(\"Input must be an integer.\")\n    if x < 0:\n        return False\n    i = 0\n    while True:\n        woodall_num = i * 2**i - 1\n        if woodall_num == x:\n            return True\n        if woodall_num > x:\n            return False\n        i += 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7b7k_ojc.py\", line 31, in <module>\n    assert cc_visit(inspect.getsource(is_woodall))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 21, "requirement": "Code Standard", "completion": "def multiples_of_num(m: int, n: int) -> list:\n    \"\"\"\n    Find the first m multiples of n.\n\n    Args:\n        m (int): The number of multiples to find.\n        n (int): The number to find multiples of.\n\n    Returns:\n        list: A list of the first m multiples of n.\n\n    Raises:\n        ValueError: If m or n is negative.\n    \"\"\"\n    if m < 0 or n < 0:\n        raise ValueError(\"Both m and n must be non-negative.\")\n    if m == 0:\n        return []\n    return [n * i for i in range(1, m + 1)]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjtetpy1x.py\", line 21, in <module>\n    assert cc_visit(inspect.getsource(multiples_of_num))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 22, "requirement": "Code Standard", "completion": "def find_first_duplicate(nums: list) -> int:\n    if not isinstance(nums, list) or not all(isinstance(num, int) for num in nums):\n        raise TypeError(\"Input must be a list of integers.\")\n    if not nums:\n        return -1\n\n    num_dict = {}\n    for num in nums:\n        if num in num_dict:\n            return num\n        num_dict[num] = True\n\n    return -1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplzrm8_tb.py\", line 34, in <module>\n    check_code_style(find_first_duplicate)\n  File \"/tmp/tmplzrm8_tb.py\", line 30, in check_code_style\n    assert result.total_errors == 0, \"Code does not conform to PEP 8 standards.\"\nAssertionError: Code does not conform to PEP 8 standards.", "passed": false}
{"task_id": 23, "requirement": "Code Standard", "completion": "def maximum_sum(list1: list[list[int]]) -> int:\n    if not list1 or all(not sublist for sublist in list1):\n        return 0\n    try:\n        return max(sum(inner_list) for inner_list in list1)\n    except TypeError as e:\n        raise TypeError(\"Input must be a list of lists containing only integers.\") from e\n", "result": "failed: File \"/tmp/tmp_32k74fs.py\", line 12\n    try: maximum_sum([[1, 2], [3, 'a']]); assert False, 'Expected TypeError' except TypeError: pass\n                                                                             ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 24, "requirement": "Code Standard", "completion": "def binary_to_decimal(binary: str) -> int:\n    \"\"\"\n    Convert a binary number to its decimal equivalent.\n\n    Args:\n        binary (str): A valid binary string.\n\n    Returns:\n        int: The decimal equivalent of the binary number.\n\n    Raises:\n        ValueError: If the input is not a valid binary string.\n    \"\"\"\n    if not isinstance(binary, str):\n        raise ValueError('Invalid binary number')\n\n    if not all(char in '01' for char in binary):\n        raise ValueError('Invalid binary number')\n\n    if not binary:\n        return 0\n\n    decimal = 0\n    for digit in binary:\n        decimal = decimal * 2 + int(digit)\n\n    return decimal\n", "result": "failed: File \"/tmp/tmpafv4ddll.py\", line 15\n    try: binary_to_decimal('102'); assert False, 'Expected ValueError' except ValueError as e: assert str(e) == 'Invalid binary number'\n                                                                       ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 25, "requirement": "Code Standard", "completion": "def find_product(arr: list) -> int:\n    # Check if the input is a list of integers\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"Input must be a list of integers.\")\n\n    # Create a dictionary to store the frequency of each element\n    freq = {}\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n\n    # Initialize the product to 1\n    product = 1\n\n    # Multiply the product by each non-repeated element\n    for num, count in freq.items():\n        if count == 1:\n            product *= num\n\n    return product\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqg14tx9a.py\", line 16, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "requirement": "Code Standard", "completion": "def check_k_elements(test_list: list[tuple], k: int) -> bool:\n    \"\"\"\n    Check if all tuples in the list contain exactly k elements.\n\n    Parameters:\n    test_list (list[tuple]): A list of tuples to be checked.\n    k (int): The number of elements each tuple should contain.\n\n    Returns:\n    bool: True if all tuples contain exactly k elements, False otherwise.\n\n    Raises:\n    TypeError: If test_list is not a list of tuples or if k is not an integer.\n    \"\"\"\n    if not isinstance(test_list, list) or not all(isinstance(t, tuple) for t in test_list):\n        raise TypeError(\"test_list must be a list of tuples.\")\n    if not isinstance(k, int):\n        raise TypeError(\"k must be an integer.\")\n\n    return all(len(t) == k for t in test_list)\n\n# Example usage:\ntuple_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nprint(check_k_elements(tuple_list, 3))  # prints: True\n\ntuple_list = [(1, 2, 3), (4, 5), (7, 8, 9)]\nprint(check_k_elements(tuple_list, 3))  # prints: False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwqtajjl9.py\", line 12, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "requirement": "Code Standard", "completion": "def remove_digits(input_list: list[str]) -> list[str]:\n    if not isinstance(input_list, list):\n        raise TypeError(\"Input must be a list.\")\n    for element in input_list:\n        if not isinstance(element, str):\n            raise TypeError(\"All elements in the list must be strings.\")\n    return [''.join([char for char in s if not char.isdigit()]) for s in input_list]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpsenjie2p.py\", line 8, in <module>\n    assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\nNameError: name 'remove' is not defined", "passed": false}
{"task_id": 28, "requirement": "Code Standard", "completion": "import math\n\ndef binomial_coeff(n: int, k: int) -> int:\n    \"\"\"\n    Calculate the binomial coefficient \"C(n, k)\".\n\n    Args:\n        n (int): The total number of items.\n        k (int): The number of items to choose.\n\n    Returns:\n        int: The binomial coefficient \"C(n, k)\".\n\n    Raises:\n        ValueError: If 'n' or 'k' is negative or if 'k' is greater than 'n'.\n    \"\"\"\n    if not (isinstance(n, int) and isinstance(k, int)):\n        raise TypeError(\"Both 'n' and 'k' must be integers.\")\n    if n < 0 or k < 0:\n        raise ValueError(\"Inputs must be non-negative.\")\n    if k > n:\n        raise ValueError(\"k must not be greater than n.\")\n\n    # Handle edge cases\n    if k == 0 or k == n:\n        return 1\n\n    # Use the formula: C(n, k) = n! / (k!(n-k)!)\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpr9yd7qpv.py\", line 18, in <module>\n    try: binomial_coeff(-1, 2)\n  File \"/tmp/tmpr9yd7qpv.py\", line 6, in binomial_coeff\n    raise ValueError(\"Inputs must be non-negative.\")\nValueError: Inputs must be non-negative.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpr9yd7qpv.py\", line 19, in <module>\n    except ValueError as e: assert str(e) == 'Inputs must be non-negative and k must not be greater than n'\nAssertionError", "passed": false}
{"task_id": 29, "requirement": "Code Standard", "completion": "def get_odd_occurrence(arr: list) -> int:\n    if not isinstance(arr, list) or not all(isinstance(i, int) for i in arr):\n        raise TypeError(\"Input must be a list of integers.\")\n\n    if not arr:\n        return None\n\n    count_dict = {}\n    for num in arr:\n        count_dict[num] = count_dict.get(num, 0) + 1\n\n    for num, count in count_dict.items():\n        if count % 2 != 0:\n            return num\n\n    return None\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4jlfem0o.py\", line 13, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "requirement": "Code Standard", "completion": "def count_substring_with_equal_ends(s: str) -> int:\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string.\")\n    if not s:\n        return 0\n\n    count = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] == s[j]:\n                count += 1\n    return count\n", "result": "failed: File \"/tmp/tmpx94fd_gh.py\", line 16\n    try: count_substring_with_equal_ends(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                                  ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 31, "requirement": "Code Standard", "completion": "import heapq\nfrom typing import List\n\ndef func(nums: List[List[int]], k: int) -> List[int]:\n    if not nums:\n        return []\n\n    # Flatten the list of lists into a single list\n    nums = [num for sublist in nums for num in sublist]\n\n    # Check if k is greater than the number of distinct integers\n    if k > len(set(nums)):\n        raise ValueError('k cannot be greater than the number of distinct integers')\n\n    # Create a dictionary to store the frequency of each number\n    freq = {}\n    for num in nums:\n        freq[num] = freq.get(num, 0) + 1\n\n    # Use a heap to find the k most frequent numbers\n    heap = []\n    for num, count in freq.items():\n        if len(heap) < k:\n            heapq.heappush(heap, (count, num))\n        else:\n            if count > heap[0][0]:\n                heapq.heapreplace(heap, (count, num))\n\n    # Return the k most frequent numbers\n    return [num for _, num in heap]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3f85quk0.py\", line 25, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "requirement": "Code Standard", "completion": "def max_prime_factors(n: int) -> int:\n    \"\"\"\n    Find the largest prime factor of a given number.\n\n    Args:\n        n (int): A positive integer.\n\n    Returns:\n        int: The largest prime factor of the input number.\n\n    Raises:\n        ValueError: If the input is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError('Input must be a positive integer')\n\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n", "result": "passed", "passed": true}
{"task_id": 33, "requirement": "Code Standard", "completion": "def decimal_to_binary(n: int) -> str:\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n\n# Test the function\nprint(decimal_to_binary(10))  # Output: 1010\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpyef5jn8u.py\", line 13, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "requirement": "Code Standard", "completion": "def find_missing(ar: list, N: int) -> int:\n    if not ar or ar[0] != 1:\n        return 1\n    if len(ar) == 1:\n        return ar[0] + 1\n\n    left, right = 0, len(ar) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if ar[mid] - mid != 1:\n            if mid == 0 or ar[mid - 1] - (mid - 1) == 1:\n                return ar[mid] - 1\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    # If the missing number is the largest number in the sequence\n    return N + 1\n", "result": "passed", "passed": true}
{"task_id": 35, "requirement": "Code Standard", "completion": "def find_rect_num(n: int) -> int:\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"Input must be a positive integer.\")\n    if n == 1:\n        return 2\n    return n * (n + 1) * (2 * n + 1) // 6\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5kk3sqv0.py\", line 7, in <module>\n    assert find_rect_num(4) == 20\nAssertionError", "passed": false}
{"task_id": 36, "requirement": "Code Standard", "completion": "def find_nth_digit(p: int, q: int, N: int) -> int:\n    \"\"\"\n    Find the nth digit in the decimal representation of the fraction p/q.\n\n    Args:\n        p (int): The numerator of the fraction.\n        q (int): The denominator of the fraction.\n        N (int): The position of the digit to find.\n\n    Returns:\n        int: The nth digit of the decimal representation of the fraction.\n\n    Raises:\n        ValueError: If the denominator is zero, as division by zero is undefined.\n    \"\"\"\n    if q == 0:\n        raise ValueError(\"Denominator cannot be zero\")\n\n    # Convert the numbers to strings\n    p_str = str(p)\n    q_str = str(q)\n\n    # Concatenate the two numbers\n    fraction_str = p_str + q_str\n\n    # Check if n is a valid index\n    if N < len(fraction_str):\n        # Return the nth digit\n        return int(fraction_str[N])\n    else:\n        # Return None if n is out of range\n        return None\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpoh451yg5.py\", line 16, in <module>\n    assert find_nth_digit(1,2,1) == 5\nAssertionError", "passed": false}
{"task_id": 37, "requirement": "Code Standard", "completion": "from typing import List, Union\n\ndef sort_mixed_list(mixed_list: List[Union[int, str]]) -> List[Union[int, str]]:\n    if not isinstance(mixed_list, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(item, (int, str)) for item in mixed_list):\n        raise TypeError(\"List must contain only integers and strings.\")\n    \n    int_list = sorted([item for item in mixed_list if isinstance(item, int)])\n    str_list = sorted([item for item in mixed_list if isinstance(item, str)])\n    \n    return int_list + str_list\n\n# Test the function\nprint(sort_mixed_list([3, 'a', 1, 'b', 2, 'c', 'd', 4]))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpt1dhlznn.py\", line 30, in <module>\n    assert sort_mixed_list.__annotations__ == {'mixed_list': list[Union[int, str]], 'return' : list}\nAssertionError", "passed": false}
{"task_id": 38, "requirement": "Code Standard", "completion": "def div_even_odd(list1: list) -> float:\n    \"\"\"\n    Find the division of the first even and odd number in a list.\n\n    Args:\n        list1 (list): A list of integers.\n\n    Returns:\n        float: The division of the first even number by the first odd number.\n\n    Raises:\n        ValueError: If the list does not contain at least one even and one odd number.\n    \"\"\"\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 != 0 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            break\n\n    if even is None or odd is None:\n        raise ValueError('List must contain at least one even and one odd number.')\n    else:\n        return odd / even if even != 0 else 0\n", "result": "failed: File \"/tmp/tmphn1t2xso.py\", line 19\n    try: div_even_odd([2, 4, 6]); assert False; except ValueError as e: assert str(e) == 'List must contain at least one even and one odd number.'\n                                                ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 39, "requirement": "Code Standard", "completion": "from collections import Counter\nfrom typing import Optional\n\ndef rearrange_string(s: str) -> Optional[str]:\n    \"\"\"\n    Check if the letters of a given string can be rearranged so that two\n    characters that are adjacent to each other are different.\n\n    Args:\n        s (str): A non-empty string consisting only of lowercase letters.\n\n    Returns:\n        str: A rearranged string where no two adjacent characters are the same.\n        If rearrangement is not possible, returns None.\n\n    Raises:\n        ValueError: If the input is not a string or contains characters other\n        than lowercase letters.\n    \"\"\"\n    if not isinstance(s, str) or not s.islower():\n        raise ValueError(\"Input must be a non-empty string consisting only of lowercase letters.\")\n\n    # Count the frequency of each character\n    freq = Counter(s)\n\n    # Check if the frequency of each character is even\n    for char, count in freq.items():\n        if count % 2 != 0:\n            return None\n\n    # If all characters have an even frequency, rearrange the string\n    # (This is a placeholder for the actual rearrangement logic)\n    rearranged = ''.join(char * (count // 2) for char, count in freq.items())\n    return rearranged\n\n# Example usage:\ntry:\n    result = rearrange_string(\"aabbcc\")\n    if result is not None:\n        print(result)\n    else:\n        print(\"Rearrangement is not possible.\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpbda9xqay.py\", line 25, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "requirement": "Code Standard", "completion": "from collections import Counter\nfrom typing import List, Dict, Union\n\ndef freq_element(nums: List[List[int]]) -> Dict[int, int]:\n    if not isinstance(nums, list) or not all(isinstance(sublist, list) for sublist in nums):\n        raise TypeError(\"Input must be a list of lists.\")\n    if not nums:\n        return {}\n\n    # Flatten the list of lists\n    flat_list = [item for sublist in nums for item in sublist]\n    # Use Counter to get the frequency of each element\n    freq = Counter(flat_list)\n    return freq\n", "result": "failed: File \"/tmp/tmp5z0415ah.py\", line 16\n    try: freq_element('not a list'); assert False; except TypeError: assert True\n                                                   ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 41, "requirement": "Code Standard", "completion": "from typing import List\n\ndef filter_evennumbers(nums: List[int]) -> List[int]:\n    \"\"\"\n    Filter even numbers from a list using a lambda function.\n\n    Args:\n        nums (List[int]): A list of integers.\n\n    Returns:\n        List[int]: A list of even integers.\n\n    Raises:\n        TypeError: If the input is not a list of integers.\n    \"\"\"\n    if not isinstance(nums, list) or not all(isinstance(num, int) for num in nums):\n        raise TypeError(\"Input must be a list of integers.\")\n    if not nums:\n        return []\n    return list(filter(lambda x: x % 2 == 0, nums))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpc2f66i0l.py\", line 15, in <module>\n    assert filter_evennumbers.__annotations__ == {'nums': list, 'return': list}\nAssertionError", "passed": false}
{"task_id": 42, "requirement": "Code Standard", "completion": "def find_sum(arr: list) -> int:\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n\n    # Handle an empty array\n    if not arr:\n        return 0\n\n    # Create a dictionary to keep track of the frequency of each element\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Sum up the elements that appear more than once\n    total_sum = 0\n    for num, count in freq.items():\n        if count > 1:\n            total_sum += num * count\n\n    return total_sum\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6849_0_m.py\", line 21, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Code Standard", "completion": "import re\nfrom typing import Optional\n\ndef text_match(text: str) -> Optional[str]:\n    pattern = '[_][a-z]+'\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string.\")\n    if not text:\n        return \"Not matched!\"\n    if re.search(pattern, text):\n        return re.search(pattern, text).group()\n    return \"Not matched!\"\n\n# Test the function\nprint(text_match(\"test_string\"))  # Output: _string\nprint(text_match(\"testString\"))  # Output: Not matched!\nprint(text_match(123))  # Raises TypeError: Input must be a string.\nprint(text_match(\"\"))  # Output: Not matched!\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpyc10upml.py\", line 15, in <module>\n    print(text_match(123))  # Raises TypeError: Input must be a string.\n  File \"/tmp/tmpyc10upml.py\", line 6, in text_match\n    raise TypeError(\"Input must be a string.\")\nTypeError: Input must be a string.", "passed": false}
{"task_id": 44, "requirement": "Code Standard", "completion": "def text_match_string(text: str, word: str) -> bool:\n    \"\"\"\n    Check if a string starts with a specific word.\n\n    Parameters:\n    text (str): The input string to be checked.\n    word (str): The word to match at the beginning of the string.\n\n    Returns:\n    bool: True if the string starts with the word, False otherwise.\n    \"\"\"\n    if not isinstance(text, str) or not isinstance(word, str):\n        raise TypeError(\"Both 'text' and 'word' must be of type str.\")\n    if not text.strip():\n        raise ValueError(\"'text' cannot be an empty string or contain only spaces.\")\n    return text.startswith(word)\n", "result": "failed: File \"/tmp/tmpg85bkg1o.py\", line 10\n    try: text_match_string(123); assert False, 'TypeError not raised' except TypeError: pass\n                                                                      ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 45, "requirement": "Code Standard", "completion": "def get_gcd(numbers: list) -> int:\n    if not numbers:\n        raise ValueError('Input list cannot be empty.')\n\n    def _gcd(a: int, b: int) -> int:\n        while b != 0:\n            a, b = b, a % b\n        return a\n\n    result = numbers[0]\n    for num in numbers[1:]:\n        result = _gcd(result, num)\n\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpz3u432dw.py\", line 20, in <module>\n    assert cc_visit(inspect.getsource(get_gcd))[0].complexity <=1\nAssertionError", "passed": false}
{"task_id": 46, "requirement": "Code Standard", "completion": "def test_distinct(numbers: list) -> bool:\n    \"\"\"\n    Check if all numbers in the list are distinct.\n\n    Args:\n        numbers (list): A list of integers.\n\n    Returns:\n        bool: True if all numbers are distinct, False otherwise.\n\n    Raises:\n        TypeError: If the input is not a list or if the list contains non-integer elements.\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(num, int) for num in numbers):\n        raise TypeError(\"List must contain only integers.\")\n\n    return len(numbers) == len(set(numbers))\n", "result": "passed", "passed": true}
{"task_id": 48, "requirement": "Code Standard", "completion": "def odd_bit_set_number(n: int) -> int:\n    \"\"\"\n    Set all odd bits of a given number.\n\n    Args:\n        n (int): The input number.\n\n    Returns:\n        int: The input number with all odd bits set.\n\n    Raises:\n        TypeError: If the input is not an integer.\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n\n    # Edge case: if n is 0, return 1\n    if n == 0:\n        return 1\n\n    # Set all odd bits to 1\n    for i in range(1, 32, 2):  # Assuming 32-bit integer\n        if (n >> i) & 1 == 0:\n            n |= (1 << i)\n\n    return n\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpghadab_h.py\", line 12, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "requirement": "Code Standard", "completion": "def specified_element(two_dim_list, position=0):\n    \"\"\"\n    Extract every first or specified element from a given two-dimensional list.\n\n    Args:\n        two_dim_list (list): A two-dimensional list.\n        position (int): The index of the element to extract. Defaults to 0.\n\n    Returns:\n        list: A list of elements from each sublist at the specified index.\n\n    Raises:\n        IndexError: If the specified index is out of range for any sublist.\n    \"\"\"\n    result = []\n    for row in two_dim_list:\n        if position < len(row):\n            result.append(row[position])\n        else:\n            raise IndexError('Index out of range for sublist')\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpm44cks_l.py\", line 15, in <module>\n    assert specified_element([[1, 2], [3], [4, 5, 6]], 1) == [2, 5]\n  File \"/tmp/tmpm44cks_l.py\", line 7, in specified_element\n    raise IndexError('Index out of range for sublist')\nIndexError: Index out of range for sublist", "passed": false}
{"task_id": 51, "requirement": "Code Standard", "completion": "def check_equilateral(a: int, b: int, c: int) -> bool:\n    if a <= 0 or b <= 0 or c <= 0:\n        raise ValueError(\"All sides of a triangle must be positive integers.\")\n    if a == b == c:\n        print(\"The triangle is equilateral.\")\n        return True\n    else:\n        print(\"The triangle is not equilateral.\")\n        return False\n\n# Test the function\ncheck_equilateral(3, 3, 3)  # This should print \"The triangle is equilateral.\"\ncheck_equilateral(3, 4, 5)  # This should print \"The triangle is not equilateral.\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkb_lsnjq.py\", line 32, in <module>\n    assert cc_visit(inspect.getsource(check_equilateral))[0].complexity ==1\nAssertionError", "passed": false}
{"task_id": 52, "requirement": "Code Standard", "completion": "def parallelogram_area(base: float, height: float) -> float:\n    \"\"\"\n    Calculate the area of a parallelogram given the base and height.\n\n    Args:\n        base (float): The base of the parallelogram.\n        height (float): The height of the parallelogram.\n\n    Returns:\n        float: The area of the parallelogram.\n\n    Raises:\n        TypeError: If the inputs are not numerical.\n    \"\"\"\n    if not isinstance(base, (int, float)) or not isinstance(height, (int, float)):\n        raise TypeError(\"Both base and height must be numerical (int or float).\")\n    return base * height\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8mpwkv29.py\", line 33, in <module>\n    assert cc_visit(inspect.getsource(parallelogram_area))[0].complexity ==1\nAssertionError", "passed": false}
{"task_id": 53, "requirement": "Code Standard", "completion": "def check_equality(s: str) -> str:\n    if not isinstance(s, str):\n        raise TypeError('Input must be a string')\n    return 'Equal' if s[0] == s[-1] else 'Not Equal'\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwv2dja17.py\", line 15, in <module>\n    assert check_equality('') == 'Equal'\n  File \"/tmp/tmpwv2dja17.py\", line 4, in check_equality\n    return 'Equal' if s[0] == s[-1] else 'Not Equal'\nIndexError: string index out of range", "passed": false}
{"task_id": 54, "requirement": "Code Standard", "completion": "def counting_sort(arr: list) -> list:\n    \"\"\"\n    Sorts an array of non-negative integers using the Counting Sort algorithm.\n\n    Args:\n        arr (list): A list of non-negative integers.\n\n    Returns:\n        list: A sorted list of integers.\n\n    Raises:\n        TypeError: If the input is not a list or contains non-integer elements.\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list of non-negative integers.\")\n\n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) and x >= 0 for x in arr):\n        raise TypeError(\"Input list must contain only non-negative integers.\")\n\n    # Check for edge cases: empty list or list with a single element\n    if not arr:\n        return []\n    if len(arr) == 1:\n        return arr\n\n    # Find the maximum element in the array\n    max_val = max(arr)\n\n    # Initialize the count array with all zeros\n    count = [0] * (max_val + 1)\n\n    # Store the count of each element in the count array\n    for num in arr:\n        count[num] += 1\n\n    # Store the cumulative count\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n\n    # Build the output array\n    output = [0] * len(arr)\n    for num in reversed(arr):\n        output[count[num] - 1] = num\n        count[num] -= 1\n\n    return output\n", "result": "passed", "passed": true}
{"task_id": 55, "requirement": "Code Standard", "completion": "def tn_gp(a: int, r: int, n: int) -> int:\n    \"\"\"\n    Calculate the nth term of a geometric series.\n\n    Parameters:\n    a (int): The first term of the series.\n    r (int): The common ratio of the series.\n    n (int): The term number to calculate.\n\n    Returns:\n    int: The nth term of the geometric series.\n\n    Raises:\n    ValueError: If the term number (n) is less than 1.\n    \"\"\"\n    if n < 1:\n        raise ValueError('Term number must be greater than 0')\n    if r == 0:\n        return 0\n    return a * r ** (n - 1)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjuof_49q.py\", line 7, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "requirement": "Code Standard", "completion": "def check(n: int) -> bool:\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is one less than twice its reverse, False otherwise.\n\n    Raises:\n        TypeError: If the input is not an integer.\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n\n    # Convert the number to a string, reverse it, and convert it back to an integer\n    reverse = int(str(n)[::-1])\n\n    # Check if the number is one less than twice its reverse\n    return n == 2 * reverse - 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdr5co2vc.py\", line 18, in <module>\n    assert check(1) == False\nAssertionError", "passed": false}
{"task_id": 57, "requirement": "Code Standard", "completion": "def find_max_num(digits: list, n: int) -> int:\n    if not digits:\n        return 0\n    if n > len(digits):\n        raise ValueError('Number of digits exceeds the length of the list.')\n    sorted_digits = sorted(digits, reverse=True)\n    max_num = int(''.join(map(str, sorted_digits[:n])))\n    return max_num\n", "result": "passed", "passed": true}
{"task_id": 58, "requirement": "Code Standard", "completion": "def opposite_signs(a: int, b: int) -> bool:\n    \"\"\"\n    Check if two integers have opposite signs.\n\n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n\n    Returns:\n    bool: True if the integers have opposite signs, False otherwise.\n\n    Raises:\n    TypeError: If either 'a' or 'b' is not an integer.\n    \"\"\"\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise TypeError(\"Both inputs must be integers.\")\n    return (a > 0) != (b > 0)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5kr9edbb.py\", line 23, in <module>\n    assert opposite_signs(0, -1) == True\nAssertionError", "passed": false}
{"task_id": 59, "requirement": "Code Standard", "completion": "def is_octagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth octagonal number.\n\n    Parameters:\n    n (int): The position of the octagonal number to calculate.\n\n    Returns:\n    int: The nth octagonal number.\n\n    Raises:\n    ValueError: If the input is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    return n * (4 * n - 3) // 2\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2ogk_c8s.py\", line 5, in <module>\n    assert is_octagonal(5) == 65\nAssertionError", "passed": false}
{"task_id": 60, "requirement": "Code Standard", "completion": "def max_len_subsequence(arr: list[int]) -> int:\n    \"\"\"\n    Find the maximum length of the subsequence with difference between\n    adjacent elements for the given array.\n\n    Args:\n        arr (list[int]): The input array of integers.\n\n    Returns:\n        int: The maximum length of the subsequence.\n\n    Raises:\n        TypeError: If the input array is not a list or if the second parameter is not an integer.\n    \"\"\"\n    if not isinstance(arr, list) or not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"The input array must be a list of integers.\")\n\n    if not arr:\n        return 0  # Return 0 if the input array is empty.\n\n    n = len(arr)\n    dp = [1] * n  # Initialize the dynamic programming array.\n\n    # Iterate over the array to find the maximum length of subsequences.\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] >= arr[j] and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n\n    # Return the maximum value in the dynamic programming array.\n    return max(dp)\n\n# Example usage:\nprint(max_len_subsequence([1, 2, 3, 4]))  # Output: 4\nprint(max_len_subsequence([5, 1, 2, 3, 4]))  # Output: 4\nprint(max_len_subsequence([10, 9, 8, 7, 6]))  # Output: 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0ge4t5a7.py\", line 19, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nNameError: name 'max_len_sub' is not defined", "passed": false}

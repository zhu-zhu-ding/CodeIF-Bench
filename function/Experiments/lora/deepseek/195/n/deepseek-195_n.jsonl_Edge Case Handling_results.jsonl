{"task_id": 11, "requirement": "Edge Case Handling", "completion": "def remove_occ(s, char):\n    if len(char) != 1:\n        raise ValueError('Second parameter must be a single character.')\n    \n    first_index = s.find(char)\n    last_index = s.rfind(char)\n    \n    if first_index == -1 or last_index == -1:\n        return s  # Return the original string if the character does not exist\n    \n    s = s[:first_index] + s[first_index+1:]\n    s = s[:last_index] + s[last_index+1:]\n    \n    return s\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9q2burq6.py\", line 11, in <module>\n    assert remove_occ(\"hello\",\"l\") == \"heo\"\nAssertionError", "passed": false}
{"task_id": 12, "requirement": "Edge Case Handling", "completion": "def sort_matrix(matrix):\n    # Check if the input is a list of lists\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise TypeError(\"Input must be a list of lists.\")\n    \n    # Check if all elements in the matrix are integers\n    if not all(isinstance(num, int) for row in matrix for num in row):\n        raise TypeError(\"All elements in the matrix must be integers.\")\n    \n    # Handle an empty matrix\n    if not matrix:\n        return []\n    \n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n    \n    # Sort the matrix based on the row sums\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    \n    return sorted_matrix\n", "result": "passed", "passed": true}
{"task_id": 13, "requirement": "Edge Case Handling", "completion": "def count_common(word_list):\n    if not isinstance(word_list, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(word, str) for word in word_list):\n        raise TypeError(\"All elements in the list must be strings.\")\n    \n    # Handle empty list input\n    if not word_list:\n        return []\n    \n    # Count the occurrences of each word\n    word_counts = {}\n    for word in word_list:\n        word_counts[word] = word_counts.get(word, 0) + 1\n    \n    # Get the maximum count\n    max_count = max(word_counts.values())\n    \n    # Get the words with the maximum count\n    common_words = [word for word, count in word_counts.items() if count == max_count]\n    \n    return common_words\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpq58yr_9d.py\", line 18, in <module>\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nAssertionError", "passed": false}
{"task_id": 14, "requirement": "Edge Case Handling", "completion": "def find_volume(base_area, height_base, height_prism):\n    # Check if all dimensions are positive numbers\n    if not all(isinstance(dim, (int, float)) and dim > 0 for dim in (base_area, height_base, height_prism)):\n        raise ValueError('All dimensions must be positive numbers.')\n    \n    # Calculate the volume\n    return base_area * height_base * height_prism\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpi_qrwar3.py\", line 7, in <module>\n    assert find_volume(10,8,6) == 240\nAssertionError", "passed": false}
{"task_id": 15, "requirement": "Edge Case Handling", "completion": "def split_lowerstring(s):\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string.\")\n    \n    # Check if the string contains any lowercase letters\n    if not any(char.islower() for char in s):\n        return []\n    \n    # Split the string at lowercase letters and return the segments\n    segments = []\n    current_segment = ''\n    for char in s:\n        if char.islower():\n            if current_segment:\n                segments.append(current_segment)\n                current_segment = ''\n        current_segment += char\n    if current_segment:\n        segments.append(current_segment)\n    \n    return segments\n\n# Example usage:\ns = \"HelloWorldthisISaTest\"\nprint(split_lowerstring(s))  # Output: ['HelloWorld', 'this', 'IS', 'a', 'Test']\n", "result": "failed: File \"/tmp/tmppcwowfl8.py\", line 26\n    try: split_lowerstring(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 16, "requirement": "Edge Case Handling", "completion": "import re\n\ndef text_lowercase_underscore(text):\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string.\")\n    \n    if not text:\n        return 'Not matched!'\n    \n    # The regular expression pattern r'\\b[a-z]+\\_[a-z]+\\b' matches sequences of\n    # one or more lowercase letters followed by an underscore, followed by\n    # one or more lowercase letters, where the sequence is a word boundary.\n    pattern = r'\\b[a-z]+\\_[a-z]+\\b'\n    matches = re.findall(pattern, text)\n    \n    if matches:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\ntext = \"This is a test_string with some lowercase_letters and an underscore.\"\nprint(text_lowercase_underscore(text))  # Output: 'Found a match!'\n\ntext = \"This is a Test_String with some Uppercase_Letters and an underscore.\"\nprint(text_lowercase_underscore(text))  # Output: 'Not matched!'\n\ntext = \"\"\nprint(text_lowercase_underscore(text))  # Output: 'Not matched!'\n", "result": "passed", "passed": true}
{"task_id": 17, "requirement": "Edge Case Handling", "completion": "def square_perimeter(side_length):\n    \"\"\"\n    This function calculates the perimeter of a square.\n\n    :param side_length: length of one side of the square\n    :return: perimeter of the square\n    :raises ValueError: if the side_length is negative\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    return 4 * side_length\n", "result": "passed", "passed": true}
{"task_id": 18, "requirement": "Edge Case Handling", "completion": "def remove_dirty_chars(s1, s2):\n    if not isinstance(s1, str) or not isinstance(s2, str):\n        raise TypeError(\"Both inputs must be strings.\")\n    if not s1.isalpha() or not s2.isalpha():\n        raise ValueError(\"Input strings must only contain alphabetic characters.\")\n    if not s2:\n        return s1\n    return ''.join(c for c in s1 if c not in s2)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpv8tlqvr0.py\", line 21, in <module>\n    assert remove_dirty_chars('example', '') == 'example', 'Function should return the original string if the second string is empty.'\n  File \"/tmp/tmpv8tlqvr0.py\", line 5, in remove_dirty_chars\n    raise ValueError(\"Input strings must only contain alphabetic characters.\")\nValueError: Input strings must only contain alphabetic characters.", "passed": false}
{"task_id": 19, "requirement": "Edge Case Handling", "completion": "def test_duplicate(arr):\n    if not isinstance(arr, list):\n        raise TypeError('Input must be a list of integers.')\n    if not all(isinstance(x, int) for x in arr):\n        raise ValueError('Input must be a list of integers.')\n    \n    if len(arr) <= 1:\n        return False\n    return len(arr) != len(set(arr))\n\n# Example usage:\nprint(test_duplicate([]))  # prints: False\nprint(test_duplicate([1]))  # prints: False\nprint(test_duplicate([1, 2, 3, 4, 5]))  # prints: False\nprint(test_duplicate([1, 2, 3, 4, 5, 5]))  # prints: True\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpanypgn9l.py\", line 26, in <module>\n    test_duplicate(None)\n  File \"/tmp/tmpanypgn9l.py\", line 3, in test_duplicate\n    raise TypeError('Input must be a list of integers.')\nTypeError: Input must be a list of integers.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpanypgn9l.py\", line 29, in <module>\n    assert str(e) == 'Input must be a list of integers'\nAssertionError", "passed": false}
{"task_id": 20, "requirement": "Edge Case Handling", "completion": "def is_woodall(n):\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    if n == 0:\n        return True  # 0 is a Woodall number (0*2^0 - 1)\n    if n < 0:\n        return False  # Negative numbers are not Woodall numbers\n    # Use the more efficient algorithm for positive integers\n    return n & (n + 1) == 0 and n % 3 == 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpz_oce_81.py\", line 10, in <module>\n    assert is_woodall(383) == True\nAssertionError", "passed": false}
{"task_id": 21, "requirement": "Edge Case Handling", "completion": "def multiples_of_num(n, m):\n    if m < 0 or n < 0:\n        raise ValueError(\"Both m and n must be non-negative.\")\n    if m == 0:\n        return []\n    return [n * i for i in range(1, m + 1)]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpetlf2q8h.py\", line 7, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "requirement": "Edge Case Handling", "completion": "def find_first_duplicate(arr):\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list of integers.\")\n    if not arr:\n        return -1\n    num_dict = {}\n    for num in arr:\n        if not isinstance(num, int):\n            raise TypeError(\"All elements in the list must be integers.\")\n        if num in num_dict:\n            return num\n        num_dict[num] = 1\n    return -1\n", "result": "passed", "passed": true}
{"task_id": 23, "requirement": "Edge Case Handling", "completion": "def maximum_sum(list_of_lists):\n    if not list_of_lists:\n        return 0\n    try:\n        return max(sum(inner_list) for inner_list in list_of_lists)\n    except TypeError:\n        raise TypeError(\"Input must be a list of lists containing only integers.\")\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]\nprint(maximum_sum(list_of_lists))  # Output: 39\n\n# Test with an empty list\nprint(maximum_sum([]))  # Output: 0\n\n# Test with a list of empty sublists\nprint(maximum_sum([[], [], []]))  # Output: 0\n\n# Test with a list containing non-integer elements\ntry:\n    print(maximum_sum([[1, 2, '3'], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\nexcept TypeError as e:\n    print(e)  # Output: Input must be a list of lists containing only integers.\n", "result": "failed: File \"/tmp/tmp4ndom3ga.py\", line 24\n    try: maximum_sum([[1, 2], [3, 'a']]); assert False, 'Expected TypeError' except TypeError: pass\n                                                                             ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 24, "requirement": "Edge Case Handling", "completion": "def binary_to_decimal(binary):\n    if not binary:\n        return 0\n\n    binary = str(binary)\n    if not all(bit in '01' for bit in binary):\n        raise ValueError('Invalid binary number')\n\n    decimal, i = 0, 0\n    while binary != 0:\n        dec = int(binary[-1])\n        decimal = decimal + dec * pow(2, i)\n        binary = binary[:-1]\n        i += 1\n    return decimal\n", "result": "failed: File \"/tmp/tmp76z16o1_.py\", line 17\n    try: binary_to_decimal('102'); assert False, 'Expected ValueError' except ValueError as e: assert str(e) == 'Invalid binary number'\n                                                                       ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 25, "requirement": "Edge Case Handling", "completion": "def find_product(arr):\n    # Check if the input is a list of integers\n    if not isinstance(arr, list) or not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"Input must be a list of integers.\")\n\n    # Create a dictionary to store the frequency of each element\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Initialize the product to 1\n    product = 1\n\n    # Multiply the product by each non-repeated element\n    for num, count in freq.items():\n        if count == 1:\n            product *= num\n\n    return product\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvsozcoub.py\", line 19, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "requirement": "Edge Case Handling", "completion": "def check_k_elements(tuple_list, k):\n    if not isinstance(tuple_list, list) or not all(isinstance(t, tuple) for t in tuple_list):\n        raise TypeError(\"Input must be a list of tuples.\")\n    if not isinstance(k, int) or k < 0:\n        raise TypeError(\"k must be a non-negative integer.\")\n    \n    # Handle edge cases for an empty list or tuples with zero elements\n    if not tuple_list:\n        return True\n    if not tuple_list[0]:\n        return all(not t for t in tuple_list)\n    \n    # Check if all tuples have exactly k elements\n    return all(len(t) == k for t in tuple_list)\n\n# Example usage:\ntuple_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nprint(check_k_elements(tuple_list, 3))  # prints: True\n\ntuple_list = [(1, 2, 3), (4, 5), (7, 8, 9)]\nprint(check_k_elements(tuple_list, 3))  # prints: False\n\ntuple_list = []\nprint(check_k_elements(tuple_list, 3))  # prints: True\n\ntuple_list = [(1, 2, 3), (), (7, 8, 9)]\nprint(check_k_elements(tuple_list, 3))  # prints: False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpk0bkzrjf.py\", line 22, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "requirement": "Edge Case Handling", "completion": "def remove(lst):\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(item, str) for item in lst):\n        raise TypeError(\"All elements in the list must be strings.\")\n    \n    # Handle edge cases gracefully\n    return [''.join([i for i in s if not i.isdigit()]) or 'Empty' for s in lst]\n", "result": "passed", "passed": true}
{"task_id": 28, "requirement": "Edge Case Handling", "completion": "import math\n\ndef binomial_coeff(n, k):\n    if n < 0 or k < 0:\n        raise ValueError('Inputs must be non-negative.')\n    if k > n:\n        raise ValueError('k must not be greater than n.')\n    \n    # Handle special cases\n    if k == 0 or k == n:\n        return 1\n    \n    # Use the formula for binomial coefficients\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n\n# Example usage:\nprint(binomial_coeff(5, 2))  # Output: 10\nprint(binomial_coeff(5, 0))  # Output: 1\nprint(binomial_coeff(5, 5))  # Output: 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplb92eznb.py\", line 20, in <module>\n    try: binomial_coeff(-1, 2)\n  File \"/tmp/tmplb92eznb.py\", line 4, in binomial_coeff\n    raise ValueError('Inputs must be non-negative.')\nValueError: Inputs must be non-negative.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmplb92eznb.py\", line 21, in <module>\n    except ValueError as e: assert str(e) == 'Inputs must be non-negative and k must not be greater than n'\nAssertionError", "passed": false}
{"task_id": 29, "requirement": "Edge Case Handling", "completion": "def get_odd_occurrence(lst):\n    # Check if the input is a list\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list of integers.\")\n\n    # Check if the list is empty\n    if not lst:\n        return None\n\n    # Create a dictionary to count occurrences\n    count_dict = {}\n    for num in lst:\n        if not isinstance(num, int):\n            raise TypeError(\"All elements in the list must be integers.\")\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Find the element with an odd count\n    for num, count in count_dict.items():\n        if count % 2 != 0:\n            return num\n\n    # If no element is found, return None\n    return None\n\n# Example usage:\nprint(get_odd_occurrence([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]))  # Output: 1\nprint(get_odd_occurrence([]))  # Output: None\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpb4bgzmgd.py\", line 26, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "requirement": "Edge Case Handling", "completion": "def count_substring_with_equal_ends(s):\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string.\")\n    \n    if not s:\n        return 0\n    \n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if s[i] == s[j]:\n                count += 1\n    return count\n", "result": "failed: File \"/tmp/tmprx8wvmct.py\", line 16\n    try: count_substring_with_equal_ends(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                                  ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 31, "requirement": "Edge Case Handling", "completion": "import heapq\n\ndef func(nums_list, k):\n    # Check if all input lists are empty\n    if not any(nums_list):\n        return []\n\n    # Raise a ValueError if k is greater than the number of distinct integers\n    total_distinct_nums = sum(len(set(nums)) for nums in nums_list)\n    if k > total_distinct_nums:\n        raise ValueError('k cannot be greater than the number of distinct integers')\n\n    # Create a dictionary to store the frequency of each number\n    freq = {}\n    for nums in nums_list:\n        for num in nums:\n            if num in freq:\n                freq[num] += 1\n            else:\n                freq[num] = 1\n\n    # Use a heap to find the k most frequent numbers\n    heap = []\n    for num, count in freq.items():\n        if len(heap) < k:\n            heapq.heappush(heap, (count, num))\n        else:\n            if count > heap[0][0]:\n                heapq.heapreplace(heap, (count, num))\n\n    # Return the k most frequent numbers\n    return [num for _, num in heap]\n\n# Example usage:\nnums_list = [\n    [1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5],\n    [6, 6, 6, 7, 7, 8, 8, 8, 9, 9, 9, 9],\n    []\n]\nk = 3\nprint(func(nums_list, k))  # Output: [5, 3, 4]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqg__4cmt.py\", line 36, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "requirement": "Edge Case Handling", "completion": "def max_prime_factors(n):\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError('Input must be a positive integer')\n\n    if n == 2:\n        return 2\n\n    max_prime = -1\n    while n % 2 == 0:\n        max_prime = 2\n        n >>= 1  # equivalent to n /= 2\n\n    # n must be odd at this point, thus skip one element (Note i = i +2)\n    i = 3\n    while i * i <= n:\n        # while n is divisible by i, divide n\n        while n % i == 0:\n            max_prime = i\n            n = n / i\n        i += 2\n\n    # This condition is to handle the case when n is a prime number\n    # greater than 2\n    if n > 2:\n        max_prime = n\n\n    return int(max_prime)\n\n# Example usage:\nprint(max_prime_factors(10))  # Output: 5\nprint(max_prime_factors(17))  # Output: 17\nprint(max_prime_factors(315))  # Output: 7\nprint(max_prime_factors(2))   # Output: 2\n", "result": "passed", "passed": true}
{"task_id": 33, "requirement": "Edge Case Handling", "completion": "def decimal_to_binary(n):\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n\n# Test the function\nprint(decimal_to_binary(10))  # Output: 1010\nprint(decimal_to_binary(0))   # Output: 0\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpnl_4vgoy.py\", line 14, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "requirement": "Edge Case Handling", "completion": "def find_missing(arr):\n    if not arr or arr[0] != 1:\n        return 1\n    if not all(arr[i] == arr[i - 1] + 1 for i in range(1, len(arr))):\n        raise ValueError('Input list must be sorted.')\n    return -1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp508edzf1.py\", line 7, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "requirement": "Edge Case Handling", "completion": "def find_rect_num(n):\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    if n == 1:\n        return 2\n    return n * (n + 1) * (2 * n + 1) // 6\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmptr72o0rj.py\", line 7, in <module>\n    assert find_rect_num(4) == 20\nAssertionError", "passed": false}
{"task_id": 37, "requirement": "Edge Case Handling", "completion": "def sort_mixed_list(lst):\n    # Check if the input is a list\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list.\")\n    # Check if the list contains only integers and strings\n    if not all(isinstance(item, (int, str)) for item in lst):\n        raise TypeError(\"List must contain only integers and strings.\")\n    \n    # Separate the integers and strings\n    int_lst = sorted([i for i in lst if isinstance(i, int)])\n    str_lst = sorted([i for i in lst if isinstance(i, str)])\n    \n    # Combine the sorted integers and strings\n    return int_lst + str_lst\n\n# Test the function with an empty list\nprint(sort_mixed_list([]))  # Output: []\n\n# Test the function with a list of mixed integers and strings\nprint(sort_mixed_list([3, 'a', 1, 'b', 2, 'c', 'd', 4]))  # Output: [1, 2, 3, 4, 'a', 'b', 'c', 'd']\n", "result": "passed", "passed": true}
{"task_id": 38, "requirement": "Edge Case Handling", "completion": "def div_even_odd(lst):\n    even = None\n    odd = None\n    for i in lst:\n        if i % 2 == 0 and even is None:\n            even = i\n        elif i % 2 != 0 and odd is None:\n            odd = i\n        if even is not None and odd is not None:\n            break\n    if even is None or odd is None:\n        raise ValueError('List must contain at least one even and one odd number.')\n    else:\n        # Check if the first even number is zero and return zero if so\n        if even == 0:\n            return 0\n        else:\n            return odd / even\n", "result": "failed: File \"/tmp/tmp8biannue.py\", line 23\n    try: div_even_odd([2, 4, 6]); assert False; except ValueError as e: assert str(e) == 'List must contain at least one even and one odd number.'\n                                                ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 39, "requirement": "Edge Case Handling", "completion": "from collections import Counter\n\ndef rearrange_string(s):\n    # Check if the input is a string\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string.\")\n    # Check if the string contains only lowercase letters\n    if not s.islower() or not s.isalpha():\n        raise ValueError(\"Input must be a non-empty string consisting only of lowercase letters.\")\n    \n    # Count the frequency of each character\n    freq = Counter(s)\n    \n    # Check if the frequency of each character is even\n    for char, count in freq.items():\n        if count % 2 != 0:\n            return \"\"\n    \n    # If all characters have an even count, rearrange the string\n    # (This part is not implemented in the current problem statement)\n    # rearranged_string = ''.join(char * (count // 2) for char, count in freq.items())\n    # return rearranged_string\n\n    # For the current problem, we just return an empty string\n    return \"\"\n\n# Example usage:\ntry:\n    result = rearrange_string(\"aabbcc\")\n    print(result)  # Should print an empty string\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkzxwcxxi.py\", line 27, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "requirement": "Edge Case Handling", "completion": "from collections import Counter\n\ndef freq_element(lst):\n    if not isinstance(lst, list) or not lst:\n        raise TypeError(\"Input must be a non-empty list of lists.\")\n    \n    # Flatten the list of lists\n    flat_list = [item for sublist in lst for item in sublist]\n    # Use Counter to get the frequency of each element\n    freq = Counter(flat_list)\n    return freq\n", "result": "failed: File \"/tmp/tmpj7x5u8ry.py\", line 13\n    try: freq_element('not a list'); assert False; except TypeError: assert True\n                                                   ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 41, "requirement": "Edge Case Handling", "completion": "def filter_evennumbers(numbers):\n    if not isinstance(numbers, list) or not all(isinstance(num, int) for num in numbers):\n        raise TypeError(\"Input must be a list of integers.\")\n    return list(filter(lambda x: x % 2 == 0, numbers))\n", "result": "passed", "passed": true}
{"task_id": 42, "requirement": "Edge Case Handling", "completion": "def find_sum(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Handle an empty array\n    if not arr:\n        return 0\n\n    # Create a dictionary to keep track of the frequency of each element\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Sum up the elements that appear more than once\n    sum_repeated = 0\n    for num, count in freq.items():\n        if count > 1:\n            sum_repeated += num * count\n\n    return sum_repeated\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_3xjmteh.py\", line 21, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Edge Case Handling", "completion": "import re\n\ndef text_match(text):\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string.\")\n    if text == \"\":\n        return \"Not matched!\"\n    pattern = '[_][a-z]+'\n    if re.search(pattern, text):\n        return re.search(pattern, text).group()\n    else:\n        return \"Not matched!\"\n\n# Test the function\nprint(text_match(\"test_string\"))  # Output: _string\nprint(text_match(\"testString\"))   # Output: Not matched!\nprint(text_match(\"\"))              # Output: Not matched!\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3eokj2za.py\", line 16, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 44, "requirement": "Edge Case Handling", "completion": "def text_match_string(text, word):\n    if not isinstance(text, str) or not isinstance(word, str):\n        raise TypeError(\"Both 'text' and 'word' must be strings.\")\n    if not text.strip():\n        raise ValueError(\"'text' cannot be an empty string or contain only spaces.\")\n    return text.startswith(word)\n", "result": "failed: File \"/tmp/tmpfqiomad2.py\", line 10\n    try: text_match_string(123); assert False, 'TypeError not raised' except TypeError: pass\n                                                                      ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 46, "requirement": "Edge Case Handling", "completion": "def test_distinct(lst):\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(item, int) for item in lst):\n        raise TypeError(\"List must contain only integers.\")\n    \n    # Handle edge cases: empty list or list with a single element\n    if not lst:\n        return True\n    if len(lst) == 1:\n        return True\n    \n    # Check for distinct elements\n    return len(lst) == len(set(lst))\n\n# Test cases\nprint(test_distinct([1, 2, 3, 4, 5]))  # True, all numbers are distinct\nprint(test_distinct([1, 2, 2, 4, 5]))  # False, 2 is repeated\nprint(test_distinct([]))               # True, empty list\nprint(test_distinct([1]))              # True, list with a single element\n\n# Raises TypeError if input is not a list or contains non-integer elements\ntry:\n    print(test_distinct(\"not a list\"))  # Raises TypeError\nexcept TypeError as e:\n    print(e)\n\ntry:\n    print(test_distinct([1, \"not an integer\"]))  # Raises TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 47, "requirement": "Edge Case Handling", "completion": "def compute_last_digit(a, b):\n    if a > b:\n        raise ValueError('a should not be greater than b')\n    if a == b:\n        return 1\n\n    # Calculate the factorial of a and b\n    factorial_a = 1\n    for i in range(1, a + 1):\n        factorial_a *= i\n\n    factorial_b = 1\n    for i in range(1, b + 1):\n        factorial_b *= i\n\n    # Find the last digit of the division\n    last_digit = (factorial_a % 10) * pow(factorial_b, -1, 10)\n    return last_digit % 10\n\n# Test the function\nprint(compute_last_digit(5, 7))  # Output: 5\nprint(compute_last_digit(5, 5))  # Output: 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpfibmut_e.py\", line 17, in <module>\n    print(compute_last_digit(5, 7))  # Output: 5\n  File \"/tmp/tmpfibmut_e.py\", line 14, in compute_last_digit\n    last_digit = (factorial_a % 10) * pow(factorial_b, -1, 10)\nValueError: base is not invertible for the given modulus", "passed": false}
{"task_id": 48, "requirement": "Edge Case Handling", "completion": "def odd_bit_set_number(n):\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    \n    # Edge case: if the input is 0, return 1\n    if n == 0:\n        return 1\n    \n    # Convert the number to binary and reverse it\n    binary = bin(n)[2:][::-1]\n    # Iterate over the binary string\n    for i in range(len(binary)):\n        # If the bit is 0 and its position is odd, set it to 1\n        if i % 2 != 0 and binary[i] == '0':\n            binary = binary[:i] + '1' + binary[i+1:]\n    # Convert the binary string back to a number and return it\n    return int(binary[::-1], 2)\n\n# Example usage:\nprint(odd_bit_set_number(10))  # Output: 14\nprint(odd_bit_set_number(0))   # Output: 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpnzeyhhsf.py\", line 19, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "requirement": "Edge Case Handling", "completion": "def specified_element(two_dim_list, position=0):\n    # Check if the list is empty\n    if not two_dim_list:\n        return []\n\n    # Check if the position is out of range for any sublist\n    if any(len(row) <= position for row in two_dim_list):\n        raise IndexError('Index out of range for sublist')\n\n    # Extract elements from sublists at the specified position\n    return [row[position] for row in two_dim_list]\n\n# Example usage:\ntwo_dim_list = [[1, 2, 3], [4, 5], [6, 7, 8, 9]]\n\n# Extract the first element from each row\nprint(specified_element(two_dim_list))  # Output: [1, 4, 6]\n\n# Extract the third element from each row\nprint(specified_element(two_dim_list, 2))  # Output: [3, 5, 7]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp28syhnmb.py\", line 15, in <module>\n    print(specified_element(two_dim_list, 2))  # Output: [3, 5, 7]\n  File \"/tmp/tmp28syhnmb.py\", line 7, in specified_element\n    raise IndexError('Index out of range for sublist')\nIndexError: Index out of range for sublist", "passed": false}
{"task_id": 50, "requirement": "Edge Case Handling", "completion": "def min_length_list(lst):\n    if not isinstance(lst, list) or not all(isinstance(sub_lst, list) for sub_lst in lst):\n        raise ValueError('Input must be a list of lists.')\n    \n    # Find the minimum length and the list(s) with that length\n    min_length = min(len(sub_lst) for sub_lst in lst)\n    shortest_lists = [sub_lst for sub_lst in lst if len(sub_lst) == min_length]\n    \n    # Return the first list if all lists are of the same length\n    if len(shortest_lists) == 1:\n        return (min_length, shortest_lists[0])\n    else:\n        return (min_length, shortest_lists)\n\n# Example usage:\nlst = [[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]\nprint(min_length_list(lst))  # Output: (1, [6])\n\n# Example with all lists of the same length\nlst_same_length = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(min_length_list(lst_same_length))  # Output: (3, [[1, 2, 3]])\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpyjl51f_8.py\", line 24, in <module>\n    assert min_length_list([[1, 2], [3, 4], [5, 6]]) == (2, [1, 2])\nAssertionError", "passed": false}
{"task_id": 52, "requirement": "Edge Case Handling", "completion": "def parallelogram_area(base, height):\n    if not (isinstance(base, (int, float)) and isinstance(height, (int, float))):\n        raise TypeError(\"Both base and height must be numerical (int or float).\")\n    return max(0, base * height)\n", "result": "passed", "passed": true}
{"task_id": 53, "requirement": "Edge Case Handling", "completion": "def check_equality(input_string):\n    if not isinstance(input_string, str):\n        raise TypeError('Input must be a string')\n    return 'Equal' if len(input_string) < 2 or input_string[0] == input_string[-1] else 'Not Equal'\n", "result": "passed", "passed": true}
{"task_id": 54, "requirement": "Edge Case Handling", "completion": "def counting_sort(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Check if the list contains only integers\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"List must contain only non-negative integers.\")\n    \n    # Check if the list is empty or contains a single element\n    if not arr or min(arr) < 0:\n        return arr\n    \n    # Find the maximum element in the array\n    max_val = max(arr)\n    \n    # Initialize the count array with all zeros\n    count = [0] * (max_val + 1)\n    \n    # Store the count of each element in the count array\n    for num in arr:\n        if num < 0:\n            raise ValueError(\"List must contain only non-negative integers.\")\n        count[num] += 1\n    \n    # Store the cumulative count\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    \n    # Build the output array\n    output = [0] * len(arr)\n    for num in reversed(arr):\n        output[count[num] - 1] = num\n        count[num] -= 1\n    \n    return output\n\n# Example usage:\nsorted_list = counting_sort([4, 2, 2, 8, 3, 3, 1])\nprint(sorted_list)  # Output: [1, 2, 2, 3, 3, 4, 8]\n", "result": "passed", "passed": true}
{"task_id": 55, "requirement": "Edge Case Handling", "completion": "def tn_gp(a, r, n):\n    \"\"\"\n    This function calculates the nth term of a geometric series.\n    a: first term of the series\n    r: common ratio of the series\n    n: term number to calculate\n    \"\"\"\n    if n < 1:\n        raise ValueError('Term number must be greater than 0')\n    if r == 0:\n        return 0 if n > 1 else a\n    return a * r ** (n - 1)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpnnuo9_nn.py\", line 7, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "requirement": "Edge Case Handling", "completion": "def check(n):\n    # Check if the input is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n\n    # Convert the number to a string, reverse it, and convert it back to an integer\n    reverse = int(str(n)[::-1])\n\n    # Check if the number is one less than twice its reverse\n    return n == 2 * reverse - 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpl4tsumx3.py\", line 19, in <module>\n    assert check(1) == False\nAssertionError", "passed": false}
{"task_id": 57, "requirement": "Edge Case Handling", "completion": "def find_max_num(digits):\n    if not digits:\n        return 0\n    return int(''.join(map(str, sorted(digits, reverse=True))))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpp9mt53tm.py\", line 5, in <module>\n    assert find_max_num([1,2,3],3) == 321\nTypeError: find_max_num() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 58, "requirement": "Edge Case Handling", "completion": "def opposite_signs(num1, num2):\n    if not all(isinstance(x, int) for x in (num1, num2)):\n        raise TypeError(\"Both inputs must be integers.\")\n    # Check for zero separately to avoid overflow issues\n    if num1 == 0 or num2 == 0:\n        return False\n    return (num1 > 0) != (num2 > 0)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppsoexqlz.py\", line 26, in <module>\n    assert opposite_signs(0, -1) == True\nAssertionError", "passed": false}
{"task_id": 59, "requirement": "Edge Case Handling", "completion": "def is_octagonal(n):\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    if n == 1:\n        return 1\n    return n * (4 * n - 3) // 2\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpoxmc8n07.py\", line 7, in <module>\n    assert is_octagonal(5) == 65\nAssertionError", "passed": false}
{"task_id": 60, "requirement": "Edge Case Handling", "completion": "def max_len_sub(arr, n):\n    if not isinstance(arr, list) or not isinstance(n, int):\n        raise TypeError(\"The first parameter must be a list and the second parameter must be an integer.\")\n    if not arr:\n        return 0\n\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(0, i):\n            if arr[i] >= arr[j] and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    return max(dp)\n\n# Example usage:\nprint(max_len_sub([], 0))  # Output: 0\nprint(max_len_sub([1, 2, 3, 4], 4))  # Output: 4\nprint(max_len_sub([5, 1, 2, 3, 4], 5))  # Output: 4\nprint(max_len_sub([10, 9, 8, 7, 6], 5))  # Output: 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpfs1_btu6.py\", line 18, in <module>\n    assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4\nAssertionError", "passed": false}

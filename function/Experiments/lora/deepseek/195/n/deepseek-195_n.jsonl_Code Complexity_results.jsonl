{"task_id": 11, "requirement": "Code Complexity", "completion": "def remove_occ(s: str, ch: str) -> str:\n    if not isinstance(ch, str) or len(ch) != 1:\n        raise ValueError('Second parameter must be a single character.')\n    \n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    \n    if first_index != -1 and last_index != -1:\n        s = s[:first_index] + s[first_index + 1 : last_index] + s[last_index + 1:]\n    \n    return s\n", "result": "passed", "passed": true}
{"task_id": 14, "requirement": "Code Complexity", "completion": "def find_volume(base_area: float, height_prism: float) -> float:\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base_area (float): The base area of the triangular base.\n    height_prism (float): The height of the triangular prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    return base_area * height_prism\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9xsb78nm.py\", line 3, in <module>\n    assert find_volume(10,8,6) == 240\nTypeError: find_volume() takes 2 positional arguments but 3 were given", "passed": false}
{"task_id": 15, "requirement": "Code Complexity", "completion": "def split_lowerstring(text: str) -> list:\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string.\")\n    return [text] if any(c.islower() for c in text) else []\n", "result": "failed: File \"/tmp/tmpsdvax6r3.py\", line 9\n    try: split_lowerstring(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 16, "requirement": "Code Complexity", "completion": "import re\nfrom typing import Union\n\ndef text_lowercase_underscore(text: str) -> Union[bool, str]:\n    \"\"\"\n    Find sequences of lowercase letters joined with an underscore.\n\n    Args:\n        text (str): The input string to search for lowercase letters joined with underscores.\n\n    Returns:\n        bool: True if a match is found, False otherwise.\n\n    Raises:\n        TypeError: If the input is not a string.\n    \"\"\"\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string.\")\n    if text == \"\":\n        return False\n    pattern = r'\\b[a-z]+\\_[a-z]+\\b'\n    matches = re.findall(pattern, text)\n    return bool(matches)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpe1ry9_5o.py\", line 11, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "requirement": "Code Complexity", "completion": "def square_perimeter(a: int) -> int:\n    \"\"\"\n    Calculate the perimeter of a square given the length of one side.\n\n    :param a: The length of one side of the square.\n    :return: The perimeter of the square.\n    \"\"\"\n    return 4 * a\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpw0k1tf9v.py\", line 13, in <module>\n    assert False, 'Expected ValueError for negative input'\nAssertionError: Expected ValueError for negative input", "passed": false}
{"task_id": 20, "requirement": "Code Complexity", "completion": "def is_woodall(x: int) -> bool:\n    if not isinstance(x, int):\n        raise TypeError(\"Input must be an integer.\")\n    if x < 0:\n        return False\n    n = 0\n    while True:\n        woodall_num = n * 2**n - 1\n        if woodall_num == x:\n            return True\n        if woodall_num > x:\n            return False\n        n += 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqcuzzs2w.py\", line 31, in <module>\n    assert cc_visit(inspect.getsource(is_woodall))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 21, "requirement": "Code Complexity", "completion": "def multiples_of_num(m: int, n: int) -> list:\n    if m < 0 or n < 0:\n        raise ValueError(\"Both m and n must be non-negative.\")\n    return [n * i for i in range(1, m + 1)]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmps__txx36.py\", line 19, in <module>\n    assert cc_visit(inspect.getsource(multiples_of_num))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 24, "requirement": "Code Complexity", "completion": "def binary_to_decimal(binary: str) -> int:\n    if not binary.isdigit() or any(c not in '01' for c in binary):\n        raise ValueError('Invalid binary number')\n    return int(binary, 2)\n", "result": "failed: File \"/tmp/tmp6aizsa0c.py\", line 8\n    try: binary_to_decimal('102'); assert False, 'Expected ValueError' except ValueError as e: assert str(e) == 'Invalid binary number'\n                                                                       ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 32, "requirement": "Code Complexity", "completion": "def max_prime_factors(n: int) -> int:\n    if n <= 0:\n        raise ValueError('Input must be a positive integer')\n    return _prime_factors(n)\n\ndef _prime_factors(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n", "result": "passed", "passed": true}
{"task_id": 33, "requirement": "Code Complexity", "completion": "def decimal_to_binary(n: int) -> str:\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    if n == 0:\n        return \"0\"\n\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n\n# Test the function\nprint(decimal_to_binary(10))  # Output: 1010\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9kw9_akp.py\", line 13, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 35, "requirement": "Code Complexity", "completion": "def find_rect_num(n: int) -> int:\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    return n * (n + 1)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpsihqp0ya.py\", line 16, in <module>\n    assert cc_visit(inspect.getsource(find_rect_num))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 36, "requirement": "Code Complexity", "completion": "def find_nth_digit(p: int, q: int, N: int) -> int:\n    # Raise a ValueError if the denominator is zero\n    if q == 0:\n        raise ValueError('Denominator cannot be zero')\n\n    # Convert the numbers to strings\n    p_str = str(p)\n    q_str = str(q)\n\n    # Concatenate the two numbers\n    fraction_str = p_str + q_str\n\n    # Check if n is a valid index\n    if N < len(fraction_str):\n        # Return the nth digit\n        return int(fraction_str[N])\n    else:\n        # Return -1 if n is out of range\n        return -1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpp72yy5lq.py\", line 17, in <module>\n    assert find_nth_digit(1,2,1) == 5\nAssertionError", "passed": false}
{"task_id": 38, "requirement": "Code Complexity", "completion": "def div_even_odd(list1: list) -> float:\n    even = None\n    odd = None\n    for num in list1:\n        if even is None and num % 2 == 0:\n            even = num\n        if odd is None and num % 2 != 0:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    if even is None or odd is None:\n        raise ValueError('List must contain at least one even and one odd number.')\n    return odd / even if even != 0 else 0\n", "result": "failed: File \"/tmp/tmp_h0mazrt.py\", line 18\n    try: div_even_odd([2, 4, 6]); assert False; except ValueError as e: assert str(e) == 'List must contain at least one even and one odd number.'\n                                                ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 40, "requirement": "Code Complexity", "completion": "from collections import Counter\nfrom typing import List, Dict, Union\n\ndef freq_element(nums: List[List[int]]) -> Dict[int, int]:\n    if not isinstance(nums, list) or not all(isinstance(sublist, list) for sublist in nums):\n        raise TypeError(\"Input must be a list of lists.\")\n    if not nums:\n        return {}\n    return Counter(item for sublist in nums for item in sublist)\n", "result": "failed: File \"/tmp/tmpy35tjmtx.py\", line 12\n    try: freq_element('not a list'); assert False; except TypeError: assert True\n                                                   ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 42, "requirement": "Code Complexity", "completion": "def find_sum(arr: list) -> int:\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n    if not arr:\n        return 0\n\n    seen = set()\n    sum_repeated = 0\n    for num in arr:\n        if num in seen:\n            sum_repeated += num\n        else:\n            seen.add(num)\n\n    return sum_repeated\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpnftmans4.py\", line 14, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Code Complexity", "completion": "import re\nfrom typing import Optional\n\ndef text_match(text: str) -> Optional[str]:\n    pattern = '[_][a-z]+'\n    match = re.search(pattern, text)\n    return match.group(0) if match else \"Not matched!\"\n\n# Test the function\nprint(text_match(\"test_string\"))  # Output: _string\nprint(text_match(\"testString\"))  # Output: Not matched!\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpw15ttfw7.py\", line 10, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 45, "requirement": "Code Complexity", "completion": "def gcd_helper(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef get_gcd(numbers: list) -> int:\n    if not numbers:\n        raise ValueError('Input list cannot be empty.')\n\n    result = numbers[0]\n    for num in numbers[1:]:\n        result = gcd_helper(result, num)\n\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpppfe1p7o.py\", line 20, in <module>\n    assert cc_visit(inspect.getsource(get_gcd))[0].complexity <=1\nAssertionError", "passed": false}
{"task_id": 47, "requirement": "Code Complexity", "completion": "def compute_last_digit(a: int, b: int) -> int:\n    if a > b:\n        raise ValueError('a should not be greater than b')\n    if a == b:\n        return 1\n\n    # Count the number of 5s in the prime factorization of a!\n    count_5 = 0\n    for i in range(5, a + 1, 5):\n        count_5 += a // i\n\n    # Count the number of 5s in the prime factorization of b!\n    for i in range(5, b + 1, 5):\n        count_5 -= b // i\n\n    for i in range(5, a - b + 1, 5):\n        count_5 += (a - b) // i\n\n    # The last digit of a! divided by b! is 2 raised to the power of count_5\n    return pow(2, count_5, 10)\n\n# Test the function\nprint(compute_last_digit(5, 7))  # Output: 5\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp970d48le.py\", line 19, in <module>\n    assert compute_last_digit(2,4) == 2\nAssertionError", "passed": false}
{"task_id": 51, "requirement": "Code Complexity", "completion": "def check_equilateral(a: int, b: int, c: int) -> bool:\n    if a <= 0 or b <= 0 or c <= 0:\n        raise ValueError(\"All sides of a triangle must be positive integers.\")\n    return a == b == c\n\n# Test the function\nprint(check_equilateral(3, 3, 3))  # True\nprint(check_equilateral(3, 4, 5))  # False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1hnntfcl.py\", line 27, in <module>\n    assert cc_visit(inspect.getsource(check_equilateral))[0].complexity ==1\nAssertionError", "passed": false}
{"task_id": 52, "requirement": "Code Complexity", "completion": "def parallelogram_area(base: float, height: float) -> float:\n    return base * height\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3lai5otk.py\", line 12, in <module>\n    assert False, 'Expected TypeError'\nAssertionError: Expected TypeError", "passed": false}
{"task_id": 53, "requirement": "Code Complexity", "completion": "def check_equality(s: str) -> str:\n    if not isinstance(s, str):\n        raise TypeError('Input must be a string')\n    return 'Equal' if s[0] == s[-1] else 'Not Equal'\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphbke8te3.py\", line 15, in <module>\n    assert check_equality('') == 'Equal'\n  File \"/tmp/tmphbke8te3.py\", line 4, in check_equality\n    return 'Equal' if s[0] == s[-1] else 'Not Equal'\nIndexError: string index out of range", "passed": false}
{"task_id": 56, "requirement": "Code Complexity", "completion": "def check(n: int) -> bool:\n    # Convert the number to a string, reverse it, and convert it back to an integer\n    reverse = int(str(n)[::-1])\n\n    # Check if the number is one less than its reverse\n    return n == reverse - 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplre4c0tq.py\", line 8, in <module>\n    assert check(73) == True\nAssertionError", "passed": false}
{"task_id": 58, "requirement": "Code Complexity", "completion": "def opposite_signs(a: int, b: int) -> bool:\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise TypeError(\"Both inputs must be integers.\")\n    return a * b < 0\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmv1qlcqw.py\", line 23, in <module>\n    assert opposite_signs(0, -1) == True\nAssertionError", "passed": false}

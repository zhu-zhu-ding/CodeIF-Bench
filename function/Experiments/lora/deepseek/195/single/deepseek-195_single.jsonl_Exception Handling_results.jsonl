{"task_id": 11, "completion": "def remove_occ(s, char):\n    if len(char) != 1:\n        raise ValueError('Second parameter must be a single character.')\n    first_index = s.find(char)\n    last_index = s.rfind(char)\n    if first_index == -1 or last_index == -1:\n        return s\n    return s[:first_index] + s[first_index+1:] + s[last_index+1:]\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpfk6jz4tr.py\", line 9, in <module>\n    assert remove_occ(\"hello\",\"l\") == \"heo\"\nAssertionError", "passed": false}
{"task_id": 12, "completion": "def sort_matrix(matrix):\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise TypeError(\"Input must be a list of lists.\")\n    if not all(all(isinstance(ele, int) for ele in row) for row in matrix):\n        raise TypeError(\"All elements in the matrix must be integers.\")\n\n    # Calculate the sum of each row and sort the matrix based on these sums\n    sorted_matrix = sorted(matrix, key=sum)\n    return sorted_matrix\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 13, "completion": "from collections import Counter\n\ndef count_common(words):\n    if not isinstance(words, list) or not all(isinstance(word, str) for word in words):\n        raise TypeError(\"Input must be a list of strings.\")\n\n    word_counts = Counter(words)\n    common_words = word_counts.most_common()\n    return common_words\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpb1u592ua.py\", line 8, in <module>\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nAssertionError", "passed": false}
{"task_id": 14, "completion": "def find_volume(base, height, length):\n    if not all(isinstance(i, (int, float)) for i in (base, height, length)):\n        raise ValueError('All dimensions must be positive numbers.')\n    if not all(i > 0 for i in (base, height, length)):\n        raise ValueError('All dimensions must be positive numbers.')\n    return (base * height * length) / 2\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 15, "completion": "def split_lowerstring(s):\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string.\")\n    return [word for word in s.split() if word[0].islower()]\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmph2wyp3_a.py\", line 8\n    try: split_lowerstring(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string.\")\n    pattern = r'[a-z]+_[a-z]+'\n    matches = re.findall(pattern, text)\n    return matches\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1ny6gxni.py\", line 8, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    return 4 * side_length\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(s1, s2):\n    if not isinstance(s1, str) or not isinstance(s2, str):\n        raise TypeError(\"Both inputs must be strings.\")\n    return ''.join(c for c in s1 if c not in s2)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 19, "completion": "def test_duplicate(arr):\n    if not isinstance(arr, list):\n        raise ValueError('Input must be a list of integers')\n    for i in arr:\n        if not isinstance(i, int):\n            raise ValueError('Input must be a list of integers')\n    return len(arr) != len(set(arr))\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjsx03ir9.py\", line 12, in <module>\n    test_duplicate(None)\n  File \"/tmp/tmpjsx03ir9.py\", line 3, in test_duplicate\n    raise ValueError('Input must be a list of integers')\nValueError: Input must be a list of integers", "passed": false}
{"task_id": 20, "completion": "def is_woodall(n):\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    if n < 0:\n        return False\n    return (n * 2**n - 1) % n == 0\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpc8m00n_7.py\", line 7, in <module>\n    assert is_woodall(383) == True\nAssertionError", "passed": false}
{"task_id": 21, "completion": "def multiples_of_num(m, n):\n    if m < 0 or n < 0:\n        raise ValueError(\"Both m and n must be non-negative.\")\n    return [i * n for i in range(1, m + 1)]\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 22, "completion": "def find_first_duplicate(arr):\n    if not isinstance(arr, list) or not all(isinstance(i, int) for i in arr):\n        raise TypeError(\"Input must be a list of integers.\")\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxz1utzz9.py\", line 11, in <module>\n    assert find_first_duplicate([1, 2, 3, 4])==-1\nAssertionError", "passed": false}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists):\n    if not isinstance(list_of_lists, list):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in list_of_lists:\n        if not isinstance(sublist, list):\n            raise TypeError(\"All elements in the input list must be lists.\")\n        for element in sublist:\n            if not isinstance(element, int):\n                raise TypeError(\"All elements in the sublists must be integers.\")\n    return max(sum(sublist) for sublist in list_of_lists)\n\n# Example usage:\ntry:\n    result = maximum_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    print(result)  # Output: 24\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpbpq6e1ur.py\", line 20\n    try: maximum_sum([[1, 2], [3, 'a']]); assert False, 'Expected TypeError' except TypeError: pass\n                                                                             ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 24, "completion": "def binary_to_decimal(binary_num):\n    if not set(binary_num).issubset('01'):\n        raise ValueError('Invalid binary number')\n    return int(binary_num, 2)\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpfbvm5v8w.py\", line 8\n    try: binary_to_decimal('102'); assert False, 'Expected ValueError' except ValueError as e: assert str(e) == 'Invalid binary number'\n                                                                       ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 25, "completion": "def find_product(arr):\n    if not isinstance(arr, list) or not all(isinstance(i, int) for i in arr):\n        raise TypeError(\"Input must be a list of integers.\")\n    non_repeating_elements = [x for x in arr if arr.count(x) == 1]\n    product = 1\n    for num in non_repeating_elements:\n        product *= num\n    return product\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1d5f2hs3.py\", line 9, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(input_list, k):\n    if not isinstance(input_list, list) or not all(isinstance(t, tuple) for t in input_list):\n        raise TypeError(\"Input must be a list of tuples.\")\n    if not isinstance(k, int):\n        raise TypeError(\"k must be an integer.\")\n    for t in input_list:\n        if len(t) != k:\n            return False\n    return True\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_y8nc9p0.py\", line 10, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "completion": "def remove(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError(\"Input must be a list.\")\n    for element in input_list:\n        if not isinstance(element, str):\n            raise TypeError(\"All elements in the list must be strings.\")\n    return [''.join(filter(lambda x: not x.isdigit(), element)) for element in input_list]\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 28, "completion": "def binomial_coeff(n, k):\n    if n < 0 or k < 0 or k > n:\n        raise ValueError('Inputs must be non-negative and k must not be greater than n')\n\n    C = [[0 for x in range(k+1)] for x in range(n+1)]\n\n    for i in range(n+1):\n        for j in range(min(i, k)+1):\n            if j == 0 or j == i:\n                C[i][j] = 1\n            else:\n                C[i][j] = C[i-1][j-1] + C[i-1][j]\n\n    return C[n][k]\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 29, "completion": "def get_odd_occurrence(nums):\n    if not isinstance(nums, list) or not all(isinstance(i, int) for i in nums):\n        raise TypeError(\"Input must be a list of integers.\")\n\n    result = 0\n    for num in nums:\n        result ^= num\n    return result\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0d6_qwta.py\", line 8, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string.\")\n\n    count = 0\n    n = len(s)\n\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n\n    return count\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmp8h0ujpa1.py\", line 14\n    try: count_substring_with_equal_ends(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                                  ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 31, "completion": "import heapq\n\ndef func(lists, k):\n    if k > sum(len(lst) for lst in lists):\n        raise ValueError('k cannot be greater than the number of distinct integers')\n\n    # Flatten the list of lists into a single list\n    flat_list = [item for sublist in lists for item in sublist]\n\n    # Use a heap to keep track of the k most frequent elements\n    heap = []\n    for num in set(flat_list):\n        count = flat_list.count(num)\n        if len(heap) < k:\n            heapq.heappush(heap, (count, num))\n        else:\n            heapq.heappushpop(heap, (count, num))\n\n    # Return the k most frequent elements in descending order of frequency\n    return [item[1] for item in sorted(heap, reverse=True)]\n\n# Example usage:\nlists = [[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7]]\nk = 3\ntry:\n    result = func(lists, k)\n    print(result)  # Output: [3, 4, 5]\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6q6dujxq.py\", line 25, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError('Input must be a positive integer')\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    max_prime = -1\n    while n % 2 == 0:\n        max_prime = 2\n        n >>= 1\n\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            if is_prime(i):\n                max_prime = i\n            n = n / i\n\n    if n > 2 and is_prime(n):\n        max_prime = n\n\n    return max_prime\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(n):\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpclbf56z0.py\", line 11, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "completion": "def find_missing(arr):\n    if not all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1)):\n        raise ValueError('Input list must be sorted.')\n\n    n = len(arr) + 1\n    total_sum = n * (n + 1) // 2\n    current_sum = sum(arr)\n    return total_sum - current_sum\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2wa6clbk.py\", line 8, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    return n * (n + 1) // 2\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpb64o_ofw.py\", line 5, in <module>\n    assert find_rect_num(4) == 20\nAssertionError", "passed": false}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator, n):\n    if denominator == 0:\n        raise ValueError('Denominator cannot be zero')\n    fraction = numerator / denominator\n    str_fraction = str(fraction)\n    if '.' not in str_fraction:\n        raise ValueError('The fraction does not have a decimal part')\n    decimal_part = str_fraction.split('.')[1]\n    if len(decimal_part) < n:\n        raise ValueError('The fraction does not have enough digits')\n    return int(decimal_part[n - 1])\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 37, "completion": "def sort_mixed_list(mixed_list):\n    if not isinstance(mixed_list, list):\n        raise TypeError(\"Input must be a list.\")\n    for item in mixed_list:\n        if not isinstance(item, (int, str)):\n            raise TypeError(\"List must contain only integers and strings.\")\n    return sorted(mixed_list, key=lambda x: (isinstance(x, str), x))\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 38, "completion": "def div_even_odd(nums):\n    even = [x for x in nums if x % 2 == 0]\n    odd = [x for x in nums if x % 2 != 0]\n    if not even or not odd:\n        raise ValueError('List must contain at least one even and one odd number.')\n    return even[0] / odd[0]\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmprcft1zn0.py\", line 10\n    try: div_even_odd([2, 4, 6]); assert False; except ValueError as e: assert str(e) == 'List must contain at least one even and one odd number.'\n                                                ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 39, "completion": "def rearrange_string(s):\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string.\")\n    if not s.islower() or not s.isalpha():\n        raise ValueError(\"Input must be a string of lowercase letters.\")\n\n    # Count the frequency of each character\n    freq = {}\n    for char in s:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Sort the characters by their frequency in descending order\n    sorted_chars = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n\n    # Check if the characters can be rearranged\n    for i in range(len(sorted_chars) - 1):\n        if sorted_chars[i][1] % 2 == 0 and sorted_chars[i + 1][1] % 2 == 0:\n            return False\n\n    return True\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpy0c86lok.py\", line 20, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "completion": "import collections\n\ndef freq_element(input_list):\n    if not isinstance(input_list, list) or not all(isinstance(i, list) for i in input_list):\n        raise TypeError(\"Input must be a list of lists.\")\n\n    flat_list = [item for sublist in input_list for item in sublist]\n    freq_dict = collections.Counter(flat_list)\n    return freq_dict\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpbkepl95s.py\", line 11\n    try: freq_element('not a list'); assert False; except TypeError: assert True\n                                                   ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 41, "completion": "def filter_evennumbers(numbers):\n    if not isinstance(numbers, list) or not all(isinstance(i, int) for i in numbers):\n        raise TypeError(\"Input must be a list of integers.\")\n    return list(filter(lambda x: x % 2 == 0, numbers))\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 42, "completion": "def find_sum(arr):\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n    return sum(x for x in arr if arr.count(x) > 1)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjv3w_vx4.py\", line 5, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string.\")\n    pattern = '[_]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpsc0mstqp.py\", line 10, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 44, "completion": "def text_match_string(text, word):\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string.\")\n    if text.startswith(word):\n        return True\n    else:\n        return False\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpad2vqqri.py\", line 11\n    try: text_match_string(123); assert False, 'TypeError not raised' except TypeError: pass\n                                                                      ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 45, "completion": "def get_gcd(arr):\n    if not arr:\n        raise ValueError('Input list cannot be empty.')\n    def gcd(a, b):\n        while b != 0:\n            a, b = b, a % b\n        return a\n    num1 = arr[0]\n    num2 = arr[1]\n    result = gcd(num1, num2)\n    for i in range(2, len(arr)):\n        result = gcd(result, arr[i])\n    return result\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 46, "completion": "def test_distinct(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError(\"Input must be a list.\")\n    for element in input_list:\n        if not isinstance(element, int):\n            raise TypeError(\"List must contain only integers.\")\n    return len(input_list) == len(set(input_list))\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 47, "completion": "def compute_last_digit(a, b):\n    if a > b:\n        raise ValueError('a should not be greater than b')\n    # Calculate the last digit of factorial(a)\n    last_digit_a = 1\n    for i in range(1, a + 1):\n        last_digit_a = (last_digit_a * i) % 10\n    # Calculate the last digit of factorial(b)\n    last_digit_b = 1\n    for i in range(1, b + 1):\n        last_digit_b = (last_digit_b * i) % 10\n    # Calculate the last digit of factorial(b) / factorial(a)\n    return (last_digit_b * pow(last_digit_a, 10 - 2, 10)) % 10\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7ockeme8.py\", line 14, in <module>\n    assert compute_last_digit(2,4) == 2\nAssertionError", "passed": false}
{"task_id": 48, "completion": "def odd_bit_set_number(n):\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    return n | 0xAAAAAAAA\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqikqoes1.py\", line 5, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(two_d_list, index):\n    result = []\n    for sublist in two_d_list:\n        if index < len(sublist):\n            result.append(sublist[index])\n        else:\n            raise IndexError('Index out of range for sublist')\n    return result\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 50, "completion": "def min_length_list(list_of_lists):\n    if not isinstance(list_of_lists, list) or not all(isinstance(i, list) for i in list_of_lists):\n        raise ValueError('Input must be a list of lists.')\n    return min(list_of_lists, key=lambda x: len(x))\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplsfwalv_.py\", line 5, in <module>\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nAssertionError", "passed": false}
{"task_id": 51, "completion": "def check_equilateral(a, b, c):\n    if not all(isinstance(i, int) for i in (a, b, c)):\n        raise ValueError(\"All inputs must be integers.\")\n    if not all(i > 0 for i in (a, b, c)):\n        raise ValueError(\"All inputs must be positive integers.\")\n    if a == b == c:\n        return \"The triangle is equilateral.\"\n    else:\n        return \"The triangle is not equilateral.\"\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4osn3335.py\", line 10, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    if not (isinstance(base, (int, float)) and isinstance(height, (int, float))):\n        raise TypeError(\"Both base and height must be numerical (int or float).\")\n    return base * height\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(input_string):\n    if not isinstance(input_string, str):\n        raise TypeError('Input must be a string')\n    return input_string[0] == input_string[-1]\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpy2c38uv_.py\", line 5, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 54, "completion": "def counting_sort(arr):\n    if not isinstance(arr, list) or not all(isinstance(i, int) for i in arr):\n        raise TypeError(\"Input must be a list of integers.\")\n\n    max_val = max(arr)\n    count = [0] * (max_val + 1)\n    output = [0] * len(arr)\n\n    for num in arr:\n        count[num] += 1\n\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n\n    for num in reversed(arr):\n        output[count[num] - 1] = num\n        count[num] -= 1\n\n    return output\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 55, "completion": "def tn_gp(a, r, n):\n    \"\"\"\n    Calculate the n-th term of a geometric series.\n\n    Parameters:\n    a (float): The first term of the geometric series.\n    r (float): The common ratio of the geometric series.\n    n (int): The term number to find.\n\n    Returns:\n    float: The n-th term of the geometric series.\n\n    Raises:\n    ValueError: If the term number (n) is less than 1.\n    \"\"\"\n    if n < 1:\n        raise ValueError('Term number must be greater than 0')\n    return a * r ** (n - 1)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpurplkb2g.py\", line 5, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def check(n):\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    return n == 2 * int(str(n)[::-1]) - 1\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 57, "completion": "def find_max_num(digits, num_digits):\n    if num_digits > len(digits):\n        raise ValueError('Number of digits exceeds the length of the list.')\n    sorted_digits = sorted(digits, reverse=True)\n    max_num = int(''.join(map(str, sorted_digits[:num_digits])))\n    return max_num\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 58, "completion": "def opposite_signs(x, y):\n    if not all(isinstance(i, int) for i in (x, y)):\n        raise TypeError(\"Both inputs must be integers.\")\n    return x * y < 0\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 59, "completion": "def is_octagonal(n):\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    return n * (4 * n - 3)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1_5r2814.py\", line 5, in <module>\n    assert is_octagonal(5) == 65\nAssertionError", "passed": false}
{"task_id": 60, "completion": "def max_len_sub(arr, k):\n    if not isinstance(arr, list) or not isinstance(k, int):\n        raise TypeError(\"Input array must be a list and the second parameter must be an integer.\")\n\n    n = len(arr)\n    dp = [0] * n\n    max_len = 0\n\n    for i in range(n):\n        dp[i] = 1\n        for j in range(i):\n            if abs(arr[i] - arr[j]) <= k:\n                dp[i] = max(dp[i], dp[j] + 1)\n        max_len = max(max_len, dp[i])\n\n    return max_len\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpf5h38n4r.py\", line 14, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nAssertionError", "passed": false}

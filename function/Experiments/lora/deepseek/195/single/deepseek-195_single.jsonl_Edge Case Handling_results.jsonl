{"task_id": 11, "completion": "def remove_occ(s, char):\n    if char not in s:\n        return s\n    first_index = s.index(char)\n    last_index = s.rindex(char)\n    if first_index == last_index:\n        return s[:first_index] + s[first_index + 1:]\n    else:\n        return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 12, "completion": "def sort_matrix(matrix):\n    if not matrix:\n        return []\n    return sorted(matrix, key=sum)\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 13, "completion": "from collections import Counter\n\ndef count_common(word_list):\n    if not word_list:\n        return []\n    word_counts = Counter(word_list)\n    most_common = word_counts.most_common(1)\n    return [most_common[0][0]]\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp58o_puwn.py\", line 8, in <module>\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nAssertionError", "passed": false}
{"task_id": 14, "completion": "def find_volume(base, height, length):\n    if base <= 0 or height <= 0 or length <= 0:\n        raise ValueError(\"All dimensions must be greater than zero.\")\n    return 0.5 * base * height * length\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 15, "completion": "def split_lowerstring(s):\n    if not any(c.islower() for c in s):\n        return []\n    return [x for x in s.split('a') if x]\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpfm1xbsvq.py\", line 5, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    if not text:\n        return 'Not matched!'\n    match = re.search(r'[a-z]+_[a-z]+', text)\n    if match:\n        return match.group()\n    else:\n        return 'Not matched!'\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_h8obm6o.py\", line 10, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Args:\n        side_length (float): The length of a side of the square.\n\n    Returns:\n        float: The perimeter of the square.\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length must be a non-negative number.\")\n    return 4 * side_length if side_length > 0 else 0\n\n# Example usage:\ntry:\n    side_length = float(input(\"Enter the side length of the square: \"))\n    perimeter = square_perimeter(side_length)\n    print(f\"The perimeter of the square is: {perimeter}\")\nexcept ValueError as e:\n    print(e)\n", "requirement": "Edge Case Handling", "result": "timed out", "passed": false}
{"task_id": 18, "completion": "def remove_dirty_chars(s1, s2):\n    if not s2:\n        return s1\n    return ''.join(c for c in s1 if c not in s2)\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 19, "completion": "def test_duplicate(arr):\n    if not arr:\n        return False\n    if len(arr) == 1:\n        return False\n    return len(arr) != len(set(arr))\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(n):\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    while n % 2 == 0:\n        n //= 2\n    return n == 1\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmprs968951.py\", line 9, in <module>\n    assert is_woodall(383) == True\nAssertionError", "passed": false}
{"task_id": 21, "completion": "def multiples_of_num(n, m):\n    if m == 0:\n        return []\n    else:\n        return [n * i for i in range(1, m + 1)]\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpftytvhnn.py\", line 6, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "completion": "def find_first_duplicate(nums):\n    if not nums:\n        return -1\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists):\n    if not list_of_lists or all(not sublist for sublist in list_of_lists):\n        return 0\n    return max(sum(sublist) for sublist in list_of_lists)\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(maximum_sum(list_of_lists))  # Output: 24\n\nlist_of_lists = [[], []]\nprint(maximum_sum(list_of_lists))  # Output: 0\n\nlist_of_lists = []\nprint(maximum_sum(list_of_lists))  # Output: 0\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 24, "completion": "def binary_to_decimal(binary_num):\n    if not binary_num:\n        return 0\n    binary_num = str(binary_num)\n    decimal_num = 0\n    for digit in binary_num:\n        decimal_num = decimal_num * 2 + int(digit)\n    return decimal_num\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 25, "completion": "def find_product(arr):\n    if not arr:\n        return 1\n    product = 1\n    for num in arr:\n        if arr.count(num) == 1:\n            product *= num\n    return product\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphqf3i30a.py\", line 9, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(list_of_tuples, k):\n    if not list_of_tuples:\n        return False\n    for tup in list_of_tuples:\n        if len(tup) != k:\n            return False\n    return True\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3y51v__9.py\", line 8, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "completion": "def remove(input_list):\n    if not input_list:\n        return []\n    return [''.join(filter(lambda x: not x.isdigit(), s)) for s in input_list]\n\n# Example usage:\ninput_list = ['abc123', 'def456', 'ghi789', 'jkl012']\nresult = remove(input_list)\nprint(result)  # Output: ['abc', 'def', 'ghi', 'jkl']\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 28, "completion": "def binomial_coeff(n, k):\n    # Handle edge cases\n    if k == 0 or n == k:\n        return 1\n    # Create a 2D list to store binomial coefficients\n    C = [[0 for x in range(k+1)] for x in range(n+1)]\n\n    # Calculate binomial coefficients\n    for i in range(n+1):\n        for j in range(min(i, k)+1):\n            # Base cases\n            if j == 0 or j == i:\n                C[i][j] = 1\n            # Calculate binomial coefficient\n            else:\n                C[i][j] = C[i-1][j-1] + C[i-1][j]\n\n    return C[n][k]\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 29, "completion": "def get_odd_occurrence(arr):\n    if not arr:\n        return None\n    result = 0\n    for element in arr:\n        result ^= element\n    return result\n\n# Test the function\nprint(get_odd_occurrence([1, 2, 3, 2, 1, 1]))  # Output: 3\nprint(get_odd_occurrence([5, 5, 2, 2, 3, 3, 4, 4, 1]))  # Output: 1\nprint(get_odd_occurrence([]))  # Output: None\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplv5plxef.py\", line 12, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    if not s:\n        return 0\n\n    count = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if s[i] == s[j - 1]:\n                count += 1\n\n    return count\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 31, "completion": "import heapq\n\ndef func(lists, k):\n    if not any(lists):\n        return []\n\n    # Create a list of tuples (frequency, number) for each list\n    list_of_tuples = [[(num, i) for i, num in enumerate(l)] for l in lists]\n\n    # Flatten the list of tuples\n    flat_list = [item for sublist in list_of_tuples for item in sublist]\n\n    # Use a heap queue to find the top k most frequent numbers\n    heap = []\n    for num, index in flat_list:\n        if len(heap) < k:\n            heapq.heappush(heap, (num, index))\n        else:\n            if num > heap[0][0]:\n                heapq.heapreplace(heap, (num, index))\n\n    # Extract the top k most frequent numbers\n    top_k = [num for num, index in heap]\n\n    return top_k\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphcox5mi9.py\", line 20, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    max_prime = -1\n\n    # Print the number of 2s that divide n\n    while n % 2 == 0:\n        max_prime = 2\n        n >>= 1  # equivalent to n /= 2\n\n    # n must be odd at this point, thus skip one element (Note i = i +2)\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n / i\n\n    # This condition is to handle the case when n is a prime number\n    # greater than 2\n    if n > 2:\n        max_prime = n\n\n    return int(max_prime)\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwrt5_0cp.py\", line 9, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "completion": "def find_missing(arr):\n    if not arr:\n        return 1\n    if arr[0] != 1:\n        return 1\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i-1] > 1:\n            return arr[i-1] + 1\n    return arr[-1] + 1\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1kfayz9o.py\", line 10, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    if n == 1:\n        return 2\n    else:\n        return n * (n + 1) * (n + 2) // 2\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqmgat15m.py\", line 6, in <module>\n    assert find_rect_num(4) == 20\nAssertionError", "passed": false}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator, n):\n    if numerator == 0:\n        return 0\n    if n <= 0:\n        return None\n    fraction = numerator / denominator\n    str_fraction = str(fraction)\n    if '.' not in str_fraction:\n        return None\n    fraction_part = str_fraction.split('.')[1]\n    if len(fraction_part) < n:\n        return None\n    return int(fraction_part[n - 1])\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 37, "completion": "def sort_mixed_list(mixed_list):\n    if not mixed_list:\n        return []\n    else:\n        return sorted(mixed_list, key=lambda x: (isinstance(x, int), x))\n\n# Test the function\nmixed_list = [3, 'a', 1, 'b', 2, 'c']\nprint(sort_mixed_list(mixed_list))\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqaq2o4_d.py\", line 9, in <module>\n    assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nAssertionError", "passed": false}
{"task_id": 38, "completion": "def div_even_odd(nums):\n    even_num = next((num for num in nums if num % 2 == 0), None)\n    odd_num = next((num for num in nums if num % 2 != 0), None)\n\n    if even_num is None or odd_num is None:\n        return None\n    elif even_num == 0:\n        return 0\n    else:\n        return odd_num / even_num\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpugduue3k.py\", line 10, in <module>\n    assert div_even_odd([1,3,5,7,4,1,6,8])==4\nAssertionError", "passed": false}
{"task_id": 39, "completion": "from collections import Counter\n\ndef rearrange_string(s):\n    # Count the frequency of each character\n    counter = Counter(s)\n    \n    # If all characters are identical, return an empty string\n    if len(counter) == 1:\n        return \"\"\n    \n    # Sort the characters by their frequency in descending order\n    sorted_chars = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    \n    # Create a list to hold the rearranged string\n    rearranged = [''] * len(s)\n    \n    # Place the most frequent character in the first and last position\n    for char, _ in sorted_chars:\n        if counter[char] > 0:\n            rearranged[0] = char\n            rearranged[-1] = char\n            counter[char] -= 2\n            if counter[char] < 0:\n                return \"\"\n            break\n    \n    # Place the remaining characters in the rearranged string\n    for char, freq in sorted_chars:\n        if counter[char] > 0:\n            for i in range(freq):\n                if i % 2 == 0:\n                    rearranged[i // 2] = char\n                else:\n                    rearranged[-(i // 2 + 1)] = char\n                counter[char] -= 1\n                if counter[char] < 0:\n                    return \"\"\n    \n    # Join the rearranged characters into a string and return it\n    return ''.join(rearranged)\n\n# Example usage:\nprint(rearrange_string(\"aab\"))  # Output: \"aba\"\nprint(rearrange_string(\"aaab\"))  # Output: \"ababa\"\nprint(rearrange_string(\"aaaa\"))  # Output: \"\"\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpm8bdmno7.py\", line 38, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "completion": "import collections\n\ndef freq_element(list_of_lists):\n    if not list_of_lists:\n        return {}\n    flat_list = [item for sublist in list_of_lists for item in sublist]\n    freq_dict = collections.Counter(flat_list)\n    return freq_dict\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 41, "completion": "def filter_evennumbers(num_list):\n    if not num_list:\n        return []\n    return list(filter(lambda x: x % 2 == 0, num_list))\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 42, "completion": "def find_sum(arr):\n    if not arr:\n        return 0\n    else:\n        return sum(x for x in arr if arr.count(x) > 1)\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppoki9ptv.py\", line 6, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    if not text:\n        return 'Not matched!'\n    pattern = '[_][a-z]+'\n    if re.search(pattern, text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8bihixxx.py\", line 10, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 44, "completion": "def text_match_string(text, word):\n    if not text.strip():\n        return False\n    return text.startswith(word)\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7mwd969_.py\", line 5, in <module>\n    assert text_match_string(\" python\")==('Not matched!')\nTypeError: text_match_string() missing 1 required positional argument: 'word'", "passed": false}
{"task_id": 46, "completion": "def test_distinct(nums):\n    if not nums:  # If the list is empty, return True\n        return True\n    if len(nums) == 1:  # If the list has only one element, return True\n        return True\n    return len(nums) == len(set(nums))  # Check if all elements are distinct\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 47, "completion": "def compute_last_digit(a, b):\n    if a == b:\n        return 1\n    else:\n        # Calculate the last digit of factorial(a) divided by factorial(b)\n        # by finding the last digit of a and b's factorial, and then\n        # finding the remainder when a's factorial is divided by b's factorial.\n        last_digit_a = a % 10\n        last_digit_b = b % 10\n        factorial_a = 1\n        factorial_b = 1\n        for i in range(1, a + 1):\n            factorial_a = (factorial_a * i) % 10\n        for i in range(1, b + 1):\n            factorial_b = (factorial_b * i) % 10\n        return (factorial_a * pow(factorial_b, -1, 10)) % 10\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpcff9v0gs.py\", line 17, in <module>\n    assert compute_last_digit(2,4) == 2\n  File \"/tmp/tmpcff9v0gs.py\", line 16, in compute_last_digit\n    return (factorial_a * pow(factorial_b, -1, 10)) % 10\nValueError: base is not invertible for the given modulus", "passed": false}
{"task_id": 48, "completion": "def odd_bit_set_number(n):\n    if n == 0:\n        return 1\n    result = 0\n    while n > 0:\n        result |= (n & 1)\n        n >>= 1\n        if n > 0:\n            result |= (n & 1)\n        n >>= 1\n    return result\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwffmg28z.py\", line 12, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(two_d_list, index):\n    result = []\n    for sublist in two_d_list:\n        if index < len(sublist):\n            result.append(sublist[index])\n    return result\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 50, "completion": "def min_length_list(lists):\n    return min(lists, key=lambda x: (len(x), x))\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpx2yjs2cp.py\", line 3, in <module>\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nAssertionError", "passed": false}
{"task_id": 51, "completion": "def check_equilateral(a, b, c):\n    if a == b == c and a != 0:\n        return True\n    elif a == 0 and b == 0 and c == 0:\n        return False\n    else:\n        return False\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    if base <= 0 or height <= 0:\n        return 0\n    return base * height\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(input_string):\n    if not input_string:\n        return 'Equal'\n    else:\n        return input_string[0] == input_string[-1]\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpbdr0tpxz.py\", line 6, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 54, "completion": "def counting_sort(arr):\n    if not arr:\n        return []\n    if len(arr) == 1:\n        return arr\n\n    max_val = max(arr)\n    count = [0] * (max_val + 1)\n    output = [0] * len(arr)\n\n    for num in arr:\n        count[num] += 1\n\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n\n    for i in range(len(arr) - 1, -1, -1):\n        output[count[arr[i]] - 1] = arr[i]\n        count[arr[i]] -= 1\n\n    return output\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 55, "completion": "def tn_gp(a, r, n):\n    if r == 0:\n        return 0 if n > 1 else a\n    else:\n        return a * (r ** (n - 1))\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpodmxkg89.py\", line 6, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def check(n):\n    # Convert the number to a string to reverse it\n    reverse_n = str(n)[::-1]\n    # Convert the reversed string back to an integer\n    reverse_n = int(reverse_n)\n    # Check if the number is one less than twice its reverse\n    return n == reverse_n - 1\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgswp0i0a.py\", line 10, in <module>\n    assert check(73) == True\nAssertionError", "passed": false}
{"task_id": 57, "completion": "def find_max_num(digits):\n    if not digits:\n        return 0\n    digits.sort(reverse=True)\n    return int(''.join(map(str, digits)))\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpi3lag14s.py\", line 6, in <module>\n    assert find_max_num([1,2,3],3) == 321\nTypeError: find_max_num() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 58, "completion": "def opposite_signs(num1, num2):\n    if (num1 > 0 and num2 < 0) or (num1 < 0 and num2 > 0):\n        return True\n    else:\n        return False\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpd5b6snvh.py\", line 9, in <module>\n    assert opposite_signs(0, -1) == True\nAssertionError", "passed": false}
{"task_id": 59, "completion": "def is_octagonal(n):\n    if n == 1:\n        return 1\n    else:\n        return n * (5 * n - 3) // 2\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvfbl6xp4.py\", line 6, in <module>\n    assert is_octagonal(5) == 65\nAssertionError", "passed": false}
{"task_id": 60, "completion": "def max_len_sub(arr):\n    if not arr:\n        return 0\n\n    n = len(arr)\n    dp = [1] * n\n    max_len = 1\n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n        max_len = max(max_len, dp[i])\n\n    return max_len\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmptfr78t9y.py\", line 13, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}

{"task_id": 14, "completion": "def find_volume(base_area, height, length):\n    if base_area <= 0 or height <= 0 or length <= 0:\n        raise ValueError(\"All inputs must be positive numbers.\")\n    return base_area * height * length\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp12z807e5.py\", line 5, in <module>\n    assert find_volume(10,8,6) == 240\nAssertionError", "passed": false}
{"task_id": 15, "completion": "def split_lowerstring(s):\n    return [segment for segment in s.split(' ') if segment.islower()]\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxpt7s4ry.py\", line 3, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(input_string):\n    # Regular expression pattern to find sequences of lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    if re.search(pattern, input_string):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    if not isinstance(side_length, int) or side_length < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    return 4 * side_length\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(s1, s2):\n    # Check if both strings only contain alphabetic characters\n    if not (s1.isalpha() and s2.isalpha()):\n        raise ValueError('Input strings must only contain alphabetic characters.')\n\n    # Remove characters from s1 that are present in s2\n    result = ''.join(c for c in s1 if c not in s2)\n    return result\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 19, "completion": "def test_duplicate(arr):\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list of integers.\")\n    if len(arr) != len(set(arr)):\n        return True\n    return False\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(n):\n    if n < 0:\n        return False\n    x = 2**n - 1\n    return x == n\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpj71etkf8.py\", line 6, in <module>\n    assert is_woodall(383) == True\nAssertionError", "passed": false}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists):\n    max_sum = 0\n    for sublist in list_of_lists:\n        if sum(sublist) > max_sum:\n            max_sum = sum(sublist)\n    return max_sum\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 25, "completion": "def find_product(arr):\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    product = 1\n    for num, count in count_dict.items():\n        if count == 1:\n            product *= num\n    return product\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpcmvkt3r4.py\", line 13, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(tuples_list, k):\n    for tup in tuples_list:\n        if len(tup) != k:\n            return False\n    return True\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9gxrjw7j.py\", line 6, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 28, "completion": "def binomial_coeff(n, k):\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    if k > n - k:\n        k = n - k\n    result = 1\n    for i in range(1, k + 1):\n        result = result * (n - i + 1) // i\n    return result\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n    return count\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    max_prime = -1\n    while n % 2 == 0:\n        max_prime = 2\n        n >>= 1\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n / i\n    if n > 2:\n        max_prime = n\n    return int(max_prime)\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 35, "completion": "def find_rect_num(n):\n    return n * (n + 1) // 2\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7rkhu6yz.py\", line 3, in <module>\n    assert find_rect_num(4) == 20\nAssertionError", "passed": false}
{"task_id": 36, "completion": "def find_nth_digit(num1, num2, n):\n    # Convert the numbers to strings to work with individual digits\n    num1_str = str(num1)\n    num2_str = str(num2)\n    \n    # Concatenate the two numbers to form the fraction\n    fraction_str = num1_str + num2_str\n    \n    # Check if n is within the range of the fraction\n    if n < 0 or n >= len(fraction_str):\n        return -1\n    \n    # Return the nth digit\n    return int(fraction_str[n])\n\n# Example usage:\nprint(find_nth_digit(123, 456, 2))  # Output: 3\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpchay2lwr.py\", line 14, in <module>\n    assert find_nth_digit(1,2,1) == 5\nAssertionError", "passed": false}
{"task_id": 38, "completion": "def div_even_odd(nums):\n    even = [num for num in nums if num % 2 == 0]\n    odd = [num for num in nums if num % 2 != 0]\n    if even and odd:\n        return even[0] / odd[0]\n    else:\n        return \"No even or odd number found in the list\"\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 39, "completion": "def rearrange_string(s):\n    # Sort the string\n    sorted_s = ''.join(sorted(s))\n    \n    # Rearrange the string so that no two adjacent characters are the same\n    rearranged_s = sorted_s[0]\n    for i in range(1, len(sorted_s)):\n        if sorted_s[i] != sorted_s[i-1]:\n            rearranged_s += sorted_s[i]\n    \n    return rearranged_s\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmps4_59kyc.py\", line 10, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 42, "completion": "def find_sum(arr):\n    # Create a dictionary to store the count of each element\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Find the sum of elements that appear more than once\n    sum_repeated = 0\n    for num, count in count_dict.items():\n        if count > 1:\n            sum_repeated += num * count\n\n    return sum_repeated\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpzyu_irbm.py\", line 15, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    pattern = '[_](?=[a-z]+)'\n    if re.search(pattern, text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9jluuc18.py\", line 8, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 46, "completion": "def test_distinct(num_list):\n    return len(num_list) == len(set(num_list))\n\n# Example usage:\n# print(test_distinct([1, 2, 3, 4, 5]))  # Returns: True\n# print(test_distinct([1, 2, 2, 4, 5]))  # Returns: False\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 48, "completion": "def odd_bit_set_number(n):\n    # Convert the number to binary and reverse it\n    binary = bin(n)[2:][::-1]\n    # Iterate over the binary string\n    for i in range(len(binary)):\n        # If the bit is 0 and the index is odd, set it to 1\n        if binary[i] == '0' and i % 2 != 0:\n            binary = binary[:i] + '1' + binary[i+1:]\n    # Convert the binary string back to an integer and return it\n    return int(binary[::-1], 2)\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmptaty1y6z.py\", line 11, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(two_d_list, index):\n    if not two_d_list:\n        return []\n    return [sublist[index] for sublist in two_d_list]\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 50, "completion": "def min_length_list(list_of_lists):\n    return min(list_of_lists, key=lambda x: len(x))\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppa62p_o8.py\", line 3, in <module>\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nAssertionError", "passed": false}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    if base <= 0 or height <= 0:\n        raise ValueError(\"Base and height must be positive numbers.\")\n    return base * height\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpauck57wp.py\", line 9, in <module>\n    assert parallelogram_area(0, 10) == 0\n  File \"/tmp/tmpauck57wp.py\", line 3, in parallelogram_area\n    raise ValueError(\"Base and height must be positive numbers.\")\nValueError: Base and height must be positive numbers.", "passed": false}
{"task_id": 53, "completion": "def check_equality(input_string):\n    if not isinstance(input_string, str):\n        raise ValueError(\"Input must be a string.\")\n    if input_string[0] == input_string[-1]:\n        return 'Equal'\n    else:\n        return 'Not Equal'\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 54, "completion": "def counting_sort(arr):\n    # Find the maximum element in the array\n    max_val = max(arr)\n    \n    # Initialize the count array with zeros\n    count = [0] * (max_val + 1)\n    \n    # Store the count of each element\n    for num in arr:\n        count[num] += 1\n    \n    # Reconstruct the sorted array\n    sorted_arr = []\n    for i, freq in enumerate(count):\n        sorted_arr.extend([i] * freq)\n    \n    return sorted_arr\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 57, "completion": "def find_max_num(digits, num_digits):\n    # Sort the digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n    # Join the sorted digits to form a string\n    max_num_str = ''.join(map(str, sorted_digits))\n    # Convert the string to an integer and return\n    return int(max_num_str)\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 58, "completion": "def opposite_signs(num1, num2):\n    if not isinstance(num1, int) or not isinstance(num2, int):\n        raise ValueError(\"Both inputs must be integers.\")\n    return (num1 > 0) != (num2 > 0)\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 60, "completion": "def max_len_sub(arr, n):\n    # Initialize a dictionary to store the maximum length for each difference\n    dp = {}\n\n    # Initialize the maximum length to 1\n    max_len = 1\n\n    # Iterate over the array\n    for i in range(n):\n        # Initialize the current length to 1\n        curr_len = 1\n\n        # Calculate the difference between the current element and the target element\n        for j in range(i):\n            diff = arr[i] - arr[j]\n\n            # If the difference is already in the dictionary, update the current length\n            if diff in dp:\n                curr_len = max(curr_len, dp[diff] + 1)\n\n        # Update the maximum length\n        max_len = max(max_len, curr_len)\n\n        # Update the dictionary with the current difference and its corresponding length\n        dp[arr[i]] = curr_len\n\n    # Return the maximum length\n    return max_len\n\n# Example usage:\narr = [1, 56, 58, 57, 90, 92, 94, 93, 91, 45]\nn = len(arr)\nprint(max_len_sub(arr, n))  # Output: 5\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpzb9mawj9.py\", line 26, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nAssertionError", "passed": false}

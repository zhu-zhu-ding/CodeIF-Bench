{"task_id": 11, "completion": "def remove_occ(s, c):\n    first_index = s.find(c)\n    last_index = s.rfind(c)\n    if first_index != -1 and last_index != -1:\n        s = s[:first_index] + s[first_index + 1:]\n        s = s[:last_index] + s[last_index + 1:]\n    return s\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9bwct70i.py\", line 8, in <module>\n    assert remove_occ(\"hello\",\"l\") == \"heo\"\nAssertionError", "passed": false}
{"task_id": 14, "completion": "def find_volume(base, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    :param base: The base area of the triangular face of the prism.\n    :param height: The height of the triangular face of the prism.\n    :param length: The length of the prism.\n    :return: The volume of the triangular prism.\n    \"\"\"\n    return (base * height * length) / 2\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 15, "completion": "def split_lowerstring(s):\n    result = []\n    current_part = ''\n    for char in s:\n        if char.islower():\n            if current_part:\n                result.append(current_part)\n                current_part = ''\n        current_part += char\n    if current_part:\n        result.append(current_part)\n    return result\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7lvppm03.py\", line 13, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "completion": "def text_lowercase_underscore(text):\n    \"\"\"Return the input text as is.\"\"\"\n    return text\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmptn8aju1n.py\", line 4, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    return 4 * side_length\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(n):\n    if n < 0:\n        return False\n    # Calculate the left-hand side of the Woodall number formula\n    lhs = n * (2 ** n) - 1\n    # Check if the given number is equal to the calculated value\n    return n == lhs\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_k9vmiva.py\", line 8, in <module>\n    assert is_woodall(383) == True\nAssertionError", "passed": false}
{"task_id": 21, "completion": "def multiples_of_num(n, m):\n    \"\"\"\n    Generate the first m multiples of n.\n\n    :param n: The number to find multiples of.\n    :param m: The number of multiples to generate.\n    :return: A list of the first m multiples of n.\n    \"\"\"\n    multiples = []\n    for i in range(1, m + 1):\n        multiples.append(n * i)\n    return multiples\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphzkf6nbm.py\", line 6, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 24, "completion": "def binary_to_decimal(binary_num):\n    return int(binary_num, 2)\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpzc_ptxdf.py\", line 3, in <module>\n    assert binary_to_decimal(100) == 4\n  File \"/tmp/tmpzc_ptxdf.py\", line 2, in binary_to_decimal\n    return int(binary_num, 2)\nTypeError: int() can't convert non-string with explicit base", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(n):\n    return bin(n).replace(\"0b\", \"\")\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp76yeex3q.py\", line 3, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    return n * (n + 1) // 2\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1auzcyce.py\", line 3, in <module>\n    assert find_rect_num(4) == 20\nAssertionError", "passed": false}
{"task_id": 36, "completion": "def find_nth_digit(num1, num2, n):\n    if n < 0:\n        return \"n must be a non-negative integer.\"\n    if not isinstance(num1, int) or not isinstance(num2, int):\n        return \"Both num1 and num2 must be integers.\"\n    if num2 == 0:\n        return \"num2 cannot be zero.\"\n    if n > 1000000:\n        return \"n is too large.\"\n\n    result = num1 / num2\n    result_str = str(result)\n    if len(result_str) <= n:\n        return \"n is out of range.\"\n    return result_str[n]\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpf_24ffc1.py\", line 15, in <module>\n    assert find_nth_digit(1,2,1) == 5\nAssertionError", "passed": false}
{"task_id": 38, "completion": "def div_even_odd(nums):\n    even = [x for x in nums if x % 2 == 0]\n    odd = [x for x in nums if x % 2 != 0]\n    if even and odd:\n        return even[0] / odd[0]\n    else:\n        return None\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp923hnf87.py\", line 13, in <module>\n    assert cc_visit(inspect.getsource(div_even_odd))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 40, "completion": "from collections import Counter\n\ndef freq_element(lst):\n    return Counter(x for sublist in lst for x in sublist)\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_vwjt20s.py\", line 9, in <module>\n    assert cc_visit(inspect.getsource(freq_element))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 42, "completion": "def find_sum(arr):\n    from collections import Counter\n    counter = Counter(arr)\n    return sum(key for key, value in counter.items() if value > 1)\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpg0ya7jlf.py\", line 5, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    if re.search(pattern, text):\n        return True\n    return False\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmple4jbsi4.py\", line 7, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 45, "completion": "def get_gcd(arr):\n    if not all(isinstance(x, int) and x > 0 for x in arr):\n        raise ValueError(\"All elements in the array must be positive integers.\")\n\n    def euclidean_gcd(a, b):\n        while b != 0:\n            a, b = b, a % b\n        return a\n\n    gcd = arr[0]\n    for num in arr[1:]:\n        gcd = euclidean_gcd(gcd, num)\n\n    return gcd\n\n# Example usage:\nprint(get_gcd([24, 36, 48]))  # Output: 12\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5195pkdw.py\", line 19, in <module>\n    assert cc_visit(inspect.getsource(get_gcd))[0].complexity <=1\nAssertionError", "passed": false}
{"task_id": 47, "completion": "def compute_last_digit(a, b):\n    # Define the last digits of factorials\n    last_digits = [0, 1, 2, 4, 5, 6, 8, 9]\n\n    # Find the last digit of a factorial\n    last_digit_a = a % 8 if a % 8 != 0 else 8\n\n    # Find the last digit of b factorial\n    last_digit_b = b % 8 if b % 8 != 0 else 8\n\n    # Compute the last digit of a factorial divided by b factorial\n    last_digit = (last_digit_a * last_digit_b) % 10\n\n    return last_digit\n\n# Example usage:\n# print(compute_last_digit(5, 7))  # Output: 0\n# print(compute_last_digit(10, 15))  # Output: 0\n# print(compute_last_digit(17, 19))  # Output: 1\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp728w2u2f.py\", line 15, in <module>\n    assert compute_last_digit(2,4) == 2\nAssertionError", "passed": false}
{"task_id": 51, "completion": "def check_equilateral(a, b, c):\n    if a == b == c:\n        print(\"The triangle is equilateral.\")\n    else:\n        print(\"The triangle is not equilateral.\")\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpm0vuymr7.py\", line 6, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    \"\"\"Calculate the area of a parallelogram.\"\"\"\n    return base * height\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(input_string):\n    return input_string[0] == input_string[-1]\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgsraxasv.py\", line 3, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def check(n):\n    return n + 1 == int(str(n)[::-1]) * 2\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 58, "completion": "def opposite_signs(num1, num2):\n    return (num1 > 0) != (num2 > 0)\n", "requirement": "Code Complexity", "result": "passed", "passed": true}

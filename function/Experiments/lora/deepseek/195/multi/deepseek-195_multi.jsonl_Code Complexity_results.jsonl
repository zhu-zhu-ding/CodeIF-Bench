{"task_id": 11, "requirement": "Code Complexity", "completion": "def remove_occ(s, char):\n    if s.count(char) > 0:\n        first_index = s.find(char)\n        last_index = s.rfind(char)\n        if first_index != last_index:\n            s = s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]\n        else:\n            s = s.replace(char, '', 1)\n    return s\n", "result": "passed", "passed": true}
{"task_id": 14, "requirement": "Code Complexity", "completion": "def find_volume(base_area, height_prism):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base_area (float): The area of the triangular base.\n    height_prism (float): The height of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    return base_area * height_prism\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpez5wci3t.py\", line 3, in <module>\n    assert find_volume(10,8,6) == 240\nTypeError: find_volume() takes 2 positional arguments but 3 were given", "passed": false}
{"task_id": 15, "requirement": "Code Complexity", "completion": "def split_lowerstring(s):\n    if s and s[0].islower():\n        return [s]\n    else:\n        return [word for word in s.split() if word[0].islower()]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp164ae754.py\", line 6, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "requirement": "Code Complexity", "completion": "import re\n\ndef text_lowercase_underscore(text):\n    # The regular expression pattern r'\\b[a-z]+_[a-z]+\\b' matches sequences of \n    # one or more lowercase letters followed by an underscore, followed by \n    # one or more lowercase letters, where the sequence is a word boundary.\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    match = re.search(pattern, text)\n    return match.group(0) if match else None\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpu6a9x640.py\", line 9, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "requirement": "Code Complexity", "completion": "def square_perimeter(side_length):\n    \"\"\"\n    This function calculates the perimeter of a square.\n\n    :param side_length: length of one side of the square\n    :return: perimeter of the square\n    \"\"\"\n    return 4 * side_length\n", "result": "passed", "passed": true}
{"task_id": 20, "requirement": "Code Complexity", "completion": "def is_woodall(n):\n    if n < 0:\n        return False\n    # Check if n is a Woodall number\n    return n & (n + 1) == 0 and n % 3 == 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmprc2f9ki3.py\", line 6, in <module>\n    assert is_woodall(383) == True\nAssertionError", "passed": false}
{"task_id": 21, "requirement": "Code Complexity", "completion": "def multiples_of_num(n, m):\n    return [n * i for i in range(1, m + 1)]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpzdaaga9e.py\", line 3, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 24, "requirement": "Code Complexity", "completion": "def binary_to_decimal(binary):\n    return int(str(binary), 2)\n", "result": "passed", "passed": true}
{"task_id": 32, "requirement": "Code Complexity", "completion": "def max_prime_factors(n):\n    def prime_factors(n):\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    # Get the prime factors and return the largest one\n    factors = prime_factors(n)\n    return max(factors) if factors else None\n\n# Example usage:\nprint(max_prime_factors(10))  # Output: 5\nprint(max_prime_factors(17))  # Output: 17\nprint(max_prime_factors(315))  # Output: 7\n", "result": "passed", "passed": true}
{"task_id": 33, "requirement": "Code Complexity", "completion": "def decimal_to_binary(n):\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n\n# Test the function\nprint(decimal_to_binary(10))  # Output: 1010\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpfmrnj191.py\", line 9, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 35, "requirement": "Code Complexity", "completion": "def find_rect_num(n):\n    return n * (n + 1) // 2\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpc62u578_.py\", line 3, in <module>\n    assert find_rect_num(4) == 20\nAssertionError", "passed": false}
{"task_id": 36, "requirement": "Code Complexity", "completion": "def find_nth_digit(num1, num2, n):\n    # Initialize the current number and the count of digits\n    current_num = num1\n    digit_count = 0\n\n    # Count the number of digits in num1\n    while current_num > 0:\n        current_num //= 10\n        digit_count += 1\n\n    # Check if n is within the range of the digits in num1\n    if n <= digit_count:\n        # Calculate the nth digit directly from num1\n        current_num = num1\n        for _ in range(n):\n            current_num //= 10\n        return current_num % 10\n    else:\n        # Adjust n to account for the digits in num1\n        n -= digit_count\n\n        # Check if n is within the range of the digits in num2\n        if n <= len(str(num2)):\n            # Extract the nth digit from num2\n            current_num = num2\n            for _ in range(n):\n                current_num //= 10\n            return current_num % 10\n        else:\n            # If n is out of range, return None\n            return None\n\n# Example usage:\nprint(find_nth_digit(123, 456, 2))  # Output: 3\nprint(find_nth_digit(123, 456, 10))  # Output: 6\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpaapybpag.py\", line 32, in <module>\n    assert find_nth_digit(1,2,1) == 5\nAssertionError", "passed": false}
{"task_id": 38, "requirement": "Code Complexity", "completion": "def div_even_odd(lst):\n    even = None\n    odd = None\n    for num in lst:\n        if even is None and num % 2 == 0:\n            even = num\n        if odd is None and num % 2 != 0:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    if even is None or odd is None:\n        return \"List does not contain both even and odd numbers\"\n    else:\n        return odd / even\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpaj4wfmi4.py\", line 15, in <module>\n    assert div_even_odd([1,3,5,7,4,1,6,8])==4\nAssertionError", "passed": false}
{"task_id": 40, "requirement": "Code Complexity", "completion": "from collections import Counter\n\ndef freq_element(lst):\n    return Counter(item for sublist in lst for item in sublist)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpsdoxt115.py\", line 9, in <module>\n    assert cc_visit(inspect.getsource(freq_element))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 42, "requirement": "Code Complexity", "completion": "def find_sum(arr):\n    processed = set()\n    sum_repeated = 0\n\n    for num in arr:\n        if num in processed:\n            sum_repeated += num\n        else:\n            processed.add(num)\n\n    return sum_repeated\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmprxkxzgd9.py\", line 10, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Code Complexity", "completion": "import re\n\ndef text_match(text):\n    pattern = '[_][a-z]+'\n    match = re.search(pattern, text)\n    return match.group(0) if match else \"No match found\"\n\n# Test the function\nprint(text_match(\"test_string\"))  # Output: _string\nprint(text_match(\"testString\"))  # Output: No match found\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpe8bmimu1.py\", line 9, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 45, "requirement": "Code Complexity", "completion": "def get_gcd(arr):\n    def gcd(a, b):\n        while b != 0:\n            a, b = b, a % b\n        return a\n\n    result = arr[0]\n    for num in arr[1:]:\n        result = gcd(result, num)\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpk_mrive1.py\", line 15, in <module>\n    assert cc_visit(inspect.getsource(get_gcd))[0].complexity <=1\nAssertionError", "passed": false}
{"task_id": 47, "requirement": "Code Complexity", "completion": "def compute_last_digit(a, b):\n    # The last digit of a factorial is always 0, 1, 2, 6, or 8\n    last_digit_a = a % 5\n    last_digit_b = b % 4\n\n    # The last digit of a^b is the last digit of a repeated b times\n    last_digit_a_pow_b = pow(last_digit_a, last_digit_b, 10)\n\n    return last_digit_a_pow_b\n\n# Test the function\nprint(compute_last_digit(5, 7))  # Output: 5\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppw9anhm5.py\", line 10, in <module>\n    assert compute_last_digit(2,4) == 2\nAssertionError", "passed": false}
{"task_id": 51, "requirement": "Code Complexity", "completion": "def check_equilateral(a, b, c):\n    if a == b == c:\n        print(\"The triangle is equilateral.\")\n\n# Test the function\ncheck_equilateral(3, 3, 3)  # This should print \"The triangle is equilateral.\"\ncheck_equilateral(3, 4, 5)  # This should not print anything, as the triangle is not equilateral.\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppoe7t2b8.py\", line 7, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "requirement": "Code Complexity", "completion": "def parallelogram_area(base, height):\n    return base * height\n", "result": "passed", "passed": true}
{"task_id": 53, "requirement": "Code Complexity", "completion": "def check_equality(input_string):\n    return input_string[0] == input_string[-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpiapjgrng.py\", line 3, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 56, "requirement": "Code Complexity", "completion": "def check(n):\n    return n + 1 == 2 * int(str(n)[::-1])\n", "result": "passed", "passed": true}
{"task_id": 58, "requirement": "Code Complexity", "completion": "def opposite_signs(num1, num2):\n    return num1 * num2 < 0\n", "result": "passed", "passed": true}

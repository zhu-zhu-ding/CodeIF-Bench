{"task_id": 11, "requirement": "Functionality Extension", "completion": "def remove_occ(s, char, all=False):\n    if all:\n        # Remove all occurrences of the character\n        s = s.replace(char, '')\n    else:\n        # Remove first and last occurrence of the character\n        first_index = s.find(char)\n        last_index = s.rfind(char)\n        \n        if first_index != -1 and last_index != -1:\n            s = s[:first_index] + s[first_index+1:]\n            s = s[:last_index] + s[last_index+1:]\n    \n    return s\n", "result": "passed", "passed": true}
{"task_id": 12, "requirement": "Functionality Extension", "completion": "def sort_matrix(matrix):\n    # Determine the maximum length of the rows\n    max_length = max(len(row) for row in matrix)\n    \n    # Pad each row with zeros to the maximum length\n    padded_matrix = [row + [0] * (max_length - len(row)) for row in matrix]\n    \n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in padded_matrix]\n    \n    # Sort the matrix based on the row sums\n    sorted_matrix = sorted(padded_matrix, key=lambda row: sum(row))\n    \n    return sorted_matrix\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpw6d3_qx9.py\", line 11, in <module>\n    assert sort_matrix([[1, 2, 3], [4, 5], [6]]) == [[6], [4, 5], [1, 2, 3]]\nAssertionError", "passed": false}
{"task_id": 13, "requirement": "Functionality Extension", "completion": "def count_common(word_dict, top_n=1):\n    # Get the maximum count\n    max_count = max(word_dict.values())\n    \n    # Get the words with the maximum count\n    common_words = [word for word, count in word_dict.items() if count == max_count]\n    \n    # If top_n is greater than the number of common words, return all common words\n    if top_n > len(common_words):\n        top_n = len(common_words)\n    \n    # Return the top_n common words\n    return common_words[:top_n]\n\n# Example usage:\nword_dict = {'apple': 5, 'banana': 3, 'cherry': 5, 'date': 1, 'grape': 4, 'kiwi': 4}\n\n# Get the most common word\nprint(count_common(word_dict))  # Output: ['apple', 'cherry']\n\n# Get the top 2 most common words\nprint(count_common(word_dict, top_n=2))  # Output: ['apple', 'cherry']\n\n# Get the top 3 most common words\nprint(count_common(word_dict, top_n=3))  # Output: ['apple', 'cherry', 'grape']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpldg7vh15.py\", line 19, in <module>\n    assert count_common(['apple', 'banana', 'apple', 'orange', 'banana', 'banana'], 2) == [('banana', 3), ('apple', 2)]\n  File \"/tmp/tmpldg7vh15.py\", line 3, in count_common\n    max_count = max(word_dict.values())\nAttributeError: 'list' object has no attribute 'values'", "passed": false}
{"task_id": 14, "requirement": "Functionality Extension", "completion": "def find_volume(input_data):\n    if isinstance(input_data, (list, tuple)) and len(input_data) == 3:\n        base_area, height, length = input_data\n        return base_area * height * length\n    elif isinstance(input_data, (int, float)):\n        # Assuming the input is the base area and the height and length are not provided\n        base_area = input_data\n        # You need to provide the height and length separately\n        raise ValueError(\"When providing a single value, you must also provide the height and length.\")\n    else:\n        raise ValueError(\"Input must be a list or tuple of three elements or a single numeric value.\")\n\n# Example usage:\ntry:\n    # Providing the base area, height, and length as a list\n    volume = find_volume([10, 20, 30])\n    print(f\"The volume of the triangular prism is {volume} cubic units.\")\n\n    # Providing the base area as a single value\n    # You need to provide the height and length separately\n    base_area = 10\n    height = 20\n    length = 30\n    volume = find_volume(base_area)\n    print(f\"The volume of the triangular prism is {volume} cubic units.\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp53dhaq4x.py\", line 26, in <module>\n    assert find_volume([10, 8, 6]) == 240\nAssertionError", "passed": false}
{"task_id": 15, "requirement": "Functionality Extension", "completion": "def split_lowerstring(s, include_lower=False):\n    words = s.split()\n    result = []\n    segment = ''\n    for word in words:\n        if word[0].islower():\n            if include_lower:\n                segment += word + ' '\n            else:\n                segment += word.lower() + ' '\n        else:\n            if segment:\n                result.append(segment.strip())\n                segment = ''\n            result.append(word)\n    if segment:\n        result.append(segment.strip())\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpc1m747ff.py\", line 19, in <module>\n    assert split_lowerstring('AbCd', include_lower=True) == ['Ab', 'Cd']\nAssertionError", "passed": false}
{"task_id": 16, "requirement": "Functionality Extension", "completion": "import re\n\ndef text_lowercase_underscore(text):\n    # The regular expression pattern r'\\b[a-z]+_[a-z]+\\b' matches sequences of \n    # one or more lowercase letters followed by an underscore, followed by \n    # one or more lowercase letters, where the sequence is a word boundary.\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    matches = re.findall(pattern, text)\n    \n    # Check if at least one match is found\n    if matches:\n        return 'Found a match!'\n    else:\n        return 'No match found.'\n\n# Example usage:\ntext = \"This is a test_string with some lowercase_letters and an underscore.\"\nprint(text_lowercase_underscore(text))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0d2q5r1m.py\", line 16, in <module>\n    assert text_lowercase_underscore('abc_def_ghi') == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 17, "requirement": "Functionality Extension", "completion": "def square_perimeter(side_length):\n    \"\"\"\n    This function calculates the perimeter of a square, rounding the result to the nearest integer.\n\n    :param side_length: length of one side of the square (can be a floating-point number)\n    :return: perimeter of the square (rounded to the nearest integer)\n    \"\"\"\n    # Round the side_length to the nearest integer\n    side_length = round(side_length)\n    # Calculate the perimeter\n    perimeter = 4 * side_length\n    return perimeter\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1305m9te.py\", line 7, in <module>\n    assert square_perimeter(4.5) == 20\nAssertionError", "passed": false}
{"task_id": 18, "requirement": "Functionality Extension", "completion": "def remove_dirty_chars(s1, s2):\n    s1 = s1.lower()\n    s2 = s2.lower()\n    return ''.join(c for c in s1 if c not in s2)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpeg_y2xf7.py\", line 5, in <module>\n    assert remove_dirty_chars('HelloWorld', 'hELLO') == 'World', 'Function should handle case-insensitive character removal.'\nAssertionError: Function should handle case-insensitive character removal.", "passed": false}
{"task_id": 19, "requirement": "Functionality Extension", "completion": "def test_duplicate(arr):\n    # Count the occurrences of each element in the array\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Find elements that occur more than once\n    duplicates = [num for num, count in count_dict.items() if count > 1]\n\n    return duplicates\n\n# Example usage:\nprint(test_duplicate([1, 2, 3, 4, 5]))  # prints: []\nprint(test_duplicate([1, 2, 3, 4, 5, 5]))  # prints: [5]\nprint(test_duplicate([1, 2, 2, 3, 4, 4, 5]))  # prints: [2, 4]\n", "result": "passed", "passed": true}
{"task_id": 20, "requirement": "Functionality Extension", "completion": "def is_woodall(n):\n    if n < 0:\n        return []\n    woodall_numbers = []\n    i = 0\n    while True:\n        woodall_num = i * 2**i - 1\n        if woodall_num > n:\n            break\n        woodall_numbers.append(woodall_num)\n        i += 1\n    return woodall_numbers\n\n# Example usage:\nprint(is_woodall(100))  # Output: [1, 3, 15]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdjw4t2sw.py\", line 15, in <module>\n    assert is_woodall(10) == [1, 7]\nAssertionError", "passed": false}
{"task_id": 21, "requirement": "Functionality Extension", "completion": "def multiples_of_num(n, m):\n    multiples = []\n    for i in range(1, m+1):\n        multiples.append(n * i)\n    return multiples\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpbr654w9s.py\", line 6, in <module>\n    assert multiples_of_num(3, 2.5) == [2.5, 5.0, 7.5]\n  File \"/tmp/tmpbr654w9s.py\", line 3, in multiples_of_num\n    for i in range(1, m+1):\nTypeError: 'float' object cannot be interpreted as an integer", "passed": false}
{"task_id": 22, "requirement": "Functionality Extension", "completion": "def find_first_duplicate(arr):\n    num_dict = {}\n    duplicates = []\n    for num in arr:\n        if num in num_dict:\n            if num not in duplicates:\n                duplicates.append(num)\n        else:\n            num_dict[num] = 1\n    return duplicates\n", "result": "passed", "passed": true}
{"task_id": 23, "requirement": "Functionality Extension", "completion": "def maximum_sum(list_of_lists):\n    # Find the sublist with the maximum sum\n    max_sum_sublist = max(list_of_lists, key=sum)\n    # Return the sum of the sublist with the maximum sum\n    return sum(max_sum_sublist)\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9], [-1, -2, -3], [-4, -5, -6]]\nprint(maximum_sum(list_of_lists))  # Output: 39\n", "result": "passed", "passed": true}
{"task_id": 24, "requirement": "Functionality Extension", "completion": "def binary_to_decimal(binary):\n    binary = str(binary)\n    decimal = 0\n    for digit in binary:\n        decimal = decimal * 2 + int(digit)\n    return decimal\n", "result": "passed", "passed": true}
{"task_id": 25, "requirement": "Functionality Extension", "completion": "def find_product(arr):\n    # Create a dictionary to store the frequency of each element\n    freq = {}\n    negatives = 0  # To keep track of the number of negative numbers\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n        # Count the number of negative numbers\n        if num < 0:\n            negatives += 1\n\n    # Initialize the product to 1\n    product = 1\n\n    # Multiply the product by each non-repeated element\n    for num, count in freq.items():\n        if count == 1:\n            product *= num\n\n    # If there's an odd number of negative numbers, the product is negative\n    if negatives % 2 != 0:\n        product *= -1\n\n    return product\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpi8nhd89j.py\", line 23, in <module>\n    assert find_product([-1, -2, 3, 3], 4) == 2\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "requirement": "Functionality Extension", "completion": "def check_k_elements(tuple_list, k):\n    count = 0\n    for t in tuple_list:\n        if len(t) == k:\n            count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": 27, "requirement": "Functionality Extension", "completion": "def remove(lst, chars_to_remove=''):\n    # Create a set of characters to be removed for faster lookup\n    remove_set = set(chars_to_remove)\n    # Use list comprehension to remove specified characters from each string\n    return [''.join(c for c in s if c not in remove_set) for s in lst]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpfhcvugle.py\", line 6, in <module>\n    assert remove_extended(['abcd123', '456defg'], 'abcdef') == ['d', 'g']\nNameError: name 'remove_extended' is not defined", "passed": false}
{"task_id": 28, "requirement": "Functionality Extension", "completion": "def binomial_coeff(n, k, memo={}):\n    if k == 0 or n == k:\n        return 1\n    if (n, k) in memo:\n        return memo[(n, k)]\n    \n    result = binomial_coeff(n - 1, k - 1, memo) + binomial_coeff(n - 1, k, memo)\n    memo[(n, k)] = result\n    return result\n\n# Example usage:\nprint(binomial_coeff(5, 2))  # Output: 10\n", "result": "passed", "passed": true}
{"task_id": 29, "requirement": "Functionality Extension", "completion": "def get_odd_occurrence(arr: list, arr_size: int) -> list:\n    # Create a dictionary to count occurrences\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Find the elements with an odd count\n    odd_occurrences = [num for num, count in count_dict.items() if count % 2 != 0]\n\n    return odd_occurrences\n\n# Example usage:\narr = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5]\narr_size = len(arr)\nprint(get_odd_occurrence(arr, arr_size))  # Output: [1, 3, 5]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp765zbv1_.py\", line 16, in <module>\n    assert get_odd_occurrence([1, 2, 3, 1, 2, 3, 1, 3]) == [1, 3]\nTypeError: get_odd_occurrence() missing 1 required positional argument: 'arr_size'", "passed": false}
{"task_id": 30, "requirement": "Functionality Extension", "completion": "def count_substring_with_equal_ends(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if s[i].isalpha() and s[j].isalpha() and s[i] == s[j]:\n                count += 1\n    return count\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7h9zvti5.py\", line 8, in <module>\n    assert count_substring_with_equal_ends('a b a') == 4\nAssertionError", "passed": false}
{"task_id": 31, "requirement": "Functionality Extension", "completion": "import heapq\n\ndef func(nums, k):\n    # Handle the case where k is zero\n    if k == 0:\n        return []\n\n    # Create a dictionary to store the frequency of each number\n    freq = {}\n    for num in nums:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Use a heap to find the k most frequent numbers\n    heap = []\n    for num, count in freq.items():\n        if len(heap) < k:\n            heapq.heappush(heap, (count, num))\n        else:\n            if count > heap[0][0]:\n                heapq.heapreplace(heap, (count, num))\n\n    # Return the k most frequent numbers\n    return [num for _, num in heap]\n\n# Example usage:\nnums = [1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5]\nk = 3\nprint(func(nums, k))  # Output: [5, 3, 4]\n\n# Example usage with k = 0:\nk = 0\nprint(func(nums, k))  # Output: []\n", "result": "passed", "passed": true}
{"task_id": 32, "requirement": "Functionality Extension", "completion": "def max_prime_factors(n, return_all=False):\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n\n    if return_all:\n        return factors\n    else:\n        return max(factors)\n\n# Example usage:\nprint(max_prime_factors(10))  # Output: 5\nprint(max_prime_factors(17))  # Output: 17\nprint(max_prime_factors(315))  # Output: 7\n\n# With return_all=True, it will return all prime factors\nprint(max_prime_factors(315, return_all=True))  # Output: [3, 3, 5, 7]\n", "result": "passed", "passed": true}
{"task_id": 33, "requirement": "Functionality Extension", "completion": "def decimal_to_binary(decimal_list):\n    binary_list = []\n    for decimal_num in decimal_list:\n        binary_num = bin(decimal_num).replace(\"0b\", \"\")\n        binary_list.append(binary_num)\n    return binary_list\n\n# Test the function\nprint(decimal_to_binary([10, 20, 30]))  # Output: ['1010', '10100', '11110']\n", "result": "passed", "passed": true}
{"task_id": 34, "requirement": "Functionality Extension", "completion": "def find_missing(arr):\n    def find_first_missing():\n        left, right = 0, len(arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] != mid + 1 and (mid == 0 or arr[mid - 1] == mid):\n                return mid + 1\n            elif arr[mid] == mid + 1:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1\n\n    def find_last_missing():\n        left, right = 0, len(arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] == mid + 1 and (mid == len(arr) - 1 or arr[mid + 1] != mid + 2):\n                return mid + 1\n            elif arr[mid] == mid + 1:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1\n\n    first_missing = find_first_missing()\n    if first_missing == -1:\n        return []\n\n    last_missing = find_last_missing()\n    return list(range(first_missing, last_missing + 1))\n\n# Example usage:\nprint(find_missing([1, 2, 3, 4, 6, 7, 8]))  # Output: [5]\nprint(find_missing([1, 2, 3, 5, 6, 7, 8]))  # Output: [4]\nprint(find_missing([1, 2, 3, 4, 5, 7, 8]))  # Output: [6]\nprint(find_missing([1, 2, 3, 4, 5, 6, 8]))  # Output: [7]\nprint(find_missing([1, 2, 3, 4, 5, 6, 7]))  # Output: []\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp77yuv7st.py\", line 35, in <module>\n    assert find_missing([1,3,6], 3) == [2, 4, 5]\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "requirement": "Functionality Extension", "completion": "def find_rect_num(n):\n    rect_nums = []\n    for num in n:\n        rect_num = num * (num + 1) // 2\n        rect_nums.append(rect_num)\n    return rect_nums\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpaxwl55v6.py\", line 7, in <module>\n    assert find_rect_num([1, 2, 3]) == [2, 6, 12]\nAssertionError", "passed": false}
{"task_id": 36, "requirement": "Functionality Extension", "completion": "def find_nth_digit(num1, num2, n):\n    # Convert the numbers to strings\n    num1_str = str(abs(num1))\n    num2_str = str(abs(num2))\n\n    # Concatenate the two numbers\n    fraction_str = num1_str + num2_str\n\n    # Check if n is a valid index\n    if n < len(fraction_str):\n        # Return the nth digit\n        return fraction_str[n]\n    else:\n        # Return None if n is out of range\n        return None\n\n# Example usage:\nprint(find_nth_digit(123, 456, 2))  # Output: '3'\nprint(find_nth_digit(-123, 456, 2))  # Output: '3'\nprint(find_nth_digit(123, -456, 2))  # Output: '3'\nprint(find_nth_digit(-123, -456, 2))  # Output: '3'\nprint(find_nth_digit(123, 456, 10))  # Output: None\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmcxuw9yo.py\", line 20, in <module>\n    assert find_nth_digit(-1, 2, 1) == 5\nAssertionError", "passed": false}
{"task_id": 37, "requirement": "Functionality Extension", "completion": "def sort_mixed_list(lst, reverse_strings=False):\n    int_lst = sorted([i for i in lst if isinstance(i, int)])\n    str_lst = sorted([i for i in lst if isinstance(i, str)], reverse=reverse_strings)\n    return int_lst + str_lst\n\n# Test the function with reverse_strings set to True\nprint(sort_mixed_list([3, 'a', 1, 'b', 2, 'c', 'd', 4], reverse_strings=True))\n", "result": "passed", "passed": true}
{"task_id": 38, "requirement": "Functionality Extension", "completion": "def div_even_odd(lst):\n    even = None\n    odd = None\n    for i in lst:\n        if i % 2 == 0 and even is None:\n            even = i\n        elif i % 2 != 0 and odd is None:\n            odd = i\n        if even is not None and odd is not None:\n            break\n    if even is None or odd is None:\n        return \"List does not contain both even and odd numbers\"\n    else:\n        # Handle division with negative values\n        if (even < 0 and odd < 0) or (even > 0 and odd < 0):\n            return even / odd\n        else:\n            return even / odd\n\n# Example usage:\nprint(div_even_odd([-4, -3, 2, 1]))  # Output: -2.0\nprint(div_even_odd([-4, 3, 2, 1]))   # Output: -2.0\nprint(div_even_odd([4, -3, 2, 1]))   # Output: 2.0\nprint(div_even_odd([4, 3, 2, 1]))    # Output: 2.0\n", "result": "passed", "passed": true}
{"task_id": 39, "requirement": "Functionality Extension", "completion": "from itertools import permutations\n\ndef rearrange_string(s):\n    # Count the frequency of each character\n    freq = {}\n    for char in s:\n        freq[char] = freq.get(char, 0) + 1\n    \n    # Check if the frequency of each character is even\n    for char, count in freq.items():\n        if count % 2 != 0:\n            return \"No valid rearrangement possible.\"\n    \n    # Generate all permutations of the string\n    perms = [''.join(p) for p in permutations(s)]\n    \n    # Filter out permutations that do not satisfy the condition\n    valid_perms = [p for p in perms if all(p[i] != p[i + 1] for i in range(len(p) - 1))]\n    \n    return valid_perms\n\n# Example usage:\nprint(rearrange_string(\"aabbcc\"))  # Output: ['aabbcc', 'ababab', 'ababab', 'ababab', 'ababab', 'ababab', ...]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpe2s_plsb.py\", line 18, in <module>\n    assert set(rearange_string('aabb')) == {'abab', 'baba'}\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "requirement": "Functionality Extension", "completion": "from collections import Counter\n\ndef freq_element(lst):\n    def flatten(nested_list):\n        for item in nested_list:\n            if isinstance(item, list):\n                yield from flatten(item)\n            else:\n                yield item\n\n    # Use the generator to flatten the list and count the frequency\n    flat_list = list(flatten(lst))\n    freq = Counter(flat_list)\n    return freq\n\n# Example usage:\nlst = [[1, 2, 3], [2, [3, 4], 5], [3, [4, [5, 6]]]]\nprint(freq_element(lst))  # Output: Counter({3: 3, 2: 2, 1: 1, 4: 2, 5: 2, 6: 1})\n", "result": "passed", "passed": true}
{"task_id": 41, "requirement": "Functionality Extension", "completion": "def filter_evennumbers(numbers):\n    # Filter out non-integer values\n    numbers = [x for x in numbers if isinstance(x, int)]\n    # Filter even numbers\n    return list(filter(lambda x: x % 2 == 0, numbers))\n", "result": "passed", "passed": true}
{"task_id": 42, "requirement": "Functionality Extension", "completion": "def find_sum(arr):\n    # Create a dictionary to keep track of the frequency of each element\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Sum up the elements that appear more than once\n    sum_repeated = 0\n    for num, count in freq.items():\n        if count > 1:\n            sum_repeated += num * count\n\n    return sum_repeated\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpme8s4kqk.py\", line 15, in <module>\n    assert find_sum([-1, -2, -3, -1, -1], 5) == -2\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Functionality Extension", "completion": "import re\n\ndef text_match(text):\n    pattern = '[_]+[a-z]+'\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches\n    else:\n        return \"No match found\"\n\n# Test the function\nprint(text_match(\"test_string\"))  # Output: ['_string']\nprint(text_match(\"test_string_with_underscores\"))  # Output: ['_string', '_with_underscores']\nprint(text_match(\"testString\"))  # Output: No match found\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpzetnc88h.py\", line 13, in <module>\n    assert text_match('abc_def_ghi') == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 45, "requirement": "Functionality Extension", "completion": "def get_gcd(arr):\n    def gcd(a, b):\n        while b != 0:\n            a, b = b, a % b\n        return a\n\n    # Filter out zeros from the array\n    non_zero_elements = [num for num in arr if num != 0]\n\n    if not non_zero_elements:\n        # If all elements are zero, return 0\n        return 0\n\n    result = non_zero_elements[0]\n\n    for i in range(1, len(non_zero_elements)):\n        result = gcd(result, non_zero_elements[i])\n\n    return result\n", "result": "passed", "passed": true}
{"task_id": 46, "requirement": "Functionality Extension", "completion": "from math import isclose\n\ndef test_distinct(lst, rel_tol=1e-9, abs_tol=0.0):\n    # Use a set to remove duplicates and then compare with the original list\n    distinct_set = set()\n    for num in lst:\n        # Check if the number is already in the set with a tolerance\n        if not any(isclose(num, other, rel_tol=rel_tol, abs_tol=abs_tol) for other in distinct_set):\n            distinct_set.add(num)\n        else:\n            return False\n    return True\n\n# Example usage:\nprint(test_distinct([1.0, 2.0, 3.0, 4.0, 5.0]))  # True, all numbers are distinct\nprint(test_distinct([1.0, 2.0, 2.0, 4.0, 5.0]))  # False, 2.0 is repeated\nprint(test_distinct([1.0, 2.0, 3.0, 4.0, 5.0], rel_tol=1e-5))  # True, within a relative tolerance of 1e-5\nprint(test_distinct([1.0, 2.0, 3.0, 4.0, 5.0], abs_tol=1e-5))  # True, within an absolute tolerance of 1e-5\n", "result": "passed", "passed": true}
{"task_id": 47, "requirement": "Functionality Extension", "completion": "def compute_last_digit(a, b):\n    # Handle the case where a or b is zero\n    if a == 0 or b == 0:\n        return 1\n\n    # Calculate the factorial of a and b\n    factorial_a = 1\n    for i in range(1, a + 1):\n        factorial_a *= i\n\n    factorial_b = 1\n    for i in range(1, b + 1):\n        factorial_b *= i\n\n    # Find the last digit of the division\n    last_digit = (factorial_a % 10) * pow(factorial_b, -1, 10)\n    return last_digit % 10\n\n# Test the function with zero and non-zero values\nprint(compute_last_digit(0, 7))  # Output: 1\nprint(compute_last_digit(5, 0))  # Output: 1\nprint(compute_last_digit(5, 7))  # Output: 5\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpw34c6zx0.py\", line 18, in <module>\n    print(compute_last_digit(5, 7))  # Output: 5\n  File \"/tmp/tmpw34c6zx0.py\", line 13, in compute_last_digit\n    last_digit = (factorial_a % 10) * pow(factorial_b, -1, 10)\nValueError: base is not invertible for the given modulus", "passed": false}
{"task_id": 48, "requirement": "Functionality Extension", "completion": "def odd_bit_set_number(n):\n    # Take the absolute value of the input number\n    n = abs(n)\n    # Convert the number to binary and reverse it\n    binary = bin(n)[2:][::-1]\n    # Iterate over the binary string\n    for i in range(len(binary)):\n        # If the bit is 0 and its position is odd, set it to 1\n        if i % 2 != 0 and binary[i] == '0':\n            binary = binary[:i] + '1' + binary[i+1:]\n    # Convert the binary string back to a number and return it\n    return int(binary[::-1], 2)\n\n# Example usage:\nprint(odd_bit_set_number(10))  # Output: 14\nprint(odd_bit_set_number(-10)) # Output: -14\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpglg_t9lv.py\", line 16, in <module>\n    assert odd_bit_set_number(-10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "requirement": "Functionality Extension", "completion": "def specified_element(two_dim_list, position=0):\n    if position < 0:\n        # If the position is negative, adjust it to be positive\n        position = len(two_dim_list[0]) + position\n    return [row[position] if len(row) > position else None for row in two_dim_list]\n", "result": "passed", "passed": true}
{"task_id": 51, "requirement": "Functionality Extension", "completion": "def check_triangle_type(a, b, c):\n    # Check for equilateral triangle\n    if a == b == c:\n        return \"equilateral\"\n    # Check for isosceles triangle\n    elif a == b or a == c or b == c:\n        return \"isosceles\"\n    # If neither equilateral nor isosceles, it's scalene\n    else:\n        return \"scalene\"\n\n# Test the function\nprint(check_triangle_type(3, 3, 3))  # This should print \"equilateral\"\nprint(check_triangle_type(3, 4, 3))  # This should print \"isosceles\"\nprint(check_triangle_type(3, 4, 5))  # This should print \"scalene\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqoyw70sz.py\", line 15, in <module>\n    assert check_equilateral(5, 5, 3) == 'isosceles'\nNameError: name 'check_equilateral' is not defined", "passed": false}
{"task_id": 52, "requirement": "Functionality Extension", "completion": "def parallelogram_area(parallelograms):\n    areas = []\n    for base, height in parallelograms:\n        area = base * height\n        areas.append(area)\n    return areas\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkd074q1i.py\", line 7, in <module>\n    assert parallelogram_area_list([(10, 20), (15, 20), (8, 9)]) == [200, 300, 72]\nNameError: name 'parallelogram_area_list' is not defined", "passed": false}
{"task_id": 53, "requirement": "Functionality Extension", "completion": "def check_equality(input_string):\n    return input_string[0].lower() == input_string[-1].lower()\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpm7qnw_7b.py\", line 3, in <module>\n    assert check_equality('Abca') == 'Equal'\nAssertionError", "passed": false}
{"task_id": 54, "requirement": "Functionality Extension", "completion": "def counting_sort(arr):\n    # Find the minimum and maximum element in the array\n    min_val = min(arr)\n    max_val = max(arr)\n    \n    # Shift the array to handle negative values\n    shift = -min_val\n    shifted_arr = [num + shift for num in arr]\n    \n    # Initialize the count array with all zeros\n    count = [0] * (max_val - min_val + 1 + shift)\n    \n    # Store the count of each element in the count array\n    for num in shifted_arr:\n        count[num] += 1\n    \n    # Store the cumulative count\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    \n    # Build the output array\n    output = [0] * len(arr)\n    for num in reversed(shifted_arr):  # Reverse to maintain stability\n        output[count[num] - 1] = num\n        count[num] -= 1\n    \n    # Shift the sorted array back to its original range\n    sorted_arr = [num - shift for num in output]\n    \n    return sorted_arr\n\n# Example usage:\narr = [4, -2, 2, -8, 3, -1, 7, -10]\nsorted_arr = counting_sort(arr)\nprint(sorted_arr)\n", "result": "passed", "passed": true}
{"task_id": 55, "requirement": "Functionality Extension", "completion": "def tn_gp(a, r, n):\n    \"\"\"\n    This function calculates the nth term of a geometric series.\n    a: first term of the series (float)\n    r: common ratio of the series (float)\n    n: term number to calculate (integer)\n    Returns: the nth term of the series (float)\n    \"\"\"\n    return a * r ** (n - 1)\n", "result": "passed", "passed": true}
{"task_id": 56, "requirement": "Functionality Extension", "completion": "def check(n):\n    # Convert the number to a string, reverse it, and convert it back to an integer\n    # If the number is negative, keep the negative sign\n    reverse = int(str(n)[::-1]) if n >= 0 else -int(str(n)[::-1])\n\n    # Check if the number is one less than twice its reverse\n    return n == 2 * reverse - 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmvwcweqn.py\", line 7, in <module>\n    assert check(-73) == False\n  File \"/tmp/tmpmvwcweqn.py\", line 4, in check\n    reverse = int(str(n)[::-1]) if n >= 0 else -int(str(n)[::-1])\nValueError: invalid literal for int() with base 10: '37-'", "passed": false}
{"task_id": 57, "requirement": "Functionality Extension", "completion": "from collections import Counter\n\ndef find_max_num(digits):\n    # Count the frequency of each digit\n    digit_counts = Counter(digits)\n    # Sort the digits by their frequency in descending order\n    sorted_digits = sorted(digit_counts.keys(), key=lambda x: (-digit_counts[x], x))\n    # Join the sorted digits to form the largest number\n    return int(''.join(map(str, sorted_digits)))\n\n# Example usage:\nprint(find_max_num([1, 2, 3]))  # Output: 321\nprint(find_max_num([5, 5, 5]))  # Output: 555\nprint(find_max_num([9, 8, 7, 6]))  # Output: 9876\nprint(find_max_num([3, 3, 3, 3, 5, 5, 5, 5]))  # Output: 5553\nprint(find_max_num([1, 1, 2, 2, 3, 3]))  # Output: 332211\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1kknjzbz.py\", line 15, in <module>\n    assert find_max_num([1, 1, 2, 2], 4) == 2211\nTypeError: find_max_num() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 58, "requirement": "Functionality Extension", "completion": "def opposite_signs(num_pairs):\n    return [((num1 > 0) != (num2 > 0)) for num1, num2 in num_pairs]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpm293p6r0.py\", line 3, in <module>\n    assert opposite_signs_list([(1, -2), (3, 2), (-10, -10)]) == [True, False, False]\nNameError: name 'opposite_signs_list' is not defined", "passed": false}
{"task_id": 59, "requirement": "Functionality Extension", "completion": "def is_octagonal(n):\n    if isinstance(n, list):\n        return [i * (4 * i - 3) // 2 for i in n]\n    else:\n        return n * (4 * n - 3) // 2\n\n# Example usage:\nprint(is_octagonal([1, 2, 3]))  # Output: [1, 14, 35]\nprint(is_octagonal(1))  # Output: 1\nprint(is_octagonal(2))  # Output: 14\nprint(is_octagonal(3))  # Output: 35\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpygdl57ya.py\", line 11, in <module>\n    assert is_octagonal([1, 2, 3]) == [1, 8, 21]\nAssertionError", "passed": false}
{"task_id": 60, "requirement": "Functionality Extension", "completion": "def max_len_sub(arr):\n    n = len(arr)\n    dp = [1] * n  # Initialize the dynamic programming array with 1s\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] >= arr[j] and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    return max(dp)\n\n# Example usage:\nprint(max_len_sub([1, 2, 3, 4]))  # Output: 4\nprint(max_len_sub([5, 1, 2, 3, 4]))  # Output: 4\nprint(max_len_sub([10, 9, 8, 7, 6]))  # Output: 1\nprint(max_len_sub([1, 3, 2, 4, 5]))  # Output: 3\nprint(max_len_sub([1, 2, 1, 2, 1]))  # Output: 3\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdh4qn3mv.py\", line 15, in <module>\n    assert max_len_sub([10, 7, 4, 1, -2], -3) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}

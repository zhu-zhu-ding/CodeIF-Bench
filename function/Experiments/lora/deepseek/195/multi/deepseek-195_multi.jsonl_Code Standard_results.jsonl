{"task_id": 11, "requirement": "Code Standard", "completion": "def remove_occ(s, char):\n    first_index = s.find(char)\n    last_index = s.rfind(char)\n\n    if first_index != -1 and last_index != -1:\n        s = s[:first_index] + s[first_index + 1:]\n        s = s[:last_index] + s[last_index + 1:]\n\n    return s\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgg2atxmt.py\", line 8, in <module>\n    assert remove_occ(\"hello\",\"l\") == \"heo\"\nAssertionError", "passed": false}
{"task_id": 12, "requirement": "Code Standard", "completion": "def sort_matrix(matrix):\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n    \n    # Sort the matrix based on the row sums\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    \n    return sorted_matrix\n", "result": "passed", "passed": true}
{"task_id": 14, "requirement": "Code Standard", "completion": "def find_volume(base_area, height_prism):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base_area (float): The area of the triangular base.\n    height_prism (float): The height of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    return base_area * height_prism\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqfbej321.py\", line 3, in <module>\n    assert find_volume(10,8,6) == 240\nTypeError: find_volume() takes 2 positional arguments but 3 were given", "passed": false}
{"task_id": 15, "requirement": "Code Standard", "completion": "def split_lowerstring(s):\n    return [word for word in s.split() if word[0].islower()]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmptz3rdqps.py\", line 3, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "requirement": "Code Standard", "completion": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Find sequences of lowercase letters joined with an underscore.\n\n    Args:\n        text (str): The input text to search for sequences of lowercase letters joined with an underscore.\n\n    Returns:\n        list: A list of all matches found in the input text.\n    \"\"\"\n    # The regular expression pattern r'\\b[a-z]+\\_[a-z]+\\b' matches sequences of\n    # one or more lowercase letters followed by an underscore, followed by\n    # one or more lowercase letters, where the sequence is a word boundary.\n    pattern = r'\\b[a-z]+\\_[a-z]+\\b'\n    matches = re.findall(pattern, text)\n    return matches\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppjr2dvhe.py\", line 9, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "requirement": "Code Standard", "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square given the length of one side.\n\n    Args:\n        side_length (float): The length of one side of the square.\n\n    Returns:\n        float: The perimeter of the square.\n    \"\"\"\n    return 4 * side_length\n", "result": "passed", "passed": true}
{"task_id": 18, "requirement": "Code Standard", "completion": "def remove_dirty_chars(string_to_clean, dirty_chars):\n    \"\"\"\n    Remove characters from the first string which are present in the second string.\n\n    Args:\n        string_to_clean (str): The string from which characters will be removed.\n        dirty_chars (str): The string containing characters to be removed.\n\n    Returns:\n        str: The cleaned string with specified characters removed.\n    \"\"\"\n    return ''.join(c for c in string_to_clean if c not in dirty_chars)\n", "result": "passed", "passed": true}
{"task_id": 19, "requirement": "Code Standard", "completion": "def test_duplicate(input_array):\n    \"\"\"\n    Check if the given array of integers contains any duplicate elements.\n\n    Args:\n        input_array (list): A list of integers.\n\n    Returns:\n        bool: True if there are duplicates, False otherwise.\n    \"\"\"\n    return len(input_array) != len(set(input_array))\n\n# Example usage:\nprint(test_duplicate([1, 2, 3, 4, 5]))  # Should print: False\nprint(test_duplicate([1, 2, 3, 4, 5, 5]))  # Should print: True\n", "result": "passed", "passed": true}
{"task_id": 20, "requirement": "Code Standard", "completion": "def is_woodall(n):\n    \"\"\"\n    Check if the given number is a Woodall number.\n\n    A Woodall number is a positive integer of the form n * 2^n - 1,\n    where n is a non-negative integer.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is a Woodall number, False otherwise.\n    \"\"\"\n    if n < 0:\n        return False\n    i = 0\n    while True:\n        woodall_num = i * 2**i - 1\n        if woodall_num == n:\n            return True\n        if woodall_num > n:\n            return False\n        i += 1\n", "result": "passed", "passed": true}
{"task_id": 21, "requirement": "Code Standard", "completion": "def multiples_of_num(n, m):\n    \"\"\"\n    Find the first m multiples of n.\n\n    Args:\n        n (int): The number to find multiples of.\n        m (int): The number of multiples to find.\n\n    Returns:\n        list: A list of the first m multiples of n.\n    \"\"\"\n    if not isinstance(n, int) or not isinstance(m, int) or m <= 0:\n        raise ValueError(\"Both n and m must be positive integers.\")\n\n    return [n * i for i in range(1, m + 1)]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdwdte_pl.py\", line 5, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "requirement": "Code Standard", "completion": "def find_first_duplicate(arr):\n    num_dict = {}\n    for num in arr:\n        if num in num_dict:\n            return num\n        num_dict[num] = 1\n    return None\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpabvi005n.py\", line 9, in <module>\n    assert find_first_duplicate([1, 2, 3, 4])==-1\nAssertionError", "passed": false}
{"task_id": 23, "requirement": "Code Standard", "completion": "def maximum_sum(list_of_lists):\n    \"\"\"\n    Find the maximum sum of elements of lists in a list of lists.\n\n    Args:\n        list_of_lists (list): A list containing other lists of integers.\n\n    Returns:\n        int: The maximum sum of elements in any of the inner lists.\n    \"\"\"\n    return max(sum(inner_list) for inner_list in list_of_lists)\n", "result": "passed", "passed": true}
{"task_id": 24, "requirement": "Code Standard", "completion": "def binary_to_decimal(binary_str):\n    \"\"\"\n    Convert a binary number represented as a string to its decimal equivalent.\n\n    Args:\n        binary_str (str): A string containing only '0' and '1'.\n\n    Returns:\n        int: The decimal equivalent of the binary number.\n    \"\"\"\n    binary_str = str(binary_str)\n    decimal = 0\n    for digit in binary_str:\n        decimal = decimal * 2 + int(digit)\n    return decimal\n", "result": "passed", "passed": true}
{"task_id": 25, "requirement": "Code Standard", "completion": "def find_product(arr):\n    # Create a dictionary to store the frequency of each element\n    element_freq = {}\n    for num in arr:\n        element_freq[num] = element_freq.get(num, 0) + 1\n\n    # Initialize the product to 1\n    product = 1\n\n    # Multiply the product by each non-repeated element\n    for num, count in element_freq.items():\n        if count == 1:\n            product *= num\n\n    return product\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxotc7mu2.py\", line 13, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "requirement": "Code Standard", "completion": "def check_k_elements(tuple_list, k):\n    \"\"\"\n    Check if all tuples in the given list have exactly k elements.\n\n    Args:\n        tuple_list (list): A list of tuples.\n        k (int): The number of elements each tuple should have.\n\n    Returns:\n        bool: True if all tuples have k elements, False otherwise.\n    \"\"\"\n    for t in tuple_list:\n        if len(t) != k:\n            return False\n    return True\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpf1xza5o0.py\", line 6, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "requirement": "Code Standard", "completion": "def remove_digits_from_list(string_list):\n    \"\"\"\n    Remove all digits from a list of strings.\n\n    Args:\n        string_list (list): A list of strings.\n\n    Returns:\n        list: A list of strings with all digits removed.\n    \"\"\"\n    return [''.join([char for char in s if not char.isdigit()]) for s in string_list]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpw13doept.py\", line 3, in <module>\n    assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\nNameError: name 'remove' is not defined", "passed": false}
{"task_id": 28, "requirement": "Code Standard", "completion": "import math\n\ndef binomial_coeff(n, k):\n    \"\"\"\n    Calculate the binomial coefficient \"C(n, k)\".\n\n    Args:\n        n (int): The total number of items.\n        k (int): The number of items to choose.\n\n    Returns:\n        int: The binomial coefficient \"C(n, k)\".\n    \"\"\"\n    if k < 0 or k > n:\n        raise ValueError(\"k must be between 0 and n (inclusive).\")\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n\n# Example usage:\n# print(binomial_coeff(5, 2))  # Output: 10\n", "result": "passed", "passed": true}
{"task_id": 29, "requirement": "Code Standard", "completion": "def get_odd_occurrence(input_list):\n    # Create a dictionary to count occurrences\n    count_dict = {}\n    for num in input_list:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Find the element with an odd count\n    for num, count in count_dict.items():\n        if count % 2 != 0:\n            return num\n\n    # If no element is found, return None\n    return None\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpf5_6tygm.py\", line 15, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "requirement": "Code Standard", "completion": "def count_substring_with_equal_ends(input_string):\n    count = 0\n    for i in range(len(input_string)):\n        for j in range(i + 1, len(input_string)):\n            if input_string[i] == input_string[j]:\n                count += 1\n    return count\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqf11oz1m.py\", line 8, in <module>\n    assert count_substring_with_equal_ends(\"abc\") == 3\nAssertionError", "passed": false}
{"task_id": 31, "requirement": "Code Standard", "completion": "import heapq\n\ndef func(nums, k):\n    # Create a dictionary to store the frequency of each number\n    freq = {}\n    for num in nums:\n        freq[num] = freq.get(num, 0) + 1\n\n    # Use a heap to find the k most frequent numbers\n    heap = []\n    for num, count in freq.items():\n        if len(heap) < k:\n            heapq.heappush(heap, (count, num))\n        else:\n            if count > heap[0][0]:\n                heapq.heapreplace(heap, (count, num))\n\n    # Return the k most frequent numbers\n    return [num for _, num in heap]\n\n# Example usage:\nnums = [1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5]\nk = 3\nprint(func(nums, k))  # Output: [5, 3, 4]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9s_qweb5.py\", line 21, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n  File \"/tmp/tmp9s_qweb5.py\", line 6, in func\n    freq[num] = freq.get(num, 0) + 1\nTypeError: unhashable type: 'list'", "passed": false}
{"task_id": 32, "requirement": "Code Standard", "completion": "def max_prime_factors(n):\n    \"\"\"\n    Find the largest prime factor of a given number.\n\n    Args:\n        n (int): The number to find the largest prime factor of.\n\n    Returns:\n        int: The largest prime factor of the given number.\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n", "result": "passed", "passed": true}
{"task_id": 33, "requirement": "Code Standard", "completion": "def decimal_to_binary(decimal_number):\n    \"\"\"\n    Convert a decimal number to a binary number as a string.\n\n    Args:\n        decimal_number (int): The decimal number to convert.\n\n    Returns:\n        str: The binary representation of the decimal number as a string.\n    \"\"\"\n    if not isinstance(decimal_number, int) or decimal_number < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n\n    if decimal_number == 0:\n        return \"0\"\n\n    binary_str = \"\"\n    while decimal_number > 0:\n        binary_str = str(decimal_number % 2) + binary_str\n        decimal_number //= 2\n\n    return binary_str\n\n# Test the function\nprint(decimal_to_binary(10))  # Output: 1010\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpx8qoau4f.py\", line 13, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "requirement": "Code Standard", "completion": "def find_missing(sorted_array):\n    left, right = 0, len(sorted_array) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if sorted_array[mid] != mid + 1 and (mid == 0 or sorted_array[mid - 1] == mid):\n            return mid + 1\n        elif sorted_array[mid] == mid + 1:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpm59tkmqn.py\", line 12, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "requirement": "Code Standard", "completion": "def find_rect_num(n):\n    \"\"\"\n    Calculate the n-th rectangular number.\n\n    A rectangular number is a number that can be represented as the product of two positive integers.\n\n    Args:\n        n (int): The position of the rectangular number to find.\n\n    Returns:\n        int: The n-th rectangular number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n\n    # Calculate the n-th rectangular number using the formula:\n    # rect_num(n) = n * (n + 1) * (n + 2) / 6\n    rect_num = n * (n + 1) * (n + 2) // 6\n    return rect_num\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpieqv6g_j.py\", line 9, in <module>\n    assert find_rect_num(5) == 30\nAssertionError", "passed": false}
{"task_id": 36, "requirement": "Code Standard", "completion": "def find_nth_digit(num1, num2, n):\n    \"\"\"\n    Find the nth digit in the proper fraction of two given numbers.\n\n    Args:\n        num1 (int): The first number.\n        num2 (int): The second number.\n        n (int): The position of the digit to find.\n\n    Returns:\n        str: The nth digit if it exists, otherwise None.\n    \"\"\"\n    # Convert the numbers to strings\n    num1_str = str(num1)\n    num2_str = str(num2)\n\n    # Concatenate the two numbers\n    fraction_str = num1_str + num2_str\n\n    # Check if n is a valid index\n    if n < len(fraction_str):\n        # Return the nth digit\n        return fraction_str[n]\n    else:\n        # Return None if n is out of range\n        return None\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6jr9ewp3.py\", line 14, in <module>\n    assert find_nth_digit(1,2,1) == 5\nAssertionError", "passed": false}
{"task_id": 37, "requirement": "Code Standard", "completion": "def sort_mixed_list(mixed_list):\n    \"\"\"\n    Sorts a list of mixed integers and strings.\n\n    Args:\n        mixed_list (list): A list containing integers and strings.\n\n    Returns:\n        list: A sorted list of integers followed by sorted list of strings.\n    \"\"\"\n    # Separate integers and strings\n    int_list = sorted([item for item in mixed_list if isinstance(item, int)])\n    str_list = sorted([item for item in mixed_list if isinstance(item, str)])\n\n    # Combine and return the sorted list\n    return int_list + str_list\n\n# Test the function\nprint(sort_mixed_list([3, 'a', 1, 'b', 2, 'c', 'd', 4]))\n", "result": "passed", "passed": true}
{"task_id": 38, "requirement": "Code Standard", "completion": "def div_even_odd(lst):\n    even = None\n    odd = None\n    for i in lst:\n        if i % 2 == 0 and even is None:\n            even = i\n        elif i % 2 != 0 and odd is None:\n            odd = i\n        if even is not None and odd is not None:\n            break\n    if even is None or odd is None:\n        return \"List does not contain both even and odd numbers\"\n    else:\n        return odd / even\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjys9t1ql.py\", line 15, in <module>\n    assert div_even_odd([1,3,5,7,4,1,6,8])==4\nAssertionError", "passed": false}
{"task_id": 39, "requirement": "Code Standard", "completion": "from collections import Counter\n\ndef rearrange_string(s):\n    # Count the frequency of each character\n    freq = Counter(s)\n    \n    # Check if the frequency of each character is even\n    for char, count in freq.items():\n        if count % 2 != 0:\n            return False\n    \n    return True\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpijupuiz3.py\", line 10, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "requirement": "Code Standard", "completion": "from collections import Counter\n\ndef freq_element(lst):\n    # Flatten the list of lists\n    flat_list = [item for sublist in lst for item in sublist]\n    # Use Counter to get the frequency of each element\n    freq = Counter(flat_list)\n    return freq\n", "result": "passed", "passed": true}
{"task_id": 41, "requirement": "Code Standard", "completion": "def filter_even_numbers(number_list):\n    \"\"\"\n    Filter even numbers from a list using a lambda function.\n\n    Args:\n        number_list (list): A list of integers.\n\n    Returns:\n        list: A list of even numbers from the input list.\n    \"\"\"\n    return list(filter(lambda x: x % 2 == 0, number_list))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphcucch1l.py\", line 3, in <module>\n    assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\nNameError: name 'filter_evennumbers' is not defined", "passed": false}
{"task_id": 42, "requirement": "Code Standard", "completion": "def find_sum(arr):\n    # Create a dictionary to keep track of the frequency of each element\n    freq = {}\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n\n    # Sum up the elements that appear more than once\n    total_sum = 0\n    for num, count in freq.items():\n        if count > 1:\n            total_sum += num * count\n\n    return total_sum\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpi8bkijid.py\", line 12, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Code Standard", "completion": "import re\n\ndef text_match(text):\n    pattern = r'[_][a-z]+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return \"No match found\"\n\n# Test the function\nprint(text_match(\"test_string\"))  # Output: _string\nprint(text_match(\"testString\"))  # Output: No match found\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7vfszcrc.py\", line 12, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 44, "requirement": "Code Standard", "completion": "def text_match_string(text, word):\n    \"\"\"\n    Check if a given text starts with a specific word.\n\n    Args:\n        text (str): The input text to be checked.\n        word (str): The word to match at the beginning of the text.\n\n    Returns:\n        bool: True if the text starts with the word, False otherwise.\n    \"\"\"\n    return text.startswith(word)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpudrd7hfc.py\", line 3, in <module>\n    assert text_match_string(\" python\")==('Not matched!')\nTypeError: text_match_string() missing 1 required positional argument: 'word'", "passed": false}
{"task_id": 45, "requirement": "Code Standard", "completion": "def get_gcd(arr):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    if not arr:\n        raise ValueError(\"Array must not be empty\")\n\n    result = arr[0]\n    for num in arr[1:]:\n        result = gcd(result, num)\n\n    return result\n", "result": "passed", "passed": true}
{"task_id": 46, "requirement": "Code Standard", "completion": "def test_distinct(number_list):\n    \"\"\"\n    Check if all numbers in the list are distinct.\n\n    Args:\n        number_list (list): A list of numbers.\n\n    Returns:\n        bool: True if all numbers are distinct, False otherwise.\n    \"\"\"\n    return len(number_list) == len(set(number_list))\n\n# Example usage:\nprint(test_distinct([1, 2, 3, 4, 5]))  # True, all numbers are distinct\nprint(test_distinct([1, 2, 2, 4, 5]))  # False, 2 is repeated\n", "result": "passed", "passed": true}
{"task_id": 48, "requirement": "Code Standard", "completion": "def odd_bit_set_number(n):\n    \"\"\"\n    Set all odd bits of a given number.\n\n    Args:\n        n (int): The number to set the odd bits of.\n\n    Returns:\n        int: The number with all odd bits set.\n    \"\"\"\n    # Convert the number to binary and reverse it\n    binary = bin(n)[2:][::-1]\n    # Iterate over the binary string\n    for i in range(len(binary)):\n        # If the bit is 0 and its position is odd, set it to 1\n        if i % 2 != 0 and binary[i] == '0':\n            binary = binary[:i] + '1' + binary[i+1:]\n    # Convert the binary string back to a number and return it\n    return int(binary[::-1], 2)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpiqi5hui_.py\", line 11, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "requirement": "Code Standard", "completion": "def specified_element(two_dim_list, position=0):\n    \"\"\"\n    Extract every first or specified element from a given two-dimensional list.\n\n    Args:\n        two_dim_list (list): A two-dimensional list.\n        position (int, optional): The position of the element to extract. Defaults to 0.\n\n    Returns:\n        list: A list containing the specified elements from each row.\n    \"\"\"\n    return [row[position] if len(row) > position else None for row in two_dim_list]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpit8a_aoi.py\", line 20, in <module>\n    check_code_style(specified_element)\n  File \"/tmp/tmpit8a_aoi.py\", line 16, in check_code_style\n    assert result.total_errors == 0, \"Code does not conform to PEP 8 standards.\"\nAssertionError: Code does not conform to PEP 8 standards.", "passed": false}
{"task_id": 51, "requirement": "Code Standard", "completion": "def check_equilateral(a, b, c):\n    \"\"\"\n    Check if a triangle is equilateral.\n\n    An equilateral triangle is a triangle in which all sides are equal.\n\n    Args:\n        a (float): The length of the first side.\n        b (float): The length of the second side.\n        c (float): The length of the third side.\n\n    Returns:\n        None: The function prints the result to the console.\n    \"\"\"\n    if a == b == c:\n        print(\"The triangle is equilateral.\")\n    else:\n        print(\"The triangle is not equilateral.\")\n\n# Test the function\ncheck_equilateral(3, 3, 3)  # This should print \"The triangle is equilateral.\"\ncheck_equilateral(3, 4, 5)  # This should print \"The triangle is not equilateral.\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpe3v7tch2.py\", line 9, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "requirement": "Code Standard", "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram given the base and height.\n\n    Args:\n        base (float): The base of the parallelogram.\n        height (float): The height of the parallelogram.\n\n    Returns:\n        float: The area of the parallelogram.\n    \"\"\"\n    return base * height\n", "result": "passed", "passed": true}
{"task_id": 53, "requirement": "Code Standard", "completion": "def check_equality(input_string):\n    \"\"\"\n    Check if the first and last characters of a given string are equal.\n\n    Args:\n        input_string (str): The string to check.\n\n    Returns:\n        bool: True if the first and last characters are equal, False otherwise.\n    \"\"\"\n    return input_string[0] == input_string[-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1fkclsb0.py\", line 3, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 54, "requirement": "Code Standard", "completion": "def counting_sort(input_array):\n    # Find the maximum element in the array\n    max_value = max(input_array)\n    \n    # Initialize the count array with all zeros\n    count = [0] * (max_value + 1)\n    \n    # Store the count of each element in the count array\n    for num in input_array:\n        count[num] += 1\n    \n    # Store the cumulative count\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    \n    # Build the output array\n    output = [0] * len(input_array)\n    for num in reversed(input_array):\n        output[count[num] - 1] = num\n        count[num] -= 1\n    \n    return output\n", "result": "passed", "passed": true}
{"task_id": 55, "requirement": "Code Standard", "completion": "def tn_gp(first_term, common_ratio, term_number):\n    \"\"\"\n    Calculate the nth term of a geometric series.\n\n    Parameters:\n    first_term (float): The first term of the geometric series.\n    common_ratio (float): The common ratio of the geometric series.\n    term_number (int): The term number to calculate.\n\n    Returns:\n    float: The nth term of the geometric series.\n    \"\"\"\n    return first_term * common_ratio ** (term_number - 1)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpobq8zk2b.py\", line 3, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "requirement": "Code Standard", "completion": "def check(number):\n    # Convert the number to a string, reverse it, and convert it back to an integer\n    reversed_number = int(str(number)[::-1])\n\n    # Check if the number is one less than twice its reverse\n    return number == 2 * reversed_number - 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpy399_12m.py\", line 23, in <module>\n    check_code_style(check)\n  File \"/tmp/tmpy399_12m.py\", line 19, in check_code_style\n    assert result.total_errors == 0, \"Code does not conform to PEP 8 standards.\"\nAssertionError: Code does not conform to PEP 8 standards.", "passed": false}
{"task_id": 57, "requirement": "Code Standard", "completion": "def find_max_num(digit_list):\n    \"\"\"\n    Find the largest number that can be formed with the given digits.\n\n    Args:\n        digit_list (list): A list of integers representing the digits.\n\n    Returns:\n        int: The largest number that can be formed.\n    \"\"\"\n    if not digit_list:\n        return None\n    sorted_digits = sorted(digit_list, reverse=True)\n    return int(''.join(map(str, sorted_digits)))\n\n# Example usage:\nprint(find_max_num([1, 2, 3]))  # Output: 321\nprint(find_max_num([5, 5, 5]))  # Output: 555\nprint(find_max_num([9, 8, 7, 6]))  # Output: 9876\nprint(find_max_num([]))  # Output: None\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpx5vz3ack.py\", line 11, in <module>\n    assert find_max_num([1,2,3],3) == 321\nTypeError: find_max_num() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 58, "requirement": "Code Standard", "completion": "def opposite_signs(num1, num2):\n    \"\"\"\n    Check if two integers have opposite signs.\n\n    Args:\n        num1 (int): The first integer.\n        num2 (int): The second integer.\n\n    Returns:\n        bool: True if the integers have opposite signs, False otherwise.\n    \"\"\"\n    return (num1 > 0) != (num2 > 0)\n", "result": "passed", "passed": true}
{"task_id": 59, "requirement": "Code Standard", "completion": "def is_octagonal(n):\n    \"\"\"\n    Calculate the nth octagonal number.\n\n    The nth octagonal number is given by the formula n(4n - 3) / 2.\n\n    Args:\n        n (int): The position of the octagonal number to calculate.\n\n    Returns:\n        int: The nth octagonal number.\n    \"\"\"\n    return n * (4 * n - 3) // 2\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmph5m8pyul.py\", line 3, in <module>\n    assert is_octagonal(5) == 65\nAssertionError", "passed": false}
{"task_id": 60, "requirement": "Code Standard", "completion": "def max_len_sub(arr):\n    \"\"\"\n    Find the maximum length of the subsequence with difference between\n    adjacent elements for the given array.\n    \"\"\"\n    n = len(arr)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] >= arr[j] and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    return max(dp)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvd96t3q2.py\", line 9, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}

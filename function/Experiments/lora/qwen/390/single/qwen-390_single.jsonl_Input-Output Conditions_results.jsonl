{"task_id": 14, "completion": "def find_volume(base_area, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base_area (float): The area of the triangular base.\n    height (float): The height of the triangular prism.\n    length (float): The length of the triangular prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    if not all(isinstance(x, (int, float)) for x in [base_area, height, length]):\n        raise ValueError(\"All inputs must be numeric (integers or floats).\")\n    \n    if any(x <= 0 for x in [base_area, height, length]):\n        raise ValueError(\"All inputs must be positive.\")\n    \n    volume = base_area * height * length\n    return volume\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_unsefq4.py\", line 8, in <module>\n    assert find_volume(10,8,6) == 240\nAssertionError", "passed": false}
{"task_id": 15, "completion": "import re\n\ndef split_lowerstring(text):\n    \"\"\"\n    Splits a string at lowercase letters and returns a list of segments.\n\n    :param text: The input string to be split.\n    :type text: str\n    :return: A list of strings, each representing a segment of the original string split at lowercase letters.\n    :rtype: list[str]\n    \"\"\"\n    return re.findall('[a-z][^a-z]*', text)\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    patterns = '^[a-z]+_[a-z]+$'\n    if re.search(patterns,  text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    if not isinstance(side_length, int) or side_length < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    return 4 * side_length\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(s1, s2):\n    # Check if both inputs are strings and contain only alphabetic characters\n    if not (isinstance(s1, str) and isinstance(s2, str)):\n        raise ValueError('Both inputs must be strings.')\n    if not (s1.isalpha() and s2.isalpha()):\n        raise ValueError('Input strings must only contain alphabetic characters.')\n    \n    # Convert the second string to a set for efficient lookup\n    s2_set = set(s2)\n    \n    # Build the result string by including characters from s1 that are not in s2\n    result = ''.join([char for char in s1 if char not in s2_set])\n    \n    return result\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 19, "completion": "def test_duplicate(arr):\n    if not isinstance(arr, list):\n        raise TypeError('Input must be a list.')\n    \n    seen = set()\n    for item in arr:\n        if item in seen:\n            return True\n        seen.add(item)\n    return False\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(n):\n    if n < 1:\n        return False\n    \n    # Start with the smallest possible Woodall number (3)\n    current = 3\n    k = 1\n    \n    while current <= n:\n        if current == n:\n            return True\n        k += 1\n        current = k * (2 ** k) - 1\n    \n    return False\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 23, "completion": "def maximum_sum(lists):\n    # Initialize the maximum sum to a very small number (negative infinity)\n    max_sum = float('-inf')\n    \n    # Iterate through each sublist in the list of lists\n    for sublist in lists:\n        # Calculate the sum of the current sublist\n        current_sum = sum(sublist)\n        \n        # Update the maximum sum if the current sum is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    # Return the maximum sum found\n    return max_sum\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 25, "completion": "def find_product(arr):\n    from collections import Counter\n    \n    # Count the occurrences of each element in the array\n    count_dict = Counter(arr)\n    \n    # Initialize the product to 1 (multiplicative identity)\n    product = 1\n    \n    # Iterate through the dictionary to multiply only those elements with a count of 1\n    for num, count in count_dict.items():\n        if count == 1:\n            product *= num\n    \n    return product\n\n# Example usage:\narr = [2, 3, 4, 2, 3, 5]\nprint(find_product(arr))  # Output will be 20 (since 4 and 5 are non-repeated)\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpx3dzfz5r.py\", line 15, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(test_list, K):\n    # Use a generator expression to check if all tuples have length K\n    res = all(len(ele) == K for ele in test_list)\n    return res\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpy2r1_qqr.py\", line 5, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 28, "completion": "def binomial_coeff(n, k):\n    if not (isinstance(n, int) and isinstance(k, int)):\n        raise ValueError('Both n and k must be integers.')\n    if n < 0 or k < 0:\n        raise ValueError('Both n and k must be non-negative integers.')\n    if k > n:\n        return 0\n    \n    # Create a 2D array to store intermediate results\n    C = [[0] * (k + 1) for _ in range(n + 1)]\n    \n    # Fill the array using the recursive relation of binomial coefficients\n    for i in range(n + 1):\n        for j in range(min(i, k) + 1):\n            if j == 0 or j == i:\n                C[i][j] = 1\n            else:\n                C[i][j] = C[i - 1][j - 1] + C[i - 1][j]\n    \n    return C[n][k]\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    def count_substrings_with_same_chars(text, length):\n        result = 0\n        for i in range(length):\n            for j in range(i + 1, length + 1):\n                if text[i] == text[j - 1]:\n                    result += 1\n        return result\n\n    n = len(s)\n    return count_substrings_with_same_chars(s, n) + n\n\n# Example usage:\n# print(count_substring_with_equal_ends(\"abcab\"))\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpsn4ype5l.py\", line 13, in <module>\n    assert count_substring_with_equal_ends(\"abc\") == 3\nAssertionError", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    if n <= 1:\n        raise ValueError('Input must be a positive integer greater than 1.')\n    \n    # Initialize the smallest prime factor\n    min_prime = 2\n    \n    # Divide n by 2 until it becomes odd\n    while n % min_prime == 0:\n        max_factor = min_prime\n        n //= min_prime\n    \n    # Check for odd factors from 3 onwards\n    factor = 3\n    while factor * factor <= n:\n        if n % factor == 0:\n            max_factor = factor\n            n //= factor\n        else:\n            factor += 2\n    \n    # If n is still greater than 2, then n itself is a prime factor\n    if n > 2:\n        max_factor = n\n    \n    return int(max_factor)\n\n# Example usage:\n# print(max_prime_factors(13195))  # Output: 29\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 35, "completion": "def find_rect_num(n):\n    if not isinstance(n, int) or n < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    return n * (n + 1)\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator):\n    if numerator >= denominator:\n        raise ValueError(\"Numerator must be less than the denominator for a proper fraction.\")\n    \n    # Initialize variables\n    nth_digit = 0\n    remainder = numerator\n    \n    # Iterate n times to find the nth digit\n    for _ in range(n):\n        remainder *= 10\n        digit = remainder // denominator\n        nth_digit = digit\n        remainder %= denominator\n    \n    return nth_digit\n\n# Example usage:\nnumerator = 2\ndenominator = 7\nnth_digit = find_nth_digit(numerator, denominator)\nprint(f\"The {n}th digit in the decimal representation of {numerator}/{denominator} is {nth_digit}\")\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgv7d94sp.py\", line 17, in <module>\n    nth_digit = find_nth_digit(numerator, denominator)\n  File \"/tmp/tmpgv7d94sp.py\", line 8, in find_nth_digit\n    for _ in range(n):\nNameError: name 'n' is not defined", "passed": false}
{"task_id": 38, "completion": "def div_even_odd(numbers):\n    # Find the first even number in the list\n    first_even = next((num for num in numbers if num % 2 == 0), None)\n    \n    # Find the first odd number in the list\n    first_odd = next((num for num in numbers if num % 2 != 0), None)\n    \n    # Check if both even and odd numbers are found\n    if first_even is not None and first_odd is not None:\n        return first_even / first_odd\n    else:\n        raise ValueError(\"The list must contain at least one even and one odd number.\")\n\n# Example usage:\nnumbers = [5, 7, 8, 10, 3]\nresult = div_even_odd(numbers)\nprint(result)  # Output: 1.6\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 39, "completion": "import heapq\nfrom collections import Counter\n\ndef rearrange_string(s):\n    # Count the frequency of each character in the string\n    char_count = Counter(s)\n    \n    # Create a max-heap based on character frequency\n    max_heap = [(-freq, char) for char, freq in char_count.items()]\n    heapq.heapify(max_heap)\n    \n    prev_char = None\n    prev_freq = 0\n    result = []\n    \n    while max_heap or prev_freq:\n        if prev_freq < 0:\n            heapq.heappush(max_heap, (prev_freq, prev_char))\n        \n        if not max_heap:\n            raise ValueError(\"Cannot rearrange the string\")\n        \n        freq, char = heapq.heappop(max_heap)\n        result.append(char)\n        prev_char = char\n        prev_freq = freq + 1\n    \n    return ''.join(result)\n\n# Example usage:\ns = \"aabbcc\"\nprint(rearrange_string(s))  # Output could be \"abcabc\" or any valid rearrangement\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1jgg499w.py\", line 25, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 42, "completion": "def find_sum(arr):\n    from collections import Counter\n    \n    # Count the occurrences of each element in the array\n    count = Counter(arr)\n    \n    # Filter out elements that appear more than once\n    repeated_elements = [key for key, value in count.items() if value > 1]\n    \n    # If there are no repeated elements, return 0\n    if not repeated_elements:\n        return 0\n    \n    # Calculate the sum of the repeated elements\n    result = sum(repeated_elements)\n    \n    return result\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7oaxj89m.py\", line 13, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    patterns = '^[a-z]+_[a-z]+$'\n    if re.search(patterns,  text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 46, "completion": "def test_distinct(numbers):\n    if len(numbers) == len(set(numbers)):\n        return True\n    else:\n        return False\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 48, "completion": "def odd_bit_set_number(n):\n    # Initialize a mask with all odd bits set to 1\n    mask = 0x55555555  # This mask has all odd bits (1-indexed) set to 1\n    \n    # Use bitwise OR to set all odd bits of n to 1\n    result = n | mask\n    \n    return result\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpg7rmukuz.py\", line 7, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(list1, index):\n    # Check if the input list is empty\n    if not list1:\n        return []\n    \n    # Extract the specified element from each sublist\n    result = [sublist[index] for sublist in list1]\n    return result\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 50, "completion": "def min_length_list(lists):\n    # Find the list with the minimum length using a lambda function\n    min_list = min(lists, key=lambda x: len(x))\n    # Return a tuple containing the length of the shortest list and the list itself\n    return (len(min_list), min_list)\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float or int): The length of the base of the parallelogram.\n    height (float or int): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram.\n\n    Raises:\n    ValueError: If either the base or height is not a positive number.\n    \"\"\"\n    if not (isinstance(base, (int, float)) and isinstance(height, (int, float))):\n        raise TypeError('Both base and height must be numbers.')\n    \n    if base <= 0 or height <= 0:\n        raise ValueError('Both base and height must be positive numbers.')\n    \n    area = base * height\n    return area\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphhbhb8w3.py\", line 12, in <module>\n    assert parallelogram_area(0, 10) == 0\n  File \"/tmp/tmphhbhb8w3.py\", line 5, in parallelogram_area\n    raise ValueError('Both base and height must be positive numbers.')\nValueError: Both base and height must be positive numbers.", "passed": false}
{"task_id": 53, "completion": "def check_equality(s):\n    if not isinstance(s, str):\n        raise ValueError('Input must be a string.')\n    if len(s) == 0:\n        raise ValueError('String cannot be empty.')\n    if s[0] == s[-1]:\n        return 'Equal'\n    else:\n        return 'Not Equal'\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 54, "completion": "def counting_sort(arr):\n    if not all(isinstance(x, int) and x >= 0 for x in arr):\n        raise ValueError('All elements in the array must be non-negative integers.')\n    \n    if not arr:\n        return []\n    \n    # Find the maximum value in the array to determine the size of the count array\n    max_value = max(arr)\n    \n    # Initialize the count array with zeros\n    count = [0] * (max_value + 1)\n    \n    # Populate the count array\n    for num in arr:\n        count[num] += 1\n    \n    # Reconstruct the sorted array\n    sorted_index = 0\n    for i in range(len(count)):\n        while count[i] > 0:\n            arr[sorted_index] = i\n            sorted_index += 1\n            count[i] -= 1\n    \n    return arr\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 57, "completion": "def find_max_num(digits, n):\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n    \n    # Initialize the result as an empty string\n    result = []\n    \n    # Iterate through the sorted digits and construct the result\n    for i in range(n):\n        result.append(str(digits[i]))\n    \n    # Join the list into a single string and convert it to an integer\n    max_number = int(''.join(result))\n    \n    return max_number\n\n# Example usage:\ndigits = [3, 1, 4, 1, 5, 9]\nn = len(digits)\nprint(find_max_num(digits, n))  # Output: 954311\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 58, "completion": "def opposite_signs(x, y):\n    if not (isinstance(x, int) and isinstance(y, int)):\n        raise ValueError('Both inputs must be integers.')\n    return (x ^ y) < 0\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 60, "completion": "def max_len_sub(arr, n):\n    if n == 0:\n        return 0\n    \n    # Initialize the dp array where dp[i] will store the length of the longest subsequence ending at index i\n    dp = [1] * n\n    \n    # Iterate through the array to fill the dp array\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    # The result is the maximum value in the dp array\n    return max(dp)\n\n# Example usage:\narr = [1, 9, 3, 10, 4, 20, 2]\nn = len(arr)\nprint(max_len_sub(arr, n))  # Output: 5\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp77x92ld7.py\", line 18, in <module>\n    assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4\nAssertionError", "passed": false}

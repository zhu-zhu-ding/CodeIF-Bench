{"task_id": 11, "completion": "def remove_occ(s, ch, all=False):\n    if not all:\n        # Remove the first occurrence\n        idx = s.find(ch)\n        if idx != -1:\n            return s[:idx] + s[idx+1:]\n        else:\n            return s\n    \n    # Remove all occurrences\n    result = []\n    removed = False\n    for char in s:\n        if char == ch:\n            if not removed:\n                removed = True\n                continue\n        result.append(char)\n    \n    return ''.join(result)\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpchiz21wd.py\", line 19, in <module>\n    assert remove_occ('banana', 'a', all=True) == 'bnn'\nAssertionError", "passed": false}
{"task_id": 12, "completion": "def sort_matrix(matrix):\n    # Pad each row with zeros to make all rows the same length\n    max_length = max(len(row) for row in matrix)\n    padded_matrix = [row + [0] * (max_length - len(row)) for row in matrix]\n    \n    # Sort the matrix based on the sum of each row\n    sorted_matrix = sorted(padded_matrix, key=sum)\n    \n    return sorted_matrix\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpv0otpfmj.py\", line 8, in <module>\n    assert sort_matrix([[1, 2, 3], [4, 5], [6]]) == [[6], [4, 5], [1, 2, 3]]\nAssertionError", "passed": false}
{"task_id": 13, "completion": "from collections import Counter\n\ndef count_common(word_dict, top_n=10):\n    \"\"\"\n    Count the most common words in a dictionary.\n\n    Parameters:\n    word_dict (dict): A dictionary where keys are words and values are their frequencies.\n    top_n (int, optional): The number of top frequent words to return. Defaults to 10.\n\n    Returns:\n    list: A list of tuples containing the top_n most common words and their frequencies.\n    \"\"\"\n    # Flatten the dictionary into a list of words with their frequencies\n    all_words = [word for word, freq in word_dict.items() for _ in range(freq)]\n    \n    # Use Counter to count the frequency of each word\n    word_counter = Counter(all_words)\n    \n    # Get the top_n most common words\n    top_frequent_words = word_counter.most_common(top_n)\n    \n    return top_frequent_words\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp88p55nsb.py\", line 10, in <module>\n    assert count_common(['apple', 'banana', 'apple', 'orange', 'banana', 'banana'], 2) == [('banana', 3), ('apple', 2)]\n  File \"/tmp/tmp88p55nsb.py\", line 4, in count_common\n    all_words = [word for word, freq in word_dict.items() for _ in range(freq)]\nAttributeError: 'list' object has no attribute 'items'", "passed": false}
{"task_id": 14, "completion": "def find_volume(*args):\n    if len(args) == 1:\n        base_area, height, length = args[0]\n    elif len(args) == 3:\n        base_area, height, length = args\n    else:\n        raise ValueError(\"Input must be either one iterable with three elements or three separate arguments.\")\n    \n    return (base_area * height * length) / 2\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 15, "completion": "import re\n\ndef split_lowerstring(text, include_upper=False):\n    segments = re.findall('[a-z][^a-z]*', text)\n    if include_upper:\n        result = []\n        for segment in segments:\n            upper_part = segment[0].upper()\n            lower_part = segment[1:]\n            result.append(upper_part + lower_part)\n        return result\n    else:\n        return segments\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0y729oaf.py\", line 13, in <module>\n    assert split_lowerstring('AbCd', include_lower=True) == ['Ab', 'Cd']\nTypeError: split_lowerstring() got an unexpected keyword argument 'include_lower'", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    patterns = r'^[a-z]+_[a-z]+$'\n    if re.search(patterns,  text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdbpuokt6.py\", line 8, in <module>\n    assert text_lowercase_underscore('abc_def_ghi') == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side):\n    side = round(side)\n    return 4 * side\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpv09shx4s.py\", line 4, in <module>\n    assert square_perimeter(4.5) == 20\nAssertionError", "passed": false}
{"task_id": 18, "completion": "def remove_dirty_chars(str1, str2):\n    # Convert both strings to lowercase for case-insensitivity\n    str1 = str1.lower()\n    str2 = str2.lower()\n    \n    # Create a set of characters to remove for quick lookup\n    chars_to_remove = set(str2)\n    \n    # Use list comprehension to filter out unwanted characters\n    result = ''.join([char for char in str1 if char not in chars_to_remove])\n    \n    return result\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpz9occvo2.py\", line 10, in <module>\n    assert remove_dirty_chars('HelloWorld', 'hELLO') == 'World', 'Function should handle case-insensitive character removal.'\nAssertionError: Function should handle case-insensitive character removal.", "passed": false}
{"task_id": 19, "completion": "def test_duplicate(arr):\n    seen = set()\n    duplicates = []\n    \n    for num in arr:\n        if num in seen:\n            if num not in duplicates:\n                duplicates.append(num)\n        else:\n            seen.add(num)\n    \n    return duplicates\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(n):\n    if isinstance(n, int) and n > 0:\n        # Generate all Woodall numbers up to n\n        woodall_numbers = []\n        i = 1\n        while True:\n            woodall_number = i * (2 ** i) - 1\n            if woodall_number > n:\n                break\n            woodall_numbers.append(woodall_number)\n            i += 1\n        return woodall_numbers\n    else:\n        raise ValueError('Input must be a positive integer.')\n\n# Example usage:\n# print(is_woodall(10))  # Output: [1]\n# print(is_woodall(31))  # Output: [1, 7, 23]\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpe2112gxk.py\", line 19, in <module>\n    assert is_woodall(15) == [1, 7, 15]\nAssertionError", "passed": false}
{"task_id": 21, "completion": "def multiples_of_num(n, m):\n    if not isinstance(m, int) or m <= 0:\n        raise ValueError('The second argument (m) must be a positive integer.')\n    \n    return [i * n for i in range(1, m + 1)]\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkhm1v132.py\", line 5, in <module>\n    assert multiples_of_num(3, 2.5) == [2.5, 5.0, 7.5]\n  File \"/tmp/tmpkhm1v132.py\", line 3, in multiples_of_num\n    raise ValueError('The second argument (m) must be a positive integer.')\nValueError: The second argument (m) must be a positive integer.", "passed": false}
{"task_id": 22, "completion": "def find_first_duplicate(arr):\n    seen = set()\n    duplicates = []\n    \n    for num in arr:\n        if num in seen:\n            if num not in duplicates:\n                duplicates.append(num)\n        else:\n            seen.add(num)\n    \n    return duplicates\n\n# Example usage:\narr = [1, 2, 3, 2, 4, 5, 6, 7, 8, 9, 2]\nprint(find_first_duplicate(arr))  # Output: [2]\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 23, "completion": "def maximum_sum(lists):\n    max_sum = float('-inf')  # Initialize with negative infinity to handle negative sums\n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 24, "completion": "def binary_to_decimal(binary):\n    \"\"\"\n    Convert a binary number (as a string) to its decimal equivalent.\n    \n    Parameters:\n    binary (str): A string representing the binary number.\n    \n    Returns:\n    int: The decimal equivalent of the binary number.\n    \"\"\"\n    # Remove any leading zeros from the binary string\n    binary = binary.lstrip('0')\n    \n    # Initialize variables\n    decimal_value = 0\n    length = len(binary)\n    \n    # Iterate over each character in the binary string\n    for i in range(length):\n        if binary[i] == '1':\n            decimal_value += 2 ** (length - i - 1)\n    \n    return decimal_value\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 25, "completion": "def find_product(arr):\n    # Create a dictionary to count occurrences of each element\n    element_count = {}\n    for num in arr:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n    \n    # Calculate the product of non-repeated elements\n    product = 1\n    has_negative = False\n    for num, count in element_count.items():\n        if count == 1:\n            product *= num\n            if num < 0:\n                has_negative = True\n    \n    # If there's an odd number of negative numbers, the result will be negative\n    if (has_negative and len([num for num in element_count if num < 0]) % 2 != 0) or not has_negative:\n        return abs(product)\n    else:\n        return -abs(product)\n\n# Example usage:\narr = [1, 2, 3, 4, 5, -6, -7, -8, -9]\nprint(find_product(arr))  # Output: 362880\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpewk81_yk.py\", line 25, in <module>\n    assert find_product([-1, -2, 3, 3], 4) == 2\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(test_list, K):\n    # Initialize a counter for tuples with exactly k elements\n    count = 0\n    \n    # Iterate through each tuple in the list\n    for sub in test_list:\n        # Check if the tuple has exactly k elements\n        if len(sub) == K:\n            count += 1\n    \n    # Return the count of tuples with exactly k elements\n    return count\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 27, "completion": "import re\n\ndef remove(strings, chars_to_remove=''):\n    pattern = f'[0-9]{chars_to_remove}'\n    return [re.sub(pattern, '', s) for s in strings]\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmptqnpin07.py\", line 5, in <module>\n    assert remove_extended(['abcd123', '456defg'], 'abcdef') == ['d', 'g']\nNameError: name 'remove_extended' is not defined", "passed": false}
{"task_id": 28, "completion": "def binomial_coeff(n, k):\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    \n    # Initialize a memoization table\n    C = [[0] * (k + 1) for _ in range(n + 1)]\n    \n    # Fill the memoization table iteratively\n    for i in range(n + 1):\n        for j in range(min(i, k) + 1):\n            if j == 0 or j == i:\n                C[i][j] = 1\n            else:\n                C[i][j] = C[i - 1][j - 1] + C[i - 1][j]\n    \n    return C[n][k]\n\n# Example usage:\nn = 20\nk = 5\nprint(f\"Binomial Coefficient C({n}, {k}) = {binomial_coeff(n, k)}\")\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 29, "completion": "def get_odd_occurrence(arr: list[int], arr_size: int) -> list[int]:\n    \"\"\"\n    Find all elements in the array that occur an odd number of times.\n\n    Parameters:\n    arr (list[int]): The input list of integers.\n    arr_size (int): The size of the input list.\n\n    Returns:\n    list[int]: A list of elements that occur an odd number of times.\n    \"\"\"\n    result = []\n    for i in range(0, arr_size):\n        count = 0\n        for j in range(0, arr_size):\n            if arr[i] == arr[j]:\n                count += 1\n        if count % 2 != 0:\n            result.append(arr[i])\n    # Remove duplicates from the result list\n    result = list(dict.fromkeys(result))\n    return result\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmparzoyc46.py\", line 13, in <module>\n    assert get_odd_occurrence([1, 2, 3, 1, 2, 3, 1, 3]) == [1, 3]\nTypeError: get_odd_occurrence() missing 1 required positional argument: 'arr_size'", "passed": false}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    result = 0\n    n = len(s)\n    \n    # Iterate over each possible length of substring\n    for i in range(n):\n        # Iterate over each possible starting index\n        for j in range(i + 1, n + 1):\n            # Extract the substring\n            sub_str = s[i:j]\n            # Check if the first and last alphabetic characters are the same\n            if (sub_str[0].isalpha() and sub_str[-1].isalpha()) and (sub_str[0] == sub_str[-1]):\n                result += 1\n                \n    return result\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 31, "completion": "import heapq\n\ndef func(nums1, nums2, nums3, k):\n    if k == 0:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        heapq.heappush(heap, (nums1[i], 1))\n    for j in range(len(nums2)):\n        heapq.heappush(heap, (nums2[j], 2))\n    for l in range(len(nums3)):\n        heapq.heappush(heap, (nums3[l], 3))\n    res = []\n    while heap and len(res) < k:\n        element, index = heapq.heappop(heap)\n        if not res or res[-1][0] != element:\n            res.append([element, 1])\n        else:\n            count = res.pop()[1]\n            res.append([element, count + 1])\n    return res[:k]\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpcyq76pzr.py\", line 21, in <module>\n    assert func([[1, 2, 3], [4, 5, 6]], 0) == []\nTypeError: func() missing 2 required positional arguments: 'nums3' and 'k'", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n, return_all=False):\n    prime_factors = []\n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        prime_factors.append(2)\n        n //= 2\n    \n    # n must be odd at this point, so we can skip one element (Note i = i + 2)\n    for i in range(3, int(n**0.5) + 1, 2):\n        # While i divides n, append i and divide n\n        while n % i == 0:\n            prime_factors.append(i)\n            n //= i\n    \n    # This condition is to handle the case when n is a prime number greater than 2\n    if n > 2:\n        prime_factors.append(n)\n    \n    if return_all:\n        return prime_factors\n    else:\n        return prime_factors[-1] if prime_factors else None\n\n# Example usage:\n# To get the largest prime factor:\nlargest_factor = max_prime_factors(13195)\n\n# To get all prime factors:\nall_factors = max_prime_factors(13195, return_all=True)\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(decimal):\n    if isinstance(decimal, list):\n        return [bin(num)[2:] for num in decimal]\n    else:\n        return bin(decimal)[2:]\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 34, "completion": "def find_missing(arr, start=0):\n    if not arr:\n        return []\n    \n    def binary_search_missing(start, end):\n        if start > end:\n            return [start]\n        mid = (start + end) // 2\n        if arr[mid] == mid + start:\n            return binary_search_missing(mid + 1, end)\n        else:\n            left = binary_search_missing(start, mid - 1)\n            right = binary_search_missing(mid + 1, end)\n            return left + [mid + start] + right\n    \n    return binary_search_missing(start, len(arr) - 1)\n\n# Example usage:\nsorted_array = [0, 1, 3, 4, 6, 7, 9]\nmissing_numbers = find_missing(sorted_array)\nprint(missing_numbers)  # Output: [2, 5, 8]\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpc6f6oxag.py\", line 19, in <module>\n    assert find_missing([1,3,6], 3) == [2, 4, 5]\nAssertionError", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    if isinstance(n, int):\n        return n * (n + 1)\n    elif isinstance(n, list):\n        return [i * (i + 1) for i in n]\n    else:\n        raise ValueError(\"Input must be an integer or a list of integers.\")\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator):\n    if numerator == 0:\n        return 0\n    \n    # Ensure we work with absolute values\n    numerator = abs(numerator)\n    denominator = abs(denominator)\n    \n    remainder = numerator % denominator\n    count = 0\n    \n    while True:\n        remainder *= 10\n        digit = remainder // denominator\n        remainder %= denominator\n        count += 1\n        \n        if count == n:\n            return digit\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdj40ol46.py\", line 16, in <module>\n    assert find_nth_digit(-1, 2, 1) == 5\nTypeError: find_nth_digit() takes 2 positional arguments but 3 were given", "passed": false}
{"task_id": 37, "completion": "def sort_mixed_list(mixed_list, reverse_strings=False):\n    # Separate integers and strings into two lists\n    int_part = [i for i in mixed_list if isinstance(i, int)]\n    str_part = [i for i in mixed_list if isinstance(i, str)]\n    \n    # Sort the integer part\n    int_part.sort()\n    \n    # Sort the string part based on the reverse_strings flag\n    if reverse_strings:\n        str_part.sort(reverse=True)\n    else:\n        str_part.sort()\n    \n    # Combine the sorted parts back into one list\n    return int_part + str_part\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 38, "completion": "def div_even_odd(list1):\n    # Filter out non-integer values from the list\n    filtered_list = [num for num in list1 if isinstance(num, int)]\n    \n    # Find the first even and odd number in the list\n    first_even = next((num for num in filtered_list if num % 2 == 0), None)\n    first_odd = next((num for num in filtered_list if num % 2 != 0), None)\n    \n    # Perform division if both even and odd numbers are found\n    if first_even is not None and first_odd is not None:\n        return first_even / first_odd\n    else:\n        raise ValueError('The list must contain at least one even and one odd integer.')\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 39, "completion": "import heapq\nfrom collections import defaultdict\n\ndef rearrange_string(s):\n    # Step 1: Count character frequencies\n    char_count = defaultdict(int)\n    for char in s:\n        char_count[char] += 1\n    \n    # Step 2: Check if rearrangement is feasible\n    max_heap = [(-count, char) for char, count in char_count.items()]\n    heapq.heapify(max_heap)\n    \n    if -max_heap[0][0] > (len(s) + 1) // 2:\n        return []\n    \n    # Step 3: Generate all valid rearrangements using backtracking\n    def backtrack(path, heap, last_char, last_count):\n        if not heap and path == len(s):\n            return [path]\n        \n        results = []\n        for i in range(len(heap)):\n            current_count, current_char = heap[i]\n            if current_char != last_char or (current_char == last_char and current_count < -last_count):\n                heap[i] = (-current_count - 1, current_char)\n                results.extend(backtrack(path + current_char, heap[:i] + heap[i+1:], current_char, current_count))\n                heap[i] = (-current_count, current_char)\n        \n        return results\n    \n    initial_heap = [(count, char) for char, count in char_count.items()]\n    return backtrack('', initial_heap, None, 0)\n\n# Example usage:\ns = \"aabbc\"\nresults = rearrange_string(s)\nfor result in results:\n    print(result)\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpr5f8dqnb.py\", line 32, in <module>\n    assert set(rearange_string('aabb')) == {'abab', 'baba'}\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "completion": "from collections import Counter\n\ndef freq_element(nested_list):\n    def flatten(lst):\n        for item in lst:\n            if isinstance(item, list):\n                yield from flatten(item)\n            elif isinstance(item, int):\n                yield item\n\n    flattened_list = list(flatten(nested_list))\n    return dict(Counter(flattened_list))\n\n# Example usage:\nnested_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3]]\nprint(freq_element(nested_list))\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 41, "completion": "def filter_evennumbers(numbers):\n    # Filter out non-integer values\n    filtered_numbers = [num for num in numbers if isinstance(num, int)]\n    \n    # Use lambda to filter even numbers\n    even_numbers = list(filter(lambda x: x % 2 == 0, filtered_numbers))\n    \n    return even_numbers\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 42, "completion": "def find_sum(arr):\n    # Dictionary to store the frequency of each element\n    freq = {}\n    \n    # Count the frequency of each element in the array\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Sum the elements that appear more than once\n    result = 0\n    for num, count in freq.items():\n        if count > 1:\n            result += num * count\n    \n    return result\n\n# Example usage:\narr = [1, 2, 3, 2, 4, 5, 5, -1, -1]\nprint(find_sum(arr))  # Output: 10 (2 + 2 + 5 + 5)\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp90pzhups.py\", line 19, in <module>\n    assert find_sum([-1, -2, -3, -1, -1], 5) == -2\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    patterns = r'\\b[a-z]+_[a-z]+\\b'\n    if re.search(patterns,  text):\n        return ('Found a match!')\n    else:\n        return ('Not matched!')\n\n# Extended version to handle sequences of lowercase letters joined by multiple underscores\ndef text_match_extended(text):\n    patterns = r'\\b[a-z]+(_[a-z]+)*\\b'\n    if re.search(patterns, text):\n        return ('Found a match!')\n    else:\n        return ('Not matched!')\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjagkxdql.py\", line 15, in <module>\n    assert text_match('abc_def_ghi') == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 45, "completion": "import math\n\ndef get_gcd(arr):\n    # Filter out zero values from the list\n    arr = [x for x in arr if x != 0]\n    \n    # If the filtered list is empty, return None or raise an exception as needed\n    if not arr:\n        return None  # or raise ValueError(\"The list must contain at least one non-zero element.\")\n    \n    # Initialize gcd with the first element\n    current_gcd = arr[0]\n    \n    # Iterate through the rest of the elements to compute the GCD\n    for num in arr[1:]:\n        current_gcd = math.gcd(current_gcd, num)\n    \n    return current_gcd\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 46, "completion": "def test_distinct(numbers):\n    if not isinstance(numbers, list):\n        raise ValueError('Input must be a list.')\n    \n    if len(numbers) != len(set(numbers)):\n        return False\n    else:\n        return True\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 47, "completion": "def compute_last_digit(a, b):\n    if a == 0 or b == 0:\n        return 1\n    \n    # If a > b, the result is 0 because there will be at least one factor of 10 in the range (a+1) to b\n    if a > b:\n        return 0\n    \n    # Initialize the result variable\n    res = 1\n    \n    # Compute the product of numbers from (a+1) to b\n    for i in range(a + 1, b + 1):\n        res = (res * (i % 10)) % 10\n    \n    # Return the last digit of the result\n    return res % 10\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 48, "completion": "def odd_bit_set_number(n):\n    if n < 0:\n        n = abs(n)\n    \n    mask = 0x55555555  # This mask has all odd bits set (e.g., 0b10101010101010101010101010101010)\n    return n | mask\n\n# Example usage:\nprint(odd_bit_set_number(4))   # Output: 5\nprint(odd_bit_set_number(-4))  # Output: 5\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpb7xtp5wl.py\", line 9, in <module>\n    assert odd_bit_set_number(-10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(list1, item=0):\n    if isinstance(item, int) and item < 0:\n        # Convert negative index to positive index\n        item += len(list1[0])\n    return [row[item] for row in list1]\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 51, "completion": "def check_triangle_type(a, b, c):\n    if a == b == c:\n        return 'equilateral'\n    elif a == b or b == c or a == c:\n        return 'isosceles'\n    else:\n        return 'scalene'\n\n# Example usage:\nresult = check_triangle_type(3, 3, 3)\nprint(result)  # Output: equilateral\n\nresult = check_triangle_type(3, 4, 5)\nprint(result)  # Output: scalene\n\nresult = check_triangle_type(3, 3, 5)\nprint(result)  # Output: isosceles\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpe1grbj2q.py\", line 15, in <module>\n    assert check_equilateral(5, 5, 3) == 'isosceles'\nNameError: name 'check_equilateral' is not defined", "passed": false}
{"task_id": 52, "completion": "def parallelogram_area(dimensions):\n    if not isinstance(dimensions, list) or not all(isinstance(d, (tuple, list)) and len(d) == 2 for d in dimensions):\n        raise ValueError(\"Input must be a list of tuples/lists with two elements each.\")\n    \n    areas = []\n    for dim in dimensions:\n        base, height = dim\n        if not (isinstance(base, (int, float)) and isinstance(height, (int, float))):\n            raise ValueError(\"Each tuple/list must contain two numeric values.\")\n        area = base * height\n        areas.append(area)\n    \n    return areas\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6f5zo5bv.py\", line 12, in <module>\n    assert parallelogram_area_list([(10, 20), (15, 20), (8, 9)]) == [200, 300, 72]\nNameError: name 'parallelogram_area_list' is not defined", "passed": false}
{"task_id": 53, "completion": "def check_equality(s):\n    if s:\n        return s[0].lower() == s[-1].lower()\n    else:\n        return False\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppq5nqg3u.py\", line 6, in <module>\n    assert check_equality('Abca') == 'Equal'\nAssertionError", "passed": false}
{"task_id": 54, "completion": "def counting_sort(arr):\n    if not arr:\n        return []\n\n    # Find the maximum and minimum values in the array\n    max_val = max(arr)\n    min_val = min(arr)\n\n    # Initialize the count array with zeros\n    count_range = max_val - min_val + 1\n    count_arr = [0] * count_range\n\n    # Fill the count array\n    for num in arr:\n        count_arr[num - min_val] += 1\n\n    # Build the sorted array\n    sorted_index = 0\n    for i in range(count_range):\n        while count_arr[i] > 0:\n            arr[sorted_index] = i + min_val\n            sorted_index += 1\n            count_arr[i] -= 1\n\n    return arr\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 55, "completion": "def tn_gp(a, r, n):\n    \"\"\"\n    Calculate the t-nth term of a geometric series.\n\n    Parameters:\n    a (float or int): The first term of the geometric series.\n    r (float or int): The common ratio of the geometric series.\n    n (int): The term number to find.\n\n    Returns:\n    float: The t-nth term of the geometric series.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"The term number 'n' must be a positive integer.\")\n    \n    return a * (r ** (n - 1))\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 56, "completion": "def reverse_number(n):\n    if n < 0:\n        return -int(str(-n)[::-1])\n    else:\n        return int(str(n)[::-1])\n\ndef check(n):\n    if n == 0:\n        return False\n    rev = reverse_number(n)\n    return (2 * rev) == (n + 1)\n\n# Example usage:\nprint(check(18))  # True, because 2 * 9 = 18 + 1\nprint(check(-34)) # True, because 2 * (-43) = -66 = -34 + 1\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpww9fesgp.py\", line 15, in <module>\n    assert check(-37) == True\nAssertionError", "passed": false}
{"task_id": 57, "completion": "def find_max_num(digits):\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n    \n    # Convert each digit to a string\n    digits = [str(digit) for digit in digits]\n    \n    # Join the sorted digits into a single string\n    max_num_str = ''.join(digits)\n    \n    # Convert the string back to an integer\n    max_num = int(max_num_str)\n    \n    return max_num\n\n# Example usage:\ndigits = [3, 1, 4, 2, 5, 9, 0, 7, 6, 8]\nprint(find_max_num(digits))  # Output: 9876543210\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphd7rbd2d.py\", line 14, in <module>\n    assert find_max_num([1, 1, 2, 2], 4) == 2211\nTypeError: find_max_num() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 58, "completion": "def opposite_signs(pairs):\n    \"\"\"\n    Check if each pair of integers in the list has opposite signs.\n    \n    Args:\n        pairs (list of tuples): A list where each element is a tuple of two integers.\n        \n    Returns:\n        list: A list of boolean values indicating whether each pair has opposite signs.\n    \"\"\"\n    results = []\n    for x, y in pairs:\n        results.append((x ^ y) < 0)\n    return results\n\n# Example usage:\npairs = [(1, -2), (-3, 4), (5, 6)]\nprint(opposite_signs(pairs))  # Output: [True, True, False]\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpe5etgaiz.py\", line 9, in <module>\n    assert opposite_signs_list([(1, -2), (3, 2), (-10, -10)]) == [True, False, False]\nNameError: name 'opposite_signs_list' is not defined", "passed": false}
{"task_id": 59, "completion": "def is_octagonal(n):\n    if isinstance(n, list):\n        return [octagonal_number(x) for x in n]\n    else:\n        return octagonal_number(n)\n\ndef octagonal_number(n):\n    if n < 1:\n        raise ValueError('n must be a positive integer')\n    return n * (3 * n - 2)\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 60, "completion": "def max_len_sub(arr):\n    if not arr:\n        return 0\n    \n    n = len(arr)\n    dp = [1] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)\n\n# Example usage:\narr = [1, 2, 3, 4, 5]\nprint(max_len_sub(arr))  # Output: 5\n\narr = [-1, 0, 1, 2, 3]\nprint(max_len_sub(arr))  # Output: 5\n\narr = [1, 2, 2, 3, 4, 5]\nprint(max_len_sub(arr))  # Output: 5\n\narr = [1, 2, 3, 2, 1]\nprint(max_len_sub(arr))  # Output: 4\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2o6bz5tm.py\", line 20, in <module>\n    assert max_len_sub([10, 7, 4, 1, -2], -3) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}

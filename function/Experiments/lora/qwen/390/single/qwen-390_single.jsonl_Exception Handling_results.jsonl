{"task_id": 11, "completion": "def remove_occ(string, char):\n    if len(char) != 1:\n        raise ValueError('Second parameter must be a single character.')\n    \n    first_index = string.find(char)\n    if first_index == -1:\n        return string\n    \n    # Remove the first occurrence\n    string = string[:first_index] + string[first_index+1:]\n    \n    # Find the last occurrence\n    last_index = string.rfind(char)\n    if last_index == -1:\n        return string\n    \n    # Remove the last occurrence\n    string = string[:last_index] + string[last_index+1:]\n    \n    return string\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 12, "completion": "def sort_matrix(matrix):\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise TypeError('Input must be a list of lists.')\n    \n    if any(not all(isinstance(x, int) for x in row) for row in matrix):\n        raise TypeError('All elements in the matrix must be integers.')\n    \n    sorted_matrix = sorted(matrix, key=lambda x: sum(x))\n    return sorted_matrix\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 13, "completion": "from collections import Counter\n\ndef count_common(words):\n    if not isinstance(words, list) or not all(isinstance(word, str) for word in words):\n        raise TypeError('Input must be a list of strings.')\n    \n    # Count the occurrences of each word\n    word_counts = Counter(words)\n    \n    # Get the most common word(s)\n    most_common_word = word_counts.most_common(1)\n    \n    return most_common_word[0] if most_common_word else None\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvsxzzdqv.py\", line 10, in <module>\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nAssertionError", "passed": false}
{"task_id": 14, "completion": "def find_volume(base_length, base_height, prism_height):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base_length (float): The length of the base triangle.\n    base_height (float): The height of the base triangle.\n    prism_height (float): The height of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n\n    Raises:\n    ValueError: If any of the inputs are non-positive or non-numeric.\n    \"\"\"\n    # Validate input types and values\n    if not all(isinstance(x, (int, float)) for x in [base_length, base_height, prism_height]):\n        raise ValueError('All dimensions must be numeric.')\n    if not all(x > 0 for x in [base_length, base_height, prism_height]):\n        raise ValueError('All dimensions must be positive numbers.')\n\n    # Calculate the area of the base triangle\n    base_area = 0.5 * base_length * base_height\n\n    # Calculate the volume of the prism\n    volume = base_area * prism_height\n    return volume\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgu5o1m4q.py\", line 18, in <module>\n    try: find_volume('a', 2, 3)\n  File \"/tmp/tmpgu5o1m4q.py\", line 4, in find_volume\n    raise ValueError('All dimensions must be numeric.')\nValueError: All dimensions must be numeric.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpgu5o1m4q.py\", line 19, in <module>\n    except ValueError as e: assert str(e) == 'All dimensions must be positive numbers.'\nAssertionError", "passed": false}
{"task_id": 15, "completion": "import re\n\ndef split_lowerstring(text):\n    if not isinstance(text, str):\n        raise TypeError('Input must be a string.')\n    \n    return re.findall('[a-z][^a-z]*', text)\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpze_gqlmf.py\", line 9\n    try: split_lowerstring(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    if not isinstance(text, str):\n        raise TypeError('Input must be a string.')\n    return re.findall(r'[a-z]+_[a-z]+', text)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmposxx4tly.py\", line 6, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Parameters:\n    side_length (float): The length of one side of the square.\n\n    Returns:\n    float: The perimeter of the square.\n\n    Raises:\n    ValueError: If the input side_length is negative.\n    \"\"\"\n    if side_length < 0:\n        raise ValueError('Side length cannot be negative.')\n    \n    return 4 * side_length\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(str1, str2):\n    if not isinstance(str1, str) or not isinstance(str2, str):\n        raise TypeError('Both inputs must be strings.')\n    \n    result = [char for char in str1 if char not in str2]\n    return ''.join(result)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 19, "completion": "def test_duplicate(arr):\n    try:\n        if not isinstance(arr, list):\n            raise ValueError('Input must be a list of integers')\n        for i in range(len(arr)):\n            for j in range(i + 1, len(arr)):\n                if arr[i] == arr[j]:\n                    return True\n        return False\n    except Exception as e:\n        raise ValueError(f'An error occurred: {e}')\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp98p9znwv.py\", line 4, in test_duplicate\n    raise ValueError('Input must be a list of integers')\nValueError: Input must be a list of integers\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmp98p9znwv.py\", line 16, in <module>\n    test_duplicate(None)\n  File \"/tmp/tmp98p9znwv.py\", line 11, in test_duplicate\n    raise ValueError(f'An error occurred: {e}')\nValueError: An error occurred: Input must be a list of integers", "passed": false}
{"task_id": 20, "completion": "def is_woodall(n):\n    if not isinstance(n, int) or n < 0:\n        raise TypeError('Input must be a non-negative integer.')\n    \n    if n == 0:\n        return True\n    \n    x = n + 1\n    while (x & 1) == 0:\n        x >>= 1\n    \n    return x == 1\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpj8rpu8y7.py\", line 10, in <module>\n    assert is_woodall(383) == True\nAssertionError", "passed": false}
{"task_id": 21, "completion": "def multiples_of_num(n, m):\n    if m < 0 or n < 0:\n        raise ValueError('Both m and n must be non-negative integers.')\n    \n    result = []\n    for i in range(1, m + 1):\n        result.append(i * n)\n    \n    return result\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0z_lqss8.py\", line 8, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "completion": "def find_first_duplicate(arr):\n    if not isinstance(arr, list):\n        raise TypeError('Input must be a list.')\n    \n    for i in arr:\n        if not isinstance(i, int):\n            raise TypeError('All elements in the list must be integers.')\n    \n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    \n    return -1  # Return -1 if no duplicate is found\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 23, "completion": "def maximum_sum(lists):\n    if not isinstance(lists, list) or not all(isinstance(sublist, list) for sublist in lists):\n        raise TypeError('Input must be a list of lists.')\n    \n    if any(not all(isinstance(num, int) for num in sublist) for sublist in lists):\n        raise TypeError('All sublists must contain only integers.')\n    \n    return max(sum(sublist) for sublist in lists)\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpxx529ja1.py\", line 10\n    try: maximum_sum([[1, 2], [3, 'a']]); assert False, 'Expected TypeError' except TypeError: pass\n                                                                             ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 24, "completion": "def binary_to_decimal(binary):\n    try:\n        # Convert binary string to decimal integer\n        return int(binary, 2)\n    except (TypeError, ValueError):\n        # Raise a ValueError with a descriptive error message\n        raise ValueError('Invalid binary number')\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpe96g2ij7.py\", line 11\n    try: binary_to_decimal('102'); assert False, 'Expected ValueError' except ValueError as e: assert str(e) == 'Invalid binary number'\n                                                                       ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 25, "completion": "def find_product(arr):\n    if not isinstance(arr, list):\n        raise TypeError('Input must be a list.')\n    \n    for element in arr:\n        if not isinstance(element, int):\n            raise TypeError('All elements in the list must be integers.')\n    \n    # Create a dictionary to count occurrences of each element\n    element_count = {}\n    for element in arr:\n        if element in element_count:\n            element_count[element] += 1\n        else:\n            element_count[element] = 1\n    \n    # Calculate the product of non-repeated elements\n    product = 1\n    for element, count in element_count.items():\n        if count == 1:\n            product *= element\n    \n    return product\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpta90_kuv.py\", line 20, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_K(test_list, K):\n  if not isinstance(test_list, list) or not all(isinstance(sub, tuple) for sub in test_list):\n    raise TypeError('Input must be a list of tuples.')\n  if not isinstance(K, int):\n    raise TypeError('k must be an integer.')\n  res = [sub[K] for sub in test_list]\n  return (res)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpreoaj8tp.py\", line 8, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nNameError: name 'check_k_elements' is not defined", "passed": false}
{"task_id": 27, "completion": "import re\n\ndef remove(lst):\n    if not isinstance(lst, list):\n        raise TypeError('Input must be a list.')\n    \n    for item in lst:\n        if not isinstance(item, str):\n            raise TypeError('All elements in the list must be strings.')\n    \n    result = []\n    pattern = r'\\d'\n    \n    for s in lst:\n        cleaned_string = re.sub(pattern, '', s)\n        result.append(cleaned_string)\n    \n    return result\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 28, "completion": "def binomial_coeff(n, k):\n    if not (isinstance(n, int) and isinstance(k, int)):\n        raise TypeError('Both inputs must be integers.')\n    if n < 0 or k < 0:\n        raise ValueError('Inputs must be non-negative.')\n    if k > n:\n        raise ValueError('k must not be greater than n.')\n    \n    # Initialize a list to store intermediate results\n    C = [0] * (k + 1)\n    C[0] = 1  # Base case\n    \n    for i in range(1, n + 1):\n        # Compute values from the end to avoid overwriting values prematurely\n        for j in range(min(i, k), 0, -1):\n            C[j] += C[j - 1]\n    \n    return C[k]\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpf29zjc4y.py\", line 19, in <module>\n    try: binomial_coeff(-1, 2)\n  File \"/tmp/tmpf29zjc4y.py\", line 5, in binomial_coeff\n    raise ValueError('Inputs must be non-negative.')\nValueError: Inputs must be non-negative.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpf29zjc4y.py\", line 20, in <module>\n    except ValueError as e: assert str(e) == 'Inputs must be non-negative and k must not be greater than n'\nAssertionError", "passed": false}
{"task_id": 29, "completion": "def get_odd_occurrence(arr):\n    if not isinstance(arr, list):\n        raise TypeError('Input must be a list.')\n    \n    for i in arr:\n        if not isinstance(i, int):\n            raise TypeError('All elements in the list must be integers.')\n    \n    for i in range(len(arr)):\n        count = 0\n        for j in range(len(arr)):\n            if arr[i] == arr[j]:\n                count += 1\n        if (count % 2 != 0):\n            return arr[i]\n    return -1\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp53254eis.py\", line 15, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    if not isinstance(s, str):\n        raise TypeError('Input must be a string')\n    \n    result = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(1, n-i+1):\n            substring = s[i:i+j]\n            if substring[0] == substring[-1]:\n                result += 1\n    return result\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpscs0sbnr.py\", line 15\n    try: count_substring_with_equal_ends(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                                  ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 31, "completion": "import heapq\n\ndef func(lists, k):\n    if k > sum(len(lst) for lst in lists):\n        raise ValueError('k cannot be greater than the number of distinct integers')\n    frequency = {}\n    for lst in lists:\n        for x in lst:\n            if x not in frequency:\n                frequency[x] = 0\n            frequency[x] += 1\n    heap = [(-freq, num) for num, freq in frequency.items()]\n    heapq.heapify(heap)\n    result = []\n    while heap and len(result) < k:\n        result.append(heapq.heappop(heap)[1])\n    return result\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpduyvaqvf.py\", line 17, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError('Input must be a positive integer')\n    \n    # Initialize the maximum prime factor variable\n    max_prime = -1\n    \n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        max_prime = 2\n        n //= 2\n    \n    # n must be odd at this point, so we can skip one element (Note i = i + 2)\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n //= i\n    \n    # This condition is to handle the case when n is a prime number greater than 2\n    if n > 2:\n        max_prime = n\n    \n    return max_prime\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(decimal_num):\n    if not isinstance(decimal_num, int) or decimal_num < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    \n    if decimal_num == 0:\n        return '0'\n    \n    binary_num = ''\n    while decimal_num > 0:\n        remainder = decimal_num % 2\n        binary_num = str(remainder) + binary_num\n        decimal_num //= 2\n    \n    return binary_num\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp60qhjsoe.py\", line 12, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "completion": "def find_missing(arr):\n    if arr != sorted(arr):\n        raise ValueError('Input list must be sorted.')\n    \n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        # Check if the middle element is at its correct position\n        if arr[mid] == mid + arr[0]:\n            left = mid + 1\n        else:\n            if mid == 0 or arr[mid] == arr[mid - 1] + 1:\n                return arr[mid] - 1\n            right = mid - 1\n    \n    return None\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdeejtdtn.py\", line 15, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError('Input must be a positive integer.')\n    return n * (n + 1)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator):\n    if denominator == 0:\n        raise ValueError('Denominator cannot be zero')\n    \n    # Convert the numerator to a string to easily access individual digits\n    numerator_str = str(numerator)\n    \n    # If the numerator has fewer than n digits, return the last digit\n    if len(numerator_str) < n:\n        return int(numerator_str[-1])\n    \n    # Otherwise, return the nth digit (1-based index)\n    return int(numerator_str[n-1])\n\n# Example usage:\ntry:\n    print(find_nth_digit(123456789, 1))  # Output: 1\n    print(find_nth_digit(123456789, 2))  # Output: 2\n    print(find_nth_digit(123456789, 0))  # Raises ValueError: Denominator cannot be zero\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmjq369to.py\", line 13, in <module>\n    print(find_nth_digit(123456789, 1))  # Output: 1\n  File \"/tmp/tmpmjq369to.py\", line 7, in find_nth_digit\n    if len(numerator_str) < n:\nNameError: name 'n' is not defined", "passed": false}
{"task_id": 37, "completion": "def sort_mixed_list(mixed_list):\n    if not isinstance(mixed_list, list):\n        raise TypeError('Input must be a list.')\n    \n    for element in mixed_list:\n        if not (isinstance(element, int) or isinstance(element, str)):\n            raise TypeError('All elements in the list must be either integers or strings.')\n    \n    return sorted(mixed_list)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpu7o51kdz.py\", line 8, in <module>\n    assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n  File \"/tmp/tmpu7o51kdz.py\", line 7, in sort_mixed_list\n    return sorted(mixed_list)\nTypeError: '<' not supported between instances of 'str' and 'int'", "passed": false}
{"task_id": 38, "completion": "def div_even_odd(list1):\n    ev_li = []\n    od_li = []\n    \n    # Separate even and odd numbers into two lists\n    for num in list1:\n        if num % 2 == 0:\n            ev_li.append(num)\n        else:\n            od_li.append(num)\n    \n    # Check if there is at least one even and one odd number\n    if not ev_li or not od_li:\n        raise ValueError('List must contain at least one even and one odd number.')\n    \n    # Return the division of the smallest even number by the largest odd number\n    return min(ev_li) / max(od_li)\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmps2bzgtja.py\", line 18\n    try: div_even_odd([2, 4, 6]); assert False; except ValueError as e: assert str(e) == 'List must contain at least one even and one odd number.'\n                                                ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 39, "completion": "from collections import Counter\n\ndef rearrange_string(s):\n    if not isinstance(s, str):\n        raise ValueError('Input must be a string.')\n    \n    for char in s:\n        if not char.islower():\n            raise ValueError('String must contain only lowercase letters.')\n    \n    # Count the frequency of each character\n    char_count = Counter(s)\n    \n    # Find the maximum frequency of any character\n    max_freq = max(char_count.values())\n    \n    # If more than one character has the same maximum frequency,\n    # it's impossible to rearrange the string as required\n    if max_freq > (len(s) + 1) // 2:\n        return False\n    \n    # Create a list of characters sorted by frequency in descending order\n    sorted_chars = sorted(char_count.items(), key=lambda x: x[1], reverse=True)\n    \n    # Initialize the result array with None values\n    result = [None] * len(s)\n    \n    # Place the most frequent character at even indices first\n    index = 0\n    for char, freq in sorted_chars:\n        while freq > 0:\n            if index >= len(s):\n                index = 1  # Start placing from odd indices after filling even indices\n            result[index] = char\n            index += 2\n            freq -= 1\n    \n    # Join the list into a string and return\n    return ''.join(result)\n\n# Example usage:\ntry:\n    print(rearrange_string(\"aab\"))\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplnth426r.py\", line 36, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "completion": "import collections\n\ndef freq_element(list1):\n    if not isinstance(list1, list) or not all(isinstance(sublist, list) for sublist in list1):\n        raise TypeError('Input must be a list of lists.')\n    result = {}\n    for element in list1:\n        result.setdefault(element, []).append(1)\n        result[element] = sum(result[element])\n    return result\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmp5sitwvwk.py\", line 13\n    try: freq_element('not a list'); assert False; except TypeError: assert True\n                                                   ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 41, "completion": "def filter_evennumbers(numbers):\n    if not isinstance(numbers, list):\n        raise TypeError('Input must be a list.')\n    \n    for num in numbers:\n        if not isinstance(num, int):\n            raise TypeError('All elements in the list must be integers.')\n    \n    return list(filter(lambda x: (x % 2 == 0), numbers))\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 42, "completion": "def find_sum(arr):\n    if not isinstance(arr, list):\n        raise TypeError('Input must be a list.')\n    \n    # Create a dictionary to store the frequency of each element\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Calculate the sum of elements that appear more than once\n    result = 0\n    for num, count in freq.items():\n        if count > 1:\n            result += num * count\n    \n    return result\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjhsx6muq.py\", line 17, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    if not isinstance(text, str):\n        raise TypeError('Input must be a string.')\n    patterns = '^[a-z]+_[a-z]+$'\n    if re.search(patterns,  text):\n        return ('Found a match!')\n    else:\n        return ('Not matched!')\n\n# Example usage:\n# result = text_match(\"hello_world\")\n# print(result)  # Output: Found a match!\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 44, "completion": "import re\n\ndef text_match_string(text):\n    if not isinstance(text, str):\n        raise TypeError('Input must be a string.')\n    patterns = '^\\w+'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmp7uai25t8.py\", line 13\n    try: text_match_string(123); assert False, 'TypeError not raised' except TypeError: pass\n                                                                      ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 45, "completion": "def get_gcd(arr):\n    if not arr:\n        raise ValueError('Input list cannot be empty.')\n    n = len(arr)\n    gcd_result = arr[0]\n    for i in range(1, n):\n        gcd_result = gcd(gcd_result, arr[i])\n    return gcd_result\n\ndef gcd(a, b):\n    while (b):\n        a, b = b, a % b\n    return a\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 46, "completion": "def test_distinct(lst):\n    if not isinstance(lst, list):\n        raise TypeError('Input must be a list.')\n    \n    for x in lst:\n        if not isinstance(x, int):\n            raise TypeError('All elements in the list must be integers.')\n    \n    if len(lst) == len(set(lst)):\n        return True\n    else:\n        return False\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 47, "completion": "def compute_last_digit(a, b):\n    if a > b:\n        raise ValueError('a should not be greater than b')\n    \n    # Initialize result\n    res = 1\n    \n    # If a equals b, the last digit is 1\n    if a == b:\n        return 1\n    \n    # If the difference between b and a is 5 or more, the last digit is 0\n    if (b - a) >= 5:\n        return 0\n    \n    # Multiply the last digits from (a+1) to b\n    for i in range(a + 1, b + 1):\n        res = (res * (i % 10)) % 10\n    \n    return res % 10\n\n# Example usage:\ntry:\n    print(compute_last_digit(3, 6))  # Output: 2\n    print(compute_last_digit(4, 9))  # Output: 0\n    print(compute_last_digit(5, 5))  # Output: 1\n    print(compute_last_digit(7, 3))  # Raises ValueError: a should not be greater than b\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 48, "completion": "def odd_bit_set_number(n):\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer.')\n    \n    # Initialize result to 0\n    res = 0\n    \n    # Iterate over each bit position\n    for i in range(32):  # Assuming a 32-bit integer for simplicity\n        # Set the bit at position i if i is even (odd bit)\n        if i % 2 == 1:\n            res |= (1 << i)\n    \n    # Combine the original number with the result to set all odd bits\n    return n | res\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwc1ahsas.py\", line 13, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(list1, m):\n    result = []\n    for sub_list in list1:\n        if len(sub_list) <= m:\n            raise IndexError(f'Index out of range for sublist: {sub_list}')\n        result.append(sub_list[m])\n    return result\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpnvi_532x.py\", line 11, in <module>\n    try: specified_element([[1, 2], [3, 4]], 3)\n  File \"/tmp/tmpnvi_532x.py\", line 5, in specified_element\n    raise IndexError(f'Index out of range for sublist: {sub_list}')\nIndexError: Index out of range for sublist: [1, 2]\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpnvi_532x.py\", line 12, in <module>\n    except IndexError as e: assert str(e) == 'Index out of range for sublist'\nAssertionError", "passed": false}
{"task_id": 50, "completion": "def min_length_list(lists):\n    if not isinstance(lists, list) or not all(isinstance(lst, list) for lst in lists):\n        raise ValueError('Input must be a list of lists.')\n    \n    if not lists:\n        return []\n    \n    min_list = min(lists, key=lambda x: len(x))\n    return min_list\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjdyautfp.py\", line 8, in <module>\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nAssertionError", "passed": false}
{"task_id": 51, "completion": "def check_equilateral(a, b, c):\n    # Check if all inputs are positive integers\n    if not (isinstance(a, int) and isinstance(b, int) and isinstance(c, int)):\n        raise TypeError('All inputs must be integers.')\n    if a <= 0 or b <= 0 or c <= 0:\n        raise ValueError('All inputs must be positive integers.')\n    \n    # Check if the triangle is equilateral\n    if a == b == c:\n        return True\n    else:\n        return False\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    if not (isinstance(base, (int, float)) and isinstance(height, (int, float))):\n        raise TypeError('Both base and height must be numerical values.')\n    return base * height\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(s):\n    if not isinstance(s, str):\n        raise TypeError('Input must be a string')\n    \n    if len(s) == 0:\n        return False\n    \n    return s[0] == s[-1]\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpohcevwd2.py\", line 7, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 54, "completion": "def counting_sort(arr):\n    if not isinstance(arr, list):\n        raise TypeError('Input must be a list.')\n    \n    for element in arr:\n        if not isinstance(element, int):\n            raise TypeError('All elements in the list must be integers.')\n    \n    if len(arr) == 0:\n        return []\n    \n    # Find the maximum value in the array to determine the size of the count array\n    max_value = max(arr)\n    \n    # Initialize the count array with zeros\n    count_array = [0] * (max_value + 1)\n    \n    # Populate the count array\n    for num in arr:\n        count_array[num] += 1\n    \n    # Reconstruct the sorted array\n    sorted_index = 0\n    for i in range(len(count_array)):\n        while count_array[i] > 0:\n            arr[sorted_index] = i\n            sorted_index += 1\n            count_array[i] -= 1\n    \n    return arr\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 55, "completion": "def tn_gp(a, r, n):\n    \"\"\"\n    Calculate the t-nth term of a geometric series.\n\n    Parameters:\n    a (float): The first term of the geometric series.\n    r (float): The common ratio of the geometric series.\n    n (int): The term number to find.\n\n    Returns:\n    float: The t-nth term of the geometric series.\n\n    Raises:\n    ValueError: If the term number (n) is less than 1.\n    \"\"\"\n    if n < 1:\n        raise ValueError('Term number must be greater than 0')\n    \n    tn = a * (r ** (n - 1))\n    return tn\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1w28_xd3.py\", line 6, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def check(n):\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer.')\n    \n    rev = 0\n    temp = n\n    \n    # Reverse the number\n    while temp > 0:\n        rev = (rev * 10) + (temp % 10)\n        temp = temp // 10\n    \n    # Check if the original number is one less than twice its reverse\n    return (2 * rev == (n + 1))\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 57, "completion": "def find_max_num(digits, n):\n    if n > len(digits):\n        raise ValueError('Number of digits exceeds the length of the list.')\n    digits.sort(reverse=True)\n    max_num = 0\n    for i in range(n):\n        max_num = max_num * 10 + digits[i]\n    return max_num\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 58, "completion": "def opposite_signs(x, y):\n    if not (isinstance(x, int) and isinstance(y, int)):\n        raise TypeError('Both inputs must be integers.')\n    \n    return ((x ^ y) < 0)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 59, "completion": "def is_octagonal(n):\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError('Input must be a positive integer.')\n    \n    return n * (3 * n - 2)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplglaxzkp.py\", line 9, in <module>\n    is_octagonal(-1)\n  File \"/tmp/tmplglaxzkp.py\", line 3, in is_octagonal\n    raise ValueError('Input must be a positive integer.')\nValueError: Input must be a positive integer.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmplglaxzkp.py\", line 11, in <module>\n    assert str(e) == 'Input must be a positive integer'\nAssertionError", "passed": false}
{"task_id": 60, "completion": "def max_len_sub(A, N):\n    if not isinstance(A, list) or not isinstance(N, int):\n        raise TypeError('Input must be a list and an integer.')\n    dp = [1] * N\n    res = 0\n    for i in range(1, N):\n        for j in range(i):\n            if A[i] - A[j] == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(res, dp[i])\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7eqi2w3_.py\", line 11, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nAssertionError", "passed": false}

{"task_id": 11, "completion": "def remove_occ(string, char):\n    # Find the index of the first occurrence of the character\n    first_index = string.find(char)\n    \n    # If the character is not found, return the original string\n    if first_index == -1:\n        return string\n    \n    # Remove the first occurrence\n    string = string[:first_index] + string[first_index+1:]\n    \n    # Find the index of the last occurrence of the character\n    last_index = string.rfind(char)\n    \n    # If the character is not found in the remaining string, return the modified string\n    if last_index == -1:\n        return string\n    \n    # Remove the last occurrence\n    string = string[:last_index] + string[last_index+1:]\n    \n    return string\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp59ipumjh.py\", line 34, in <module>\n    check_code_style(remove_occ)\n  File \"/tmp/tmp59ipumjh.py\", line 30, in check_code_style\n    assert result.total_errors == 0, \"Code does not conform to PEP 8 standards.\"\nAssertionError: Code does not conform to PEP 8 standards.", "passed": false}
{"task_id": 12, "completion": "def sort_matrix(matrix):\n    return sorted(matrix, key=sum)\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 14, "completion": "def find_volume(base_length, base_height, prism_height):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base_length (float): The length of the base triangle.\n    base_height (float): The height of the base triangle.\n    prism_height (float): The height of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    return (base_length * base_height * prism_height) / 2\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 15, "completion": "import re\n\ndef split_lowerstring(text):\n    \"\"\"\n    Splits a string at lowercase letters.\n\n    Args:\n        text (str): The input string to be split.\n\n    Returns:\n        list: A list of substrings split at lowercase letters.\n    \"\"\"\n    return re.findall('[a-z][^a-z]*', text)\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    return re.findall(r'[a-z]+_[a-z]+', text)\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwuemka8d.py\", line 4, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Parameters:\n    side_length (float): The length of one side of the square.\n\n    Returns:\n    float: The perimeter of the square.\n    \"\"\"\n    return 4 * side_length\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(str1, str2):\n    \"\"\"\n    Removes characters from the first string that are present in the second string.\n\n    Parameters:\n    str1 (str): The original string from which characters will be removed.\n    str2 (str): The string containing characters to be removed from the first string.\n\n    Returns:\n    str: A new string with characters removed.\n    \"\"\"\n    result = [char for char in str1 if char not in str2]\n    return ''.join(result)\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 19, "completion": "def test_duplicate(arr):\n    \"\"\"\n    Check if the given array of integers contains any duplicate elements.\n\n    Parameters:\n    arr (list): A list of integers to be checked for duplicates.\n\n    Returns:\n    bool: True if there are duplicates, False otherwise.\n    \"\"\"\n    seen = set()\n    for item in arr:\n        if item in seen:\n            return True\n        seen.add(item)\n    return False\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(n):\n    \"\"\"\n    Check if the given number is a Woodall number.\n\n    A Woodall number is of the form n * 2^n - 1 where n is a positive integer.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is a Woodall number, False otherwise.\n    \"\"\"\n    if n < 1:\n        return False\n\n    x = n + 1\n    while x % 2 == 0:\n        x //= 2\n\n    return x == 1\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppq4nmcv4.py\", line 8, in <module>\n    assert is_woodall(383) == True\nAssertionError", "passed": false}
{"task_id": 21, "completion": "def multiples_of_num(n, m):\n    \"\"\"\n    Generate a list of m multiples of n.\n\n    Parameters:\n    n (int): The base number.\n    m (int): The number of multiples to generate.\n\n    Returns:\n    list: A list containing m multiples of n.\n    \"\"\"\n    return [n * i for i in range(1, m + 1)]\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_2rwbiyq.py\", line 3, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "completion": "def find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        else:\n            seen.add(num)\n    return -1\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 23, "completion": "def maximum_sum(lists):\n    return max(map(sum, lists))\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 24, "completion": "def binary_to_decimal(binary):\n    \"\"\"\n    Convert a binary number to its decimal equivalent.\n\n    Args:\n        binary (int): The binary number to be converted.\n\n    Returns:\n        int: The decimal equivalent of the binary number.\n    \"\"\"\n    decimal = 0\n    i = 0\n    while binary != 0:\n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i)\n        binary = binary // 10\n        i += 1\n    return decimal\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 25, "completion": "def find_product(arr):\n    \"\"\"\n    Find the product of non-repeated elements in a given array.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The product of all non-repeated elements.\n    \"\"\"\n    from collections import Counter\n\n    # Count occurrences of each element in the array\n    frequency = Counter(arr)\n\n    # Calculate the product of elements that appear only once\n    product = 1\n    for key, value in frequency.items():\n        if value == 1:\n            product *= key\n\n    return product\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppc_k1vso.py\", line 11, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(test_list, K):\n    res = [sub[K] for sub in test_list]\n    return res\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp260gwhlz.py\", line 4, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n  File \"/tmp/tmp260gwhlz.py\", line 2, in check_k_elements\n    res = [sub[K] for sub in test_list]\n  File \"/tmp/tmp260gwhlz.py\", line 2, in <listcomp>\n    res = [sub[K] for sub in test_list]\nIndexError: tuple index out of range", "passed": false}
{"task_id": 27, "completion": "import re\n\ndef remove_digits(string_list):\n    \"\"\"\n    Removes all digits from each string in the provided list.\n\n    Args:\n        string_list (list): A list of strings from which digits will be removed.\n\n    Returns:\n        list: A new list with digits removed from each string.\n    \"\"\"\n    result = [re.sub(r'\\d', '', s) for s in string_list]\n    return result\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpml2o0b1w.py\", line 5, in <module>\n    assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\nNameError: name 'remove' is not defined", "passed": false}
{"task_id": 28, "completion": "def binomial_coeff(n, k):\n    \"\"\"\n    Calculate the binomial coefficient for given n and k.\n\n    Args:\n        n (int): The number of items.\n        k (int): The number of items to choose.\n\n    Returns:\n        int: The binomial coefficient.\n    \"\"\"\n    if k > n - k:\n        k = n - k\n\n    c = [0] * (k + 1)\n    c[0] = 1\n\n    for i in range(1, n + 1):\n        j = min(i, k)\n        while j > 0:\n            c[j] += c[j - 1]\n            j -= 1\n\n    return c[k]\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 29, "completion": "def get_odd_occurrence(arr):\n    \"\"\"\n    Find the element that occurs an odd number of times in the array.\n\n    :param arr: List[int] - A list of integers.\n    :return: int or None - The element that occurs an odd number of times, or None if no such element exists.\n    \"\"\"\n    for i in range(len(arr)):\n        count = 0\n        for j in range(len(arr)):\n            if arr[i] == arr[j]:\n                count += 1\n        if (count % 2 != 0):\n            return arr[i]\n    return None\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3jd4g5f0.py\", line 10, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(1, n - i + 1):\n            if s[i] == s[i + j - 1]:\n                result += 1\n    return result\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 31, "completion": "import heapq\n\ndef func(arr1, arr2, arr3, k):\n    # Combine all arrays into one list\n    combined = arr1 + arr2 + arr3\n    \n    # Use a dictionary to count occurrences of each integer\n    frequency_dict = {}\n    for num in combined:\n        if num in frequency_dict:\n            frequency_dict[num] += 1\n        else:\n            frequency_dict[num] = 1\n    \n    # Use heapq.nlargest to find the top k elements based on frequency\n    result = heapq.nlargest(k, frequency_dict.items(), key=lambda x: x[1])\n    \n    return result\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdyuddn7s.py\", line 15, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nTypeError: func() missing 2 required positional arguments: 'arr3' and 'k'", "passed": false}
{"task_id": 32, "completion": "def max_prime_factor(n):\n    \"\"\"\n    Find the largest prime factor of a given number.\n\n    :param n: Integer - The number for which to find the largest prime factor.\n    :return: Integer - The largest prime factor of the given number.\n    \"\"\"\n    # Initialize the smallest prime factor\n    max_prime = -1\n\n    # Divide n by 2 until it becomes odd\n    while n % 2 == 0:\n        max_prime = 2\n        n //= 2\n\n    # Check for odd factors from 3 onwards\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n //= i\n\n    # If n is still greater than 2, then n itself is a prime factor\n    if n > 2:\n        max_prime = n\n\n    return max_prime\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpp3mebhmj.py\", line 17, in <module>\n    assert max_prime_factors(15) == 5\nNameError: name 'max_prime_factors' is not defined", "passed": false}
{"task_id": 33, "completion": "def decimal_to_binary(decimal_number):\n    \"\"\"\n    Convert a decimal number to its binary representation.\n\n    Parameters:\n    decimal_number (int): The decimal number to be converted.\n\n    Returns:\n    str: The binary representation of the decimal number.\n    \"\"\"\n    if decimal_number == 0:\n        return \"0\"\n    \n    binary_digits = []\n    while decimal_number > 0:\n        remainder = decimal_number % 2\n        binary_digits.insert(0, str(remainder))\n        decimal_number //= 2\n    \n    return ''.join(binary_digits)\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6l8mulat.py\", line 10, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "completion": "def find_missing(arr, start_index, end_index):\n    \"\"\"\n    Find the missing number in a sorted array using binary search.\n\n    :param arr: List[int] - The sorted array with one missing element.\n    :param start_index: int - The starting index for the search range.\n    :param end_index: int - The ending index for the search range.\n    :return: int or None - The missing number if found, otherwise None.\n    \"\"\"\n    if start_index > end_index:\n        return None\n\n    mid = (start_index + end_index) // 2\n\n    # Check if the middle element is the missing number\n    if (mid == 0 or arr[mid - 1] == mid - 1) and arr[mid] != mid:\n        return mid\n\n    # If the first half is not missing, recurse on the left half\n    if arr[mid] == mid:\n        return find_missing(arr, mid + 1, end_index)\n\n    # Otherwise, recurse on the right half\n    return find_missing(arr, start_index, mid - 1)\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpj_r9jqi1.py\", line 13, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() missing 1 required positional argument: 'end_index'", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    \"\"\"\n    Calculate the n-th rectangular number.\n\n    A rectangular number or rectangle number counts objects arranged in a rectangle.\n    The n-th rectangular number is given by the formula: r = n * (n + 1)\n\n    Args:\n        n (int): The position of the rectangular number to calculate.\n\n    Returns:\n        int: The n-th rectangular number.\n    \"\"\"\n    return n * (n + 1)\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator):\n    \"\"\"\n    Find the nth digit in the decimal expansion of the proper fraction numerator/denominator.\n\n    :param numerator: The numerator of the fraction.\n    :param denominator: The denominator of the fraction.\n    :return: The nth digit in the decimal expansion.\n    \"\"\"\n    remainder = numerator % denominator\n    for _ in range(n):\n        remainder *= 10\n        digit = remainder // denominator\n        remainder %= denominator\n    return digit\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2q_bn4aa.py\", line 8, in <module>\n    assert find_nth_digit(1,2,1) == 5\nTypeError: find_nth_digit() takes 2 positional arguments but 3 were given", "passed": false}
{"task_id": 37, "completion": "def sort_mixed_list(mixed_list):\n    \"\"\"\n    Sorts a mixed list containing both integers and strings.\n\n    Args:\n        mixed_list (list): A list containing both integers and strings.\n\n    Returns:\n        list: A sorted list with all integers first, followed by all strings.\n    \"\"\"\n    # Separate integers and strings into two lists\n    int_part = [item for item in mixed_list if isinstance(item, int)]\n    str_part = [item for item in mixed_list if isinstance(item, str)]\n\n    # Sort each part separately\n    int_part.sort()\n    str_part.sort()\n\n    # Combine the sorted parts\n    return int_part + str_part\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 38, "completion": "def div_even_odd(list1):\n    first_even = next((el for el in list1 if el % 2 == 0), -1)\n    first_odd = next((el for el in list1 if el % 2 != 0), -1)\n    return (first_even / first_odd) if first_odd != 0 else None\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 39, "completion": "from collections import Counter\nimport heapq\n\ndef rearrange_string(s):\n    # Count the frequency of each character in the string\n    char_count = Counter(s)\n    \n    # Create a max heap based on character frequency\n    max_heap = [(-freq, char) for char, freq in char_count.items()]\n    heapq.heapify(max_heap)\n    \n    prev_char = None\n    prev_freq = 0\n    result = []\n    \n    while max_heap or prev_freq:\n        if prev_freq < 0:\n            heapq.heappush(max_heap, (prev_freq, prev_char))\n        \n        if not max_heap:\n            return \"\"\n        \n        freq, char = heapq.heappop(max_heap)\n        result.append(char)\n        prev_char = char\n        prev_freq = freq + 1\n    \n    return ''.join(result)\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjmjogewc.py\", line 22, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "completion": "import collections\n\ndef freq_element(list1):\n    result = collections.Counter(sorted([item for sublist in list1 for item in sublist]))\n    return result\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpsecxh8ss.py\", line 22, in <module>\n    check_code_style(freq_element)\n  File \"/tmp/tmpsecxh8ss.py\", line 18, in check_code_style\n    assert result.total_errors == 0, \"Code does not conform to PEP 8 standards.\"\nAssertionError: Code does not conform to PEP 8 standards.", "passed": false}
{"task_id": 41, "completion": "def filter_evennumbers(numbers):\n    \"\"\"\n    Filters even numbers from a list of integers.\n\n    Args:\n        numbers (list): A list of integers.\n\n    Returns:\n        list: A list containing only the even numbers from the input list.\n    \"\"\"\n    return list(filter(lambda x: x % 2 == 0, numbers))\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 42, "completion": "def find_sum(arr):\n    \"\"\"\n    Find the sum of repeated elements in a given array.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The sum of repeated elements.\n    \"\"\"\n    # Create a dictionary to store the frequency of each element\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Calculate the sum of elements that appear more than once\n    result = 0\n    for key, value in freq.items():\n        if value > 1:\n            result += key * value\n\n    return result\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpti4q5qc8.py\", line 15, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    patterns = r'^[a-z]+_[a-z]+$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpfypeuis6.py\", line 25, in <module>\n    check_code_style(cc_visit)\nNameError: name 'cc_visit' is not defined", "passed": false}
{"task_id": 44, "completion": "import re\n\ndef text_match_string(text):\n    patterns = r'\\b\\w+'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7zhnoycv.py\", line 8, in <module>\n    assert text_match_string(\" python\")==('Not matched!')\nAssertionError", "passed": false}
{"task_id": 45, "completion": "from math import gcd\nfrom functools import reduce\n\ndef get_gcd(arr):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of an array of numbers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The GCD of the array elements.\n    \"\"\"\n    return reduce(lambda x, y: gcd(x, y), arr)\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 46, "completion": "def test_distinct(iterable):\n    \"\"\"\n    Check if all elements in the iterable are distinct.\n\n    Args:\n        iterable (iterable): An iterable of elements to be checked for uniqueness.\n\n    Returns:\n        bool: True if all elements are distinct, False otherwise.\n    \"\"\"\n    seen = set()\n    for item in iterable:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 48, "completion": "def odd_bit_set_number(n):\n    \"\"\"\n    Set all odd bits of a given number.\n\n    Args:\n        n (int): The input number whose odd bits are to be set.\n\n    Returns:\n        int: The number with all odd bits set.\n    \"\"\"\n    mask = 0x55555555  # Binary: 01010101010101010101010101010101\n    return n | mask\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjbl1fazk.py\", line 4, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(list1, element_index=0):\n    \"\"\"\n    Extracts every first or specified element from a given two-dimensional list.\n\n    Parameters:\n    list1 (list): A two-dimensional list from which elements will be extracted.\n    element_index (int): The index of the element to extract from each sublist. Defaults to 0.\n\n    Returns:\n    list: A list containing the extracted elements.\n    \"\"\"\n    result = [i[element_index] for i in list1]\n    return result\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 51, "completion": "def check_equilateral(a, b, c):\n    \"\"\"\n    Check if a triangle with sides a, b, and c is equilateral.\n\n    Parameters:\n    a (float): Length of side a.\n    b (float): Length of side b.\n    c (float): Length of side c.\n\n    Returns:\n    str: 'Equilateral Triangle' if all sides are equal, otherwise 'Not Equilateral'.\n    \"\"\"\n    if a == b == c:\n        return 'Equilateral Triangle'\n    else:\n        return 'Not Equilateral'\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxwffv4ta.py\", line 6, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram.\n    \"\"\"\n    return base * height\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(string):\n    if len(string) < 1:\n        return False\n    return string[0] == string[-1]\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpcjvn17hs.py\", line 5, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 54, "completion": "def counting_sort(arr):\n    \"\"\"\n    Sorts an array using the counting sort algorithm.\n\n    Parameters:\n    arr (list): A list of non-negative integers to be sorted.\n\n    Returns:\n    list: The sorted list.\n    \"\"\"\n    if not arr:\n        return []\n\n    # Find the maximum value in the array\n    max_value = max(arr)\n\n    # Initialize the count array with zeros\n    count_array = [0] * (max_value + 1)\n\n    # Populate the count array\n    for num in arr:\n        count_array[num] += 1\n\n    # Reconstruct the sorted array\n    sorted_index = 0\n    for i, count in enumerate(count_array):\n        while count > 0:\n            arr[sorted_index] = i\n            sorted_index += 1\n            count -= 1\n\n    return arr\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 55, "completion": "def tn_gp(a, r, n):\n    \"\"\"\n    Calculate the t-nth term of a geometric series.\n\n    Parameters:\n    a (float): The first term of the geometric series.\n    r (float): The common ratio between consecutive terms.\n    n (int): The term number to be calculated.\n\n    Returns:\n    float: The t-nth term of the geometric series.\n    \"\"\"\n    tn = a * (r ** (n - 1))\n    return tn\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpterfvijz.py\", line 4, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def check(n):\n    rev = 0\n    temp = n\n    \n    # Reverse the digits of the number\n    while temp > 0:\n        rev = (rev * 10) + (temp % 10)\n        temp //= 10\n    \n    # Check if the original number is one less than twice its reverse\n    return (2 * rev == (n + 1))\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 57, "completion": "def find_max_num(digits, n):\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n    \n    # Initialize the result as an empty string\n    max_num = ''\n    \n    # Construct the maximum number by concatenating the sorted digits\n    for i in range(n):\n        max_num += str(digits[i])\n    \n    return int(max_num)\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 58, "completion": "def opposite_signs(x, y):\n    \"\"\"\n    Check if the given two integers have opposite signs.\n\n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n\n    Returns:\n        bool: True if the integers have opposite signs, False otherwise.\n    \"\"\"\n    return (x ^ y) < 0\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 59, "completion": "def is_octagonal(n):\n    \"\"\"\n    Calculate the nth octagonal number.\n\n    Parameters:\n    n (int): The position of the octagonal number in the sequence.\n\n    Returns:\n    int: The nth octagonal number.\n    \"\"\"\n    if not isinstance(n, int) or n < 1:\n        raise ValueError('Input must be a positive integer.')\n    \n    return n * (3 * n - 2)\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 60, "completion": "def max_len_sub(arr):\n    n = len(arr)\n    dp = [1] * n\n\n    for i in range(1, n):\n        if arr[i] > arr[i - 1]:\n            dp[i] = dp[i - 1] + 1\n\n    return max(dp) if dp else 0\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpeby6z57l.py\", line 8, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}

{"task_id": 11, "completion": "def remove_occ(string, char):\n    for i in range(len(string)):\n        if (string[i] == char):\n            string = string[:i] + string[i+1:]\n            break\n    for j in range(len(string) - 1, -1, -1):\n        if (string[j] == char):\n            string = string[:j] + string[j+1:]\n            break\n    return string\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 14, "completion": "def find_volume(base, height, length):\n    return (base * height * length) / 2\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 15, "completion": "import re\n\ndef split_lowerstring(text):\n    return ''.join(re.findall('[a-z][^a-z]*', text))\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmps1sa89ad.py\", line 4, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    return re.findall(r'[a-z]+_[a-z]+', text)\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpt5xbtmmq.py\", line 4, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    return 4 * side_length\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(n):\n    if n < 1:\n        return False\n    k = 1\n    while (k * (2**k - 1)) <= n:\n        if (k * (2**k - 1)) == n:\n            return True\n        k += 1\n    return False\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjmuiw6oi.py\", line 10, in <module>\n    assert is_woodall(383) == True\nAssertionError", "passed": false}
{"task_id": 21, "completion": "def multiples_of_num(n, m):\n    return [i * n for i in range(1, m + 1)]\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqvvdbj8q.py\", line 3, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 24, "completion": "def binary_to_decimal(binary):\n    decimal = 0\n    for digit in str(binary):\n        decimal = decimal * 2 + int(digit)\n    return decimal\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplxpakrp0.py\", line 11, in <module>\n    assert cc_visit(inspect.getsource(binary_to_decimal))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    max_prime = -1\n    while n % 2 == 0:\n        max_prime = 2\n        n >>= 1\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n // i\n    if n > 2:\n        max_prime = n\n    return max_prime\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(decimal_number):\n    return bin(decimal_number).replace(\"0b\", \"\")\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp93x5qfcc.py\", line 3, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    return int(n * (n + 1))\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 36, "completion": "def find_nth_digit(a, b, n):\n    remainder = a % b\n    for _ in range(n - 1):\n        remainder *= 10\n        digit = remainder // b\n        remainder %= b\n    return (remainder * 10) // b\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 38, "completion": "def div_even_odd(numbers):\n    first_even = next((num for num in numbers if num % 2 == 0), None)\n    first_odd = next((num for num in numbers if num % 2 != 0), None)\n    return (first_even, first_odd) if first_even is not None and first_odd is not None else None\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgn250ixa.py\", line 5, in <module>\n    assert div_even_odd([1,3,5,7,4,1,6,8])==4\nAssertionError", "passed": false}
{"task_id": 40, "completion": "from collections import Counter\n\ndef freq_element(lists):\n    # Flatten the list of lists into a single list\n    flattened_list = [item for sublist in lists for item in sublist]\n    # Count the frequency of each element in the flattened list\n    frequency = dict(Counter(flattened_list))\n    return frequency\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7nd6kwgd.py\", line 13, in <module>\n    assert cc_visit(inspect.getsource(freq_element))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 42, "completion": "def find_sum(arr):\n    from collections import Counter\n    \n    # Count occurrences of each element in the array\n    count = Counter(arr)\n    \n    # Filter elements that appear more than once and calculate their sum\n    result = sum([key * value for key, value in count.items() if value > 1])\n    \n    return result\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1ph3ewaf.py\", line 8, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    patterns = '^[a-z]+_[a-z]+$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjzi6z_33.py\", line 13, in <module>\n    assert cc_visit(inspect.getsource(text_match))[0].complexity ==1\nAssertionError", "passed": false}
{"task_id": 45, "completion": "def get_gcd(arr):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    if not arr:\n        raise ValueError(\"Array must contain at least one element\")\n\n    result = arr[0]\n    for num in arr[1:]:\n        result = gcd(result, num)\n\n    return result\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp21ak8u3m.py\", line 17, in <module>\n    assert cc_visit(inspect.getsource(get_gcd))[0].complexity <=1\nAssertionError", "passed": false}
{"task_id": 47, "completion": "def compute_last_digit(a, b):\n    if a == b:\n        return 1\n    elif (b - a) >= 5:\n        return 0\n    else:\n        result = 1\n        for i in range(a + 1, b + 1):\n            result = (result * (i % 10)) % 10\n        return result % 10\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpk8vam8kc.py\", line 16, in <module>\n    assert cc_visit(inspect.getsource(compute_last_digit))[0].complexity <=3\nAssertionError", "passed": false}
{"task_id": 51, "completion": "def check_equilateral(a, b, c):\n    if a == b == c:\n        print('Equilateral Triangle')\n    else:\n        print('Not Equilateral Triangle')\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp09y5sh3g.py\", line 6, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    return base * height\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(string):\n    return string[0] == string[-1] if len(string) > 0 else False\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmponm7xxu2.py\", line 3, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def check(n):\n    return n == 2 * (int(str(n)[::-1]) + 1)\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxmguxx65.py\", line 5, in <module>\n    assert check(73) == True\nAssertionError", "passed": false}
{"task_id": 58, "completion": "def opposite_signs(x, y):\n    return (x ^ y) < 0\n", "requirement": "Code Complexity", "result": "passed", "passed": true}

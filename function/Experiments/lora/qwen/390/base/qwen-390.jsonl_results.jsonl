{"task_id": 11, "completion": "def remove_occ(s, ch):\n    # Find the index of the first occurrence of the character\n    first_index = s.find(ch)\n    \n    if first_index == -1:\n        return s  # Character not found in the string\n    \n    # Remove the first occurrence\n    s = s[:first_index] + s[first_index+1:]\n    \n    # Find the index of the last occurrence of the character\n    last_index = s.rfind(ch)\n    \n    if last_index == -1:\n        return s  # No other occurrence found (already removed the only one)\n    \n    # Remove the last occurrence\n    s = s[:last_index] + s[last_index+1:]\n    \n    return s\n\n# Example usage:\nresult = remove_occ('abcdaefg', 'a')\nprint(result)  # Output: 'bcdaefg'\n", "result": "passed", "passed": true}
{"task_id": 12, "completion": "def sort_matrix(matrix):\n    # Sort the matrix based on the sum of each row\n    sorted_matrix = sorted(matrix, key=lambda x: sum(x))\n    return sorted_matrix\n\n# Example usage:\nmatrix = [\n    [3, 2, 1],\n    [6, 5, 4],\n    [9, 8, 7]\n]\n\nsorted_matrix = sort_matrix(matrix)\nprint(sorted_matrix)\n", "result": "passed", "passed": true}
{"task_id": 13, "completion": "from collections import Counter\n\ndef count_common(word_dict):\n    \"\"\"\n    Count the most common word(s) in a dictionary.\n\n    Parameters:\n    word_dict (dict): A dictionary where keys are words and values are their counts.\n\n    Returns:\n    list: A list of tuples containing the most common word(s) and their counts.\n    \"\"\"\n    # Create a Counter object from the dictionary\n    counter = Counter(word_dict)\n    \n    # Get the most common word(s)\n    most_common_words = counter.most_common(1)\n    \n    return most_common_words\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0fkbgxji.py\", line 21, in <module>\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nAssertionError", "passed": false}
{"task_id": 14, "completion": "def find_volume(base, height_of_triangle, length_of_prism):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base (float): The base length of the triangular face.\n    height_of_triangle (float): The height of the triangular face.\n    length_of_prism (float): The length of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    base_area = 0.5 * base * height_of_triangle\n    volume = base_area * length_of_prism\n    return volume\n\n# Example usage:\n# base = 4\n# height_of_triangle = 3\n# length_of_prism = 10\n# print(find_volume(base, height_of_triangle, length_of_prism))  # Output: 60.0\n", "result": "passed", "passed": true}
{"task_id": 15, "completion": "import re\n\ndef split_lowerstring(text):\n    return re.findall('[a-z][^a-z]*', text)\n", "result": "passed", "passed": true}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    return re.findall(r'[a-z]+_[a-z]+', text)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8z53310q.py\", line 6, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Parameters:\n    side_length (float or int): The length of one side of the square.\n\n    Returns:\n    float or int: The perimeter of the square.\n    \"\"\"\n    return 4 * side_length\n", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(str1, str2):\n    # Create a set of characters to be removed for faster lookup\n    chars_to_remove = set(str2)\n    \n    # Use list comprehension to filter out unwanted characters\n    result = ''.join([char for char in str1 if char not in chars_to_remove])\n    \n    return result\n\n# Example usage:\nstr1 = \"hello world\"\nstr2 = \"ad\"\ncleaned_str = remove_dirty_chars(str1, str2)\nprint(cleaned_str)  # Output: \"hello worl\"\n", "result": "passed", "passed": true}
{"task_id": 19, "completion": "def test_duplicate(arr):\n    # Convert the list to a set to remove duplicates\n    unique_elements = set(arr)\n    \n    # Compare the length of the original list with the set\n    if len(unique_elements) == len(arr):\n        return False  # No duplicates found\n    else:\n        return True   # Duplicates found\n\n# Example usage:\n# arr = [1, 2, 3, 4, 5]\n# print(test_duplicate(arr))  # Output: False\n#\n# arr = [1, 2, 3, 3, 5]\n# print(test_duplicate(arr))  # Output: True\n", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(x):\n    if x < 1:\n        return False\n    \n    n = 1\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number == x:\n            return True\n        elif woodall_number > x:\n            return False\n        n += 1\n\n# Example usage:\nprint(is_woodall(7))  # True, because 3 * 2^3 - 1 = 24 - 1 = 23\nprint(is_woodall(23)) # True, because 3 * 2^3 - 1 = 24 - 1 = 23\nprint(is_woodall(15)) # False, because there is no integer n such that n * 2^n - 1 = 15\n", "result": "passed", "passed": true}
{"task_id": 21, "completion": "def multiples_of_num(n, m):\n    \"\"\"\n    Find the first m multiples of n.\n\n    Parameters:\n    n (int): The number for which you want multiples.\n    m (int): The number of multiples you want.\n\n    Returns:\n    list: A list containing the first m multiples of n.\n    \"\"\"\n    return [i * n for i in range(1, m + 1)]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3w958hf8.py\", line 14, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "completion": "def find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1  # Return -1 if no duplicate is found\n\n# Example usage:\narr = [2, 5, 1, 2, 3, 5, 1]\nprint(find_first_duplicate(arr))  # Output: 2\n", "result": "passed", "passed": true}
{"task_id": 23, "completion": "def maximum_sum(lists):\n    # Initialize the maximum sum to a very small number (negative infinity)\n    max_sum = float('-inf')\n    \n    # Iterate through each sublist in the list of lists\n    for sublist in lists:\n        # Calculate the sum of the current sublist\n        current_sum = sum(sublist)\n        \n        # Update the maximum sum if the current sum is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum\n", "result": "passed", "passed": true}
{"task_id": 24, "completion": "def binary_to_decimal(binary_str):\n    \"\"\"\n    Convert a binary number (as a string) to its decimal equivalent.\n\n    Parameters:\n    binary_str (str): The binary number as a string.\n\n    Returns:\n    int: The decimal equivalent of the binary number.\n    \"\"\"\n    decimal_value = 0\n    length = len(binary_str)\n    \n    for i in range(length):\n        if binary_str[i] == '1':\n            decimal_value += 2 ** (length - i - 1)\n    \n    return decimal_value\n\n# Example usage:\nbinary_number = \"1101\"\ndecimal_number = binary_to_decimal(binary_number)\nprint(f\"The decimal equivalent of {binary_number} is {decimal_number}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjco0esdf.py\", line 25, in <module>\n    assert binary_to_decimal(100) == 4\n  File \"/tmp/tmpjco0esdf.py\", line 12, in binary_to_decimal\n    length = len(binary_str)\nTypeError: object of type 'int' has no len()", "passed": false}
{"task_id": 25, "completion": "def find_product(arr):\n    from collections import Counter\n    \n    # Count the occurrences of each element in the array\n    count_dict = Counter(arr)\n    \n    # Initialize the product to 1 (multiplicative identity)\n    product = 1\n    \n    # Iterate through the dictionary to multiply only those elements with a count of 1\n    for num, count in count_dict.items():\n        if count == 1:\n            product *= num\n    \n    return product\n\n# Example usage:\narr = [2, 3, 5, 6, 7, 8, 9, 2, 3]\nprint(find_product(arr))  # Output will be the product of 5, 6, 7, 8, 9\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmprk9x5u0_.py\", line 21, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(test_list, K):\n    # Use list comprehension to filter out tuples with less than k elements\n    res = [sub for sub in test_list if len(sub) >= K]\n    return res\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0jroi2sc.py\", line 6, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "completion": "import re\n\ndef remove(strings):\n    # Define a regular expression pattern to match digits\n    digit_pattern = r'\\d'\n    \n    # Use list comprehension to remove digits from each string in the list\n    result = [re.sub(digit_pattern, '', s) for s in strings]\n    \n    return result\n", "result": "passed", "passed": true}
{"task_id": 28, "completion": "def binomial_coeff(n, k):\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return binomial_coeff(n - 1, k - 1) + binomial_coeff(n - 1, k)\n", "result": "passed", "passed": true}
{"task_id": 29, "completion": "def get_odd_occurrence(arr):\n    # Dictionary to store the count of each element\n    count_dict = {}\n    \n    # Count the occurrences of each element\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Find the element with an odd count\n    for num, count in count_dict.items():\n        if count % 2 != 0:\n            return num\n    \n    # If no such element exists (though the problem assumes there is one)\n    return None\n\n# Example usage:\narr = [20, 34, 5, 12, 7, 9, 5, 6, 34, 20, 5]\nresult = get_odd_occurrence(arr)\nprint(f\"The element occurring odd number of times is: {result}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp99hgcfo0.py\", line 25, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    result = 0\n    n = len(s)\n    \n    # Iterate over all possible lengths of substrings\n    for i in range(n):\n        # Iterate over all possible starting points of substrings\n        for j in range(i + 1, n + 1):\n            # Check if the substring starts and ends with the same character\n            if s[i] == s[j - 1]:\n                result += 1\n                \n    return result\n\n# Example usage:\ns = \"abcab\"\nprint(count_substring_with_equal_ends(s))  # Output: 7\n", "result": "passed", "passed": true}
{"task_id": 31, "completion": "import heapq\n\ndef func(arr1, arr2, arr3, k):\n    # Combine all arrays into one list\n    combined = arr1 + arr2 + arr3\n    \n    # Use a dictionary to count the frequency of each element\n    freq_dict = {}\n    for num in combined:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Find the k largest elements based on frequency\n    result = heapq.nlargest(k, freq_dict.items(), key=lambda x: x[1])\n    \n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpg5ap7ekd.py\", line 20, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nTypeError: func() missing 2 required positional arguments: 'arr3' and 'k'", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    # Initialize the smallest prime factor\n    min_prime = [0] * (n + 1)\n    \n    # Set the smallest prime factor for each number\n    for i in range(2, n + 1):\n        if min_prime[i] == 0:\n            min_prime[i] = i\n            for j in range(i*i, n + 1, i):\n                if min_prime[j] == 0:\n                    min_prime[j] = i\n    \n    # Find the largest prime factor\n    while n > 1:\n        factor = min_prime[n]\n        n //= factor\n        if n % factor == 0:\n            return factor\n\n# Example usage:\nnumber = 600851475143\nlargest_prime_factor = max_prime_factors(number)\nprint(f\"The largest prime factor of {number} is {largest_prime_factor}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4d9xtd8k.py\", line 22, in <module>\n    largest_prime_factor = max_prime_factors(number)\n  File \"/tmp/tmp4d9xtd8k.py\", line 3, in max_prime_factors\n    min_prime = [0] * (n + 1)\nMemoryError", "passed": false}
{"task_id": 33, "completion": "def decimal_to_binary(decimal_number):\n    if decimal_number == 0:\n        return \"0\"\n    \n    binary_digits = []\n    while decimal_number > 0:\n        remainder = decimal_number % 2\n        binary_digits.insert(0, str(remainder))\n        decimal_number = decimal_number // 2\n    \n    return ''.join(binary_digits)\n\n# Example usage:\ndecimal_number = 13\nbinary_representation = decimal_to_binary(decimal_number)\nprint(f\"The binary representation of {decimal_number} is {binary_representation}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgv96kvsm.py\", line 18, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "completion": "def find_missing(arr, start, end):\n    if start > end:\n        return -1\n    \n    mid = start + (end - start) // 2\n    \n    # Check if the missing number is at the middle position\n    if arr[mid] != arr[0] + mid:\n        if mid == 0 or arr[mid - 1] == arr[0] + (mid - 1):\n            return arr[0] + mid\n        else:\n            return find_missing(arr, start, mid - 1)\n    \n    # Otherwise, the missing number is on the right side\n    return find_missing(arr, mid + 1, end)\n\n# Example usage:\narr = [1, 2, 3, 5]\nmissing_number = find_missing(arr, 0, len(arr) - 1)\nprint(f\"The missing number is: {missing_number}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpi3ipqzpg.py\", line 22, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() missing 1 required positional argument: 'end'", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    if not isinstance(n, int) or n < 1:\n        raise ValueError('Input must be a positive integer.')\n    return n * (n + 1) // 2\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxh7lfv1f.py\", line 6, in <module>\n    assert find_rect_num(4) == 20\nAssertionError", "passed": false}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator, n):\n    if numerator >= denominator:\n        raise ValueError(\"Numerator must be less than the denominator for a proper fraction.\")\n    \n    # Dictionary to store remainders and their corresponding positions\n    remainder_positions = {}\n    current_remainder = numerator\n    \n    # Perform long division until we reach the nth digit or detect a repeating cycle\n    while current_remainder != 0 and len(remainder_positions) < n:\n        if current_remainder in remainder_positions:\n            start_index = remainder_positions[current_remainder]\n            non_repeating_digits = ''.join(str(digit) for digit in digits)\n            repeating_digits = non_repeating_digits[start_index:]\n            position_in_cycle = (n - 1) % len(repeating_digits)\n            return int(repeating_digits[position_in_cycle])\n        \n        remainder_positions[current_remainder] = len(digits)\n        current_remainder *= 10\n        digit = current_remainder // denominator\n        digits.append(digit)\n        current_remainder %= denominator\n    \n    # If we exit the loop without finding the nth digit, it means the decimal is finite\n    if current_remainder == 0:\n        return None\n    \n    # Find the nth digit in the non-repeating part\n    non_repeating_digits = ''.join(str(digit) for digit in digits)\n    if n <= len(non_repeating_digits):\n        return int(non_repeating_digits[n - 1])\n    else:\n        return None\n\n# Example usage:\nnumerator = 1\ndenominator = 3\nn = 5\ndigit = find_nth_digit(numerator, denominator, n)\nprint(f\"The {n}th digit in the decimal expansion of {numerator}/{denominator} is {digit}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6s4aobhf.py\", line 39, in <module>\n    digit = find_nth_digit(numerator, denominator, n)\n  File \"/tmp/tmp6s4aobhf.py\", line 18, in find_nth_digit\n    remainder_positions[current_remainder] = len(digits)\nNameError: name 'digits' is not defined", "passed": false}
{"task_id": 37, "completion": "def sort_mixed_list(mixed_list):\n    # Separate integers and strings into two lists\n    int_part = [item for item in mixed_list if isinstance(item, int)]\n    str_part = [item for item in mixed_list if isinstance(item, str)]\n    \n    # Sort each part separately\n    sorted_ints = sorted(int_part)\n    sorted_strs = sorted(str_part)\n    \n    # Combine the sorted parts\n    sorted_list = sorted_ints + sorted_strs\n    \n    return sorted_list\n\n# Example usage:\nmixed_list = [1, 2, 'apple', 'banana', 3, 'cherry']\nsorted_list = sort_mixed_list(mixed_list)\nprint(sorted_list)  # Output: [1, 2, 3, 'apple', 'banana', 'cherry']\n", "result": "passed", "passed": true}
{"task_id": 38, "completion": "def div_even_odd(lst):\n    # Find the first even number in the list\n    first_even = next((el for el in lst if el % 2 == 0), -1)\n    \n    # Find the first odd number in the list\n    first_odd = next((el for el in lst if el % 2 != 0), -1)\n    \n    # Check if both even and odd numbers were found\n    if first_even == -1 or first_odd == -1:\n        raise ValueError('The list must contain at least one even and one odd number.')\n    \n    # Return the division of the first even number by the first odd number\n    return first_even / first_odd\n", "result": "passed", "passed": true}
{"task_id": 39, "completion": "import heapq\nfrom collections import Counter\n\ndef rearrange_string(s):\n    # Count the frequency of each character in the string\n    char_count = Counter(s)\n    \n    # Create a max-heap based on character frequency\n    max_heap = [(-freq, char) for char, freq in char_count.items()]\n    heapq.heapify(max_heap)\n    \n    prev_char = None\n    prev_freq = 0\n    result = []\n    \n    while max_heap or prev_freq:\n        if prev_freq < 0:\n            heapq.heappush(max_heap, (prev_freq, prev_char))\n        \n        if not max_heap:\n            return \"\"  # It's not possible to rearrange the string\n        \n        freq, char = heapq.heappop(max_heap)\n        result.append(char)\n        prev_char = char\n        prev_freq = freq + 1  # Increase frequency since it's stored as negative\n    \n    return ''.join(result)\n\n# Example usage:\ns = \"aabbcc\"\nprint(rearrange_string(s))  # Output: \"abcabc\" or any valid rearrangement\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmzbg6pwh.py\", line 34, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "completion": "from collections import Counter\n\ndef freq_element(list1):\n    # Flatten the list of lists into a single list\n    flattened_list = [item for sublist in list1 for item in sublist]\n    # Use Counter to count the frequency of each element\n    frequency = Counter(flattened_list)\n    return frequency\n", "result": "passed", "passed": true}
{"task_id": 41, "completion": "def filter_evennumbers(numbers):\n    return list(filter(lambda x: (x % 2 == 0), numbers))\n", "result": "passed", "passed": true}
{"task_id": 42, "completion": "def find_sum(arr):\n    # Create a dictionary to store the frequency of each element\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Calculate the sum of elements that appear more than once\n    total_sum = 0\n    for num, count in freq.items():\n        if count > 1:\n            total_sum += num * count\n    \n    return total_sum\n\n# Example usage:\narr = [1, 2, 3, 2, 4, 5, 5, 6]\nprint(find_sum(arr))  # Output will be 7 (2 + 5)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmprf_b44yf.py\", line 22, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    patterns = '^[a-z]+_[a-z]+$'\n    if re.search(patterns,  text):\n        return ('Found a match!')\n    else:\n        return ('Not matched!')\n\n# Example usage:\nprint(text_match('hello_world'))  # Output: Found a match!\nprint(text_match('Hello_World'))  # Output: Not matched!\nprint(text_match('helloWorld'))   # Output: Not matched!\n", "result": "passed", "passed": true}
{"task_id": 44, "completion": "import re\n\ndef text_match_string(text):\n    patterns = r'\\b\\w+'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmph3pzh51k.py\", line 10, in <module>\n    assert text_match_string(\" python\")==('Not matched!')\nAssertionError", "passed": false}
{"task_id": 45, "completion": "import math\nfrom functools import reduce\n\ndef get_gcd(arr):\n    return reduce(math.gcd, arr)\n", "result": "passed", "passed": true}
{"task_id": 46, "completion": "def test_distinct(data):\n    if len(data) == len(set(data)):\n        return True\n    else:\n        return False\n", "result": "passed", "passed": true}
{"task_id": 47, "completion": "def compute_last_digit(a, b):\n    def count_trailing_zeros(n):\n        count = 0\n        power_of_5 = 5\n        while n >= power_of_5:\n            count += n // power_of_5\n            power_of_5 *= 5\n        return count\n    \n    if b < a:\n        return 0\n    elif b == a:\n        return 1\n    else:\n        trailing_zeros_b_fact = count_trailing_zeros(b)\n        trailing_zeros_a_fact = count_trailing_zeros(a)\n        trailing_zeros_result = trailing_zeros_b_fact - trailing_zeros_a_fact\n        \n        # Calculate the last digit of the remaining factors after removing the trailing zeros\n        last_digit = 1\n        for i in range(a + 1, b + 1):\n            last_digit = (last_digit * (i % 10)) % 10\n        \n        return last_digit\n\n# Example usage:\nprint(compute_last_digit(5, 10))  # Output should be the last digit of 10!/5!\n", "result": "passed", "passed": true}
{"task_id": 48, "completion": "def odd_bit_set_number(n):\n    # Initialize a mask with all odd bits set to 1\n    mask = 0x55555555  # This mask has all odd bits (1-indexed) set to 1\n    \n    # Use bitwise OR to set all odd bits of n to 1\n    return n | mask\n\n# Example usage:\nnumber = 0b10101010  # Binary representation of 170\nresult = odd_bit_set_number(number)\nprint(bin(result))  # Output will be 0b11111110\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpeha_jhnf.py\", line 13, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(list1, s=0):\n    result = [row[s] for row in list1]\n    return result\n", "result": "passed", "passed": true}
{"task_id": 50, "completion": "def min_length_list(lists):\n    min_list = min(lists, key=lambda x: len(x))\n    return min_list\n\n# Example usage:\nlists = [[1, 2, 3], [4, 5], [6, 7, 8, 9]]\nprint(min_length_list(lists))  # Output: [4, 5]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkc7_tej8.py\", line 9, in <module>\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nAssertionError", "passed": false}
{"task_id": 51, "completion": "def check_equilateral(a, b, c):\n    \"\"\"\n    Check if a triangle with sides a, b, and c is equilateral.\n    \n    Parameters:\n    a (float): Length of the first side.\n    b (float): Length of the second side.\n    c (float): Length of the third side.\n    \"\"\"\n    if a == b == c:\n        print(\"The triangle is equilateral.\")\n    else:\n        print(\"The triangle is not equilateral.\")\n\n# Example usage:\n# check_equilateral(3, 3, 3)  # Output: The triangle is equilateral.\n# check_equilateral(3, 4, 5)  # Output: The triangle is not equilateral.\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpl5_xkhuy.py\", line 19, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram.\n    \"\"\"\n    if base < 0 or height < 0:\n        raise ValueError(\"Base and height must be non-negative numbers.\")\n    \n    area = base * height\n    return area\n", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(s):\n    if len(s) == 0:\n        return False\n    return s[0] == s[-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9c81ob28.py\", line 6, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 54, "completion": "def counting_sort(arr):\n    if not arr:\n        return arr\n    \n    # Find the maximum value in the array to determine the size of the count array\n    max_val = max(arr)\n    \n    # Initialize the count array with zeros\n    count = [0] * (max_val + 1)\n    \n    # Populate the count array where each index represents a value in the input array\n    for num in arr:\n        count[num] += 1\n    \n    # Reconstruct the sorted array based on the count array\n    sorted_index = 0\n    for i in range(len(count)):\n        while count[i] > 0:\n            arr[sorted_index] = i\n            sorted_index += 1\n            count[i] -= 1\n    \n    return arr\n\n# Example usage:\narr = [4, 2, 2, 8, 3, 3, 1]\nsorted_arr = counting_sort(arr)\nprint(sorted_arr)  # Output: [1, 2, 2, 3, 3, 4, 8]\n", "result": "passed", "passed": true}
{"task_id": 55, "completion": "def tn_gp(a, r, n):\n    \"\"\"\n    Calculate the t-nth term of a geometric series.\n\n    Parameters:\n    a (float): The first term of the series.\n    r (float): The common ratio of the series.\n    n (int): The term number to find.\n\n    Returns:\n    float: The t-nth term of the geometric series.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"The term number 'n' must be a positive integer.\")\n    \n    return a * (r ** (n - 1))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpidfiilnt.py\", line 18, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def reverse_number(n):\n    rev = 0\n    while n > 0:\n        rem = n % 10\n        rev = (rev * 10) + rem\n        n //= 10\n    return rev\n\ndef check(n):\n    if n == 2 * reverse_number(n) - 1:\n        return True\n    else:\n        return False\n", "result": "passed", "passed": true}
{"task_id": 57, "completion": "def find_max_num(digits):\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n    \n    # Convert each digit to a string and concatenate them\n    max_num = ''.join(map(str, digits))\n    \n    # Return the result as an integer\n    return int(max_num)\n\n# Example usage:\ndigits = [3, 1, 4, 1, 5, 9]\nprint(find_max_num(digits))  # Output: 954311\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpzzanmjyr.py\", line 15, in <module>\n    assert find_max_num([1,2,3],3) == 321\nTypeError: find_max_num() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 58, "completion": "def opposite_signs(x, y):\n    return (x ^ y) < 0\n", "result": "passed", "passed": true}
{"task_id": 59, "completion": "def is_octagonal(n):\n    if n < 1:\n        raise ValueError('n must be a positive integer')\n    return n * (3 * n - 2)\n", "result": "passed", "passed": true}
{"task_id": 60, "completion": "def max_len_sub(arr):\n    if not arr:\n        return 0\n    \n    n = len(arr)\n    dp = [1] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) <= 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)\n\n# Example usage:\narr = [1, 2, 3, 4, 5]\nprint(max_len_sub(arr))  # Output: 5\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmcdmtzmd.py\", line 19, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}

{"task_id": 11, "requirement": "Code Standard", "completion": "def remove_occ(s, char):\n    \"\"\"\n    Removes the first and last occurrences of a specified character from the string.\n\n    Parameters:\n    s (str): The input string.\n    char (str): The character to be removed.\n\n    Returns:\n    str: The modified string with the first and last occurrences of the specified character removed.\n    \"\"\"\n    try:\n        first_index = s.index(char)\n        last_index = s.rindex(char)\n    except ValueError:\n        return s\n\n    if first_index == last_index:\n        return \"\"\n\n    if first_index > 0:\n        start = s[:first_index]\n    else:\n        start = \"\"\n\n    if last_index < len(s) - 1:\n        end = s[last_index + 1:]\n    else:\n        end = \"\"\n\n    return start + end\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppwma323z.py\", line 19, in <module>\n    assert remove_occ(\"abcda\",\"a\") == \"bcd\"\nAssertionError", "passed": false}
{"task_id": 12, "requirement": "Code Standard", "completion": "def sort_matrix(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order based on the sum of its rows.\n\n    :param matrix: A list of lists representing the matrix.\n    :return: The sorted matrix.\n    \"\"\"\n    # Use sorted with a key that calculates the sum of each row\n    sorted_matrix = sorted(matrix, key=sum)\n    return sorted_matrix\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_matrix = [\n        [3, 5, 1],\n        [2, 2, 2],\n        [4, 0, 1]\n    ]\n    \n    sorted_matrix = sort_matrix(example_matrix)\n    print(\"Sorted Matrix:\")\n    for row in sorted_matrix:\n        print(row)\n", "result": "passed", "passed": true}
{"task_id": 14, "requirement": "Code Standard", "completion": "def find_triangular_prism_volume(base, height_of_triangle, height_of_prism):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base (float): The base length of the triangular face.\n    height_of_triangle (float): The height of the triangular face.\n    height_of_prism (float): The height (or length) of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    # Calculate the area of the triangular base\n    base_area = 0.5 * base * height_of_triangle\n    \n    # Calculate the volume of the prism\n    volume = base_area * height_of_prism\n    \n    return volume\n\n# Example usage:\nbase_length = 5.0  # example base length of the triangle\ntriangle_height = 4.0  # example height of the triangle\nprism_height = 10.0  # example height of the prism\n\nvolume = find_triangular_prism_volume(base_length, triangle_height, prism_height)\nprint(f\"The volume of the triangular prism is {volume:.2f} cubic units.\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3qobf4oz.py\", line 13, in <module>\n    assert find_volume(10,8,6) == 240\nNameError: name 'find_volume' is not defined", "passed": false}
{"task_id": 15, "requirement": "Code Standard", "completion": "def split_lowerstring(s):\n    \"\"\"\n    Splits the given string at lowercase letters.\n\n    Parameters:\n    s (str): The input string to be split.\n\n    Returns:\n    list: A list of substrings split at lowercase letters.\n    \"\"\"\n    result = []\n    current_substring = ''\n\n    for char in s:\n        if char.islower():\n            if current_substring:\n                result.append(current_substring)\n            current_substring = char\n        else:\n            current_substring += char\n\n    if current_substring:\n        result.append(current_substring)\n\n    return result\n\n# Example usage:\ninput_string = \"HelloWorld2023Python\"\noutput = split_lowerstring(input_string)\nprint(output)  # Output: ['H', 'W', '2023P', 'y', 't', 'h', 'o', 'n']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpr644pryn.py\", line 18, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "requirement": "Code Standard", "completion": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Finds sequences of lowercase letters joined with an underscore in the given text.\n\n    Args:\n        text (str): The input string to search within.\n\n    Returns:\n        list: A list of found sequences.\n    \"\"\"\n    # Regular expression pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    \n    # Find all matches in the text\n    matches = re.findall(pattern, text)\n    \n    return matches\n\n# Example usage:\nexample_text = \"Here is an example_text_to_match and another_example_sequence but notThisOne\"\nprint(text_lowercase_underscore(example_text))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqz9uet2p.py\", line 11, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "requirement": "Code Standard", "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Parameters:\n    side_length (float): The length of one side of the square.\n\n    Returns:\n    float: The perimeter of the square.\n    \"\"\"\n    return 4 * side_length\n\n# Example usage:\nside_length = 5.0  # Example side length of the square\nperimeter = square_perimeter(side_length)\nprint(f\"The perimeter of the square with side length {side_length} is {perimeter}\")\n", "result": "passed", "passed": true}
{"task_id": 18, "requirement": "Code Standard", "completion": "def remove_dirty_chars(source, chars_to_remove):\n    \"\"\"\n    Removes characters from the source string that are present in the chars_to_remove string.\n\n    :param source: The original string from which characters will be removed.\n    :param chars_to_remove: A string containing characters to be removed from the source string.\n    :return: A new string with characters removed.\n    \"\"\"\n    # Create a translation table for str.translate() method\n    translation_table = str.maketrans('', '', chars_to_remove)\n    \n    # Use translate method to remove specified characters\n    cleaned_string = source.translate(translation_table)\n    \n    return cleaned_string\n\n# Example usage:\nsource = \"Hello, World!\"\nchars_to_remove = \",!\"\ncleaned_source = remove_dirty_chars(source, chars_to_remove)\nprint(cleaned_source)  # Output: Hello World\n", "result": "passed", "passed": true}
{"task_id": 19, "requirement": "Code Standard", "completion": "def has_duplicates(arr):\n    \"\"\"\n    Check if the given list of integers contains any duplicate elements.\n\n    Args:\n        arr (list): A list of integers.\n\n    Returns:\n        bool: True if there is at least one duplicate element, False otherwise.\n    \"\"\"\n    # Convert the list to a set and compare lengths\n    return len(arr) != len(set(arr))\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(has_duplicates([1, 2, 3, 4]))  # Output: False\n    print(has_duplicates([1, 2, 3, 3]))  # Output: True\n    print(has_duplicates([7, 8, 9, 7]))  # Output: True\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpm709pvw4.py\", line 10, in <module>\n    assert test_duplicate(([1,2,3,4,5]))==False\nNameError: name 'test_duplicate' is not defined", "passed": false}
{"task_id": 20, "requirement": "Code Standard", "completion": "def is_woodall(number):\n    \"\"\"\n    Check if the given number is a Woodall number.\n\n    Args:\n        number (int): The number to check.\n\n    Returns:\n        bool: True if the number is a Woodall number, False otherwise.\n    \"\"\"\n    n = 1\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number == number:\n            return True\n        elif woodall_number > number:\n            return False\n        n += 1\n", "result": "passed", "passed": true}
{"task_id": 21, "requirement": "Code Standard", "completion": "def multiples_of_num(base_number, count_multiples):\n    \"\"\"\n    Generates a list of the first 'count_multiples' multiples of 'base_number'.\n\n    Parameters:\n    base_number (int): The base number.\n    count_multiples (int): The number of multiples to generate.\n\n    Returns:\n    list: A list containing the first 'count_multiples' multiples of 'base_number'.\n    \"\"\"\n    return [i * base_number for i in range(1, count_multiples + 1)]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpb9rmyppe.py\", line 3, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "requirement": "Code Standard", "completion": "def find_first_duplicate(nums):\n    seen = set()\n    \n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    \n    # If no duplicates found, return None\n    return None\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpj9rt8rki.py\", line 10, in <module>\n    assert find_first_duplicate([1, 2, 3, 4])==-1\nAssertionError", "passed": false}
{"task_id": 23, "requirement": "Code Standard", "completion": "def maximum_sum(list_of_lists):\n    \"\"\"\n    Finds the maximum sum of elements in a list of lists.\n\n    Parameters:\n    list_of_lists (list): A list containing multiple sublists.\n\n    Returns:\n    int: The maximum sum of elements found in any of the sublists.\n    \"\"\"\n    if not list_of_lists:  # Check if the input list is empty\n        return 0\n\n    max_sum = float('-inf')  # Initialize max_sum to negative infinity\n    \n    for sublist in list_of_lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum\n\n# Example usage:\nexample_list = [[1, 2, 3], [4, 5, 6], [10, -1, 2]]\nprint(maximum_sum(example_list))  # Output should be 15 (from [4, 5, 6])\n", "result": "passed", "passed": true}
{"task_id": 24, "requirement": "Code Standard", "completion": "def binary_to_decimal(binary_str):\n    \"\"\"\n    Convert a binary number (given as a string) to its decimal equivalent.\n\n    :param binary_str: A string representing a binary number.\n    :return: An integer representing the decimal equivalent of the binary number.\n    \"\"\"\n    decimal_value = 0\n    \n    for index, digit in enumerate(reversed(binary_str)):\n        if digit not in ('0', '1'):\n            raise ValueError(\"Input contains invalid characters other than 0 or 1.\")\n        \n        decimal_value += int(digit) * (2 ** index)\n    \n    return decimal_value\n\n# Example usage:\nbinary_number = \"1101\"\ndecimal_number = binary_to_decimal(binary_number)\nprint(f\"The decimal equivalent of {binary_number} is {decimal_number}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjcc27vt4.py\", line 12, in <module>\n    assert binary_to_decimal(100) == 4\n  File \"/tmp/tmpjcc27vt4.py\", line 3, in binary_to_decimal\n    for index, digit in enumerate(reversed(binary_str)):\nTypeError: 'int' object is not reversible", "passed": false}
{"task_id": 25, "requirement": "Code Standard", "completion": "from functools import reduce\nfrom operator import mul\n\ndef find_product(array):\n    \"\"\"\n    Calculate the product of non-repeated elements in a given array.\n\n    Parameters:\n    array (list): A list of integers.\n\n    Returns:\n    int: The product of non-repeated elements.\n    \"\"\"\n    # Find unique elements in the array\n    unique_elements = set(array)\n    \n    # Calculate the product of unique elements using reduce and mul\n    product = reduce(mul, unique_elements, 1)\n    \n    return product\n\n# Example usage:\narray = [1, 2, 3, 4, 2, 3, 5]\nprint(find_product(array))  # Output should be 60 (1 * 2 * 3 * 4 * 5)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpcye0if5l.py\", line 12, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "requirement": "Code Standard", "completion": "def check_k_elements(tuples_list, k):\n    \"\"\"\n    Check if each tuple in the given list has exactly k elements.\n\n    :param tuples_list: List of tuples to be checked.\n    :param k: The number of elements that each tuple should have.\n    :return: True if all tuples have exactly k elements, False otherwise.\n    \"\"\"\n    for tup in tuples_list:\n        if len(tup) != k:\n            return False\n    return True\n\n# Example usage:\nexample_tuples = [(1, 2), (3, 4, 5), (6, 7)]\nk = 2\n\nresult = check_k_elements(example_tuples, k)\nprint(f\"All tuples have {k} elements: {result}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2rfijx7l.py\", line 11, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "requirement": "Code Standard", "completion": "def remove_strings(string_list):\n    \"\"\"\n    Removes all digits from each string in the given list of strings.\n\n    :param string_list: List of strings from which digits need to be removed.\n    :return: A new list of strings with all digits removed.\n    \"\"\"\n    return [''.join(filter(lambda char: not char.isdigit(), s)) for s in string_list]\n\n# Example usage:\nexample_list = [\"hello123\", \"world456\", \"test789\", \"12345\"]\nresult = remove_strings(example_list)\nprint(result)  # Output: ['hello', 'world', 'test', '']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpblus9_x0.py\", line 7, in <module>\n    assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\nNameError: name 'remove' is not defined", "passed": false}
{"task_id": 28, "requirement": "Code Standard", "completion": "def binomial_coefficient(n, k):\n    \"\"\"\n    Calculate the binomial coefficient C(n, k), also known as \"n choose k\".\n    \n    Args:\n        n (int): The total number of items.\n        k (int): The number of items to choose.\n    \n    Returns:\n        int: The binomial coefficient.\n    \"\"\"\n    # Ensure k is the smaller of the two values to optimize calculations\n    if k > n - k:\n        k = n - k\n    \n    # Initialize the result\n    result = 1\n    \n    # Calculate the binomial coefficient using the multiplicative formula\n    for i in range(k):\n        result *= (n - i)\n        result //= (i + 1)\n    \n    return result\n\n# Example usage:\nprint(binomial_coefficient(5, 2))  # Output: 10\nprint(binomial_coefficient(10, 3)) # Output: 120\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmptm5d6a9_.py\", line 15, in <module>\n    assert binomial_coeff(5,2) == 10\nNameError: name 'binomial_coeff' is not defined", "passed": false}
{"task_id": 29, "requirement": "Code Standard", "completion": "from collections import Counter\n\ndef get_odd_occurrence(array):\n    \"\"\"\n    Find the element that occurs an odd number of times in the array.\n\n    :param array: List[int] - A list of integers.\n    :return: int or None - The element that occurs an odd number of times, or None if no such element exists.\n    \"\"\"\n    # Count the occurrences of each element in the array\n    counts = Counter(array)\n    \n    # Iterate through the counted items\n    for element, count in counts.items():\n        # Check if the count is odd\n        if count % 2 != 0:\n            return element\n    \n    # If no element has an odd occurrence, return None\n    return None\n\n# Example usage:\narray = [1, 2, 3, 2, 3, 1, 3]\nprint(get_odd_occurrence(array))  # Output should be 3\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7yzu1j_b.py\", line 15, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "requirement": "Code Standard", "completion": "def count_substring_with_equal_ends(s):\n    \"\"\"\n    Counts all substrings of the input string `s` that start and end with the same character.\n\n    :param s: Input string\n    :return: The number of substrings that start and end with the same character\n    \"\"\"\n    n = len(s)\n    count = 0\n\n    # Iterate through each character in the string\n    for i in range(n):\n        # Count substrings starting from index `i`\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n\n    return count\n\n# Example usage:\ninput_string = \"abca\"\nresult = count_substring_with_equal_ends(input_string)\nprint(f\"Number of substrings starting and ending with the same character: {result}\")\n", "result": "passed", "passed": true}
{"task_id": 31, "requirement": "Code Standard", "completion": "from collections import Counter\nimport heapq\n\ndef func(nums_list, k):\n    \"\"\"\n    Finds the top k integers that occur most frequently from given lists of sorted and distinct integers.\n    \n    :param nums_list: List of lists containing sorted and distinct integers.\n    :param k: The number of top frequent integers to return.\n    :return: A list of the top k integers with their highest frequency.\n    \"\"\"\n    # Flatten the list of lists into a single list\n    all_nums = [num for sublist in nums_list for num in sublist]\n    \n    # Count the frequency of each integer\n    freq_counter = Counter(all_nums)\n    \n    # Use a min heap to keep track of the top k elements based on frequency\n    # We use negative frequencies because heapq is a min-heap by default\n    heap = []\n    \n    for num, freq in freq_counter.items():\n        if len(heap) < k:\n            heapq.heappush(heap, (-freq, num))\n        else:\n            # If the current frequency is higher than the smallest frequency in the heap\n            if -freq > heap[0][0]:\n                heapq.heapreplace(heap, (-freq, num))\n    \n    # Extract the top k elements from the heap\n    top_k = [item[1] for item in heap]\n    \n    return top_k\n\n# Example usage\nnums_list = [[1, 2, 3], [2, 3, 4], [4, 5, 6]]\nk = 3\nprint(func(nums_list, k))  # Output will depend on the input but might be something like [2, 3, 4]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpz3zy8jrk.py\", line 25, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "requirement": "Code Standard", "completion": "def max_prime_factors(number):\n    \"\"\"\n    Find the largest prime factor of a given number.\n\n    :param number: The integer to find the largest prime factor of.\n    :return: The largest prime factor of the given number.\n    \"\"\"\n    # Initialize the largest prime factor\n    largest_factor = -1\n    \n    # Remove all even factors\n    while number % 2 == 0:\n        largest_factor = 2\n        number //= 2\n    \n    # Check for odd factors\n    factor = 3\n    while factor * factor <= number:\n        while number % factor == 0:\n            largest_factor = factor\n            number //= factor\n        factor += 2\n    \n    # If the remaining number is a prime number greater than 2\n    if number > 2:\n        largest_factor = number\n    \n    return largest_factor\n\n# Example usage:\nprint(max_prime_factors(13195))  # Output should be 29\nprint(max_prime_factors(600851475143))  # Output should be 6857\n", "result": "passed", "passed": true}
{"task_id": 33, "requirement": "Code Standard", "completion": "def decimal_to_binary(decimal_number):\n    \"\"\"\n    Convert a decimal number to its binary representation.\n\n    Parameters:\n    decimal_number (int): A non-negative integer to be converted to binary.\n\n    Returns:\n    str: The binary representation of the decimal number.\n    \"\"\"\n    if decimal_number == 0:\n        return \"0\"\n\n    binary_number = \"\"\n    while decimal_number > 0:\n        remainder = decimal_number % 2\n        binary_number = str(remainder) + binary_number\n        decimal_number = decimal_number // 2\n\n    return binary_number\n\n# Example usage:\nprint(decimal_to_binary(10))  # Output: \"1010\"\nprint(decimal_to_binary(255)) # Output: \"11111111\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8wf3z3qw.py\", line 13, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "requirement": "Code Standard", "completion": "def find_missing(arr):\n    \"\"\"\n    Finds the missing number in a sorted array of integers where exactly one number\n    in the range [arr[0], arr[-1]] is missing. The array is assumed to be sorted.\n\n    :param arr: List[int] - A sorted list of integers with exactly one missing element.\n    :return: int - The missing number in the array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        # Check if the difference between the current index and the value at that index matches the expected difference\n        if arr[mid] - mid != arr[0]:\n            # If it doesn't match, the missing number is in the left half\n            right = mid - 1\n        else:\n            # If it matches, the missing number is in the right half\n            left = mid + 1\n\n    # At this point, left should point to the position where the missing number would be\n    return arr[0] + left\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmps8sa6vi4.py\", line 14, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "requirement": "Code Standard", "completion": "def find_rectangular_number(n):\n    \"\"\"\n    Calculate the n-th rectangular number.\n\n    Parameters:\n    n (int): The position in the sequence of rectangular numbers.\n\n    Returns:\n    int: The n-th rectangular number.\n    \"\"\"\n    return n * (n + 1)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test the function with some values\n    print(\"The 5th rectangular number is:\", find_rectangular_number(5))  # Output should be 30\n    print(\"The 7th rectangular number is:\", find_rectangular_number(7))  # Output should be 56\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxnxo3dwy.py\", line 8, in <module>\n    assert find_rect_num(4) == 20\nNameError: name 'find_rect_num' is not defined", "passed": false}
{"task_id": 36, "requirement": "Code Standard", "completion": "def find_nth_digit(numerator, denominator, n):\n    \"\"\"\n    Find the nth digit in the decimal representation of the division result of two given numbers.\n\n    Parameters:\n    numerator (int): The numerator of the fraction.\n    denominator (int): The denominator of the fraction.\n    n (int): The position of the digit to find (1-based index).\n\n    Returns:\n    int: The nth digit in the decimal representation of the division result.\n    \"\"\"\n    # Perform the division\n    division_result = numerator / denominator\n    \n    # Convert the result to a string to easily access individual digits\n    division_str = str(division_result)\n    \n    # Check if the result has a decimal part\n    if '.' in division_str:\n        # Get the decimal part and remove the leading '.'\n        decimal_part = division_str.split('.')[1]\n    else:\n        # If there's no decimal part, return -1 or handle as needed\n        return -1\n\n    # Ensure n is within bounds\n    if n > len(decimal_part):\n        return -1  # Or raise an exception if preferred\n\n    # Return the nth digit\n    return int(decimal_part[n - 1])\n", "result": "passed", "passed": true}
{"task_id": 37, "requirement": "Code Standard", "completion": "def sort_mixed_list(mixed_list):\n    \"\"\"\n    Sorts a mixed list of integers and strings.\n\n    Args:\n        mixed_list (list): A list containing integers and strings.\n\n    Returns:\n        list: A sorted list with integers and strings in ascending order.\n    \"\"\"\n    def custom_sort_key(item):\n        \"\"\"\n        Converts the item to an integer if possible, otherwise returns the item unchanged.\n\n        Args:\n            item: The item to convert or return.\n\n        Returns:\n            int or str: The converted integer or the original item.\n        \"\"\"\n        try:\n            # Convert the item to an integer\n            return int(item)\n        except ValueError:\n            # Return the item unchanged if conversion fails\n            return item\n\n    # Sort the list using the custom key\n    sorted_list = sorted(mixed_list, key=custom_sort_key)\n    return sorted_list\n\n# Example usage:\nmixed_list = [10, \"2\", \"3\", 5, \"1\", \"4\"]\nsorted_list = sort_mixed_list(mixed_list)\nprint(sorted_list)  # Output: [1, 2, 3, 4, 5, 10]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmps77gwtw3.py\", line 16, in <module>\n    assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n  File \"/tmp/tmps77gwtw3.py\", line 10, in sort_mixed_list\n    sorted_list = sorted(mixed_list, key=custom_sort_key)\nTypeError: '<' not supported between instances of 'str' and 'int'", "passed": false}
{"task_id": 38, "requirement": "Code Standard", "completion": "def div_even_odd(numbers):\n    # Initialize variables to store the first even and odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Iterate through the list to find the first even and odd numbers\n    for num in numbers:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n    \n    # Check if both first_even and first_odd are found\n    if first_even is not None and first_odd is not None:\n        # Perform the division and return the result\n        return first_even / first_odd\n    else:\n        # Handle the case where either or both numbers are not found\n        if first_even is None:\n            return \"No even number found\"\n        elif first_odd is None:\n            return \"No odd number found\"\n        else:\n            return \"Both even and odd numbers found but cannot perform division\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1f7yaksf.py\", line 40, in <module>\n    check_code_style(div_even_odd)\n  File \"/tmp/tmp1f7yaksf.py\", line 36, in check_code_style\n    assert result.total_errors == 0, \"Code does not conform to PEP 8 standards.\"\nAssertionError: Code does not conform to PEP 8 standards.", "passed": false}
{"task_id": 39, "requirement": "Code Standard", "completion": "from collections import Counter\n\ndef rearrange_string(s):\n    # Count the frequency of each character in the string\n    char_count = Counter(s)\n    \n    # Find the maximum frequency of any character\n    max_char_count = max(char_count.values())\n    \n    # Check if the maximum frequency exceeds half the length of the string plus one\n    if max_char_count > (len(s) + 1) // 2:\n        return False\n    \n    # If there's only one unique character or all other characters appear less frequently,\n    # it's always possible to rearrange the string as required.\n    if len(set(s)) == 1 or (max_char_count == (len(s) + 1) // 2 and len(set(s)) == 2):\n        return True\n    \n    # Try to place the most frequent character first\n    for i in range(len(s)):\n        if s[i] != s[(i - 1) % len(s)]:\n            return True\n    \n    return False\n\n# Example usage:\nprint(rearrange_string(\"aabbcc\"))  # Output: True\nprint(rearrange_string(\"aaabc\"))   # Output: False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkya_j88u.py\", line 22, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "requirement": "Code Standard", "completion": "from collections import Counter\n\ndef freq_element(nested_list):\n    \"\"\"\n    Find the frequency of elements in a given list of lists.\n\n    Parameters:\n    nested_list (list): A list of lists containing hashable elements.\n\n    Returns:\n    dict: A dictionary with elements as keys and their frequencies as values.\n    \"\"\"\n    # Flatten the list of lists into a single list\n    flat_list = [item for sublist in nested_list for item in sublist]\n    \n    # Use Counter to count the frequency of each element\n    frequency_counter = Counter(flat_list)\n    \n    return dict(frequency_counter)\n\n# Example usage:\nnested_lists = [[1, 2, 3], [4, 5, 6], [1, 2, 7], [8, 9, 10]]\nresult = freq_element(nested_lists)\nprint(result)  # Output: {1: 2, 2: 2, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1}\n", "result": "passed", "passed": true}
{"task_id": 41, "requirement": "Code Standard", "completion": "def filter_evennumbers(numbers):\n    \"\"\"\n    Filters out even numbers from the given list.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    list: A list containing only the even numbers from the input list.\n    \"\"\"\n    # Using filter() with a lambda function to filter even numbers\n    even_numbers = list(filter(lambda x: x % 2 == 0, numbers))\n    return even_numbers\n\n# Example usage:\nexample_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nfiltered_list = filter_evennumbers(example_list)\nprint(filtered_list)  # Output: [2, 4, 6, 8, 10]\n", "result": "passed", "passed": true}
{"task_id": 42, "requirement": "Code Standard", "completion": "def find_sum(arr):\n    \"\"\"\n    Find the sum of repeated elements in a given array.\n\n    Parameters:\n    arr (list): A list of integers or floats.\n\n    Returns:\n    int or float: The sum of repeated elements in the array.\n    \"\"\"\n    # Step 1: Create a dictionary to keep track of the count of each element\n    element_count = {}\n    \n    # Step 2: Count the occurrences of each element\n    for element in arr:\n        if element in element_count:\n            element_count[element] += 1\n        else:\n            element_count[element] = 1\n    \n    # Step 3: Calculate the sum of elements that appear more than once\n    sum_of_repeated_elements = sum(element * count for element, count in element_count.items() if count > 1)\n    \n    return sum_of_repeated_elements\n\n# Example usage:\narr = [1, 2, 3, 2, 4, 5, 5, 6, 7, 8, 8]\nresult = find_sum(arr)\nprint(\"Sum of repeated elements:\", result)  # Output should be 2 + 2 + 5 + 5 + 8 + 8 = 32\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0g1yfuxt.py\", line 17, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Code Standard", "completion": "import re\n\ndef text_match(text):\n    \"\"\"\n    Check if the input text matches the pattern of one or more lowercase letters joined with an underscore.\n\n    Args:\n        text (str): The input string to be checked.\n\n    Returns:\n        bool: True if the text matches the pattern, False otherwise.\n    \"\"\"\n    pattern = r'^[a-z]+_[a-z]+$'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(text_match(\"hello_world\"))  # Should return True\n    print(text_match(\"Hello_World\"))  # Should return False because it contains uppercase letters\n    print(text_match(\"hello_world_123\"))  # Should return False because it contains digits\n    print(text_match(\"_hello_world\"))  # Should return False because it starts with an underscore\n    print(text_match(\"hello_world_\"))  # Should return False because it ends with an underscore\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpum4uco5q.py\", line 15, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 44, "requirement": "Code Standard", "completion": "import re\n\ndef text_match_word(string, word):\n    \"\"\"\n    Matches a specified word at the beginning of the input string.\n    \n    Parameters:\n    - string (str): The string to be searched.\n    - word (str): The word to match at the beginning of the input string.\n    \n    Returns:\n    - bool: True if the word matches at the beginning, False otherwise.\n    \"\"\"\n    # Create a regex pattern to match the word at the beginning of the string\n    pattern = r'\\A' + re.escape(word)\n    \n    # Use re.match to check if the pattern matches the start of the string\n    if re.match(pattern, string):\n        return True\n    else:\n        return False\n\n# Example usage:\ninput_str = \"Hello world, this is a test.\"\nword = \"Hello\"\nprint(text_match_word(input_str, word))  # Output: True\n\ninput_str = \"This is a test, hello world.\"\nword = \"hello\"\nprint(text_match_word(input_str, word))  # Output: False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplojiadgg.py\", line 17, in <module>\n    assert text_match_string(\" python\")==('Not matched!')\nNameError: name 'text_match_string' is not defined", "passed": false}
{"task_id": 45, "requirement": "Code Standard", "completion": "import math\n\ndef get_greatest_common_divisor(numbers):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of all elements in the given list.\n\n    :param numbers: List[int] - A list of integers.\n    :return: int - The GCD of all elements in the list.\n    \"\"\"\n    # Initialize gcd with the first element of the list\n    current_gcd = numbers[0]\n    \n    # Iterate through the list starting from the second element\n    for number in numbers[1:]:\n        current_gcd = math.gcd(current_gcd, number)\n        \n        # If current_gcd becomes 1, no need to proceed further as GCD cannot be less than 1\n        if current_gcd == 1:\n            break\n    \n    return current_gcd\n\n# Example usage:\nnumbers = [24, 36, 48]\nprint(get_greatest_common_divisor(numbers))  # Output should be 12\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpcft4z_lz.py\", line 15, in <module>\n    assert get_gcd([2, 4, 6, 8, 16]) == 2\nNameError: name 'get_gcd' is not defined", "passed": false}
{"task_id": 46, "requirement": "Code Standard", "completion": "def are_all_numbers_distinct(numbers):\n    \"\"\"\n    Determine if all numbers in the given list are distinct.\n\n    :param numbers: List of integers or floats.\n    :return: True if all numbers are distinct, False otherwise.\n    \"\"\"\n    return len(numbers) == len(set(numbers))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpojy9xnih.py\", line 3, in <module>\n    assert test_distinct([1,5,7,9]) == True\nNameError: name 'test_distinct' is not defined", "passed": false}
{"task_id": 48, "requirement": "Code Standard", "completion": "def set_odd_bits(number):\n    \"\"\"\n    Sets all odd bits of the given number.\n\n    :param number: An integer whose odd bits are to be set.\n    :return: An integer with all odd bits set.\n    \"\"\"\n    # Create a mask with odd bits set\n    mask = 0x55555555\n    \n    # Apply the mask using bitwise OR operation\n    result = number | mask\n    \n    return result\n\n# Example usage:\nnumber = 10  # Binary: 1010\nprint(set_odd_bits(number))  # Output should be 21 (Binary: 10101)\n\nnumber = 21  # Binary: 10101\nprint(set_odd_bits(number))  # Output should be 21 (already has all odd bits set)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplr06eajh.py\", line 12, in <module>\n    assert odd_bit_set_number(10) == 15\nNameError: name 'odd_bit_set_number' is not defined", "passed": false}
{"task_id": 49, "requirement": "Code Standard", "completion": "def get_specified_element(two_d_list, index=0):\n    \"\"\"\n    Extracts the specified element (default is the first) from each sublist in a 2D list.\n\n    :param two_d_list: A list of lists where each sublist contains elements.\n    :param index: The index of the element to be extracted from each sublist. Default is 0 (first element).\n    :return: A list containing the extracted elements.\n    \"\"\"\n    # Use list comprehension to extract the specified element from each sublist\n    extracted_elements = [sublist[index] for sublist in two_d_list if sublist]\n    \n    return extracted_elements\n\n# Example usage:\ntwo_d_list = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n    [10, 11, 12]\n]\n\n# Extracting the first element from each sublist\nprint(get_specified_element(two_d_list))  # Output: [1, 4, 7, 10]\n\n# Extracting the second element from each sublist\nprint(get_specified_element(two_d_list, index=1))  # Output: [2, 5, 8, 11]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpb2bnmobf.py\", line 16, in <module>\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\nNameError: name 'specified_element' is not defined", "passed": false}
{"task_id": 51, "requirement": "Code Standard", "completion": "def check_equilateral(side1, side2, side3):\n    \"\"\"\n    Check if a triangle with given side lengths is equilateral.\n\n    Parameters:\n    side1 (float): The length of the first side.\n    side2 (float): The length of the second side.\n    side3 (float): The length of the third side.\n\n    Returns:\n    None: Prints whether the triangle is equilateral or not.\n    \"\"\"\n    if side1 == side2 == side3:\n        print(\"The triangle is equilateral.\")\n    else:\n        print(\"The triangle is not equilateral.\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8_2n9of2.py\", line 6, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "requirement": "Code Standard", "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram.\n    \"\"\"\n    if base < 0 or height < 0:\n        raise ValueError(\"Base and height must be non-negative numbers.\")\n    \n    return base * height\n\n# Example usage:\nbase = 5.0  # Example base length\nheight = 3.0  # Example height\narea = parallelogram_area(base, height)\nprint(f\"The area of the parallelogram with base {base} and height {height} is {area}\")\n", "result": "passed", "passed": true}
{"task_id": 53, "requirement": "Code Standard", "completion": "def check_equality(s):\n    \"\"\"\n    Check if the first and last characters of a given string are equal.\n\n    Args:\n        s (str): The input string to be checked.\n\n    Returns:\n        bool: True if the first and last characters are equal, False otherwise.\n    \"\"\"\n    # Check if the string is empty or has only one character\n    if len(s) < 2:\n        return True\n\n    # Compare the first and last characters\n    return s[0] == s[-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpo9ugv4sc.py\", line 7, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 54, "requirement": "Code Standard", "completion": "def counting_sort(arr):\n    \"\"\"\n    Sorts an array of non-negative integers using the counting sort algorithm.\n\n    :param arr: List of non-negative integers to be sorted.\n    :return: Sorted list of integers.\n    \"\"\"\n    if not arr:\n        return []\n\n    # Find the maximum value in the array\n    max_value = max(arr)\n\n    # Initialize count array with zeros\n    count = [0] * (max_value + 1)\n\n    # Count each element\n    for num in arr:\n        count[num] += 1\n\n    # Reconstruct the sorted array\n    sorted_arr = []\n    for i, cnt in enumerate(count):\n        sorted_arr.extend([i] * cnt)\n\n    return sorted_arr\n\n# Example usage:\nif __name__ == \"__main__\":\n    unsorted_array = [4, 2, 2, 8, 3, 3, 1]\n    sorted_array = counting_sort(unsorted_array)\n    print(\"Sorted Array:\", sorted_array)\n", "result": "passed", "passed": true}
{"task_id": 55, "requirement": "Code Standard", "completion": "def tn_gp(a, r, n):\n    \"\"\"\n    Calculate the n-th term of a geometric series.\n\n    Parameters:\n    a (float): The first term of the geometric series.\n    r (float): The common ratio of the geometric series.\n    n (int): The term number to find.\n\n    Returns:\n    float: The n-th term of the geometric series.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    a_n = a * (r ** (n - 1))\n    return a_n\n\n# Example usage:\na = 3  # First term\nr = 2  # Common ratio\nn = 5  # Term number to find\n\nprint(f\"The {n}-th term of the geometric series is: {tn_gp(a, r, n)}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpe_ghxw_4.py\", line 11, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "requirement": "Code Standard", "completion": "def check_number(number):\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n\n    Args:\n        number (int): The number to be checked.\n\n    Returns:\n        bool: True if the condition is met, False otherwise.\n    \"\"\"\n    # Convert the number to a string to easily reverse it\n    num_str = str(number)\n    \n    # Reverse the string representation of the number\n    reversed_num_str = num_str[::-1]\n    \n    # Convert the reversed string back to an integer\n    reversed_number = int(reversed_num_str)\n    \n    # Calculate twice the reversed number\n    twice_reversed = 2 * reversed_number\n    \n    # Check if the result is one more than the original number\n    return twice_reversed == number + 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp21lz46a8.py\", line 12, in <module>\n    assert check(70) == False\nNameError: name 'check' is not defined", "passed": false}
{"task_id": 57, "requirement": "Code Standard", "completion": "def find_max_number(digits):\n    \"\"\"\n    Finds the largest number that can be formed from the given list of digits.\n\n    :param digits: A list of integers (digits).\n    :return: An integer representing the largest number that can be formed.\n    \"\"\"\n    # Convert each digit to a string for easy concatenation\n    str_digits = [str(digit) for digit in digits]\n    \n    # Sort the digits in descending order\n    str_digits.sort(reverse=True)\n    \n    # Join the sorted digits to form the largest number\n    max_number_str = ''.join(str_digits)\n    \n    # Convert the string back to an integer\n    max_number = int(max_number_str)\n    \n    return max_number\n\n# Example usage:\ndigits = [5, 3, 0, 7, 4]\nprint(find_max_number(digits))  # Output: 75430\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpcisxxf63.py\", line 14, in <module>\n    assert find_max_num([1,2,3],3) == 321\nNameError: name 'find_max_num' is not defined", "passed": false}
{"task_id": 58, "requirement": "Code Standard", "completion": "def opposite_signs(x, y):\n    \"\"\"\n    Check if two integers have opposite signs.\n\n    Parameters:\n    x (int): First integer.\n    y (int): Second integer.\n\n    Returns:\n    bool: True if the integers have opposite signs, False otherwise.\n    \"\"\"\n    # Get the sign bit of both numbers\n    # The sign bit is the MSB (most significant bit)\n    # For positive numbers, the sign bit is 0\n    # For negative numbers, the sign bit is 1\n    sign_x = x >> (x.bit_length() - 1)\n    sign_y = y >> (y.bit_length() - 1)\n\n    # If the sign bits are different, the numbers have opposite signs\n    return sign_x != sign_y\n\n# Example usage:\nprint(opposite_signs(10, -5))  # Output: True\nprint(opposite_signs(-10, -5)) # Output: False\nprint(opposite_signs(10, 5))   # Output: False\n", "result": "passed", "passed": true}
{"task_id": 59, "requirement": "Code Standard", "completion": "import math\n\ndef is_octagonal(number):\n    \"\"\"\n    Determine if the given number is an octagonal number.\n    \n    Args:\n        number (int): The number to check.\n    \n    Returns:\n        bool: True if the number is an octagonal number, False otherwise.\n    \"\"\"\n    # Coefficients for the quadratic equation 3n^2 - 2n - number = 0\n    a = 3\n    b = -2\n    c = -number\n    \n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is non-negative and a perfect square\n    if discriminant >= 0:\n        sqrt_discriminant = int(math.sqrt(discriminant))\n        if sqrt_discriminant * sqrt_discriminant == discriminant:\n            # Calculate the potential n values\n            n1 = (-b + sqrt_discriminant) / (2*a)\n            n2 = (-b - sqrt_discriminant) / (2*a)\n            \n            # Check if either n1 or n2 is a positive integer\n            if n1 > 0 and n1.is_integer():\n                return True\n            if n2 > 0 and n2.is_integer():\n                return True\n    \n    return False\n\n# Example usage:\nprint(is_octagonal(1))   # True, 1 is the first octagonal number\nprint(is_octagonal(8))   # True, 8 is the second octagonal number\nprint(is_octagonal(15))  # True, 15 is the third octagonal number\nprint(is_octagonal(22))  # False, 22 is not an octagonal number\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplulxuvj3.py\", line 27, in <module>\n    assert is_octagonal(5) == 65\nAssertionError", "passed": false}
{"task_id": 60, "requirement": "Code Standard", "completion": "def max_length_subsequence(arr):\n    if not arr:\n        return 0\n    \n    # Dictionary to store the length of the longest subsequence ending with a particular element\n    dp = {}\n    \n    # Iterate through the array\n    for num in arr:\n        # The length of the subsequence ending with `num` can be derived from the lengths of subsequences\n        # ending with `num-1` or `num+1`, whichever is available in the dictionary.\n        dp[num] = 1 + max(dp.get(num - 1, 0), dp.get(num + 1, 0))\n    \n    # Return the maximum value from the dictionary, which represents the length of the longest subsequence\n    return max(dp.values())\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkokjvmgp.py\", line 13, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nNameError: name 'max_len_sub' is not defined", "passed": false}

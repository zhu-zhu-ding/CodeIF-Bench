{"task_id": 14, "requirement": "Input-Output Conditions", "completion": "def find_volume(base_area, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base_area (float or int): The area of the triangular base.\n    height (float or int): The height of the triangular prism.\n    length (float or int): The length of the triangular prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n\n    Raises:\n    ValueError: If any of the inputs are not positive numbers.\n    \"\"\"\n    if not all(isinstance(x, (int, float)) for x in [base_area, height, length]):\n        raise TypeError(\"All inputs must be numeric (int or float).\")\n    \n    if not all(x > 0 for x in [base_area, height, length]):\n        raise ValueError(\"All inputs must be positive numbers.\")\n    \n    volume = base_area * height * length\n    return volume\n\n# Example usage:\nbase_area = 6.0  # example area of the triangular base\nprism_height = 10.0  # example height of the prism\n\ntry:\n    volume = find_volume(base_area, prism_height, prism_height)\n    print(f\"The volume of the triangular prism is {volume:.2f} cubic units.\")\nexcept Exception as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp30olyqhl.py\", line 16, in <module>\n    assert find_volume(10,8,6) == 240\nAssertionError", "passed": false}
{"task_id": 15, "requirement": "Input-Output Conditions", "completion": "import re\n\ndef split_lowerstring(s):\n    \"\"\"\n    Splits the given string at lowercase letters.\n    \n    Parameters:\n    s (str): The input string to be split.\n    \n    Returns:\n    list: A list of substrings split at lowercase letters.\n    \"\"\"\n    # Use regular expression to find segments starting with a lowercase letter followed by non-lowercase letters\n    result = re.findall('[a-z][^a-z]*', s)\n    return result\n\n# Example usage:\ninput_string = \"HelloWorld2023Python\"\noutput = split_lowerstring(input_string)\nprint(output)  # Output: ['H', 'e', 'llo', 'W', 'orld', '2023', 'P', 'y', 'thon']\n", "result": "passed", "passed": true}
{"task_id": 16, "requirement": "Input-Output Conditions", "completion": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    This function checks if there are sequences of lowercase letters joined with an underscore in the given text.\n    \n    Args:\n    text (str): The input string to search within.\n    \n    Returns:\n    str: 'Found a match!' if any such sequence is found, otherwise 'Not matched!'.\n    \"\"\"\n    # Regular expression pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    \n    # Check if any match is found\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\nexample_text = \"Here is an example_text_to_match and another_example_sequence but notThisOne\"\nprint(text_lowercase_underscore(example_text))\n", "result": "passed", "passed": true}
{"task_id": 17, "requirement": "Input-Output Conditions", "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Parameters:\n    side_length (int): The length of one side of the square.\n\n    Returns:\n    int: The perimeter of the square.\n\n    Raises:\n    ValueError: If the input is not a non-negative integer.\n    \"\"\"\n    if not isinstance(side_length, int) or side_length < 0:\n        raise ValueError(\"Side length must be a non-negative integer.\")\n    \n    return 4 * side_length\n\n# Example usage:\ntry:\n    side_length = 5  # Example side length of the square\n    perimeter = square_perimeter(side_length)\n    print(f\"The perimeter of the square with side length {side_length} is {perimeter}\")\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 18, "requirement": "Input-Output Conditions", "completion": "def remove_dirty_chars(source, chars_to_remove):\n    \"\"\"\n    Removes characters from the source string that are present in the chars_to_remove string.\n\n    :param source: The original string from which characters will be removed.\n    :param chars_to_remove: A string containing characters to be removed from the source string.\n    :return: A new string with characters removed.\n    :raises ValueError: If either input string contains non-alphabetic characters.\n    \"\"\"\n    # Validate input strings to ensure they contain only alphabetic characters\n    if not (source.isalpha() and chars_to_remove.isalpha()):\n        raise ValueError('Input strings must only contain alphabetic characters.')\n    \n    # Create a translation table for str.translate() method\n    translation_table = str.maketrans('', '', chars_to_remove)\n    \n    # Use translate method to remove specified characters\n    cleaned_string = source.translate(translation_table)\n    \n    return cleaned_string\n\n# Example usage:\nsource = \"Hello, World!\"\nchars_to_remove = \",!\"\ntry:\n    cleaned_source = remove_dirty_chars(source, chars_to_remove)\n    print(cleaned_source)  # Output: Hello World\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 19, "requirement": "Input-Output Conditions", "completion": "def test_duplicate(arr):\n    \"\"\"\n    Check if the given list of integers contains any duplicate elements.\n\n    Args:\n    arr (list): A list of integers.\n\n    Returns:\n    bool: True if there is at least one duplicate element, False otherwise.\n\n    Raises:\n    TypeError: If the input is not a list.\n    \"\"\"\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Convert the list to a set and compare lengths\n    return len(arr) != len(set(arr))\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    try:\n        print(test_duplicate([1, 2, 3, 4]))  # Output: False\n        print(test_duplicate([1, 2, 3, 3]))  # Output: True\n        print(test_duplicate([7, 8, 9, 7]))  # Output: True\n        print(test_duplicate('not a list'))   # This will raise a TypeError\n    except TypeError as e:\n        print(e)\n", "result": "passed", "passed": true}
{"task_id": 20, "requirement": "Input-Output Conditions", "completion": "def is_woodall(number):\n    \"\"\"\n    Check if the given number is a Woodall number.\n    \n    Args:\n    number (int): The number to check.\n    \n    Returns:\n    bool: True if the number is a Woodall number, False otherwise.\n    \"\"\"\n    if number < 1:\n        return False\n    \n    n = 1\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number == number:\n            return True\n        elif woodall_number > number:\n            return False\n        n += 1\n", "result": "passed", "passed": true}
{"task_id": 23, "requirement": "Input-Output Conditions", "completion": "def maximum_sum(list_of_lists):\n    \"\"\"\n    Finds the maximum sum of elements in a list of lists.\n    \n    Parameters:\n    list_of_lists (list): A list containing multiple sublists with integer elements.\n    \n    Returns:\n    int: The maximum sum of elements found in any of the sublists.\n    \"\"\"\n    if not list_of_lists:  # Check if the input list is empty\n        return 0\n    \n    max_sum = float('-inf')  # Initialize max_sum to negative infinity\n    \n    for sublist in list_of_lists:\n        if not all(isinstance(x, int) for x in sublist):\n            raise ValueError(\"All elements in the sublists must be integers.\")\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum\n\n# Example usage:\nexample_list = [[1, 2, 3], [4, 5, 6], [10, -1, 2]]\nprint(maximum_sum(example_list))  # Output should be 15 (from [4, 5, 6])\n", "result": "passed", "passed": true}
{"task_id": 25, "requirement": "Input-Output Conditions", "completion": "from functools import reduce\nfrom operator import mul\n\ndef find_product(arr):\n    # Convert the list to a set to remove duplicates\n    unique_elements = set(arr)\n    \n    # Calculate the product of unique elements using reduce and mul\n    if not unique_elements:\n        return 0  # Return 0 if there are no unique elements\n    \n    product = reduce(mul, unique_elements, 1)\n    \n    return product\n\n# Example usage:\narr = [1, 2, 3, 4, 2, 3, 5]\nprint(find_product(arr))  # Output should be 60 (1 * 2 * 3 * 4 * 5)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpii5p0ukl.py\", line 14, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "requirement": "Input-Output Conditions", "completion": "def check_k_elements(tuples_list, k):\n    \"\"\"\n    Check if each tuple in the given list has exactly k elements.\n\n    :param tuples_list: List of tuples to be checked.\n    :param k: The number of elements that each tuple should have.\n    :return: True if all tuples have exactly k elements, False otherwise.\n    \"\"\"\n    for tup in tuples_list:\n        if len(tup) != k:\n            return False\n    return True\n\n# Example usage:\nexample_tuples = [(1, 2), (3, 4, 5), (6, 7)]\nk = 2\n\nresult = check_k_elements(example_tuples, k)\nprint(f\"All tuples have exactly {k} elements: {result}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpbj0cvdly.py\", line 11, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 28, "requirement": "Input-Output Conditions", "completion": "def binomial_coeff(n, k):\n    # Input validation\n    if not isinstance(n, int) or not isinstance(k, int):\n        raise ValueError('Both n and k must be integers.')\n    if n < 0 or k < 0:\n        raise ValueError('Both n and k must be non-negative integers.')\n    if k > n:\n        raise ValueError('k must be less than or equal to n.')\n    \n    # If k is more than n-k, then it's more efficient to calculate binomial_coeff(n, n-k)\n    if k > n - k:\n        k = n - k\n    \n    # Initialize result\n    result = 1\n    \n    # Calculate value of [n*(n-1)*---*(n-k+1)] / [k*(k-1)*---*1]\n    for i in range(k):\n        result *= (n - i)\n        result //= (i + 1)\n    \n    return result\n\n# Example usage:\nprint(binomial_coeff(5, 2))  # Output: 10\nprint(binomial_coeff(10, 3)) # Output: 120\n", "result": "passed", "passed": true}
{"task_id": 30, "requirement": "Input-Output Conditions", "completion": "def count_substring_with_equal_ends(s):\n    \"\"\"\n    Counts all substrings of the input string s that start and end with the same character.\n\n    :param s: Input string\n    :type s: str\n    :return: The number of substrings that start and end with the same character\n    :rtype: int\n    \"\"\"\n    n = len(s)\n    count = 0\n\n    # Iterate through each character in the string\n    for i in range(n):\n        # Count substrings starting from index i\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n\n    return count\n\n# Example usage:\ninput_string = \"abca\"\nresult = count_substring_with_equal_ends(input_string)\nprint(f\"Number of substrings starting and ending with the same character: {result}\")\n", "result": "passed", "passed": true}
{"task_id": 32, "requirement": "Input-Output Conditions", "completion": "import math\n\ndef max_prime_factors(n):\n    # Input validation\n    if not isinstance(n, int) or n < 2:\n        raise ValueError('Input must be a positive integer greater than or equal to 2.')\n    \n    # Initialize the largest prime factor\n    largest_factor = -1\n    \n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        largest_factor = 2\n        n //= 2\n    \n    # Now n must be odd, start checking for odd factors\n    factor = 3\n    while factor * factor <= n:\n        while n % factor == 0:\n            largest_factor = factor\n            n //= factor\n        factor += 2\n    \n    # If n is a prime number greater than 2\n    if n > 2:\n        largest_factor = n\n    \n    return largest_factor\n\n# Example usage:\nprint(max_prime_factors(13195))  # Output should be 29\nprint(max_prime_factors(600851475143))  # Output should be 6857\n", "result": "passed", "passed": true}
{"task_id": 35, "requirement": "Input-Output Conditions", "completion": "def find_rect_num(n):\n    \"\"\"\n    Find the n-th rectangular number.\n\n    Parameters:\n    n (int): The position in the sequence of rectangular numbers.\n\n    Returns:\n    int: The n-th rectangular number.\n    \"\"\"\n    if not isinstance(n, int) or n < 1:\n        raise ValueError('Input must be a positive integer.')\n    \n    return n * (n + 1)\n", "result": "passed", "passed": true}
{"task_id": 36, "requirement": "Input-Output Conditions", "completion": "def find_nth_digit(numerator, denominator, n):\n    \"\"\"\n    Find the nth digit in the decimal representation of the division result of two given numbers.\n\n    Parameters:\n    numerator (int): The numerator of the fraction.\n    denominator (int): The denominator of the fraction.\n    n (int): The position of the digit to find (1-based index).\n\n    Returns:\n    int: The nth digit in the decimal representation of the division result.\n    \"\"\"\n    # Initialize variables\n    remainder = numerator % denominator\n    count = 0\n    current_digit = 0\n\n    while True:\n        remainder *= 10\n        current_digit = remainder // denominator\n        remainder %= denominator\n        count += 1\n\n        if count == n:\n            return current_digit\n\n# Example usage:\nnumerator = 1\ndenominator = 7\nn = 4\nprint(find_nth_digit(numerator, denominator, n))  # Output should be the 4th digit in the decimal representation of 1/7\n", "result": "passed", "passed": true}
{"task_id": 38, "requirement": "Input-Output Conditions", "completion": "def div_even_odd(numbers):\n    # Initialize variables to store the first even and odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Iterate through the list to find the first even and odd numbers\n    for num in numbers:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n    \n    # Check if both first_even and first_odd are found\n    if first_even is not None and first_odd is not None:\n        # Perform the division and return the result\n        return first_even / first_odd\n    else:\n        # Handle the case where either or both numbers are not found\n        raise ValueError(\"List must contain at least one even and one odd number\")\n\n# Example usage\nnumbers = [5, 3, 2, 8, 10]\nprint(div_even_odd(numbers))  # Output should be 2.0\n\nnumbers = [7, 9, 11]\ntry:\n    print(div_even_odd(numbers))\nexcept ValueError as e:\n    print(e)  # Output should be \"List must contain at least one even and one odd number\"\n\nnumbers = [2, 4, 6]\ntry:\n    print(div_even_odd(numbers))\nexcept ValueError as e:\n    print(e)  # Output should be \"List must contain at least one even and one odd number\"\n\nnumbers = [2, 4, 6, 1, 3]\nprint(div_even_odd(numbers))  # Output should be 2.0\n\nnumbers = [2, 4, 6, 1, 3, 5]\nprint(div_even_odd(numbers))  # Output should be 2.0\n", "result": "passed", "passed": true}
{"task_id": 39, "requirement": "Input-Output Conditions", "completion": "import heapq\nfrom collections import Counter\n\ndef rearrange_string(s):\n    if not s:\n        return \"\"\n    \n    # Count the frequency of each character\n    char_count = Counter(s)\n    \n    # Create a max-heap based on character frequency\n    max_heap = [(-freq, char) for char, freq in char_count.items()]\n    heapq.heapify(max_heap)\n    \n    prev_char = None\n    prev_freq = 0\n    result = []\n    \n    while max_heap or prev_freq:\n        if prev_freq < 0:\n            heapq.heappush(max_heap, (prev_freq, prev_char))\n        \n        if not max_heap:\n            return \"\"  # It's not possible to rearrange the string\n        \n        freq, char = heapq.heappop(max_heap)\n        result.append(char)\n        prev_char = char\n        prev_freq = freq + 1  # Increase frequency since it's stored as negative\n    \n    return ''.join(result)\n\n# Example usage:\nprint(rearrange_string(\"aabbcc\"))  # Output: \"abcabc\" or another valid rearrangement\nprint(rearrange_string(\"aaabc\"))   # Output: \"abaca\" or another valid rearrangement\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpk1qe9dl7.py\", line 27, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 42, "requirement": "Input-Output Conditions", "completion": "def find_sum(arr):\n    # Step 1: Create a dictionary to keep track of the count of each element\n    element_count = {}\n    \n    # Step 2: Count the occurrences of each element\n    for element in arr:\n        if element in element_count:\n            element_count[element] += 1\n        else:\n            element_count[element] = 1\n    \n    # Step 3: Check if there are any repeated elements\n    if any(count > 1 for count in element_count.values()):\n        # Step 4: Calculate the sum of elements that appear more than once\n        sum_of_repeated_elements = sum(element * count for element, count in element_count.items() if count > 1)\n        return sum_of_repeated_elements\n    else:\n        return 0\n\n# Example usage:\narr = [1, 2, 3, 4, 5, 6, 7, 8]\nresult = find_sum(arr)\nprint(\"Sum of repeated elements:\", result)  # Output should be 0 because there are no repeated elements\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1vu84fw0.py\", line 21, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Input-Output Conditions", "completion": "import re\n\ndef text_match(text):\n    # Define the pattern for lowercase letters joined with an underscore\n    pattern = '^[a-z]+_[a-z]+$'\n    \n    # Search for the pattern in the given text\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\nprint(text_match(\"hello_world\"))  # Should return 'Found a match!'\nprint(text_match(\"Hello_World\"))  # Should return 'Not matched!'\nprint(text_match(\"hello_world_123\"))  # Should return 'Not matched!'\nprint(text_match(\"_hello_world\"))  # Should return 'Not matched!'\nprint(text_match(\"hello_world_\"))  # Should return 'Not matched!'\n", "result": "passed", "passed": true}
{"task_id": 46, "requirement": "Input-Output Conditions", "completion": "def test_distinct(numbers):\n    \"\"\"\n    Determine if all numbers in the given list are distinct.\n\n    :param numbers: List of integers.\n    :return: True if all numbers are distinct, False otherwise.\n    \"\"\"\n    return len(numbers) == len(set(numbers))\n", "result": "passed", "passed": true}
{"task_id": 48, "requirement": "Input-Output Conditions", "completion": "def odd_bit_set_number(n):\n    \"\"\"\n    Sets all odd bits of the given number n.\n    \n    :param n: An integer whose odd bits are to be set.\n    :return: An integer with all odd bits set.\n    \"\"\"\n    # Create a mask with odd bits set\n    mask = 0xAAAAAAAA  # This mask sets all odd bits (1-based index) to 1\n    \n    # Apply the mask using bitwise OR operation\n    result = n | mask\n    \n    return result\n\n# Example usage:\nn = 10  # Binary: 1010\nprint(odd_bit_set_number(n))  # Output should be 21 (Binary: 10101)\n\nn = 21  # Binary: 10101\nprint(odd_bit_set_number(n))  # Output should be 21 (already has all odd bits set)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmprq5r7kbt.py\", line 12, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "requirement": "Input-Output Conditions", "completion": "def specified_element(two_d_list, index=0):\n    \"\"\"\n    Extracts the specified element (default is the first) from each sublist in a 2D list.\n\n    :param two_d_list: A list of lists where each sublist contains elements.\n    :param index: The index of the element to be extracted from each sublist. Default is 0 (first element).\n    :return: A list containing the extracted elements.\n    \"\"\"\n    # Check if the input list is empty\n    if not two_d_list:\n        return []\n    \n    # Use list comprehension to extract the specified element from each sublist\n    extracted_elements = [sublist[index] for sublist in two_d_list if len(sublist) > index]\n    \n    return extracted_elements\n\n# Example usage:\ntwo_d_list = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n    [10, 11, 12]\n]\n\n# Extracting the first element from each sublist\nprint(specified_element(two_d_list))  # Output: [1, 4, 7, 10]\n\n# Extracting the second element from each sublist\nprint(specified_element(two_d_list, index=1))  # Output: [2, 5, 8, 11]\n\n# Handling an empty input list\nempty_list = []\nprint(specified_element(empty_list))  # Output: []\n\n# Handling a sublist with fewer elements than the specified index\npartial_list = [\n    [1, 2],\n    [3, 4, 5],\n    [6]\n]\nprint(specified_element(partial_list, index=1))  # Output: [2, 4]\n", "result": "passed", "passed": true}
{"task_id": 50, "requirement": "Input-Output Conditions", "completion": "def min_length_list(list_of_lists):\n    # Find the list with the minimum length\n    min_list = min(list_of_lists, key=len)\n    # Return a tuple containing the length of the shortest list and the list itself\n    return (len(min_list), min_list)\n\n# Example usage:\nexample_lists = [[1, 2, 3], [4, 5], [6, 7, 8, 9], [], [0]]\nprint(min_length_list(example_lists))  # Output: (0, [])\n", "result": "passed", "passed": true}
{"task_id": 52, "requirement": "Input-Output Conditions", "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float or int): The length of the base of the parallelogram.\n    height (float or int): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram.\n\n    Raises:\n    ValueError: If either base or height is not a positive number.\n    \"\"\"\n    if not (isinstance(base, (int, float)) and isinstance(height, (int, float))):\n        raise TypeError(\"Both base and height must be numerical values.\")\n    \n    if base <= 0 or height <= 0:\n        raise ValueError(\"Both base and height must be positive numbers.\")\n    \n    return base * height\n\n# Example usage:\ntry:\n    base = 5.0  # Example base length\n    height = 3.0  # Example height\n    area = parallelogram_area(base, height)\n    print(f\"The area of the parallelogram with base {base} and height {height} is {area}\")\nexcept Exception as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_ppmwjlq.py\", line 19, in <module>\n    assert parallelogram_area(0, 10) == 0\n  File \"/tmp/tmp_ppmwjlq.py\", line 5, in parallelogram_area\n    raise ValueError(\"Both base and height must be positive numbers.\")\nValueError: Both base and height must be positive numbers.", "passed": false}
{"task_id": 53, "requirement": "Input-Output Conditions", "completion": "def check_equality(s):\n    \"\"\"\n    Check if the first and last characters of a given string are equal.\n\n    Args:\n    s (str): The input string to be checked.\n\n    Returns:\n    str: 'Equal' if the first and last characters are equal, 'Not Equal' otherwise.\n    \"\"\"\n    # Ensure the input is a string\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string.\")\n\n    # Check if the string is empty or has only one character\n    if len(s) < 2:\n        return 'Equal'\n\n    # Compare the first and last characters\n    if s[0] == s[-1]:\n        return 'Equal'\n    else:\n        return 'Not Equal'\n\n# Example usage:\ntest_string = \"radar\"\nresult = check_equality(test_string)\nprint(f\"The first and last characters of '{test_string}' are {result}.\")\n", "result": "passed", "passed": true}
{"task_id": 54, "requirement": "Input-Output Conditions", "completion": "def counting_sort(arr):\n    \"\"\"\n    Sorts an array of non-negative integers using the counting sort algorithm.\n    \n    :param arr: List of non-negative integers to be sorted.\n    :type arr: list[int]\n    :raises ValueError: If the input contains negative integers or non-integer values.\n    :return: Sorted list of integers.\n    :rtype: list[int]\n    \"\"\"\n    if not isinstance(arr, list):\n        raise TypeError('Input must be a list.')\n    \n    if any(not isinstance(x, int) or x < 0 for x in arr):\n        raise ValueError('All elements in the list must be non-negative integers.')\n    \n    if not arr:\n        return []\n\n    # Find the maximum value in the array\n    max_value = max(arr)\n\n    # Initialize count array with zeros\n    count = [0] * (max_value + 1)\n\n    # Count each element\n    for num in arr:\n        count[num] += 1\n\n    # Reconstruct the sorted array\n    sorted_arr = []\n    for i, cnt in enumerate(count):\n        sorted_arr.extend([i] * cnt)\n\n    return sorted_arr\n\n# Example usage:\nif __name__ == \"__main__\":\n    unsorted_array = [4, 2, 2, 8, 3, 3, 1]\n    try:\n        sorted_array = counting_sort(unsorted_array)\n        print(\"Sorted Array:\", sorted_array)\n    except Exception as e:\n        print(f\"Error: {e}\")\n", "result": "passed", "passed": true}
{"task_id": 57, "requirement": "Input-Output Conditions", "completion": "def find_max_num(digits, num_digits):\n    \"\"\"\n    Finds the largest number that can be formed from the given list of digits.\n\n    :param digits: A list of integers (digits).\n    :param num_digits: An integer representing the number of digits to consider.\n    :return: An integer representing the largest number that can be formed.\n    \"\"\"\n    if len(digits) < num_digits:\n        raise ValueError(\"The number of digits provided is less than the required number of digits.\")\n    \n    # Convert each digit to a string for easy concatenation\n    str_digits = [str(digit) for digit in digits[:num_digits]]\n    \n    # Sort the digits in descending order\n    str_digits.sort(reverse=True)\n    \n    # Join the sorted digits to form the largest number\n    max_num_str = ''.join(str_digits)\n    \n    # Convert the string back to an integer\n    max_num = int(max_num_str)\n    \n    return max_num\n\n# Example usage:\ndigits = [5, 3, 0, 7, 4]\nnum_digits = 4\nprint(find_max_num(digits, num_digits))  # Output: 7543\n", "result": "passed", "passed": true}
{"task_id": 58, "requirement": "Input-Output Conditions", "completion": "def opposite_signs(a, b):\n    \"\"\"\n    Check if two integers have opposite signs.\n\n    Parameters:\n    a (int): First integer.\n    b (int): Second integer.\n\n    Returns:\n    bool: True if the integers have opposite signs, False otherwise.\n\n    Raises:\n    TypeError: If either input is not an integer.\n    \"\"\"\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise TypeError('Both inputs must be integers.')\n\n    # Get the sign bit of both numbers\n    # The sign bit is the MSB (most significant bit)\n    # For positive numbers, the sign bit is 0\n    # For negative numbers, the sign bit is 1\n    sign_a = a >> (a.bit_length() - 1)\n    sign_b = b >> (b.bit_length() - 1)\n\n    # If the sign bits are different, the numbers have opposite signs\n    return sign_a != sign_b\n\n# Example usage:\ntry:\n    print(opposite_signs(10, -5))  # Output: True\n    print(opposite_signs(-10, -5)) # Output: False\n    print(opposite_signs(10, 5))   # Output: False\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpw1jmvsan.py\", line 23, in <module>\n    assert opposite_signs(0, 0) == False\n  File \"/tmp/tmpw1jmvsan.py\", line 8, in opposite_signs\n    sign_a = a >> (a.bit_length() - 1)\nValueError: negative shift count", "passed": false}
{"task_id": 60, "requirement": "Input-Output Conditions", "completion": "def max_len_sub(arr, _):\n    if not arr:\n        return 0\n    \n    # Dictionary to store the length of the longest subsequence ending with a particular element\n    dp = {}\n    \n    # Iterate through the array\n    for num in arr:\n        # The length of the subsequence ending with `num` can be derived from the lengths of subsequences\n        # ending with `num-1` or `num+1`, whichever is available in the dictionary.\n        dp[num] = 1 + max(dp.get(num - 1, 0), dp.get(num + 1, 0))\n    \n    # Return the maximum value from the dictionary, which represents the length of the longest subsequence\n    return max(dp.values(), default=0)\n\n# Example usage:\narr = [1, 2, 3, 2, 4, 5]\nresult = max_len_sub(arr, None)  # The second parameter is ignored but required by the function signature\nprint(result)  # Output should be 4 (subsequence: 1, 2, 3, 2)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpa30t7rp_.py\", line 18, in <module>\n    assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4\nAssertionError", "passed": false}

{"task_id": 11, "requirement": "Code Complexity", "completion": "def remove_occ(s, char):\n    \"\"\"\n    Removes the first and last occurrences of a specified character from the string.\n\n    Parameters:\n    s (str): The input string.\n    char (str): The character to be removed.\n\n    Returns:\n    str: The modified string with the first and last occurrences of the specified character removed.\n    \"\"\"\n    try:\n        first_index = s.index(char)\n    except ValueError:\n        return s\n\n    try:\n        last_index = s.rindex(char)\n    except ValueError:\n        return s\n\n    if first_index == last_index:\n        return s[:first_index] + s[first_index + 1:]\n\n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]\n", "result": "passed", "passed": true}
{"task_id": 14, "requirement": "Code Complexity", "completion": "def find_volume(base, base_height, prism_height):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base (float): The base length of the triangular face.\n    base_height (float): The height of the triangular face.\n    prism_height (float): The height (or length) of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    # Calculate the volume of the triangular prism in one step\n    volume = (base * base_height * prism_height) / 2\n    \n    return volume\n\n# Example usage:\nbase_length = 5.0  # example base length of the triangle\ntriangle_height = 4.0  # example height of the triangle\nprism_height = 10.0  # example height of the prism\n\nvolume = find_volume(base_length, triangle_height, prism_height)\nprint(f\"The volume of the triangular prism is {volume:.2f} cubic units.\")\n", "result": "passed", "passed": true}
{"task_id": 15, "requirement": "Code Complexity", "completion": "import re\n\ndef split_lowerstring(s):\n    \"\"\"\n    Splits the given string at lowercase letters.\n    \n    Parameters:\n    s (str): The input string to be split.\n    \n    Returns:\n    list: A list of substrings split at lowercase letters.\n    \"\"\"\n    # Use regular expression to find all substrings starting with a lowercase letter\n    return re.findall('[A-Z][^A-Z]*|^[^A-Z]*', s)\n\n# Example usage:\ninput_string = \"HelloWorld2023Python\"\noutput = split_lowerstring(input_string)\nprint(output)  # Output: ['H', 'W', '2023P', 'y', 't', 'h', 'o', 'n']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpa90ob32e.py\", line 9, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "requirement": "Code Complexity", "completion": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    This function searches for sequences of lowercase letters joined with an underscore in the given text.\n    \n    Args:\n    text (str): The input string to search within.\n    \n    Returns:\n    list: A list of found sequences.\n    \"\"\"\n    # Regular expression pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    \n    # Find all matches in the text\n    matches = re.findall(pattern, text)\n    \n    return matches\n\n# Example usage:\nexample_text = \"Here is an example_text_to_match and another_example_sequence but notThisOne\"\nprint(text_lowercase_underscore(example_text))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpc_xoziev.py\", line 11, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "requirement": "Code Complexity", "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Parameters:\n    side_length (float): The length of one side of the square.\n\n    Returns:\n    float: The perimeter of the square.\n    \"\"\"\n    return 4 * side_length\n\n# Example usage:\nside_length = 5.0  # Example side length of the square\nperimeter = square_perimeter(side_length)\nprint(f\"The perimeter of the square with side length {side_length} is {perimeter}\")\n", "result": "passed", "passed": true}
{"task_id": 20, "requirement": "Code Complexity", "completion": "import math\n\ndef is_power_of_two(n):\n    \"\"\"Check if a number is a power of two.\"\"\"\n    return (n & (n - 1)) == 0 and n != 0\n\ndef is_woodall(number):\n    \"\"\"\n    Check if the given number is a Woodall number.\n    \n    Args:\n    number (int): The number to check.\n    \n    Returns:\n    bool: True if the number is a Woodall number, False otherwise.\n    \"\"\"\n    if number < 1:\n        return False\n    candidate = number + 1\n    if candidate % 2 == 0 and is_power_of_two(candidate // 2):\n        return True\n    return False\n\n# Example usage:\nprint(is_woodall(7))   # True, because 7 = 1 * 2^3 - 1\nprint(is_woodall(23))  # False, 23 is not a Woodall number\nprint(is_woodall(4095))# True, because 4095 = 14 * 2^14 - 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpoyvut6wh.py\", line 16, in <module>\n    assert is_woodall(383) == True\nAssertionError", "passed": false}
{"task_id": 21, "requirement": "Code Complexity", "completion": "def multiples_of_num(n, m):\n    \"\"\"\n    Generates a list of the first m multiples of n.\n\n    Parameters:\n    n (int): The base number.\n    m (int): The number of multiples to generate.\n\n    Returns:\n    list: A list containing the first m multiples of n.\n    \"\"\"\n    return [(i + 1) * n for i in range(m)]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdpyxgvtz.py\", line 3, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 24, "requirement": "Code Complexity", "completion": "def binary_to_decimal(binary_str):\n    \"\"\"\n    Convert a binary number (given as a string) to its decimal equivalent.\n    \n    :param binary_str: A string representing a binary number.\n    :return: An integer representing the decimal equivalent of the binary number.\n    \"\"\"\n    decimal_value = 0\n    for digit in binary_str:\n        if digit not in ('0', '1'):\n            raise ValueError(\"Input contains invalid characters other than 0 or 1.\")\n        decimal_value = decimal_value * 2 + int(digit)\n    return decimal_value\n\n# Example usage:\nbinary_number = \"1101\"\ndecimal_number = binary_to_decimal(binary_number)\nprint(f\"The decimal equivalent of {binary_number} is {decimal_number}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7zxv6kbr.py\", line 12, in <module>\n    assert binary_to_decimal(100) == 4\n  File \"/tmp/tmp7zxv6kbr.py\", line 3, in binary_to_decimal\n    for digit in binary_str:\nTypeError: 'int' object is not iterable", "passed": false}
{"task_id": 32, "requirement": "Code Complexity", "completion": "import math\n\ndef max_prime_factors(n):\n    largest_factor = -1\n    \n    # Remove all factors of 2\n    while n % 2 == 0:\n        largest_factor = 2\n        n //= 2\n    \n    # Check for odd factors\n    factor = 3\n    while factor <= math.isqrt(n):\n        while n % factor == 0:\n            largest_factor = factor\n            n //= factor\n        factor += 2\n    \n    # If n is still greater than 2, it is a prime factor\n    if n > 2:\n        largest_factor = n\n    \n    return largest_factor\n\n# Example usage:\nprint(max_prime_factors(13195))  # Output should be 29\nprint(max_prime_factors(600851475143))  # Output should be 6857\n", "result": "passed", "passed": true}
{"task_id": 33, "requirement": "Code Complexity", "completion": "def decimal_to_binary(decimal_number):\n    \"\"\"\n    Convert a decimal number to its binary representation using built-in functions.\n\n    Parameters:\n    decimal_number (int): A non-negative integer to be converted to binary.\n\n    Returns:\n    str: The binary representation of the decimal number.\n    \"\"\"\n    if not isinstance(decimal_number, int) or decimal_number < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    return bin(decimal_number)[2:]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppxt2vhqb.py\", line 5, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 35, "requirement": "Code Complexity", "completion": "def find_rect_num(n):\n    \"\"\"\n    Find the n-th rectangular number.\n\n    Parameters:\n    n (int): The position in the sequence of rectangular numbers.\n\n    Returns:\n    int: The n-th rectangular number.\n    \"\"\"\n    return n * (n + 1)\n", "result": "passed", "passed": true}
{"task_id": 36, "requirement": "Code Complexity", "completion": "def find_nth_digit(numerator, denominator, n):\n    \"\"\"\n    Find the nth digit in the decimal representation of the division result of two given numbers.\n\n    Parameters:\n    numerator (int): The numerator of the fraction.\n    denominator (int): The denominator of the fraction.\n    n (int): The position of the digit to find (1-based index).\n\n    Returns:\n    int: The nth digit in the decimal representation of the division result.\n    \"\"\"\n    # Perform the division\n    division_result = numerator / denominator\n    \n    # Convert the result to a string to easily access individual digits\n    division_str = str(division_result)\n    \n    # Check if the result has a decimal part\n    if '.' not in division_str:\n        return -1  # No decimal part, so no nth digit exists\n    \n    # Extract the decimal part and remove the leading '.'\n    decimal_part = division_str.split('.')[1]\n    \n    # Ensure n is within bounds\n    if n > len(decimal_part):\n        return -1  # n is out of bounds\n    \n    # Return the nth digit\n    return int(decimal_part[n - 1])\n", "result": "passed", "passed": true}
{"task_id": 38, "requirement": "Code Complexity", "completion": "def div_even_odd(numbers):\n    # Find the first even and odd numbers using list comprehensions\n    first_even = next((num for num in numbers if num % 2 == 0), None)\n    first_odd = next((num for num in numbers if num % 2 != 0), None)\n    \n    # Check if both first_even and first_odd are found\n    if first_even is not None and first_odd is not None:\n        return first_even / first_odd\n    else:\n        if first_even is None:\n            return \"No even number found\"\n        elif first_odd is None:\n            return \"No odd number found\"\n        else:\n            return \"Cannot perform division\"\n\n# Example usage\nnumbers = [5, 3, 2, 8, 10]\nprint(div_even_odd(numbers))  # Output should be 2.0\n\nnumbers = [7, 9, 11]\nprint(div_even_odd(numbers))  # Output should be \"No even number found\"\n\nnumbers = [2, 4, 6]\nprint(div_even_odd(numbers))  # Output should be \"No odd number found\"\n\nnumbers = [2, 4, 6, 1, 3]\nprint(div_even_odd(numbers))  # Output should be 2.0\n\nnumbers = [2, 4, 6, 1, 3, 5]\nprint(div_even_odd(numbers))  # Output should be 2.0\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxgy23h0g.py\", line 31, in <module>\n    assert cc_visit(inspect.getsource(div_even_odd))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 40, "requirement": "Code Complexity", "completion": "from collections import Counter\n\ndef freq_element(nested_list):\n    # Flatten the list of lists into a single list\n    flat_list = [item for sublist in nested_list for item in sublist]\n    \n    # Use Counter to count the frequency of each element\n    frequency_counter = Counter(flat_list)\n    \n    return dict(frequency_counter)\n\n# Example usage:\nnested_lists = [[1, 2, 3], [4, 5, 6], [1, 2, 7], [8, 9, 10]]\nresult = freq_element(nested_lists)\nprint(result)  # Output: {1: 2, 2: 2, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1}\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpaumw2tye.py\", line 17, in <module>\n    assert cc_visit(inspect.getsource(freq_element))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 42, "requirement": "Code Complexity", "completion": "def find_sum(arr):\n    from collections import Counter\n    \n    # Count the occurrences of each element using Counter\n    element_count = Counter(arr)\n    \n    # Filter out elements that appear only once and sum the rest\n    sum_of_repeated_elements = sum(element * count for element, count in element_count.items() if count > 1)\n    \n    return sum_of_repeated_elements\n\n# Example usage:\narr = [1, 2, 3, 2, 4, 5, 5, 6, 7, 8, 8]\nresult = find_sum(arr)\nprint(\"Sum of repeated elements:\", result)  # Output should be 2 + 2 + 5 + 5 + 8 + 8 = 32\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpna2c2c_k.py\", line 12, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Code Complexity", "completion": "import re\n\ndef text_match(text):\n    # Define the pattern for lowercase letters joined with an underscore\n    pattern = '^[a-z]+_[a-z]+$'\n    \n    # Return True if the pattern matches, otherwise return False\n    return bool(re.match(pattern, text))\n\n# Example usage:\nprint(text_match(\"hello_world\"))  # Should return True\nprint(text_match(\"Hello_World\"))  # Should return False because it contains uppercase letters\nprint(text_match(\"hello_world_123\"))  # Should return False because it contains digits\nprint(text_match(\"_hello_world\"))  # Should return False because it starts with an underscore\nprint(text_match(\"hello_world_\"))  # Should return False because it ends with an underscore\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpeb89s1cj.py\", line 13, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 45, "requirement": "Code Complexity", "completion": "import math\n\ndef get_gcd(arr):\n    current_gcd = arr[0]\n    for num in arr[1:]:\n        current_gcd = math.gcd(current_gcd, num)\n    return current_gcd\n\n# Example usage:\narr = [24, 36, 48]\nprint(get_gcd(arr))  # Output should be 12\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpl1odz4ie.py\", line 15, in <module>\n    assert cc_visit(inspect.getsource(get_gcd))[0].complexity <=1\nAssertionError", "passed": false}
{"task_id": 47, "requirement": "Code Complexity", "completion": "def compute_last_digit(a, b):\n    def last_digit_of_factorial(n):\n        if n < 5:\n            return 1\n        last_digit = 2\n        for i in range(5, n + 1):\n            last_digit = (last_digit * (i % 10)) % 10\n        return last_digit\n    \n    last_digit_a = last_digit_of_factorial(a)\n    last_digit_b = last_digit_of_factorial(b)\n    \n    if last_digit_a == 0:\n        return 0\n    else:\n        return (last_digit_b * pow(last_digit_a, -1, 10)) % 10\n\n# Example usage:\nprint(compute_last_digit(3, 5))  # Output should be 0 because 5! / 3! = 20 and the last digit is 0\nprint(compute_last_digit(4, 7))  # Output should be 0 because 7! / 4! = 210 and the last digit is 0\nprint(compute_last_digit(2, 6))  # Output should be 0 because 6! / 2! = 360 and the last digit is 0\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp15d4_zs_.py\", line 19, in <module>\n    assert compute_last_digit(2,4) == 2\nAssertionError", "passed": false}
{"task_id": 51, "requirement": "Code Complexity", "completion": "def check_equilateral(side1, side2, side3):\n    \"\"\"\n    Check if a triangle with given side lengths is equilateral.\n\n    Parameters:\n    side1 (float): The length of the first side.\n    side2 (float): The length of the second side.\n    side3 (float): The length of the third side.\n\n    Returns:\n    None: Prints whether the triangle is equilateral or not.\n    \"\"\"\n    if side1 == side2 == side3:\n        result = \"equilateral\"\n    else:\n        result = \"not equilateral\"\n    \n    print(f\"The triangle is {result}.\")\n\n# Example usage:\ncheck_equilateral(5, 5, 5)  # Should print \"The triangle is equilateral.\"\ncheck_equilateral(5, 4, 5)  # Should print \"The triangle is not equilateral.\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9z2twi3n.py\", line 10, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "requirement": "Code Complexity", "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram.\n    \"\"\"\n    if base < 0 or height < 0:\n        raise ValueError(\"Base and height must be non-negative numbers.\")\n    \n    return base * height\n\n# Example usage:\nbase = 5.0  # Example base length\nheight = 3.0  # Example height\narea = parallelogram_area(base, height)\nprint(f\"The area of the parallelogram with base {base} and height {height} is {area}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjfe5brhl.py\", line 15, in <module>\n    assert cc_visit(inspect.getsource(parallelogram_area))[0].complexity ==1\nAssertionError", "passed": false}
{"task_id": 53, "requirement": "Code Complexity", "completion": "def check_equality(s):\n    \"\"\"\n    Check if the first and last characters of a given string are equal.\n\n    Args:\n    s (str): The input string to be checked.\n\n    Returns:\n    bool: True if the first and last characters are equal, False otherwise.\n    \"\"\"\n    return len(s) < 2 or s[0] == s[-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkrn3udb3.py\", line 3, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 56, "requirement": "Code Complexity", "completion": "def check(number):\n    # Convert the number to a string to easily reverse it\n    num_str = str(number)\n    \n    # Reverse the string representation of the number\n    reversed_num_str = num_str[::-1]\n    \n    # Convert the reversed string back to an integer\n    reversed_number = int(reversed_num_str)\n    \n    # Return the result of the comparison\n    return 2 * reversed_number == number + 1\n\n# Example usage:\nprint(check(47))  # True, because 2 * 74 (reversed 47) is 148, which is 47 + 1\nprint(check(69))  # False, because 2 * 96 (reversed 69) is 192, which is not 69 + 1\n", "result": "passed", "passed": true}
{"task_id": 58, "requirement": "Code Complexity", "completion": "def opposite_signs(a, b):\n    \"\"\"\n    Check if two integers have opposite signs.\n\n    Parameters:\n    a (int): First integer.\n    b (int): Second integer.\n\n    Returns:\n    bool: True if the integers have opposite signs, False otherwise.\n    \"\"\"\n    return ((a ^ b) < 0)\n", "result": "passed", "passed": true}

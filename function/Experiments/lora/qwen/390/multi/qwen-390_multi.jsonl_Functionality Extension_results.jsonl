{"task_id": 11, "requirement": "Functionality Extension", "completion": "def remove_occ(s, char, all=False):\n    \"\"\"\n    Removes the first and last occurrences of a specified character from the string,\n    or all occurrences if the 'all' parameter is set to True.\n\n    Parameters:\n    s (str): The input string.\n    char (str): The character to be removed.\n    all (bool): If True, removes all occurrences of the character.\n\n    Returns:\n    str: The modified string with the specified occurrences of the character removed.\n    \"\"\"\n    if all:\n        # Remove all occurrences of the character\n        return s.replace(char, '')\n    else:\n        # Find the indices of the first and last occurrences of the character\n        try:\n            first_index = s.index(char)\n            last_index = s.rindex(char)\n        except ValueError:\n            # If the character is not found in the string, return the original string\n            return s\n\n        # Handle cases where the first and last index are the same (i.e., only one occurrence)\n        if first_index == last_index:\n            return \"\"\n\n        # Construct the new string by excluding the first and last occurrences of the character\n        if first_index > 0:\n            start = s[:first_index]\n        else:\n            start = \"\"\n\n        if last_index < len(s) - 1:\n            end = s[last_index + 1:]\n        else:\n            end = \"\"\n\n        return start + end\n\n# Example usage:\ninput_string = \"hello world\"\ncharacter_to_remove = \"l\"\n\n# Remove first and last occurrence\nresult_first_last = remove_occ(input_string, character_to_remove)\nprint(result_first_last)  # Output should be \"heo wor\"\n\n# Remove all occurrences\nresult_all = remove_occ(input_string, character_to_remove, all=True)\nprint(result_all)  # Output should be \"heo word\"\n", "result": "passed", "passed": true}
{"task_id": 12, "requirement": "Functionality Extension", "completion": "import numpy as np\n\ndef sort_matrix(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order based on the sum of its rows,\n    treating missing values as zeros.\n\n    :param matrix: A list of lists representing the matrix.\n    :return: The sorted matrix.\n    \"\"\"\n    # Convert the matrix to a NumPy array for easier manipulation\n    matrix_array = np.array(matrix)\n    \n    # Find the maximum length of any row\n    max_length = matrix_array.shape[1]\n    \n    # Pad shorter rows with zeros\n    padded_matrix = np.pad(matrix_array, ((0, 0), (0, max_length - matrix_array.shape[1])), mode='constant', constant_values=0)\n    \n    # Sort the padded matrix based on the sum of each row\n    sorted_indices = np.argsort(np.sum(padded_matrix, axis=1))\n    sorted_matrix = padded_matrix[sorted_indices].tolist()\n    \n    return sorted_matrix\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_matrix = [\n        [3, 5, 1],\n        [2, 2],\n        [4, 0, 1, 3]\n    ]\n    \n    sorted_matrix = sort_matrix(example_matrix)\n    print(\"Sorted Matrix:\")\n    for row in sorted_matrix:\n        print(row)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp30to0pfh.py\", line 20, in <module>\n    sorted_matrix = sort_matrix(example_matrix)\n  File \"/tmp/tmp30to0pfh.py\", line 4, in sort_matrix\n    matrix_array = np.array(matrix)\nValueError: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (3,) + inhomogeneous part.", "passed": false}
{"task_id": 13, "requirement": "Functionality Extension", "completion": "from collections import Counter\n\ndef count_common(word_freq_dict, num_top=5):\n    \"\"\"\n    Count and return the most common words in a given dictionary.\n    \n    :param word_freq_dict: A dictionary with words as keys and their frequencies as values.\n    :param num_top: An integer specifying the number of top frequent words to return. Defaults to 5.\n    :return: A list of tuples (word, frequency) for the most common words.\n    \"\"\"\n    # Use Counter to get the most common elements\n    counter = Counter(word_freq_dict)\n    most_common_words = counter.most_common(num_top)\n    \n    return most_common_words\n\n# Example usage:\nword_freq = {\n    'apple': 4,\n    'banana': 2,\n    'cherry': 5,\n    'date': 1,\n    'elderberry': 3\n}\n\n# Get the top 3 most common words\ntop_3_common_words = count_common(word_freq, num_top=3)\nprint(top_3_common_words)\n", "result": "passed", "passed": true}
{"task_id": 14, "requirement": "Functionality Extension", "completion": "def find_volume(*args):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    args (tuple): A tuple or list containing three elements:\n                  - base (float): The base length of the triangular face.\n                  - base_height (float): The height of the triangular face.\n                  - prism_height (float): The height (or length) of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    if len(args) != 3:\n        raise ValueError(\"Input must be a tuple or list with exactly three elements.\")\n    \n    base, base_height, prism_height = args\n    \n    # Calculate the volume of the prism\n    volume = 0.5 * base * base_height * prism_height\n    \n    return volume\n\n# Example usage:\n# Using individual values\nvolume_individual = find_volume(5.0, 4.0, 10.0)\nprint(f\"The volume of the triangular prism (individual values) is {volume_individual:.2f} cubic units.\")\n\n# Using a list\nvolume_list = find_volume([5.0, 4.0, 10.0])\nprint(f\"The volume of the triangular prism (list) is {volume_list:.2f} cubic units.\")\n\n# Using a tuple\nvolume_tuple = find_volume((5.0, 4.0, 10.0))\nprint(f\"The volume of the triangular prism (tuple) is {volume_tuple:.2f} cubic units.\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpv9mrvgtt.py\", line 13, in <module>\n    volume_list = find_volume([5.0, 4.0, 10.0])\n  File \"/tmp/tmpv9mrvgtt.py\", line 3, in find_volume\n    raise ValueError(\"Input must be a tuple or list with exactly three elements.\")\nValueError: Input must be a tuple or list with exactly three elements.", "passed": false}
{"task_id": 15, "requirement": "Functionality Extension", "completion": "import re\n\ndef split_lowerstring(s, include_lower=False):\n    \"\"\"\n    Splits the given string at lowercase letters and optionally includes the preceding uppercase letters.\n    \n    Parameters:\n    s (str): The input string to be split.\n    include_lower (bool): If True, includes the preceding uppercase letters in the output list.\n    \n    Returns:\n    list: A list of substrings split at lowercase letters, optionally including preceding uppercase letters.\n    \"\"\"\n    # Use regex to find segments based on whether include_lower is True or False\n    if include_lower:\n        pattern = r'[A-Z][^A-Z]*'\n    else:\n        pattern = r'[a-z][^a-z]*'\n    \n    # Find all matches in the string\n    result = re.findall(pattern, s)\n    \n    return result\n\n# Example usage:\ninput_string = \"HelloWorld2023Python\"\noutput = split_lowerstring(input_string, include_lower=True)\nprint(output)  # Output: ['Hello', 'World', '2023', 'Python']\n\noutput_without_upper = split_lowerstring(input_string, include_lower=False)\nprint(output_without_upper)  # Output: ['e', 'llo', 'W', 'orld', '2023', 'P', 'ython']\n", "result": "passed", "passed": true}
{"task_id": 16, "requirement": "Functionality Extension", "completion": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    This function searches for sequences of lowercase letters joined with an underscore in the given text.\n    If at least one sequence matches, it returns 'Found a match!'.\n    Otherwise, it returns 'Not matched!'.\n    \n    Args:\n    text (str): The input string to search within.\n    \n    Returns:\n    str: 'Found a match!' if at least one sequence matches, otherwise 'Not matched!'.\n    \"\"\"\n    # Regular expression pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    \n    # Find all matches in the text\n    matches = re.findall(pattern, text)\n    \n    # Check if any matches were found\n    if matches:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\nexample_text = \"Here is an example_text_to_match and another_example_sequence but notThisOne\"\nprint(text_lowercase_underscore(example_text))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4l22y5pe.py\", line 15, in <module>\n    assert text_lowercase_underscore('abc_def_ghi') == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 17, "requirement": "Functionality Extension", "completion": "import math\n\ndef square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square after rounding the side length to the nearest integer.\n\n    Parameters:\n    side_length (float): The length of one side of the square.\n\n    Returns:\n    int: The perimeter of the square as an integer.\n    \"\"\"\n    rounded_side_length = round(side_length)\n    return 4 * rounded_side_length\n\n# Example usage:\nside_length = 5.7  # Example side length of the square\nperimeter = square_perimeter(side_length)\nprint(f\"The perimeter of the square with side length {side_length} is {perimeter}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpnjz5a6zi.py\", line 9, in <module>\n    assert square_perimeter(4.5) == 20\nAssertionError", "passed": false}
{"task_id": 18, "requirement": "Functionality Extension", "completion": "def remove_dirty_chars(source, chars_to_remove):\n    \"\"\"\n    Removes characters from the source string that are present in the chars_to_remove string,\n    ignoring case differences.\n\n    :param source: The original string from which characters will be removed.\n    :param chars_to_remove: A string containing characters to be removed from the source string.\n    :return: A new string with characters removed.\n    \"\"\"\n    # Convert both strings to lowercase to make the operation case-insensitive\n    source_lower = source.lower()\n    chars_to_remove_lower = chars_to_remove.lower()\n    \n    # Create a translation table for str.translate() method\n    translation_table = str.maketrans('', '', chars_to_remove_lower)\n    \n    # Use translate method to remove specified characters\n    cleaned_string = source.translate(translation_table)\n    \n    return cleaned_string\n\n# Example usage:\nsource = \"Hello, World!\"\nchars_to_remove = \",!\"\ncleaned_source = remove_dirty_chars(source, chars_to_remove)\nprint(cleaned_source)  # Output: Hello World\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7fufgrjq.py\", line 15, in <module>\n    assert remove_dirty_chars('HelloWorld', 'hELLO') == 'World', 'Function should handle case-insensitive character removal.'\nAssertionError: Function should handle case-insensitive character removal.", "passed": false}
{"task_id": 19, "requirement": "Functionality Extension", "completion": "def test_duplicate(arr):\n    \"\"\"\n    Check if the given list of integers contains any duplicate elements and return them.\n\n    Args:\n    arr (list): A list of integers.\n\n    Returns:\n    list: A list containing the duplicate elements if any, otherwise an empty list.\n    \"\"\"\n    seen = set()\n    duplicates = []\n    \n    for item in arr:\n        if item in seen:\n            if item not in duplicates:\n                duplicates.append(item)\n        else:\n            seen.add(item)\n    \n    return duplicates\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(test_duplicate([1, 2, 3, 4]))  # Output: []\n    print(test_duplicate([1, 2, 3, 3]))  # Output: [3]\n    print(test_duplicate([7, 8, 9, 7]))  # Output: [7]\n    print(test_duplicate([5, 6, 5, 7, 8, 6]))  # Output: [5, 6]\n", "result": "passed", "passed": true}
{"task_id": 20, "requirement": "Functionality Extension", "completion": "def is_woodall(number):\n    \"\"\"\n    Check if the given number is a Woodall number and return a list of all Woodall numbers up to that number.\n    \n    Args:\n    number (int): The upper limit to check for Woodall numbers.\n    \n    Returns:\n    list: A list of all Woodall numbers up to the given number.\n    \"\"\"\n    if not isinstance(number, int) or number <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    woodall_numbers = []\n    n = 1\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number > number:\n            break\n        woodall_numbers.append(woodall_number)\n        n += 1\n    \n    return woodall_numbers\n\n# Example usage:\nprint(is_woodall(10))  # [1]\nprint(is_woodall(20))  # [1, 7]\nprint(is_woodall(40))  # [1, 7, 23]\nprint(is_woodall(100)) # [1, 7, 23, 79]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxgoeu_9i.py\", line 19, in <module>\n    assert is_woodall(15) == [1, 7, 15]\nAssertionError", "passed": false}
{"task_id": 21, "requirement": "Functionality Extension", "completion": "def multiples_of_num(n, m):\n    \"\"\"\n    Generates a list of the first m multiples of n.\n\n    Parameters:\n    n (float or int): The base number.\n    m (int): The number of multiples to generate.\n\n    Returns:\n    list: A list containing the first m multiples of n.\n    \"\"\"\n    if not isinstance(m, int) or m <= 0:\n        raise ValueError(\"m must be a positive integer.\")\n    \n    return [i * n for i in range(1, m + 1)]\n\n# Example usage:\nif __name__ == \"__main__\":\n    n = 5.5  # Base number\n    m = 7  # Number of multiples to generate\n    print(multiples_of_num(n, m))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7lkmit0c.py\", line 10, in <module>\n    assert multiples_of_num(3, 2.5) == [2.5, 5.0, 7.5]\n  File \"/tmp/tmp7lkmit0c.py\", line 3, in multiples_of_num\n    raise ValueError(\"m must be a positive integer.\")\nValueError: m must be a positive integer.", "passed": false}
{"task_id": 22, "requirement": "Functionality Extension", "completion": "def find_all_duplicates(nums):\n    first_occurrence = {}\n    duplicates = []\n    added_to_duplicates = set()\n\n    for i, num in enumerate(nums):\n        if num in first_occurrence:\n            if num not in added_to_duplicates:\n                duplicates.append(num)\n                added_to_duplicates.add(num)\n        else:\n            first_occurrence[num] = i\n\n    return duplicates\n\n# Example usage:\nnums = [2, 3, 1, 4, 5, 6, 7, 8, 9, 2]\nprint(find_all_duplicates(nums))  # Output should be [2]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpd21evjja.py\", line 16, in <module>\n    assert find_first_duplicate([1, 2, 3, 2, 4, 5, 4]) == [2, 4]\nNameError: name 'find_first_duplicate' is not defined", "passed": false}
{"task_id": 23, "requirement": "Functionality Extension", "completion": "def maximum_sum(list_of_lists):\n    \"\"\"\n    Finds the maximum sum of elements in a list of lists.\n    \n    Parameters:\n    list_of_lists (list): A list containing multiple sublists.\n    \n    Returns:\n    int: The maximum sum of elements found in any of the sublists.\n    \"\"\"\n    if not list_of_lists:  # Check if the input list is empty\n        return 0\n\n    max_sum = float('-inf')  # Initialize max_sum to negative infinity\n    \n    for sublist in list_of_lists:\n        current_sum = sum(sublist)  # Calculate the sum of the current sublist\n        if current_sum > max_sum:\n            max_sum = current_sum  # Update max_sum if the current sum is greater\n    \n    return max_sum\n\n# Example usage:\nexample_list = [[1, 2, 3], [4, 5, 6], [-10, 1, 2]]\nprint(maximum_sum(example_list))  # Output should be 15 (from [4, 5, 6])\n", "result": "passed", "passed": true}
{"task_id": 24, "requirement": "Functionality Extension", "completion": "def binary_to_decimal(binary_str):\n    \"\"\"\n    Convert a binary number (given as a string) to its decimal equivalent.\n    \n    :param binary_str: A string representing a binary number.\n    :return: An integer representing the decimal equivalent of the binary number.\n    \"\"\"\n    # Validate the input to ensure it contains only '0's and '1's\n    if not all(char in '01' for char in binary_str):\n        raise ValueError(\"Input contains invalid characters other than 0 or 1.\")\n    \n    # Initialize the decimal value\n    decimal_value = 0\n    \n    # Iterate over each character in the binary string\n    for index, digit in enumerate(reversed(binary_str)):\n        # Calculate the decimal value\n        decimal_value += int(digit) * (2 ** index)\n    \n    return decimal_value\n\n# Example usage:\nbinary_number = \"001101\"  # Leading zero is handled correctly\ndecimal_number = binary_to_decimal(binary_number)\nprint(f\"The decimal equivalent of {binary_number} is {decimal_number}\")\n", "result": "passed", "passed": true}
{"task_id": 25, "requirement": "Functionality Extension", "completion": "from functools import reduce\nfrom operator import mul\n\ndef find_product(arr):\n    if not arr:\n        raise ValueError(\"The input array must not be empty.\")\n    \n    # Find unique elements in the array\n    unique_elements = set(arr)\n    \n    # Calculate the product of unique elements using reduce and mul\n    product = reduce(mul, unique_elements, 1)\n    \n    return product\n\n# Example usage:\narr = [1, -2, 3, -4, -2, 3, 5]\nprint(find_product(arr))  # Output should be 120 (-1 * -2 * 3 * -4 * 5)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7_mjg106.py\", line 14, in <module>\n    assert find_product([-1, -2, 3, 3], 4) == 2\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "requirement": "Functionality Extension", "completion": "def check_k_elements(tuples_list, k):\n    \"\"\"\n    Check if each tuple in the given list has exactly k elements and count how many do so.\n\n    :param tuples_list: List of tuples to be checked.\n    :param k: The number of elements that each tuple should have.\n    :return: A tuple containing a boolean indicating if all tuples have exactly k elements,\n             and the count of tuples with exactly k elements.\n    \"\"\"\n    all_have_k = True\n    count_with_k = 0\n    \n    for tup in tuples_list:\n        if len(tup) == k:\n            count_with_k += 1\n        elif len(tup) != k:\n            all_have_k = False\n    \n    return all_have_k, count_with_k\n\n# Example usage:\nexample_tuples = [(1, 2), (3, 4, 5), (6, 7), (8, 9)]\nk = 2\n\nresult, count = check_k_elements(example_tuples, k)\nif result:\n    print(f\"All tuples have exactly {k} elements.\")\nelse:\n    print(f\"Not all tuples have exactly {k} elements.\")\n\nprint(f\"Count of tuples with exactly {k} elements: {count}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6yx6kvw_.py\", line 19, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == 1\nAssertionError", "passed": false}
{"task_id": 27, "requirement": "Functionality Extension", "completion": "def remove(strings, chars_to_remove=None):\n    \"\"\"\n    Removes all digits and specified characters from each string in the given list of strings.\n\n    :param strings: List of strings from which digits and specified characters need to be removed.\n    :param chars_to_remove: Optional set of characters to remove in addition to digits.\n    :return: A new list of strings with all digits and specified characters removed.\n    \"\"\"\n    if chars_to_remove is None:\n        chars_to_remove = set()\n    \n    def remove_chars(s):\n        return ''.join(filter(lambda x: x not in chars_to_remove and not x.isdigit(), s))\n    \n    return [remove_chars(s) for s in strings]\n\n# Example usage:\nexample_list = [\"hello123!\", \"world456?\", \"test789#\", \"12345$\"]\nresult = remove(example_list, chars_to_remove={'!', '?', '#', '$'})\nprint(result)  # Output: ['hello', 'world', 'test', '']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpufbw1ck1.py\", line 11, in <module>\n    assert remove_extended(['abcd123', '456defg'], 'abcdef') == ['d', 'g']\nNameError: name 'remove_extended' is not defined", "passed": false}
{"task_id": 28, "requirement": "Functionality Extension", "completion": "from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef binomial_coeff(n, k):\n    # Base cases\n    if k == 0 or k == n:\n        return 1\n    # Recursive case using memoized results\n    return binomial_coeff(n - 1, k - 1) + binomial_coeff(n - 1, k)\n\n# Example usage:\nprint(binomial_coeff(5, 2))  # Output: 10\nprint(binomial_coeff(10, 3)) # Output: 120\n", "result": "passed", "passed": true}
{"task_id": 29, "requirement": "Functionality Extension", "completion": "def get_odd_occurrences(arr: list, arr_size: int) -> list[int]:\n    \"\"\"\n    Find elements occurring an odd number of times in the list.\n\n    :param arr: List of integers.\n    :param arr_size: Size of the list.\n    :return: List of integers that occur an odd number of times.\n    \"\"\"\n    # Dictionary to store the count of each element\n    counts = {}\n    \n    # Count the occurrences of each element\n    for i in range(arr_size):\n        if arr[i] in counts:\n            counts[arr[i]] += 1\n        else:\n            counts[arr[i]] = 1\n    \n    # Collect elements with an odd count\n    odd_occurrences = []\n    for element, count in counts.items():\n        if count % 2 != 0:\n            odd_occurrences.append(element)\n    \n    return odd_occurrences\n\n# Example usage:\narr = [1, 2, 3, 2, 3, 1, 3, 4, 4, 5, 5, 5]\nprint(get_odd_occurrences(arr, len(arr)))  # Output should be [3, 5]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpeeybd04l.py\", line 19, in <module>\n    assert get_odd_occurrence([1, 2, 3, 1, 2, 3, 1, 3]) == [1, 3]\nNameError: name 'get_odd_occurrence' is not defined", "passed": false}
{"task_id": 30, "requirement": "Functionality Extension", "completion": "def count_substring_with_equal_ends(s):\n    \"\"\"\n    Counts all substrings of the input string s that start and end with the same alphabetic character.\n\n    :param s: Input string\n    :return: The number of substrings that start and end with the same alphabetic character\n    \"\"\"\n    n = len(s)\n    count = 0\n\n    # Iterate through each character in the string\n    for i in range(n):\n        # Count substrings starting from index i\n        for j in range(i, n):\n            if s[i].isalpha() and s[j].isalpha():\n                if s[i] == s[j]:\n                    count += 1\n\n    return count\n\n# Example usage:\ninput_string = \"a b c a!\"\nresult = count_substring_with_equal_ends(input_string)\nprint(f\"Number of substrings starting and ending with the same alphabetic character: {result}\")\n", "result": "passed", "passed": true}
{"task_id": 31, "requirement": "Functionality Extension", "completion": "from collections import Counter\nimport heapq\n\ndef func(nums_list, k):\n    \"\"\"\n    Finds the top k integers that occur most frequently from given lists of sorted and distinct integers.\n    \n    :param nums_list: List of lists containing sorted and distinct integers.\n    :param k: The number of top frequent integers to return.\n    :return: A list of the top k integers with their highest frequency.\n    \"\"\"\n    if k == 0:\n        return []\n    \n    # Flatten the list of lists into a single list\n    all_nums = [num for sublist in nums_list for num in sublist]\n    \n    # Count the frequency of each integer\n    freq_counter = Counter(all_nums)\n    \n    # Use a min heap to keep track of the top k elements based on frequency\n    # We use negative frequencies because heapq is a min-heap by default\n    heap = []\n    \n    for num, freq in freq_counter.items():\n        if len(heap) < k:\n            heapq.heappush(heap, (-freq, num))\n        else:\n            # If the current frequency is higher than the smallest frequency in the heap\n            if -freq > heap[0][0]:\n                heapq.heapreplace(heap, (-freq, num))\n    \n    # Extract the top k elements from the heap\n    top_k = [item[1] for item in heap]\n    \n    return top_k\n\n# Example usage\nnums_list = [[1, 2, 3], [2, 3, 4], [4, 5, 6]]\nk = 3\nprint(func(nums_list, k))  # Output will depend on the input but might be something like [2, 3, 4]\n\n# Edge case handling when k is zero\nk = 0\nprint(func(nums_list, k))  # Output: []\n", "result": "passed", "passed": true}
{"task_id": 32, "requirement": "Functionality Extension", "completion": "import math\n\ndef max_prime_factors(n, return_all=False):\n    # Initialize a list to store prime factors\n    prime_factors = []\n    \n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        prime_factors.append(2)\n        n //= 2\n    \n    # Now n must be odd, start checking for odd factors\n    factor = 3\n    while factor * factor <= n:\n        while n % factor == 0:\n            prime_factors.append(factor)\n            n //= factor\n        factor += 2\n    \n    # If n is a prime number greater than 2\n    if n > 2:\n        prime_factors.append(n)\n    \n    # Return the result based on the return_all parameter\n    if return_all:\n        return prime_factors\n    else:\n        return prime_factors[-1] if prime_factors else None\n\n# Example usage:\nprint(max_prime_factors(13195))  # Output: 29\nprint(max_prime_factors(600851475143))  # Output: 6857\nprint(max_prime_factors(13195, return_all=True))  # Output: [5, 7, 13, 29]\nprint(max_prime_factors(600851475143, return_all=True))  # Output: [71, 839, 1471, 6857]\n", "result": "passed", "passed": true}
{"task_id": 33, "requirement": "Functionality Extension", "completion": "def decimal_to_binary(decimal_numbers):\n    \"\"\"\n    Convert a list of decimal numbers to their binary representations.\n\n    Parameters:\n    decimal_numbers (list of int): A list of non-negative integers to be converted to binary.\n\n    Returns:\n    list of str: A list containing the binary representations of the input decimal numbers.\n    \"\"\"\n    if not all(isinstance(num, int) for num in decimal_numbers):\n        raise ValueError(\"All elements in the list must be integers.\")\n    \n    binary_strings = []\n    for number in decimal_numbers:\n        if number == 0:\n            binary_strings.append(\"0\")\n        else:\n            binary_string = \"\"\n            while number > 0:\n                remainder = number % 2\n                binary_string = str(remainder) + binary_string\n                number = number // 2\n            binary_strings.append(binary_string)\n    \n    return binary_strings\n\n# Example usage:\nprint(decimal_to_binary([10, 255, 0]))  # Output: [\"1010\", \"11111111\", \"0\"]\n", "result": "passed", "passed": true}
{"task_id": 34, "requirement": "Functionality Extension", "completion": "def find_missing(arr):\n    \"\"\"\n    Finds all missing numbers in a sorted array of integers where some numbers\n    in the range [arr[0], arr[-1]] might be missing. The array is assumed to be sorted.\n\n    :param arr: List[int] - A sorted list of integers with possible missing elements.\n    :return: List[int] - A list of all missing numbers in the array.\n    \"\"\"\n    missing_numbers = []\n    start = arr[0]\n    end = arr[-1]\n\n    for num in range(start, end + 1):\n        if num not in arr:\n            missing_numbers.append(num)\n\n    return missing_numbers\n\n# Example usage:\narr = [1, 2, 4, 5, 6]\nprint(find_missing(arr))  # Output: [3]\n\narr = [2, 3, 4, 6, 7, 8]\nprint(find_missing(arr))  # Output: [5]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpb7nu_c7q.py\", line 14, in <module>\n    assert find_missing([1,3,6], 3) == [2, 4, 5]\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "requirement": "Functionality Extension", "completion": "def find_rect_nums(numbers):\n    \"\"\"\n    Find the rectangular numbers for a list of integers.\n\n    Parameters:\n    numbers (list of int): A list of integers.\n\n    Returns:\n    list of int: A list of rectangular numbers corresponding to the input integers.\n    \"\"\"\n    return [n * (n + 1) for n in numbers]\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test the function with a list of values\n    test_numbers = [5, 7, 9]\n    rect_nums = find_rect_nums(test_numbers)\n    print(\"Rectangular numbers:\", rect_nums)  # Output should be [30, 56, 90]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgjcujlcc.py\", line 9, in <module>\n    assert find_rect_num([1, 2, 3]) == [2, 6, 12]\nNameError: name 'find_rect_num' is not defined", "passed": false}
{"task_id": 36, "requirement": "Functionality Extension", "completion": "def find_nth_digit(numerator, denominator, n):\n    \"\"\"\n    Find the nth digit in the decimal representation of the division result of two given numbers,\n    handling both positive and negative numerators and denominators.\n\n    Parameters:\n    numerator (int): The numerator of the fraction.\n    denominator (int): The denominator of the fraction.\n    n (int): The position of the digit to find (1-based index).\n\n    Returns:\n    int: The nth digit in the decimal representation of the division result.\n    \"\"\"\n    # Handle negative numerators and denominators by taking their absolute values\n    numerator = abs(numerator)\n    denominator = abs(denominator)\n\n    # Perform the division\n    division_result = numerator / denominator\n    \n    # Convert the result to a string to easily access individual digits\n    division_str = str(division_result)\n    \n    # Check if the result has a decimal part\n    if '.' in division_str:\n        # Get the decimal part and remove the leading '.'\n        decimal_part = division_str.split('.')[1]\n    else:\n        # If there's no decimal part, return -1 or handle as needed\n        return -1\n\n    # Ensure n is within bounds\n    if n > len(decimal_part):\n        return -1  # Or raise an exception if preferred\n\n    # Return the nth digit\n    return int(decimal_part[n - 1])\n\n# Example usage:\nnumerator = -1\ndenominator = 7\nn = 4\nprint(find_nth_digit(numerator, denominator, n))  # Output should be the 4th digit in the decimal representation of 1/7\n", "result": "passed", "passed": true}
{"task_id": 37, "requirement": "Functionality Extension", "completion": "def sort_mixed_list(mixed_list, reverse_strings=False):\n    \"\"\"\n    Sorts a mixed list of integers and strings.\n\n    Args:\n    mixed_list (list): A list containing integers and strings.\n    reverse_strings (bool): If True, sorts strings in reverse lexicographical order.\n\n    Returns:\n    list: A sorted list with integers and strings in ascending order.\n    \"\"\"\n    def custom_sort_key(item):\n        try:\n            # Try to convert the item to an integer\n            return int(item)\n        except ValueError:\n            # If conversion fails, return the item itself\n            return item\n\n    # Determine the sorting order for strings\n    reverse_order = reverse_strings\n\n    # Use the sorted function with the custom key and reverse order\n    sorted_list = sorted(mixed_list, key=custom_sort_key, reverse=reverse_order)\n    return sorted_list\n\n# Example usage:\nmixed_list = [10, \"2\", \"3\", 5, \"1\", \"4\"]\nsorted_list = sort_mixed_list(mixed_list, reverse_strings=True)\nprint(sorted_list)  # Output: [1, 2, 3, 4, 5, 10]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmugws60p.py\", line 18, in <module>\n    assert sort_mixed_list([3, 'banana', 2, 'apple', 1, 'cherry'], reverse_strings=True) == [1, 2, 3, 'cherry', 'banana', 'apple']\n  File \"/tmp/tmpmugws60p.py\", line 12, in sort_mixed_list\n    sorted_list = sorted(mixed_list, key=custom_sort_key, reverse=reverse_order)\nTypeError: '<' not supported between instances of 'int' and 'str'", "passed": false}
{"task_id": 38, "requirement": "Functionality Extension", "completion": "def div_even_odd(numbers):\n    # Initialize variables to store the first even and odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Iterate through the list to find the first even and odd numbers\n    for num in numbers:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n    \n    # Check if both first_even and first_odd are found\n    if first_even is not None and first_odd is not None:\n        # Perform the division and return the result\n        return first_even / first_odd\n    else:\n        # Handle the case where either or both numbers are not found\n        if first_even is None:\n            return \"No even number found\"\n        elif first_odd is None:\n            return \"No odd number found\"\n        else:\n            return \"Both even and odd numbers found but cannot perform division\"\n\n# Example usage\nnumbers = [-5, -3, 2, 8, 10]\nprint(div_even_odd(numbers))  # Output should be 2.0\n\nnumbers = [-7, -9, -11]\nprint(div_even_odd(numbers))  # Output should be \"No even number found\"\n\nnumbers = [2, 4, 6]\nprint(div_even_odd(numbers))  # Output should be \"No odd number found\"\n\nnumbers = [2, 4, 6, 1, 3]\nprint(div_even_odd(numbers))  # Output should be 2.0\n\nnumbers = [2, 4, 6, 1, 3, 5]\nprint(div_even_odd(numbers))  # Output should be 2.0\n", "result": "passed", "passed": true}
{"task_id": 39, "requirement": "Functionality Extension", "completion": "from collections import Counter\nimport itertools\n\ndef rearrange_string(s):\n    # Count the frequency of each character in the string\n    char_count = Counter(s)\n    \n    # Check if any character appears more than half the length of the string\n    max_char_count = max(char_count.values())\n    if max_char_count > (len(s) + 1) // 2:\n        return []\n    \n    # Helper function to generate all valid rearrangements using backtracking\n    def backtrack(path, remaining):\n        if not remaining:\n            results.append(''.join(path))\n            return\n        \n        last_char = path[-1] if path else None\n        for char in sorted(remaining, reverse=True):\n            if char == last_char:\n                continue\n            path.append(char)\n            remaining[char] -= 1\n            if remaining[char] == 0:\n                del remaining[char]\n            backtrack(path, remaining)\n            path.pop()\n            remaining[char] += 1\n    \n    results = []\n    backtrack([], char_count)\n    return results\n\n# Example usage:\nprint(rearrange_string(\"aabbcc\"))  # Output: ['abacbc', 'acabcb', 'acbacb', 'acbabc', 'bacabc', 'bacbca', 'cabacb', 'cababc', 'cbaabc', 'cbacba', 'cbabca', 'cabaac']\nprint(rearrange_string(\"aaabc\"))   # Output: []\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpyi57m5xa.py\", line 32, in <module>\n    assert set(rearange_string('aabb')) == {'abab', 'baba'}\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "requirement": "Functionality Extension", "completion": "from collections import Counter\n\ndef flatten_and_count(nested_list):\n    def _flatten(sublist):\n        if isinstance(sublist, list):\n            for item in sublist:\n                yield from _flatten(item)\n        else:\n            yield sublist\n    \n    # Flatten the nested list and filter out non-integer values\n    flat_list = [item for item in _flatten(nested_list) if isinstance(item, int)]\n    \n    # Use Counter to count the frequency of each integer\n    frequency_counter = Counter(flat_list)\n    \n    return dict(frequency_counter)\n\n# Example usage:\nnested_lists = [[1, 2, 3], [4, 5, 6], [1, 2, 7], [8, 9, 10], [1, [11, 12]]]\nresult = flatten_and_count(nested_lists)\nprint(result)  # Output: {1: 3, 2: 2, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1}\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpi4b1fgsi.py\", line 18, in <module>\n    assert freq_element([[1, [2, [3, 2]], 2], [4, 5, [6, 2]], [7, 1, [9, 5]]]) == {1: 2, 2: 4, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 9: 1}\nNameError: name 'freq_element' is not defined", "passed": false}
{"task_id": 41, "requirement": "Functionality Extension", "completion": "def filter_evennumbers(numbers):\n    \"\"\"\n    Filters out even numbers from the given list while handling non-integer types.\n\n    Parameters:\n    numbers (list): A list of elements which may include integers and other types.\n\n    Returns:\n    list: A list containing only the even numbers from the input list.\n    \"\"\"\n    # Filter out non-integer values\n    filtered_numbers = [num for num in numbers if isinstance(num, int)]\n    \n    # Use filter() with a lambda function to filter even numbers\n    even_numbers = list(filter(lambda x: x % 2 == 0, filtered_numbers))\n    return even_numbers\n\n# Example usage:\nexample_list = [1, 2, 'a', 3, 4, None, 5, 6, 7, 8, 9, 10]\nfiltered_list = filter_evennumbers(example_list)\nprint(filtered_list)  # Output: [2, 4, 6, 8, 10]\n", "result": "passed", "passed": true}
{"task_id": 42, "requirement": "Functionality Extension", "completion": "def find_sum(arr):\n    # Step 1: Create a dictionary to keep track of the count of each element\n    element_count = {}\n    \n    # Step 2: Count the occurrences of each element\n    for element in arr:\n        if element in element_count:\n            element_count[element] += 1\n        else:\n            element_count[element] = 1\n    \n    # Step 3: Calculate the sum of elements that appear more than once\n    sum_of_repeated_elements = sum(element * count for element, count in element_count.items() if count > 1)\n    \n    return sum_of_repeated_elements\n\n# Example usage:\narr = [1, -2, 3, -2, 4, 5, -5, 6, 7, 8, -8]\nresult = find_sum(arr)\nprint(\"Sum of repeated elements:\", result)  # Output should be -2 + (-2) + 5 + (-5) + 8 + (-8) = -4\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpd6wy3yjp.py\", line 17, in <module>\n    assert find_sum([-1, -2, -3, -1, -1], 5) == -2\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Functionality Extension", "completion": "import re\n\ndef text_match(text):\n    # Define the pattern for lowercase letters joined with one or more underscores\n    pattern = '^[a-z]+(_[a-z]+)*$'\n    \n    # Search for the pattern in the given text\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\n# Example usage:\nprint(text_match(\"hello_world\"))  # Should return True\nprint(text_match(\"hello__world\"))  # Should return True\nprint(text_match(\"Hello_World\"))  # Should return False because it contains uppercase letters\nprint(text_match(\"hello_world_123\"))  # Should return False because it contains digits\nprint(text_match(\"_hello_world\"))  # Should return False because it starts with an underscore\nprint(text_match(\"hello_world_\"))  # Should return False because it ends with an underscore\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_i_qry5c.py\", line 17, in <module>\n    assert text_match('abc_def_ghi') == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 45, "requirement": "Functionality Extension", "completion": "import math\n\ndef get_gcd(arr):\n    # Filter out zero values from the array\n    filtered_arr = [num for num in arr if num != 0]\n    \n    # If the filtered array is empty, return 0 (or raise an error based on requirement)\n    if not filtered_arr:\n        return 0  # or raise ValueError(\"Array must contain at least one non-zero element\")\n    \n    # Initialize gcd with the first element of the filtered array\n    current_gcd = filtered_arr[0]\n    \n    # Iterate through the filtered array starting from the second element\n    for num in filtered_arr[1:]:\n        current_gcd = math.gcd(current_gcd, num)\n        \n        # If current_gcd becomes 1, no need to proceed further as GCD cannot be less than 1\n        if current_gcd == 1:\n            break\n    \n    return current_gcd\n\n# Example usage:\narr = [24, 0, 36, 48]\nprint(get_gcd(arr))  # Output should be 12\n", "result": "passed", "passed": true}
{"task_id": 46, "requirement": "Functionality Extension", "completion": "def test_distinct(numbers):\n    \"\"\"\n    Determine if all numbers in the given list are distinct.\n\n    :param numbers: List of integers or floats.\n    :return: True if all numbers are distinct, False otherwise.\n    \"\"\"\n    return len(numbers) == len(set(numbers))\n", "result": "passed", "passed": true}
{"task_id": 47, "requirement": "Functionality Extension", "completion": "def compute_last_digit(a, b):\n    def last_digit_of_factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        last_digit = 1\n        for i in range(2, n + 1):\n            last_digit = (last_digit * (i % 10)) % 10\n        return last_digit\n    \n    # Handle edge case where a or b is zero\n    if a == 0 or b == 0:\n        return 1\n    \n    # Compute the last digit of factorial(a) and factorial(b)\n    last_digit_a = last_digit_of_factorial(a)\n    last_digit_b = last_digit_of_factorial(b)\n    \n    # Compute the last digit of b! / a!\n    if last_digit_a == 0:\n        return 0  # If factorial(a) ends in 0, the result will be 0 regardless of b\n    else:\n        return (last_digit_b * pow(last_digit_a, -1, 10)) % 10\n\n# Example usage:\nprint(compute_last_digit(0, 5))  # Output should be 1\nprint(compute_last_digit(3, 0))  # Output should be 1\nprint(compute_last_digit(3, 5))  # Output should be 2\nprint(compute_last_digit(4, 7))  # Output should be 8\nprint(compute_last_digit(2, 6))  # Output should be 0\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpn2e8tpwf.py\", line 23, in <module>\n    print(compute_last_digit(3, 5))  # Output should be 2\n  File \"/tmp/tmpn2e8tpwf.py\", line 19, in compute_last_digit\n    return (last_digit_b * pow(last_digit_a, -1, 10)) % 10\nValueError: base is not invertible for the given modulus", "passed": false}
{"task_id": 48, "requirement": "Functionality Extension", "completion": "def odd_bit_set_number(n):\n    \"\"\"\n    Sets all odd bits of the given number n, handling both positive and negative integers.\n    \n    :param n: An integer whose odd bits are to be set.\n    :return: An integer with all odd bits set.\n    \"\"\"\n    # Get the absolute value of the input number\n    abs_n = abs(n)\n    \n    # Create a mask with odd bits set\n    # For example, for a 32-bit integer, the mask would be 0b01010101010101010101010101010101\n    mask = 0b01010101010101010101010101010101\n    \n    # Apply the mask using bitwise OR operation\n    result = abs_n | mask\n    \n    # Restore the sign if the original number was negative\n    if n < 0:\n        result = -result\n    \n    return result\n\n# Example usage:\nn = 10  # Binary: 1010\nprint(odd_bit_set_number(n))  # Output should be 21 (Binary: 10101)\n\nn = -10  # Binary: 1010 (negative)\nprint(odd_bit_set_number(n))  # Output should be -21 (Binary: 10101)\n\nn = 21  # Binary: 10101\nprint(odd_bit_set_number(n))  # Output should be 21 (already has all odd bits set)\n\nn = -21  # Binary: 10101 (negative)\nprint(odd_bit_set_number(n))  # Output should be -21 (already has all odd bits set)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8ba3tc89.py\", line 22, in <module>\n    assert odd_bit_set_number(-10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "requirement": "Functionality Extension", "completion": "def specified_element(two_d_list, index=0):\n    \"\"\"\n    Extracts the specified element (default is the first) from each sublist in a 2D list.\n    Supports both positive and negative indices.\n\n    :param two_d_list: A list of lists where each sublist contains elements.\n    :param index: The index of the element to be extracted from each sublist. Can be positive or negative.\n    :return: A list containing the extracted elements.\n    \"\"\"\n    # Use list comprehension to extract the specified element from each sublist\n    extracted_elements = [sublist[index] for sublist in two_d_list if len(sublist) > abs(index)]\n    \n    return extracted_elements\n\n# Example usage:\ntwo_d_list = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n    [10, 11, 12]\n]\n\n# Extracting the first element from each sublist\nprint(specified_element(two_d_list))  # Output: [1, 4, 7, 10]\n\n# Extracting the second element from each sublist\nprint(specified_element(two_d_list, index=1))  # Output: [2, 5, 8, 11]\n\n# Extracting the last element from each sublist using negative indexing\nprint(specified_element(two_d_list, index=-1))  # Output: [3, 6, 9, 12]\n\n# Extracting the second-to-last element from each sublist using negative indexing\nprint(specified_element(two_d_list, index=-2))  # Output: [2, 5, 8, 11]\n", "result": "passed", "passed": true}
{"task_id": 51, "requirement": "Functionality Extension", "completion": "def check_triangle_type(side1, side2, side3):\n    \"\"\"\n    Check if a triangle with given side lengths is equilateral or isosceles.\n\n    Parameters:\n    side1 (float): The length of the first side.\n    side2 (float): The length of the second side.\n    side3 (float): The length of the third side.\n\n    Returns:\n    None: Prints whether the triangle is equilateral or isosceles.\n    \"\"\"\n    if side1 == side2 == side3:\n        print(\"The triangle is equilateral.\")\n    elif side1 == side2 or side2 == side3 or side1 == side3:\n        print(\"The triangle is isosceles.\")\n    else:\n        print(\"The triangle is neither equilateral nor isosceles.\")\n\n# Example usage:\ncheck_triangle_type(5, 5, 5)  # Should print \"The triangle is equilateral.\"\ncheck_triangle_type(5, 4, 5)  # Should print \"The triangle is isosceles.\"\ncheck_triangle_type(5, 4, 6)  # Should print \"The triangle is neither equilateral nor isosceles.\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpk9kpjcab.py\", line 12, in <module>\n    assert check_equilateral(5, 5, 3) == 'isosceles'\nNameError: name 'check_equilateral' is not defined", "passed": false}
{"task_id": 52, "requirement": "Functionality Extension", "completion": "def parallelogram_area(parallelograms):\n    \"\"\"\n    Calculate the area of multiple parallelograms.\n\n    Parameters:\n    parallelograms (list of tuples): A list where each tuple contains the base and height of a parallelogram.\n\n    Returns:\n    list: A list of areas corresponding to each parallelogram.\n    \"\"\"\n    if not all(isinstance(p, tuple) and len(p) == 2 for p in parallelograms):\n        raise ValueError(\"Each element in the list must be a tuple of two elements (base, height).\")\n    \n    areas = []\n    for base, height in parallelograms:\n        if base <= 0 or height <= 0:\n            raise ValueError(\"Base and height must be positive numbers.\")\n        area = base * height\n        areas.append(area)\n    \n    return areas\n\n# Example usage:\nparallelograms = [(5.0, 3.0), (4.0, 2.5), (6.0, 4.0)]\nareas = parallelogram_area(parallelograms)\nfor i, area in enumerate(areas):\n    print(f\"The area of parallelogram {i+1} is {area}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpy_27slv4.py\", line 16, in <module>\n    assert parallelogram_area_list([(10, 20), (15, 20), (8, 9)]) == [200, 300, 72]\nNameError: name 'parallelogram_area_list' is not defined", "passed": false}
{"task_id": 53, "requirement": "Functionality Extension", "completion": "def check_equality(s):\n    \"\"\"\n    Check if the first and last characters of a given string are equal, ignoring case sensitivity.\n\n    Args:\n    s (str): The input string to be checked.\n\n    Returns:\n    bool: True if the first and last characters are equal (case-insensitive), False otherwise.\n    \"\"\"\n    # Convert the string to lowercase to ensure case insensitivity\n    s = s.lower()\n    \n    # Check if the string is empty or has only one character\n    if len(s) < 2:\n        return True\n    \n    # Compare the first and last characters\n    return s[0] == s[-1]\n\n# Example usage:\ntest_string = \"Radar\"\nresult = check_equality(test_string)\nprint(f\"The first and last characters of '{test_string}' are equal (case-insensitive): {result}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjqreshk8.py\", line 13, in <module>\n    assert check_equality('Abca') == 'Equal'\nAssertionError", "passed": false}
{"task_id": 54, "requirement": "Functionality Extension", "completion": "def counting_sort(arr):\n    \"\"\"\n    Sorts an array of integers (including negative integers) using the counting sort algorithm.\n    \n    :param arr: List of integers to be sorted.\n    :return: Sorted list of integers.\n    \"\"\"\n    if not arr:\n        return []\n\n    # Find the minimum and maximum values in the array\n    min_value = min(arr)\n    max_value = max(arr)\n\n    # Initialize count array with zeros\n    count_size = max_value - min_value + 1\n    count = [0] * count_size\n\n    # Adjust indices to account for negative numbers\n    offset = -min_value\n    for num in arr:\n        count[num + offset] += 1\n\n    # Reconstruct the sorted array\n    sorted_arr = []\n    for i in range(len(count)):\n        sorted_arr.extend([i - offset] * count[i])\n\n    return sorted_arr\n\n# Example usage:\nif __name__ == \"__main__\":\n    unsorted_array = [-5, 2, 2, 8, -3, 3, 1]\n    sorted_array = counting_sort(unsorted_array)\n    print(\"Sorted Array:\", sorted_array)\n", "result": "passed", "passed": true}
{"task_id": 55, "requirement": "Functionality Extension", "completion": "def tn_gp(a, r, n):\n    \"\"\"\n    Calculate the n-th term of a geometric series.\n\n    Parameters:\n    a (float): The first term of the geometric series.\n    r (float): The common ratio of the geometric series.\n    n (int): The term number to find.\n\n    Returns:\n    float: The n-th term of the geometric series.\n    \"\"\"\n    # Ensure n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    # Calculate the n-th term\n    a_n = a * (r ** (n - 1))\n    return a_n\n\n# Example usage:\na = 3.5  # First term (floating-point)\nr = 2.0  # Common ratio (floating-point)\nn = 5    # Term number to find\n\nprint(f\"The {n}-th term of the geometric series is: {tn_gp(a, r, n)}\")\n", "result": "passed", "passed": true}
{"task_id": 56, "requirement": "Functionality Extension", "completion": "def check(number):\n    # Determine if the number is negative\n    is_negative = number < 0\n    \n    # Convert the absolute value of the number to a string to easily reverse it\n    num_str = str(abs(number))\n    \n    # Reverse the string representation of the number\n    reversed_num_str = num_str[::-1]\n    \n    # Convert the reversed string back to an integer\n    reversed_number = int(reversed_num_str)\n    \n    # If the original number was negative, make the reversed number negative\n    if is_negative:\n        reversed_number = -reversed_number\n    \n    # Calculate twice the reversed number\n    twice_reversed = 2 * reversed_number\n    \n    # Check if the result is one more than the original number\n    return twice_reversed == number + 1\n\n# Example usage:\nprint(check(-47))  # True, because 2 * -74 (reversed -47) is -148, which is -47 + 1\nprint(check(69))   # False, because 2 * 96 (reversed 69) is 192, which is not 69 + 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdf8_vycb.py\", line 21, in <module>\n    assert check(-37) == True\nAssertionError", "passed": false}
{"task_id": 57, "requirement": "Functionality Extension", "completion": "def find_max_num(digits):\n    \"\"\"\n    Finds the largest number that can be formed from the given list of digits,\n    including handling duplicates.\n\n    :param digits: A list of integers (digits).\n    :return: An integer representing the largest number that can be formed.\n    \"\"\"\n    # Convert each digit to a string for easy concatenation\n    str_digits = [str(digit) for digit in digits]\n    \n    # Sort the digits in descending order while preserving the order of equal elements\n    str_digits.sort(key=lambda x: x * 3, reverse=True)\n    \n    # Join the sorted digits to form the largest number\n    max_num_str = ''.join(str_digits)\n    \n    # Convert the string back to an integer\n    max_num = int(max_num_str)\n    \n    return max_num\n\n# Example usage:\ndigits = [5, 3, 0, 7, 4, 3]\nprint(find_max_num(digits))  # Output: 754330\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpnye5osco.py\", line 14, in <module>\n    assert find_max_num([1, 1, 2, 2], 4) == 2211\nTypeError: find_max_num() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 58, "requirement": "Functionality Extension", "completion": "def opposite_signs(pairs):\n    \"\"\"\n    Check if each pair of integers in the list have opposite signs.\n\n    Parameters:\n    pairs (list of tuples): A list where each tuple contains two integers.\n\n    Returns:\n    list: A list of boolean values indicating whether each pair has opposite signs.\n    \"\"\"\n    results = []\n    for a, b in pairs:\n        # Get the sign bit of both numbers\n        # The sign bit is the MSB (most significant bit)\n        # For positive numbers, the sign bit is 0\n        # For negative numbers, the sign bit is 1\n        sign_a = a >> (a.bit_length() - 1)\n        sign_b = b >> (b.bit_length() - 1)\n\n        # If the sign bits are different, the numbers have opposite signs\n        results.append(sign_a != sign_b)\n    return results\n\n# Example usage:\npairs = [(10, -5), (-10, -5), (10, 5)]\nprint(opposite_signs(pairs))  # Output: [True, False, False]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0mev84wr.py\", line 16, in <module>\n    assert opposite_signs_list([(1, -2), (3, 2), (-10, -10)]) == [True, False, False]\nNameError: name 'opposite_signs_list' is not defined", "passed": false}
{"task_id": 59, "requirement": "Functionality Extension", "completion": "def is_octagonal(n):\n    if isinstance(n, list):\n        return [octagonal_number(i) for i in range(1, n[0] + 1)]\n    else:\n        return octagonal_number(n)\n\ndef octagonal_number(n):\n    return n * (3 * n - 2)\n\n# Example usage:\nprint(is_octagonal([1]))   # [1]\nprint(is_octagonal([1, 2]))  # [1, 8]\nprint(is_octagonal([1, 2, 3]))  # [1, 8, 22]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxhdstndr.py\", line 12, in <module>\n    assert is_octagonal([1, 2, 3]) == [1, 8, 21]\nAssertionError", "passed": false}
{"task_id": 60, "requirement": "Functionality Extension", "completion": "def max_len_sub(arr):\n    if not arr:\n        return 0\n    \n    # Dictionary to store the length of the longest subsequence ending with a particular element\n    dp = {}\n    \n    # Iterate through the array\n    for num in arr:\n        # The length of the subsequence ending with `num` can be derived from the lengths of subsequences\n        # ending with `num-1` or `num+1`, whichever is available in the dictionary.\n        dp[num] = 1 + max(dp.get(num - 1, 0), dp.get(num + 1, 0))\n    \n    # Return the maximum value from the dictionary, which represents the length of the longest subsequence\n    return max(dp.values())\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp16eo7l5o.py\", line 13, in <module>\n    assert max_len_sub([10, 7, 4, 1, -2], -3) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}

{"task_id": 11, "completion": "def remove_occ(s, ch):\n    # Find the index of the first occurrence of the character\n    first_index = s.find(ch)\n    \n    if first_index == -1:\n        return s  # Character not found in the string\n    \n    # Remove the first occurrence\n    s = s[:first_index] + s[first_index + 1:]\n    \n    # Find the index of the last occurrence of the character\n    last_index = s.rfind(ch)\n    \n    if last_index == -1:\n        return s  # Character not found in the string (shouldn't happen due to previous check)\n    \n    # Remove the last occurrence\n    s = s[:last_index] + s[last_index + 1:]\n    \n    return s\n\n# Example usage:\ninput_string = \"hello world\"\ncharacter_to_remove = 'l'\nresult = remove_occ(input_string, character_to_remove)\nprint(result)  # Output: \"heo word\"\n", "result": "passed", "passed": true}
{"task_id": 12, "completion": "def sort_matrix(matrix):\n    # Sort the matrix based on the sum of each row\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    return sorted_matrix\n\n# Example usage:\nmatrix = [\n    [3, 2, 1],\n    [6, 5, 4],\n    [9, 8, 7]\n]\n\nsorted_matrix = sort_matrix(matrix)\nprint(sorted_matrix)\n", "result": "passed", "passed": true}
{"task_id": 13, "completion": "from collections import Counter\n\ndef count_common(word_dict):\n    # Flatten the list of lists into a single list of words\n    all_words = [word for sublist in word_dict.values() for word in sublist]\n    \n    # Count the occurrences of each word\n    word_counts = Counter(all_words)\n    \n    # Get the most common words\n    most_common_words = word_counts.most_common()\n    \n    return most_common_words\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgzre0i4a.py\", line 15, in <module>\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n  File \"/tmp/tmpgzre0i4a.py\", line 5, in count_common\n    all_words = [word for sublist in word_dict.values() for word in sublist]\nAttributeError: 'list' object has no attribute 'values'", "passed": false}
{"task_id": 14, "completion": "def find_volume(base_area, height):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base_area (float): The area of the triangular base.\n    height (float): The height (or length) of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    if base_area < 0 or height < 0:\n        raise ValueError(\"Base area and height must be non-negative.\")\n    \n    volume = base_area * height\n    return volume\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgqklb5v0.py\", line 18, in <module>\n    assert find_volume(10,8,6) == 240\nTypeError: find_volume() takes 2 positional arguments but 3 were given", "passed": false}
{"task_id": 15, "completion": "import re\n\ndef split_lowerstring(text):\n    return re.findall('[a-z][^a-z]*', text)\n\n# Example usage:\ntext = \"HelloWorldThisIsPython\"\nresult = split_lowerstring(text)\nprint(result)  # Output: ['Hello', 'World', 'This', 'Is', 'Python']\n", "result": "passed", "passed": true}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    matches = re.findall(pattern, text)\n    return matches\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpfy8rsnd1.py\", line 8, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Parameters:\n    side_length (float or int): The length of one side of the square.\n\n    Returns:\n    float or int: The perimeter of the square.\n    \"\"\"\n    if not isinstance(side_length, (int, float)):\n        raise ValueError(\"The side length must be a number.\")\n    \n    return 4 * side_length\n", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(str1, str2):\n    # Create a set of characters to be removed for faster lookup\n    chars_to_remove = set(str2)\n    \n    # Use list comprehension to filter out unwanted characters\n    result = ''.join([char for char in str1 if char not in chars_to_remove])\n    \n    return result\n\n# Example usage:\nstr1 = \"hello world\"\nstr2 = \"ad\"\ncleaned_str = remove_dirty_chars(str1, str2)\nprint(cleaned_str)  # Output: \"hello worl\"\n", "result": "passed", "passed": true}
{"task_id": 19, "completion": "def test_duplicate(arr):\n    # Convert the list to a set to remove duplicates\n    unique_elements = set(arr)\n    \n    # Compare the length of the original list with the set\n    if len(unique_elements) == len(arr):\n        return False  # No duplicates found\n    else:\n        return True   # Duplicates found\n\n# Example usage:\narr1 = [1, 2, 3, 4, 5]\narr2 = [1, 2, 3, 3, 5]\n\nprint(test_duplicate(arr1))  # Output: False\nprint(test_duplicate(arr2))  # Output: True\n", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(n):\n    if n < 1:\n        return False\n    \n    # Start with the smallest possible Woodall number (3)\n    woodall_number = 3\n    power_of_two = 2\n    \n    while woodall_number <= n:\n        if woodall_number == n:\n            return True\n        power_of_two *= 2\n        woodall_number = power_of_two * (power_of_two.bit_length() - 1)\n    \n    return False\n\n# Example usage:\nprint(is_woodall(7))  # True, because 3 * 2^3 - 1 = 23\nprint(is_woodall(23)) # True, because 3 * 2^3 - 1 = 23\nprint(is_woodall(15)) # False, not a Woodall number\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkqch16jd.py\", line 22, in <module>\n    assert is_woodall(383) == True\nAssertionError", "passed": false}
{"task_id": 21, "completion": "def multiples_of_num(n, m):\n    \"\"\"\n    Find the first m multiples of n.\n\n    Parameters:\n    n (int): The number for which to find multiples.\n    m (int): The number of multiples to find.\n\n    Returns:\n    list: A list containing the first m multiples of n.\n    \"\"\"\n    if n == 0:\n        raise ValueError(\"The number n cannot be zero.\")\n    \n    multiples = [i * n for i in range(1, m + 1)]\n    return multiples\n\n# Example usage:\n# print(multiples_of_num(5, 3))  # Output: [5, 10, 15]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmptl_oa961.py\", line 21, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "completion": "def find_first_duplicate(arr):\n    seen = set()\n    \n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    \n    return -1  # Return -1 if no duplicates are found\n\n# Example usage:\narr = [2, 5, 1, 2, 3, 5, 1]\nprint(find_first_duplicate(arr))  # Output: 2\n", "result": "passed", "passed": true}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists):\n    if not list_of_lists:\n        return 0\n    max_sum = float('-inf')\n    for sublist in list_of_lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [4, 5, 6], [10, 11]]\nprint(maximum_sum(list_of_lists))  # Output: 21\n", "result": "passed", "passed": true}
{"task_id": 24, "completion": "def binary_to_decimal(binary):\n    \"\"\"\n    Convert a binary number (as a string) to its decimal equivalent.\n\n    Parameters:\n    binary (str): The binary number as a string.\n\n    Returns:\n    int: The decimal equivalent of the binary number.\n    \"\"\"\n    # Initialize the decimal value to 0\n    decimal = 0\n    \n    # Iterate over each character in the binary string\n    for i, digit in enumerate(reversed(binary)):\n        if digit == '1':\n            decimal += 2 ** i\n    \n    return decimal\n\n# Example usage:\nbinary_number = \"1101\"\ndecimal_number = binary_to_decimal(binary_number)\nprint(f\"The decimal equivalent of {binary_number} is {decimal_number}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp03kuf_in.py\", line 26, in <module>\n    assert binary_to_decimal(100) == 4\n  File \"/tmp/tmp03kuf_in.py\", line 15, in binary_to_decimal\n    for i, digit in enumerate(reversed(binary)):\nTypeError: 'int' object is not reversible", "passed": false}
{"task_id": 25, "completion": "def find_product(arr):\n    from collections import Counter\n    \n    # Count the occurrences of each element in the array\n    count = Counter(arr)\n    \n    # Initialize the product to 1 (multiplicative identity)\n    product = 1\n    \n    # Iterate through the array and multiply only non-repeated elements\n    for num in arr:\n        if count[num] == 1:\n            product *= num\n    \n    return product\n\n# Example usage:\narr = [2, 3, 4, 2, 5, 6, 7, 8, 9, 9]\nprint(find_product(arr))  # Output will be 3 * 4 * 5 * 6 * 7 * 8 = 20160\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpllvjs8xw.py\", line 21, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(test_list, K):\n    # Use a generator expression to count tuples with less than K elements\n    res = not any(len(sub) < K for sub in test_list)\n    return res\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpoy3sxayf.py\", line 6, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "completion": "import re\n\ndef remove(strings):\n    # Define a regular expression pattern to match digits\n    digit_pattern = r'\\d'\n    \n    # Use list comprehension to apply the regex substitution to each string in the list\n    result = [re.sub(digit_pattern, '', s) for s in strings]\n    \n    return result\n", "result": "passed", "passed": true}
{"task_id": 28, "completion": "import math\n\ndef binomial_coefficient(n, k):\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    k = min(k, n - k)  # Take advantage of symmetry\n    coeff = 1\n    for i in range(k):\n        coeff *= (n - i)\n        coeff //= (i + 1)\n    return coeff\n\n# Example usage:\nn = 5\nk = 2\nprint(f\"C({n}, {k}) = {binomial_coefficient(n, k)}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0_ktf6u3.py\", line 20, in <module>\n    assert binomial_coeff(5,2) == 10\nNameError: name 'binomial_coeff' is not defined", "passed": false}
{"task_id": 29, "completion": "def get_odd_occurrence(arr):\n    # Create a dictionary to store the count of each element\n    count_dict = {}\n    \n    # Iterate through the array and populate the dictionary\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Find the element with an odd count\n    for num, count in count_dict.items():\n        if count % 2 != 0:\n            return num\n    \n    # If no such element exists (which shouldn't happen in a valid input), return None\n    return None\n\n# Example usage:\narr = [20, 30, 40, 50, 60, 70, 80, 90, 100, 20]\nprint(get_odd_occurrence(arr))  # Output should be 20\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpg48dt51l.py\", line 24, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    def count_substrings_with_char(s, char):\n        count = 0\n        for i in range(len(s)):\n            if s[i] == char:\n                count += 1\n        return count\n\n    total_count = 0\n    n = len(s)\n    \n    # Count substrings starting and ending with each character\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substring = s[i:j]\n            if substring[0] == substring[-1]:\n                total_count += 1\n    \n    return total_count\n\n# Example usage:\ns = \"abcab\"\nprint(count_substring_with_equal_ends(s))  # Output will be the number of substrings starting and ending with the same character\n", "result": "passed", "passed": true}
{"task_id": 31, "completion": "import heapq\nfrom collections import Counter\n\ndef func(lists, k):\n    # Flatten the list of lists into a single list\n    flat_list = [num for sublist in lists for num in sublist]\n    \n    # Count the frequency of each number in the flattened list\n    freq_counter = Counter(flat_list)\n    \n    # Use heapq.nlargest to get the k numbers with the highest frequencies\n    result = heapq.nlargest(k, freq_counter.items(), key=lambda x: x[1])\n    \n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpodw836xt.py\", line 16, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    # Initialize the maximum prime factor variable\n    max_prime = -1\n    \n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        max_prime = 2\n        n //= 2\n    \n    # n must be odd at this point, so we can skip one element (Note i = i + 2)\n    for i in range(3, int(n**0.5) + 1, 2):\n        # While i divides n, print i and divide n\n        while n % i == 0:\n            max_prime = i\n            n //= i\n    \n    # This condition is to handle the case when n is a prime number greater than 2\n    if n > 2:\n        max_prime = n\n    \n    return max_prime\n\n# Example usage:\nnumber = 600851475143\nprint(f\"The largest prime factor of {number} is {max_prime_factors(number)}\")\n", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(decimal_number):\n    if decimal_number == 0:\n        return \"0\"\n    \n    binary_digits = []\n    while decimal_number > 0:\n        remainder = decimal_number % 2\n        binary_digits.append(str(remainder))\n        decimal_number //= 2\n    \n    # The binary digits are in reverse order, so we need to reverse them\n    binary_digits.reverse()\n    \n    # Join the list into a string\n    binary_string = ''.join(binary_digits)\n    return binary_string\n\n# Example usage:\ndecimal_number = 13\nbinary_representation = decimal_to_binary(decimal_number)\nprint(f\"The binary representation of {decimal_number} is {binary_representation}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpb9rd7omp.py\", line 23, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "completion": "def find_missing(arr):\n    def binary_search(left, right):\n        if left > right:\n            return -1\n        \n        mid = (left + right) // 2\n        \n        # Check if the missing element is at mid\n        if arr[mid] != mid + arr[0]:\n            if mid == 0 or arr[mid - 1] == mid - 1 + arr[0]:\n                return mid + arr[0]\n            return binary_search(left, mid - 1)\n        \n        # If the missing element is not at mid, check the right half\n        return binary_search(mid + 1, right)\n    \n    # Edge case: if the first element is not 0, then 0 is the missing element\n    if arr[0] != 0:\n        return 0\n    \n    n = len(arr)\n    return binary_search(0, n - 1)\n\n# Example usage:\narr = [1, 2, 3, 5, 6, 7, 8]\nprint(find_missing(arr))  # Output: 4\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkfau1yoa.py\", line 28, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    if not isinstance(n, int) or n < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    return n * (n + 1) * (2 * n + 1) // 6\n\n# Example usage:\nn = 5\nprint(f\"The {n}-th rectangular number is: {find_rect_num(n)}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0lld931r.py\", line 10, in <module>\n    assert find_rect_num(4) == 20\nAssertionError", "passed": false}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator, n):\n    if numerator >= denominator:\n        raise ValueError(\"Numerator must be less than the denominator for a proper fraction.\")\n    \n    # Dictionary to store remainders and their corresponding positions\n    remainder_positions = {}\n    quotient_digits = []\n    remainder = numerator\n    \n    # Perform long division until we reach the nth digit or detect a repeating cycle\n    while remainder != 0 and len(quotient_digits) < n:\n        if remainder in remainder_positions:\n            start_index = remainder_positions[remainder]\n            non_repeating = ''.join(map(str, quotient_digits[:start_index]))\n            repeating = ''.join(map(str, quotient_digits[start_index:n]))\n            break\n        \n        remainder_positions[remainder] = len(quotient_digits)\n        remainder *= 10\n        quotient_digit = remainder // denominator\n        quotient_digits.append(quotient_digit)\n        remainder = remainder % denominator\n    \n    # If we didn't reach the nth digit, it means the fraction terminates\n    if len(quotient_digits) < n:\n        return None\n    \n    # Return the nth digit\n    return int(''.join(map(str, quotient_digits))[-n])\n\n# Example usage:\nnumerator = 1\ndenominator = 3\nn = 5\nprint(find_nth_digit(numerator, denominator, n))  # Output: 3\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpf4npi1d_.py\", line 39, in <module>\n    assert find_nth_digit(5,6,5) == 3\nAssertionError", "passed": false}
{"task_id": 37, "completion": "def sort_mixed_list(mixed_list):\n    # Separate integers and strings into two lists\n    int_part = sorted([item for item in mixed_list if isinstance(item, int)])\n    str_part = sorted([item for item in mixed_list if isinstance(item, str)])\n    \n    # Combine the sorted parts\n    sorted_list = int_part + str_part\n    return sorted_list\n\n# Example usage:\nmixed_list = [1, \"apple\", 2, \"banana\", 3, \"cherry\"]\nsorted_list = sort_mixed_list(mixed_list)\nprint(sorted_list)  # Output: [1, 2, 3, 'apple', 'banana', 'cherry']\n", "result": "passed", "passed": true}
{"task_id": 38, "completion": "def div_even_odd(lst):\n    # Find the first even number in the list\n    first_even = next((x for x in lst if x % 2 == 0), None)\n    \n    # Find the first odd number in the list\n    first_odd = next((x for x in lst if x % 2 != 0), None)\n    \n    # Check if both even and odd numbers exist in the list\n    if first_even is not None and first_odd is not None:\n        return first_even / first_odd\n    else:\n        raise ValueError(\"The list must contain at least one even and one odd number.\")\n\n# Example usage:\nexample_list = [3, 5, 7, 8, 10]\nresult = div_even_odd(example_list)\nprint(result)  # Output will be 8.0 / 3.0\n", "result": "passed", "passed": true}
{"task_id": 39, "completion": "import heapq\nfrom collections import Counter\n\ndef rearrange_string(s):\n    # Count the frequency of each character\n    char_count = Counter(s)\n    \n    # Create a max-heap based on character frequency\n    max_heap = [(-freq, char) for char, freq in char_count.items()]\n    heapq.heapify(max_heap)\n    \n    prev_char = None\n    prev_freq = 0\n    result = []\n    \n    while max_heap or prev_freq:\n        if prev_freq < 0:\n            heapq.heappush(max_heap, (prev_freq, prev_char))\n        \n        if not max_heap:\n            return \"\"  # It's not possible to rearrange\n        \n        freq, char = heapq.heappop(max_heap)\n        result.append(char)\n        prev_char = char\n        prev_freq = freq + 1\n    \n    return ''.join(result)\n\n# Example usage:\ns = \"aabbcc\"\nprint(rearrange_string(s))  # Output could be \"abcabc\" or any valid rearrangement\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8dqzmqz5.py\", line 34, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "completion": "from collections import Counter\n\ndef freq_element(list_of_lists):\n    # Flatten the list of lists into a single list\n    flattened_list = [item for sublist in list_of_lists for item in sublist]\n    \n    # Use Counter to count the frequency of each element\n    frequency = Counter(flattened_list)\n    \n    return frequency\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [2, 3, 4], [4, 5]]\nprint(freq_element(list_of_lists))\n", "result": "passed", "passed": true}
{"task_id": 41, "completion": "def filter_evennumbers(numbers):\n    # Use the filter function with a lambda to filter even numbers\n    even_numbers = list(filter(lambda x: (x % 2 == 0), numbers))\n    return even_numbers\n\n# Example usage:\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nresult = filter_evennumbers(numbers)\nprint(result)  # Output: [2, 4, 6, 8, 10]\n", "result": "passed", "passed": true}
{"task_id": 42, "completion": "def find_sum(arr):\n    # Create a dictionary to store the frequency of each element\n    freq = {}\n    \n    # Iterate through the array and count the frequency of each element\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Calculate the sum of repeated elements (elements with frequency greater than 1)\n    repeated_sum = 0\n    for num, count in freq.items():\n        if count > 1:\n            repeated_sum += num * count\n    \n    return repeated_sum\n\n# Example usage:\narr = [1, 2, 3, 2, 4, 5, 5, 6]\nresult = find_sum(arr)\nprint(\"Sum of repeated elements:\", result)  # Output: Sum of repeated elements: 12\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2x9qyyo1.py\", line 25, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    pattern = r'^[a-z]+_[a-z]+$'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n", "result": "passed", "passed": true}
{"task_id": 44, "completion": "import re\n\ndef text_match_string(text):\n    pattern = r'^\\w+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpx0y4pdca.py\", line 10, in <module>\n    assert text_match_string(\" python\")==('Not matched!')\nAssertionError", "passed": false}
{"task_id": 45, "completion": "import math\nfrom functools import reduce\n\ndef get_gcd(arr):\n    # Helper function to compute GCD of two numbers\n    def gcd(a, b):\n        return math.gcd(a, b)\n    \n    # Use reduce to apply the gcd function across all elements in the array\n    result = reduce(gcd, arr)\n    return result\n", "result": "passed", "passed": true}
{"task_id": 46, "completion": "def test_distinct(data):\n    if len(data) == len(set(data)):\n        return True\n    else:\n        return False\n", "result": "passed", "passed": true}
{"task_id": 47, "completion": "def mod_inverse(a, m):\n    m0, x0, x1 = m, 0, 1\n    if m == 1:\n        return 0\n    while a > 1:\n        # q is quotient\n        q = a // m\n        m, a = a % m, m\n        x0, x1 = x1 - q * x0, x0\n    # Make x1 positive\n    if x1 < 0:\n        x1 += m0\n    return x1\n\ndef factorial_mod(n, mod):\n    if n >= mod:\n        return 0\n    fact = 1\n    for i in range(1, n + 1):\n        fact = (fact * i) % mod\n    return fact\n\ndef compute_last_digit(a, b):\n    MOD = 10\n    if a == b:\n        return 1\n    if a > b:\n        return 0\n    \n    # Compute b! % 10\n    fact_b = factorial_mod(b, MOD)\n    \n    # Compute a! % 10\n    fact_a = factorial_mod(a, MOD)\n    \n    # Compute the modular inverse of a! % 10\n    inv_fact_a = mod_inverse(fact_a, MOD)\n    \n    # Compute the last digit of (b! / a!)\n    last_digit = (fact_b * inv_fact_a) % MOD\n    return last_digit\n\n# Example usage:\nprint(compute_last_digit(5, 8))  # Output should be 2\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwth1mvol.py\", line 46, in <module>\n    assert compute_last_digit(2,4) == 2\n  File \"/tmp/tmpwth1mvol.py\", line 37, in compute_last_digit\n    inv_fact_a = mod_inverse(fact_a, MOD)\n  File \"/tmp/tmpwth1mvol.py\", line 7, in mod_inverse\n    q = a // m\nZeroDivisionError: integer division or modulo by zero", "passed": false}
{"task_id": 48, "completion": "def odd_bit_set_number(n):\n    # Initialize a mask with all odd bits set to 1\n    mask = 0xAAAAAAAA  # This is a hexadecimal representation where all even bits are 0 and all odd bits are 1\n    \n    # Use bitwise OR to set all odd bits of n to 1\n    result = n | mask\n    \n    return result\n\n# Example usage:\nnumber = 10  # Binary: 1010\nresult = odd_bit_set_number(number)\nprint(f\"Original number: {number} (binary: {bin(number)[2:].zfill(8)})\"\n      f\"\\nResult after setting odd bits: {result} (binary: {bin(result)[2:].zfill(8)})\"\n", "result": "failed: File \"/tmp/tmpu10pmwte.py\", line 16\n    assert odd_bit_set_number(10) == 15\n    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 49, "completion": "def specified_element(list1, index=0):\n    result = [row[index] for row in list1]\n    return result\n\n# Example usage:\nlist1 = [[1, 2], [3, 4], [5, 6]]\nprint(specified_element(list1))  # Output: [1, 3, 5]\n\n# Extracting the second element (index 1)\nprint(specified_element(list1, 1))  # Output: [2, 4, 6]\n", "result": "passed", "passed": true}
{"task_id": 50, "completion": "def min_length_list(lists):\n    # Use the min function with a key argument to find the list with the minimum length\n    return min(lists, key=lambda x: len(x))\n\n# Example usage:\nlists = [[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]\nresult = min_length_list(lists)\nprint(result)  # Output: [4, 5]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0n2hfzpe.py\", line 10, in <module>\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nAssertionError", "passed": false}
{"task_id": 51, "completion": "def check_equilateral(a, b, c):\n    \"\"\"\n    Check if a triangle with sides a, b, and c is equilateral.\n    \n    Parameters:\n    a (float): Length of the first side.\n    b (float): Length of the second side.\n    c (float): Length of the third side.\n    \"\"\"\n    if a == b == c:\n        print(\"The triangle is equilateral.\")\n    else:\n        print(\"The triangle is not equilateral.\")\n\n# Example usage:\n# check_equilateral(3, 3, 3)  # Output: The triangle is equilateral.\n# check_equilateral(3, 4, 5)  # Output: The triangle is not equilateral.\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmqs9_dez.py\", line 19, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram.\n    \"\"\"\n    if base < 0 or height < 0:\n        raise ValueError(\"Base and height must be non-negative numbers.\")\n    \n    area = base * height\n    return area\n", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(s):\n    if len(s) == 0:\n        return False\n    return s[0] == s[-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpij1gh8jt.py\", line 6, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 54, "completion": "def counting_sort(arr):\n    if not arr:\n        return []\n\n    # Find the maximum and minimum values in the array\n    max_val = max(arr)\n    min_val = min(arr)\n\n    # Initialize the count array with zeros\n    count_range = max_val - min_val + 1\n    count_arr = [0] * count_range\n\n    # Store the count of each element in the count array\n    for num in arr:\n        count_arr[num - min_val] += 1\n\n    # Reconstruct the sorted array\n    sorted_index = 0\n    for i in range(count_range):\n        while count_arr[i] > 0:\n            arr[sorted_index] = i + min_val\n            sorted_index += 1\n            count_arr[i] -= 1\n\n    return arr\n\n# Example usage:\narr = [4, 2, 2, 8, 3, 3, 1]\nsorted_arr = counting_sort(arr)\nprint(sorted_arr)  # Output: [1, 2, 2, 3, 3, 4, 8]\n", "result": "passed", "passed": true}
{"task_id": 55, "completion": "def tn_gp(a, r, n):\n    \"\"\"\n    Calculate the n-th term of a geometric series.\n\n    Parameters:\n    a (float): The first term of the series.\n    r (float): The common ratio of the series.\n    n (int): The term number to find.\n\n    Returns:\n    float: The n-th term of the geometric series.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"The term number must be a positive integer.\")\n    \n    return a * (r ** (n - 1))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdlgrc4p9.py\", line 18, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def reverse_number(n):\n    reversed_n = 0\n    while n > 0:\n        reversed_n = reversed_n * 10 + n % 10\n        n //= 10\n    return reversed_n\n\ndef check(n):\n    reversed_n = reverse_number(n)\n    return n == 2 * reversed_n - 1\n\n# Example usage:\nnumber = 32\nif check(number):\n    print(f\"{number} is one less than twice its reverse.\")\nelse:\n    print(f\"{number} is not one less than twice its reverse.\")\n", "result": "passed", "passed": true}
{"task_id": 57, "completion": "def find_max_num(digits):\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n    \n    # Convert each digit to string for concatenation\n    digits = [str(digit) for digit in digits]\n    \n    # Concatenate the sorted digits to form the largest number\n    max_num = int(''.join(digits))\n    \n    return max_num\n\n# Example usage:\ndigits = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\nprint(find_max_num(digits))  # Output: 96555433211\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplz4qb77_.py\", line 17, in <module>\n    assert find_max_num([1,2,3],3) == 321\nTypeError: find_max_num() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 58, "completion": "def opposite_signs(x, y):\n    return (x ^ y) < 0\n", "result": "passed", "passed": true}
{"task_id": 59, "completion": "def is_octagonal(n):\n    if n < 1:\n        raise ValueError(\"The input must be a positive integer.\")\n    return n * (3 * n - 2)\n", "result": "passed", "passed": true}
{"task_id": 60, "completion": "def max_len_sub(arr):\n    if not arr:\n        return 0\n    \n    n = len(arr)\n    dp = [1] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)\n\n# Example usage:\narr = [1, 2, 3, 4, 5]\nprint(max_len_sub(arr))  # Output: 5\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpf_o4jryv.py\", line 19, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}

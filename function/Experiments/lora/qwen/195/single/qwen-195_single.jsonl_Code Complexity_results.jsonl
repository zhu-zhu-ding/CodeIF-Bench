{"task_id": 11, "completion": "def remove_occ(s, ch):\n    # Find the index of the first occurrence of the character\n    first_index = s.find(ch)\n    \n    if first_index == -1:\n        return s\n    \n    # Remove the first occurrence\n    s = s[:first_index] + s[first_index + 1:]\n    \n    # Find the index of the last occurrence of the character\n    last_index = s.rfind(ch)\n    \n    if last_index == -1:\n        return s\n    \n    # Remove the last occurrence\n    s = s[:last_index] + s[last_index + 1:]\n    \n    return s\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 14, "completion": "def find_volume(base_area, height):\n    return base_area * height\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqjqolq1y.py\", line 3, in <module>\n    assert find_volume(10,8,6) == 240\nTypeError: find_volume() takes 2 positional arguments but 3 were given", "passed": false}
{"task_id": 15, "completion": "import re\n\ndef split_lowerstring(text):\n    return re.findall('[a-z][^a-z]*', text)\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    return re.findall(r'[a-z]+_[a-z]+', text)\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9b7doloh.py\", line 4, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    return 4 * side_length\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(n):\n    if n < 0:\n        return False\n    while n % 2 == 0:\n        n //= 2\n    return n == 1\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpy_orbfc_.py\", line 7, in <module>\n    assert is_woodall(383) == True\nAssertionError", "passed": false}
{"task_id": 21, "completion": "def multiples_of_num(n, m):\n    result = []\n    for i in range(1, m + 1):\n        result.append(i * n)\n    return result\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4oyhjzsv.py\", line 6, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 24, "completion": "def binary_to_decimal(binary):\n    return int(binary, 2)\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6ww168cw.py\", line 3, in <module>\n    assert binary_to_decimal(100) == 4\n  File \"/tmp/tmp6ww168cw.py\", line 2, in binary_to_decimal\n    return int(binary, 2)\nTypeError: int() can't convert non-string with explicit base", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    max_prime = -1\n    \n    while n % 2 == 0:\n        max_prime = 2\n        n //= 2\n    \n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n //= i\n    \n    if n > 2:\n        max_prime = n\n    \n    return max_prime\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(decimal_number):\n    return bin(decimal_number).replace(\"0b\", \"\")\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmprvrmplic.py\", line 3, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    return n * (n + 1) // 2\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvstm_he0.py\", line 3, in <module>\n    assert find_rect_num(4) == 20\nAssertionError", "passed": false}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator):\n    if numerator == 0:\n        return 0\n    \n    # Calculate the remainder when numerator is divided by denominator\n    remainder = numerator % denominator\n    \n    # If remainder is 0, the fraction is an integer\n    if remainder == 0:\n        return None\n    \n    # Find the nth digit in the repeating part\n    for _ in range(n):\n        remainder *= 10\n        digit = remainder // denominator\n        remainder %= denominator\n    \n    return digit\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpu4ngc5fu.py\", line 15, in <module>\n    assert find_nth_digit(1,2,1) == 5\nTypeError: find_nth_digit() takes 2 positional arguments but 3 were given", "passed": false}
{"task_id": 38, "completion": "def div_even_odd(numbers):\n    evens = [num for num in numbers if num % 2 == 0]\n    odds = [num for num in numbers if num % 2 != 0]\n    \n    if not evens or not odds:\n        return None\n    \n    return evens[0] / odds[0]\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpzkcd7w7b.py\", line 12, in <module>\n    assert cc_visit(inspect.getsource(div_even_odd))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 40, "completion": "from collections import Counter\n\ndef freq_element(list_of_lists):\n    # Flatten the list of lists into a single list\n    flattened_list = [element for sublist in list_of_lists for element in sublist]\n    # Count the frequency of each element\n    frequency = Counter(flattened_list)\n    return frequency\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp51oe433e.py\", line 13, in <module>\n    assert cc_visit(inspect.getsource(freq_element))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 42, "completion": "def find_sum(arr):\n    from collections import Counter\n    \n    # Count occurrences of each element\n    count = Counter(arr)\n    \n    # Sum elements that appear more than once\n    return sum([x * (count[x] - 1) for x in count if count[x] > 1])\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1cjmmqmw.py\", line 7, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    patterns = '^[a-z]+_[a-z]+$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp60chqv6v.py\", line 13, in <module>\n    assert cc_visit(inspect.getsource(text_match))[0].complexity ==1\nAssertionError", "passed": false}
{"task_id": 45, "completion": "def get_gcd(arr):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    if not arr:\n        raise ValueError(\"Array must contain at least one element\")\n    \n    result = arr[0]\n    for num in arr[1:]:\n        result = gcd(result, num)\n    \n    return result\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9gqixysz.py\", line 17, in <module>\n    assert cc_visit(inspect.getsource(get_gcd))[0].complexity <=1\nAssertionError", "passed": false}
{"task_id": 47, "completion": "def compute_last_digit(a, b):\n    if a == b:\n        return 1\n    elif (a - b) >= 5:\n        return 0\n    else:\n        result = 1\n        for i in range(b + 1, a + 1):\n            result = (result * (i % 10)) % 10\n        return result % 10\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpzqiizxnf.py\", line 11, in <module>\n    assert compute_last_digit(2,4) == 2\nAssertionError", "passed": false}
{"task_id": 51, "completion": "def check_equilateral(a, b, c):\n    if a == b == c:\n        print(\"The triangle is equilateral.\")\n    else:\n        print(\"The triangle is not equilateral.\")\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpli5ho331.py\", line 6, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram.\n    \"\"\"\n    return base * height\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(s):\n    return s[0] == s[-1]\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxgag5rx7.py\", line 3, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def check(n):\n    return n == 2 * int(str(n)[::-1]) - 1\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 58, "completion": "def opposite_signs(x, y):\n    return (x ^ y) < 0\n", "requirement": "Code Complexity", "result": "passed", "passed": true}

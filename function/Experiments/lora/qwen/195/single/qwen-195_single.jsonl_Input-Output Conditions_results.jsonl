{"task_id": 14, "completion": "def find_volume(base_area, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base_area (float): The area of the triangular base.\n    height (float): The height of the triangular prism.\n    length (float): The length of the triangular prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    if not all(isinstance(x, (int, float)) for x in [base_area, height, length]):\n        raise ValueError(\"All inputs must be integers or floating-point numbers.\")\n    \n    if any(x <= 0 for x in [base_area, height, length]):\n        raise ValueError(\"All inputs must be positive numbers.\")\n    \n    volume = base_area * height * length\n    return volume\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpz18234e5.py\", line 8, in <module>\n    assert find_volume(10,8,6) == 240\nAssertionError", "passed": false}
{"task_id": 15, "completion": "import re\n\ndef split_lowerstring(s):\n    # Use regular expression to find all segments where a lowercase letter is followed by any number of non-lowercase characters\n    segments = re.findall('[a-z][^a-z]*', s)\n    return segments\n\n# Example usage:\ninput_string = \"HelloWorldThisIsPython\"\nresult = split_lowerstring(input_string)\nprint(result)  # Output: ['Hello', 'World', 'This', 'Is', 'Python']\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    patterns = '^[a-z]+_[a-z]+$'\n    if re.search(patterns,  text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    if not isinstance(side_length, int) or side_length < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    return 4 * side_length\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(str1, str2):\n    # Check if both strings contain only alphabetic characters\n    if not (str1.isalpha() and str2.isalpha()):\n        raise ValueError('Input strings must only contain alphabetic characters.')\n    \n    # Create a set of characters to be removed for faster lookup\n    chars_to_remove = set(str2)\n    \n    # Build the result string by including only those characters not in chars_to_remove\n    result = ''.join(char for char in str1 if char not in chars_to_remove)\n    \n    return result\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 19, "completion": "def test_duplicate(arr):\n    if not isinstance(arr, list):\n        raise TypeError('Input must be a list.')\n    \n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(n):\n    if n < 1:\n        return False\n    \n    # Check if n is odd\n    if n % 2 == 0:\n        return False\n    \n    # Start with k = 1 and increment until we find a match or exceed n\n    k = 1\n    while True:\n        woodall_number = k * (2 ** k) - 1\n        if woodall_number == n:\n            return True\n        elif woodall_number > n:\n            return False\n        k += 1\n\n# Example usage:\nprint(is_woodall(7))  # True, because 3 * 2^3 - 1 = 23\nprint(is_woodall(23)) # True, because 3 * 2^3 - 1 = 23\nprint(is_woodall(15)) # False, because there is no k such that k * 2^k - 1 = 15\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists):\n    # Initialize the maximum sum to a very small number\n    max_sum = float('-inf')\n    \n    # Iterate through each sublist in the list of lists\n    for sublist in list_of_lists:\n        # Calculate the sum of the current sublist\n        current_sum = sum(sublist)\n        \n        # Update the maximum sum if the current sum is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    # Return the maximum sum found\n    return max_sum\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [4, 5, 6], [10, 11]]\nprint(maximum_sum(list_of_lists))  # Output: 21\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 25, "completion": "def find_product(arr):\n    from collections import Counter\n    \n    # Count the occurrences of each element in the array\n    count = Counter(arr)\n    \n    # Initialize the product to 1 (multiplicative identity)\n    product = 1\n    \n    # Iterate through the counted elements\n    for num, freq in count.items():\n        if freq == 1:\n            product *= num\n    \n    return product\n\n# Example usage:\narr = [2, 3, 4, 2, 5, 6, 7, 8, 9, 9]\nprint(find_product(arr))  # Output will be 3 * 4 * 5 * 6 * 7 * 8 = 20160\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpcxgzykc0.py\", line 15, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(test_list, K):\n    # Use all() to check if all tuples have exactly K elements\n    res = all(len(sub) == K for sub in test_list)\n    return res\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmptvqw2__i.py\", line 5, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 28, "completion": "def binomial_coeff(n, k):\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    \n    # Create a 2D array to store intermediate results\n    C = [[0] * (k + 1) for _ in range(n + 1)]\n    \n    # Fill the array using bottom-up approach\n    for i in range(n + 1):\n        for j in range(min(i, k) + 1):\n            if j == 0 or j == i:\n                C[i][j] = 1\n            else:\n                C[i][j] = C[i - 1][j - 1] + C[i - 1][j]\n    \n    return C[n][k]\n\n# Example usage:\nn = 5\nk = 2\nprint(f\"The binomial coefficient C({n}, {k}) is {binomial_coeff(n, k)}\")\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    def count_substrings_with_char(s, char):\n        count = 0\n        for i in range(len(s)):\n            if s[i] == char:\n                count += 1\n        return count\n\n    total_count = 0\n    for char in set(s):\n        total_count += count_substrings_with_char(s, char) * (count_substrings_with_char(s, char) + 1) // 2\n    return total_count\n\n# Example usage:\ninput_string = \"abcab\"\nresult = count_substring_with_equal_ends(input_string)\nprint(result)  # Output will be the number of substrings starting and ending with the same character\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    # Initialize the smallest prime factor\n    min_prime = 2\n    \n    # Divide n by 2 until it becomes odd\n    while n % min_prime == 0:\n        max_factor = min_prime\n        n //= min_prime\n    \n    # Check for odd factors from 3 onwards\n    factor = 3\n    while factor * factor <= n:\n        if n % factor == 0:\n            max_factor = factor\n            n //= factor\n        else:\n            factor += 2\n    \n    # If n is still greater than 1, then n itself is a prime factor\n    if n > 1:\n        max_factor = n\n    \n    return int(max_factor)\n\n# Example usage:\nnumber = 600851475143\nprint(f\"The largest prime factor of {number} is {max_prime_factors(number)}\")\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 35, "completion": "def find_rect_num(n):\n    if not isinstance(n, int) or n < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    return n * (n + 1)\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator):\n    if numerator == 0:\n        return 0\n    \n    # Dictionary to store remainders and their corresponding positions\n    remainder_positions = {}\n    \n    # Initialize variables for the division process\n    quotient = []\n    remainder = numerator % denominator\n    \n    # Perform the division until we either reach the nth digit or detect a repeating cycle\n    position = 0\n    while remainder != 0 and position < n:\n        if remainder in remainder_positions:\n            start_repeating = remainder_positions[remainder]\n            non_repeating = ''.join(map(str, quotient[:start_repeating]))\n            repeating = ''.join(map(str, quotient[start_repeating:position]))\n            break\n        \n        remainder_positions[remainder] = position\n        remainder *= 10\n        digit = remainder // denominator\n        quotient.append(digit)\n        remainder = remainder % denominator\n        position += 1\n    \n    else:\n        # If no repeating cycle was detected, return the nth digit directly\n        if position >= n:\n            return quotient[n - 1]\n        else:\n            raise ValueError(\"The nth digit does not exist within the first n digits.\")\n    \n    # Determine the nth digit based on whether it's in the non-repeating or repeating part\n    if n <= len(non_repeating):\n        return int(non_repeating[n - 1])\n    else:\n        index_in_repeating = (n - len(non_repeating)) % len(repeating)\n        return int(repeating[index_in_repeating])\n\n# Example usage:\nnumerator = 1\ndenominator = 3\nnth_digit = 5\nprint(f\"The {nth_digit}th digit in the decimal representation of {numerator}/{denominator} is {find_nth_digit(numerator, denominator)}\")\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7lrssep6.py\", line 39, in <module>\n    print(f\"The {nth_digit}th digit in the decimal representation of {numerator}/{denominator} is {find_nth_digit(numerator, denominator)}\")\n  File \"/tmp/tmp7lrssep6.py\", line 11, in find_nth_digit\n    while remainder != 0 and position < n:\nNameError: name 'n' is not defined", "passed": false}
{"task_id": 38, "completion": "def div_even_odd(lst):\n    # Find the first even number in the list\n    first_even = next((x for x in lst if x % 2 == 0), None)\n    \n    # Find the first odd number in the list\n    first_odd = next((x for x in lst if x % 2 != 0), None)\n    \n    # Check if both even and odd numbers exist in the list\n    if first_even is not None and first_odd is not None:\n        return first_even / first_odd\n    else:\n        raise ValueError(\"The list must contain at least one even and one odd number.\")\n\n# Example usage:\nexample_list = [3, 5, 7, 8, 10]\nresult = div_even_odd(example_list)\nprint(result)  # Output will be 8.0 / 3.0\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 39, "completion": "import heapq\nfrom collections import Counter\n\ndef rearrange_string(s):\n    # Step 1: Count the frequency of each character\n    char_count = Counter(s)\n    \n    # Step 2: Create a max-heap based on character frequency\n    max_heap = [(-freq, char) for char, freq in char_count.items()]\n    heapq.heapify(max_heap)\n    \n    prev_char = None\n    prev_freq = 0\n    result = []\n    \n    while max_heap or prev_freq:\n        if prev_freq < 0:\n            heapq.heappush(max_heap, (prev_freq, prev_char))\n        \n        if not max_heap:\n            return \"\"\n        \n        freq, char = heapq.heappop(max_heap)\n        result.append(char)\n        prev_char = char\n        prev_freq = freq + 1\n    \n    return ''.join(result)\n\n# Example usage:\ninput_string = \"aabbcc\"\noutput_string = rearrange_string(input_string)\nprint(output_string)  # Output might be \"abcabc\" or another valid rearrangement\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpunj7u_o3.py\", line 26, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 42, "completion": "def find_sum(arr):\n    from collections import Counter\n    \n    # Count the occurrences of each element in the array\n    count = Counter(arr)\n    \n    # Find elements that appear more than once\n    repeated_elements = [key for key, value in count.items() if value > 1]\n    \n    # Calculate the sum of repeated elements\n    result = sum(repeated_elements)\n    \n    return result\n\n# Example usage:\narr = [1, 2, 3, 2, 4, 5, 5, 6]\nprint(find_sum(arr))  # Output: 7 (2 + 5)\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp64vfg26z.py\", line 13, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    # Define the regex pattern to match sequences of lowercase letters joined by an underscore\n    patterns = '^[a-z]+_[a-z]+$'\n    \n    # Use re.match to check if the entire string matches the pattern\n    if re.match(patterns,  text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 46, "completion": "def test_distinct(numbers):\n    # Convert the list to a set to remove duplicates and compare its length to the original list\n    return len(numbers) == len(set(numbers))\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 48, "completion": "def odd_bit_set_number(n):\n    # Initialize a mask with all odd bits set to 1\n    mask = 0xAAAAAAAA  # This is a hexadecimal representation where all even bits are 0 and all odd bits are 1\n    \n    # Use bitwise OR to set all odd bits of n to 1\n    result = n | mask\n    \n    return result\n\n# Example usage:\nnumber = 10  # Binary: 1010\nresult = odd_bit_set_number(number)\nprint(f\"Original number: {number} (Binary: {bin(number)[2:].zfill(8)})\"\n      f\"\\nResult after setting odd bits: {result} (Binary: {bin(result)[2:].zfill(8)})\"\n", "requirement": "Input-Output Conditions", "result": "failed: File \"/tmp/tmpa8t0lwq1.py\", line 12\n    assert odd_bit_set_number(10) == 15\n    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 49, "completion": "def specified_element(lst, index):\n    if not lst:\n        return []\n    return [sublist[index] for sublist in lst]\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 50, "completion": "def min_length_list(lists):\n    # Find the list with the minimum length\n    min_len_list = min(lists, key=lambda x: len(x))\n    # Return a tuple containing the length of the shortest list and the list itself\n    return (len(min_len_list), min_len_list)\n\n# Example usage:\nlists = [[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]\nresult = min_length_list(lists)\nprint(result)  # Output: (2, [4, 5])\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram.\n\n    Raises:\n    ValueError: If either the base or height is not a positive number.\n    \"\"\"\n    if base <= 0 or height <= 0:\n        raise ValueError(\"Both base and height must be positive numbers.\")\n    \n    area = base * height\n    return area\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4kz4ccpl.py\", line 10, in <module>\n    assert parallelogram_area(0, 10) == 0\n  File \"/tmp/tmp4kz4ccpl.py\", line 3, in parallelogram_area\n    raise ValueError(\"Both base and height must be positive numbers.\")\nValueError: Both base and height must be positive numbers.", "passed": false}
{"task_id": 53, "completion": "def check_equality(s):\n    if not isinstance(s, str):\n        raise ValueError('Input must be a string.')\n    if len(s) == 0:\n        raise ValueError('String cannot be empty.')\n    if s[0] == s[-1]:\n        return 'Equal'\n    else:\n        return 'Not Equal'\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 54, "completion": "def counting_sort(arr):\n    if not all(isinstance(x, int) and x >= 0 for x in arr):\n        raise ValueError(\"All elements in the array must be non-negative integers.\")\n    \n    if len(arr) == 0:\n        return []\n    \n    # Find the maximum value in the array to determine the size of the count array\n    max_value = max(arr)\n    \n    # Initialize the count array with zeros\n    count_array = [0] * (max_value + 1)\n    \n    # Count each element's frequency\n    for num in arr:\n        count_array[num] += 1\n    \n    # Reconstruct the sorted array\n    sorted_index = 0\n    for i in range(len(count_array)):\n        while count_array[i] > 0:\n            arr[sorted_index] = i\n            sorted_index += 1\n            count_array[i] -= 1\n    \n    return arr\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 57, "completion": "def find_max_num(digits, n):\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n    \n    # Initialize the result as an empty string\n    max_num = []\n    \n    # Construct the largest number by appending each digit to the result\n    for _ in range(n):\n        max_num.append(str(digits[0]))\n        digits.pop(0)\n    \n    # Join the list into a single string and convert it to an integer\n    max_num = int(''.join(max_num))\n    \n    return max_num\n\n# Example usage:\ndigits = [3, 1, 4, 1, 5, 9]\nn = 6\nprint(find_max_num(digits, n))  # Output: 954311\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 58, "completion": "def opposite_signs(x, y):\n    # Check if the product of x and y is negative\n    # If the product is negative, they have opposite signs\n    return (x ^ y) < 0\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 60, "completion": "def max_len_sub(arr, n):\n    if n == 0:\n        return 0\n    \n    # Initialize the dp array where dp[i] will store the length of the longest subsequence ending at index i\n    dp = [1] * n\n    \n    # Iterate through the array to fill the dp array\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    # The result is the maximum value in the dp array\n    return max(dp)\n\n# Example usage:\narr = [1, 2, 3, 4, 5]\nn = len(arr)\nprint(max_len_sub(arr, n))  # Output: 5\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvn4smahr.py\", line 18, in <module>\n    assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4\nAssertionError", "passed": false}

{"task_id": 11, "completion": "def remove_occ(s, ch):\n    # Find the index of the first occurrence of the character\n    first_index = s.find(ch)\n    \n    if first_index == -1:\n        return s\n    \n    # Remove the first occurrence\n    s = s[:first_index] + s[first_index + 1:]\n    \n    # Find the index of the last occurrence of the character\n    last_index = s.rfind(ch)\n    \n    if last_index == -1:\n        return s\n    \n    # Remove the last occurrence\n    s = s[:last_index] + s[last_index + 1:]\n    \n    return s\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 12, "completion": "def sort_matrix(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order based on the sum of its rows.\n\n    Parameters:\n    matrix (list of list of int): A 2D list representing the matrix to be sorted.\n\n    Returns:\n    list of list of int: The sorted matrix.\n    \"\"\"\n    # Sort the matrix based on the sum of each row\n    return sorted(matrix, key=lambda x: sum(x))\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 14, "completion": "def find_volume(base_length, base_width, height):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base_length (float): The length of the base triangle.\n    base_width (float): The width of the base triangle.\n    height (float): The height of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    return 0.5 * base_length * base_width * height\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 15, "completion": "import re\n\ndef split_lowerstring(text):\n    \"\"\"\n    Splits a string at lowercase letters.\n\n    Args:\n        text (str): The input string to be split.\n\n    Returns:\n        list: A list of substrings split at lowercase letters.\n    \"\"\"\n    return re.findall('[a-z][^a-z]*', text)\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Find sequences of lowercase letters joined with an underscore.\n\n    Args:\n        text (str): The input string to search for patterns.\n\n    Returns:\n        list: A list of matches found in the input string.\n    \"\"\"\n    return re.findall(r\"[a-z]+_[a-z]+\", text)\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjiyb9xa4.py\", line 4, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Parameters:\n    side_length (float): The length of one side of the square.\n\n    Returns:\n    float: The perimeter of the square.\n    \"\"\"\n    return 4 * side_length\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(str1, str2):\n    \"\"\"\n    Removes characters from the first string that are present in the second string.\n\n    Parameters:\n    str1 (str): The original string from which characters will be removed.\n    str2 (str): The string containing characters to be removed from the first string.\n\n    Returns:\n    str: A new string with characters removed.\n    \"\"\"\n    result = [char for char in str1 if char not in str2]\n    return ''.join(result)\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 19, "completion": "def test_duplicate(arr):\n    \"\"\"\n    Check if the given array of integers contains any duplicate elements.\n\n    Args:\n        arr (list): A list of integers to be checked for duplicates.\n\n    Returns:\n        bool: True if there are duplicates, False otherwise.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(n):\n    \"\"\"\n    Check if the given number is a Woodall number.\n    \n    A Woodall number is of the form n * 2^n - 1 where n is a positive integer.\n    \n    Args:\n        n (int): The number to check.\n        \n    Returns:\n        bool: True if the number is a Woodall number, False otherwise.\n    \"\"\"\n    if n <= 0:\n        return False\n    \n    k = 1\n    while k * (2 ** k) - 1 < n:\n        k += 1\n    \n    return k * (2 ** k) - 1 == n\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 21, "completion": "def multiples_of_num(n, m):\n    \"\"\"\n    Generate m number of multiples of n.\n\n    Parameters:\n    n (int): The base number.\n    m (int): The number of multiples to generate.\n\n    Returns:\n    list: A list containing m multiples of n.\n    \"\"\"\n    return [n * i for i in range(1, m + 1)]\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpazkwd6e4.py\", line 3, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "completion": "def find_first_duplicate(nums):\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists):\n    \"\"\"\n    Find the maximum sum of elements in a list of lists.\n\n    Parameters:\n    list_of_lists (list of list of int): A list containing sublists with integer elements.\n\n    Returns:\n    int: The maximum sum of elements from any sublist.\n    \"\"\"\n    if not list_of_lists:\n        return 0\n    \n    max_sum = float('-inf')\n    \n    for sublist in list_of_lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 24, "completion": "def binary_to_decimal(binary):\n    \"\"\"\n    Convert a binary number to its decimal equivalent.\n\n    Parameters:\n    binary (int): The binary number to be converted.\n\n    Returns:\n    int: The decimal equivalent of the binary number.\n    \"\"\"\n    decimal = 0\n    power = 0\n\n    while binary > 0:\n        digit = binary % 10\n        decimal += digit * (2 ** power)\n        binary //= 10\n        power += 1\n\n    return decimal\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 25, "completion": "def find_product(arr):\n    \"\"\"\n    Find the product of non-repeated elements in a given array.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The product of non-repeated elements.\n    \"\"\"\n    from collections import Counter\n\n    # Count occurrences of each element in the array\n    count = Counter(arr)\n\n    # Initialize the product to 1\n    product = 1\n\n    # Iterate through the array and multiply only non-repeated elements\n    for num in arr:\n        if count[num] == 1:\n            product *= num\n\n    return product\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpm395oyan.py\", line 12, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(test_list, K):\n    \"\"\"\n    Check if the given tuple list has all k elements.\n\n    Args:\n        test_list (list of tuples): The list of tuples to be checked.\n        K (int): The number of elements each tuple must have.\n\n    Returns:\n        bool: True if all tuples have at least K elements, False otherwise.\n    \"\"\"\n    res = all(len(sub) >= K for sub in test_list)\n    return res\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphsyqh1bx.py\", line 4, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "completion": "def remove_digits(string_list):\n    \"\"\"\n    Removes all digits from each string in the provided list.\n\n    Args:\n        string_list (list): A list of strings from which digits will be removed.\n\n    Returns:\n        list: A new list containing the modified strings with digits removed.\n    \"\"\"\n    import re\n\n    result = [re.sub(r'\\d', '', s) for s in string_list]\n    return result\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppoafm61r.py\", line 5, in <module>\n    assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\nNameError: name 'remove' is not defined", "passed": false}
{"task_id": 28, "completion": "def binomial_coeff(n, k):\n    \"\"\"\n    Calculate the binomial coefficient (n choose k).\n\n    Args:\n        n (int): The total number of items.\n        k (int): The number of items to choose.\n\n    Returns:\n        int: The binomial coefficient.\n    \"\"\"\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n\n    # Initialize a list to store intermediate results\n    C = [0] * (k + 1)\n    C[0] = 1  # Base case\n\n    for i in range(1, n + 1):\n        # Compute next row of pascal triangle using the previous row\n        for j in range(min(i, k), 0, -1):\n            C[j] += C[j - 1]\n\n    return C[k]\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 29, "completion": "def get_odd_occurrence(arr):\n    \"\"\"\n    Find the element that occurs an odd number of times in an array.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int or None: The element that occurs an odd number of times, or None if no such element exists.\n    \"\"\"\n    for i in range(len(arr)):\n        count = 0\n        for j in range(len(arr)):\n            if arr[i] == arr[j]:\n                count += 1\n        if count % 2 != 0:\n            return arr[i]\n    return None\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpfmaz2kbh.py\", line 10, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    result = 0\n    n = len(s)\n    \n    for i in range(n):\n        for j in range(1, n - i + 1):\n            substring = s[i:i + j]\n            if substring[0] == substring[-1]:\n                result += 1\n                \n    return result\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 31, "completion": "import heapq\n\ndef func(arr1, arr2, arr3, k):\n    # Merge the three arrays into one list\n    merged = arr1 + arr2 + arr3\n    \n    # Use a dictionary to count occurrences of each integer\n    frequency = {}\n    for num in merged:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    \n    # Use a min-heap to keep track of the top k elements\n    min_heap = []\n    for key, value in frequency.items():\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, (value, key))\n        elif value > min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (value, key))\n    \n    # Extract the elements from the heap and sort them in descending order\n    result = [heapq.heappop(min_heap)[1] for _ in range(len(min_heap))]\n    return sorted(result, reverse=True)\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp31rzol2c.py\", line 23, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nTypeError: func() missing 2 required positional arguments: 'arr3' and 'k'", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    \"\"\"\n    Find the largest prime factor of a given number.\n\n    Parameters:\n    n (int): The number for which to find the largest prime factor.\n\n    Returns:\n    int: The largest prime factor of the given number.\n    \"\"\"\n    # Initialize the smallest prime factor\n    max_prime = -1\n\n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        max_prime = 2\n        n //= 2\n\n    # n must be odd at this point, so we can skip one element (Note i = i + 2)\n    for i in range(3, int(n**0.5) + 1, 2):\n        # While i divides n, print i and divide n\n        while n % i == 0:\n            max_prime = i\n            n //= i\n\n    # This condition is to handle the case when n is a prime number greater than 2\n    if n > 2:\n        max_prime = n\n\n    return max_prime\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4i8hhrrk.py\", line 35, in <module>\n    check_code_style(max_prime_factors)\n  File \"/tmp/tmp4i8hhrrk.py\", line 31, in check_code_style\n    assert result.total_errors == 0, \"Code does not conform to PEP 8 standards.\"\nAssertionError: Code does not conform to PEP 8 standards.", "passed": false}
{"task_id": 33, "completion": "def decimal_to_binary(decimal_number):\n    \"\"\"\n    Convert a decimal number to its binary representation.\n\n    Parameters:\n    decimal_number (int): The decimal number to be converted.\n\n    Returns:\n    str: The binary representation of the decimal number.\n    \"\"\"\n    if decimal_number == 0:\n        return \"0\"\n    \n    binary_digits = []\n    while decimal_number > 0:\n        remainder = decimal_number % 2\n        binary_digits.append(str(remainder))\n        decimal_number //= 2\n    \n    # Reverse the list to get the correct binary order\n    binary_digits.reverse()\n    \n    # Join the list into a string\n    binary_representation = ''.join(binary_digits)\n    return binary_representation\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpe63v9zqw.py\", line 14, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "completion": "def find_missing(arr, start_index, end_index):\n    \"\"\"\n    Find the missing number in a sorted array using binary search.\n\n    Parameters:\n    arr (list): The sorted array.\n    start_index (int): The starting index for the search.\n    end_index (int): The ending index for the search.\n\n    Returns:\n    int: The missing number if found; otherwise, -1.\n    \"\"\"\n    if start_index > end_index:\n        return start_index\n\n    mid = start_index + (end_index - start_index) // 2\n\n    # Check if the middle element is missing\n    if arr[mid] != mid + arr[0]:\n        if mid == 0 or arr[mid - 1] == mid - 1 + arr[0]:\n            return mid + arr[0]\n        return find_missing(arr, start_index, mid - 1)\n\n    # If the middle element is not missing, check the right half\n    return find_missing(arr, mid + 1, end_index)\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpcgr3y4nj.py\", line 12, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() missing 1 required positional argument: 'end_index'", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    \"\"\"\n    Calculate the n-th rectangular number.\n\n    Args:\n        n (int): The position of the rectangular number in the sequence.\n\n    Returns:\n        int: The n-th rectangular number.\n    \"\"\"\n    if not isinstance(n, int) or n < 1:\n        raise ValueError('Input must be a positive integer.')\n    return n * (n + 1)\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator):\n    \"\"\"\n    Find the nth digit in the decimal representation of the proper fraction numerator/denominator.\n\n    Args:\n        numerator (int): The numerator of the fraction.\n        denominator (int): The denominator of the fraction.\n\n    Returns:\n        int: The nth digit in the decimal representation of the fraction.\n    \"\"\"\n    remainder = numerator % denominator\n    nth_digit = None\n\n    while remainder != 0 and nth_digit is None:\n        remainder *= 10\n        digit = remainder // denominator\n        if n == 1:\n            nth_digit = digit\n            break\n        n -= 1\n        remainder %= denominator\n\n    return nth_digit\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9kuxwziw.py\", line 13, in <module>\n    assert find_nth_digit(1,2,1) == 5\nTypeError: find_nth_digit() takes 2 positional arguments but 3 were given", "passed": false}
{"task_id": 37, "completion": "def sort_mixed_list(mixed_list):\n    \"\"\"\n    Sorts a mixed list containing both integers and strings.\n\n    Args:\n        mixed_list (list): A list containing both integers and strings.\n\n    Returns:\n        list: A sorted list with all integers first followed by all strings.\n    \"\"\"\n    # Separate integers and strings into two lists\n    int_part = [item for item in mixed_list if isinstance(item, int)]\n    str_part = [item for item in mixed_list if isinstance(item, str)]\n\n    # Sort each part separately\n    int_part.sort()\n    str_part.sort()\n\n    # Combine the sorted parts\n    return int_part + str_part\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 38, "completion": "def div_even_odd(numbers):\n    \"\"\"\n    Find the division of the first even and odd number in a given list.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    float or str: The result of dividing the first even number by the first odd number,\n                  or a message if no even or odd number is found.\n    \"\"\"\n    # Initialize variables to store the first even and odd numbers\n    first_even = None\n    first_odd = None\n\n    # Iterate through the list to find the first even and odd numbers\n    for num in numbers:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        elif first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n\n    # Check if both even and odd numbers were found\n    if first_even is None or first_odd is None:\n        return \"No even or odd number found in the list.\"\n\n    # Perform the division and return the result\n    return first_even / first_odd\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 39, "completion": "from collections import Counter\n\ndef rearrange_string(s):\n    # Count the frequency of each character in the string\n    char_count = Counter(s)\n    \n    # Find the maximum frequency of any character\n    max_freq = max(char_count.values())\n    \n    # If the maximum frequency is greater than half the length of the string (rounded up),\n    # it's not possible to rearrange the string as required\n    if max_freq > (len(s) + 1) // 2:\n        return False\n    \n    # Create a list of tuples where each tuple contains a character and its count\n    max_char = [char for char, freq in char_count.items() if freq == max_freq]\n    \n    # Initialize the result array with None values\n    result = [None] * len(s)\n    \n    # Place the most frequent character at alternate positions starting from index 0\n    index = 0\n    for _ in range(max_freq):\n        result[index] = max_char[0]\n        index += 2\n    \n    # Place the remaining characters\n    for char, freq in char_count.items():\n        while freq > 0:\n            if index >= len(s):\n                index = 1\n            result[index] = char\n            index += 2\n            freq -= 1\n    \n    # Convert the list back to a string and return\n    return ''.join(result)\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvahysi07.py\", line 30, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "completion": "from collections import Counter\n\ndef freq_element(list1):\n    # Flatten the list of lists into a single list\n    flat_list = [item for sublist in list1 for item in sublist]\n    # Use Counter to count the frequency of each element\n    result = dict(Counter(flat_list))\n    return result\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 41, "completion": "def filter_evennumbers(numbers):\n    \"\"\"\n    Filters out even numbers from a list of integers.\n\n    Args:\n        numbers (list): A list of integers.\n\n    Returns:\n        list: A list containing only the even numbers from the input list.\n    \"\"\"\n    return list(filter(lambda x: x % 2 == 0, numbers))\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 42, "completion": "def find_sum(arr):\n    \"\"\"\n    Find the sum of repeated elements in a given array.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The sum of repeated elements.\n    \"\"\"\n    # Create a dictionary to store the frequency of each element\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Calculate the sum of repeated elements\n    repeated_sum = 0\n    for num, count in freq.items():\n        if count > 1:\n            repeated_sum += num * count\n\n    return repeated_sum\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3fmo8g84.py\", line 15, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    patterns = '^[a-z]+_[a-z]+$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_7iylb10.py\", line 25, in <module>\n    check_code_style(cc_visit)\nNameError: name 'cc_visit' is not defined", "passed": false}
{"task_id": 44, "completion": "import re\n\ndef text_match_string(text):\n    \"\"\"\n    Matches a word at the beginning of a string.\n\n    Args:\n        text (str): The input string to be matched.\n\n    Returns:\n        str or None: The matched word if found, otherwise None.\n    \"\"\"\n    patterns = r'\\b\\w+'\n    if re.search(patterns, text):\n        return re.search(patterns, text).group()\n    else:\n        return None\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpi4jnyyn7.py\", line 8, in <module>\n    assert text_match_string(\" python\")==('Not matched!')\nAssertionError", "passed": false}
{"task_id": 45, "completion": "import math\n\ndef get_gcd(arr):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of the elements in the given array.\n\n    Args:\n        arr (list): A list of integers for which the GCD is to be calculated.\n\n    Returns:\n        int: The GCD of the elements in the array.\n    \"\"\"\n    if not arr:\n        raise ValueError(\"The input array must not be empty.\")\n    \n    result = arr[0]\n    for i in range(1, len(arr)):\n        result = math.gcd(result, arr[i])\n    \n    return result\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 46, "completion": "def test_distinct(data):\n    \"\"\"\n    Determine if all elements in the list are distinct.\n\n    Args:\n        data (list): A list of elements to be checked for uniqueness.\n\n    Returns:\n        bool: True if all elements are distinct, False otherwise.\n    \"\"\"\n    return len(data) == len(set(data))\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 48, "completion": "def odd_bit_set_number(n):\n    \"\"\"\n    Set all odd bits of a given number.\n\n    Args:\n        n (int): The input number whose odd bits need to be set.\n\n    Returns:\n        int: The number with all odd bits set.\n    \"\"\"\n    mask = 0xAAAAAAAA  # Binary representation: 10101010101010101010101010101010\n    return n | mask\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpplvq8ko_.py\", line 4, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(list1, C=0):\n    \"\"\"\n    Extracts every first or specified element from a given two-dimensional list.\n\n    Parameters:\n    list1 (list of lists): The input two-dimensional list.\n    C (int): The index of the element to extract from each sublist. Defaults to 0.\n\n    Returns:\n    list: A list containing the extracted elements.\n    \"\"\"\n    result = [i[C] for i in list1]\n    return result\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 51, "completion": "def check_equilateral(a, b, c):\n    \"\"\"\n    Check if a triangle with sides a, b, and c is equilateral.\n\n    Parameters:\n    a (float): Length of side a.\n    b (float): Length of side b.\n    c (float): Length of side c.\n\n    Returns:\n    bool: True if the triangle is equilateral, False otherwise.\n    \"\"\"\n    if a == b == c:\n        return True\n    else:\n        return False\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram.\n    \"\"\"\n    return base * height\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(string):\n    if len(string) < 2:\n        return False\n    return string[0] == string[-1]\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6de219pk.py\", line 5, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 54, "completion": "def counting_sort(arr):\n    if not arr:\n        return []\n\n    # Find the maximum value in the array\n    max_value = max(arr)\n\n    # Initialize the count array with zeros\n    count_array = [0] * (max_value + 1)\n\n    # Count each element's frequency\n    for num in arr:\n        count_array[num] += 1\n\n    # Reconstruct the sorted array\n    sorted_index = 0\n    for i, count in enumerate(count_array):\n        while count > 0:\n            arr[sorted_index] = i\n            sorted_index += 1\n            count -= 1\n\n    return arr\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 55, "completion": "def tn_gp(a, r, n):\n    \"\"\"\n    Calculate the t-nth term of a geometric series.\n\n    Parameters:\n    a (float): The first term of the geometric series.\n    r (float): The common ratio between consecutive terms.\n    n (int): The term number to find.\n\n    Returns:\n    float: The t-nth term of the geometric series.\n    \"\"\"\n    return a * (r ** (n - 1))\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpo9ja6otu.py\", line 3, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def check(n):\n    temp = n\n    rev = 0\n    \n    # Reverse the number\n    while temp > 0:\n        dig = temp % 10\n        rev = (rev * 10) + dig\n        temp = temp // 10\n    \n    # Check if the original number is one less than twice its reverse\n    return (2 * rev == n + 1)\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 57, "completion": "def find_max_num(digits):\n    # Sort the digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n    \n    # Convert the sorted list of digits back into a single integer\n    max_number = int(''.join(map(str, sorted_digits)))\n    \n    return max_number\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplyogca_a.py\", line 7, in <module>\n    assert find_max_num([1,2,3],3) == 321\nTypeError: find_max_num() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 58, "completion": "def opposite_signs(x, y):\n    \"\"\"\n    Check if the given two integers have opposite signs.\n\n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n\n    Returns:\n        bool: True if the integers have opposite signs, False otherwise.\n    \"\"\"\n    return (x ^ y) < 0\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 59, "completion": "def is_octagonal(n):\n    \"\"\"\n    Calculate the nth octagonal number.\n\n    Parameters:\n    n (int): The position of the octagonal number to calculate.\n\n    Returns:\n    int: The nth octagonal number.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError('Input must be a positive integer.')\n    \n    return n * (3 * n - 2)\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 60, "completion": "def max_len_sub(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Initialize the dp array where dp[i] will store the length of the longest subsequence ending at index i\n    dp = [1] * n\n    \n    # Iterate through the array to fill the dp array\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    # Return the maximum value from the dp array\n    return max(dp)\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpd8o1kawj.py\", line 14, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}

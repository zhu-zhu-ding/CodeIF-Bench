{"task_id": 11, "completion": "def remove_occ(s, char, all=False):\n    if not all:\n        # Remove the first occurrence\n        s = s.replace(char, '', 1)\n        # Remove the last occurrence\n        s = s[::-1].replace(char, '', 1)[::-1]\n    else:\n        # Remove all occurrences\n        s = s.replace(char, '')\n    return s\n\n# Example usage:\nprint(remove_occ('hello world', 'l'))  # Output: 'heo word'\nprint(remove_occ('hello world', 'l', all=True))  # Output: 'heo wor'\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 12, "completion": "def sort_matrix(matrix):\n    # Extend each row to the maximum length by filling missing values with 0\n    max_length = max(len(row) for row in matrix)\n    extended_matrix = [row + [0] * (max_length - len(row)) for row in matrix]\n    \n    # Sort the matrix based on the sum of each row\n    sorted_matrix = sorted(extended_matrix, key=sum)\n    \n    return sorted_matrix\n\n# Example usage:\nmatrix = [\n    [3, 1, 2],\n    [4, 5],\n    [6, 7, 8, 9],\n    [10]\n]\n\nsorted_matrix = sort_matrix(matrix)\nprint(sorted_matrix)\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3duswkxm.py\", line 17, in <module>\n    assert sort_matrix([[1, 2, 3], [4, 5], [6]]) == [[6], [4, 5], [1, 2, 3]]\nAssertionError", "passed": false}
{"task_id": 13, "completion": "from collections import Counter\n\ndef count_common(word_dict, n=10):\n    \"\"\"\n    Count the most common words in a dictionary.\n\n    Parameters:\n    word_dict (dict): A dictionary where keys are words and values are their frequencies.\n    n (int, optional): The number of top frequent words to return. Defaults to 10.\n\n    Returns:\n    list: A list of tuples containing the top `n` most common words and their frequencies.\n    \"\"\"\n    # Flatten the dictionary into a list of words based on their frequencies\n    words = [word for word, freq in word_dict.items() for _ in range(freq)]\n    \n    # Use Counter to count the frequency of each word\n    word_counter = Counter(words)\n    \n    # Get the top `n` most common words\n    most_common_words = word_counter.most_common(n)\n    \n    return most_common_words\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxci5hmxd.py\", line 10, in <module>\n    assert count_common(['apple', 'banana', 'apple', 'orange', 'banana', 'banana'], 2) == [('banana', 3), ('apple', 2)]\n  File \"/tmp/tmpxci5hmxd.py\", line 4, in count_common\n    words = [word for word, freq in word_dict.items() for _ in range(freq)]\nAttributeError: 'list' object has no attribute 'items'", "passed": false}
{"task_id": 14, "completion": "def find_volume(base_area, height=None, length=None):\n    if isinstance(base_area, (list, tuple)):\n        if len(base_area) != 3:\n            raise ValueError(\"Input must be a list or tuple with exactly three elements.\")\n        base_area, height, length = base_area\n    \n    if not all(isinstance(x, (int, float)) for x in [base_area, height, length]):\n        raise TypeError(\"All inputs must be numbers (int or float).\")\n    \n    return base_area * height * length\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplvoimbj1.py\", line 9, in <module>\n    assert find_volume([10, 8, 6]) == 240\nAssertionError", "passed": false}
{"task_id": 15, "completion": "import re\n\ndef split_lowerstring(s, include_upper=False):\n    # Find all segments where the character before is lowercase (or not a letter)\n    # and the current character is uppercase.\n    if include_upper:\n        segments = re.findall('[a-z][^a-z]*', s)\n    else:\n        segments = re.findall('[a-z][^a-z]*', s)\n    \n    return segments\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpbe04pbmd.py\", line 10, in <module>\n    assert split_lowerstring('AbCd', include_lower=True) == ['Ab', 'Cd']\nTypeError: split_lowerstring() got an unexpected keyword argument 'include_lower'", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    # Round the side length to the nearest integer\n    rounded_side_length = round(side_length)\n    \n    # Calculate the perimeter of the square\n    perimeter = 4 * rounded_side_length\n    \n    return perimeter\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjkv_ykvv.py\", line 7, in <module>\n    assert square_perimeter(4.5) == 20\nAssertionError", "passed": false}
{"task_id": 18, "completion": "def remove_dirty_chars(str1, str2):\n    # Convert both strings to lowercase for case-insensitivity\n    str1_lower = str1.lower()\n    str2_lower = str2.lower()\n    \n    # Create a set of characters to remove (case-insensitive)\n    chars_to_remove = set(str2_lower)\n    \n    # Build the result string with characters not in chars_to_remove\n    result = ''.join([char for char in str1_lower if char not in chars_to_remove])\n    \n    return result\n\n# Example usage:\nstr1 = \"Hello World\"\nstr2 = \"ld\"\nresult = remove_dirty_chars(str1, str2)\nprint(result)  # Output: \"Heo Wor\"\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpn7bdhnx_.py\", line 15, in <module>\n    assert remove_dirty_chars('HelloWorld', 'hELLO') == 'World', 'Function should handle case-insensitive character removal.'\nAssertionError: Function should handle case-insensitive character removal.", "passed": false}
{"task_id": 19, "completion": "def test_duplicate(nums):\n    seen = set()\n    duplicates = []\n    \n    for num in nums:\n        if num in seen:\n            if num not in duplicates:\n                duplicates.append(num)\n        else:\n            seen.add(num)\n    \n    return duplicates\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(n):\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    # Check if n is a Woodall number\n    if n == 0:\n        return True\n    \n    k = 1\n    while k * (2 ** k) - 1 <= n:\n        if k * (2 ** k) - 1 == n:\n            return True\n        k += 1\n    \n    return False\n\ndef get_all_woodall_numbers(limit):\n    if not isinstance(limit, int) or limit < 0:\n        raise ValueError(\"Limit must be a non-negative integer.\")\n    \n    woodall_numbers = []\n    k = 1\n    while k * (2 ** k) - 1 <= limit:\n        woodall_numbers.append(k * (2 ** k) - 1)\n        k += 1\n    \n    return woodall_numbers\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjo8_lbv8.py\", line 22, in <module>\n    assert is_woodall(10) == [1, 7]\nAssertionError", "passed": false}
{"task_id": 21, "completion": "def multiples_of_num(n, m):\n    if not isinstance(m, int) or m <= 0:\n        raise ValueError('The second argument (m) must be a positive integer.')\n    \n    return [i * n for i in range(1, m + 1)]\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkqhe62gw.py\", line 5, in <module>\n    assert multiples_of_num(3, 2.5) == [2.5, 5.0, 7.5]\n  File \"/tmp/tmpkqhe62gw.py\", line 3, in multiples_of_num\n    raise ValueError('The second argument (m) must be a positive integer.')\nValueError: The second argument (m) must be a positive integer.", "passed": false}
{"task_id": 22, "completion": "def find_first_duplicate(arr):\n    seen = set()\n    duplicates = []\n    \n    for num in arr:\n        if num in seen:\n            if num not in duplicates:\n                duplicates.append(num)\n        else:\n            seen.add(num)\n    \n    return duplicates\n\n# Example usage:\narr = [1, 2, 3, 2, 4, 5, 6, 7, 8, 9, 2]\nprint(find_first_duplicate(arr))  # Output: [2]\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists):\n    if not list_of_lists:\n        return 0\n    \n    max_sum = float('-inf')\n    \n    for sublist in list_of_lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 24, "completion": "def binary_to_decimal(binary):\n    # Remove any leading zeros from the binary string\n    binary = binary.lstrip('0')\n    \n    # Convert the binary string to a decimal integer\n    decimal = int(binary, 2)\n    \n    return decimal\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpli9zjyzj.py\", line 8, in <module>\n    assert binary_to_decimal('0000') == 0\n  File \"/tmp/tmpli9zjyzj.py\", line 5, in binary_to_decimal\n    decimal = int(binary, 2)\nValueError: invalid literal for int() with base 2: ''", "passed": false}
{"task_id": 25, "completion": "def find_product(arr):\n    from collections import Counter\n    \n    # Count the occurrences of each element in the array\n    count = Counter(arr)\n    \n    # Initialize the product to 1 (since multiplying by 1 has no effect)\n    product = 1\n    \n    # Iterate through the counted elements\n    for num, freq in count.items():\n        # If the element appears only once, multiply it to the product\n        if freq == 1:\n            product *= num\n    \n    return product\n\n# Example usage:\narr = [2, -3, 4, -3, 5, 6, 7]\nprint(find_product(arr))  # Output will be 2 * 4 * 5 * 6 * 7 = 840\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpghjolk3_.py\", line 16, in <module>\n    assert find_product([-1, -2, 3, 3], 4) == 2\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(test_list, K):\n    # Initialize a counter for tuples with exactly k elements\n    count = 0\n    \n    # Iterate through each tuple in the list\n    for sub in test_list:\n        # Check if the current tuple has exactly k elements\n        if len(sub) == K:\n            count += 1\n    \n    # Return the count of tuples with exactly k elements\n    return count\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 27, "completion": "import re\n\ndef remove(strings, chars_to_remove=''):\n    # Create a regular expression pattern to match digits and specified characters\n    pattern = f'[0-9{re.escape(chars_to_remove)}]'\n    \n    # Use list comprehension to apply the regex substitution to each string in the list\n    result = [re.sub(pattern, '', s) for s in strings]\n    \n    return result\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphtkhfiyp.py\", line 8, in <module>\n    assert remove_extended(['abcd123', '456defg'], 'abcdef') == ['d', 'g']\nNameError: name 'remove_extended' is not defined", "passed": false}
{"task_id": 28, "completion": "def binomial_coeff(n, k):\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    \n    # Create a list to store intermediate results\n    C = [0] * (k + 1)\n    C[0] = 1  # base case\n    \n    for i in range(1, n + 1):\n        # Compute values from right to left to avoid overwriting\n        for j in range(min(i, k), 0, -1):\n            C[j] += C[j - 1]\n    \n    return C[k]\n\n# Example usage:\nn = 20\nk = 5\nprint(f\"Binomial Coefficient C({n}, {k}) = {binomial_coeff(n, k)}\")\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 29, "completion": "from typing import List\n\ndef get_odd_occurrence(arr: List[int], arr_size: int) -> List[int]:\n    result = []\n    for i in range(arr_size):\n        count = 0\n        for j in range(arr_size):\n            if arr[i] == arr[j]:\n                count += 1\n        if count % 2 != 0:\n            result.append(arr[i])\n    # Remove duplicates from the result list\n    result = list(set(result))\n    return result\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_6em8q4j.py\", line 14, in <module>\n    assert get_odd_occurrence([1, 2, 3, 1, 2, 3, 1, 3]) == [1, 3]\nTypeError: get_odd_occurrence() missing 1 required positional argument: 'arr_size'", "passed": false}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    def is_alphabetic(c):\n        return c.isalpha()\n    \n    s = ''.join(filter(is_alphabetic, s))\n    n = len(s)\n    count = 0\n    \n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n                \n    return count\n\n# Example usage:\ninput_string = \"abcab\"\nresult = count_substring_with_equal_ends(input_string)\nprint(f\"Number of substrings with equal ends: {result}\")\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 31, "completion": "import heapq\n\ndef func(nums1, nums2, k):\n    if k == 0:\n        return []\n    # Create a dictionary to store the frequency of each number in both lists\n    freq = {}\n    for num in nums1 + nums2:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    # Use heapq.nlargest to get the top k elements based on frequency\n    result = heapq.nlargest(k, freq.items(), key=lambda x: x[1])\n    return [item[0] for item in result]\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpi7x_0t0s.py\", line 15, in <module>\n    assert func([[1, 2, 3], [4, 5, 6]], 0) == []\nTypeError: func() missing 1 required positional argument: 'k'", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n, return_all=False):\n    prime_factors = []\n    \n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        prime_factors.append(2)\n        n //= 2\n    \n    # n must be odd at this point, so we can skip one element (Note i = i + 2)\n    for i in range(3, int(n**0.5) + 1, 2):\n        # While i divides n, append i and divide n\n        while n % i == 0:\n            prime_factors.append(i)\n            n //= i\n    \n    # This condition is to handle the case when n is a prime number greater than 2\n    if n > 2:\n        prime_factors.append(n)\n    \n    if return_all:\n        return prime_factors\n    else:\n        return prime_factors[-1] if prime_factors else None\n\n# Example usage:\nnumber = 600851475143\nprint(max_prime_factors(number))  # Returns the largest prime factor\nprint(max_prime_factors(number, return_all=True))  # Returns all prime factors\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(decimal_number):\n    if isinstance(decimal_number, int):\n        return bin(decimal_number)[2:]\n    elif isinstance(decimal_number, list):\n        return [bin(num)[2:] for num in decimal_number]\n    else:\n        raise ValueError(\"Input must be an integer or a list of integers.\")\n\n# Example usage:\nsingle_decimal = 10\nbinary_string = decimal_to_binary(single_decimal)\nprint(f\"Binary of {single_decimal}: {binary_string}\")\n\nlist_of_decimals = [10, 255, 7]\nlist_of_binaries = decimal_to_binary(list_of_decimals)\nprint(f\"Binaries of {list_of_decimals}: {list_of_binaries}\")\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 34, "completion": "def find_missing(arr, start, end):\n    if start > end:\n        return []\n    elif start == end:\n        return [start]\n    else:\n        mid = (start + end) // 2\n        left = find_missing(arr, start, mid)\n        right = find_missing(arr, mid + 1, end)\n        return left + right\n\ndef find_all_missing_numbers(sorted_array):\n    n = len(sorted_array)\n    return find_missing(sorted_array, 0, n - 1)\n\n# Example usage:\nsorted_array = [1, 3, 4, 7, 8, 9, 10]\nmissing_numbers = find_all_missing_numbers(sorted_array)\nprint(\"Missing numbers:\", missing_numbers)\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7jelxiwl.py\", line 18, in <module>\n    assert find_missing([1,3,6], 3) == [2, 4, 5]\nTypeError: find_missing() missing 1 required positional argument: 'end'", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    if isinstance(n, int):\n        return n * (n + 1) * (2 * n + 1) // 6\n    elif isinstance(n, list):\n        return [i * (i + 1) * (2 * i + 1) // 6 for i in n]\n    else:\n        raise TypeError(\"Input must be an integer or a list of integers.\")\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxwocqtwd.py\", line 8, in <module>\n    assert find_rect_num([1, 2, 3]) == [2, 6, 12]\nAssertionError", "passed": false}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator, n):\n    # Handle negative numerators and denominators by taking their absolute values\n    numerator = abs(numerator)\n    denominator = abs(denominator)\n    \n    if denominator == 0:\n        raise ValueError(\"Denominator cannot be zero.\")\n    \n    remainder = numerator % denominator\n    \n    for _ in range(n - 1):\n        remainder *= 10\n        digit = remainder // denominator\n        remainder %= denominator\n    \n    return (remainder * 10) // denominator\n\n# Example usage:\nprint(find_nth_digit(1, 3, 1))  # Output: 3 (1/3 = 0.333...)\nprint(find_nth_digit(-2, 7, 5))  # Output: 8 (-2/7 = -0.2857142857...)\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 37, "completion": "def sort_mixed_list(mixed_list, reverse_strings=False):\n    # Separate integers and strings into two lists\n    int_part = [item for item in mixed_list if isinstance(item, int)]\n    str_part = [item for item in mixed_list if isinstance(item, str)]\n    \n    # Sort the integer part\n    sorted_ints = sorted(int_part)\n    \n    # Sort the string part in reverse lexicographical order if required\n    if reverse_strings:\n        sorted_strs = sorted(str_part, reverse=True)\n    else:\n        sorted_strs = sorted(str_part)\n    \n    # Combine the sorted parts\n    sorted_list = sorted_ints + sorted_strs\n    return sorted_list\n\n# Example usage:\nmixed_list = [1, 2, 3, \"apple\", \"banana\", \"cherry\"]\nsorted_list = sort_mixed_list(mixed_list, reverse_strings=True)\nprint(sorted_list)  # Output: [1, 2, 3, 'cherry', 'banana', 'apple']\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 38, "completion": "def div_even_odd(lst):\n    # Filter out non-integer values from the list\n    lst = [x for x in lst if isinstance(x, int)]\n    \n    # Find the first even number\n    first_even = next((x for x in lst if x % 2 == 0), None)\n    \n    # Find the first odd number\n    first_odd = next((x for x in lst if x % 2 != 0), None)\n    \n    # Handle cases where there are no even or odd numbers in the list\n    if first_even is None:\n        raise ValueError(\"No even numbers found in the list.\")\n    if first_odd is None:\n        raise ValueError(\"No odd numbers found in the list.\")\n    \n    # Perform the division\n    result = first_even / first_odd\n    \n    return result\n\n# Example usage:\nlst = [-4, -3, 5, 7, 8]\nprint(div_even_odd(lst))  # Output: 1.3333333333333333\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 39, "completion": "import heapq\nfrom collections import defaultdict\n\ndef rearrange_string(s):\n    # Step 1: Count character frequencies\n    char_count = defaultdict(int)\n    for char in s:\n        char_count[char] += 1\n    \n    # Step 2: Check feasibility\n    max_heap = []\n    for char, count in char_count.items():\n        if count > (len(s) + 1) // 2:\n            return []  # Impossible to rearrange\n        heapq.heappush(max_heap, (-count, char))\n    \n    # Step 3: Build the max heap\n    prev_char = None\n    prev_count = 0\n    result = []\n    \n    while max_heap or prev_count:\n        if prev_count < 0:\n            heapq.heappush(max_heap, (prev_count, prev_char))\n        \n        if not max_heap:\n            return []  # Invalid state\n        \n        count, char = heapq.heappop(max_heap)\n        result.append(char)\n        prev_char = char\n        prev_count = count + 1\n    \n    # Step 4: Handle remaining characters\n    if len(result) != len(s):\n        return []\n    \n    # Step 5: Generate all possible valid rearrangements\n    def backtrack(path, used):\n        if len(path) == len(s):\n            results.append(''.join(path))\n            return\n        for i in range(len(s)):\n            if used[i]:\n                continue\n            if i > 0 and path[-1] == s[i]:\n                continue\n            used[i] = True\n            path.append(s[i])\n            backtrack(path, used)\n            path.pop()\n            used[i] = False\n    \n    results = []\n    backtrack([], [False] * len(s))\n    return results\n\n# Example usage:\ns = \"aab\"\nprint(rearrange_string(s))  # Output: ['aba', 'baa']\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwkenu_y4.py\", line 50, in <module>\n    print(rearrange_string(s))  # Output: ['aba', 'baa']\n  File \"/tmp/tmpwkenu_y4.py\", line 46, in rearrange_string\n    backtrack([], [False] * len(s))\n  File \"/tmp/tmpwkenu_y4.py\", line 38, in backtrack\n    if i > 0 and path[-1] == s[i]:\nIndexError: list index out of range", "passed": false}
{"task_id": 40, "completion": "from collections import Counter\n\ndef flatten(lst):\n    for el in lst:\n        if isinstance(el, list):\n            yield from flatten(el)\n        else:\n            yield el\n\ndef freq_element(nested_list):\n    flat_list = list(flatten(nested_list))\n    frequency = Counter(flat_list)\n    return frequency\n\n# Example usage:\nnested_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3]]\nprint(freq_element(nested_list))\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 41, "completion": "def filter_evennumbers(lst):\n    # Filter out non-integer types from the list\n    filtered_list = [x for x in lst if isinstance(x, int)]\n    \n    # Use a lambda function to filter even numbers\n    even_numbers = list(filter(lambda x: x % 2 == 0, filtered_list))\n    \n    return even_numbers\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 42, "completion": "def find_sum(arr):\n    # Create a dictionary to store the frequency of each element\n    freq = {}\n    \n    # Iterate through the array and count the frequency of each element\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Calculate the sum of repeated elements (elements with frequency greater than 1)\n    repeated_sum = 0\n    for num, count in freq.items():\n        if count > 1:\n            repeated_sum += num * count\n    \n    return repeated_sum\n\n# Example usage:\narr = [1, 2, -3, 4, 2, -3, 5]\nresult = find_sum(arr)\nprint(\"Sum of repeated elements:\", result)  # Output: Sum of repeated elements: 0\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp39zv0za0.py\", line 20, in <module>\n    assert find_sum([-1, -2, -3, -1, -1], 5) == -2\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    matches = re.findall(pattern, text)\n    return matches\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpl7ugkbdy.py\", line 6, in <module>\n    assert text_match('abc_def_ghi') == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 45, "completion": "import math\nfrom functools import reduce\n\ndef get_gcd(arr):\n    # Filter out zero values from the list\n    non_zero_elements = [x for x in arr if x != 0]\n    \n    # If there are no non-zero elements, return 0 or raise an error as needed\n    if not non_zero_elements:\n        return 0  # or raise ValueError(\"The list must contain at least one non-zero element.\")\n    \n    # Use reduce to apply the math.gcd function across all non-zero elements\n    gcd_value = reduce(math.gcd, non_zero_elements)\n    return gcd_value\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 46, "completion": "def test_distinct(numbers):\n    if len(numbers) == len(set(numbers)):\n        return True\n    else:\n        return False\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 47, "completion": "def compute_last_digit(a, b):\n    if a == 0 or b == 0:\n        return 1\n    \n    # If a > b, the result will be 0 because there will be at least one factor of 10 in the numerator\n    if a > b:\n        return 0\n    \n    last_digit = 1\n    for i in range(a + 1, b + 1):\n        last_digit = (last_digit * (i % 10)) % 10\n    \n    return last_digit\n\n# Example usage:\nprint(compute_last_digit(3, 6))  # Output: 2\nprint(compute_last_digit(4, 8))  # Output: 0\nprint(compute_last_digit(0, 5))  # Output: 1\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 48, "completion": "def odd_bit_set_number(n):\n    # Handle negative numbers by converting them to their absolute value\n    n = abs(n)\n    \n    # Initialize mask with 0\n    mask = 0\n    \n    # Iterate through each bit position\n    for i in range(32):  # Assuming a 32-bit integer for simplicity\n        if i % 2 == 1:\n            mask |= (1 << i)\n    \n    # Set all odd bits\n    result = n | mask\n    \n    return result\n\n# Example usage:\nprint(odd_bit_set_number(10))  # Output will be 31 (binary: 11111)\nprint(odd_bit_set_number(-10)) # Output will also be 31 (binary: 11111)\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_chxjdnh.py\", line 16, in <module>\n    assert odd_bit_set_number(-10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(list1, N=0):\n    result = [sublist[N] for sublist in list1]\n    return result\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 51, "completion": "def check_triangle_type(a, b, c):\n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return \"Not a valid triangle\"\n    \n    # Check for equilateral triangle\n    if a == b == c:\n        return \"Equilateral\"\n    \n    # Check for isosceles triangle\n    if a == b or a == c or b == c:\n        return \"Isosceles\"\n    \n    # If none of the above conditions are met, it's a scalene triangle\n    return \"Scalene\"\n\n# Example usage:\nprint(check_triangle_type(3, 3, 3))  # Output: Equilateral\nprint(check_triangle_type(3, 4, 4))  # Output: Isosceles\nprint(check_triangle_type(3, 4, 5))  # Output: Scalene\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpf9bh_4qx.py\", line 17, in <module>\n    assert check_equilateral(5, 5, 3) == 'isosceles'\nNameError: name 'check_equilateral' is not defined", "passed": false}
{"task_id": 52, "completion": "def parallelogram_area(parallelograms):\n    \"\"\"\n    Calculate the area of multiple parallelograms given their bases and heights.\n\n    Args:\n        parallelograms (list of tuples): A list where each tuple contains the base and height of a parallelogram.\n\n    Returns:\n        list: A list of areas corresponding to each parallelogram.\n    \"\"\"\n    areas = []\n    for base, height in parallelograms:\n        area = base * height\n        areas.append(area)\n    return areas\n\n# Example usage:\nparallelograms = [(5, 3), (4, 2), (6, 4)]\nareas = parallelogram_area(parallelograms)\nprint(areas)  # Output: [15, 8, 24]\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpr9vlielr.py\", line 11, in <module>\n    assert parallelogram_area_list([(10, 20), (15, 20), (8, 9)]) == [200, 300, 72]\nNameError: name 'parallelogram_area_list' is not defined", "passed": false}
{"task_id": 53, "completion": "def check_equality(s):\n    if len(s) == 0:\n        return False\n    return s[0].lower() == s[-1].lower()\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0lzaw_df.py\", line 5, in <module>\n    assert check_equality('Abca') == 'Equal'\nAssertionError", "passed": false}
{"task_id": 54, "completion": "def counting_sort(arr):\n    if not arr:\n        return []\n\n    # Find the minimum value in the array to handle negative numbers\n    min_val = min(arr)\n    \n    # Shift all elements to be non-negative\n    shifted_arr = [x - min_val for x in arr]\n    \n    # Find the maximum value in the shifted array\n    max_val = max(shifted_arr)\n    \n    # Initialize the count array with zeros\n    count = [0] * (max_val + 1)\n    \n    # Populate the count array\n    for num in shifted_arr:\n        count[num] += 1\n    \n    # Build the sorted array\n    sorted_index = 0\n    for i in range(len(count)):\n        while count[i] > 0:\n            arr[sorted_index] = i + min_val\n            sorted_index += 1\n            count[i] -= 1\n\n# Example usage:\narr = [-5, -3, 2, 7, 1, -1, 4]\nsorted_arr = counting_sort(arr)\nprint(sorted_arr)  # Output: [-5, -3, -1, 1, 2, 4, 7]\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0hnwghih.py\", line 26, in <module>\n    assert counting_sort([-5, -1, -3, 0, 2, 1]) == [-5, -3, -1, 0, 1, 2]\nAssertionError", "passed": false}
{"task_id": 55, "completion": "def tn_gp(a, r, n):\n    \"\"\"\n    Calculate the n-th term of a geometric series.\n\n    Parameters:\n    a (float or int): The first term of the geometric series.\n    r (float or int): The common ratio of the geometric series.\n    n (int): The term number to calculate.\n\n    Returns:\n    float: The n-th term of the geometric series.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"The term number 'n' must be a positive integer.\")\n    \n    # Calculate the n-th term using the formula a * r^(n-1)\n    tn = a * (r ** (n - 1))\n    return tn\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 56, "completion": "def reverse_number(n):\n    if n < 0:\n        return -int(str(-n)[::-1])\n    else:\n        return int(str(n)[::-1])\n\ndef check(n):\n    reversed_n = reverse_number(n)\n    return n == 2 * reversed_n - 1\n\n# Example usage:\nprint(check(18))   # True (18 is one less than twice its reverse 9)\nprint(check(-18))  # False (-18 is not one less than twice its reverse -9)\nprint(check(34))   # False (34 is not one less than twice its reverse 43)\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5ua_6geu.py\", line 14, in <module>\n    assert check(-37) == True\nAssertionError", "passed": false}
{"task_id": 57, "completion": "def find_max_num(digits):\n    # Convert each digit to a string for easy sorting\n    str_digits = [str(digit) for digit in digits]\n    \n    # Sort the digits in descending order\n    str_digits.sort(reverse=True)\n    \n    # Concatenate the sorted digits to form the largest number\n    max_num = int(''.join(str_digits))\n    \n    return max_num\n\n# Example usage:\ndigits = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\nprint(find_max_num(digits))  # Output: 96555433211\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpg6q_yd13.py\", line 12, in <module>\n    assert find_max_num([1, 1, 2, 2], 4) == 2211\nTypeError: find_max_num() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 58, "completion": "def opposite_signs(x, y):\n    return (x ^ y) < 0\n\ndef opposite_signs_list(pairs):\n    if not all(isinstance(pair, tuple) and len(pair) == 2 for pair in pairs):\n        raise ValueError(\"Each element in the list must be a tuple of two integers.\")\n    \n    results = []\n    for x, y in pairs:\n        results.append(opposite_signs(x, y))\n    return results\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 59, "completion": "def is_octagonal(n):\n    if isinstance(n, list):\n        return [n * (3 * n - 2) // 2 for n in n]\n    else:\n        return n * (3 * n - 2) // 2\n\n# Example usage:\n# Single integer\nprint(is_octagonal(5))  # Output: 70\n\n# List of integers\nprint(is_octagonal([1, 2, 3, 4, 5]))  # Output: [1, 8, 21, 40, 65]\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3bgqgtjh.py\", line 11, in <module>\n    assert is_octagonal([1, 2, 3]) == [1, 8, 21]\nAssertionError", "passed": false}
{"task_id": 60, "completion": "def max_len_sub(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Initialize the dp array where dp[i] will store the length of the longest subsequence ending at index i\n    dp = [1] * n\n    \n    # Iterate through the array to fill the dp array\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    # The result is the maximum value in the dp array\n    return max(dp)\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp09hbprvv.py\", line 14, in <module>\n    assert max_len_sub([10, 7, 4, 1, -2], -3) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}

{"task_id": 11, "completion": "def remove_occ(s, ch):\n    if len(ch) != 1:\n        raise ValueError('Second parameter must be a single character.')\n    \n    # Find the index of the first occurrence\n    first_index = s.find(ch)\n    if first_index == -1:\n        return s\n    \n    # Remove the first occurrence\n    s = s[:first_index] + s[first_index + 1:]\n    \n    # Find the index of the last occurrence (after the first one has been removed)\n    last_index = s.rfind(ch)\n    if last_index == -1:\n        return s\n    \n    # Remove the last occurrence\n    s = s[:last_index] + s[last_index + 1:]\n    \n    return s\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 12, "completion": "def sort_matrix(matrix):\n    # Check if the input is a list\n    if not isinstance(matrix, list):\n        raise TypeError('Input must be a list.')\n    \n    # Check if each element in the matrix is a list\n    for row in matrix:\n        if not isinstance(row, list):\n            raise TypeError('Each element in the matrix must be a list.')\n    \n    # Check if all elements in the matrix are integers\n    for row in matrix:\n        for elem in row:\n            if not isinstance(elem, int):\n                raise TypeError('All elements in the matrix must be integers.')\n    \n    # Sort the matrix based on the sum of its rows\n    sorted_matrix = sorted(matrix, key=lambda x: sum(x))\n    return sorted_matrix\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 13, "completion": "from collections import Counter\n\ndef count_common(words):\n    if not isinstance(words, list) or not all(isinstance(word, str) for word in words):\n        raise TypeError('Input must be a list of strings.')\n    \n    # Count the occurrences of each word\n    word_counts = Counter(words)\n    \n    # Get the most common words\n    most_common_words = word_counts.most_common()\n    \n    return most_common_words\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmph9p7skmn.py\", line 10, in <module>\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nAssertionError", "passed": false}
{"task_id": 14, "completion": "def find_volume(base, height, length):\n    # Check if all inputs are numeric\n    if not (isinstance(base, (int, float)) and isinstance(height, (int, float)) and isinstance(length, (int, float))):\n        raise TypeError('All dimensions must be numeric.')\n    \n    # Check if all inputs are positive\n    if base <= 0 or height <= 0 or length <= 0:\n        raise ValueError('All dimensions must be positive numbers.')\n    \n    # Calculate the area of the triangular base\n    base_area = 0.5 * base * height\n    \n    # Calculate the volume of the prism\n    volume = base_area * length\n    \n    return volume\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpns3f71k_.py\", line 19, in <module>\n    try: find_volume('a', 2, 3)\n  File \"/tmp/tmpns3f71k_.py\", line 4, in find_volume\n    raise TypeError('All dimensions must be numeric.')\nTypeError: All dimensions must be numeric.", "passed": false}
{"task_id": 15, "completion": "import re\n\ndef split_lowerstring(s):\n    if not isinstance(s, str):\n        raise TypeError('Input must be a string.')\n    \n    return re.findall('[a-z][^a-z]*', s)\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpran9mdeb.py\", line 9\n    try: split_lowerstring(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    if not isinstance(text, str):\n        raise TypeError('Input must be a string.')\n    \n    return re.findall(r'[a-z]+_[a-z]+', text)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpn3tbfh31.py\", line 6, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    return 4 * side_length\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(str1, str2):\n    if not isinstance(str1, str) or not isinstance(str2, str):\n        raise TypeError('Both inputs must be strings.')\n    \n    result = [char for char in str1 if char not in str2]\n    return ''.join(result)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 19, "completion": "def test_duplicate(arr):\n    if not isinstance(arr, list):\n        raise ValueError('Input must be a list of integers')\n    \n    if not all(isinstance(x, int) for x in arr):\n        raise ValueError('All elements in the list must be integers')\n    \n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6j7dg_dy.py\", line 16, in <module>\n    test_duplicate(None)\n  File \"/tmp/tmp6j7dg_dy.py\", line 3, in test_duplicate\n    raise ValueError('Input must be a list of integers')\nValueError: Input must be a list of integers", "passed": false}
{"task_id": 20, "completion": "def is_woodall(n):\n    if not isinstance(n, int) or n < 0:\n        raise TypeError('Input must be a non-negative integer.')\n    \n    if n == 0:\n        return False\n    \n    k = 1\n    while True:\n        woodall_number = k * (2 ** k - 1)\n        if woodall_number == n:\n            return True\n        elif woodall_number > n:\n            return False\n        k += 1\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4k3qlhiq.py\", line 14, in <module>\n    assert is_woodall(383) == True\nAssertionError", "passed": false}
{"task_id": 21, "completion": "def multiples_of_num(m, n):\n    if m < 0 or n < 0:\n        raise ValueError('Both m and n must be non-negative integers.')\n    \n    return [n * i for i in range(1, m + 1)]\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 22, "completion": "def find_first_duplicate(arr):\n    if not isinstance(arr, list) or not all(isinstance(x, int) for x in arr):\n        raise TypeError('Input must be a list of integers.')\n    \n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    \n    return None\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2f8puipg.py\", line 11, in <module>\n    assert find_first_duplicate([1, 2, 3, 4])==-1\nAssertionError", "passed": false}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists):\n    # Check if the input is a list of lists\n    if not isinstance(list_of_lists, list) or not all(isinstance(sublist, list) for sublist in list_of_lists):\n        raise TypeError('Input must be a list of lists.')\n    \n    # Check if each sublist contains only integers\n    for sublist in list_of_lists:\n        if not all(isinstance(x, int) for x in sublist):\n            raise TypeError('All sublists must contain only integer elements.')\n    \n    # Calculate the sum of each sublist and return the maximum sum\n    max_sum = max(sum(sublist) for sublist in list_of_lists)\n    return max_sum\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmp287xn_kp.py\", line 15\n    try: maximum_sum([[1, 2], [3, 'a']]); assert False, 'Expected TypeError' except TypeError: pass\n                                                                             ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 24, "completion": "def binary_to_decimal(binary_str):\n    # Check if the input is a valid binary string\n    if not all(char in '01' for char in binary_str):\n        raise ValueError('Invalid binary number')\n    \n    # Convert binary string to decimal\n    decimal_value = 0\n    length = len(binary_str)\n    for i in range(length):\n        digit = int(binary_str[length - 1 - i])\n        decimal_value += digit * (2 ** i)\n    \n    return decimal_value\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpa7i30sk0.py\", line 15\n    try: binary_to_decimal('102'); assert False, 'Expected ValueError' except ValueError as e: assert str(e) == 'Invalid binary number'\n                                                                       ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 25, "completion": "def find_product(arr):\n    if not isinstance(arr, list) or not all(isinstance(x, int) for x in arr):\n        raise TypeError('Input must be a list of integers.')\n    \n    from collections import Counter\n    \n    # Count occurrences of each element\n    count = Counter(arr)\n    \n    # Filter out repeated elements\n    non_repeated_elements = [x for x, c in count.items() if c == 1]\n    \n    # Calculate the product of non-repeated elements\n    product = 1\n    for num in non_repeated_elements:\n        product *= num\n    \n    return product\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpuhceesv5.py\", line 14, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(test_list, K):\n    if not isinstance(test_list, list) or not all(isinstance(item, tuple) for item in test_list):\n        raise TypeError('The first argument must be a list of tuples.')\n    if not isinstance(K, int):\n        raise TypeError('The second argument must be an integer.')\n    \n    res = [len(sub) == K for sub in test_list]\n    return res\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphwkt4qyw.py\", line 8, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "completion": "def remove(lst):\n    if not isinstance(lst, list):\n        raise TypeError('Input must be a list.')\n    \n    for item in lst:\n        if not isinstance(item, str):\n            raise TypeError('All elements in the list must be strings.')\n    \n    return [item for item in lst if not any(char.isdigit() for char in item)]\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_nxu7pbe.py\", line 8, in <module>\n    assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\nAssertionError", "passed": false}
{"task_id": 28, "completion": "def binomial_coeff(n, k):\n    if n < 0 or k < 0:\n        raise ValueError('Inputs must be non-negative.')\n    if k > n:\n        raise ValueError('k must not be greater than n.')\n    \n    # Initialize a list to store intermediate results\n    C = [0] * (k + 1)\n    C[0] = 1  # Base case\n    \n    for i in range(1, n + 1):\n        # Compute next row of pascal triangle using the previous row\n        for j in range(min(i, k), 0, -1):\n            C[j] += C[j - 1]\n    \n    return C[k]\n\n# Example usage:\ntry:\n    result = binomial_coeff(5, 2)\n    print(result)  # Output: 10\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpw7vem585.py\", line 23, in <module>\n    try: binomial_coeff(-1, 2)\n  File \"/tmp/tmpw7vem585.py\", line 3, in binomial_coeff\n    raise ValueError('Inputs must be non-negative.')\nValueError: Inputs must be non-negative.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpw7vem585.py\", line 24, in <module>\n    except ValueError as e: assert str(e) == 'Inputs must be non-negative and k must not be greater than n'\nAssertionError", "passed": false}
{"task_id": 29, "completion": "def get_odd_occurrence(arr):\n    if not isinstance(arr, list) or not all(isinstance(x, int) for x in arr):\n        raise TypeError('Input must be a list of integers.')\n    \n    xor = 0\n    for num in arr:\n        xor ^= num\n    \n    return xor\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpuk86kx22.py\", line 8, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    if not isinstance(s, str):\n        raise TypeError('Input must be a string')\n    \n    def count_substrings_with_char(char, s):\n        count = 0\n        for i in range(len(s)):\n            if s[i] == char:\n                count += 1\n        return count\n    \n    total_count = 0\n    for char in set(s):\n        total_count += count_substrings_with_char(char, s)\n    \n    return total_count\n\n# Example usage:\ntry:\n    result = count_substring_with_equal_ends(\"abcab\")\n    print(result)  # Output: 7\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpde32igq0.py\", line 23\n    try: count_substring_with_equal_ends(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                                  ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 31, "completion": "import heapq\n\ndef func(lists, k):\n    # Flatten the list of lists and count occurrences of each integer\n    counts = {}\n    for lst in lists:\n        for num in lst:\n            if num not in counts:\n                counts[num] = 0\n            counts[num] += 1\n    \n    # Check if k is greater than the number of distinct integers\n    if k > len(counts):\n        raise ValueError('k cannot be greater than the number of distinct integers')\n    \n    # Use heapq.nlargest to get the top k elements based on their counts\n    return heapq.nlargest(k, counts.items(), key=lambda x: x[1])\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppragaxzu.py\", line 15, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError('Input must be a positive integer')\n    \n    # Initialize the maximum prime factor variable\n    max_prime = -1\n    \n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        max_prime = 2\n        n //= 2\n    \n    # n must be odd at this point, so we can skip one element (Note i = i + 2)\n    for i in range(3, int(n**0.5) + 1, 2):\n        # While i divides n, print i and divide n\n        while n % i == 0:\n            max_prime = i\n            n //= i\n    \n    # This condition is to handle the case when n is a prime number greater than 2\n    if n > 2:\n        max_prime = n\n    \n    return max_prime\n\n# Example usage:\ntry:\n    result = max_prime_factors(600851475143)\n    print(f\"The largest prime factor is: {result}\")\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(decimal_number):\n    if not isinstance(decimal_number, int) or decimal_number < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    \n    if decimal_number == 0:\n        return '0'\n    \n    binary_digits = []\n    while decimal_number > 0:\n        remainder = decimal_number % 2\n        binary_digits.append(str(remainder))\n        decimal_number //= 2\n    \n    # The digits are in reverse order, so we need to reverse them\n    binary_digits.reverse()\n    \n    return ''.join(binary_digits)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp43y9y9h3.py\", line 14, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "completion": "def find_missing(arr):\n    if not is_sorted(arr):\n        raise ValueError('Input list must be sorted.')\n    \n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        # Check if the element at mid is equal to its index plus one\n        if arr[mid] == mid + 1:\n            left = mid + 1\n        else:\n            if mid == 0 or arr[mid - 1] == mid:\n                return mid + 1\n            right = mid - 1\n    \n    # If no missing number is found, return None\n    return None\n\ndef is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpzoqg8bzp.py\", line 18, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError('Input must be a positive integer.')\n    return n * (n + 1)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator):\n    if denominator == 0:\n        raise ValueError('Denominator cannot be zero')\n    \n    # Convert the fraction to its decimal representation\n    decimal_part = []\n    remainder = numerator % denominator\n    \n    while remainder != 0:\n        remainder *= 10\n        digit = remainder // denominator\n        decimal_part.append(digit)\n        remainder %= denominator\n    \n    # If the remainder is zero, it's a terminating decimal\n    if remainder == 0:\n        return decimal_part[n-1] if n <= len(decimal_part) else None\n    \n    # If the remainder is not zero, it's a repeating decimal\n    # Find the start of the repeating sequence\n    for i in range(1, len(decimal_part)):\n        if decimal_part[:i] == decimal_part[i:2*i]:\n            repeating_sequence = decimal_part[:i]\n            break\n    else:\n        repeating_sequence = decimal_part\n    \n    # Calculate the position within the repeating sequence\n    position_in_repeating = (n - 1) % len(repeating_sequence)\n    \n    return repeating_sequence[position_in_repeating]\n\n# Example usage:\ntry:\n    print(find_nth_digit(1, 3))  # Output: 3 (repeating decimal 0.333...)\n    print(find_nth_digit(1, 4))  # Output: 5 (terminating decimal 0.25)\n    print(find_nth_digit(2, 7))  # Output: 8 (repeating decimal 0.285714285714...)\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "timed out", "passed": false}
{"task_id": 37, "completion": "def sort_mixed_list(mixed_list):\n    if not isinstance(mixed_list, list):\n        raise TypeError('Input must be a list.')\n    \n    for item in mixed_list:\n        if not (isinstance(item, int) or isinstance(item, str)):\n            raise TypeError('All elements in the list must be either integers or strings.')\n    \n    # Separate integers and strings into two lists\n    int_part = [item for item in mixed_list if isinstance(item, int)]\n    str_part = [item for item in mixed_list if isinstance(item, str)]\n    \n    # Sort each part separately\n    sorted_ints = sorted(int_part)\n    sorted_strs = sorted(str_part)\n    \n    # Combine the sorted parts\n    sorted_list = sorted_ints + sorted_strs\n    \n    return sorted_list\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 38, "completion": "def div_even_odd(lst):\n    if not lst:\n        raise ValueError('List cannot be empty.')\n    \n    even_found = False\n    odd_found = False\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_found = True\n        elif num % 2 != 0:\n            odd_found = True\n        \n        if even_found and odd_found:\n            break\n    \n    if not (even_found and odd_found):\n        raise ValueError('List must contain at least one even and one odd number.')\n    \n    evens = [num for num in lst if num % 2 == 0]\n    odds = [num for num in lst if num % 2 != 0]\n    \n    return sum(evens) / sum(odds)\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmp2kt9y4mc.py\", line 21\n    try: div_even_odd([2, 4, 6]); assert False; except ValueError as e: assert str(e) == 'List must contain at least one even and one odd number.'\n                                                ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 39, "completion": "from collections import Counter\nimport heapq\n\ndef rearrange_string(s):\n    if not isinstance(s, str) or not s.islower():\n        raise ValueError(\"Input must be a string containing only lowercase letters.\")\n    \n    # Count the frequency of each character\n    char_count = Counter(s)\n    \n    # Create a max heap based on character frequency\n    max_heap = [(-freq, char) for char, freq in char_count.items()]\n    heapq.heapify(max_heap)\n    \n    prev_char = None\n    prev_freq = 0\n    result = []\n    \n    while max_heap or prev_freq:\n        if prev_freq < 0:\n            heapq.heappush(max_heap, (prev_freq, prev_char))\n        \n        if not max_heap:\n            raise ValueError(\"Cannot rearrange the string to satisfy the condition.\")\n        \n        freq, char = heapq.heappop(max_heap)\n        result.append(char)\n        prev_char = char\n        prev_freq = freq + 1\n    \n    return ''.join(result)\n\n# Example usage:\ntry:\n    print(rearrange_string(\"aabbcc\"))  # Output: \"abcabc\" or any valid rearrangement\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxajpzd25.py\", line 29, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "completion": "from collections import Counter\n\ndef freq_element(list_of_lists):\n    if not isinstance(list_of_lists, list) or not all(isinstance(sublist, list) for sublist in list_of_lists):\n        raise TypeError('Input must be a list of lists.')\n    \n    # Flatten the list of lists into a single list\n    flattened_list = [item for sublist in list_of_lists for item in sublist]\n    \n    # Use Counter to count the frequency of each element\n    frequency = Counter(flattened_list)\n    \n    return frequency\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpr5xv30_q.py\", line 13\n    try: freq_element('not a list'); assert False; except TypeError: assert True\n                                                   ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 41, "completion": "def filter_evennumbers(lst):\n    if not isinstance(lst, list) or not all(isinstance(x, int) for x in lst):\n        raise TypeError('Input must be a list of integers.')\n    \n    return list(filter(lambda x: (x % 2 == 0), lst))\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 42, "completion": "def find_sum(arr):\n    if not isinstance(arr, list):\n        raise TypeError('Input must be a list.')\n    \n    # Create a dictionary to count occurrences of each element\n    element_count = {}\n    for num in arr:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n    \n    # Calculate the sum of elements that appear more than once\n    repeated_sum = sum(num * (count - 1) for num, count in element_count.items() if count > 1)\n    \n    return repeated_sum\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3hjr4jfz.py\", line 14, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    if not isinstance(text, str):\n        raise TypeError('Input must be a string.')\n    \n    patterns = '^[a-z]+_[a-z]+$'\n    if re.search(patterns,  text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 44, "completion": "import re\n\ndef text_match_string(text):\n    if not isinstance(text, str):\n        raise TypeError('Input must be a string.')\n    \n    patterns = '^\\w+'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmp31yefbh4.py\", line 13\n    try: text_match_string(123); assert False, 'TypeError not raised' except TypeError: pass\n                                                                      ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 45, "completion": "import math\n\ndef get_gcd(arr):\n    if not arr:\n        raise ValueError('Input list cannot be empty.')\n    \n    # Initialize gcd with the first element of the list\n    current_gcd = arr[0]\n    \n    # Iterate through the rest of the elements and compute the GCD\n    for num in arr[1:]:\n        current_gcd = math.gcd(current_gcd, num)\n    \n    return current_gcd\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 46, "completion": "def test_distinct(lst):\n    if not isinstance(lst, list):\n        raise TypeError('Input must be a list.')\n    \n    for element in lst:\n        if not isinstance(element, int):\n            raise TypeError('All elements in the list must be integers.')\n    \n    return len(lst) == len(set(lst))\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 47, "completion": "def compute_last_digit(a, b):\n    if a > b:\n        raise ValueError('a should not be greater than b')\n    \n    # Initialize result\n    result = 1\n    \n    # If a equals b, the last digit is 1\n    if a == b:\n        return 1\n    \n    # Calculate the product of numbers from (a+1) to b\n    for i in range(a + 1, b + 1):\n        result = (result * (i % 10)) % 10\n    \n    return result\n\n# Example usage:\ntry:\n    print(compute_last_digit(3, 6))  # Output: 2\n    print(compute_last_digit(5, 5))  # Output: 1\n    print(compute_last_digit(7, 4))  # Raises ValueError\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 48, "completion": "def odd_bit_set_number(n):\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer.')\n    \n    # Initialize result to 0\n    result = 0\n    \n    # Iterate over each bit position\n    for i in range(32):  # Assuming a 32-bit integer for simplicity\n        # Check if the bit position is odd (1-based index)\n        if i % 2 == 0:\n            # Set the corresponding bit in the result\n            result |= (1 << i)\n    \n    # Combine the original number with the result to set all odd bits\n    return n | result\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7xpad8oy.py\", line 14, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(list1, n=0):\n    result = []\n    for sub_list in list1:\n        try:\n            result.append(sub_list[n])\n        except IndexError:\n            raise IndexError(f'Index {n} out of range for sublist')\n    return result\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpm4zg2w1a.py\", line 5, in specified_element\n    result.append(sub_list[n])\nIndexError: list index out of range\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpm4zg2w1a.py\", line 12, in <module>\n    try: specified_element([[1, 2], [3, 4]], 3)\n  File \"/tmp/tmpm4zg2w1a.py\", line 7, in specified_element\n    raise IndexError(f'Index {n} out of range for sublist')\nIndexError: Index 3 out of range for sublist\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpm4zg2w1a.py\", line 13, in <module>\n    except IndexError as e: assert str(e) == 'Index out of range for sublist'\nAssertionError", "passed": false}
{"task_id": 50, "completion": "def min_length_list(lists):\n    if not isinstance(lists, list) or not all(isinstance(sublist, list) for sublist in lists):\n        raise ValueError('Input must be a list of lists.')\n    \n    return min(lists, key=lambda x: len(x))\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpb4wkm7no.py\", line 5, in <module>\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nAssertionError", "passed": false}
{"task_id": 51, "completion": "def check_equilateral(a, b, c):\n    # Check if all inputs are positive integers\n    if not (isinstance(a, int) and isinstance(b, int) and isinstance(c, int)):\n        raise TypeError('All sides must be integers.')\n    if a <= 0 or b <= 0 or c <= 0:\n        raise ValueError('All sides must be positive integers.')\n    \n    # Check if the triangle is equilateral\n    if a == b == c:\n        return True\n    else:\n        return False\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    if not (isinstance(base, (int, float)) and isinstance(height, (int, float))):\n        raise TypeError('Both base and height must be numerical values.')\n    \n    return base * height\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(s):\n    if not isinstance(s, str):\n        raise TypeError('Input must be a string')\n    \n    return s[0] == s[-1]\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpl5_ri91_.py\", line 5, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 54, "completion": "def counting_sort(arr):\n    if not isinstance(arr, list):\n        raise TypeError('Input must be a list.')\n    \n    for element in arr:\n        if not isinstance(element, int):\n            raise TypeError('All elements in the list must be integers.')\n    \n    if len(arr) == 0:\n        return []\n    \n    # Find the maximum value in the array to determine the size of the count array\n    max_value = max(arr)\n    \n    # Initialize the count array with zeros\n    count_array = [0] * (max_value + 1)\n    \n    # Populate the count array\n    for num in arr:\n        count_array[num] += 1\n    \n    # Reconstruct the sorted array\n    sorted_index = 0\n    for i in range(len(count_array)):\n        while count_array[i] > 0:\n            arr[sorted_index] = i\n            sorted_index += 1\n            count_array[i] -= 1\n    \n    return arr\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 55, "completion": "def tn_gp(a, r, n):\n    \"\"\"\n    Calculate the t-nth term of a geometric series.\n\n    Parameters:\n    a (float): The first term of the geometric series.\n    r (float): The common ratio of the geometric series.\n    n (int): The term number to find.\n\n    Returns:\n    float: The t-nth term of the geometric series.\n\n    Raises:\n    ValueError: If the term number (n) is less than 1.\n    \"\"\"\n    if n < 1:\n        raise ValueError('Term number must be greater than 0')\n    \n    return a * (r ** (n - 1))\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpbzhc389l.py\", line 5, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def check(n):\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer.')\n    \n    # Reverse the number\n    reversed_n = 0\n    temp = n\n    while temp > 0:\n        reversed_n = (reversed_n * 10) + (temp % 10)\n        temp //= 10\n    \n    # Check if the number is one less than twice its reverse\n    return n == 2 * reversed_n - 1\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 57, "completion": "def find_max_num(digits, num):\n    if num > len(digits):\n        raise ValueError('Number of digits exceeds the length of the list.')\n    \n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n    \n    # Form the largest number from the sorted digits\n    max_num = int(''.join(map(str, digits[:num])))\n    \n    return max_num\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 58, "completion": "def opposite_signs(x, y):\n    if not (isinstance(x, int) and isinstance(y, int)):\n        raise TypeError('Both inputs must be integers.')\n    \n    return ((x ^ y) < 0)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 59, "completion": "def is_octagonal(n):\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError('Input must be a positive integer.')\n    \n    # Formula for the nth octagonal number: O_n = n * (3n - 2)\n    return n * (3 * n - 2)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpy9nieiqo.py\", line 10, in <module>\n    is_octagonal(-1)\n  File \"/tmp/tmpy9nieiqo.py\", line 3, in is_octagonal\n    raise ValueError('Input must be a positive integer.')\nValueError: Input must be a positive integer.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpy9nieiqo.py\", line 12, in <module>\n    assert str(e) == 'Input must be a positive integer'\nAssertionError", "passed": false}
{"task_id": 60, "completion": "def max_len_sub(arr, n):\n    if not isinstance(arr, list) or not isinstance(n, int):\n        raise TypeError('Input must be a list and the second parameter must be an integer.')\n    \n    if n <= 0:\n        return 0\n    \n    dp = [1] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)\n\n# Example usage:\narr = [1, 2, 3, 4]\nn = len(arr)\nprint(max_len_sub(arr, n))  # Output: 4\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4fn1308y.py\", line 17, in <module>\n    assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4\nAssertionError", "passed": false}

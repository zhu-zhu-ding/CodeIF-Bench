{"task_id": 11, "requirement": "Code Standard", "completion": "def remove_occ(s: str, char: str) -> str:\n    \"\"\"\n    Removes the first and last occurrences of a specified character from the string.\n\n    Parameters:\n    s (str): The input string.\n    char (str): The character to be removed.\n\n    Returns:\n    str: The modified string with the first and last occurrences of the specified character removed.\n    \"\"\"\n    if len(char) != 1:\n        raise ValueError('Second parameter must be a single character.')\n\n    try:\n        first_index = s.index(char)\n        last_index = s.rindex(char)\n    except ValueError:\n        return s\n\n    if first_index == last_index:\n        return \"\"\n\n    if first_index > 0:\n        start = s[:first_index]\n    else:\n        start = \"\"\n\n    if last_index < len(s) - 1:\n        end = s[last_index + 1:]\n    else:\n        end = \"\"\n\n    return start + end\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpldp3wtfr.py\", line 21, in <module>\n    assert remove_occ(\"abcda\",\"a\") == \"bcd\"\nAssertionError", "passed": false}
{"task_id": 12, "requirement": "Code Standard", "completion": "def sort_matrix(matrix: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Sorts a given matrix in ascending order based on the sum of its rows.\n\n    :param matrix: A list of lists representing the matrix.\n    :type matrix: list[list[int]]\n    :return: The sorted matrix.\n    :rtype: list[list[int]]\n    \"\"\"\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise TypeError('Input must be a list of lists.')\n    if any(not all(isinstance(x, int) for x in row) for row in matrix):\n        raise TypeError('All elements in the matrix must be integers.')\n\n    # Handling empty matrix\n    if not matrix:\n        return []\n\n    # Sorting the matrix based on the sum of each row\n    sorted_matrix = sorted(matrix, key=sum)\n    return sorted_matrix\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_matrix = [\n        [3, 5, 1],\n        [2, 2, 2],\n        [4, 0, 1]\n    ]\n    \n    try:\n        sorted_matrix = sort_matrix(example_matrix)\n        print(\"Sorted Matrix:\")\n        for row in sorted_matrix:\n            print(row)\n    except TypeError as e:\n        print(f\"Error: {e}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqt3vajuu.py\", line 40, in <module>\n    test_annotations()\n  File \"/tmp/tmpqt3vajuu.py\", line 39, in test_annotations\n    assert hints == {'matrix': 'list[list[int]]', 'return': 'list[list[int]]'}\nAssertionError", "passed": false}
{"task_id": 14, "requirement": "Code Standard", "completion": "def find_volume(base: float, base_height: float, prism_height: float) -> float:\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base (float): The base length of the triangular face.\n    base_height (float): The height of the triangular face.\n    prism_height (float): The height (or length) of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    # Calculate the area of the triangular base\n    base_area = 0.5 * base * base_height\n    \n    # Calculate the volume of the prism\n    volume = base_area * prism_height\n    \n    return volume\n\n# Example usage:\nbase_length = 5.0  # example base length of the triangle\ntriangle_height = 4.0  # example height of the triangle\nprism_height = 10.0  # example height of the prism\n\nvolume = find_volume(base_length, triangle_height, prism_height)\nprint(f\"The volume of the triangular prism is {volume:.2f} cubic units.\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwp0yp2zp.py\", line 16, in <module>\n    assert find_volume(5.5, 3.2, 4.1) == 72.16\nAssertionError", "passed": false}
{"task_id": 15, "requirement": "Code Standard", "completion": "def split_lowerstring(text: str) -> list:\n    \"\"\"\n    Splits the given string at lowercase letters.\n    \n    Parameters:\n    text (str): The input string to be split.\n    \n    Returns:\n    list: A list of substrings split at lowercase letters.\n    \"\"\"\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string.\")\n    \n    result = []\n    current_substring = ''\n    \n    for char in text:\n        if char.islower():\n            if current_substring:\n                result.append(current_substring)\n            current_substring = char\n        else:\n            current_substring += char\n    \n    if current_substring:\n        result.append(current_substring)\n    \n    return result\n", "result": "failed: File \"/tmp/tmprlx01xsz.py\", line 20\n    try: split_lowerstring(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 16, "requirement": "Code Standard", "completion": "import re\n\ndef text_lowercase_underscore(text: str) -> list:\n    \"\"\"\n    This function searches for sequences of lowercase letters joined with an underscore in the given text.\n    \n    Args:\n        text (str): The input string to search within.\n        \n    Returns:\n        list: A list of found sequences.\n    \"\"\"\n    # Regular expression pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    \n    # Find all matches in the text\n    matches = re.findall(pattern, text)\n    \n    return matches\n\n# Example usage:\nexample_text = \"Here is an example_text_to_match and another_example_sequence but notThisOne\"\nprint(text_lowercase_underscore(example_text))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9xe6nr_u.py\", line 11, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "requirement": "Code Standard", "completion": "def square_perimeter(side_length: float) -> float:\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Parameters:\n    side_length (float): The length of one side of the square.\n\n    Returns:\n    float: The perimeter of the square.\n    \"\"\"\n    return 4 * side_length\n\n# Example usage:\nside_length = 5.0  # Example side length of the square\nperimeter = square_perimeter(side_length)\nprint(f\"The perimeter of the square with side length {side_length} is {perimeter}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9jg9rl0s.py\", line 17, in <module>\n    assert False, 'Expected ValueError for negative input'\nAssertionError: Expected ValueError for negative input", "passed": false}
{"task_id": 18, "requirement": "Code Standard", "completion": "def remove_dirty_chars(source: str, chars_to_remove: str) -> str:\n    \"\"\"\n    Removes characters from the source string that are present in the chars_to_remove string.\n\n    :param source: The original string from which characters will be removed.\n    :param chars_to_remove: A string containing characters to be removed from the source string.\n    :return: A new string with characters removed.\n    \"\"\"\n    if not isinstance(source, str) or not isinstance(chars_to_remove, str):\n        raise TypeError('Both inputs must be strings.')\n    \n    if not source.isalpha() or not chars_to_remove.isalpha():\n        raise ValueError('Input strings must only contain alphabetic characters.')\n    \n    # Create a translation table for str.translate() method\n    translation_table = str.maketrans('', '', chars_to_remove)\n    \n    # Use translate method to remove specified characters\n    cleaned_string = source.translate(translation_table)\n    \n    return cleaned_string\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqoyky1cy.py\", line 23, in <module>\n    assert remove_dirty_chars('example', '') == 'example', 'Function should return the original string if the second string is empty.'\n  File \"/tmp/tmpqoyky1cy.py\", line 5, in remove_dirty_chars\n    raise ValueError('Input strings must only contain alphabetic characters.')\nValueError: Input strings must only contain alphabetic characters.", "passed": false}
{"task_id": 19, "requirement": "Code Standard", "completion": "def has_duplicates(array_nums: list) -> bool:\n    \"\"\"\n    Check if the given list of integers contains any duplicate elements.\n\n    Args:\n        array_nums (list): A list of integers.\n\n    Returns:\n        bool: True if there is at least one duplicate element, False otherwise.\n    \"\"\"\n    # Convert the list to a set and compare lengths\n    return len(array_nums) != len(set(array_nums))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmptbd0fdgv.py\", line 4, in <module>\n    assert test_duplicate(([1,2,3,4,5]))==False\nNameError: name 'test_duplicate' is not defined", "passed": false}
{"task_id": 20, "requirement": "Code Standard", "completion": "def is_woodall(x: int) -> bool:\n    \"\"\"\n    Check if the given number is a Woodall number.\n    \n    Args:\n        x (int): The number to check.\n        \n    Returns:\n        bool: True if the number is a Woodall number, False otherwise.\n    \"\"\"\n    if not isinstance(x, int):\n        raise TypeError('Input must be an integer.')\n    \n    n = 1\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number == x:\n            return True\n        elif woodall_number > x:\n            return False\n        n += 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgotcx61u.py\", line 29, in <module>\n    assert cc_visit(inspect.getsource(is_woodall))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 21, "requirement": "Code Standard", "completion": "def multiples_of_num(n: int, m: int) -> list:\n    \"\"\"\n    Generates a list of the first m multiples of n.\n\n    Parameters:\n    n (int): The base number.\n    m (int): The number of multiples to generate.\n\n    Returns:\n    list: A list containing the first m multiples of n.\n    \"\"\"\n    if m < 0 or n < 0:\n        raise ValueError(\"Both m and n must be non-negative integers.\")\n    \n    return [i * n for i in range(1, m + 1)]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp07zo_97l.py\", line 5, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "requirement": "Code Standard", "completion": "def find_first_duplicate(nums: list[int]) -> int:\n    seen = set()\n    \n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    \n    # If no duplicates found, return None\n    return None\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmptpk7bt9f.py\", line 10, in <module>\n    assert find_first_duplicate([1, 2, 3, 4])==-1\nAssertionError", "passed": false}
{"task_id": 23, "requirement": "Code Standard", "completion": "def maximum_sum(list_of_lists: list[list[int]]) -> int:\n    \"\"\"\n    Finds the maximum sum of elements in a list of lists.\n\n    Parameters:\n    list_of_lists (list): A list containing multiple sublists.\n\n    Returns:\n    int: The maximum sum of elements found in any of the sublists.\n    \"\"\"\n    if not list_of_lists:  # Check if the input list is empty\n        return 0\n\n    max_sum = float('-inf')  # Initialize max_sum to negative infinity\n    \n    for sublist in list_of_lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum\n\n# Example usage:\nexample_list = [[1, 2, 3], [4, 5, 6], [10, -1, 2]]\nprint(maximum_sum(example_list))  # Output should be 15 (from [4, 5, 6])\n", "result": "failed: File \"/tmp/tmp1o5yflup.py\", line 17\n    try: maximum_sum([[1, 2], [3, 'a']]); assert False, 'Expected TypeError' except TypeError: pass\n                                                                             ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 24, "requirement": "Code Standard", "completion": "def binary_to_decimal(binary_str: str) -> int:\n    \"\"\"\n    Convert a binary number (given as a string) to its decimal equivalent.\n    \n    :param binary_str: A string representing a binary number.\n    :return: An integer representing the decimal equivalent of the binary number.\n    \"\"\"\n    if not binary_str:\n        return 0\n    \n    decimal_value = 0\n    \n    for index, digit in enumerate(reversed(binary_str)):\n        if digit not in ('0', '1'):\n            raise ValueError(\"Input contains invalid characters other than 0 or 1.\")\n        \n        decimal_value += int(digit) * (2 ** index)\n    \n    return decimal_value\n", "result": "failed: File \"/tmp/tmpfpesai3v.py\", line 13\n    try: binary_to_decimal('102'); assert False, 'Expected ValueError' except ValueError as e: assert str(e) == 'Invalid binary number'\n                                                                       ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 25, "requirement": "Code Standard", "completion": "from functools import reduce\nfrom operator import mul\n\ndef find_product(arr: list[int]) -> int:\n    if not isinstance(arr, list) or not all(isinstance(x, int) for x in arr):\n        raise TypeError('Input must be a list of integers.')\n    \n    if not arr:\n        return 1\n    \n    # Find unique elements in the array\n    unique_elements = set(arr)\n    \n    # Calculate the product of unique elements using reduce and mul\n    product = reduce(mul, unique_elements, 1)\n    \n    return product\n\n# Example usage:\narr = [1, 2, 3, 4, 2, 3, 5]\nprint(find_product(arr))  # Output should be 60 (1 * 2 * 3 * 4 * 5)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpa72c50zf.py\", line 16, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "requirement": "Code Standard", "completion": "def check_k_elements(test_list: list[tuple], k: int) -> bool:\n    \"\"\"\n    Check if each tuple in the given list has exactly k elements.\n\n    :param test_list: List of tuples to be checked.\n    :param k: The number of elements that each tuple should have.\n    :return: True if all tuples have exactly k elements, False otherwise.\n    \"\"\"\n    for tup in test_list:\n        if len(tup) != k:\n            return False\n    return True\n\n# Example usage:\nexample_tuples = [(1, 2), (3, 4, 5), (6, 7)]\nk = 2\n\nresult = check_k_elements(example_tuples, k)\nprint(f\"All tuples have {k} elements: {result}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpe0yul0mj.py\", line 11, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "requirement": "Code Standard", "completion": "def remove(strings: list[str]) -> list[str]:\n    \"\"\"\n    Removes all digits from each string in the given list of strings.\n\n    :param strings: List of strings from which digits need to be removed.\n    :return: A new list of strings with all digits removed.\n    \"\"\"\n    if not isinstance(strings, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    for item in strings:\n        if not isinstance(item, str):\n            raise TypeError(\"All elements in the list must be strings.\")\n    \n    return [''.join(filter(lambda x: not x.isdigit(), s)) for s in strings]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmph56ldd0p.py\", line 26, in <module>\n    assert remove.__annotations__ == {'list': list[str], 'return': list[str]}\nAssertionError", "passed": false}
{"task_id": 28, "requirement": "Code Standard", "completion": "from typing import Tuple\n\ndef binomial_coefficient(n: int, k: int) -> int:\n    \"\"\"\n    Calculate the binomial coefficient C(n, k), which is the number of ways to choose k elements\n    from a set of n elements without regard to the order of selection.\n\n    Parameters:\n    n (int): The total number of elements.\n    k (int): The number of elements to choose.\n\n    Returns:\n    int: The binomial coefficient C(n, k).\n\n    Raises:\n    ValueError: If either n or k is negative, or if k is greater than n.\n    \"\"\"\n    if n < 0 or k < 0:\n        raise ValueError('Inputs must be non-negative integers.')\n    if k > n:\n        raise ValueError('k must not be greater than n.')\n    \n    # If k is more than n-k, then it's more efficient to calculate binomial_coeff(n, n-k)\n    if k > n - k:\n        k = n - k\n    \n    # Initialize result\n    result = 1\n    \n    # Calculate value of [n*(n-1)*---*(n-k+1)] / [k*(k-1)*---*1]\n    for i in range(k):\n        result *= (n - i)\n        result //= (i + 1)\n    \n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwq3y3l1n.py\", line 17, in <module>\n    assert binomial_coeff(5,2) == 10\nNameError: name 'binomial_coeff' is not defined", "passed": false}
{"task_id": 29, "requirement": "Code Standard", "completion": "from collections import Counter\n\ndef get_odd_occurrence(arr: list) -> int:\n    \"\"\"\n    Finds the element that occurs an odd number of times in the list.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The element that occurs an odd number of times, or None if no such element exists.\n    \"\"\"\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Count the occurrences of each element in the array\n    counts = Counter(arr)\n    \n    # Iterate through the counted items\n    for element, count in counts.items():\n        # Check if the count is odd\n        if count % 2 != 0:\n            return element\n    \n    # If no element has an odd occurrence, return None\n    return None\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0h6molos.py\", line 14, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "requirement": "Code Standard", "completion": "def count_substring_with_equal_ends(s: str) -> int:\n    \"\"\"\n    Counts all substrings of the input string s that start and end with the same character.\n\n    :param s: Input string\n    :type s: str\n    :return: The number of substrings that start and end with the same character\n    :rtype: int\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string.\")\n    \n    n = len(s)\n    count = 0\n\n    # Iterate through each character in the string\n    for i in range(n):\n        # Count substrings starting from index i\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n\n    return count\n\n# Example usage:\ninput_string = \"abca\"\nresult = count_substring_with_equal_ends(input_string)\nprint(f\"Number of substrings starting and ending with the same character: {result}\")\n", "result": "failed: File \"/tmp/tmpl5ejmssg.py\", line 21\n    try: count_substring_with_equal_ends(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                                  ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 31, "requirement": "Code Standard", "completion": "from typing import List\nfrom collections import Counter\nimport heapq\n\ndef func(nums_list: List[List[int]], k: int) -> List[int]:\n    \"\"\"\n    Finds the top k integers that occur most frequently from given lists of sorted and distinct integers.\n    \n    :param nums_list: List of lists containing sorted and distinct integers.\n    :param k: The number of top frequent integers to return.\n    :return: A list of the top k integers with their highest frequency.\n    \"\"\"\n    if not nums_list and k == 0:\n        return []\n    \n    if k > sum(len(sublist) for sublist in nums_list):\n        raise ValueError('k cannot be greater than the number of distinct integers')\n    \n    # Flatten the list of lists into a single list\n    all_nums = [num for sublist in nums_list for num in sublist]\n    \n    # Count the frequency of each integer\n    freq_counter = Counter(all_nums)\n    \n    # Use a min heap to keep track of the top k elements based on frequency\n    # We use negative frequencies because heapq is a min-heap by default\n    heap = []\n    \n    for num, freq in freq_counter.items():\n        if len(heap) < k:\n            heapq.heappush(heap, (-freq, num))\n        else:\n            # If the current frequency is higher than the smallest frequency in the heap\n            if -freq > heap[0][0]:\n                heapq.heapreplace(heap, (-freq, num))\n    \n    # Extract the top k elements from the heap\n    top_k = [item[1] for item in heap]\n    \n    return top_k\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7jvzqmx1.py\", line 26, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "requirement": "Code Standard", "completion": "def max_prime_factors(n: int) -> int:\n    \"\"\"\n    Find the largest prime factor of a given positive integer.\n\n    Parameters:\n    n (int): A positive integer whose largest prime factor is to be found.\n\n    Returns:\n    int: The largest prime factor of the given number.\n\n    Raises:\n    ValueError: If the input is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError('Input must be a positive integer.')\n    \n    # Initialize the largest prime factor\n    largest_factor = -1\n    \n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        largest_factor = 2\n        n //= 2\n    \n    # Now n must be odd, start checking for odd factors\n    factor = 3\n    while factor * factor <= n:\n        while n % factor == 0:\n            largest_factor = factor\n            n //= factor\n        factor += 2\n    \n    # If n is a prime number greater than 2\n    if n > 2:\n        largest_factor = n\n    \n    return largest_factor\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpashz1mxe.py\", line 26, in <module>\n    max_prime_factors(-10)\n  File \"/tmp/tmpashz1mxe.py\", line 3, in max_prime_factors\n    raise ValueError('Input must be a positive integer.')\nValueError: Input must be a positive integer.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpashz1mxe.py\", line 28, in <module>\n    assert str(e) == 'Input must be a positive integer'\nAssertionError", "passed": false}
{"task_id": 33, "requirement": "Code Standard", "completion": "def decimal_to_binary(decimal_number: int) -> str:\n    \"\"\"\n    Convert a decimal number to its binary representation.\n\n    Parameters:\n    decimal_number (int): A non-negative integer to be converted to binary.\n\n    Returns:\n    str: The binary representation of the decimal number.\n    \"\"\"\n    if decimal_number == 0:\n        return \"0\"\n\n    binary_number = \"\"\n    while decimal_number > 0:\n        remainder = decimal_number % 2\n        binary_number = str(remainder) + binary_number\n        decimal_number //= 2\n\n    return binary_number\n\n# Example usage:\nprint(decimal_to_binary(10))  # Output: \"1010\"\nprint(decimal_to_binary(255)) # Output: \"11111111\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp70iyo25p.py\", line 13, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "requirement": "Code Standard", "completion": "def find_missing(arr: list[int]) -> int:\n    \"\"\"\n    Finds the missing number in a sorted array of integers where exactly one number\n    in the range [arr[0], arr[-1]] is missing. The array is assumed to be sorted.\n\n    :param arr: List[int] - A sorted list of integers with exactly one missing element.\n    :return: int - The missing number in the array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        # Check if the difference between the current index and the value at that index matches the expected difference\n        if arr[mid] - mid != arr[0]:\n            # If it doesn't match, the missing number is in the left half\n            right = mid - 1\n        else:\n            # If it matches, the missing number is in the right half\n            left = mid + 1\n\n    # At this point, left should point to the position where the missing number would be\n    return arr[0] + left\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqbrgg1sh.py\", line 14, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "requirement": "Code Standard", "completion": "def find_rect_num(n: int) -> int:\n    \"\"\"\n    Find the n-th rectangular number.\n\n    Parameters:\n    n (int): The position in the sequence of rectangular numbers.\n\n    Returns:\n    int: The n-th rectangular number.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError('Input must be a positive integer.')\n    \n    return n * (n + 1)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpimnz_7fn.py\", line 16, in <module>\n    assert cc_visit(inspect.getsource(find_rect_num))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 36, "requirement": "Code Standard", "completion": "def find_nth_digit(numerator: int, denominator: int, n: int) -> int:\n    \"\"\"\n    Find the nth digit in the decimal representation of the division result of two given numbers.\n\n    Parameters:\n    numerator (int): The numerator of the fraction.\n    denominator (int): The denominator of the fraction.\n    n (int): The position of the digit to find (1-based index).\n\n    Returns:\n    int: The nth digit in the decimal representation of the division result.\n    \"\"\"\n    if denominator == 0:\n        raise ValueError('Denominator cannot be zero')\n\n    # Perform the division\n    division_result = numerator / denominator\n    \n    # Convert the result to a string to easily access individual digits\n    division_str = str(division_result)\n    \n    # Check if the result has a decimal part\n    if '.' in division_str:\n        # Get the decimal part and remove the leading '.'\n        decimal_part = division_str.split('.')[1]\n    else:\n        # If there's no decimal part, return -1 or handle as needed\n        return -1\n\n    # Ensure n is within bounds\n    if n > len(decimal_part):\n        return -1  # Or raise an exception if preferred\n\n    # Return the nth digit\n    return int(decimal_part[n - 1])\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwywezi_p.py\", line 28, in <module>\n    assert find_nth_digit.__annotations__ == {'p': int, 'q': int, 'N': int, 'return': int}\nAssertionError", "passed": false}
{"task_id": 37, "requirement": "Code Standard", "completion": "from typing import List, Union\n\ndef sort_mixed_list(mixed_list: List[Union[int, str]]) -> List[Union[int, str]]:\n    \"\"\"\n    Sorts a mixed list of integers and strings.\n\n    Args:\n        mixed_list (List[Union[int, str]]): A list containing integers and strings.\n\n    Returns:\n        List[Union[int, str]]: A sorted list with integers and strings in ascending order.\n    \"\"\"\n    def custom_sort_key(item):\n        try:\n            # Try to convert the item to an integer\n            return int(item)\n        except ValueError:\n            # If conversion fails, return the item itself\n            return item\n\n    # Use the sorted function with the custom key\n    sorted_list = sorted(mixed_list, key=custom_sort_key)\n    return sorted_list\n\n# Example usage:\nmixed_list = [10, \"2\", \"3\", 5, \"1\", \"4\"]\nsorted_list = sort_mixed_list(mixed_list)\nprint(sorted_list)  # Output: [1, 2, 3, 4, 5, 10]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3htymsak.py\", line 17, in <module>\n    assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n  File \"/tmp/tmp3htymsak.py\", line 11, in sort_mixed_list\n    sorted_list = sorted(mixed_list, key=custom_sort_key)\nTypeError: '<' not supported between instances of 'str' and 'int'", "passed": false}
{"task_id": 38, "requirement": "Code Standard", "completion": "def div_even_odd(numbers: list) -> (int, float):\n    # Initialize variables to store the first even and odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Iterate through the list to find the first even and odd numbers\n    for num in numbers:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n    \n    # Check if both first_even and first_odd are found\n    if first_even is not None and first_odd is not None:\n        # Perform the division and return the result\n        return first_even / first_odd\n    else:\n        # Handle the case where either or both numbers are not found\n        if first_even is None:\n            return \"No even number found\"\n        elif first_odd is None:\n            return \"No odd number found\"\n        else:\n            return \"Both even and odd numbers found but cannot perform division\"\n", "result": "failed: File \"/tmp/tmpkbap33ca.py\", line 27\n    try: div_even_odd([2, 4, 6]); assert False; except ValueError as e: assert str(e) == 'List must contain at least one even and one odd number.'\n                                                ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 39, "requirement": "Code Standard", "completion": "from collections import Counter\n\ndef rearrange_string(s: str) -> bool:\n    \"\"\"\n    Check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n\n    Parameters:\n    s (str): The input string consisting only of lowercase letters.\n\n    Returns:\n    bool: True if the string can be rearranged as required, False otherwise.\n    \"\"\"\n    if not isinstance(s, str):\n        raise ValueError('Input must be a string.')\n    if not s.islower():\n        raise ValueError('String must contain only lowercase letters.')\n\n    # Count the frequency of each character in the string\n    char_count = Counter(s)\n\n    # Check if any character appears more than half the length of the string\n    max_char_count = max(char_count.values())\n    if max_char_count > (len(s) + 1) // 2:\n        return False\n\n    # If there's only one unique character or all other characters appear less frequently,\n    # it's always possible to rearrange the string as required.\n    if len(set(s)) == 1 or (max_char_count == (len(s) + 1) // 2 and len(set(s)) == 2):\n        return True\n\n    # Try to place the most frequent character first\n    for i in range(len(s)):\n        if s[i] != s[(i - 1) % len(s)]:\n            return True\n\n    return False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpq042u83d.py\", line 22, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "requirement": "Code Standard", "completion": "from collections import Counter\n\ndef freq_element(nums: list[list[int]]) -> dict[int, int]:\n    if not isinstance(nums, list) or not all(isinstance(sublist, list) for sublist in nums):\n        raise TypeError('Input must be a list of lists.')\n    \n    if not nums:\n        return {}\n    \n    # Flatten the list of lists into a single list\n    flat_list = [item for sublist in nums for item in sublist]\n    \n    # Use Counter to count the frequency of each element\n    frequency_counter = Counter(flat_list)\n    \n    return dict(frequency_counter)\n", "result": "failed: File \"/tmp/tmp08bwm9qb.py\", line 15\n    try: freq_element('not a list'); assert False; except TypeError: assert True\n                                                   ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 41, "requirement": "Code Standard", "completion": "def filter_evennumbers(nums: list) -> list:\n    \"\"\"\n    Filters out even numbers from the given list.\n\n    Parameters:\n    nums (list): A list of integers.\n\n    Returns:\n    list: A list containing only the even numbers from the input list.\n    \"\"\"\n    if not isinstance(nums, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(x, int) for x in nums):\n        raise TypeError(\"All elements in the list must be integers.\")\n    \n    # Using filter() with a lambda function to filter even numbers\n    even_numbers = list(filter(lambda x: x % 2 == 0, nums))\n    return even_numbers\n\n# Example usage:\nexample_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nfiltered_list = filter_evennumbers(example_list)\nprint(filtered_list)  # Output: [2, 4, 6, 8, 10]\n", "result": "passed", "passed": true}
{"task_id": 42, "requirement": "Code Standard", "completion": "def find_sum(arr: list) -> int:\n    \"\"\"\n    Find the sum of repeated elements in a given array.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The sum of repeated elements in the array. Returns 0 if there are no repeated elements.\n    \"\"\"\n    if not isinstance(arr, list):\n        raise TypeError('Input must be a list.')\n    \n    if not arr:\n        return 0\n    \n    # Dictionary to keep track of the count of each element\n    element_count = {}\n    \n    # Count the occurrences of each element\n    for element in arr:\n        if element in element_count:\n            element_count[element] += 1\n        else:\n            element_count[element] = 1\n    \n    # Calculate the sum of elements that appear more than once\n    sum_of_repeated_elements = sum(element * count for element, count in element_count.items() if count > 1)\n    \n    return sum_of_repeated_elements\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpttiw7myq.py\", line 17, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Code Standard", "completion": "import re\n\ndef text_match(text: str) -> bool:\n    \"\"\"\n    Check if the input text matches the pattern of lowercase letters joined with an underscore.\n\n    Args:\n        text (str): The input text to be checked.\n\n    Returns:\n        bool: True if the text matches the pattern, False otherwise.\n    \"\"\"\n    if not isinstance(text, str):\n        raise TypeError('Input must be a string.')\n    if not text:\n        return False\n    \n    pattern = r'^[a-z]+_[a-z]+$'\n    return bool(re.search(pattern, text))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpi60kz7pw.py\", line 9, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 44, "requirement": "Code Standard", "completion": "import re\n\ndef text_match_string(input_string: str, word_to_match: str) -> bool:\n    \"\"\"\n    Matches a specified word at the beginning of the input string.\n    \n    Parameters:\n    - input_string (str): The string to be searched.\n    - word_to_match (str): The word to match at the beginning of the input string.\n    \n    Returns:\n    - bool: True if the word matches at the beginning, False otherwise.\n    \"\"\"\n    if not isinstance(input_string, str):\n        raise TypeError(\"Input must be a string.\")\n    \n    # Create a regex pattern to match the word at the beginning of the string\n    pattern = r'^' + re.escape(word_to_match)\n    \n    # Use re.match to check if the pattern matches the start of the string\n    if re.match(pattern, input_string):\n        return True\n    else:\n        return False\n\n# Example usage:\ninput_str = \"Hello world, this is a test.\"\nword = \"Hello\"\nprint(text_match_string(input_str, word))  # Output: True\n\ninput_str = \"This is a test, hello world.\"\nword = \"hello\"\nprint(text_match_string(input_str, word))  # Output: False\n", "result": "failed: File \"/tmp/tmpss73y7dw.py\", line 22\n    try: text_match_string(123); assert False, 'TypeError not raised' except TypeError: pass\n                                                                      ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 45, "requirement": "Code Standard", "completion": "import math\n\ndef get_gcd(numbers: list[int]) -> int:\n    if not numbers:\n        raise ValueError('Input list cannot be empty.')\n    \n    current_gcd = numbers[0]\n    \n    for num in numbers[1:]:\n        current_gcd = math.gcd(current_gcd, num)\n        \n        if current_gcd == 1:\n            break\n    \n    return current_gcd\n\n# Example usage:\narr = [24, 36, 48]\nprint(get_gcd(arr))  # Output should be 12\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5cjkz09_.py\", line 19, in <module>\n    assert get_gcd.__annotations__ == {'numbers': list, 'return': int}\nAssertionError", "passed": false}
{"task_id": 46, "requirement": "Code Standard", "completion": "def test_distinct(numbers: list) -> bool:\n    \"\"\"\n    Determine if all numbers in the given list are distinct.\n\n    :param numbers: List of integers or floats.\n    :return: True if all numbers are distinct, False otherwise.\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    for num in numbers:\n        if not isinstance(num, (int, float)):\n            raise TypeError(\"All elements in the list must be integers or floats.\")\n    \n    return len(numbers) == len(set(numbers))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4o28tmv_.py\", line 43, in <module>\n    check_code_style(test_distinct)\n  File \"/tmp/tmp4o28tmv_.py\", line 39, in check_code_style\n    assert result.total_errors == 0, \"Code does not conform to PEP 8 standards.\"\nAssertionError: Code does not conform to PEP 8 standards.", "passed": false}
{"task_id": 48, "requirement": "Code Standard", "completion": "def odd_bit_set_number(n: int) -> int:\n    \"\"\"\n    Sets all odd bits of the given number n.\n    \n    :param n: An integer whose odd bits are to be set.\n    :return: An integer with all odd bits set.\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    \n    # Create a mask with odd bits set\n    # For example, for a 32-bit integer, the mask would be 0b01010101010101010101010101010101\n    mask = 0b01010101010101010101010101010101\n    \n    # Apply the mask using bitwise OR operation\n    result = n | mask\n    \n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpw24oq3h6.py\", line 10, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "requirement": "Code Standard", "completion": "def specified_element(two_d_list, index=0):\n    \"\"\"\n    Extracts the specified element (default is the first) from each sublist in a 2D list.\n\n    :param two_d_list: A list of lists where each sublist contains elements.\n    :param index: The index of the element to be extracted from each sublist. Default is 0 (first element).\n    :return: A list containing the extracted elements.\n    \"\"\"\n    # Use list comprehension to extract the specified element from each sublist\n    extracted_elements = [sublist[index] for sublist in two_d_list if sublist]\n    \n    return extracted_elements\n\n# Example usage:\ntwo_d_list = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n    [10, 11, 12]\n]\n\n# Extracting the first element from each sublist\nprint(specified_element(two_d_list))  # Output: [1, 4, 7, 10]\n\n# Extracting the second element from each sublist\nprint(specified_element(two_d_list, index=1))  # Output: [2, 5, 8, 11]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_osaxfwx.py\", line 20, in <module>\n    try: specified_element([[1, 2], [3, 4]], 3)\n  File \"/tmp/tmp_osaxfwx.py\", line 3, in specified_element\n    extracted_elements = [sublist[index] for sublist in two_d_list if sublist]\n  File \"/tmp/tmp_osaxfwx.py\", line 3, in <listcomp>\n    extracted_elements = [sublist[index] for sublist in two_d_list if sublist]\nIndexError: list index out of range\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmp_osaxfwx.py\", line 21, in <module>\n    except IndexError as e: assert str(e) == 'Index out of range for sublist'\nAssertionError", "passed": false}
{"task_id": 51, "requirement": "Code Standard", "completion": "def check_equilateral(a: float, b: float, c: float) -> None:\n    \"\"\"\n    Check if a triangle with given side lengths is equilateral.\n\n    Parameters:\n    a (float): The length of the first side.\n    b (float): The length of the second side.\n    c (float): The length of the third side.\n\n    Returns:\n    None: Prints whether the triangle is equilateral or not.\n    \"\"\"\n    if a <= 0 or b <= 0 or c <= 0:\n        raise ValueError(\"All side lengths must be positive integers.\")\n    \n    if a == b == c:\n        print(\"The triangle is equilateral.\")\n    else:\n        print(\"The triangle is not equilateral.\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1rmpup2q.py\", line 8, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "requirement": "Code Standard", "completion": "def parallelogram_area(base: float, height: float) -> float:\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram.\n    \"\"\"\n    return base * height\n\n# Example usage:\nbase = 5.0  # Example base length\nheight = 3.0  # Example height\narea = parallelogram_area(base, height)\nprint(f\"The area of the parallelogram with base {base} and height {height} is {area}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmprvs99lnr.py\", line 17, in <module>\n    assert False, 'Expected TypeError'\nAssertionError: Expected TypeError", "passed": false}
{"task_id": 53, "requirement": "Code Standard", "completion": "def check_equality(s: str) -> str:\n    \"\"\"\n    Check if the first and last characters of a given string are equal.\n\n    Args:\n        s (str): The input string to be checked.\n\n    Returns:\n        str: 'Equal' if the first and last characters are the same, 'Not Equal' otherwise.\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError('Input must be a string')\n    \n    if len(s) < 2:\n        return 'Equal'\n    \n    if s[0] == s[-1]:\n        return 'Equal'\n    else:\n        return 'Not Equal'\n\n# Example usage:\ntest_string = \"radar\"\nresult = check_equality(test_string)\nprint(f\"The first and last characters of '{test_string}' are equal: {result}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8351agvp.py\", line 28, in <module>\n    assert cc_visit(inspect.getsource(check_equality))[0].complexity <=3\nAssertionError", "passed": false}
{"task_id": 54, "requirement": "Code Standard", "completion": "def counting_sort(arr: list) -> list:\n    \"\"\"\n    Sorts an array of non-negative integers using the counting sort algorithm.\n    \n    :param arr: List of non-negative integers to be sorted.\n    :return: Sorted list of integers.\n    \"\"\"\n    if not isinstance(arr, list):\n        raise TypeError('Input must be a list.')\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError('All elements in the list must be integers.')\n\n    if not arr:\n        return []\n\n    # Find the maximum value in the array\n    max_value = max(arr)\n\n    # Initialize count array with zeros\n    count = [0] * (max_value + 1)\n\n    # Count each element\n    for num in arr:\n        count[num] += 1\n\n    # Reconstruct the sorted array\n    sorted_arr = []\n    for i, cnt in enumerate(count):\n        sorted_arr.extend([i] * cnt)\n\n    return sorted_arr\n\n# Example usage:\nif __name__ == \"__main__\":\n    unsorted_array = [4, 2, 2, 8, 3, 3, 1]\n    try:\n        sorted_array = counting_sort(unsorted_array)\n        print(\"Sorted Array:\", sorted_array)\n    except TypeError as e:\n        print(e)\n", "result": "passed", "passed": true}
{"task_id": 55, "requirement": "Code Standard", "completion": "def tn_gp(a: float, r: float, n: int) -> float:\n    \"\"\"\n    Calculate the n-th term of a geometric series.\n\n    Parameters:\n    a (float): The first term of the geometric series.\n    r (float): The common ratio of the geometric series.\n    n (int): The term number to find.\n\n    Returns:\n    float: The n-th term of the geometric series.\n    \"\"\"\n    # Ensure n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError('Term number must be greater than 0')\n    \n    # Handle the edge case where the common ratio is zero\n    if r == 0:\n        return 0 if n > 1 else a\n    \n    # Calculate the n-th term\n    a_n = a * (r ** (n - 1))\n    return a_n\n\n# Example usage:\na = 3  # First term\nr = 2  # Common ratio\nn = 5  # Term number to find\n\nprint(f'The {n}-th term of the geometric series is: {tn_gp(a, r, n)}')\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpf99rksy4.py\", line 16, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "requirement": "Code Standard", "completion": "def check(n: int) -> bool:\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer.')\n    \n    # Convert the number to a string to easily reverse it\n    num_str = str(n)\n    \n    # Reverse the string representation of the number\n    reversed_num_str = num_str[::-1]\n    \n    # Convert the reversed string back to an integer\n    reversed_number = int(reversed_num_str)\n    \n    # Calculate twice the reversed number\n    twice_reversed = 2 * reversed_number\n    \n    # Check if the result is one more than the original number\n    return twice_reversed == n + 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpcgwuktv9.py\", line 24, in <module>\n    assert check(1) == False\nAssertionError", "passed": false}
{"task_id": 57, "requirement": "Code Standard", "completion": "def find_max_num(digits: list[int]) -> int:\n    \"\"\"\n    Finds the largest number that can be formed from the given list of digits.\n\n    :param digits: A list of integers (digits).\n    :return: An integer representing the largest number that can be formed.\n    \"\"\"\n    if not digits:\n        return 0\n    \n    if len(digits) < n:\n        raise ValueError('Number of digits exceeds the length of the list.')\n    \n    # Convert each digit to a string for easy concatenation\n    str_digits = [str(digit) for digit in digits]\n    \n    # Sort the digits in descending order\n    str_digits.sort(reverse=True)\n    \n    # Join the sorted digits to form the largest number\n    max_num_str = ''.join(str_digits)\n    \n    # Convert the string back to an integer\n    max_num = int(max_num_str)\n    \n    return max_num\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1w9utwfx.py\", line 15, in <module>\n    assert find_max_num([1,2,3],3) == 321\nTypeError: find_max_num() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 58, "requirement": "Code Standard", "completion": "def opposite_signs(a: int, b: int) -> bool:\n    \"\"\"\n    Check if two integers have opposite signs.\n\n    Parameters:\n    a (int): First integer.\n    b (int): Second integer.\n\n    Returns:\n    bool: True if the integers have opposite signs, False otherwise.\n    \"\"\"\n    # Get the sign bit of both numbers\n    # The sign bit is the MSB (most significant bit)\n    # For positive numbers, the sign bit is 0\n    # For negative numbers, the sign bit is 1\n    sign_a = a >> (a.bit_length() - 1)\n    sign_b = b >> (b.bit_length() - 1)\n\n    # If the sign bits are different, the numbers have opposite signs\n    return sign_a != sign_b\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpzyns9sn1.py\", line 14, in <module>\n    assert opposite_signs(0, 0) == False\n  File \"/tmp/tmpzyns9sn1.py\", line 6, in opposite_signs\n    sign_a = a >> (a.bit_length() - 1)\nValueError: negative shift count", "passed": false}
{"task_id": 59, "requirement": "Code Standard", "completion": "import math\n\ndef is_octagonal(n: int) -> bool:\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError('Input must be a positive integer.')\n    \n    # Coefficients for the quadratic equation 3n^2 - 2n - x = 0\n    a = 3\n    b = -2\n    c = -n\n    \n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is non-negative and a perfect square\n    if discriminant >= 0:\n        sqrt_discriminant = math.isqrt(discriminant)\n        if sqrt_discriminant * sqrt_discriminant == discriminant:\n            # Calculate the potential n values\n            n1 = (-b + sqrt_discriminant) / (2*a)\n            n2 = (-b - sqrt_discriminant) / (2*a)\n            \n            # Check if either n1 or n2 is a positive integer\n            if n1 > 0 and n1.is_integer():\n                return True\n            if n2 > 0 and n2.is_integer():\n                return True\n    \n    return False\n\n# Example usage:\nprint(is_octagonal(1))   # True, 1 is the first octagonal number\nprint(is_octagonal(8))   # True, 8 is the second octagonal number\nprint(is_octagonal(15))  # True, 15 is the third octagonal number\nprint(is_octagonal(22))  # False, 22 is not an octagonal number\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpc9je6gys.py\", line 29, in <module>\n    assert is_octagonal(5) == 65\nAssertionError", "passed": false}
{"task_id": 60, "requirement": "Code Standard", "completion": "def max_len_sub(arr: list[int]) -> int:\n    if not isinstance(arr, list) or not all(isinstance(x, int) for x in arr):\n        raise TypeError('Input must be a list of integers.')\n    \n    if not arr:\n        return 0\n    \n    # Dictionary to store the length of the longest subsequence ending with a particular element\n    dp = {}\n    \n    # Iterate through the array\n    for num in arr:\n        # The length of the subsequence ending with `num` can be derived from the lengths of subsequences\n        # ending with `num-1` or `num+1`, whichever is available in the dictionary.\n        dp[num] = 1 + max(dp.get(num - 1, 0), dp.get(num + 1, 0))\n    \n    # Return the maximum value from the dictionary, which represents the length of the longest subsequence\n    return max(dp.values())\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpexl9d378.py\", line 15, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}

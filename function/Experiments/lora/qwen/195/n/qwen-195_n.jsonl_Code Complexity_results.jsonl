{"task_id": 11, "requirement": "Code Complexity", "completion": "def remove_occ(s: str, char: str) -> str:\n    \"\"\"\n    Removes the first and last occurrences of a specified character from the string.\n\n    Parameters:\n    s (str): The input string.\n    char (str): The character to be removed.\n\n    Returns:\n    str: The modified string with the first and last occurrences of the specified character removed.\n    \"\"\"\n    if len(char) != 1:\n        raise ValueError('Second parameter must be a single character.')\n\n    try:\n        first_index = s.index(char)\n    except ValueError:\n        return s\n\n    try:\n        last_index = s.rindex(char)\n    except ValueError:\n        return s\n\n    if first_index == last_index:\n        return s[:first_index] + s[first_index + 1:]\n\n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwd1nd_7j.py\", line 21, in <module>\n    assert remove_occ.__annotations__ == {'s': str, 'ch': str, 'return': str}\nAssertionError", "passed": false}
{"task_id": 14, "requirement": "Code Complexity", "completion": "def find_volume(base_area: float, height: float, length: float) -> float:\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base_area (float): The area of the triangular base.\n    height (float): The height (or length) of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    if not all(isinstance(x, (int, float)) and x > 0 for x in [base_area, height, length]):\n        raise ValueError('All dimensions must be positive numbers.')\n    \n    # Calculate the volume of the prism\n    volume = base_area * height\n    \n    return volume\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1w0np50v.py\", line 7, in <module>\n    assert find_volume(10,8,6) == 240\nAssertionError", "passed": false}
{"task_id": 15, "requirement": "Code Complexity", "completion": "def split_lowerstring(text: str) -> list:\n    \"\"\"\n    Splits the given string at lowercase letters.\n    \n    Parameters:\n    text (str): The input string to be split.\n    \n    Returns:\n    list: A list of substrings split at lowercase letters.\n    \"\"\"\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string.\")\n    \n    result = []\n    current_segment = \"\"\n    \n    for char in text:\n        if char.islower():\n            if current_segment:\n                result.append(current_segment)\n            current_segment = char\n        else:\n            current_segment += char\n    \n    if current_segment:\n        result.append(current_segment)\n    \n    return result\n", "result": "failed: File \"/tmp/tmpqt9eqw5r.py\", line 20\n    try: split_lowerstring(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 16, "requirement": "Code Complexity", "completion": "import re\n\ndef text_lowercase_underscore(text: str) -> str:\n    \"\"\"\n    This function checks if there are sequences of lowercase letters joined with an underscore in the given text.\n    \n    Args:\n    text (str): The input string to search within.\n    \n    Returns:\n    str: 'Found a match!' if at least one sequence is found, otherwise 'Not matched!'.\n    \"\"\"\n    if not isinstance(text, str):\n        raise TypeError('Input must be a string.')\n    \n    # Regular expression pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    \n    # Check if there is at least one match\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkx4uvlnh.py\", line 26, in <module>\n    assert cc_visit(inspect.getsource(text_lowercase_underscore))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 17, "requirement": "Code Complexity", "completion": "def square_perimeter(side_length: int) -> int:\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Parameters:\n    side_length (int): The length of one side of the square.\n\n    Returns:\n    int: The perimeter of the square.\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length must be a non-negative integer.\")\n    \n    return 4 * side_length\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxlhqsq64.py\", line 23, in <module>\n    assert square_perimeter.__annotations__ == {'a': int, 'return': int}\nAssertionError", "passed": false}
{"task_id": 20, "requirement": "Code Complexity", "completion": "def is_woodall(x: int) -> bool:\n    \"\"\"\n    Check if the given number is a Woodall number.\n    \n    Args:\n    x (int): The number to check.\n    \n    Returns:\n    bool: True if the number is a Woodall number, False otherwise.\n    \"\"\"\n    if not isinstance(x, int):\n        raise TypeError('Input must be an integer.')\n    \n    n = 1\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number == x:\n            return True\n        elif woodall_number > x:\n            return False\n        n += 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjz49p51u.py\", line 29, in <module>\n    assert cc_visit(inspect.getsource(is_woodall))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 21, "requirement": "Code Complexity", "completion": "def multiples_of_num(n: int, m: int) -> list:\n    \"\"\"\n    Generates a list of the first m multiples of n.\n\n    Parameters:\n    n (int): The base number.\n    m (int): The number of multiples to generate.\n\n    Returns:\n    list: A list containing the first m multiples of n.\n    \"\"\"\n    return [i * n for i in range(1, m + 1)]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppvgs0cet.py\", line 3, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 24, "requirement": "Code Complexity", "completion": "def binary_to_decimal(binary_str: str) -> int:\n    \"\"\"\n    Convert a binary number (given as a string) to its decimal equivalent.\n    \n    :param binary_str: A string representing a binary number.\n    :return: An integer representing the decimal equivalent of the binary number.\n    \"\"\"\n    decimal_value = 0\n    length = len(binary_str)\n    \n    for i in range(length):\n        if binary_str[length - 1 - i] == '1':\n            decimal_value += 2 ** i\n    \n    return decimal_value\n", "result": "failed: File \"/tmp/tmp5725ixzu.py\", line 11\n    try: binary_to_decimal('102'); assert False, 'Expected ValueError' except ValueError as e: assert str(e) == 'Invalid binary number'\n                                                                       ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 32, "requirement": "Code Complexity", "completion": "import math\n\ndef max_prime_factors(n: int) -> int:\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError('Input must be a positive integer')\n    \n    largest_factor = -1\n    \n    # Remove all factors of 2\n    while n % 2 == 0:\n        largest_factor = 2\n        n //= 2\n    \n    # Check for odd factors\n    factor = 3\n    while factor <= math.isqrt(n):\n        while n % factor == 0:\n            largest_factor = factor\n            n //= factor\n        factor += 2\n    \n    # If n is a prime number greater than 2\n    if n > 2:\n        largest_factor = n\n    \n    return largest_factor\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpoij79rcs.py\", line 37, in <module>\n    assert cc_visit(inspect.getsource(max_prime_factors))[0].complexity <= 5\nAssertionError", "passed": false}
{"task_id": 33, "requirement": "Code Complexity", "completion": "def decimal_to_binary(decimal_number: int) -> str:\n    \"\"\"\n    Convert a decimal number to its binary representation.\n\n    Parameters:\n    decimal_number (int): A non-negative integer to be converted to binary.\n\n    Returns:\n    str: The binary representation of the decimal number.\n    \"\"\"\n    if not isinstance(decimal_number, int) or decimal_number < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    if decimal_number == 0:\n        return \"0\"\n    \n    binary_number = []\n    while decimal_number > 0:\n        binary_number.append(str(decimal_number % 2))\n        decimal_number //= 2\n    \n    return ''.join(reversed(binary_number))\n\n# Example usage:\nprint(decimal_to_binary(10))  # Output: \"1010\"\nprint(decimal_to_binary(255)) # Output: \"11111111\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwsjzt4zy.py\", line 14, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 35, "requirement": "Code Complexity", "completion": "def find_rect_num(n: int) -> int:\n    \"\"\"\n    Find the n-th rectangular number.\n\n    Parameters:\n    n (int): The position in the sequence of rectangular numbers.\n\n    Returns:\n    int: The n-th rectangular number.\n\n    Raises:\n    ValueError: If the input is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError('Input must be a positive integer.')\n    \n    return n * (n + 1)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkmgt_snx.py\", line 16, in <module>\n    assert cc_visit(inspect.getsource(find_rect_num))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 36, "requirement": "Code Complexity", "completion": "def find_nth_digit(numerator: int, denominator: int, n: int) -> int:\n    \"\"\"\n    Find the nth digit in the decimal representation of the division result of two given numbers.\n\n    Parameters:\n    numerator (int): The numerator of the fraction.\n    denominator (int): The denominator of the fraction.\n    n (int): The position of the digit to find (1-based index).\n\n    Returns:\n    int: The nth digit in the decimal representation of the division result.\n    \"\"\"\n    if denominator == 0:\n        raise ValueError('Denominator cannot be zero')\n    \n    # Perform the division\n    division_result = numerator / denominator\n    \n    # Convert the result to a string to easily access individual digits\n    division_str = str(division_result)\n    \n    # Check if the result has a decimal part\n    if '.' not in division_str:\n        return -1  # No decimal part, so no nth digit\n    \n    # Get the decimal part and remove the leading '.'\n    decimal_part = division_str.split('.')[1]\n    \n    # Ensure n is within bounds\n    if n > len(decimal_part):\n        return -1  # Out of bounds, so no nth digit\n    \n    # Return the nth digit\n    return int(decimal_part[n - 1])\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphe98_7f4.py\", line 26, in <module>\n    assert find_nth_digit.__annotations__ == {'p': int, 'q': int, 'N': int, 'return': int}\nAssertionError", "passed": false}
{"task_id": 38, "requirement": "Code Complexity", "completion": "def div_even_odd(numbers: list) -> float:\n    if not isinstance(numbers, list) or not all(isinstance(x, int) for x in numbers):\n        raise TypeError('Input must be a list of integers.')\n    \n    first_even = next((num for num in numbers if num % 2 == 0), None)\n    first_odd = next((num for num in numbers if num % 2 != 0), None)\n    \n    if first_even is None or first_odd is None:\n        raise ValueError('List must contain at least one even and one odd number.')\n    \n    return first_even / first_odd\n", "result": "failed: File \"/tmp/tmpxxvcs9bc.py\", line 13\n    try: div_even_odd([2, 4, 6]); assert False; except ValueError as e: assert str(e) == 'List must contain at least one even and one odd number.'\n                                                ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 40, "requirement": "Code Complexity", "completion": "from collections import Counter\n\ndef freq_element(nums: list[list[int]]) -> dict[int, int]:\n    if not isinstance(nums, list) or not all(isinstance(sublist, list) for sublist in nums):\n        raise TypeError('Input must be a list of lists.')\n    \n    if not nums:\n        return {}\n    \n    # Flatten the list of lists into a single list\n    flat_list = [item for sublist in nums for item in sublist]\n    \n    # Use Counter to count the frequency of each element\n    frequency_counter = Counter(flat_list)\n    \n    return dict(frequency_counter)\n\n# Example usage:\nnested_lists = [[1, 2, 3], [4, 5, 6], [1, 2, 7], [8, 9, 10]]\nresult = freq_element(nested_lists)\nprint(result)  # Output: {1: 2, 2: 2, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1}\n", "result": "failed: File \"/tmp/tmp1qxficg1.py\", line 19\n    try: freq_element('not a list'); assert False; except TypeError: assert True\n                                                   ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 42, "requirement": "Code Complexity", "completion": "from collections import Counter\nfrom typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    if not isinstance(arr, list):\n        raise TypeError('Input must be a list.')\n    \n    if not arr:\n        return 0\n    \n    # Use Counter to get the frequency of each element\n    element_count = Counter(arr)\n    \n    # Sum up the elements that appear more than once\n    sum_of_repeated_elements = sum(element * count for element, count in element_count.items() if count > 1)\n    \n    return sum_of_repeated_elements\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpv9n5h5fe.py\", line 13, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Code Complexity", "completion": "import re\n\ndef text_match(text: str) -> bool:\n    if not isinstance(text, str):\n        raise TypeError('Input must be a string.')\n    if not text:\n        return False\n    pattern = r'^[a-z]+_[a-z]+$'\n    return bool(re.match(pattern, text))\n\n# Example usage:\nprint(text_match(\"hello_world\"))  # Should return True\nprint(text_match(\"Hello_World\"))  # Should return False because it contains uppercase letters\nprint(text_match(\"hello_world_123\"))  # Should return False because it contains digits\nprint(text_match(\"_hello_world\"))  # Should return False because it starts with an underscore\nprint(text_match(\"hello_world_\"))  # Should return False because it ends with an underscore\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqwwa2n31.py\", line 15, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 45, "requirement": "Code Complexity", "completion": "import math\nfrom functools import reduce\n\ndef get_gcd(numbers: list[int]) -> int:\n    if not numbers:\n        raise ValueError('Input list cannot be empty.')\n    \n    return reduce(math.gcd, numbers)\n\n# Example usage:\narr = [24, 36, 48]\nprint(get_gcd(arr))  # Output should be 12\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7q5uhtm7.py\", line 15, in <module>\n    assert get_gcd.__annotations__ == {'numbers': list, 'return': int}\nAssertionError", "passed": false}
{"task_id": 47, "requirement": "Code Complexity", "completion": "def compute_last_digit(a: int, b: int) -> int:\n    if a > b:\n        raise ValueError('a should not be greater than b')\n    if a == b:\n        return 1\n    \n    def last_digit_of_factorial(n: int) -> int:\n        if n == 0 or n == 1:\n            return 1\n        last_digit = 1\n        for i in range(2, n + 1):\n            last_digit = (last_digit * (i % 10)) % 10\n        return last_digit\n    \n    last_digit_a = last_digit_of_factorial(a)\n    last_digit_b = last_digit_of_factorial(b)\n    \n    if last_digit_a == 0:\n        return 0\n    else:\n        return (last_digit_b * pow(last_digit_a, -1, 10)) % 10\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp56azy6a3.py\", line 19, in <module>\n    assert compute_last_digit(2,4) == 2\n  File \"/tmp/tmp56azy6a3.py\", line 18, in compute_last_digit\n    return (last_digit_b * pow(last_digit_a, -1, 10)) % 10\nValueError: base is not invertible for the given modulus", "passed": false}
{"task_id": 51, "requirement": "Code Complexity", "completion": "def check_equilateral(a: int, b: int, c: int) -> None:\n    \"\"\"\n    Check if a triangle with given side lengths is equilateral.\n\n    Parameters:\n    a (int): The length of the first side.\n    b (int): The length of the second side.\n    c (int): The length of the third side.\n\n    Raises:\n    ValueError: If any of the inputs are non-positive integers.\n    \"\"\"\n    if not all(isinstance(x, int) and x > 0 for x in [a, b, c]):\n        raise ValueError(\"All side lengths must be positive integers.\")\n    \n    if a == b == c:\n        print(\"The triangle is equilateral.\")\n    else:\n        print(\"The triangle is not equilateral.\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp10j2o8pl.py\", line 8, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "requirement": "Code Complexity", "completion": "def parallelogram_area(base: float, height: float) -> float:\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram.\n    \"\"\"\n    return base * height\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpur_637a4.py\", line 12, in <module>\n    assert False, 'Expected TypeError'\nAssertionError: Expected TypeError", "passed": false}
{"task_id": 53, "requirement": "Code Complexity", "completion": "def check_equality(s: str) -> str:\n    \"\"\"\n    Check if the first and last characters of a given string are equal.\n\n    Args:\n    s (str): The input string to be checked.\n\n    Returns:\n    str: 'Equal' if the first and last characters are equal, 'Not Equal' otherwise.\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError('Input must be a string')\n    \n    # Combine the conditions into a single expression\n    return 'Equal' if s == s[::-1] else 'Not Equal'\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpv_ou07zb.py\", line 6, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 56, "requirement": "Code Complexity", "completion": "def check(n: int) -> bool:\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer.')\n    \n    # Handle edge case for single-digit numbers and zero\n    if n < 10:\n        return n == 0 or n == 1\n    \n    # Reverse the number\n    reversed_n = int(str(n)[::-1])\n    \n    # Calculate twice the reversed number\n    twice_reversed = 2 * reversed_n\n    \n    # Check if the result is one more than the original number\n    return twice_reversed == n + 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5_ufkex6.py\", line 22, in <module>\n    assert check(0) == False\nAssertionError", "passed": false}
{"task_id": 58, "requirement": "Code Complexity", "completion": "def opposite_signs(a: int, b: int) -> bool:\n    \"\"\"\n    Check if two integers have opposite signs.\n\n    Parameters:\n    a (int): First integer.\n    b (int): Second integer.\n\n    Returns:\n    bool: True if the integers have opposite signs, False otherwise.\n    \"\"\"\n    # Calculate the product of a and b\n    product = a * b\n    \n    # If the product is negative, a and b have opposite signs\n    return product < 0\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjigzz7o5.py\", line 17, in <module>\n    assert False, 'TypeError not raised for float input'\nAssertionError: TypeError not raised for float input", "passed": false}

{"task_id": 11, "completion": "def remove_occ(s, char):\n    first_index = s.find(char)\n    last_index = s.rfind(char)\n    \n    if first_index != -1 and last_index != -1:\n        s = s[:first_index] + s[first_index+1:]\n        s = s[:last_index] + s[last_index+1:]\n    \n    return s\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpzpqggj9e.py\", line 11, in <module>\n    assert remove_occ(\"hello\",\"l\") == \"heo\"\nAssertionError", "passed": false}
{"task_id": 12, "completion": "def sort_matrix(matrix):\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n    \n    # Sort the matrix based on the row sums\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    \n    return sorted_matrix\n", "result": "passed", "passed": true}
{"task_id": 13, "completion": "def count_common(word_dict):\n    # Get the maximum count\n    max_count = max(word_dict.values())\n    \n    # Get the words with the maximum count\n    common_words = [word for word, count in word_dict.items() if count == max_count]\n    \n    return common_words\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpe_memds7.py\", line 10, in <module>\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n  File \"/tmp/tmpe_memds7.py\", line 3, in count_common\n    max_count = max(word_dict.values())\nAttributeError: 'list' object has no attribute 'values'", "passed": false}
{"task_id": 14, "completion": "def find_volume(base_area, height_prism):\n    return base_area * height_prism\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkzbvc0da.py\", line 4, in <module>\n    assert find_volume(10,8,6) == 240\nTypeError: find_volume() takes 2 positional arguments but 3 were given", "passed": false}
{"task_id": 15, "completion": "def split_lowerstring(s):\n    return [word for word in s.split() if word[0].islower()]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqramalch.py\", line 4, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    # The regular expression pattern r'[a-z]+_[a-z]+' matches sequences of \n    # one or more lowercase letters followed by an underscore, followed by \n    # one or more lowercase letters.\n    pattern = r'[a-z]+_[a-z]+'\n    matches = re.findall(pattern, text)\n    return matches\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1d1e_a10.py\", line 11, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    \"\"\"\n    This function calculates the perimeter of a square.\n\n    :param side_length: length of one side of the square\n    :return: perimeter of the square\n    \"\"\"\n    return 4 * side_length\n", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(s1, s2):\n    return ''.join(c for c in s1 if c not in s2)\n", "result": "passed", "passed": true}
{"task_id": 19, "completion": "def test_duplicate(arr):\n    if len(arr) == len(set(arr)):\n        return False\n    else:\n        return True\n", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(n):\n    if n < 0:\n        return False\n    i = 0\n    while True:\n        woodall_num = i * 2**i - 1\n        if woodall_num == n:\n            return True\n        if woodall_num > n:\n            return False\n        i += 1\n", "result": "passed", "passed": true}
{"task_id": 21, "completion": "def multiples_of_num(n, m):\n    multiples = []\n    for i in range(1, m+1):\n        multiples.append(n*i)\n    return multiples\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpg1ca05vc.py\", line 7, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "completion": "def find_first_duplicate(arr):\n    num_dict = {}\n    for num in arr:\n        if num in num_dict:\n            return num\n        else:\n            num_dict[num] = 1\n    return None\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqgkee75o.py\", line 11, in <module>\n    assert find_first_duplicate([1, 2, 3, 4])==-1\nAssertionError", "passed": false}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists):\n    return max(sum(inner_list) for inner_list in list_of_lists)\n", "result": "passed", "passed": true}
{"task_id": 24, "completion": "def binary_to_decimal(binary):\n    binary = str(binary)\n    decimal, i = 0, 0\n    while binary != 0:\n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i)\n        binary = binary//10\n        i += 1\n    return decimal\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8t_4kqfr.py\", line 11, in <module>\n    assert binary_to_decimal(100) == 4\n  File \"/tmp/tmp8t_4kqfr.py\", line 5, in binary_to_decimal\n    dec = binary % 10\nTypeError: not all arguments converted during string formatting", "passed": false}
{"task_id": 25, "completion": "def find_product(arr):\n    # Create a dictionary to store the frequency of each element\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Initialize the product to 1\n    product = 1\n\n    # Multiply the product by each non-repeated element\n    for num, count in freq.items():\n        if count == 1:\n            product *= num\n\n    return product\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp63xp6wgf.py\", line 20, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(tuple_list, k):\n    for t in tuple_list:\n        if len(t) != k:\n            return False\n    return True\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5iy2a70t.py\", line 7, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "completion": "def remove(lst):\n    return [''.join([i for i in s if not i.isdigit()]) for s in lst]\n", "result": "passed", "passed": true}
{"task_id": 28, "completion": "import math\n\ndef binomial_coeff(n, k):\n    return math.factorial(n) / (math.factorial(k) * math.factorial(n - k))\n", "result": "passed", "passed": true}
{"task_id": 29, "completion": "def get_odd_occurrence(lst):\n    # Create a dictionary to count occurrences\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Find the element with an odd count\n    for num, count in count_dict.items():\n        if count % 2 != 0:\n            return num\n\n    # If no element is found, return None\n    return None\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpldbljo4c.py\", line 18, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if s[i] == s[j]:\n                count += 1\n    return count\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpn_45514o.py\", line 9, in <module>\n    assert count_substring_with_equal_ends(\"abc\") == 3\nAssertionError", "passed": false}
{"task_id": 31, "completion": "import heapq\n\ndef func(nums, k):\n    # Create a dictionary to store the frequency of each number\n    freq = {}\n    for num in nums:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Use a heap to find the k most frequent numbers\n    heap = []\n    for num, count in freq.items():\n        if len(heap) < k:\n            heapq.heappush(heap, (count, num))\n        else:\n            if count > heap[0][0]:\n                heapq.heapreplace(heap, (count, num))\n\n    # Return the k most frequent numbers\n    return [num for _, num in heap]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpifbb7_kc.py\", line 24, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n  File \"/tmp/tmpifbb7_kc.py\", line 7, in func\n    if num in freq:\nTypeError: unhashable type: 'list'", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(n):\n    return bin(n).replace(\"0b\", \"\")\n\n# Test the function\nprint(decimal_to_binary(10))  # Output: 1010\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplephmqtw.py\", line 7, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "completion": "def find_missing(arr):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] != mid + 1 and (mid == 0 or arr[mid - 1] == mid):\n            return mid + 1\n        elif arr[mid] == mid + 1:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0ne8i82x.py\", line 13, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "completion": "A rectangular number is a number that can be represented as the product of two positive integers. For example, 1, 2, 3, 6, 10, 12, 15, 21, 22, 30, 35, 46, 51, 55, 66, 77, 78, 91, 105, 110, 141, 153, 175, 190, 210, 231, 253, 276, 306, 341, 366, 420, 465, 510, 572, 630, 703, 770, 858, 946, 1051, 1165, 1300, 1455, 1626, 1820, 2040, 2295, 2580, 2907, 3270, 3685, 4158, 4701, 5326, 6045, 6870, 7821, 8915, 10176, 11630, 13308, 15240, 17463, 20016, 22945, 26295, 30120, 34482, 39453, 45114, 51555, 58875, 67184, 76601, 87260, 99306, 112900, 128219, 145457, 164826, 186558, 210906, 238145, 268575, 302519, 340326, 382370, 429050, 480801, 538095, 601440, 671381, 748500, 833420, 926805, 1029363, 1141846, 1265050, 1400016, 1547731, 1709331, 1886008, 2079018, 2290680, 2522489, 2776015, 3052914, 3354936, 3683935, 4041881, 4430870, 4853136, 5311060, 5807181, 6344196, 6924970, 7552540, 8229121, 8957115, 9739116, 10577916, 11476515, 12438135, 13466229, 14564494, 15736878, 16987596, 18321145, 19742315, 21256196, 22868190, 24584035, 26409810, 28351950, 30417259, 32612926, 34946540, 37426105, 40059960, 42856801, 4582570", "result": "failed: File \"/tmp/tmpopq90cgt.py\", line 1\n    56196, 22868190, 24584035, 26409810, 28351950, 30417259, 32612926, 34946540, 37426105, 40059960, 42856801, 4582570\n      ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 36, "completion": "def find_nth_digit(num1, num2, n):\n    # Convert the numbers to strings\n    num1_str = str(num1)\n    num2_str = str(num2)\n\n    # Concatenate the two numbers\n    fraction_str = num1_str + num2_str\n\n    # Check if n is a valid index\n    if n < len(fraction_str):\n        # Return the nth digit\n        return fraction_str[n]\n    else:\n        # Return None if n is out of range\n        return None\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpso351y__.py\", line 17, in <module>\n    assert find_nth_digit(1,2,1) == 5\nAssertionError", "passed": false}
{"task_id": 37, "completion": "def sort_mixed_list(lst):\n    int_lst = sorted([i for i in lst if isinstance(i, int)])\n    str_lst = sorted([i for i in lst if isinstance(i, str)])\n    return int_lst + str_lst\n\n# Test the function\nprint(sort_mixed_list([3, 'a', 1, 'b', 2, 'c', 'd', 4]))\n", "result": "passed", "passed": true}
{"task_id": 38, "completion": "def div_even_odd(lst):\n    even = None\n    odd = None\n    for i in lst:\n        if i % 2 == 0 and even is None:\n            even = i\n        elif i % 2 != 0 and odd is None:\n            odd = i\n        if even is not None and odd is not None:\n            break\n    if even is None or odd is None:\n        return \"List does not contain both even and odd numbers\"\n    else:\n        return odd / even\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpcyta_h0v.py\", line 16, in <module>\n    assert div_even_odd([1,3,5,7,4,1,6,8])==4\nAssertionError", "passed": false}
{"task_id": 39, "completion": "from collections import Counter\n\ndef rearrange_string(s):\n    # Count the frequency of each character\n    freq = Counter(s)\n    \n    # Check if the frequency of each character is even\n    for char, count in freq.items():\n        if count % 2 != 0:\n            return False\n    \n    return True\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7xbaxm_c.py\", line 14, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "completion": "from collections import Counter\n\ndef freq_element(lst):\n    # Flatten the list of lists\n    flat_list = [item for sublist in lst for item in sublist]\n    # Use Counter to get the frequency of each element\n    freq = Counter(flat_list)\n    return freq\n", "result": "passed", "passed": true}
{"task_id": 41, "completion": "def filter_evennumbers(numbers):\n    return list(filter(lambda x: x % 2 == 0, numbers))\n", "result": "passed", "passed": true}
{"task_id": 42, "completion": "def find_sum(arr):\n    # Create a dictionary to keep track of the frequency of each element\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Sum up the elements that appear more than once\n    sum = 0\n    for num, count in freq.items():\n        if count > 1:\n            sum += num * count\n\n    return sum\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7f8u1f5s.py\", line 18, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    pattern = '[_][a-z]+'\n    if re.search(pattern, text):\n        return re.search(pattern, text).group()\n    else:\n        return \"No match found\"\n\n# Test the function\nprint(text_match(\"test_string\"))  # Output: _string\nprint(text_match(\"testString\"))  # Output: No match found\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpiio_otof.py\", line 14, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 44, "completion": "def text_match_string(text, word):\n    if text.startswith(word):\n        return True\n    else:\n        return False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpedjjtpa3.py\", line 7, in <module>\n    assert text_match_string(\" python\")==('Not matched!')\nTypeError: text_match_string() missing 1 required positional argument: 'word'", "passed": false}
{"task_id": 45, "completion": "def get_gcd(arr):\n    def gcd(a, b):\n        while b != 0:\n            a, b = b, a % b\n        return a\n\n    num1 = arr[0]\n    num2 = arr[1]\n    result = gcd(num1, num2)\n\n    for i in range(2, len(arr)):\n        result = gcd(result, arr[i])\n\n    return result\n", "result": "passed", "passed": true}
{"task_id": 46, "completion": "def test_distinct(lst):\n    return len(lst) == len(set(lst))\n", "result": "passed", "passed": true}
{"task_id": 47, "completion": "def compute_last_digit(a, b):\n    # Calculate the factorial of a and b\n    factorial_a = 1\n    for i in range(1, a + 1):\n        factorial_a *= i\n\n    factorial_b = 1\n    for i in range(1, b + 1):\n        factorial_b *= i\n\n    # Find the last digit of the division\n    last_digit = (factorial_a % 10) * pow(factorial_b, -1, 10)\n    return last_digit % 10\n\n# Test the function\nprint(compute_last_digit(5, 7))  # Output: 5\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvtvggc_h.py\", line 16, in <module>\n    print(compute_last_digit(5, 7))  # Output: 5\n  File \"/tmp/tmpvtvggc_h.py\", line 12, in compute_last_digit\n    last_digit = (factorial_a % 10) * pow(factorial_b, -1, 10)\nValueError: base is not invertible for the given modulus", "passed": false}
{"task_id": 48, "completion": "def odd_bit_set_number(n):\n    # Convert the number to binary and reverse it\n    binary = bin(n)[2:][::-1]\n    # Iterate over the binary string\n    for i in range(len(binary)):\n        # If the bit is 0 and its position is odd, set it to 1\n        if i % 2 != 0 and binary[i] == '0':\n            binary = binary[:i] + '1' + binary[i+1:]\n    # Convert the binary string back to a number and return it\n    return int(binary[::-1], 2)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvpgdsftn.py\", line 12, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(two_dim_list, position=0):\n    return [row[position] for row in two_dim_list]\n", "result": "passed", "passed": true}
{"task_id": 50, "completion": "def min_length_list(lst):\n    return min(lst, key=lambda x: len(x))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpiykc3gaa.py\", line 4, in <module>\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nAssertionError", "passed": false}
{"task_id": 51, "completion": "def check_equilateral(a, b, c):\n    if a == b == c:\n        print(\"The triangle is equilateral.\")\n    else:\n        print(\"The triangle is not equilateral.\")\n\n# Test the function\ncheck_equilateral(3, 3, 3)  # This should print \"The triangle is equilateral.\"\ncheck_equilateral(3, 4, 5)  # This should print \"The triangle is not equilateral.\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdt2lpe80.py\", line 11, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    return base * height\n", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(input_string):\n    return input_string[0] == input_string[-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9sz4_j5p.py\", line 4, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 54, "completion": "def counting_sort(arr):\n    # Find the maximum element in the array\n    max_val = max(arr)\n    \n    # Initialize the count array with all zeros\n    count = [0] * (max_val + 1)\n    \n    # Store the count of each element in the count array\n    for num in arr:\n        count[num] += 1\n    \n    # Store the cumulative count\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    \n    # Build the output array\n    output = [0] * len(arr)\n    for num in arr:\n        output[count[num] - 1] = num\n        count[num] -= 1\n    \n    return output\n", "result": "passed", "passed": true}
{"task_id": 55, "completion": "def tn_gp(a, r, n):\n    \"\"\"\n    This function calculates the nth term of a geometric series.\n    a: first term of the series\n    r: common ratio of the series\n    n: term number to calculate\n    \"\"\"\n    return a * r ** (n - 1)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpuuqx76km.py\", line 10, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def check(n):\n    # Convert the number to a string, reverse it, and convert it back to an integer\n    reverse = int(str(n)[::-1])\n\n    # Check if the number is one less than twice its reverse\n    return n == 2 * reverse - 1\n", "result": "passed", "passed": true}
{"task_id": 57, "completion": "def find_max_num(digits):\n    return int(''.join(map(str, sorted(digits, reverse=True))))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpnmckq0jn.py\", line 4, in <module>\n    assert find_max_num([1,2,3],3) == 321\nTypeError: find_max_num() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 58, "completion": "def opposite_signs(num1, num2):\n    return (num1 > 0) != (num2 > 0)\n", "result": "passed", "passed": true}
{"task_id": 59, "completion": "def is_octagonal(n):\n    return n*(4*n - 3) // 2\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3xvatjzs.py\", line 4, in <module>\n    assert is_octagonal(5) == 65\nAssertionError", "passed": false}
{"task_id": 60, "completion": "def max_len_sub(arr):\n    n = len(arr)\n    dp = [1]*n\n    for i in range (1 , n):\n        for j in range(0 , i):\n            if arr[i] >= arr[j] and dp[i] < dp[j] + 1:\n                dp[i] = dp[j]+1\n    return max(dp)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpn2893a18.py\", line 10, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}

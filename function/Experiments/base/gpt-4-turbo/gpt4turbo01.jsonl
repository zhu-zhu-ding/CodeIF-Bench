{"task_id": 11, "completion": "Here's a Python function called `remove_occ` that removes the first and last occurrence of a given character from a string:\n\n```python\ndef remove_occ(s, char):\n    # Find the index of the first occurrence of the character\n    first_occurrence = s.find(char)\n    if first_occurrence == -1:\n        # If the character is not found, return the original string\n        return s\n    \n    # Remove the first occurrence of the character\n    s = s[:first_occurrence] + s[first_occurrence + 1:]\n    \n    # Find the index of the last occurrence of the character\n    last_occurrence = s.rfind(char)\n    if last_occurrence == -1:\n        # If the character is not found after removing the first occurrence, return the modified string\n        return s\n    \n    # Remove the last occurrence of the character\n    s = s[:last_occurrence] + s[last_occurrence + 1:]\n    \n    return s\n\n# Example usage:\nresult = remove_occ(\"hello world\", \"l\")\nprint(result)  # Output: \"heo world\"\n```\n\nThis function first finds the index of the first occurrence of the specified character using the `find` method. If the character is not found, it returns the original string. Otherwise, it removes the first occurrence. Then, it finds the index of the last occurrence of the character using the `rfind` method and removes it. If the character is not found after removing the first occurrence, it returns the modified string. Finally, it returns the string with both the first and last occurrences of the specified character removed."}
{"task_id": 12, "completion": "Here's a Python function that sorts a matrix in ascending order based on the sum of its rows:\n\n```python\ndef sort_matrix(matrix):\n    # Calculate the sum of each row and store it along with the row index in a list of tuples\n    row_sums_with_index = [(sum(row), index) for index, row in enumerate(matrix)]\n    \n    # Sort the list of tuples by the sum (first element of the tuple)\n    row_sums_with_index.sort()\n    \n    # Create a new matrix sorted by the row sums\n    sorted_matrix = [matrix[index] for _, index in row_sums_with_index]\n    \n    return sorted_matrix\n\n# Example usage:\nmatrix = [\n    [3, 2, 1],\n    [1, 2, 3],\n    [6, 5, 4]\n]\n\nsorted_matrix = sort_matrix(matrix)\nfor row in sorted_matrix:\n    print(row)\n```\n\nThis function first calculates the sum of each row and pairs it with the row's index. It then sorts these pairs based on the sum. Finally, it constructs a new matrix in the sorted order and returns it. The example usage demonstrates sorting a sample matrix."}
{"task_id": 13, "completion": "Here's a Python function called 'count_common' that takes a dictionary of words and their counts, and returns the most common words along with their counts:\n\n```python\ndef count_common(word_dict):\n    # Find the maximum count in the dictionary\n    max_count = max(word_dict.values())\n    \n    # Create a list to store the most common words\n    common_words = []\n    \n    # Iterate through the dictionary to find words with the maximum count\n    for word, count in word_dict.items():\n        if count == max_count:\n            common_words.append((word, count))\n    \n    return common_words\n\n# Example usage:\nword_counts = {'hello': 3, 'world': 5, 'python': 5, 'programming': 2}\nmost_common_words = count_common(word_counts)\nprint(most_common_words)  # Output: [('world', 5), ('python', 5)]\n```\n\nThis function first determines the highest count of occurrences in the dictionary. It then iterates through the dictionary to find all words that have this maximum count and collects them in a list along with their counts. Finally, it returns this list of tuples, where each tuple contains a word and its count."}
{"task_id": 14, "completion": "Here's a Python function that calculates the volume of a triangular prism:\n\n```python\ndef find_volume(base_area, height):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base_area (float): The area of the triangular base of the prism.\n    height (float): The height of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    # Volume of a triangular prism is given by the formula: V = base_area * height\n    volume = base_area * height\n    return volume\n```\n\nYou can use this function by providing the area of the triangular base and the height of the prism. For example:\n\n```python\nbase_area = 10.5  # Example base area\nheight = 20.0     # Example height\nvolume = find_volume(base_area, height)\nprint(\"The volume of the triangular prism is:\", volume)\n```\n\nThis will output the volume of the triangular prism based on the provided base area and height."}
{"task_id": 15, "completion": "Here's a Python function called `split_lowerstring` that splits a string at lowercase letters:\n\n```python\nimport re\n\ndef split_lowerstring(input_string):\n    # Use regular expression to split the string at lowercase letters\n    result = re.split(r'([a-z])', input_string)\n    \n    # Filter out empty strings from the result\n    result = [s for s in result if s]\n    \n    return result\n\n# Example usage\ninput_string = \"HelloWorld\"\nprint(split_lowerstring(input_string))  # Output: ['H', 'e', 'llo', 'W', 'o', 'rld']\n```\n\nThis function uses the `re.split()` method from the `re` module to split the input string at each lowercase letter. The regular expression `([a-z])` matches any lowercase letter and captures it as a separate group, which ensures that the lowercase letters are included in the resulting list. The list comprehension filters out any empty strings that might result from the split operation."}
{"task_id": 16, "completion": "Here's a Python function called 'text_lowercase_underscore' that uses regular expressions to find sequences of lowercase letters joined with an underscore:\n\n```python\nimport re\n\ndef text_lowercase_underscore(text):\n    pattern = r'\\b[a-z]+(?:_[a-z]+)+\\b'\n    matches = re.findall(pattern, text)\n    return matches\n\n# Example usage:\ntext = \"This is an example_text with multiple_words and some single_words.\"\nresult = text_lowercase_underscore(text)\nprint(result)  # Output: ['example_text', 'multiple_words', 'single_words']\n```\n\nThis function uses the regular expression pattern `\\b[a-z]+(?:_[a-z]+)+\\b` to match sequences of lowercase letters that may include underscores between them. The `\\b` ensures that the matches are whole words. The `[a-z]+` matches one or more lowercase letters, and `(?:_[a-z]+)+` matches one or more occurrences of an underscore followed by one or more lowercase letters. The `re.findall` function is used to find all matches in the given text."}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    return 4 * side_length"}
{"task_id": 18, "completion": "Here is a Python function that accomplishes the task:\n\n```python\ndef remove_dirty_chars(s1, s2):\n    # Create a set of characters from the second string\n    dirty_chars = set(s2)\n    \n    # Use a list comprehension to filter out characters from the first string that are in the dirty_chars set\n    filtered_chars = [char for char in s1 if char not in dirty_chars]\n    \n    # Join the filtered characters to form the cleaned string\n    cleaned_string = ''.join(filtered_chars)\n    \n    return cleaned_string\n\n# Example usage:\ns1 = \"hello world\"\ns2 = \"aeiou\"\nresult = remove_dirty_chars(s1, s2)\nprint(result)  # Output: \"hll wrld\"\n```\n\nThis function uses a set to store the characters from the second string for efficient lookup, and then filters the characters from the first string using a list comprehension. Finally, it joins the filtered characters to form the resulting string."}
{"task_id": 19, "completion": "Here's a Python function named `test_duplicate` that checks if a given array of integers contains any duplicate elements:\n\n```python\ndef test_duplicate(arr):\n    # Create an empty set to store unique elements\n    seen = set()\n    \n    # Iterate through each element in the array\n    for num in arr:\n        # Check if the element is already in the set\n        if num in seen:\n            # If it is, return True indicating a duplicate is found\n            return True\n        # Add the element to the set\n        seen.add(num)\n    \n    # If no duplicates are found, return False\n    return False\n\n# Example usage:\narr = [1, 2, 3, 4, 5, 1]\nprint(test_duplicate(arr))  # Output: True\n\narr = [1, 2, 3, 4, 5]\nprint(test_duplicate(arr))  # Output: False\n```\n\nThis function uses a set to keep track of the elements that have been seen so far. If an element is encountered that is already in the set, it means there is a duplicate, and the function returns `True`. If the loop completes without finding any duplicates, the function returns `False`."}
{"task_id": 20, "completion": "Certainly! A Woodall number is a number of the form n * 2^n - 1, where n is a positive integer. Here's a Python function to check if a given number is a Woodall number:\n\n```python\ndef is_woodall(num):\n    n = 1\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number == num:\n            return True\n        elif woodall_number > num:\n            return False\n        n += 1\n\n# Example usage:\nprint(is_woodall(7))  # True, because 7 is 2*2^2 - 1\nprint(is_woodall(15)) # False\nprint(is_woodall(31)) # True, because 31 is 3*2^3 - 1\n```\n\nThis function iteratively calculates Woodall numbers starting from n=1 and checks if the calculated Woodall number matches the input number. If it finds a match, it returns True. If it calculates a Woodall number greater than the input number without finding a match, it returns False, as further increases in n will only produce larger Woodall numbers."}
{"task_id": 21, "completion": "Here is a Python function that accomplishes the task:\n\n```python\ndef multiples_of_num(n, m):\n    # Create an empty list to store the multiples\n    multiples = []\n    \n    # Loop to find and append the first m multiples of n\n    for i in range(1, m+1):\n        multiples.append(n * i)\n    \n    return multiples\n```\n\nYou can use this function by calling it with two arguments: `n` (the number you want the multiples of) and `m` (the number of multiples you want). For example:\n\n```python\nprint(multiples_of_num(5, 10))\n```\n\nThis will output the first 10 multiples of 5:\n\n```\n[5, 10, 15, 20, 25, 30, 35, 40, 45, 50]\n```"}
{"task_id": 22, "completion": "Here's a Python function that accomplishes the task of finding the first duplicate element in a given array of integers:\n\n```python\ndef find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None  # Return None if no duplicate is found\n```\n\nThis function uses a set to keep track of the elements that have been seen so far. As it iterates through the array, it checks if the current element is already in the set. If it is, that means it's a duplicate and the function returns that element. If the loop completes without finding a duplicate, the function returns `None`."}
{"task_id": 23, "completion": "Here's a Python function named `maximum_sum` that takes a list of lists as input and returns the maximum sum of elements from any single list within the list of lists:\n\n```python\ndef maximum_sum(list_of_lists):\n    # Initialize a variable to store the maximum sum\n    max_sum = float('-inf')\n    \n    # Iterate through each list in the list of lists\n    for lst in list_of_lists:\n        # Calculate the sum of the current list\n        current_sum = sum(lst)\n        \n        # Update max_sum if the current sum is greater than the previous max_sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [4, 5, 6], [10, 11, -2]]\nprint(maximum_sum(list_of_lists))  # Output: 19\n```\n\nThis function works by iterating through each list in the list of lists, calculating the sum of each list, and updating the maximum sum found so far. It returns the maximum sum after checking all the lists."}
{"task_id": 24, "completion": "Here is a Python function that converts a binary number to its decimal equivalent:\n\n```python\ndef binary_to_decimal(binary):\n    # Initialize the decimal value to 0\n    decimal = 0\n    \n    # Reverse the binary string to process from least significant bit to most significant bit\n    binary = binary[::-1]\n    \n    # Iterate through each bit in the binary string\n    for i, bit in enumerate(binary):\n        # Convert the bit to an integer and multiply by 2 raised to the power of its position\n        decimal += int(bit) * (2 ** i)\n    \n    return decimal\n```\n\nYou can use this function by passing a binary string to it. For example:\n\n```python\nbinary_number = \"1101\"\ndecimal_number = binary_to_decimal(binary_number)\nprint(f\"The decimal equivalent of binary {binary_number} is {decimal_number}\")\n```\n\nThis will output:\n```\nThe decimal equivalent of binary 1101 is 13\n```"}
{"task_id": 25, "completion": "Here's a Python function called `find_product` that finds the product of non-repeated elements in a given array:\n\n```python\ndef find_product(arr):\n    # Create a dictionary to store the frequency of each element\n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    \n    # Calculate the product of non-repeated elements\n    product = 1\n    for num, count in frequency.items():\n        if count == 1:\n            product *= num\n    \n    return product\n\n# Example usage\narr = [1, 2, 3, 2, 4, 5, 5]\nresult = find_product(arr)\nprint(result)  # Output: 12 (1 * 3 * 4)\n```\n\nThis function first counts the frequency of each element in the array using a dictionary. Then, it calculates the product of elements that appear only once in the array. If there are no non-repeated elements, the function will return 1 as the product."}
{"task_id": 26, "completion": "Certainly! Below is a Python function named `check_k_elements` that takes a list of tuples and an integer `k` as input. It checks if each tuple in the list has exactly `k` elements.\n\n```python\ndef check_k_elements(tuple_list, k):\n    # Iterate through each tuple in the list\n    for tup in tuple_list:\n        # Check if the length of the tuple is not equal to k\n        if len(tup) != k:\n            return False\n    # If all tuples have k elements, return True\n    return True\n\n# Example usage:\nsample_tuples = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nk = 3\nresult = check_k_elements(sample_tuples, k)\nprint(\"All tuples have\", k, \"elements:\", result)  # Output: All tuples have 3 elements: True\n\nsample_tuples2 = [(1, 2), (3, 4, 5), (6,)]\nk2 = 2\nresult2 = check_k_elements(sample_tuples2, k2)\nprint(\"All tuples have\", k2, \"elements:\", result2)  # Output: All tuples have 2 elements: False\n```\n\nThis function iterates through each tuple in the list and checks if the length of the tuple matches the specified `k`. If any tuple does not match, it returns `False`. If all tuples match, it returns `True`."}
{"task_id": 27, "completion": "Here's a Python function named 'remove' that removes all digits from a list of strings:\n\n```python\ndef remove(list_of_strings):\n    # Create an empty list to store the modified strings\n    modified_strings = []\n    \n    # Iterate through each string in the list\n    for string in list_of_strings:\n        # Use a list comprehension to filter out digits from the string\n        filtered_string = ''.join([char for char in string if not char.isdigit()])\n        # Append the filtered string to the modified_strings list\n        modified_strings.append(filtered_string)\n    \n    # Return the list of modified strings\n    return modified_strings\n```\n\nYou can use this function by passing a list of strings that may contain digits, and it will return a new list with all digits removed from each string. Here's an example of how to use the function:\n\n```python\ninput_strings = [\"hello123\", \"world456\", \"python789\"]\noutput_strings = remove(input_strings)\nprint(output_strings)  # Output: ['hello', 'world', 'python']\n```"}
{"task_id": 28, "completion": "Here's a Python function called `binomial_coeff` that calculates the binomial coefficient using the formula:\n\n\\[ C(n, k) = \\frac{n!}{k!(n-k)!} \\]\n\nwhere \\( n \\) is the total number of items, \\( k \\) is the number of items to choose, and \\( ! \\) denotes factorial.\n\n```python\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef binomial_coeff(n, k):\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    k = min(k, n - k)  # Take advantage of symmetry\n    c = 1\n    for i in range(k):\n        c = c * (n - i) // (i + 1)\n    return c\n\n# Example usage:\nn = 5\nk = 2\nprint(f\"Binomial Coefficient C({n}, {k}) is {binomial_coeff(n, k)}\")\n```\n\nThis function first checks if \\( k \\) is greater than \\( n \\) or if \\( k \\) is 0 or \\( n \\), in which cases it returns 0 or 1 respectively. It then calculates the binomial coefficient using an iterative approach to avoid calculating large factorials directly and to minimize the number of multiplications and divisions."}
{"task_id": 29, "completion": "Here is a Python function that finds the element occurring an odd number of times in a list:\n\n```python\ndef get_odd_occurrence(arr):\n    # Initialize result\n    result = 0\n    \n    # Traverse the array\n    for element in arr:\n        # XOR each element in the array\n        result = result ^ element\n    \n    return result\n\n# Example usage\narr = [1, 2, 3, 2, 3, 1, 3]\nprint(get_odd_occurrence(arr))  # Output: 3\n```\n\nThis function uses the XOR operator to find the element that occurs an odd number of times. The XOR of all elements gives us the element with an odd occurrence. This is because the XOR of two same numbers is 0 and the XOR of a number with 0 is the number itself. Thus, all paired occurrences get nullified and the odd occurrence remains."}
{"task_id": 30, "completion": "Here's a Python function that accomplishes the task of counting all substrings that start and end with the same character:\n\n```python\ndef count_substring_with_equal_ends(s):\n    \"\"\"\n    Count all substrings of the input string that start and end with the same character.\n\n    :param s: str - The input string\n    :return: int - The count of substrings with equal start and end characters\n    \"\"\"\n    count = 0\n    n = len(s)\n    \n    # Iterate over each character in the string\n    for i in range(n):\n        # Check substrings starting from the current character\n        for j in range(i, n):\n            # If the start and end characters of the substring are the same, increment the count\n            if s[i] == s[j]:\n                count += 1\n    \n    return count\n\n# Example usage:\ninput_string = \"abcab\"\nresult = count_substring_with_equal_ends(input_string)\nprint(f\"Number of substrings starting and ending with the same character: {result}\")\n```\n\nThis function uses a nested loop to iterate over all possible substrings of the input string `s`. For each substring defined by indices `i` and `j`, it checks if the first and last characters are the same. If they are, it increments the `count`. Finally, it returns the total count of such substrings."}
{"task_id": 31, "completion": "To solve this problem, we can use a dictionary to count the frequency of each integer across all lists, and then use a heap queue (or priority queue) to find the top k integers that occur most frequently. Here's how you can implement this in Python:\n\n```python\nimport heapq\nfrom collections import defaultdict\n\ndef func(lists, k):\n    # Create a dictionary to count the frequency of each integer\n    frequency = defaultdict(int)\n    \n    # Count the frequency of each integer in all lists\n    for lst in lists:\n        for num in lst:\n            frequency[num] += 1\n    \n    # Use a heap to find the top k integers with the highest frequency\n    # We use a min-heap, so we store negative frequencies to simulate a max-heap\n    heap = []\n    for num, freq in frequency.items():\n        heapq.heappush(heap, (-freq, num))\n        if len(heap) > k:\n            heapq.heappop(heap)\n    \n    # Extract the top k integers from the heap\n    top_k = []\n    while heap:\n        freq, num = heapq.heappop(heap)\n        top_k.append(num)\n    \n    # Since we want the result in descending order of frequency, reverse the list\n    return top_k[::-1]\n\n# Example usage:\nlists = [[1, 3, 5], [1, 2, 4], [1, 2, 3]]\nk = 2\nprint(func(lists, k))  # Output: [1, 2]\n```\n\nThis function first counts the frequency of each integer using a dictionary. It then uses a min-heap to keep track of the top k integers with the highest frequencies. By pushing negative frequencies onto the heap, we simulate the behavior of a max-heap. Finally, it extracts the top k integers from the heap, reverses the list to ensure the integers are in descending order of frequency, and returns the result."}
{"task_id": 32, "completion": "Here's a Python function called `max_prime_factors` that finds the largest prime factor of a given number:\n\n```python\ndef max_prime_factors(n):\n    # Initialize the maximum prime factor variable\n    max_prime = -1\n    \n    # Check for number of 2s that divide n\n    while n % 2 == 0:\n        max_prime = 2\n        n >>= 1  # equivalent to n //= 2\n    \n    # n must be odd at this point, thus skip even numbers and iterate only for odd integers\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n // i\n    \n    # This condition is to check if n is a prime number greater than 2\n    if n > 2:\n        max_prime = n\n    \n    return int(max_prime)\n\n# Example usage\nnumber = 315\nprint(f\"The largest prime factor of {number} is {max_prime_factors(number)}\")\n```\n\nThis function first removes all factors of 2 from the number to handle even numbers. Then, it iterates through all odd numbers up to the square root of the remaining number to find other prime factors. If the remaining number after removing all factors is greater than 2, then it itself is a prime number and is considered the largest prime factor."}
{"task_id": 33, "completion": "Here's a Python function called `decimal_to_binary` that converts a decimal number to a binary number:\n\n```python\ndef decimal_to_binary(decimal):\n    if decimal == 0:\n        return \"0\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return binary\n```\n\nYou can use this function by passing a decimal number as an argument, and it will return the binary representation of that number as a string. For example:\n\n```python\nprint(decimal_to_binary(10))  # Output: 1010\nprint(decimal_to_binary(255)) # Output: 11111111\nprint(decimal_to_binary(0))   # Output: 0\n```"}
{"task_id": 34, "completion": "Here's a Python function called `find_missing` that finds the missing number in a sorted array:\n\n```python\ndef find_missing(arr):\n    # Initialize left and right pointers\n    left, right = 0, len(arr) - 1\n    \n    # Binary search for the missing number\n    while left <= right:\n        mid = (left + right) // 2\n        \n        # Check if the missing number is in the left half\n        if arr[mid] != mid + arr[0]:\n            if mid == 0 or arr[mid - 1] == mid - 1 + arr[0]:\n                return mid + arr[0]\n            right = mid - 1\n        else:\n            left = mid + 1\n    \n    # If no missing number found, return -1\n    return -1\n\n# Example usage:\narr = [1, 2, 3, 4, 6, 7, 8]\nmissing_number = find_missing(arr)\nprint(\"The missing number is:\", missing_number)\n```\n\nThis function uses a binary search approach to efficiently find the missing number in a sorted array. It checks the middle element of the current search range to determine if the missing number is in the left or right half of the array, and adjusts the search range accordingly. If it finds the missing number, it returns it; otherwise, it returns -1 if no missing number is found."}
{"task_id": 35, "completion": "Certainly! A rectangular number, also known as a pronic number, is a number that is the product of two consecutive integers, i.e., n * (n + 1). Here's a Python function to find the n-th rectangular number:\n\n```python\ndef find_rect_num(n):\n    if n < 0:\n        return \"Invalid input: n must be a non-negative integer\"\n    return n * (n + 1)\n\n# Example usage:\nn = 5\nresult = find_rect_num(n)\nprint(f\"The {n}-th rectangular number is: {result}\")\n```\n\nThis function takes an integer `n` and returns the n-th rectangular number by calculating `n * (n + 1)`. It also includes a check to ensure that `n` is non-negative, as negative integers do not correspond to valid rectangular numbers."}
{"task_id": 36, "completion": "Here's a Python function called `find_nth_digit` that takes three arguments: `numerator`, `denominator`, and `n`. It calculates the nth digit in the decimal representation of the fraction formed by `numerator` and `denominator`.\n\n```python\ndef find_nth_digit(numerator, denominator, n):\n    # Check if the denominator is zero\n    if denominator == 0:\n        raise ValueError(\"Denominator cannot be zero\")\n    \n    # Initialize the remainder\n    remainder = numerator % denominator\n    \n    # Loop to find the nth digit\n    for i in range(n):\n        # Multiply the remainder by 10\n        remainder *= 10\n        # Get the digit\n        digit = remainder // denominator\n        # Update the remainder\n        remainder = remainder % denominator\n    \n    return digit\n\n# Example usage:\nnumerator = 1\ndenominator = 7\nn = 5\nprint(f\"The {n}th digit in the decimal representation of {numerator}/{denominator} is {find_nth_digit(numerator, denominator, n)}\")\n```\n\nThis function works by repeatedly multiplying the remainder by 10 and then dividing by the denominator to get each successive digit in the decimal expansion. The remainder is updated in each iteration to continue the process. The function returns the nth digit after n iterations."}
{"task_id": 37, "completion": "Certainly! Below is a Python function called `sort_mixed_list` that sorts a mixed list containing both integers and strings. The function first separates the integers and strings into two different lists, sorts them individually, and then combines them back together.\n\n```python\ndef sort_mixed_list(mixed_list):\n    # Separate integers and strings into two different lists\n    int_list = [item for item in mixed_list if isinstance(item, int)]\n    str_list = [item for item in mixed_list if isinstance(item, str)]\n    \n    # Sort the integer list and string list\n    int_list.sort()\n    str_list.sort()\n    \n    # Combine the sorted lists\n    sorted_list = int_list + str_list\n    \n    return sorted_list\n\n# Example usage:\nmixed_list = [3, \"apple\", 1, \"banana\", 2, \"cherry\"]\nsorted_list = sort_mixed_list(mixed_list)\nprint(sorted_list)  # Output: [1, 2, 3, 'apple', 'banana', 'cherry']\n```\n\nThis function will handle any mixed list of integers and strings, sorting the integers in ascending numerical order and the strings in alphabetical order, and then concatenating the sorted lists with integers first followed by strings."}
{"task_id": 38, "completion": "Here's a Python function that accomplishes the task:\n\n```python\ndef div_even_odd(numbers):\n    even = None\n    odd = None\n    \n    # Loop through the list to find the first even and odd numbers\n    for num in numbers:\n        if num % 2 == 0 and even is None:\n            even = num\n        if num % 2 != 0 and odd is None:\n            odd = num\n        \n        # If both even and odd numbers are found, break the loop\n        if even is not None and odd is not None:\n            break\n    \n    # Check if both even and odd numbers were found\n    if even is None or odd is None:\n        return \"List must contain at least one even and one odd number.\"\n    \n    # Perform the division\n    return even / odd\n\n# Example usage:\nnumbers = [1, 3, 5, 8, 10]\nresult = div_even_odd(numbers)\nprint(result)  # Output: 8 / 1 = 8.0\n```\n\nThis function first initializes two variables, `even` and `odd`, to `None`. It then iterates through the list to find the first even and odd numbers. Once both numbers are found, it breaks out of the loop. If either an even or an odd number is not found in the list, it returns a message indicating that the list must contain at least one even and one odd number. If both numbers are found, it performs the division of the even number by the odd number and returns the result."}
{"task_id": 39, "completion": "Here's a Python function that checks if the letters of a given string can be rearranged so that no two adjacent characters are the same:\n\n```python\nfrom collections import Counter\nimport heapq\n\ndef rearrange_string(s):\n    # Count the frequency of each character\n    char_count = Counter(s)\n    # Create a max heap based on the frequency of characters\n    max_heap = [(-freq, char) for char, freq in char_count.items()]\n    heapq.heapify(max_heap)\n    \n    prev_char = None\n    prev_freq = 0\n    result = []\n    \n    while max_heap:\n        freq, char = heapq.heappop(max_heap)\n        # Append the current character to the result\n        result.append(char)\n        \n        # If there is a previous character with non-zero frequency, push it back to the heap\n        if prev_char and prev_freq < 0:\n            heapq.heappush(max_heap, (prev_freq, prev_char))\n        \n        # Update the previous character and its frequency\n        prev_char = char\n        prev_freq = freq + 1  # Decrease the frequency since we used one occurrence of this character\n    \n    # If the length of the result matches the length of the input string, it means we successfully rearranged it\n    if len(result) == len(s):\n        return ''.join(result)\n    else:\n        return \"Not possible to rearrange\"\n\n# Example usage:\nprint(rearrange_string(\"aab\"))\nprint(rearrange_string(\"aaab\"))\n```\n\nThis function uses a max heap to always pick the character with the highest remaining frequency that is not the same as the last used character. If it successfully rearranges the entire string, it returns the rearranged string; otherwise, it returns \"Not possible to rearrange\"."}
{"task_id": 40, "completion": "Certainly! Below is a Python function called `freq_element` that uses the `collections` module to find the frequency of elements in a given list of lists:\n\n```python\nfrom collections import Counter\n\ndef freq_element(list_of_lists):\n    # Flatten the list of lists into a single list\n    flat_list = [item for sublist in list_of_lists for item in sublist]\n    \n    # Use Counter to count the frequency of each element\n    frequency = Counter(flat_list)\n    \n    return frequency\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\nresult = freq_element(list_of_lists)\nprint(result)  # Output: Counter({3: 3, 2: 2, 4: 2, 1: 1, 5: 1})\n```\n\nThis function first flattens the list of lists into a single list using a list comprehension. Then, it uses the `Counter` class from the `collections` module to count the frequency of each element in the flattened list. The function returns a `Counter` object, which is a dictionary where keys are the elements and values are their respective counts."}
{"task_id": 41, "completion": "Here is a Python function called 'filter_evennumbers' that filters even numbers from a list using a lambda function:\n\n```python\ndef filter_evennumbers(numbers):\n    even_numbers = list(filter(lambda x: x % 2 == 0, numbers))\n    return even_numbers\n\n# Example usage:\nnumbers_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nresult = filter_evennumbers(numbers_list)\nprint(result)  # Output: [2, 4, 6, 8, 10]\n```\n\nThis function takes a list of numbers as input and uses the `filter()` function along with a lambda function to keep only the even numbers. The lambda function checks if a number `x` is even by verifying if `x % 2 == 0`. The result is a list of even numbers."}
{"task_id": 42, "completion": "Here's a Python function called `find_sum` that finds the sum of repeated elements in a given array:\n\n```python\ndef find_sum(arr):\n    # Create a dictionary to store the frequency of each element\n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    \n    # Calculate the sum of elements that appear more than once\n    sum_repeated = 0\n    for num, count in frequency.items():\n        if count > 1:\n            sum_repeated += num * count\n    \n    return sum_repeated\n\n# Example usage:\narr = [1, 2, 3, 2, 3, 4, 5, 3]\nresult = find_sum(arr)\nprint(\"Sum of repeated elements:\", result)  # Output: 13 (2*2 + 3*3)\n```\n\nThis function first counts the frequency of each element in the array using a dictionary. Then, it calculates the sum of elements that have a frequency greater than one, effectively summing up all repeated elements in the array."}
{"task_id": 43, "completion": "Sure! Here's a Python function that uses the `re` module to find sequences of lowercase letters joined with an underscore using regular expressions:\n\n```python\nimport re\n\ndef text_match(text):\n    pattern = r'\\b[a-z]+(?:_[a-z]+)+\\b'\n    matches = re.findall(pattern, text)\n    return matches\n\n# Example usage:\ntext = \"Here are some examples: first_example, second_example, another_one\"\nresult = text_match(text)\nprint(result)  # Output: ['first_example', 'second_example', 'another_one']\n```\n\nThis function defines a regex pattern that matches sequences of lowercase letters joined with underscores. The pattern `\\b[a-z]+(?:_[a-z]+)+\\b` ensures that the matched sequences are whole words (bounded by word boundaries `\\b`). The `[a-z]+` matches one or more lowercase letters, and `(?:_[a-z]+)+` matches one or more occurrences of an underscore followed by one or more lowercase letters. The `?:` inside the parentheses makes it a non-capturing group, which is used here just for grouping and not for capturing."}
{"task_id": 44, "completion": "Here is a Python function that matches a word at the beginning of a string using regular expressions:\n\n```python\nimport re\n\ndef text_match_string(text, word):\n    pattern = r'^' + re.escape(word) + r'\\b'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n\n# Example usage:\ntext = \"hello world\"\nword = \"hello\"\nresult = text_match_string(text, word)\nprint(result)  # Output: True\n\ntext = \"world hello\"\nresult = text_match_string(text, word)\nprint(result)  # Output: False\n```\n\nThis function takes two arguments, `text` and `word`. It constructs a regular expression pattern that matches the word at the beginning of the string (`^` denotes the start of the string, and `\\b` denotes a word boundary). The `re.escape` function is used to escape any special characters in the word. The function then uses `re.match` to check if the pattern matches the beginning of the text. If it does, the function returns `True`, otherwise it returns `False`."}
{"task_id": 45, "completion": "Here's a Python function called 'get_gcd' that calculates the greatest common divisor (GCD) of the elements in a given array using the Euclidean algorithm:\n\n```python\nfrom functools import reduce\nimport math\n\ndef get_gcd(arr):\n    def gcd(x, y):\n        while y != 0:\n            (x, y) = (y, x % y)\n        return x\n    \n    return reduce(gcd, arr)\n\n# Example usage:\narr = [24, 36, 48]\nresult = get_gcd(arr)\nprint(f\"The GCD of the array elements {arr} is {result}\")\n```\n\nThis function uses the `reduce` function from the `functools` module to apply the `gcd` function to all elements in the array. The `gcd` function itself is defined using the Euclidean algorithm, which repeatedly replaces the larger number by its remainder when divided by the smaller number until one of the numbers becomes zero. The last non-zero remainder is the GCD of the two numbers."}
{"task_id": 46, "completion": "Here's a Python function called `test_distinct` that checks if all the numbers in a list are distinct:\n\n```python\ndef test_distinct(numbers):\n    \"\"\"\n    Check if all numbers in the list are distinct.\n\n    Args:\n    numbers (list): A list of numbers.\n\n    Returns:\n    bool: True if all numbers are distinct, False otherwise.\n    \"\"\"\n    return len(numbers) == len(set(numbers))\n\n# Example usage:\nnumbers = [1, 2, 3, 4, 5]\nprint(test_distinct(numbers))  # Output: True\n\nnumbers = [1, 2, 3, 3, 4]\nprint(test_distinct(numbers))  # Output: False\n```\n\nThis function works by converting the list of numbers into a set, which automatically removes any duplicate values. If the length of the set is the same as the length of the original list, it means all numbers were distinct. Otherwise, there were duplicates in the list."}
{"task_id": 47, "completion": "Here's a Python function called `compute_last_digit` that calculates the last digit of the result when factorial of `a` divides factorial of `b`. The function assumes that `a` and `b` are non-negative integers and that `b` is greater than or equal to `a`.\n\n```python\ndef compute_last_digit(a, b):\n    if a > b:\n        return 0  # factorial(b) can never divide factorial(a) if a > b\n    \n    # Calculate factorial(b) // factorial(a)\n    result = 1\n    for i in range(a + 1, b + 1):\n        result *= i\n    \n    # Get the last digit\n    last_digit = result % 10\n    return last_digit\n\n# Example usage:\nprint(compute_last_digit(3, 5))  # Output: 2 (since 5! // 3! = 20 and last digit of 20 is 0)\nprint(compute_last_digit(4, 10)) # Output: 8 (since 10! // 4! = 151200 and last digit of 151200 is 0)\n```\n\nThis function works by multiplying the numbers from `a + 1` to `b` to compute `factorial(b) // factorial(a)`. It then finds the last digit of the result by taking the result modulo 10. Note that this function may not handle very large values of `a` and `b` efficiently due to the rapid growth of factorials."}
{"task_id": 48, "completion": "Here's a Python function that sets all odd bits of a given number:\n\n```python\ndef odd_bit_set_number(num):\n    # Initialize a mask with all odd bits set to 1\n    mask = 0xAAAAAAAA\n    \n    # Set all odd bits of the given number using bitwise OR operation\n    result = num | mask\n    \n    return result\n\n# Example usage\nnumber = 10  # Binary representation: 1010\nresult = odd_bit_set_number(number)\nprint(f\"Original number: {number}, Binary: {bin(number)}\")\nprint(f\"Number with odd bits set: {result}, Binary: {bin(result)}\")\n```\n\nThis function uses a mask where all odd bits are set to 1 (binary representation of `0xAAAAAAAA` is `10101010101010101010101010101010`). It then performs a bitwise OR operation between the input number and the mask. This operation sets all the odd bits of the input number to 1, while keeping the even bits unchanged. The function returns the modified number."}
{"task_id": 49, "completion": "Here's a Python function called `specified_element` that extracts every first or specified element from a given two-dimensional list:\n\n```python\ndef specified_element(matrix, index=0):\n    \"\"\"\n    Extracts the specified element from each sub-list in a two-dimensional list.\n    \n    :param matrix: A two-dimensional list (list of lists)\n    :param index: The index of the element to extract from each sub-list (default is 0)\n    :return: A list containing the extracted elements\n    \"\"\"\n    # Check if the matrix is empty\n    if not matrix:\n        return []\n    \n    # Initialize an empty list to store the extracted elements\n    extracted_elements = []\n    \n    # Iterate through each sub-list in the matrix\n    for sublist in matrix:\n        # Check if the sublist is long enough to have the specified index\n        if len(sublist) > index:\n            # Append the element at the specified index to the extracted_elements list\n            extracted_elements.append(sublist[index])\n        else:\n            # If the sublist is too short, append None or handle it as needed\n            extracted_elements.append(None)\n    \n    return extracted_elements\n\n# Example usage:\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(specified_element(matrix))  # Output: [1, 4, 7]\nprint(specified_element(matrix, 1))  # Output: [2, 5, 8]\nprint(specified_element(matrix, 2))  # Output: [3, 6, 9]\n```\n\nThis function takes a two-dimensional list `matrix` and an optional parameter `index` which defaults to 0. It extracts the element at the specified `index` from each sub-list in the matrix. If a sub-list is too short and does not have the specified index, the function appends `None` to the result list. You can modify this behavior based on your requirements."}
{"task_id": 50, "completion": "Here's a Python function called 'min_length_list' that uses a lambda function to find the list with the minimum length from a list of lists:\n\n```python\ndef min_length_list(list_of_lists):\n    if not list_of_lists:\n        return None\n    return min(list_of_lists, key=lambda x: len(x))\n\n# Example usage:\nlists = [[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]\nshortest_list = min_length_list(lists)\nprint(\"The list with the minimum length is:\", shortest_list)\n```\n\nThis function takes a list of lists as input and returns the list with the minimum length. If the input list is empty, it returns `None`. The `min` function is used with a key argument that is a lambda function `lambda x: len(x)`, which calculates the length of each list to determine the minimum."}
{"task_id": 51, "completion": "Here is a Python function that checks if a triangle is equilateral based on the lengths of its sides:\n\n```python\ndef check_equilateral(side1, side2, side3):\n    if side1 == side2 == side3:\n        print(\"The triangle is equilateral.\")\n    else:\n        print(\"The triangle is not equilateral.\")\n\n# Example usage:\ncheck_equilateral(5, 5, 5)  # Output: The triangle is equilateral.\ncheck_equilateral(3, 4, 5)  # Output: The triangle is not equilateral.\n```\n\nThis function takes three arguments, which represent the lengths of the sides of the triangle. It checks if all three sides are equal, and if they are, it prints that the triangle is equilateral. Otherwise, it prints that the triangle is not equilateral."}
{"task_id": 52, "completion": "Here is a Python function to calculate the area of a parallelogram:\n\n```python\ndef parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram.\n    \"\"\"\n    area = base * height\n    return area\n```\n\nYou can use this function by passing the base and height of the parallelogram as arguments. For example:\n\n```python\nbase = 5\nheight = 3\narea = parallelogram_area(base, height)\nprint(\"The area of the parallelogram is:\", area)\n```\n\nThis will output:\n\n```\nThe area of the parallelogram is: 15\n```"}
{"task_id": 53, "completion": "Here's a Python function called `check_equality` that checks whether the first and last characters of a given string are equal:\n\n```python\ndef check_equality(s):\n    if len(s) < 1:\n        return False\n    return s[0] == s[-1]\n\n# Example usage:\nresult = check_equality(\"hello\")\nprint(result)  # Output: False\n\nresult = check_equality(\"radar\")\nprint(result)  # Output: True\n```\n\nThis function first checks if the string is empty or not. If it's empty, it returns `False` since there are no characters to compare. If the string is not empty, it compares the first (`s[0]`) and last (`s[-1]`) characters of the string and returns `True` if they are equal, otherwise it returns `False`."}
{"task_id": 54, "completion": "Certainly! Here's a Python function that implements the counting sort algorithm:\n\n```python\ndef counting_sort(arr):\n    # Find the maximum element in the array\n    max_val = max(arr)\n    \n    # Initialize the count array with zeros\n    count = [0] * (max_val + 1)\n    \n    # Store the count of each element in the count array\n    for num in arr:\n        count[num] += 1\n    \n    # Modify the count array by adding the previous counts\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    \n    # Create an output array to store the sorted elements\n    output = [0] * len(arr)\n    \n    # Build the output array using the count array\n    for num in reversed(arr):\n        output[count[num] - 1] = num\n        count[num] -= 1\n    \n    # Copy the sorted elements back to the original array\n    for i in range(len(arr)):\n        arr[i] = output[i]\n\n    return arr\n\n# Example usage:\narr = [4, 2, 2, 8, 3, 3, 1]\nsorted_arr = counting_sort(arr)\nprint(sorted_arr)\n```\n\nThis function first finds the maximum value in the array to determine the size of the count array. It then counts the occurrences of each element and uses this information to place each element in its correct position in a new output array. Finally, it copies the sorted elements back to the original array. The function returns the sorted array."}
{"task_id": 55, "completion": "Sure! Here's a Python function that calculates the t-nth term of a geometric series given the first term (a), the common ratio (r), and the term number (t):\n\n```python\ndef tn_gp(a, r, t):\n    \"\"\"\n    Calculate the t-nth term of a geometric series.\n    \n    Parameters:\n        a (float): The first term of the geometric series.\n        r (float): The common ratio of the geometric series.\n        t (int): The term number to find.\n        \n    Returns:\n        float: The t-nth term of the geometric series.\n    \"\"\"\n    return a * (r ** (t - 1))\n\n# Example usage:\nfirst_term = 2\ncommon_ratio = 3\nterm_number = 4\nresult = tn_gp(first_term, common_ratio, term_number)\nprint(f\"The {term_number}-th term of the geometric series is: {result}\")\n```\n\nThis function uses the formula for the t-nth term of a geometric series, which is `a * r^(t-1)`, where `a` is the first term, `r` is the common ratio, and `t` is the term number."}
{"task_id": 56, "completion": "Here's a Python function called `check` that performs the task described:\n\n```python\ndef check(number):\n    # Convert the number to a string to reverse it\n    reversed_number_str = str(number)[::-1]\n    \n    # Convert the reversed string back to an integer\n    reversed_number = int(reversed_number_str)\n    \n    # Calculate twice the reversed number\n    twice_reversed = 2 * reversed_number\n    \n    # Check if the given number is one less than twice its reverse\n    return number == twice_reversed - 1\n\n# Example usage:\nnumber = 17\nresult = check(number)\nprint(f\"Is {number} one less than twice its reverse? {result}\")\n```\n\nThis function first converts the given number to a string and reverses it. It then converts the reversed string back to an integer. It calculates twice the reversed number and checks if the original number is one less than this value. The function returns `True` if the condition is met, otherwise `False`."}
{"task_id": 57, "completion": "Here's a Python function called `find_max_num` that takes a list of digits as input and returns the largest number that can be formed with those digits:\n\n```python\ndef find_max_num(digits):\n    # Convert each integer in the list to a string\n    str_digits = [str(digit) for digit in digits]\n    \n    # Sort the string digits in descending order\n    sorted_digits = sorted(str_digits, reverse=True)\n    \n    # Join the sorted digits into a single string\n    max_num_str = ''.join(sorted_digits)\n    \n    # Convert the string back to an integer\n    max_num = int(max_num_str)\n    \n    return max_num\n\n# Example usage:\ndigits = [3, 1, 4, 1, 5, 9]\nresult = find_max_num(digits)\nprint(\"The largest number that can be formed is:\", result)\n```\n\nThis function first converts each digit to a string, sorts the strings in descending order, joins them into a single string, and then converts the result back to an integer. This will give you the largest number that can be formed with the given digits."}
{"task_id": 58, "completion": "Here's a Python function called `opposite_signs` that checks whether two given integers have opposite signs:\n\n```python\ndef opposite_signs(x, y):\n    return (x < 0 and y > 0) or (x > 0 and y < 0)\n\n# Example usage:\nnum1 = -5\nnum2 = 10\nprint(opposite_signs(num1, num2))  # Output: True\n\nnum1 = 15\nnum2 = 20\nprint(opposite_signs(num1, num2))  # Output: False\n```\n\nThis function takes two integers `x` and `y` as input and returns `True` if they have opposite signs, and `False` otherwise. It checks the conditions using logical operators to determine if one number is negative while the other is positive."}
{"task_id": 59, "completion": "Certainly! An octagonal number is a figurate number that represents an octagon. The nth octagonal number can be calculated using the formula:\n\nO_n = n * (3n - 2)\n\nHere's a Python function to determine the nth octagonal number:\n\n```python\ndef is_octagonal(n):\n    if n < 1:\n        return \"Input should be a positive integer\"\n    return n * (3 * n - 2)\n\n# Example usage:\nnth_octagonal = is_octagonal(5)\nprint(f\"The 5th octagonal number is: {nth_octagonal}\")\n```\n\nThis function takes an integer `n` as input and returns the nth octagonal number. It also includes a check to ensure that the input is a positive integer."}
{"task_id": 60, "completion": "Certainly! Below is a Python function called `max_len_sub` that finds the maximum length of a subsequence from a given array where the difference between adjacent elements is exactly 1.\n\n```python\ndef max_len_sub(arr):\n    if not arr:\n        return 0\n    \n    # Dictionary to store the length of subsequence ending with each element\n    subseq_length = {}\n    \n    # Initialize the dictionary with 1 for each element\n    for num in arr:\n        subseq_length[num] = 1\n    \n    # Iterate through the array to build the subsequence lengths\n    for num in arr:\n        # Check if there's a subsequence ending with num-1\n        if num - 1 in subseq_length:\n            subseq_length[num] = max(subseq_length[num], subseq_length[num - 1] + 1)\n        # Check if there's a subsequence ending with num+1\n        if num + 1 in subseq_length:\n            subseq_length[num + 1] = max(subseq_length[num + 1], subseq_length[num] + 1)\n    \n    # The maximum length of subsequence with difference of 1 between adjacent elements\n    return max(subseq_length.values())\n\n# Example usage\narr = [1, 2, 3, 4, 5, 3, 2, 1]\nprint(max_len_sub(arr))  # Output: 5 (subsequence: [1, 2, 3, 2, 1])\n```\n\nThis function uses a dictionary to keep track of the maximum length of subsequences ending with each element. It iterates through the array and updates the lengths based on the presence of adjacent numbers (either num-1 or num+1). Finally, it returns the maximum value from the dictionary, which represents the length of the longest subsequence with the required property."}

{"task_id": 11, "completion": "Certainly! Below is a Python function called `remove_occ` that removes the first and last occurrence of a given character from a string:\n\n```python\ndef remove_occ(s, char):\n    # Find the index of the first occurrence\n    first_index = s.find(char)\n    \n    # Find the index of the last occurrence\n    last_index = s.rfind(char)\n    \n    # If the character is not found, return the original string\n    if first_index == -1 or last_index == -1:\n        return s\n    \n    # Remove the first occurrence\n    s = s[:first_index] + s[first_index+1:]\n    \n    # Since we removed the first occurrence, the last occurrence index might have shifted\n    # So we need to find the last occurrence again\n    last_index = s.rfind(char)\n    \n    # Remove the last occurrence\n    s = s[:last_index] + s[last_index+1:]\n    \n    return s\n\n# Example usage:\ninput_string = \"banana\"\ncharacter = \"a\"\nresult = remove_occ(input_string, character)\nprint(result)  # Output: \"bnna\"\n```\n\n### Explanation:\n1. **Finding Indices**:\n   - `s.find(char)` returns the index of the first occurrence of `char` in the string `s`.\n   - `s.rfind(char)` returns the index of the last occurrence of `char` in the string `s`.\n\n2. **Handling Edge Cases**:\n   - If the character is not found in the string (`find` or `rfind` returns `-1`), the function returns the original string.\n\n3. **Removing Occurrences**:\n   - The first occurrence is removed by slicing the string before and after the first occurrence.\n   - After removing the first occurrence, the last occurrence index might have shifted, so we find it again using `rfind`.\n   - The last occurrence is then removed in a similar manner.\n\n4. **Returning the Result**:\n   - The modified string is returned after both occurrences have been removed.\n\n### Example:\nFor the input string `\"banana\"` and character `\"a\"`, the function will remove the first `'a'` and the last `'a'`, resulting in `\"bnna\"`."}
{"task_id": 12, "completion": "Certainly! Below is a Python function called `sort_matrix` that sorts a given matrix in ascending order according to the sum of its rows:\n\n```python\ndef sort_matrix(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n\n    :param matrix: List of lists (the matrix to be sorted)\n    :return: List of lists (the sorted matrix)\n    \"\"\"\n    # Calculate the sum of each row and store it along with the row\n    rows_with_sum = [(sum(row), row) for row in matrix]\n    \n    # Sort the rows based on the sum\n    rows_with_sum.sort(key=lambda x: x[0])\n    \n    # Extract the sorted rows\n    sorted_matrix = [row for (_, row) in rows_with_sum]\n    \n    return sorted_matrix\n\n# Example usage:\nmatrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n    [1, 1, 1]\n]\n\nsorted_matrix = sort_matrix(matrix)\nprint(\"Sorted Matrix:\")\nfor row in sorted_matrix:\n    print(row)\n```\n\n### Explanation:\n1. **Calculate the sum of each row**: We create a list of tuples where each tuple contains the sum of a row and the row itself.\n2. **Sort the rows**: We sort this list of tuples based on the sum of the rows.\n3. **Extract the sorted rows**: Finally, we extract the rows from the sorted list of tuples to get the sorted matrix.\n\n### Example Output:\nFor the given matrix:\n```\n[\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n    [1, 1, 1]\n]\n```\nThe output will be:\n```\nSorted Matrix:\n[1, 1, 1]\n[1, 2, 3]\n[4, 5, 6]\n[7, 8, 9]\n```\n\nThis function works for any 2D list (matrix) and sorts it based on the sum of its rows in ascending order."}
{"task_id": 13, "completion": "Certainly! Below is a Python function called `count_common` that takes a dictionary of word counts and returns the most common words along with their counts.\n\n```python\nfrom collections import Counter\n\ndef count_common(word_counts, top_n=10):\n    \"\"\"\n    Count the most common words in a dictionary of word counts.\n\n    Parameters:\n    word_counts (dict): A dictionary where keys are words and values are their counts.\n    top_n (int): The number of most common words to return. Default is 10.\n\n    Returns:\n    list: A list of tuples containing the most common words and their counts.\n    \"\"\"\n    # Use Counter to find the most common words\n    counter = Counter(word_counts)\n    \n    # Get the top_n most common words\n    most_common = counter.most_common(top_n)\n    \n    return most_common\n\n# Example usage:\nword_counts = {\n    'python': 100,\n    'programming': 85,\n    'code': 120,\n    'data': 90,\n    'science': 75,\n    'machine': 60,\n    'learning': 80,\n    'algorithm': 70,\n    'function': 50,\n    'variable': 40,\n    'loop': 30,\n    'list': 20\n}\n\nmost_common_words = count_common(word_counts, top_n=5)\nprint(most_common_words)\n```\n\n### Explanation:\n1. **Input**: The function takes a dictionary `word_counts` where keys are words and values are their counts. It also takes an optional parameter `top_n` which specifies how many of the most common words to return (default is 10).\n\n2. **Counter**: The `Counter` class from the `collections` module is used to efficiently count the occurrences of each word. It takes the `word_counts` dictionary and converts it into a `Counter` object.\n\n3. **most_common**: The `most_common` method of the `Counter` object is used to retrieve the `top_n` most common words along with their counts.\n\n4. **Output**: The function returns a list of tuples, where each tuple contains a word and its count.\n\n### Example Output:\n```python\n[('code', 120), ('python', 100), ('data', 90), ('programming', 85), ('learning', 80)]\n```\n\nThis output indicates that the word `'code'` is the most common with a count of 120, followed by `'python'` with a count of 100, and so on.\n\nYou can adjust the `top_n` parameter to get more or fewer common words as needed."}
{"task_id": 14, "completion": "Certainly! To find the volume of a triangular prism, you need to know the area of the triangular base and the height (or length) of the prism. The formula for the volume \\( V \\) of a triangular prism is:\n\n\\[\nV = \\text{Base Area} \\times \\text{Height}\n\\]\n\nThe area of the triangular base can be calculated using the formula for the area of a triangle:\n\n\\[\n\\text{Base Area} = \\frac{1}{2} \\times \\text{base} \\times \\text{height}\n\\]\n\nHere\u2019s how you can implement this in Python:\n\n```python\ndef find_volume(base_triangle, height_triangle, height_prism):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base_triangle (float): The base length of the triangular base.\n    height_triangle (float): The height of the triangular base.\n    height_prism (float): The height (or length) of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    # Calculate the area of the triangular base\n    base_area = 0.5 * base_triangle * height_triangle\n    \n    # Calculate the volume of the prism\n    volume = base_area * height_prism\n    \n    return volume\n\n# Example usage:\nbase_triangle = 5.0  # base of the triangle\nheight_triangle = 4.0  # height of the triangle\nheight_prism = 10.0  # height of the prism\n\nvolume = find_volume(base_triangle, height_triangle, height_prism)\nprint(f\"The volume of the triangular prism is: {volume}\")\n```\n\n### Explanation:\n- `base_triangle`: The length of the base of the triangular base.\n- `height_triangle`: The height of the triangular base.\n- `height_prism`: The height (or length) of the prism.\n\n### Example Output:\nIf you run the example code with the provided values, the output will be:\n\n```\nThe volume of the triangular prism is: 100.0\n```\n\nThis means the volume of the triangular prism is 100 cubic units."}
{"task_id": 15, "completion": "Certainly! The function `split_lowerstring` will split a given string at lowercase letters. Here's how you can implement it in Python:\n\n```python\nimport re\n\ndef split_lowerstring(s):\n    # Use regular expression to split the string at lowercase letters\n    # The pattern [a-z] matches any lowercase letter\n    # The re.split function splits the string at each match\n    return re.split('[a-z]', s)\n\n# Example usage:\ninput_string = \"HelloWorldPython\"\nresult = split_lowerstring(input_string)\nprint(result)  # Output: ['H', 'W', 'P']\n```\n\n### Explanation:\n- **`re.split('[a-z]', s)`**: This uses a regular expression to split the string `s` at any lowercase letter (`[a-z]`).\n- The function returns a list of substrings that were separated by lowercase letters.\n\n### Example:\nFor the input string `\"HelloWorldPython\"`, the function will split it at the lowercase letters `'e'`, `'l'`, `'l'`, `'o'`, `'o'`, `'r'`, `'l'`, `'d'`, `'y'`, `'t'`, `'h'`, `'o'`, `'n'`, resulting in the list `['H', 'W', 'P']`.\n\n### Note:\nIf you want to include the lowercase letters in the result, you can modify the function slightly:\n\n```python\nimport re\n\ndef split_lowerstring(s):\n    # Use regular expression to split the string at lowercase letters but include them in the result\n    return re.split('([a-z])', s)\n\n# Example usage:\ninput_string = \"HelloWorldPython\"\nresult = split_lowerstring(input_string)\nprint(result)  # Output: ['H', 'e', 'lloW', 'o', 'rldP', 'y', 'tho', 'n']\n```\n\nIn this version, the lowercase letters are included in the resulting list as separate elements."}
{"task_id": 16, "completion": "Certainly! Below is a Python function called `text_lowercase_underscore` that uses a regular expression to find sequences of lowercase letters joined with an underscore:\n\n```python\nimport re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Find sequences of lowercase letters joined with an underscore.\n\n    :param text: The input string to search for sequences.\n    :return: A list of all matching sequences.\n    \"\"\"\n    # Regular expression pattern to match lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    \n    # Find all matches in the input text\n    matches = re.findall(pattern, text)\n    \n    return matches\n\n# Example usage:\ntext = \"hello_world this_is_a_test example_123 another_example\"\nmatches = text_lowercase_underscore(text)\nprint(matches)  # Output: ['hello_world', 'this_is_a_test', 'another_example']\n```\n\n### Explanation:\n- **Regular Expression Pattern**: `r'\\b[a-z]+_[a-z]+\\b'`\n  - `\\b`: Word boundary to ensure we match whole words.\n  - `[a-z]+`: One or more lowercase letters.\n  - `_`: An underscore.\n  - `[a-z]+`: One or more lowercase letters.\n  - `\\b`: Word boundary to ensure we match whole words.\n  \n- **`re.findall`**: This function returns all non-overlapping matches of the pattern in the string as a list of strings.\n\n### Example:\nGiven the input string `\"hello_world this_is_a_test example_123 another_example\"`, the function will return `['hello_world', 'this_is_a_test', 'another_example']`.\n\n### Notes:\n- The function will not match sequences that contain numbers or uppercase letters.\n- It will only match sequences that are entirely lowercase letters joined by a single underscore.\n\nYou can modify the regular expression pattern if you need to include other characters or adjust the matching criteria."}
{"task_id": 17, "completion": "Certainly! Below is a Python function named `square_perimeter` that calculates the perimeter of a square given the length of one of its sides.\n\n```python\ndef square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Parameters:\n    side_length (float or int): The length of one side of the square.\n\n    Returns:\n    float or int: The perimeter of the square.\n    \"\"\"\n    return 4 * side_length\n\n# Example usage:\n# side = 5\n# perimeter = square_perimeter(side)\n# print(f\"The perimeter of the square with side length {side} is {perimeter}.\")\n```\n\n### Explanation:\n- The function `square_perimeter` takes one argument, `side_length`, which represents the length of one side of the square.\n- The perimeter of a square is calculated by multiplying the length of one side by 4, since all sides of a square are equal in length.\n- The function returns the calculated perimeter.\n\n### Example:\nIf you call the function with a side length of 5, it will return `20`, because \\(4 \\times 5 = 20\\).\n\n```python\nside = 5\nperimeter = square_perimeter(side)\nprint(f\"The perimeter of the square with side length {side} is {perimeter}.\")\n```\n\nOutput:\n```\nThe perimeter of the square with side length 5 is 20.\n```\n\nThis function works for both integer and floating-point side lengths."}
{"task_id": 18, "completion": "Certainly! Below is a Python function called `remove_dirty_chars` that removes characters from the first string (`string`) which are present in the second string (`dirty_chars`):\n\n```python\ndef remove_dirty_chars(string, dirty_chars):\n    # Create a set of characters to remove for faster lookup\n    dirty_set = set(dirty_chars)\n    \n    # Use a list comprehension to filter out the dirty characters\n    cleaned_string = ''.join([char for char in string if char not in dirty_set])\n    \n    return cleaned_string\n\n# Example usage:\nstring = \"hello world\"\ndirty_chars = \"lo\"\nresult = remove_dirty_chars(string, dirty_chars)\nprint(result)  # Output: \"he wrd\"\n```\n\n### Explanation:\n1. **Set Creation**: We create a set `dirty_set` from the `dirty_chars` string. Sets provide O(1) average time complexity for lookups, making the filtering process efficient.\n  \n2. **List Comprehension**: We iterate over each character in the `string` and include it in the new string only if it is not in the `dirty_set`.\n\n3. **Joining Characters**: The filtered characters are joined together using `''.join()` to form the final cleaned string.\n\n### Example:\n- If `string = \"hello world\"` and `dirty_chars = \"lo\"`, the function will remove all occurrences of `'l'` and `'o'` from the string, resulting in `\"he wrd\"`.\n\nThis function is efficient and works well for most use cases."}
{"task_id": 19, "completion": "Certainly! Below is a Python function named `test_duplicate` that checks whether a given array of integers contains any duplicate elements:\n\n```python\ndef test_duplicate(arr):\n    \"\"\"\n    Check if the given array contains any duplicate elements.\n\n    Parameters:\n    arr (list of int): The array of integers to check.\n\n    Returns:\n    bool: True if there are duplicates, False otherwise.\n    \"\"\"\n    # Use a set to store unique elements\n    unique_elements = set()\n    \n    for num in arr:\n        if num in unique_elements:\n            return True\n        unique_elements.add(num)\n    \n    return False\n\n# Example usage:\nif __name__ == \"__main__\":\n    array1 = [1, 2, 3, 4, 5]\n    array2 = [1, 2, 3, 4, 2]\n    \n    print(test_duplicate(array1))  # Output: False\n    print(test_duplicate(array2))  # Output: True\n```\n\n### Explanation:\n- The function `test_duplicate` takes a list of integers `arr` as input.\n- It initializes an empty set `unique_elements` to keep track of the unique elements encountered so far.\n- It then iterates through each element in the array:\n  - If the element is already in the set, it means a duplicate has been found, so the function returns `True`.\n  - If the element is not in the set, it is added to the set.\n- If the loop completes without finding any duplicates, the function returns `False`.\n\n### Example Usage:\n- For `array1 = [1, 2, 3, 4, 5]`, the function returns `False` because there are no duplicates.\n- For `array2 = [1, 2, 3, 4, 2]`, the function returns `True` because the number `2` appears twice.\n\nThis approach has a time complexity of O(n), where n is the number of elements in the array, because checking for membership in a set and adding to a set are both average-case O(1) operations."}
{"task_id": 20, "completion": "A Woodall number (also known as a Riesel number) is a natural number of the form \\( W_n = n \\cdot 2^n - 1 \\) for some integer \\( n \\geq 1 \\). To determine if a given number is a Woodall number, we can iterate through possible values of \\( n \\) and check if the formula \\( n \\cdot 2^n - 1 \\) equals the given number.\n\nHere\u2019s a Python function `is_woodall` that checks if a given number is a Woodall number:\n\n```python\ndef is_woodall(num):\n    if num < 1:\n        return False\n    \n    n = 1\n    while True:\n        woodall = n * (2 ** n) - 1\n        if woodall == num:\n            return True\n        if woodall > num:\n            return False\n        n += 1\n\n# Example usage:\nprint(is_woodall(1))    # True, because 1 * 2^1 - 1 = 1\nprint(is_woodall(7))    # True, because 2 * 2^2 - 1 = 7\nprint(is_woodall(23))   # True, because 3 * 2^3 - 1 = 23\nprint(is_woodall(10))   # False, 10 is not a Woodall number\n```\n\n### Explanation:\n1. **Initial Check**: If the number is less than 1, it cannot be a Woodall number, so return `False`.\n2. **Iteration**: Start with \\( n = 1 \\) and compute the Woodall number using the formula \\( n \\cdot 2^n - 1 \\).\n3. **Comparison**: If the computed Woodall number equals the given number, return `True`. If the computed Woodall number exceeds the given number, return `False`.\n4. **Increment**: Increment \\( n \\) and repeat the process.\n\nThis function will correctly identify Woodall numbers by iterating through possible values of \\( n \\) until it either finds a match or determines that the number cannot be a Woodall number."}
{"task_id": 21, "completion": "Certainly! Below is a Python function named `multiples_of_num` that finds `m` number of multiples of `n`:\n\n```python\ndef multiples_of_num(n, m):\n    \"\"\"\n    Find m number of multiples of n.\n\n    Parameters:\n    n (int): The number whose multiples are to be found.\n    m (int): The number of multiples to find.\n\n    Returns:\n    list: A list containing the first m multiples of n.\n    \"\"\"\n    return [n * i for i in range(1, m + 1)]\n\n# Example usage:\nn = 5\nm = 10\nresult = multiples_of_num(n, m)\nprint(f\"The first {m} multiples of {n} are: {result}\")\n```\n\n### Explanation:\n- The function `multiples_of_num` takes two arguments: `n` (the number whose multiples are to be found) and `m` (the number of multiples to find).\n- It uses a list comprehension to generate the first `m` multiples of `n`. The expression `n * i` calculates the `i-th` multiple of `n`, where `i` ranges from `1` to `m`.\n- The function returns a list of these multiples.\n\n### Example Output:\nIf you call `multiples_of_num(5, 10)`, the output will be:\n```\nThe first 10 multiples of 5 are: [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]\n```\n\nThis function is efficient and concise, leveraging Python's list comprehensions to generate the desired multiples."}
{"task_id": 22, "completion": "Certainly! Below is a Python function `find_first_duplicate` that finds the first duplicate element in a given array of integers. The function returns the first duplicate element it encounters, or `None` if no duplicates are found.\n\n```python\ndef find_first_duplicate(arr):\n    # Create a set to keep track of seen elements\n    seen = set()\n    \n    # Iterate through the array\n    for num in arr:\n        # If the number is already in the set, it's a duplicate\n        if num in seen:\n            return num\n        # Otherwise, add it to the set\n        seen.add(num)\n    \n    # If no duplicates are found, return None\n    return None\n\n# Example usage:\narr = [3, 5, 2, 5, 3, 7]\nresult = find_first_duplicate(arr)\nprint(\"First duplicate:\", result)  # Output: First duplicate: 5\n```\n\n### Explanation:\n- **Set Usage**: We use a set `seen` to keep track of the elements we have encountered so far. Sets are ideal for this purpose because they allow for O(1) average-time complexity for lookups and insertions.\n- **Iteration**: We iterate through the array. For each element, we check if it is already in the `seen` set.\n  - If it is, we return that element as it is the first duplicate.\n  - If it is not, we add it to the `seen` set.\n- **Return Value**: If the loop completes without finding any duplicates, the function returns `None`.\n\n### Example:\nFor the array `[3, 5, 2, 5, 3, 7]`, the function will return `5` because `5` is the first element that appears more than once.\n\n### Edge Cases:\n- If the array is empty, the function will return `None`.\n- If there are no duplicates in the array, the function will return `None`.\n\nThis function efficiently finds the first duplicate with a time complexity of O(n) and a space complexity of O(n), where n is the number of elements in the array."}
{"task_id": 23, "completion": "Certainly! Below is a Python function named `maximum_sum` that takes a list of lists as input and returns the maximum sum of the elements of any sublist.\n\n```python\ndef maximum_sum(list_of_lists):\n    \"\"\"\n    Find the maximum sum of elements of any sublist in a list of lists.\n\n    :param list_of_lists: List of lists containing integers.\n    :return: The maximum sum of elements of any sublist.\n    \"\"\"\n    if not list_of_lists:\n        return 0  # Return 0 if the list of lists is empty\n\n    max_sum = float('-inf')  # Initialize with negative infinity to handle all possible sums\n\n    for sublist in list_of_lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum\n\n# Example usage:\nlists = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [10, -2, 1],\n    [7, 8, 9]\n]\n\nprint(maximum_sum(lists))  # Output: 24 (since [7, 8, 9] has the maximum sum)\n```\n\n### Explanation:\n1. **Input Handling**: The function first checks if the input `list_of_lists` is empty. If it is, the function returns `0`.\n2. **Initialization**: `max_sum` is initialized to negative infinity (`float('-inf')`) to ensure that any sum from the sublists will be larger.\n3. **Iteration**: The function iterates over each sublist in `list_of_lists`, calculates the sum of its elements, and updates `max_sum` if the current sum is greater than the current `max_sum`.\n4. **Return**: Finally, the function returns the `max_sum`.\n\n### Example:\nFor the input `[[1, 2, 3], [4, 5, 6], [10, -2, 1], [7, 8, 9]]`, the function will return `24` because the sublist `[7, 8, 9]` has the maximum sum.\n\nThis function is efficient and works well for lists of lists containing integers."}
{"task_id": 24, "completion": "Certainly! Below is a Python function called `binary_to_decimal` that converts a binary number (given as a string) to its decimal equivalent.\n\n```python\ndef binary_to_decimal(binary_str):\n    \"\"\"\n    Convert a binary string to its decimal equivalent.\n\n    :param binary_str: A string representing a binary number (e.g., '1010')\n    :return: The decimal equivalent of the binary number\n    \"\"\"\n    decimal = 0\n    length = len(binary_str)\n    \n    for i, bit in enumerate(binary_str):\n        if bit not in ('0', '1'):\n            raise ValueError(\"Invalid binary string. It should contain only '0's and '1's.\")\n        decimal += int(bit) * (2 ** (length - i - 1))\n    \n    return decimal\n\n# Example usage:\nbinary_number = \"1010\"\ndecimal_number = binary_to_decimal(binary_number)\nprint(f\"The decimal equivalent of binary {binary_number} is {decimal_number}\")\n```\n\n### Explanation:\n1. **Input Validation**: The function checks if each character in the input string is either '0' or '1'. If not, it raises a `ValueError`.\n2. **Conversion Logic**: The function iterates over each bit in the binary string, calculates its contribution to the decimal value by raising 2 to the power of its position (from the left), and sums these contributions.\n3. **Return Value**: The function returns the computed decimal value.\n\n### Example:\nFor the binary string `\"1010\"`, the function will calculate:\n- `1 * 2^3 = 8`\n- `0 * 2^2 = 0`\n- `1 * 2^1 = 2`\n- `0 * 2^0 = 0`\n\nSumming these gives `8 + 0 + 2 + 0 = 10`, which is the decimal equivalent of `\"1010\"`.\n\n### Output:\n```\nThe decimal equivalent of binary 1010 is 10\n```\n\nThis function should work for any valid binary string input."}
{"task_id": 25, "completion": "Certainly! Below is a Python function called `find_product` that calculates the product of non-repeated elements in a given array:\n\n```python\nfrom collections import Counter\n\ndef find_product(arr):\n    # Count the occurrences of each element in the array\n    element_counts = Counter(arr)\n    \n    # Filter out elements that appear more than once\n    non_repeated_elements = [element for element, count in element_counts.items() if count == 1]\n    \n    # Calculate the product of non-repeated elements\n    product = 1\n    for element in non_repeated_elements:\n        product *= element\n    \n    return product\n\n# Example usage:\narr = [1, 2, 3, 4, 2, 3, 5]\nresult = find_product(arr)\nprint(\"Product of non-repeated elements:\", result)\n```\n\n### Explanation:\n1. **Counting Elements**: We use `Counter` from the `collections` module to count how many times each element appears in the array.\n2. **Filtering Non-Repeated Elements**: We create a list of elements that appear exactly once by filtering the elements based on their count.\n3. **Calculating the Product**: We initialize `product` to 1 and then multiply it by each non-repeated element.\n4. **Returning the Result**: Finally, we return the calculated product.\n\n### Example:\nFor the array `[1, 2, 3, 4, 2, 3, 5]`, the non-repeated elements are `[1, 4, 5]`. The product of these elements is `1 * 4 * 5 = 20`.\n\n### Output:\n```\nProduct of non-repeated elements: 20\n```\n\nThis function should work efficiently for most use cases."}
{"task_id": 26, "completion": "Certainly! Below is a Python function `check_k_elements` that checks if all elements in a given list of tuples have exactly `k` elements.\n\n```python\ndef check_k_elements(tuple_list, k):\n    \"\"\"\n    Check if all tuples in the given list have exactly k elements.\n\n    :param tuple_list: List of tuples to be checked.\n    :param k: The expected number of elements in each tuple.\n    :return: True if all tuples have exactly k elements, False otherwise.\n    \"\"\"\n    return all(len(t) == k for t in tuple_list)\n\n# Example usage:\ntuple_list = [(1, 2), (3, 4), (5, 6)]\nk = 2\nprint(check_k_elements(tuple_list, k))  # Output: True\n\ntuple_list = [(1, 2, 3), (4, 5), (6, 7)]\nk = 2\nprint(check_k_elements(tuple_list, k))  # Output: False\n```\n\n### Explanation:\n- The function `check_k_elements` takes two arguments: `tuple_list` (a list of tuples) and `k` (the expected number of elements in each tuple).\n- It uses a generator expression inside the `all()` function to check if the length of each tuple in `tuple_list` is equal to `k`.\n- The `all()` function returns `True` if all elements in the generator expression are `True`, otherwise it returns `False`.\n\n### Example Outputs:\n- For `tuple_list = [(1, 2), (3, 4), (5, 6)]` and `k = 2`, the function returns `True` because all tuples have exactly 2 elements.\n- For `tuple_list = [(1, 2, 3), (4, 5), (6, 7)]` and `k = 2`, the function returns `False` because one of the tuples has 3 elements.\n\nThis function is efficient and concise, leveraging Python's built-in functions to perform the check."}
{"task_id": 27, "completion": "Certainly! Below is a Python function named `remove` that removes all digits from each string in a list of strings:\n\n```python\ndef remove(lst):\n    \"\"\"\n    Removes all digits from each string in a list of strings.\n\n    :param lst: List of strings from which digits need to be removed.\n    :return: List of strings with all digits removed.\n    \"\"\"\n    # Use a list comprehension to iterate over each string in the list\n    # and remove digits using the str.translate method with str.maketrans.\n    return [s.translate(str.maketrans('', '', '0123456789')) for s in lst]\n\n# Example usage:\ninput_list = [\"abc123\", \"4def56\", \"ghi789\", \"jkl0\"]\noutput_list = remove(input_list)\nprint(output_list)  # Output: ['abc', 'def', 'ghi', 'jkl']\n```\n\n### Explanation:\n- **`str.translate`**: This method returns a copy of the string where specified characters are replaced or removed.\n- **`str.maketrans`**: This method creates a translation table that maps each character to be removed to `None`. In this case, we map all digits (`'0123456789'`) to `None`.\n- **List comprehension**: We iterate over each string in the input list and apply the `translate` method to remove the digits.\n\n### Example:\nGiven the input list `[\"abc123\", \"4def56\", \"ghi789\", \"jkl0\"]`, the function will return `['abc', 'def', 'ghi', 'jkl']`, which are the strings with all digits removed.\n\nThis function is efficient and concise, leveraging Python's built-in string manipulation capabilities."}
{"task_id": 28, "completion": "Certainly! The binomial coefficient, often denoted as \\( C(n, k) \\) or \\( \\binom{n}{k} \\), represents the number of ways to choose \\( k \\) elements from a set of \\( n \\) elements without regard to the order of selection. It can be calculated using the formula:\n\n\\[\n\\binom{n}{k} = \\frac{n!}{k! \\cdot (n - k)!}\n\\]\n\nwhere \\( n! \\) (n factorial) is the product of all positive integers up to \\( n \\).\n\nHere is a Python function `binomial_coeff` that calculates the binomial coefficient:\n\n```python\nimport math\n\ndef binomial_coeff(n, k):\n    \"\"\"\n    Calculate the binomial coefficient C(n, k) which is the number of ways to choose k elements from a set of n elements.\n\n    Parameters:\n    n (int): Total number of elements.\n    k (int): Number of elements to choose.\n\n    Returns:\n    int: The binomial coefficient C(n, k).\n    \"\"\"\n    if k < 0 or k > n:\n        return 0\n    return math.comb(n, k)\n\n# Example usage:\nn = 5\nk = 2\nprint(f\"C({n}, {k}) = {binomial_coeff(n, k)}\")\n```\n\n### Explanation:\n- **`math.comb(n, k)`**: This is a built-in function in Python's `math` module (available in Python 3.10 and later) that directly computes the binomial coefficient.\n- **Edge Case Handling**: If \\( k \\) is less than 0 or greater than \\( n \\), the function returns 0, as it's impossible to choose \\( k \\) elements from \\( n \\) in such cases.\n\n### Example Output:\nFor \\( n = 5 \\) and \\( k = 2 \\), the output will be:\n```\nC(5, 2) = 10\n```\n\n### Alternative Implementation (without `math.comb`):\nIf you are using a version of Python earlier than 3.10, you can implement the binomial coefficient calculation manually:\n\n```python\ndef factorial(num):\n    \"\"\"Calculate the factorial of a number.\"\"\"\n    if num == 0 or num == 1:\n        return 1\n    return num * factorial(num - 1)\n\ndef binomial_coeff(n, k):\n    \"\"\"\n    Calculate the binomial coefficient C(n, k) which is the number of ways to choose k elements from a set of n elements.\n\n    Parameters:\n    n (int): Total number of elements.\n    k (int): Number of elements to choose.\n\n    Returns:\n    int: The binomial coefficient C(n, k).\n    \"\"\"\n    if k < 0 or k > n:\n        return 0\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\n# Example usage:\nn = 5\nk = 2\nprint(f\"C({n}, {k}) = {binomial_coeff(n, k)}\")\n```\n\nThis implementation uses a recursive function `factorial` to compute the factorials and then applies the binomial coefficient formula. However, note that the recursive factorial function may not be efficient for large values of \\( n \\) and \\( k \\). For large values, you might want to use an iterative approach or memoization to optimize the factorial calculation."}
{"task_id": 29, "completion": "Certainly! The function `get_odd_occurrence` will find and return the element that occurs an odd number of times in a given list. Here's a Python implementation:\n\n```python\ndef get_odd_occurrence(arr):\n    \"\"\"\n    Finds the element that occurs an odd number of times in the given list.\n\n    :param arr: List of elements\n    :return: The element that occurs an odd number of times\n    \"\"\"\n    # Initialize a dictionary to store the count of each element\n    count_dict = {}\n    \n    # Count the occurrences of each element in the list\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Find the element with an odd count\n    for key, value in count_dict.items():\n        if value % 2 != 0:\n            return key\n    \n    # If no element occurs an odd number of times, return None\n    return None\n\n# Example usage:\narr = [1, 2, 3, 2, 3, 1, 3]\nresult = get_odd_occurrence(arr)\nprint(f\"The element occurring an odd number of times is: {result}\")\n```\n\n### Explanation:\n1. **Counting Occurrences**: We use a dictionary `count_dict` to count how many times each element appears in the list.\n2. **Finding the Odd Occurrence**: After counting, we iterate through the dictionary to find the element whose count is odd.\n3. **Returning the Result**: The function returns the element that occurs an odd number of times. If no such element is found, it returns `None`.\n\n### Example:\nFor the list `[1, 2, 3, 2, 3, 1, 3]`, the function will return `3` because `3` occurs three times, which is an odd number.\n\n### Time Complexity:\n- The time complexity of this function is O(n), where `n` is the number of elements in the list. This is because we iterate through the list once to count the occurrences and then iterate through the dictionary to find the odd occurrence.\n\n### Space Complexity:\n- The space complexity is O(n) in the worst case, where all elements are unique and stored in the dictionary.\n\nThis function should work efficiently for most use cases."}
{"task_id": 30, "completion": "Certainly! Below is a Python function called `count_substring_with_equal_ends` that counts all the substrings in a given string that start and end with the same character.\n\n```python\ndef count_substring_with_equal_ends(s):\n    count = 0\n    n = len(s)\n    \n    # Iterate over all possible substrings\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substring = s[i:j]\n            if substring[0] == substring[-1]:\n                count += 1\n                \n    return count\n\n# Example usage:\ninput_string = \"abcab\"\nresult = count_substring_with_equal_ends(input_string)\nprint(f\"Number of substrings with equal ends: {result}\")\n```\n\n### Explanation:\n1. **Outer Loop (`i`)**: Iterates over each character in the string, treating it as the starting point of a substring.\n2. **Inner Loop (`j`)**: Iterates over the characters from `i+1` to the end of the string, treating each as the ending point of a substring.\n3. **Substring Extraction**: For each pair `(i, j)`, the substring `s[i:j]` is extracted.\n4. **Check for Equal Ends**: If the first and last characters of the substring are the same, the count is incremented.\n5. **Return the Count**: After all substrings have been checked, the function returns the total count.\n\n### Example:\nFor the input string `\"abcab\"`, the function will return `7` because the substrings with equal ends are:\n- `\"a\"`, `\"b\"`, `\"c\"`, `\"a\"`, `\"b\"` (single characters)\n- `\"abca\"` (starts and ends with `'a'`)\n- `\"bcab\"` (starts and ends with `'b'`)\n\n### Time Complexity:\nThe time complexity of this function is `O(n^2)`, where `n` is the length of the string, because it checks all possible substrings.\n\n### Optimized Approach:\nIf you want a more optimized solution, you can use the fact that the number of substrings starting and ending with a particular character `c` is given by the combination formula `C(k, 2) + k`, where `k` is the frequency of `c` in the string. Here's an optimized version:\n\n```python\nfrom collections import defaultdict\n\ndef count_substring_with_equal_ends_optimized(s):\n    char_count = defaultdict(int)\n    \n    # Count the frequency of each character\n    for char in s:\n        char_count[char] += 1\n    \n    count = 0\n    # Calculate the number of substrings for each character\n    for char in char_count:\n        k = char_count[char]\n        count += k * (k + 1) // 2\n    \n    return count\n\n# Example usage:\ninput_string = \"abcab\"\nresult = count_substring_with_equal_ends_optimized(input_string)\nprint(f\"Number of substrings with equal ends: {result}\")\n```\n\n### Explanation of Optimized Approach:\n1. **Count Frequencies**: First, count the frequency of each character in the string.\n2. **Calculate Substrings**: For each character, calculate the number of substrings that start and end with that character using the formula `k * (k + 1) // 2`, where `k` is the frequency of the character.\n3. **Sum the Counts**: Sum the counts for all characters to get the total number of substrings with equal ends.\n\nThis optimized approach has a time complexity of `O(n)`, which is more efficient for large strings."}
{"task_id": 31, "completion": "To solve this problem, we can use the `heapq` module in Python, which provides an implementation of the heap queue algorithm, also known as the priority queue algorithm. The idea is to count the frequency of each integer across all lists, then use a min-heap to keep track of the top `k` most frequent integers.\n\nHere\u2019s how you can implement the `func` function:\n\n```python\nimport heapq\nfrom collections import defaultdict\n\ndef func(lists, k):\n    # Step 1: Count the frequency of each integer across all lists\n    frequency_map = defaultdict(int)\n    for lst in lists:\n        for num in lst:\n            frequency_map[num] += 1\n    \n    # Step 2: Use a min-heap to keep track of the top k frequent integers\n    min_heap = []\n    for num, freq in frequency_map.items():\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, (freq, num))\n        else:\n            if freq > min_heap[0][0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, (freq, num))\n    \n    # Step 3: Extract the top k frequent integers from the heap\n    top_k = [heapq.heappop(min_heap)[1] for _ in range(len(min_heap))]\n    \n    # Step 4: Return the result in descending order of frequency\n    return top_k[::-1]\n\n# Example usage:\nlists = [\n    [1, 2, 3],\n    [2, 3, 4],\n    [3, 4, 5],\n    [1, 3, 5]\n]\nk = 2\nprint(func(lists, k))  # Output: [3, 1]\n```\n\n### Explanation:\n\n1. **Frequency Counting**: We use a `defaultdict` to count how often each integer appears across all lists. This gives us a frequency map where the key is the integer and the value is its frequency.\n\n2. **Min-Heap Usage**: We then use a min-heap to keep track of the top `k` most frequent integers. The heap stores tuples of `(frequency, integer)`. If the heap size exceeds `k`, we remove the smallest frequency element (the root of the min-heap) and push the new element.\n\n3. **Extracting Results**: After processing all integers, we extract the top `k` integers from the heap. Since the heap is a min-heap, the elements are in ascending order of frequency, so we reverse the list to get the result in descending order of frequency.\n\n4. **Return Result**: Finally, we return the list of top `k` most frequent integers.\n\n### Example:\nGiven the lists `[[1, 2, 3], [2, 3, 4], [3, 4, 5], [1, 3, 5]]` and `k = 2`, the function will return `[3, 1]` because `3` appears 4 times and `1` appears 2 times, which are the top 2 most frequent integers.\n\nThis approach ensures that the function runs efficiently with a time complexity of `O(n log k)`, where `n` is the total number of integers across all lists."}
{"task_id": 32, "completion": "Certainly! Below is a Python function called `max_prime_factors` that finds the largest prime factor of a given number:\n\n```python\ndef max_prime_factors(n):\n    # Initialize the largest prime factor\n    largest_prime = -1\n    \n    # Divide out all factors of 2\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n    \n    # Check for odd factors from 3 to sqrt(n)\n    i = 3\n    while i * i <= n:\n        while n % i == 0:\n            largest_prime = i\n            n //= i\n        i += 2\n    \n    # If n is still greater than 2, then n itself is prime\n    if n > 2:\n        largest_prime = n\n    \n    return largest_prime\n\n# Example usage:\nnumber = 13195\nprint(f\"The largest prime factor of {number} is: {max_prime_factors(number)}\")\n```\n\n### Explanation:\n1. **Divide by 2**: The function first removes all factors of 2 from the number `n`. This is because 2 is the only even prime number, and handling it separately simplifies the process.\n\n2. **Check odd factors**: After removing all factors of 2, the function checks for odd factors starting from 3 up to the square root of `n`. If `n` is divisible by the current odd number, it updates the largest prime factor and divides `n` by that number.\n\n3. **Final check**: If after the loop `n` is still greater than 2, then `n` itself is a prime number and is the largest prime factor.\n\n### Example:\nFor `n = 13195`, the function will output `29`, which is the largest prime factor of 13195.\n\n### Complexity:\nThe time complexity of this function is \\(O(\\sqrt{n})\\), which is efficient for finding the largest prime factor of a number.\n\nYou can test the function with different numbers to see how it works!"}
{"task_id": 33, "completion": "Certainly! Below is a Python function called `decimal_to_binary` that converts a decimal number to its binary representation:\n\n```python\ndef decimal_to_binary(decimal_num):\n    if decimal_num == 0:\n        return \"0\"\n    \n    binary_num = \"\"\n    while decimal_num > 0:\n        remainder = decimal_num % 2\n        binary_num = str(remainder) + binary_num\n        decimal_num = decimal_num // 2\n    \n    return binary_num\n\n# Example usage:\ndecimal_number = 13\nbinary_number = decimal_to_binary(decimal_number)\nprint(f\"The binary representation of {decimal_number} is {binary_number}\")\n```\n\n### Explanation:\n1. **Handling Zero**: If the input decimal number is `0`, the function immediately returns `\"0\"` since the binary representation of `0` is `0`.\n\n2. **Conversion Process**:\n   - The function initializes an empty string `binary_num` to store the binary digits.\n   - It then enters a loop where it repeatedly divides the decimal number by `2` and stores the remainder (which will be either `0` or `1`).\n   - The remainder is converted to a string and prepended to `binary_num`.\n   - The decimal number is then updated by performing integer division by `2`.\n   - The loop continues until the decimal number becomes `0`.\n\n3. **Return Value**: The function returns the binary number as a string.\n\n### Example:\nFor `decimal_number = 13`, the function will return `\"1101\"`, which is the binary representation of `13`.\n\n### Output:\n```\nThe binary representation of 13 is 1101\n```\n\nThis function works for any non-negative integer input. If you need to handle negative numbers or floating-point numbers, additional logic would be required."}
{"task_id": 34, "completion": "Certainly! To find the missing number in a sorted array, we can leverage the fact that the array is sorted and use a binary search approach for efficiency. Here's a Python function called `find_missing` that does this:\n\n```python\ndef find_missing(arr):\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # If the middle element is not equal to its index + the first element,\n        # then the missing number is on the left side.\n        if arr[mid] != mid + arr[0]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    \n    # The missing number is the value at the left index + the first element\n    return left + arr[0]\n\n# Example usage:\narr = [1, 2, 3, 4, 6, 7, 8]\nprint(find_missing(arr))  # Output: 5\n```\n\n### Explanation:\n1. **Binary Search**: We use binary search to efficiently find the missing number. The idea is to compare the middle element with its expected value (which is `mid + arr[0]`).\n2. **Comparison**: If the middle element is not equal to its expected value, the missing number must be on the left side of the array. Otherwise, it's on the right side.\n3. **Termination**: The loop terminates when `left` exceeds `right`. At this point, `left` will be the index where the missing number should be.\n4. **Return**: The missing number is then calculated as `left + arr[0]`.\n\n### Example:\nFor the array `[1, 2, 3, 4, 6, 7, 8]`, the function will return `5` because `5` is the missing number.\n\n### Edge Cases:\n- If the array is empty, the function will return `None` or raise an error, depending on how you handle it.\n- If there are multiple missing numbers, this function will only find the first one.\n\nThis approach has a time complexity of `O(log n)`, making it efficient for large arrays."}
{"task_id": 35, "completion": "A rectangular number is a type of figurate number that represents the number of points in a rectangular grid. The n-th rectangular number can be calculated using the formula:\n\n\\[ R_n = n \\times (n + 1) \\]\n\nHere\u2019s a Python function called `find_rect_num` that calculates the n-th rectangular number:\n\n```python\ndef find_rect_num(n):\n    \"\"\"\n    Calculate the n-th rectangular number.\n\n    Parameters:\n    n (int): The position of the rectangular number to find.\n\n    Returns:\n    int: The n-th rectangular number.\n    \"\"\"\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    return n * (n + 1)\n\n# Example usage:\nif __name__ == \"__main__\":\n    n = 5\n    result = find_rect_num(n)\n    print(f\"The {n}-th rectangular number is: {result}\")\n```\n\n### Explanation:\n- The function `find_rect_num` takes an integer `n` as input.\n- It checks if `n` is a positive integer. If not, it raises a `ValueError`.\n- It then calculates the n-th rectangular number using the formula \\( R_n = n \\times (n + 1) \\).\n- Finally, it returns the calculated rectangular number.\n\n### Example:\nFor `n = 5`, the function will calculate:\n\n\\[ R_5 = 5 \\times (5 + 1) = 5 \\times 6 = 30 \\]\n\nSo, the output will be:\n\n```\nThe 5-th rectangular number is: 30\n```\n\nThis function is simple and efficient, with a time complexity of \\( O(1) \\)."}
{"task_id": 36, "completion": "To find the nth digit in the proper fraction of two given numbers, we can follow these steps:\n\n1. **Check if the fraction is proper**: A proper fraction is one where the numerator is less than the denominator. If it's not, we can return an error or handle it accordingly.\n2. **Calculate the decimal representation**: We can perform the division of the numerator by the denominator to get the decimal representation.\n3. **Extract the nth digit**: We can then extract the nth digit from the decimal part of the result.\n\nHere\u2019s a Python function `find_nth_digit` that implements this logic:\n\n```python\ndef find_nth_digit(numerator, denominator, n):\n    # Check if the fraction is proper\n    if numerator >= denominator:\n        return \"Error: The fraction is not proper.\"\n    \n    # Calculate the decimal representation\n    decimal = numerator / denominator\n    \n    # Convert the decimal part to a string\n    decimal_str = str(decimal).split('.')[1]\n    \n    # Check if n is within the range of the decimal digits\n    if n > len(decimal_str):\n        return \"Error: n is out of range.\"\n    \n    # Return the nth digit\n    return int(decimal_str[n-1])\n\n# Example usage:\nnumerator = 1\ndenominator = 7\nn = 3\nprint(find_nth_digit(numerator, denominator, n))  # Output: 4\n```\n\n### Explanation:\n- **Proper Fraction Check**: The function first checks if the fraction is proper. If not, it returns an error message.\n- **Decimal Calculation**: The function calculates the decimal representation of the fraction by dividing the numerator by the denominator.\n- **String Conversion**: The decimal part is converted to a string and split into the integer and fractional parts.\n- **Range Check**: The function checks if `n` is within the range of the decimal digits. If not, it returns an error message.\n- **Digit Extraction**: The function returns the nth digit from the fractional part.\n\n### Example:\nFor `numerator = 1`, `denominator = 7`, and `n = 3`, the function will return `4` because the decimal representation of `1/7` is `0.142857...`, and the 3rd digit is `4`.\n\n### Notes:\n- The function assumes that `n` is a positive integer.\n- The function handles cases where `n` is out of range by returning an error message.\n- The function does not handle cases where the decimal representation is infinite but can be extended to handle such cases by limiting the number of decimal places calculated."}
{"task_id": 37, "completion": "Certainly! The function `sort_mixed_list` will sort a mixed list of integers and strings. The sorting should be done in such a way that integers come before strings, and both integers and strings are sorted in ascending order among themselves.\n\nHere\u2019s how you can implement this in Python:\n\n```python\ndef sort_mixed_list(mixed_list):\n    # Separate integers and strings\n    integers = [x for x in mixed_list if isinstance(x, int)]\n    strings = [x for x in mixed_list if isinstance(x, str)]\n    \n    # Sort integers and strings separately\n    integers.sort()\n    strings.sort()\n    \n    # Combine the sorted integers and strings\n    sorted_list = integers + strings\n    \n    return sorted_list\n\n# Example usage:\nmixed_list = [3, 'apple', 1, 'banana', 2, 'cherry']\nsorted_list = sort_mixed_list(mixed_list)\nprint(sorted_list)  # Output: [1, 2, 3, 'apple', 'banana', 'cherry']\n```\n\n### Explanation:\n1. **Separation**: The list comprehension `[x for x in mixed_list if isinstance(x, int)]` filters out all the integers from the mixed list, and similarly, `[x for x in mixed_list if isinstance(x, str)]` filters out all the strings.\n2. **Sorting**: The `sort()` method is used to sort the integers and strings in ascending order.\n3. **Combination**: The sorted integers and strings are concatenated, with integers coming before strings.\n\n### Example Output:\n```python\n[1, 2, 3, 'apple', 'banana', 'cherry']\n```\n\nThis function will correctly sort a mixed list of integers and strings as described."}
{"task_id": 38, "completion": "Certainly! Below is a Python function called `div_even_odd` that takes a list of integers as input and returns the division of the first even number by the first odd number in the list. If the list does not contain both an even and an odd number, the function will return `None`.\n\n```python\ndef div_even_odd(numbers):\n    first_even = None\n    first_odd = None\n    \n    for num in numbers:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is not None and first_odd is not None:\n        return first_even / first_odd\n    else:\n        return None\n\n# Example usage:\nnumbers = [1, 3, 5, 7, 8, 10]\nresult = div_even_odd(numbers)\nprint(result)  # Output: 8.0 (since 8 / 1 = 8.0)\n```\n\n### Explanation:\n1. **Initialization**: We initialize `first_even` and `first_odd` to `None`.\n2. **Iteration**: We iterate through the list to find the first even and first odd numbers.\n3. **Check**: If both `first_even` and `first_odd` are found, we break out of the loop.\n4. **Division**: If both numbers are found, we return the division of `first_even` by `first_odd`.\n5. **Edge Case**: If either `first_even` or `first_odd` is not found, we return `None`.\n\n### Example:\nFor the list `[1, 3, 5, 7, 8, 10]`, the first even number is `8` and the first odd number is `1`. The function will return `8.0` (since `8 / 1 = 8.0`).\n\nThis function handles cases where the list might not contain both even and odd numbers by returning `None` in such scenarios."}
{"task_id": 39, "completion": "To solve this problem, we need to determine if the letters of a given string can be rearranged such that no two adjacent characters are the same. This can be achieved by ensuring that the most frequent character does not appear more than half the length of the string plus one.\n\nHere\u2019s a step-by-step approach to solve this:\n\n1. **Count the frequency of each character** in the string.\n2. **Check if the most frequent character** appears more than `(len(string) + 1) // 2` times. If it does, it's impossible to rearrange the string to meet the condition.\n3. If the above condition is not met, it is possible to rearrange the string.\n\nHere\u2019s the Python function `rearrange_string` that implements this logic:\n\n```python\nfrom collections import Counter\n\ndef rearrange_string(s: str) -> bool:\n    # Count the frequency of each character in the string\n    char_counts = Counter(s)\n    \n    # Find the maximum frequency\n    max_count = max(char_counts.values())\n    \n    # Check if the maximum frequency is more than (len(s) + 1) // 2\n    if max_count > (len(s) + 1) // 2:\n        return False\n    else:\n        return True\n\n# Example usage:\nprint(rearrange_string(\"aabb\"))  # Output: True\nprint(rearrange_string(\"aaab\"))  # Output: False\n```\n\n### Explanation:\n- **Counter(s)**: This counts the frequency of each character in the string.\n- **max(char_counts.values())**: This finds the maximum frequency of any character in the string.\n- **(len(s) + 1) // 2**: This calculates the maximum allowed frequency for any character to ensure that no two adjacent characters are the same.\n\n### Example Walkthrough:\n- For the string `\"aabb\"`, the character counts are `{'a': 2, 'b': 2}`. The maximum frequency is `2`, which is not greater than `(4 + 1) // 2 = 2`. So, it is possible to rearrange the string.\n- For the string `\"aaab\"`, the character counts are `{'a': 3, 'b': 1}`. The maximum frequency is `3`, which is greater than `(4 + 1) // 2 = 2`. So, it is not possible to rearrange the string.\n\nThis function efficiently checks if the string can be rearranged to meet the given condition."}
{"task_id": 40, "completion": "Certainly! To find the frequency of elements in a given list of lists using the `collections` module, you can use the `Counter` class from `collections`. Here's how you can implement the `freq_element` function:\n\n```python\nfrom collections import Counter\n\ndef freq_element(list_of_lists):\n    # Flatten the list of lists into a single list\n    flattened_list = [item for sublist in list_of_lists for item in sublist]\n    \n    # Use Counter to get the frequency of each element\n    frequency = Counter(flattened_list)\n    \n    return frequency\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\nresult = freq_element(list_of_lists)\nprint(result)\n```\n\n### Explanation:\n1. **Flattening the List of Lists**: \n   - The list comprehension `[item for sublist in list_of_lists for item in sublist]` is used to flatten the list of lists into a single list. This is necessary because `Counter` works on a single list.\n\n2. **Counting Frequencies**:\n   - The `Counter` class from the `collections` module is used to count the frequency of each element in the flattened list.\n\n3. **Returning the Result**:\n   - The function returns a `Counter` object, which is a dictionary-like object where keys are the elements and values are their respective counts.\n\n### Example Output:\nFor the input `[[1, 2, 3], [2, 3, 4], [3, 4, 5]]`, the output will be:\n```python\nCounter({3: 3, 2: 2, 4: 2, 1: 1, 5: 1})\n```\n\nThis indicates that the element `3` appears 3 times, `2` and `4` appear 2 times each, and `1` and `5` appear once each.\n\n### Additional Notes:\n- If you want the result as a regular dictionary, you can convert the `Counter` object to a dictionary using `dict(result)`.\n- This function works for any list of lists, regardless of the depth of nesting, as long as the elements are hashable (which is required by `Counter`)."}
{"task_id": 41, "completion": "Certainly! Below is a Python function called `filter_evennumbers` that filters even numbers from a list using a lambda function:\n\n```python\ndef filter_evennumbers(numbers):\n    \"\"\"\n    Filters even numbers from the given list using a lambda function.\n\n    :param numbers: List of integers\n    :return: List of even integers\n    \"\"\"\n    return list(filter(lambda x: x % 2 == 0, numbers))\n\n# Example usage:\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven_numbers = filter_evennumbers(numbers)\nprint(even_numbers)  # Output: [2, 4, 6, 8, 10]\n```\n\n### Explanation:\n- The `filter` function is used to filter elements from the list based on a condition.\n- The lambda function `lambda x: x % 2 == 0` checks if a number is even.\n- The `filter` function returns an iterator, so we convert it to a list using `list()`.\n\n### Example:\nIf you call `filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])`, it will return `[2, 4, 6, 8, 10]`."}
{"task_id": 42, "completion": "Certainly! Below is a Python function called `find_sum` that calculates the sum of repeated elements in a given array:\n\n```python\nfrom collections import Counter\n\ndef find_sum(arr):\n    # Count the occurrences of each element in the array\n    element_counts = Counter(arr)\n    \n    # Sum the elements that appear more than once\n    sum_repeated = sum(element for element, count in element_counts.items() if count > 1)\n    \n    return sum_repeated\n\n# Example usage:\narr = [1, 2, 3, 4, 2, 3, 5, 6, 7, 7]\nresult = find_sum(arr)\nprint(\"Sum of repeated elements:\", result)\n```\n\n### Explanation:\n1. **Counter**: We use `Counter` from the `collections` module to count the occurrences of each element in the array.\n2. **Filtering Repeated Elements**: We then filter out the elements that appear more than once using a generator expression.\n3. **Summing Repeated Elements**: Finally, we sum these filtered elements to get the sum of repeated elements.\n\n### Example:\nFor the array `[1, 2, 3, 4, 2, 3, 5, 6, 7, 7]`, the repeated elements are `2, 3, 7`. The sum of these elements is `2 + 3 + 7 = 12`.\n\n### Output:\n```\nSum of repeated elements: 12\n```\n\nThis function will work for any list of integers or other hashable types."}
{"task_id": 43, "completion": "Certainly! To achieve this task, we can use Python's `re` module, which provides support for regular expressions. The goal is to find sequences of lowercase letters joined by an underscore. Here's how you can implement the `text_match` function:\n\n```python\nimport re\n\ndef text_match(text):\n    # Define the regex pattern to match sequences of lowercase letters joined by an underscore\n    pattern = r'[a-z]+_[a-z]+'\n    \n    # Search for the pattern in the input text\n    matches = re.findall(pattern, text)\n    \n    return matches\n\n# Example usage:\ntext = \"hello_world this_is_a_test example_text not_a_match CamelCase\"\nmatches = text_match(text)\nprint(matches)  # Output: ['hello_world', 'this_is_a_test', 'example_text']\n```\n\n### Explanation:\n- **Pattern**: `r'[a-z]+_[a-z]+'`\n  - `[a-z]+` matches one or more lowercase letters.\n  - `_` matches the underscore character.\n  - `[a-z]+` matches one or more lowercase letters again.\n- **`re.findall`**: This function returns all non-overlapping matches of the pattern in the string as a list of strings.\n\n### Example Output:\nFor the input string `\"hello_world this_is_a_test example_text not_a_match CamelCase\"`, the function will return `['hello_world', 'this_is_a_test', 'example_text']`.\n\nThis function will correctly identify and return all sequences of lowercase letters joined by an underscore in the given text."}
{"task_id": 44, "completion": "Certainly! Below is a Python function called `text_match_string` that checks if a given word appears at the beginning of a string. The function uses a regular expression to perform the match.\n\n```python\nimport re\n\ndef text_match_string(word, text):\n    \"\"\"\n    Check if the given word appears at the beginning of the text.\n\n    Parameters:\n    word (str): The word to search for at the beginning of the text.\n    text (str): The text in which to search for the word.\n\n    Returns:\n    bool: True if the word is found at the beginning of the text, False otherwise.\n    \"\"\"\n    # Create a regular expression pattern that matches the word at the beginning of the string\n    pattern = r'^' + re.escape(word)\n    \n    # Search for the pattern in the text\n    match = re.search(pattern, text)\n    \n    # Return True if a match is found, otherwise False\n    return bool(match)\n\n# Example usage:\nprint(text_match_string(\"hello\", \"hello world\"))  # Output: True\nprint(text_match_string(\"hello\", \"world hello\"))  # Output: False\n```\n\n### Explanation:\n- **`re.escape(word)`**: This escapes any special characters in the word so that they are treated as literal characters in the regular expression.\n- **`r'^' + re.escape(word)`**: The `^` symbol in the regular expression ensures that the match occurs at the beginning of the string.\n- **`re.search(pattern, text)`**: This searches for the pattern in the given text.\n- **`bool(match)`**: Converts the match object to a boolean value. If a match is found, it returns `True`; otherwise, it returns `False`.\n\n### Example Outputs:\n- `text_match_string(\"hello\", \"hello world\")` returns `True` because \"hello\" is at the beginning of the string.\n- `text_match_string(\"hello\", \"world hello\")` returns `False` because \"hello\" is not at the beginning of the string.\n\nThis function should work for any word and text input, correctly identifying whether the word is at the start of the string."}
{"task_id": 45, "completion": "Certainly! To find the greatest common divisor (GCD) of an array of elements, we can use the Euclidean algorithm, which is an efficient method for computing the GCD of two numbers. We can extend this algorithm to handle an array of numbers by iteratively applying it to pairs of elements in the array.\n\nHere\u2019s a Python function `get_gcd` that accomplishes this:\n\n```python\nfrom math import gcd\nfrom functools import reduce\n\ndef get_gcd(arr):\n    \"\"\"\n    Compute the greatest common divisor (GCD) of an array of integers.\n\n    :param arr: List of integers\n    :return: GCD of the array elements\n    \"\"\"\n    if not arr:\n        raise ValueError(\"The input array must not be empty.\")\n    \n    # Use reduce to apply the gcd function across the array\n    return reduce(gcd, arr)\n\n# Example usage:\narray = [24, 36, 48, 60]\nresult = get_gcd(array)\nprint(f\"The GCD of {array} is {result}\")\n```\n\n### Explanation:\n1. **Importing Required Functions**:\n   - `gcd` from the `math` module: This function computes the GCD of two numbers.\n   - `reduce` from the `functools` module: This function applies a binary function (in this case, `gcd`) cumulatively to the items of an iterable (the array), from left to right, so as to reduce the iterable to a single value.\n\n2. **Function Definition**:\n   - The function `get_gcd` takes a single argument `arr`, which is a list of integers.\n   - It first checks if the array is empty and raises a `ValueError` if it is.\n   - It then uses `reduce` to apply the `gcd` function across the array, effectively computing the GCD of all elements in the array.\n\n3. **Example Usage**:\n   - The example array `[24, 36, 48, 60]` is passed to the `get_gcd` function, and the result is printed.\n\n### Output:\n```\nThe GCD of [24, 36, 48, 60] is 12\n```\n\nThis function will work for any array of integers and will return the GCD of all the elements in the array."}
{"task_id": 46, "completion": "Certainly! Below is a Python function called `test_distinct` that checks whether all the numbers in a given list are distinct (i.e., no duplicates).\n\n```python\ndef test_distinct(numbers):\n    \"\"\"\n    Determine whether all the numbers in the list are distinct.\n\n    :param numbers: List of numbers (integers, floats, etc.)\n    :return: True if all numbers are distinct, False otherwise\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    unique_numbers = set(numbers)\n    \n    # Compare the length of the set to the length of the original list\n    return len(unique_numbers) == len(numbers)\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(test_distinct([1, 2, 3, 4, 5]))  # Output: True\n    print(test_distinct([1, 2, 2, 3, 4]))  # Output: False\n    print(test_distinct([10, 20, 30, 40, 50]))  # Output: True\n    print(test_distinct([10, 20, 30, 40, 10]))  # Output: False\n```\n\n### Explanation:\n- The function `test_distinct` takes a list of numbers as input.\n- It converts the list to a set, which automatically removes any duplicate values since sets only store unique elements.\n- It then compares the length of the set to the length of the original list. If they are the same, it means all elements in the list were unique, so the function returns `True`. Otherwise, it returns `False`.\n\n### Example Outputs:\n- `test_distinct([1, 2, 3, 4, 5])` returns `True` because all numbers are distinct.\n- `test_distinct([1, 2, 2, 3, 4])` returns `False` because the number `2` is duplicated.\n\nThis function works for any list of numbers, including integers, floats, etc."}
{"task_id": 47, "completion": "To find the last digit of the factorial of `a` divided by the factorial of `b`, we need to compute the last digit of `(a! / b!)`. However, directly computing factorials for large numbers is computationally expensive. Instead, we can use properties of factorials and modular arithmetic to simplify the problem.\n\n### Key Observations:\n1. If `a < b`, then `a! / b!` is not an integer, so we can return `0` as the last digit.\n2. If `a == b`, then `a! / b! = 1`, so the last digit is `1`.\n3. If `a > b`, then `a! / b! = (b+1) * (b+2) * ... * a`. We can compute the product modulo 10 to find the last digit.\n\n### Approach:\n- If `a < b`, return `0`.\n- If `a == b`, return `1`.\n- If `a > b`, compute the product `(b+1) * (b+2) * ... * a` modulo 10.\n\n### Python Implementation:\n\n```python\ndef compute_last_digit(a: int, b: int) -> int:\n    if a < b:\n        return 0\n    elif a == b:\n        return 1\n    else:\n        # Compute the product (b+1) * (b+2) * ... * a modulo 10\n        result = 1\n        for i in range(b + 1, a + 1):\n            result = (result * i) % 10\n            if result == 0:\n                break  # If result is 0, it will remain 0\n        return result\n\n# Example usage:\nprint(compute_last_digit(5, 3))  # Output: 2 (since 5! / 3! = 20, last digit is 0)\nprint(compute_last_digit(7, 7))  # Output: 1 (since 7! / 7! = 1, last digit is 1)\nprint(compute_last_digit(4, 5))  # Output: 0 (since 4! / 5! is not an integer)\n```\n\n### Explanation:\n- The function first checks if `a < b` and returns `0` if true.\n- If `a == b`, it returns `1`.\n- If `a > b`, it computes the product of numbers from `b+1` to `a` modulo 10. If at any point the product becomes `0`, it breaks out of the loop since multiplying by further numbers will keep the result `0`.\n\nThis approach is efficient and avoids computing large factorials directly."}
{"task_id": 48, "completion": "Certainly! To set all odd bits of a given number, we need to ensure that every bit at an odd position (1st, 3rd, 5th, etc.) is set to `1`. Here's how you can achieve this in Python:\n\n```python\ndef odd_bit_set_number(n):\n    # Create a mask with all odd bits set to 1\n    # The mask will be 0xAA...AA in hexadecimal, which is 10101010...1010 in binary\n    # For example, for 8 bits, the mask is 0xAA (10101010)\n    # We can generate the mask by shifting 1 to the left and ORing it with itself\n    mask = 0\n    bit = 1\n    while bit <= n:\n        mask |= bit\n        bit <<= 2  # Move to the next odd bit\n    \n    # Set all odd bits of n by ORing it with the mask\n    result = n | mask\n    return result\n\n# Example usage:\nnumber = 0b10101010  # Binary: 10101010\nresult = odd_bit_set_number(number)\nprint(bin(result))  # Output: 0b10101010 (since all odd bits are already set)\n\nnumber = 0b00000000  # Binary: 00000000\nresult = odd_bit_set_number(number)\nprint(bin(result))  # Output: 0b10101010 (all odd bits are set)\n```\n\n### Explanation:\n1. **Mask Creation**: We create a mask where all odd bits are set to `1`. This is done by starting with `bit = 1` and then shifting it left by 2 positions in each iteration (to move to the next odd bit) and ORing it with the mask.\n\n2. **Setting Odd Bits**: We then OR the original number `n` with the mask to set all odd bits of `n` to `1`.\n\n### Example:\n- If `n = 0b10101010`, the function will return `0b10101010` because all odd bits are already set.\n- If `n = 0b00000000`, the function will return `0b10101010` because all odd bits are set to `1`.\n\nThis function works for any positive integer `n`."}
{"task_id": 49, "completion": "Certainly"}
{"task_id": 50, "completion": "Certainly! Below is a Python function called `min_length_list` that finds the list with the minimum length from a given list of lists using a lambda function:\n\n```python\ndef min_length_list(lists):\n    \"\"\"\n    Finds the list with the minimum length from a given list of lists.\n\n    :param lists: List of lists\n    :return: The list with the minimum length\n    \"\"\"\n    return min(lists, key=lambda x: len(x))\n\n# Example usage:\nlists = [[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]\nresult = min_length_list(lists)\nprint(result)  # Output: [6]\n```\n\n### Explanation:\n- The `min` function is used to find the minimum element in the list `lists`.\n- The `key` parameter is set to a lambda function `lambda x: len(x)`, which returns the length of each list `x`.\n- The `min` function then compares the lengths of the lists and returns the list with the smallest length.\n\n### Example:\nFor the input `[[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]`, the function will return `[6]` because it has the smallest length (1)."}
{"task_id": 51, "completion": "Certainly! Below is a Python function called `check_equilateral` that checks if a triangle is equilateral. An equilateral triangle is one where all three sides are of equal length.\n\n```python\ndef check_equilateral(side1, side2, side3):\n    \"\"\"\n    Check if a triangle is equilateral.\n\n    Parameters:\n    side1 (float): Length of the first side of the triangle.\n    side2 (float): Length of the second side of the triangle.\n    side3 (float): Length of the third side of the triangle.\n\n    Returns:\n    None: Prints whether the triangle is equilateral or not.\n    \"\"\"\n    if side1 == side2 == side3:\n        print(\"The triangle is equilateral.\")\n    else:\n        print(\"The triangle is not equilateral.\")\n\n# Example usage:\ncheck_equilateral(5, 5, 5)  # Output: The triangle is equilateral.\ncheck_equilateral(5, 4, 5)  # Output: The triangle is not equilateral.\n```\n\n### Explanation:\n- The function `check_equilateral` takes three arguments: `side1`, `side2`, and `side3`, which represent the lengths of the sides of the triangle.\n- It checks if all three sides are equal using the condition `side1 == side2 == side3`.\n- If the condition is true, it prints \"The triangle is equilateral.\"\n- If the condition is false, it prints \"The triangle is not equilateral.\"\n\n### Example Outputs:\n- `check_equilateral(5, 5, 5)` will output: `The triangle is equilateral.`\n- `check_equilateral(5, 4, 5)` will output: `The triangle is not equilateral.`\n\nThis function assumes that the input values are valid lengths for the sides of a triangle. If you want to add additional checks to ensure that the sides can form a valid triangle, you can include the triangle inequality theorem, which states that the sum of the lengths of any two sides must be greater than the length of the remaining side."}
{"task_id": 52, "completion": "Certainly! To calculate the area of a parallelogram, you need to know the base and the height. The formula for the area of a parallelogram is:\n\n\\[ \\text{Area} = \\text{base} \\times \\text{height} \\]\n\nHere\u2019s how you can implement this in Python:\n\n```python\ndef parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram.\n    \"\"\"\n    return base * height\n\n# Example usage:\nbase = 5.0\nheight = 3.0\narea = parallelogram_area(base, height)\nprint(f\"The area of the parallelogram is: {area}\")\n```\n\n### Explanation:\n- The function `parallelogram_area` takes two arguments: `base` and `height`.\n- It returns the product of `base` and `height`, which is the area of the parallelogram.\n- The example usage demonstrates how to call the function with specific values for `base` and `height` and prints the result.\n\n### Example Output:\n```\nThe area of the parallelogram is: 15.0\n```\n\nThis function will work for any positive values of `base` and `height`."}
{"task_id": 53, "completion": "Certainly! Below is a Python function called `check_equality` that checks whether the first and last characters of a given string are equal:\n\n```python\ndef check_equality(s):\n    # Check if the string is empty\n    if not s:\n        return False\n    \n    # Compare the first and last characters\n    return s[0] == s[-1]\n\n# Example usage:\nprint(check_equality(\"hello\"))  # Output: False\nprint(check_equality(\"racecar\"))  # Output: True\nprint(check_equality(\"a\"))  # Output: True\nprint(check_equality(\"\"))  # Output: False\n```\n\n### Explanation:\n- The function `check_equality` takes a single argument `s`, which is the string to be checked.\n- It first checks if the string is empty. If the string is empty, it returns `False` because there are no characters to compare.\n- If the string is not empty, it compares the first character (`s[0]`) with the last character (`s[-1]`).\n- The function returns `True` if the first and last characters are the same, otherwise it returns `False`.\n\n### Example Outputs:\n- `check_equality(\"hello\")` returns `False` because 'h' and 'o' are different.\n- `check_equality(\"racecar\")` returns `True` because 'r' and 'r' are the same.\n- `check_equality(\"a\")` returns `True` because the first and last character are the same (it's the same character).\n- `check_equality(\"\")` returns `False` because the string is empty.\n\nThis function should work for any string input."}
{"task_id": 54, "completion": "Certainly! Counting sort is an efficient algorithm for sorting integers when the range of potential items is known and not significantly larger than the number of items to be sorted. Here's a Python implementation of the `counting_sort` function:\n\n```python\ndef counting_sort(arr):\n    # Find the maximum element in the array to determine the range\n    max_val = max(arr)\n    min_val = min(arr)\n    \n    # Create a count array to store the count of each unique element\n    count = [0] * (max_val - min_val + 1)\n    \n    # Store the count of each element in the count array\n    for num in arr:\n        count[num - min_val] += 1\n    \n    # Modify the count array such that each element at each index\n    # stores the sum of previous counts. This will help in placing\n    # the elements in the correct position in the output array.\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    \n    # Create an output array to store the sorted elements\n    output = [0] * len(arr)\n    \n    # Build the output array by placing elements in their correct position\n    for num in reversed(arr):\n        output[count[num - min_val] - 1] = num\n        count[num - min_val] -= 1\n    \n    # Copy the sorted elements back to the original array\n    for i in range(len(arr)):\n        arr[i] = output[i]\n    \n    return arr\n\n# Example usage:\narr = [4, 2, 2, 8, 3, 3, 1]\nsorted_arr = counting_sort(arr)\nprint(\"Sorted array:\", sorted_arr)\n```\n\n### Explanation:\n1. **Find the Range**: Determine the minimum and maximum values in the array to know the range of the numbers.\n2. **Count Array**: Create a count array where each index represents a number in the range, and the value at that index represents the count of that number in the input array.\n3. **Cumulative Count**: Modify the count array so that each index contains the sum of the previous counts. This helps in placing the elements in the correct position in the output array.\n4. **Build Output Array**: Iterate through the input array in reverse order, and place each element in its correct position in the output array using the count array.\n5. **Copy Back**: Copy the sorted elements from the output array back to the original array.\n\n### Example:\nFor the input array `[4, 2, 2, 8, 3, 3, 1]`, the function will return the sorted array `[1, 2, 2, 3, 3, 4, 8]`.\n\n### Time Complexity:\n- **O(n + k)**, where `n` is the number of elements in the input array and `k` is the range of the input (i.e., `max_val - min_val + 1`).\n\n### Space Complexity:\n- **O(n + k)**, due to the additional space used for the count and output arrays.\n\nThis implementation is efficient for sorting integers when the range of values is not excessively large."}
{"task_id": 55, "completion": "Certainly! To find the \\( t \\)-th term of a geometric series, we can use the formula for the \\( n \\)-th term of a geometric sequence:\n\n\\[\na_n = a_1 \\times r^{(n-1)}\n\\]\n\nwhere:\n- \\( a_n \\) is the \\( n \\)-th term,\n- \\( a_1 \\) is the first term,\n- \\( r \\) is the common ratio,\n- \\( n \\) is the term number.\n\nHere's how you can implement this in Python:\n\n```python\ndef tn_gp(a1, r, n):\n    \"\"\"\n    Calculate the t-nth term of a geometric series.\n\n    Parameters:\n    a1 (float): The first term of the geometric series.\n    r (float): The common ratio of the geometric series.\n    n (int): The term number to find.\n\n    Returns:\n    float: The t-nth term of the geometric series.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Term number 'n' must be a positive integer.\")\n    \n    return a1 * (r ** (n - 1))\n\n# Example usage:\na1 = 2  # First term\nr = 3   # Common ratio\nn = 4   # Term number\n\nresult = tn_gp(a1, r, n)\nprint(f\"The {n}-th term of the geometric series is: {result}\")\n```\n\n### Explanation:\n- The function `tn_gp` takes three arguments: `a1` (the first term), `r` (the common ratio), and `n` (the term number).\n- It calculates the \\( n \\)-th term using the formula \\( a_n = a_1 \\times r^{(n-1)} \\).\n- The function includes a check to ensure that the term number \\( n \\) is a positive integer. If not, it raises a `ValueError`.\n\n### Example Output:\nFor the example provided:\n- \\( a_1 = 2 \\)\n- \\( r = 3 \\)\n- \\( n = 4 \\)\n\nThe output will be:\n```\nThe 4-th term of the geometric series is: 54\n```\n\nThis is because:\n\\[\na_4 = 2 \\times 3^{(4-1)} = 2 \\times 27 = 54\n```\n\nYou can use this function to find any term in a geometric series by providing the appropriate values for \\( a_1 \\), \\( r \\), and \\( n \\)."}
{"task_id": 56, "completion": "Certainly! Below is a Python function called `check` that determines if a given number is one less than twice its reverse.\n\n```python\ndef check(n):\n    # Reverse the number\n    reversed_n = int(str(n)[::-1])\n    \n    # Check if the number is one less than twice its reverse\n    return n == 2 * reversed_n - 1\n\n# Example usage:\nnumber = 21\nif check(number):\n    print(f\"{number} is one less than twice its reverse.\")\nelse:\n    print(f\"{number} is not one less than twice its reverse.\")\n```\n\n### Explanation:\n1. **Reversing the Number**: The number `n` is converted to a string, reversed using slicing (`[::-1]`), and then converted back to an integer.\n2. **Checking the Condition**: The function checks if the original number `n` is equal to twice the reversed number minus one.\n3. **Return Value**: The function returns `True` if the condition is met, otherwise `False`.\n\n### Example:\nFor `n = 21`:\n- The reverse of `21` is `12`.\n- Twice the reverse is `24`.\n- One less than twice the reverse is `23`.\n- Since `21` is not equal to `23`, the function returns `False`.\n\nFor `n = 23`:\n- The reverse of `23` is `32`.\n- Twice the reverse is `64`.\n- One less than twice the reverse is `63`.\n- Since `23` is not equal to `63`, the function returns `False`.\n\nFor `n = 19`:\n- The reverse of `19` is `91`.\n- Twice the reverse is `182`.\n- One less than twice the reverse is `181`.\n- Since `19` is not equal to `181`, the function returns `False`.\n\nYou can test the function with different numbers to see if they satisfy the condition."}
{"task_id": 57, "completion": "Certainly! The task is to write a Python function called `find_max_num` that takes a list of digits and returns the largest number that can be formed using those digits.\n\nHere\u2019s how you can implement it:\n\n```python\ndef find_max_num(digits):\n    # Convert each digit to a string to facilitate sorting\n    str_digits = [str(d) for d in digits]\n    \n    # Sort the digits in descending order to form the largest number\n    str_digits.sort(reverse=True)\n    \n    # Join the sorted digits into a single string and convert it to an integer\n    max_num = int(''.join(str_digits))\n    \n    return max_num\n\n# Example usage:\ndigits = [1, 2, 3, 4]\nprint(find_max_num(digits))  # Output: 4321\n\ndigits = [9, 8, 7, 6]\nprint(find_max_num(digits))  # Output: 9876\n\ndigits = [5, 5, 5, 5]\nprint(find_max_num(digits))  # Output: 5555\n```\n\n### Explanation:\n1. **Convert Digits to Strings**: We first convert each digit to a string. This is because sorting numbers as strings will allow us to easily arrange them in the desired order.\n2. **Sort in Descending Order**: We sort the list of string digits in descending order. This ensures that the largest digits come first.\n3. **Join and Convert**: After sorting, we join the list of strings into a single string and then convert it back to an integer to get the largest possible number.\n\n### Example Walkthrough:\n- For the input `[1, 2, 3, 4]`, the sorted list in descending order is `['4', '3', '2', '1']`, which when joined becomes `'4321'`, and converting it to an integer gives `4321`.\n- For the input `[9, 8, 7, 6]`, the sorted list is `['9', '8', '7', '6']`, which becomes `'9876'`, and the integer is `9876`.\n\nThis function will work for any list of digits and will always return the largest possible number that can be formed with those digits."}
{"task_id": 58, "completion": "Certainly! To determine if two integers have opposite signs, we can use the fact that the product of two numbers with opposite signs is negative. Here's a Python function called `opposite_signs` that checks whether two given integers have opposite signs:\n\n```python\ndef opposite_signs(x, y):\n    \"\"\"\n    Check if two integers have opposite signs.\n\n    Parameters:\n    x (int): The first integer.\n    y (int): The second integer.\n\n    Returns:\n    bool: True if the integers have opposite signs, False otherwise.\n    \"\"\"\n    return (x < 0) != (y < 0)\n\n# Example usage:\nprint(opposite_signs(5, -3))  # Output: True\nprint(opposite_signs(-4, -7))  # Output: False\nprint(opposite_signs(10, 20))  # Output: False\n```\n\n### Explanation:\n- The function `opposite_signs` takes two integers `x` and `y` as input.\n- It checks if `x` is negative and `y` is positive, or vice versa, by comparing the signs of `x` and `y`.\n- The expression `(x < 0) != (y < 0)` returns `True` if one of the numbers is negative and the other is positive, indicating that they have opposite signs.\n- If both numbers are either positive or negative, the function returns `False`.\n\n### Example Outputs:\n- `opposite_signs(5, -3)` returns `True` because 5 is positive and -3 is negative.\n- `opposite_signs(-4, -7)` returns `False` because both -4 and -7 are negative.\n- `opposite_signs(10, 20)` returns `False` because both 10 and 20 are positive.\n\nThis function is efficient and works in constant time \\(O(1)\\)."}
{"task_id": 59, "completion": "Certainly! The nth octagonal number can be calculated using the formula:\n\n\\[\nO_n = n(3n - 2)\n\\]\n\nHere\u2019s a Python function called `is_octagonal` that calculates the nth octagonal number:\n\n```python\ndef is_octagonal(n):\n    \"\"\"\n    Calculate the nth octagonal number.\n\n    Parameters:\n    n (int): The position of the octagonal number to calculate.\n\n    Returns:\n    int: The nth octagonal number.\n    \"\"\"\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return n * (3 * n - 2)\n\n# Example usage:\nif __name__ == \"__main__\":\n    n = 5\n    print(f\"The {n}th octagonal number is: {is_octagonal(n)}\")\n```\n\n### Explanation:\n- The function `is_octagonal` takes an integer `n` as input.\n- It checks if `n` is a positive integer. If not, it raises a `ValueError`.\n- It then calculates the nth octagonal number using the formula \\( O_n = n(3n - 2) \\) and returns the result.\n\n### Example:\nFor `n = 5`, the function will calculate:\n\n\\[\nO_5 = 5 \\times (3 \\times 5 - 2) = 5 \\times (15 - 2) = 5 \\times 13 = 65\n\\]\n\nSo, the 5th octagonal number is 65.\n\n### Usage:\nYou can call the function with different values of `n` to get the corresponding octagonal number. For example:\n\n```python\nprint(is_octagonal(1))  # Output: 1\nprint(is_octagonal(2))  # Output: 8\nprint(is_octagonal(3))  # Output: 21\nprint(is_octagonal(4))  # Output: 40\nprint(is_octagonal(5))  # Output: 65\n```\n\nThis function will correctly compute the nth octagonal number for any positive integer `n`."}
{"task_id": 60, "completion": "To solve this problem, we need to find the maximum length of a subsequence in a given array where the difference between adjacent elements is either `+1` or `-1`. This means that the subsequence should consist of elements that are either increasing or decreasing by 1.\n\nHere\u2019s how we can approach this problem:\n\n1. **Dynamic Programming Approach**: We can use dynamic programming to keep track of the longest subsequence ending at each index where the difference between adjacent elements is either `+1` or `-1`.\n\n2. **Hash Map for Lookup**: We can use a hash map (dictionary) to store the length of the longest subsequence ending with a particular value.\n\n3. **Iterate Through the Array**: For each element in the array, we check if the previous element (either `+1` or `-1`) exists in the hash map. If it does, we update the current element's subsequence length accordingly.\n\n4. **Update the Result**: We keep track of the maximum length found during the iteration.\n\nHere\u2019s the Python implementation of the `max_len_sub` function:\n\n```python\ndef max_len_sub(arr):\n    if not arr:\n        return 0\n    \n    # Dictionary to store the length of the longest subsequence ending with a particular value\n    dp = {}\n    max_length = 1\n    \n    for num in arr:\n        # Initialize the length of the subsequence ending with num as 1\n        dp[num] = 1\n        \n        # Check if num - 1 exists in the dictionary\n        if num - 1 in dp:\n            dp[num] = max(dp[num], dp[num - 1] + 1)\n        \n        # Check if num + 1 exists in the dictionary\n        if num + 1 in dp:\n            dp[num] = max(dp[num], dp[num + 1] + 1)\n        \n        # Update the maximum length found so far\n        max_length = max(max_length, dp[num])\n    \n    return max_length\n\n# Example usage:\narr = [1, 2, 3, 4, 5, 3, 2]\nprint(max_len_sub(arr))  # Output: 5 (Subsequence: [1, 2, 3, 4, 5])\n\narr = [10, 9, 4, 5, 4, 8, 6]\nprint(max_len_sub(arr))  # Output: 3 (Subsequence: [4, 5, 4] or [9, 8, 6])\n```\n\n### Explanation:\n- **Initialization**: We initialize a dictionary `dp` to store the length of the longest subsequence ending with each number.\n- **Iteration**: For each number in the array, we check if the previous number (`num - 1`) or the next number (`num + 1`) exists in the dictionary. If they do, we update the current number's subsequence length.\n- **Update Maximum Length**: We keep track of the maximum length found during the iteration.\n- **Return Result**: Finally, we return the maximum length found.\n\nThis approach ensures that we efficiently find the longest subsequence where the difference between adjacent elements is either `+1` or `-1`. The time complexity is O(n), where `n` is the length of the array, and the space complexity is O(n) due to the dictionary."}

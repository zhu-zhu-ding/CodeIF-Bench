{"task_id": 11, "completion": "def remove_occ(string, char):\n    # Handle empty string or character\n    if not string or not char:\n        return string\n    \n    # Find first and last occurrence\n    first = string.find(char)\n    last = string.rfind(char)\n    \n    # If character not found, return original string\n    if first == -1:\n        return string\n    \n    # If only one occurrence, remove it\n    if first == last:\n        return string[:first] + string[first + 1:]\n    \n    # Remove both first and last occurrences\n    return string[:first] + string[first + 1:last] + string[last + 1:]\n", "result": "passed", "passed": true}
{"task_id": 12, "completion": "def sort_matrix(matrix):\n    # Sort matrix rows based on their sums\n    return sorted(matrix, key=sum)\n", "result": "passed", "passed": true}
{"task_id": 13, "completion": "from collections import Counter\n\ndef count_common(text_dict, n=5):\n    \"\"\"\n    Count the most common words across all values in a dictionary.\n    \n    Args:\n        text_dict (dict): Dictionary containing text values\n        n (int): Number of most common words to return (default=5)\n    \n    Returns:\n        list: List of tuples containing (word, count) pairs\n    \"\"\"\n    # Combine all values from the dictionary into a single string\n    all_text = ' '.join(str(value) for value in text_dict.values())\n    \n    # Split into words and convert to lowercase\n    words = all_text.lower().split()\n    \n    # Count occurrences using Counter\n    word_counts = Counter(words)\n    \n    # Return n most common words\n    return word_counts.most_common(n)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpeoajg6qu.py\", line 26, in <module>\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n  File \"/tmp/tmpeoajg6qu.py\", line 15, in count_common\n    all_text = ' '.join(str(value) for value in text_dict.values())\nAttributeError: 'list' object has no attribute 'values'", "passed": false}
{"task_id": 14, "completion": "def find_volume(base, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n    \n    Args:\n        base (float): The base length of the triangle\n        height (float): The height of the triangle\n        length (float): The length (depth) of the prism\n    \n    Returns:\n        float: The volume of the triangular prism\n    \"\"\"\n    # Calculate the area of the triangle base\n    triangle_area = 0.5 * base * height\n    \n    # Calculate the volume by multiplying base area with length\n    volume = triangle_area * length\n    \n    return volume\n", "result": "passed", "passed": true}
{"task_id": 15, "completion": "def split_lowerstring(text):\n    result = []\n    current_word = \"\"\n    \n    for char in text:\n        if char.islower():\n            if current_word:\n                result.append(current_word)\n            current_word = char\n        else:\n            current_word += char\n    \n    # Append the last word if it exists\n    if current_word:\n        result.append(current_word)\n    \n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdbjf48tc.py\", line 19, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+(?:_[a-z]+)*'\n    matches = re.findall(pattern, text)\n    return matches\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpat7bwbl7.py\", line 8, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n    \n    Args:\n        side_length (float): Length of one side of the square\n        \n    Returns:\n        float: Perimeter of the square\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative\")\n    \n    perimeter = 4 * side_length\n    return perimeter\n", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(string1: str, string2: str) -> str:\n    # Convert string2 to a set for O(1) lookup\n    chars_to_remove = set(string2)\n    \n    # Use list comprehension to keep only characters not in chars_to_remove\n    return ''.join(char for char in string1 if char not in chars_to_remove)\n", "result": "passed", "passed": true}
{"task_id": 19, "completion": "def test_duplicate(arr):\n    \"\"\"\n    Check if an array contains any duplicate elements.\n    \n    Args:\n        arr (list): List of integers to check\n        \n    Returns:\n        bool: True if duplicates exist, False otherwise\n    \"\"\"\n    seen = set()\n    \n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    \n    return False\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    arr1 = [1, 2, 3, 4, 5]\n    arr2 = [1, 2, 3, 2, 5]\n    \n    print(f\"Array {arr1} has duplicates: {test_duplicate(arr1)}\")  # False\n    print(f\"Array {arr2} has duplicates: {test_duplicate(arr2)}\")  # True\n", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(num):\n    \"\"\"\n    Check if a given number is a Woodall number.\n    A Woodall number follows the formula: n \u00d7 2^n - 1, where n is a natural number.\n    \n    Args:\n        num (int): The number to check\n        \n    Returns:\n        bool: True if the number is a Woodall number, False otherwise\n    \"\"\"\n    if num < 1:  # Woodall numbers are always positive\n        return False\n    \n    n = 1\n    while True:\n        woodall = n * (2 ** n) - 1\n        if woodall == num:\n            return True\n        if woodall > num:  # If we exceed the input number, it's not a Woodall number\n            return False\n        n += 1\n", "result": "passed", "passed": true}
{"task_id": 21, "completion": "def multiples_of_num(n, m):\n    \"\"\"\n    Find m multiples of number n.\n    \n    Args:\n        n (int): The number to find multiples of\n        m (int): The number of multiples to find\n    \n    Returns:\n        list: A list containing m multiples of n\n    \"\"\"\n    return [n * i for i in range(1, m + 1)]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpg6_q8ndf.py\", line 14, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "completion": "def find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1  # Return -1 if no duplicates found\n", "result": "passed", "passed": true}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists):\n    if not list_of_lists:  # Check if input list is empty\n        return 0\n    \n    # Use max() with a key function that sums each sublist\n    return max(sum(sublist) for sublist in list_of_lists)\n", "result": "passed", "passed": true}
{"task_id": 24, "completion": "def binary_to_decimal(binary):\n    try:\n        # Convert string to integer using base 2\n        decimal = int(str(binary), 2)\n        return decimal\n    except ValueError:\n        return \"Invalid binary number\"\n", "result": "passed", "passed": true}
{"task_id": 25, "completion": "def find_product(arr):\n    # Convert array to set to remove duplicates\n    unique_elements = set(arr)\n    \n    # Calculate product of unique elements\n    product = 1\n    for num in unique_elements:\n        product *= num\n        \n    return product\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkbxddm2l.py\", line 12, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(tuple_list, k):\n    # Convert tuple list elements into a flat set for efficient lookup\n    elements = set()\n    for tup in tuple_list:\n        elements.update(tup)\n    \n    # Check if all numbers from 0 to k-1 are present\n    required_elements = set(range(k))\n    return elements == required_elements\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmlp6fssd.py\", line 11, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "completion": "def remove(string_list):\n    return [''.join(char for char in s if not char.isdigit()) for s in string_list]\n", "result": "passed", "passed": true}
{"task_id": 28, "completion": "def binomial_coeff(n: int, k: int) -> int:\n    \"\"\"\n    Calculate the binomial coefficient C(n,k) - number of ways to choose k items from n items.\n    \n    Args:\n        n (int): Total number of items\n        k (int): Number of items to choose\n        \n    Returns:\n        int: The binomial coefficient value\n        \n    Raises:\n        ValueError: If n < 0 or k < 0 or k > n\n    \"\"\"\n    # Input validation\n    if n < 0 or k < 0 or k > n:\n        raise ValueError(\"Invalid input: Require n >= 0, k >= 0, and k <= n\")\n    \n    # Optimize by using the smaller value of k or n-k\n    k = min(k, n - k)\n    \n    # Base cases\n    if k == 0:\n        return 1\n    if k == 1:\n        return n\n    \n    # Calculate using multiplicative formula\n    result = 1\n    for i in range(k):\n        result *= (n - i)\n        result //= (i + 1)\n    \n    return result\n", "result": "passed", "passed": true}
{"task_id": 29, "completion": "def get_odd_occurrence(arr):\n    result = 0\n    for element in arr:\n        result ^= element\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpab2v4bzh.py\", line 7, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    if not s:\n        return 0\n        \n    n = len(s)\n    count = 0\n    \n    # Consider each possible substring\n    for i in range(n):\n        for j in range(i, n):\n            # If first and last characters match, increment count\n            if s[i] == s[j]:\n                count += 1\n                \n    return count\n", "result": "passed", "passed": true}
{"task_id": 31, "completion": "from heapq import heappush, heappop\nfrom collections import Counter\n\ndef func(nums, k):\n    # Count frequency of each number\n    freq_counter = Counter(nums)\n    \n    # Create min heap to maintain top k elements\n    heap = []\n    \n    for num, freq in freq_counter.items():\n        # Push tuple of (frequency, number) to heap\n        heappush(heap, (freq, num))\n        # If heap size exceeds k, remove smallest frequency element\n        if len(heap) > k:\n            heappop(heap)\n    \n    # Extract the k most frequent elements\n    result = []\n    while heap:\n        freq, num = heappop(heap)\n        result.append(num)\n    \n    # Return result in descending order of frequency\n    return result[::-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpn27ij2zo.py\", line 27, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n  File \"/tmp/tmpn27ij2zo.py\", line 6, in func\n    freq_counter = Counter(nums)\n  File \"/home/liminxiao/miniconda3/envs/DevEval/lib/python3.9/collections/__init__.py\", line 593, in __init__\n    self.update(iterable, **kwds)\n  File \"/home/liminxiao/miniconda3/envs/DevEval/lib/python3.9/collections/__init__.py\", line 679, in update\n    _count_elements(self, iterable)\nTypeError: unhashable type: 'list'", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    largest_prime = -1\n    \n    # Handle division by 2 separately to simplify the loop\n    while n % 2 == 0:\n        largest_prime = 2\n        n = n // 2\n    \n    # Check odd numbers up to sqrt(n)\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            largest_prime = i\n            n = n // i\n    \n    # If n is still greater than 2, it's prime itself\n    if n > 2:\n        largest_prime = n\n    \n    return largest_prime\n", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(decimal_num):\n    if decimal_num == 0:\n        return \"0\"\n    \n    # Handle negative numbers\n    is_negative = decimal_num < 0\n    decimal_num = abs(decimal_num)\n    \n    binary = \"\"\n    while decimal_num > 0:\n        binary = str(decimal_num % 2) + binary\n        decimal_num //= 2\n    \n    return \"-\" + binary if is_negative else binary\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpitl3q52t.py\", line 16, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "completion": "def find_missing(arr):\n    n = len(arr)\n    # If array is empty, return None\n    if n == 0:\n        return None\n        \n    # Expected sum of sequence from arr[0] to arr[-1]\n    expected_sum = ((arr[-1] * (arr[-1] + 1)) // 2) - ((arr[0] - 1) * arr[0] // 2)\n    \n    # Actual sum of array\n    actual_sum = sum(arr)\n    \n    # Missing number is the difference\n    missing = expected_sum - actual_sum\n    \n    return missing if missing != 0 else None\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpu0zfu9s0.py\", line 18, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    \"\"\"\n    Find the n-th rectangular number.\n    \n    Args:\n        n (int): The position of the rectangular number to find (n > 0)\n    \n    Returns:\n        int: The n-th rectangular number\n    \n    Raises:\n        ValueError: If n is less than or equal to 0\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return n * (n + 1)\n", "result": "passed", "passed": true}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator, n):\n    if denominator == 0:\n        raise ValueError(\"Denominator cannot be zero\")\n    \n    # Handle negative numbers\n    if numerator * denominator < 0:\n        return \"-\" + find_nth_digit(abs(numerator), abs(denominator), n)\n    \n    numerator = abs(numerator)\n    denominator = abs(denominator)\n    \n    # Get the decimal digits\n    quotient = numerator // denominator\n    remainder = numerator % denominator\n    \n    # If n is 0, return the digit before decimal point\n    if n == 0:\n        return str(quotient)[-1]\n    \n    # Calculate decimal digits\n    decimal_digits = \"\"\n    remainders = {}\n    position = 0\n    \n    while remainder != 0 and position < n + 1:\n        # Check for repeating decimals\n        if remainder in remainders:\n            break\n            \n        remainders[remainder] = position\n        remainder *= 10\n        decimal_digits += str(remainder // denominator)\n        remainder %= denominator\n        position += 1\n    \n    # If we have enough digits\n    if n <= len(decimal_digits):\n        return decimal_digits[n-1]\n    else:\n        return \"0\"  # If the decimal terminates before nth position\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpccvxkayk.py\", line 42, in <module>\n    assert find_nth_digit(1,2,1) == 5\nAssertionError", "passed": false}
{"task_id": 37, "completion": "def sort_mixed_list(mixed_list):\n    # Separate integers and strings\n    integers = [x for x in mixed_list if isinstance(x, int)]\n    strings = [x for x in mixed_list if isinstance(x, str)]\n    \n    # Sort each list separately\n    integers.sort()\n    strings.sort()\n    \n    # Return combined sorted list\n    return integers + strings\n", "result": "passed", "passed": true}
{"task_id": 38, "completion": "def div_even_odd(numbers):\n    # Initialize variables to store first even and odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Find first even and odd numbers\n    for num in numbers:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Check if both even and odd numbers were found\n    if first_even is None or first_odd is None:\n        return \"Cannot perform division: missing even or odd number\"\n    \n    # Perform division and return result\n    return first_even / first_odd\n", "result": "passed", "passed": true}
{"task_id": 39, "completion": "from collections import Counter\nimport heapq\n\ndef rearrange_string(s: str) -> str:\n    # Count frequency of each character\n    char_count = Counter(s)\n    \n    # Create a max heap (using negative counts since heapq is min heap)\n    max_heap = [(-count, char) for char, count in char_count.items()]\n    heapq.heapify(max_heap)\n    \n    result = []\n    \n    # Keep track of the previous character and its count\n    prev_count, prev_char = 0, ''\n    \n    while max_heap:\n        # Get the character with highest frequency\n        count, char = heapq.heappop(max_heap)\n        result.append(char)\n        \n        # If we had a previous character waiting, add it back to heap\n        if prev_count < 0:\n            heapq.heappush(max_heap, (prev_count, prev_char))\n            \n        # Update previous character info\n        prev_count, prev_char = count + 1, char\n        \n    # Check if the resulting string length matches input length\n    return ''.join(result) if len(result) == len(s) else ''\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9y6xdlwv.py\", line 32, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "completion": "from collections import Counter\nfrom itertools import chain\n\ndef freq_element(list_of_lists):\n    # Flatten the list of lists and count elements using Counter\n    flat_list = list(chain.from_iterable(list_of_lists))\n    frequency = Counter(flat_list)\n    return dict(frequency)\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    test_list = [[1, 2, 3], [4, 2, 3], [1, 2]]\n    result = freq_element(test_list)\n    print(result)  # Output: {1: 2, 2: 3, 3: 2, 4: 1}\n", "result": "passed", "passed": true}
{"task_id": 41, "completion": "def filter_evennumbers(numbers):\n    return list(filter(lambda x: x % 2 == 0, numbers))\n", "result": "passed", "passed": true}
{"task_id": 42, "completion": "def find_sum(arr):\n    # Create a dictionary to store element frequencies\n    freq = {}\n    \n    # Count frequency of each element\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    \n    # Calculate sum of repeated elements\n    repeated_sum = sum(num for num, count in freq.items() if count > 1)\n    \n    return repeated_sum\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2rmiq9fn.py\", line 14, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    pattern = r'^[a-z]+_[a-z]+$'\n    if re.search(pattern, text):\n        return True\n    return False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppg7_dbl6.py\", line 9, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 44, "completion": "import re\n\ndef text_match_string(text):\n    \"\"\"\n    Check if the string starts with a word character sequence.\n    Returns True if there's a match, False otherwise.\n    \n    Args:\n        text (str): The input string to check\n        \n    Returns:\n        bool: True if string starts with a word, False otherwise\n    \"\"\"\n    pattern = '^[A-Za-z]+' \n    if re.search(pattern, text):\n        return True\n    return False\n\n# Example usage:\nprint(text_match_string(\"Hello World\"))  # True\nprint(text_match_string(\"123 Hello\"))    # False\nprint(text_match_string(\" Hello\"))       # False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpn4g4jgq_.py\", line 24, in <module>\n    assert text_match_string(\" python\")==('Not matched!')\nAssertionError", "passed": false}
{"task_id": 45, "completion": "def get_gcd(arr):\n    from math import gcd\n    from functools import reduce\n    \n    if not arr:\n        return None\n    \n    # Handle negative numbers by using absolute values\n    arr = [abs(num) for num in arr]\n    \n    # Reduce applies gcd function pairwise to the array elements\n    return reduce(gcd, arr)\n", "result": "passed", "passed": true}
{"task_id": 46, "completion": "def test_distinct(numbers):\n    \"\"\"\n    Check if all numbers in the given sequence are distinct.\n    \n    Args:\n        numbers: An iterable of numbers\n        \n    Returns:\n        bool: True if all numbers are distinct, False otherwise\n    \"\"\"\n    return len(set(numbers)) == len(numbers)\n", "result": "passed", "passed": true}
{"task_id": 47, "completion": "def compute_last_digit(a, b):\n    if a > b:\n        return 0\n    \n    result = 1\n    # We only need to multiply numbers from (a+1) to b\n    # And we only care about the last digit at each step\n    for i in range(a + 1, b + 1):\n        result = (result * (i % 10)) % 10\n        \n    return result\n", "result": "passed", "passed": true}
{"task_id": 48, "completion": "def odd_bit_set_number(n):\n    # Create a mask with all odd bits set (1,3,5,7...)\n    # In binary: ...1010101\n    mask = 0xAAAAAAAA\n    \n    # Perform OR operation to set all odd bits\n    result = n | mask\n    \n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp15adbe2a.py\", line 11, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(matrix, position=0):\n    \"\"\"\n    Extract elements from a specified position in each sublist of a 2D list.\n    \n    Args:\n        matrix (list): A 2D list/matrix\n        position (int, optional): Position of element to extract (defaults to 0)\n    \n    Returns:\n        list: Elements from the specified position of each sublist\n    \"\"\"\n    result = []\n    for sublist in matrix:\n        if sublist and len(sublist) > position:\n            result.append(sublist[position])\n    return result\n", "result": "passed", "passed": true}
{"task_id": 50, "completion": "def min_length_list(lists):\n    return min(lists, key=lambda x: len(x))\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    test_lists = [[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]\n    result = min_length_list(test_lists)\n    print(f\"Lists: {test_lists}\")\n    print(f\"List with minimum length: {result}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmptobgymma.py\", line 12, in <module>\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nAssertionError", "passed": false}
{"task_id": 51, "completion": "def check_equilateral(side1, side2, side3):\n    if side1 == side2 == side3:\n        return \"This is an equilateral triangle\"\n    else:\n        return \"This is not an equilateral triangle\"\n\n# Example usage\nprint(check_equilateral(5, 5, 5))  # Equilateral\nprint(check_equilateral(5, 4, 5))  # Not equilateral\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpau4vvh6n.py\", line 11, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n    \n    Args:\n        base (float): The length of the base of the parallelogram\n        height (float): The perpendicular height of the parallelogram\n        \n    Returns:\n        float: The area of the parallelogram\n    \"\"\"\n    if base <= 0 or height <= 0:\n        raise ValueError(\"Base and height must be positive numbers\")\n    \n    area = base * height\n    return area\n", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(text):\n    if not text:  # Check if string is empty\n        return False\n    \n    # Compare first and last characters\n    return text[0].lower() == text[-1].lower()\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpop72tz1n.py\", line 8, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 54, "completion": "def counting_sort(arr):\n    if not arr:\n        return arr\n    \n    # Find the range of input array\n    max_val = max(arr)\n    min_val = min(arr)\n    range_of_elements = max_val - min_val + 1\n    \n    # Create a counting array to store count of each unique object\n    count = [0] * range_of_elements\n    \n    # Store count of each object\n    for num in arr:\n        count[num - min_val] += 1\n    \n    # Modify count array such that each element at each index \n    # stores actual position of each object\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    \n    # Create an output array\n    output = [0] * len(arr)\n    \n    # Build the output array\n    for i in range(len(arr) - 1, -1, -1):\n        output[count[arr[i] - min_val] - 1] = arr[i]\n        count[arr[i] - min_val] -= 1\n    \n    # Copy the output array to arr\n    for i in range(len(arr)):\n        arr[i] = output[i]\n    \n    return arr\n", "result": "passed", "passed": true}
{"task_id": 55, "completion": "def tn_gp(a, r, n):\n    \"\"\"\n    Calculate the nth term of a geometric progression.\n    \n    Parameters:\n        a (float): First term of the geometric progression\n        r (float): Common ratio\n        n (int): Position of the term to find\n    \n    Returns:\n        float: The nth term of the geometric progression\n    \"\"\"\n    return a * (r ** (n - 1))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmhe2bw4g.py\", line 15, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def check(num):\n    # Convert number to string to easily reverse it\n    num_str = str(num)\n    # Reverse the string and convert back to integer\n    reverse_num = int(num_str[::-1])\n    \n    # Check if number is one less than twice its reverse\n    return num == (2 * reverse_num - 1)\n", "result": "passed", "passed": true}
{"task_id": 57, "completion": "def find_max_num(digits):\n    # Convert digits to strings and sort in descending order\n    digits_str = [str(d) for d in digits]\n    digits_str.sort(reverse=True)\n    \n    # Join the sorted digits to form the largest number\n    return int(''.join(digits_str))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpeuz7v9r_.py\", line 9, in <module>\n    assert find_max_num([1,2,3],3) == 321\nTypeError: find_max_num() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 58, "completion": "def opposite_signs(num1: int, num2: int) -> bool:\n    \"\"\"\n    Check if two integers have opposite signs.\n    \n    Args:\n        num1 (int): First integer\n        num2 (int): Second integer\n        \n    Returns:\n        bool: True if numbers have opposite signs, False otherwise\n    \"\"\"\n    return (num1 * num2) < 0\n", "result": "passed", "passed": true}
{"task_id": 59, "completion": "def is_octagonal(n):\n    \"\"\"\n    Calculate the nth octagonal number.\n    \n    Args:\n        n (int): The position of the octagonal number to calculate (must be positive)\n    \n    Returns:\n        int: The nth octagonal number\n    \n    Raises:\n        ValueError: If n is less than or equal to 0\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return n * (3 * n - 2)\n", "result": "passed", "passed": true}
{"task_id": 60, "completion": "def max_len_sub(arr):\n    if not arr or len(arr) < 2:\n        return len(arr)\n    \n    n = len(arr)\n    # dp[i] stores the length of subsequence ending at index i\n    dp = [1] * n\n    # Initialize the first element\n    max_length = 1\n    \n    for i in range(1, n):\n        for j in range(i):\n            # Check if current element can be added to subsequence ending at j\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n        max_length = max(max_length, dp[i])\n    \n    return max_length\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpfioxfj5e.py\", line 20, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}

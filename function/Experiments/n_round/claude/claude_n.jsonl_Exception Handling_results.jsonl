{"task_id": 11, "requirement": "Exception Handling", "completion": "def remove_occ(string, char):\n    # Validate the second parameter\n    if len(char) != 1:\n        raise ValueError('Second parameter must be a single character.')\n    \n    # Handle empty string\n    if not string:\n        return string\n    \n    # Find first and last occurrence\n    first = string.find(char)\n    last = string.rfind(char)\n    \n    # If character not found, return original string\n    if first == -1:\n        return string\n    \n    # If only one occurrence, remove it\n    if first == last:\n        return string[:first] + string[first + 1:]\n    \n    # Remove both first and last occurrences\n    return string[:first] + string[first + 1:last] + string[last + 1:]\n", "result": "passed", "passed": true}
{"task_id": 12, "requirement": "Exception Handling", "completion": "def sort_matrix(matrix):\n    # Check if input is a list\n    if not isinstance(matrix, list):\n        raise TypeError(\"Input must be a list of lists\")\n    \n    # Check if input is empty\n    if not matrix:\n        return []\n    \n    # Check if all elements are lists and contain only integers\n    for row in matrix:\n        if not isinstance(row, list):\n            raise TypeError(\"Input must be a list of lists\")\n        \n        if not all(isinstance(num, int) for num in row):\n            raise TypeError(\"All elements must be integers\")\n    \n    # Sort matrix rows based on their sums\n    return sorted(matrix, key=sum)\n", "result": "passed", "passed": true}
{"task_id": 13, "requirement": "Exception Handling", "completion": "from collections import Counter\nfrom typing import List, Tuple\n\ndef count_common(text_list: List[str], n: int = 5) -> List[Tuple[str, int]]:\n    \"\"\"\n    Count the most common words in a list of strings.\n    \n    Args:\n        text_list (List[str]): List of strings to analyze\n        n (int): Number of most common words to return (default=5)\n    \n    Returns:\n        List[Tuple[str, int]]: List of tuples containing (word, count) pairs\n        \n    Raises:\n        TypeError: If input is not a list or if any element is not a string\n    \"\"\"\n    # Check if input is a list\n    if not isinstance(text_list, list):\n        raise TypeError(\"Input must be a list, got {type_name} instead\"\n                       .format(type_name=type(text_list).__name__))\n    \n    # Check if all elements are strings\n    if not all(isinstance(item, str) for item in text_list):\n        raise TypeError(\"All elements in the list must be strings\")\n    \n    # Combine all strings into a single string\n    all_text = ' '.join(text_list)\n    \n    # Split into words and convert to lowercase\n    words = all_text.lower().split()\n    \n    # Count occurrences using Counter\n    word_counts = Counter(words)\n    \n    # Return n most common words\n    return word_counts.most_common(n)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpiwc0ogqe.py\", line 19, in <module>\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nAssertionError", "passed": false}
{"task_id": 14, "requirement": "Exception Handling", "completion": "def find_volume(base, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n    \n    Args:\n        base (float): The base length of the triangle\n        height (float): The height of the triangle\n        length (float): The length (depth) of the prism\n    \n    Returns:\n        float: The volume of the triangular prism\n        \n    Raises:\n        ValueError: If any input is non-positive or non-numeric\n    \"\"\"\n    # Check if inputs are numeric (int or float)\n    if not all(isinstance(x, (int, float)) for x in [base, height, length]):\n        raise ValueError(\"All dimensions must be positive numbers.\")\n    \n    # Check if all inputs are positive\n    if not all(x > 0 for x in [base, height, length]):\n        raise ValueError(\"All dimensions must be positive numbers.\")\n        \n    # Calculate the area of the triangle base\n    triangle_area = 0.5 * base * height\n    \n    # Calculate the volume by multiplying base area with length\n    volume = triangle_area * length\n    \n    return volume\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpumg5tv_y.py\", line 16, in <module>\n    assert find_volume(5.5, 3.2, 4.1) == 72.16\nAssertionError", "passed": false}
{"task_id": 15, "requirement": "Exception Handling", "completion": "def split_lowerstring(text):\n    # Type checking\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    result = []\n    current_word = \"\"\n    \n    for char in text:\n        if char.islower():\n            if current_word:\n                result.append(current_word)\n            current_word = char\n        else:\n            current_word += char\n    \n    # Append the last word if it exists\n    if current_word:\n        result.append(current_word)\n    \n    return result\n", "result": "failed: File \"/tmp/tmptjqxax7k.py\", line 22\n    try: split_lowerstring(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 16, "requirement": "Exception Handling", "completion": "import re\n\ndef text_lowercase_underscore(text):\n    # Type checking\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    pattern = r'[a-z]+(?:_[a-z]+)*'\n    matches = re.findall(pattern, text)\n    return matches\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpizbfopve.py\", line 9, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "requirement": "Exception Handling", "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n    \n    Args:\n        side_length (float): Length of one side of the square\n        \n    Returns:\n        float: Perimeter of the square\n        \n    Raises:\n        ValueError: If side_length is negative\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative\")\n    \n    perimeter = 4 * side_length\n    return perimeter\n", "result": "passed", "passed": true}
{"task_id": 18, "requirement": "Exception Handling", "completion": "def remove_dirty_chars(string1: str, string2: str) -> str:\n    # Type checking\n    if not isinstance(string1, str) or not isinstance(string2, str):\n        raise TypeError(\"Both inputs must be strings\")\n    \n    # Convert string2 to a set for O(1) lookup\n    chars_to_remove = set(string2)\n    \n    # Use list comprehension to keep only characters not in chars_to_remove\n    return ''.join(char for char in string1 if char not in chars_to_remove)\n", "result": "passed", "passed": true}
{"task_id": 19, "requirement": "Exception Handling", "completion": "def test_duplicate(arr):\n    \"\"\"\n    Check if an array contains any duplicate elements.\n    \n    Args:\n        arr (list): List of integers to check\n        \n    Returns:\n        bool: True if duplicates exist, False otherwise\n        \n    Raises:\n        ValueError: If input is not a list or contains non-integer elements\n    \"\"\"\n    # Check if input is a list\n    if not isinstance(arr, list):\n        raise ValueError('Input must be a list of integers')\n    \n    # Check if all elements are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise ValueError('Input must be a list of integers')\n    \n    seen = set()\n    \n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    \n    return False\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    test_cases = [\n        [1, 2, 3, 4, 5],        # Valid input, no duplicates\n        [1, 2, 3, 2, 5],        # Valid input, has duplicates\n        [1, 2, \"3\", 4, 5],      # Invalid input (contains string)\n        (1, 2, 3, 4, 5),        # Invalid input (tuple instead of list)\n    ]\n    \n    for test in test_cases:\n        try:\n            result = test_duplicate(test)\n            print(f\"Array {test} has duplicates: {result}\")\n        except ValueError as e:\n            print(f\"Error for input {test}: {str(e)}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpltnfnn2n.py\", line 36, in <module>\n    test_duplicate('12345')\n  File \"/tmp/tmpltnfnn2n.py\", line 4, in test_duplicate\n    raise ValueError('Input must be a list of integers')\nValueError: Input must be a list of integers", "passed": false}
{"task_id": 20, "requirement": "Exception Handling", "completion": "def is_woodall(num):\n    \"\"\"\n    Check if a given number is a Woodall number.\n    A Woodall number follows the formula: n \u00d7 2^n - 1, where n is a natural number.\n    \n    Args:\n        num (int): The number to check\n        \n    Returns:\n        bool: True if the number is a Woodall number, False otherwise\n        \n    Raises:\n        TypeError: If the input is not an integer\n    \"\"\"\n    # Check if input is an integer\n    if not isinstance(num, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    if num < 1:  # Woodall numbers are always positive\n        return False\n    \n    n = 1\n    while True:\n        woodall = n * (2 ** n) - 1\n        if woodall == num:\n            return True\n        if woodall > num:  # If we exceed the input number, it's not a Woodall number\n            return False\n        n += 1\n", "result": "passed", "passed": true}
{"task_id": 21, "requirement": "Exception Handling", "completion": "def multiples_of_num(n, m):\n    \"\"\"\n    Find m multiples of number n.\n    \n    Args:\n        n (int): The number to find multiples of\n        m (int): The number of multiples to find\n    \n    Returns:\n        list: A list containing m multiples of n\n        \n    Raises:\n        ValueError: If either n or m is negative\n    \"\"\"\n    if n < 0 or m < 0:\n        raise ValueError(\"Both n and m must be non-negative numbers\")\n        \n    return [n * i for i in range(1, m + 1)]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmph88e_v01.py\", line 5, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "requirement": "Exception Handling", "completion": "def find_first_duplicate(arr):\n    # Type checking\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if all elements are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements must be integers\")\n    \n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1  # Return -1 if no duplicates found\n", "result": "passed", "passed": true}
{"task_id": 23, "requirement": "Exception Handling", "completion": "def maximum_sum(list_of_lists):\n    # Check if input is a list\n    if not isinstance(list_of_lists, list):\n        raise TypeError(\"Input must be a list of lists\")\n    \n    if not list_of_lists:  # Check if input list is empty\n        return 0\n    \n    # Check if all elements are lists and contain only integers\n    for sublist in list_of_lists:\n        if not isinstance(sublist, list):\n            raise TypeError(\"All elements must be lists\")\n        \n        for item in sublist:\n            if not isinstance(item, int):\n                raise TypeError(\"All elements in sublists must be integers\")\n    \n    return max(sum(sublist) for sublist in list_of_lists)\n", "result": "failed: File \"/tmp/tmp_8k0fxu4.py\", line 19\n    try: maximum_sum([[1, 2], [3, 'a']]); assert False, 'Expected TypeError' except TypeError: pass\n                                                                             ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 24, "requirement": "Exception Handling", "completion": "\n\nI'll modify the function to explicitly raise a ValueError with the required error message. Here's the updated implementation:\n\n```python\ndef binary_to_decimal(binary):\n    # Check if input is a string\n    if not isinstance(binary, str):\n        raise ValueError(\"Invalid binary number\")\n    \n    # Check if string contains only 0s and 1s\n    if not all(digit in '01' for digit in binary):\n        raise ValueError(\"Invalid binary number\")\n    \n    # Convert binary to decimal\n    decimal = 0\n    power = 0\n    \n    for digit in reversed(binary):\n        decimal += int(digit) * (2 ** power)\n        power", "result": "failed: File \"/tmp/tmpcsu8rk0l.py\", line 1\n    I'll modify the function to explicitly raise a ValueError with the required error message. Here's the updated implementation:\n     ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 25, "requirement": "Exception Handling", "completion": "def find_product(arr):\n    # Check if input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if all elements are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements must be integers\")\n    \n    # Convert array to set to remove duplicates\n    unique_elements = set(arr)\n    \n    # Calculate product of unique elements\n    product = 1\n    for num in unique_elements:\n        product *= num\n        \n    return product\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpbg_b586l.py\", line 15, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "requirement": "Exception Handling", "completion": "def check_k_elements(tuple_list, k):\n    # Check if k is an integer\n    if not isinstance(k, int):\n        raise TypeError(\"k must be an integer\")\n    \n    # Check if input is a list\n    if not isinstance(tuple_list, list):\n        raise TypeError(\"Input must be a list of tuples\")\n    \n    # Check if all elements in the list are tuples\n    if not all(isinstance(item, tuple) for item in tuple_list):\n        raise TypeError(\"All elements in the list must be tuples\")\n    \n    # Convert tuple list elements into a flat set for efficient lookup\n    elements = set()\n    for tup in tuple_list:\n        elements.update(tup)\n    \n    # Check if all numbers from 0 to k-1 are present\n    required_elements = set(range(k))\n    return elements == required_elements\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpv6k017x_.py\", line 18, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "requirement": "Exception Handling", "completion": "def remove(string_list):\n    # Check if input is a list\n    if not isinstance(string_list, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if all elements are strings\n    if not all(isinstance(s, str) for s in string_list):\n        raise TypeError(\"All elements must be strings\")\n    \n    return [''.join(char for char in s if not char.isdigit()) for s in string_list]\n", "result": "passed", "passed": true}
{"task_id": 28, "requirement": "Exception Handling", "completion": "def binomial_coeff(n: int, k: int) -> int:\n    \"\"\"\n    Calculate the binomial coefficient C(n,k) - number of ways to choose k items from n items.\n    \n    Args:\n        n (int): Total number of items\n        k (int): Number of items to choose\n        \n    Returns:\n        int: The binomial coefficient value\n        \n    Raises:\n        ValueError: If inputs are negative or k > n, with message \n                   'Inputs must be non-negative and k must not be greater than n'\n    \"\"\"\n    # Input validation with the exact required error message\n    if n < 0 or k < 0 or k > n:\n        raise ValueError(\"Inputs must be non-negative and k must not be greater than n\")\n    \n    # Optimize by using the smaller value of k or n-k\n    k = min(k, n - k)\n    \n    # Base cases\n    if k == 0:\n        return 1\n    if k == 1:\n        return n\n    \n    # Calculate using multiplicative formula\n    result = 1\n    for i in range(k):\n        result *= (n - i)\n        result //= (i + 1)\n    \n    return result\n", "result": "passed", "passed": true}
{"task_id": 29, "requirement": "Exception Handling", "completion": "def get_odd_occurrence(arr):\n    # Type checking\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    if not arr:\n        raise ValueError(\"List cannot be empty\")\n    \n    # Check if all elements are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements must be integers\")\n    \n    result = 0\n    for element in arr:\n        result ^= element\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9x051bkx.py\", line 14, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "requirement": "Exception Handling", "completion": "def count_substring_with_equal_ends(s):\n    # Type checking\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n        \n    if not s:\n        return 0\n        \n    n = len(s)\n    count = 0\n    \n    # Consider each possible substring\n    for i in range(n):\n        for j in range(i, n):\n            # If first and last characters match, increment count\n            if s[i] == s[j]:\n                count += 1\n                \n    return count\n", "result": "failed: File \"/tmp/tmpb_ycr823.py\", line 20\n    try: count_substring_with_equal_ends(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                                  ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 31, "requirement": "Exception Handling", "completion": "from heapq import heappush, heappop\nfrom collections import Counter\n\ndef func(*lists, k):\n    # Combine all lists and count frequencies\n    all_nums = []\n    for lst in lists:\n        all_nums.extend(lst)\n    \n    # Count frequency of each number\n    freq_counter = Counter(all_nums)\n    \n    # Check if k is valid\n    distinct_count = len(freq_counter)\n    if k > distinct_count:\n        raise ValueError('k cannot be greater than the number of distinct integers')\n    \n    # Create min heap to maintain top k elements\n    heap = []\n    \n    for num, freq in freq_counter.items():\n        # Push tuple of (frequency, number) to heap\n        heappush(heap, (freq, num))\n        # If heap size exceeds k, remove smallest frequency element\n        if len(heap) > k:\n            heappop(heap)\n    \n    # Extract the k most frequent elements\n    result = []\n    while heap:\n        freq, num = heappop(heap)\n        result.append(num)\n    \n    # Return result in descending order of frequency\n    return result[::-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdw5hvfqx.py\", line 29, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nTypeError: func() missing 1 required keyword-only argument: 'k'", "passed": false}
{"task_id": 32, "requirement": "Exception Handling", "completion": "def max_prime_factors(n):\n    # Input validation\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be a positive integer, got a non-integer value\")\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer, got a non-positive value\")\n    \n    largest_prime = -1\n    \n    # Handle division by 2 separately to simplify the loop\n    while n % 2 == 0:\n        largest_prime = 2\n        n = n // 2\n    \n    # Check odd numbers up to sqrt(n)\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            largest_prime = i\n            n = n // i\n    \n    # If n is still greater than 2, it's prime itself\n    if n > 2:\n        largest_prime = n\n    \n    return largest_prime\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwn3btwl7.py\", line 26, in <module>\n    max_prime_factors(-10)\n  File \"/tmp/tmpwn3btwl7.py\", line 6, in max_prime_factors\n    raise ValueError(\"Input must be a positive integer, got a non-positive value\")\nValueError: Input must be a positive integer, got a non-positive value\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpwn3btwl7.py\", line 28, in <module>\n    assert str(e) == 'Input must be a positive integer'\nAssertionError", "passed": false}
{"task_id": 33, "requirement": "Exception Handling", "completion": "def decimal_to_binary(decimal_num):\n    # Check if input is an integer\n    if not isinstance(decimal_num, int):\n        raise ValueError(\"Input must be an integer\")\n    \n    # Check if input is non-negative\n    if decimal_num < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    # Handle case when input is 0\n    if decimal_num == 0:\n        return \"0\"\n    \n    binary = \"\"\n    while decimal_num > 0:\n        binary = str(decimal_num % 2) + binary\n        decimal_num //= 2\n    \n    return binary\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp28cyld9p.py\", line 16, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "requirement": "Exception Handling", "completion": "def find_missing(arr):\n    # Check if array is empty\n    if not arr:\n        return None\n        \n    # Check if array is sorted\n    if any(arr[i] > arr[i + 1] for i in range(len(arr) - 1)):\n        raise ValueError('Input list must be sorted.')\n    \n    # Expected sum of sequence from arr[0] to arr[-1]\n    expected_sum = ((arr[-1] * (arr[-1] + 1)) // 2) - ((arr[0] - 1) * arr[0] // 2)\n    \n    # Actual sum of array\n    actual_sum = sum(arr)\n    \n    # Missing number is the difference\n    missing = expected_sum - actual_sum\n    \n    return missing if missing != 0 else None\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpr5_8o42e.py\", line 15, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "requirement": "Exception Handling", "completion": "def find_rect_num(n):\n    \"\"\"\n    Find the n-th rectangular number.\n    \n    Args:\n        n (int): The position of the rectangular number to find (n > 0)\n    \n    Returns:\n        int: The n-th rectangular number\n    \n    Raises:\n        ValueError: If n is not a positive integer\n    \"\"\"\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be an integer\")\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    return n * (n + 1)\n", "result": "passed", "passed": true}
{"task_id": 36, "requirement": "Exception Handling", "completion": "def find_nth_digit(numerator, denominator, n):\n    # Check for zero denominator first\n    if denominator == 0:\n        raise ValueError(\"Denominator cannot be zero\")\n    \n    # Handle negative numbers\n    if numerator * denominator < 0:\n        return \"-\" + find_nth_digit(abs(numerator), abs(denominator), n)\n    \n    numerator = abs(numerator)\n    denominator = abs(denominator)\n    \n    # Get the decimal digits\n    quotient = numerator // denominator\n    remainder = numerator % denominator\n    \n    # If n is 0, return the digit before decimal point\n    if n == 0:\n        return str(quotient)[-1]\n    \n    # Calculate decimal digits\n    decimal_digits = \"\"\n    remainders = {}\n    position = 0\n    \n    while remainder != 0 and position < n + 1:\n        if remainder in remainders:\n            break\n            \n        remainders[remainder] = position\n        remainder *= 10\n        decimal_digits += str(remainder // denominator)\n        remainder %= denominator\n        position += 1\n    \n    # If we have enough digits\n    if n <= len(decimal_digits):\n        return decimal_digits[n-1]\n    else:\n        return \"0\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpcbg78c_u.py\", line 33, in <module>\n    assert find_nth_digit(1,2,1) == 5\nAssertionError", "passed": false}
{"task_id": 37, "requirement": "Exception Handling", "completion": "def sort_mixed_list(mixed_list):\n    # Check if input is a list\n    if not isinstance(mixed_list, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if all elements are either integers or strings\n    if not all(isinstance(x, (int, str)) for x in mixed_list):\n        raise TypeError(\"All elements must be either integers or strings\")\n    \n    # Separate integers and strings\n    integers = [x for x in mixed_list if isinstance(x, int)]\n    strings = [x for x in mixed_list if isinstance(x, str)]\n    \n    # Sort each list separately\n    integers.sort()\n    strings.sort()\n    \n    # Return combined sorted list\n    return integers + strings\n", "result": "passed", "passed": true}
{"task_id": 38, "requirement": "Exception Handling", "completion": "def div_even_odd(numbers):\n    # Initialize variables to store first even and odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Find first even and odd numbers\n    for num in numbers:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Raise ValueError if either even or odd number is not found\n    if first_even is None or first_odd is None:\n        raise ValueError('List must contain at least one even and one odd number.')\n    \n    # Perform division and return result\n    return first_even / first_odd\n", "result": "failed: File \"/tmp/tmp25q1rgvz.py\", line 22\n    try: div_even_odd([2, 4, 6]); assert False; except ValueError as e: assert str(e) == 'List must contain at least one even and one odd number.'\n                                                ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 39, "requirement": "Exception Handling", "completion": "from collections import Counter\nimport heapq\n\ndef rearrange_string(s: str) -> str:\n    # Validate input type\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string\")\n    \n    # Validate input contains only lowercase letters\n    if not s.islower() or not s.isalpha():\n        raise ValueError(\"Input must contain only lowercase letters\")\n    \n    # Count frequency of each character\n    char_count = Counter(s)\n    \n    # Create a max heap (using negative counts since heapq is min heap)\n    max_heap = [(-count, char) for char, count in char_count.items()]\n    heapq.heapify(max_heap)\n    \n    result = []\n    \n    # Keep track of the previous character and its count\n    prev_count, prev_char = 0, ''\n    \n    while max_heap:\n        # Get the character with highest frequency\n        count, char = heapq.heappop(max_heap)\n        result.append(char)\n        \n        # If we had a previous character waiting, add it back to heap\n        if prev_count < 0:\n            heapq.heappush(max_heap, (prev_count, prev_char))\n            \n        # Update previous character info\n        prev_count, prev_char = count + 1, char\n        \n    # Check if the resulting string length matches input length\n    return ''.join(result) if len(result) == len(s) else ''\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp61zopamn.py\", line 29, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "requirement": "Exception Handling", "completion": "from collections import Counter\nfrom itertools import chain\n\ndef freq_element(list_of_lists):\n    # Check if input is a list\n    if not isinstance(list_of_lists, list):\n        raise TypeError(\"Input must be a list of lists\")\n    \n    # Check if all elements are lists\n    if not all(isinstance(item, list) for item in list_of_lists):\n        raise TypeError(\"All elements must be lists\")\n    \n    # Flatten the list of lists and count elements using Counter\n    flat_list = list(chain.from_iterable(list_of_lists))\n    frequency = Counter(flat_list)\n    return dict(frequency)\n\n# Example usage with error handling\nif __name__ == \"__main__\":\n    try:\n        # Valid input\n        test_list = [[1, 2, 3], [4, 2, 3], [1, 2]]\n        print(freq_element(test_list))  # Output: {1: 2, 2: 3, 3: 2, 4: 1}\n        \n        # Invalid inputs to demonstrate error handling\n        test_invalid1 = [1, 2, 3]  # Not a list of lists\n        freq_element(test_invalid1)  # Will raise TypeError\n        \n        test_invalid2 = [[1, 2], 3, [4, 5]]  # Contains non-list element\n        freq_element(test_invalid2)  # Will raise TypeError\n        \n    except TypeError as e:\n        print(f\"Error: {e}\")\n", "result": "failed: File \"/tmp/tmp8qohnhv1.py\", line 30\n    try: freq_element('not a list'); assert False; except TypeError: assert True\n                                                   ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 41, "requirement": "Exception Handling", "completion": "def filter_evennumbers(numbers):\n    # Check if input is a list\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if all elements are integers\n    if not all(isinstance(x, int) for x in numbers):\n        raise TypeError(\"All elements must be integers\")\n    \n    return list(filter(lambda x: x % 2 == 0, numbers))\n", "result": "passed", "passed": true}
{"task_id": 42, "requirement": "Exception Handling", "completion": "def find_sum(arr):\n    # Check if input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Create a dictionary to store element frequencies\n    freq = {}\n    \n    # Count frequency of each element\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    \n    # Calculate sum of repeated elements\n    repeated_sum = sum(num for num, count in freq.items() if count > 1)\n    \n    return repeated_sum\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkqm95wyq.py\", line 13, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Exception Handling", "completion": "# Test cases\ntry:\n    # Valid cases\n    print(text_match(\"hello_world\"))  # True\n    print(text_match(\"python_regex\"))  # True\n    \n    # Invalid type cases\n    print(text_match(123))  # Will raise TypeError\n    print(text_match(['hello_world']))  # Will raise TypeError\n    print(text_match(None))  # Will raise TypeError\nexcept TypeError as e:\n    print(f\"TypeError: {e}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppygo0l_5.py\", line 4, in <module>\n    print(text_match(\"hello_world\"))  # True\nNameError: name 'text_match' is not defined", "passed": false}
{"task_id": 44, "requirement": "Exception Handling", "completion": "import re\n\ndef text_match_string(text):\n    \"\"\"\n    Check if the string starts with a word character sequence.\n    \n    Args:\n        text (str): The input string to check\n        \n    Returns:\n        bool: True if string starts with a word, False otherwise\n        \n    Raises:\n        TypeError: If input is not a string\n    \"\"\"\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n        \n    pattern = '^[A-Za-z]+'\n    if re.search(pattern, text):\n        return True\n    return False\n\n# Example usage with type checking\ntry:\n    # Valid cases\n    print(text_match_string(\"Hello World\"))  # True\n    print(text_match_string(\"123 Hello\"))    # False\n    print(text_match_string(\" Hello\"))       # False\n    \n    # Invalid cases\n    print(text_match_string(123))            # Raises TypeError\n    print(text_match_string(['hello']))      # Raises TypeError\nexcept TypeError as e:\n    print(f\"Error: {e}\")\n", "result": "failed: File \"/tmp/tmp2lxmu_n3.py\", line 23\n    try: text_match_string(123); assert False, 'TypeError not raised' except TypeError: pass\n                                                                      ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 45, "requirement": "Exception Handling", "completion": "def get_gcd(arr):\n    from math import gcd\n    from functools import reduce\n    \n    if not arr:\n        raise ValueError('Input list cannot be empty.')\n    \n    # Handle negative numbers by using absolute values\n    arr = [abs(num) for num in arr]\n    \n    # Reduce applies gcd function pairwise to the array elements\n    return reduce(gcd, arr)\n", "result": "passed", "passed": true}
{"task_id": 46, "requirement": "Exception Handling", "completion": "def test_distinct(numbers):\n    \"\"\"\n    Check if all numbers in the given list are distinct integers.\n    \n    Args:\n        numbers: A list of integers\n        \n    Returns:\n        bool: True if all numbers are distinct, False otherwise\n        \n    Raises:\n        TypeError: If input is not a list or if any element is not an integer\n    \"\"\"\n    # Check if input is a list\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if all elements are integers\n    if not all(isinstance(x, int) for x in numbers):\n        raise TypeError(\"All elements must be integers\")\n    \n    # Check for distinct numbers\n    return len(set(numbers)) == len(numbers)\n", "result": "passed", "passed": true}
{"task_id": 47, "requirement": "Exception Handling", "completion": "def compute_last_digit(a, b):\n    if a > b:\n        raise ValueError('a should not be greater than b')\n    \n    result = 1\n    # We only need to multiply numbers from (a+1) to b\n    # And we only care about the last digit at each step\n    for i in range(a + 1, b + 1):\n        result = (result * (i % 10)) % 10\n        \n    return result\n", "result": "passed", "passed": true}
{"task_id": 48, "requirement": "Exception Handling", "completion": "def odd_bit_set_number(n):\n    # Type checking\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    # Create a mask with all odd bits set (1,3,5,7...)\n    # In binary: ...1010101\n    mask = 0xAAAAAAAA\n    \n    # Perform OR operation to set all odd bits\n    result = n | mask\n    \n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpi5e1nbna.py\", line 11, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "requirement": "Exception Handling", "completion": "def specified_element(matrix, position=0):\n    \"\"\"\n    Extract elements from a specified position in each sublist of a 2D list.\n    \n    Args:\n        matrix (list): A 2D list/matrix\n        position (int, optional): Position of element to extract (defaults to 0)\n    \n    Returns:\n        list: Elements from the specified position of each sublist\n        \n    Raises:\n        IndexError: If the specified position is out of range for any sublist\n    \"\"\"\n    if not matrix:\n        return []\n        \n    result = []\n    for sublist in matrix:\n        if not sublist or position >= len(sublist):\n            raise IndexError('Index out of range for sublist')\n        result.append(sublist[position])\n    return result\n", "result": "passed", "passed": true}
{"task_id": 50, "requirement": "Exception Handling", "completion": "def min_length_list(lists):\n    # Check if input is a list\n    if not isinstance(lists, list):\n        raise ValueError('Input must be a list of lists.')\n    \n    # Check if all elements are lists\n    if not all(isinstance(item, list) for item in lists):\n        raise ValueError('Input must be a list of lists.')\n    \n    # Check if the input list is empty\n    if not lists:\n        raise ValueError('Input must be a list of lists.')\n    \n    return min(lists, key=lambda x: len(x))\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    test_lists = [[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]\n    \n    try:\n        result = min_length_list(test_lists)\n        print(f\"Lists: {test_lists}\")\n        print(f\"List with minimum length: {result}\")\n        \n        # Testing with invalid inputs\n        print(\"\\nTesting invalid inputs:\")\n        min_length_list([1, 2, 3])  # Will raise ValueError\n        min_length_list(\"not a list\")  # Will raise ValueError\n        min_length_list([[1, 2], \"not a list\", [3, 4]])  # Will raise ValueError\n        \n    except ValueError as e:\n        print(f\"Error: {e}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpm116dsff.py\", line 27, in <module>\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nAssertionError", "passed": false}
{"task_id": 51, "requirement": "Exception Handling", "completion": "def check_equilateral(side1, side2, side3):\n    # Check if any side is non-positive\n    if side1 <= 0 or side2 <= 0 or side3 <= 0:\n        raise ValueError(\"All sides must be positive numbers\")\n    \n    if side1 == side2 == side3:\n        return \"This is an equilateral triangle\"\n    else:\n        return \"This is not an equilateral triangle\"\n\n# Example usage\ntry:\n    # Valid equilateral triangle\n    print(check_equilateral(5, 5, 5))  # This is an equilateral triangle\n    \n    # Valid non-equilateral triangle\n    print(check_equilateral(5, 4, 5))  # This is not an equilateral triangle\n    \n    # Invalid input - will raise ValueError\n    print(check_equilateral(0, 5, 5))\nexcept ValueError as e:\n    print(f\"Error: {e}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpob6h5lr3.py\", line 19, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "requirement": "Exception Handling", "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n    \n    Args:\n        base (float or int): The length of the base of the parallelogram\n        height (float or int): The perpendicular height of the parallelogram\n        \n    Returns:\n        float: The area of the parallelogram\n        \n    Raises:\n        TypeError: If inputs are not numerical\n        ValueError: If inputs are not positive numbers\n    \"\"\"\n    # Check if inputs are numerical (int or float)\n    if not isinstance(base, (int, float)) or not isinstance(height, (int, float)):\n        raise TypeError(\"Inputs must be numerical values\")\n    \n    # Check if inputs are positive\n    if base <= 0 or height <= 0:\n        raise ValueError(\"Base and height must be positive numbers\")\n    \n    area = base * height\n    return area\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphfzlm09z.py\", line 14, in <module>\n    assert parallelogram_area(0, 10) == 0\n  File \"/tmp/tmphfzlm09z.py\", line 7, in parallelogram_area\n    raise ValueError(\"Base and height must be positive numbers\")\nValueError: Base and height must be positive numbers", "passed": false}
{"task_id": 53, "requirement": "Exception Handling", "completion": "def check_equality(text):\n    # Check if input is a string\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    if not text:  # Check if string is empty\n        return \"Not Equal\"\n    \n    # Compare first and last characters\n    return \"Equal\" if text[0].lower() == text[-1].lower() else \"Not Equal\"\n", "result": "passed", "passed": true}
{"task_id": 54, "requirement": "Exception Handling", "completion": "def counting_sort(arr):\n    # Check if input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if list is empty\n    if not arr:\n        return arr\n    \n    # Check if all elements are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements must be integers\")\n    \n    # Find the range of input array\n    max_val = max(arr)\n    min_val = min(arr)\n    range_of_elements = max_val - min_val + 1\n    \n    # Create a counting array to store count of each unique object\n    count = [0] * range_of_elements\n    \n    # Store count of each object\n    for num in arr:\n        count[num - min_val] += 1\n    \n    # Modify count array such that each element at each index \n    # stores actual position of each object\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    \n    # Create an output array\n    output = [0] * len(arr)\n    \n    # Build the output array\n    for i in range(len(arr) - 1, -1, -1):\n        output[count[arr[i] - min_val] - 1] = arr[i]\n        count[arr[i] - min_val] -= 1\n    \n    # Copy the output array to arr\n    for i in range(len(arr)):\n        arr[i] = output[i]\n    \n    return arr\n", "result": "passed", "passed": true}
{"task_id": 55, "requirement": "Exception Handling", "completion": "def tn_gp(a, r, n):\n    \"\"\"\n    Calculate the nth term of a geometric progression.\n    \n    Parameters:\n        a (float): First term of the geometric progression\n        r (float): Common ratio\n        n (int): Position of the term to find\n    \n    Returns:\n        float: The nth term of the geometric progression\n        \n    Raises:\n        ValueError: If the term number (n) is less than 1\n    \"\"\"\n    if n < 1:\n        raise ValueError('Term number must be greater than 0')\n    \n    return a * (r ** (n - 1))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkywktkl0.py\", line 5, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "requirement": "Exception Handling", "completion": "def check(num):\n    # Check if input is an integer\n    if not isinstance(num, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    # Convert number to string to easily reverse it\n    num_str = str(num)\n    # Reverse the string and convert back to integer\n    reverse_num = int(num_str[::-1])\n    \n    # Check if number is one less than twice its reverse\n    return num == (2 * reverse_num - 1)\n", "result": "passed", "passed": true}
{"task_id": 57, "requirement": "Exception Handling", "completion": "def find_max_num(digits, num_digits):\n    # Validate that num_digits doesn't exceed list length\n    if num_digits > len(digits):\n        raise ValueError('Number of digits exceeds the length of the list.')\n    \n    # Convert digits to strings and sort in descending order\n    digits_str = [str(d) for d in digits]\n    digits_str.sort(reverse=True)\n    \n    # Take only the required number of digits and join them\n    result = ''.join(digits_str[:num_digits])\n    return int(result)\n", "result": "passed", "passed": true}
{"task_id": 58, "requirement": "Exception Handling", "completion": "def opposite_signs(num1: int, num2: int) -> bool:\n    \"\"\"\n    Check if two integers have opposite signs.\n    \n    Args:\n        num1 (int): First integer\n        num2 (int): Second integer\n        \n    Returns:\n        bool: True if numbers have opposite signs, False otherwise\n        \n    Raises:\n        TypeError: If either input is not an integer\n    \"\"\"\n    # Check if inputs are integers\n    if not isinstance(num1, int) or not isinstance(num2, int):\n        raise TypeError(\"Both inputs must be integers\")\n    \n    return (num1 * num2) < 0\n", "result": "passed", "passed": true}
{"task_id": 59, "requirement": "Exception Handling", "completion": "def is_octagonal(n):\n    \"\"\"\n    Calculate the nth octagonal number.\n    \n    Args:\n        n (int): The position of the octagonal number to calculate (must be a positive integer)\n    \n    Returns:\n        int: The nth octagonal number\n    \n    Raises:\n        ValueError: If n is not a positive integer\n    \"\"\"\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be an integer\")\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    return n * (3 * n - 2)\n", "result": "passed", "passed": true}
{"task_id": 60, "requirement": "Exception Handling", "completion": "def max_len_sub(arr, diff):\n    # Type checking for input parameters\n    if not isinstance(arr, list):\n        raise TypeError(\"First parameter must be a list\")\n    if not isinstance(diff, int):\n        raise TypeError(\"Second parameter must be an integer\")\n    \n    # Check if all elements in the array are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements in the list must be integers\")\n    \n    if not arr or len(arr) < 2:\n        return len(arr)\n    \n    n = len(arr)\n    dp = [1] * n\n    max_length = 1\n    \n    for i in range(1, n):\n        for j in range(i):\n            # Check if difference between elements equals the given diff\n            if abs(arr[i] - arr[j]) == diff:\n                dp[i] = max(dp[i], dp[j] + 1)\n        max_length = max(max_length, dp[i])\n    \n    return max_length\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3guwnity.py\", line 22, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nAssertionError", "passed": false}

{"task_id": 11, "requirement": "Edge Case Handling", "completion": "def remove_occ(string, char):\n    # Validate that char is a single character\n    if len(char) != 1:\n        raise ValueError('Second parameter must be a single character.')\n    \n    # If character not in string, return original string\n    if char not in string:\n        return string\n    \n    # Find first and last occurrence\n    first = string.find(char)\n    last = string.rfind(char)\n    \n    # If only one occurrence, remove it\n    if first == last:\n        return string[:first] + string[first + 1:]\n    \n    # Remove both first and last occurrences\n    return string[:first] + string[first + 1:last] + string[last + 1:]\n", "result": "passed", "passed": true}
{"task_id": 12, "requirement": "Edge Case Handling", "completion": "def sort_matrix(matrix):\n    # Handle empty matrix\n    if not matrix:\n        return []\n    \n    # Validate input is a list of lists\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise TypeError(\"Input must be a list of lists\")\n    \n    # Validate all elements are integers\n    if not all(isinstance(num, int) for row in matrix for num in row):\n        raise TypeError(\"All elements must be integers\")\n    \n    # Sort matrix rows based on their sums\n    return sorted(matrix, key=sum)\n", "result": "passed", "passed": true}
{"task_id": 13, "requirement": "Edge Case Handling", "completion": "from collections import Counter\n\ndef count_common(text_list, n=5):\n    \"\"\"\n    Count the most common words in a list of strings.\n    \n    Args:\n        text_list (list): List of strings to analyze\n        n (int): Number of most common words to return (default=5)\n    \n    Returns:\n        list: List of tuples containing (word, count) pairs\n        \n    Raises:\n        TypeError: If input is not a list of strings\n    \"\"\"\n    # Check if input is a list\n    if not isinstance(text_list, list):\n        raise TypeError(\"Input must be a list\")\n        \n    # Handle empty list\n    if not text_list:\n        return []\n        \n    # Check if all elements are strings\n    if not all(isinstance(item, str) for item in text_list):\n        raise TypeError(\"All elements must be strings\")\n    \n    # Combine all strings into a single string\n    all_text = ' '.join(text_list)\n    \n    # Split into words and convert to lowercase\n    words = all_text.lower().split()\n    \n    # Count occurrences using Counter\n    word_counts = Counter(words)\n    \n    # Return n most common words\n    return word_counts.most_common(n)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_v1wp76y.py\", line 20, in <module>\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nAssertionError", "passed": false}
{"task_id": 14, "requirement": "Edge Case Handling", "completion": "def find_volume(base, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n    \n    Args:\n        base (float): The base length of the triangle\n        height (float): The height of the triangle\n        length (float): The length (depth) of the prism\n    \n    Returns:\n        float: The volume of the triangular prism\n        \n    Raises:\n        ValueError: If any dimension is non-positive or non-numeric\n    \"\"\"\n    try:\n        # Convert inputs to float to handle both integers and floating-point numbers\n        base = float(base)\n        height = float(height)\n        length = float(length)\n        \n        # Check if any dimension is non-positive\n        if base <= 0 or height <= 0 or length <= 0:\n            raise ValueError(\"All dimensions must be positive numbers.\")\n            \n        # Calculate the area of the triangle base\n        triangle_area = 0.5 * base * height\n        \n        # Calculate the volume by multiplying base area with length\n        volume = triangle_area * length\n        \n        return volume\n        \n    except (TypeError, ValueError):\n        raise ValueError(\"All dimensions must be positive numbers.\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmprlplmn6x.py\", line 20, in <module>\n    assert find_volume(5.5, 3.2, 4.1) == 72.16\nAssertionError", "passed": false}
{"task_id": 15, "requirement": "Edge Case Handling", "completion": "def split_lowerstring(text):\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n        \n    # Check if there are any lowercase letters in the string\n    if not any(char.islower() for char in text):\n        return []\n        \n    result = []\n    current_word = \"\"\n    \n    for char in text:\n        if char.islower():\n            if current_word:\n                result.append(current_word)\n            current_word = char\n        else:\n            current_word += char\n    \n    # Append the last word if it exists\n    if current_word:\n        result.append(current_word)\n    \n    return result\n", "result": "failed: File \"/tmp/tmpjxfgf1h7.py\", line 24\n    try: split_lowerstring(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 16, "requirement": "Edge Case Handling", "completion": "# Example usage\nprint(text_lowercase_underscore(\"\"))               # \"Not matched!\"\nprint(text_lowercase_underscore(\"hello_world\"))    # \"Found a match!\"\nprint(text_lowercase_underscore(\"hello_World\"))    # \"Not matched!\"\nprint(text_lowercase_underscore(\"hello\"))          # \"Not matched!\"\nprint(text_lowercase_underscore(\"a_b_c\"))          # \"Found a match!\"\nprint(text_lowercase_underscore(123))              # Raises TypeError\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpc2ptxkq2.py\", line 2, in <module>\n    print(text_lowercase_underscore(\"\"))               # \"Not matched!\"\nNameError: name 'text_lowercase_underscore' is not defined", "passed": false}
{"task_id": 17, "requirement": "Edge Case Handling", "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n    \n    Args:\n        side_length (float): Length of one side of the square\n        \n    Returns:\n        float: Perimeter of the square (0 if side_length is 0)\n        \n    Raises:\n        ValueError: If side_length is negative\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative\")\n    \n    if side_length == 0:\n        return 0\n        \n    perimeter = 4 * side_length\n    return perimeter\n", "result": "passed", "passed": true}
{"task_id": 18, "requirement": "Edge Case Handling", "completion": "# Test cases\ndef test_remove_dirty_chars():\n    # Test empty second string\n    assert remove_dirty_chars(\"hello\", \"\") == \"hello\"\n    \n    # Test normal case\n    assert remove_dirty_chars(\"hello world\", \"lo\") == \"he wrd\"\n    \n    # Test with all characters to be removed\n    assert remove_dirty_chars(\"hello\", \"hello\") == \"\"\n    \n    # Test with no matching characters\n    assert remove_dirty_chars(\"hello\", \"xyz\") == \"hello\"\n    \n    try:\n        remove_dirty_chars(\"hello123\", \"abc\")  # Should raise ValueError\n    except ValueError as e:\n        print(f\"Caught expected error: {e}\")\n        \n    try:\n        remove_dirty_chars(123, \"abc\")  # Should raise TypeError\n    except TypeError as e:\n        print(f\"Caught expected error: {e}\")\n\n# Run tests\ntest_remove_dirty_chars()\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2mk8v3f8.py\", line 20, in <module>\n    test_remove_dirty_chars()\n  File \"/tmp/tmp2mk8v3f8.py\", line 4, in test_remove_dirty_chars\n    assert remove_dirty_chars(\"hello\", \"\") == \"hello\"\nNameError: name 'remove_dirty_chars' is not defined", "passed": false}
{"task_id": 19, "requirement": "Edge Case Handling", "completion": "def test_duplicate(arr):\n    \"\"\"\n    Check if an array contains any duplicate elements.\n    \n    Args:\n        arr: Input list to check for duplicates\n        \n    Returns:\n        bool: True if duplicates exist, False otherwise\n        \n    Raises:\n        TypeError: If input is not a list\n        ValueError: If any element in the list is not an integer\n    \"\"\"\n    # Check if input is a list\n    if not isinstance(arr, list):\n        raise TypeError('Input must be a list')\n    \n    # Handle empty list and single element list\n    if len(arr) <= 1:\n        return False\n    \n    # Check if all elements are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise ValueError('Input must be a list of integers')\n    \n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    \n    return False\n\n\n# Example usage with test cases\nif __name__ == \"__main__\":\n    # Test cases\n    test_cases = [\n        [],                     # Empty list\n        [1],                   # Single element\n        [1, 2, 3, 4, 5],      # No duplicates\n        [1, 2, 3, 2, 5],      # With duplicates\n        [1, 1],               # Adjacent duplicates\n        [-1, -1, 2, 3],       # Negative numbers\n        [0, 0, 1, 2]          # Zeros\n    ]\n    \n    for test in test_cases:\n        try:\n            result = test_duplicate(test)\n            print(f\"Array {test} has duplicates: {result}\")\n        except (TypeError, ValueError) as e:\n            print(f\"Error with array {test}: {str(e)}\")\n            \n    # Test invalid inputs\n    try:\n        test_duplicate(\"not a list\")  # Should raise TypeError\n    except TypeError as e:\n        print(f\"Error: {str(e)}\")\n        \n    try:\n        test_duplicate([1, \"2\", 3])  # Should raise ValueError\n    except ValueError as e:\n        print(f\"Error: {str(e)}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9okimlcm.py\", line 56, in <module>\n    test_duplicate(None)\n  File \"/tmp/tmp9okimlcm.py\", line 4, in test_duplicate\n    raise TypeError('Input must be a list')\nTypeError: Input must be a list\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmp9okimlcm.py\", line 59, in <module>\n    assert str(e) == 'Input must be a list of integers'\nAssertionError", "passed": false}
{"task_id": 20, "requirement": "Edge Case Handling", "completion": "def is_woodall(num):\n    \"\"\"\n    Check if a given number is a Woodall number.\n    A Woodall number follows the formula: n \u00d7 2^n - 1, where n is a natural number.\n    \n    Args:\n        num (int): The number to check\n        \n    Returns:\n        bool: True if the number is a Woodall number, False otherwise\n        \n    Raises:\n        TypeError: If the input is not an integer\n    \"\"\"\n    # Type checking\n    if not isinstance(num, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    # Handle edge cases\n    if num < 1:  # Woodall numbers are always positive\n        return False\n        \n    n = 1\n    while True:\n        try:\n            # Use more efficient calculation to prevent overflow\n            woodall = (n << n) - 1  # Equivalent to n * 2^n - 1\n            \n            if woodall == num:\n                return True\n            if woodall > num:\n                return False\n                \n            # Prevent infinite loops for very large numbers\n            if n > 100:  # Practical limit for most use cases\n                return False\n                \n            n += 1\n            \n        except OverflowError:\n            # If calculation overflows, the input is too large\n            return False\n", "result": "passed", "passed": true}
{"task_id": 21, "requirement": "Edge Case Handling", "completion": "def multiples_of_num(n, m):\n    \"\"\"\n    Find m multiples of number n.\n    \n    Args:\n        n (int): The number to find multiples of\n        m (int): The number of multiples to find\n    \n    Returns:\n        list: A list containing m multiples of n, or empty list if m is 0\n        \n    Raises:\n        ValueError: If either n or m is negative\n    \"\"\"\n    # Check for negative inputs\n    if n < 0 or m < 0:\n        raise ValueError(\"Both n and m must be non-negative\")\n        \n    # Handle case where m is 0\n    if m == 0:\n        return []\n        \n    return [n * i for i in range(1, m + 1)]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpst36t3jo.py\", line 9, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "requirement": "Edge Case Handling", "completion": "def find_first_duplicate(arr):\n    # Handle empty list\n    if not arr:\n        return -1\n        \n    # Type checking\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements must be integers\")\n    \n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    \n    return -1  # Return -1 if no duplicates found\n", "result": "passed", "passed": true}
{"task_id": 23, "requirement": "Edge Case Handling", "completion": "def maximum_sum(list_of_lists):\n    # Check if input list is empty\n    if not list_of_lists:\n        return 0\n    \n    # Check if all sublists are empty\n    if all(not sublist for sublist in list_of_lists):\n        return 0\n    \n    # Calculate maximum sum of non-empty sublists\n    return max(sum(sublist) for sublist in list_of_lists)\n", "result": "failed: File \"/tmp/tmpeyqhgmrw.py\", line 14\n    try: maximum_sum([[1, 2], [3, 'a']]); assert False, 'Expected TypeError' except TypeError: pass\n                                                                             ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 24, "requirement": "Edge Case Handling", "completion": "def binary_to_decimal(binary):\n    # Handle empty string case\n    if binary == \"\":\n        return 0\n        \n    try:\n        # Check if string contains only 0s and 1s\n        if not all(bit in '01' for bit in str(binary)):\n            raise ValueError(\"Invalid binary number\")\n            \n        # Convert string to integer using base 2\n        decimal = int(str(binary), 2)\n        return decimal\n    except ValueError:\n        raise ValueError(\"Invalid binary number\")\n", "result": "failed: File \"/tmp/tmpbe0cm2do.py\", line 17\n    try: binary_to_decimal('102'); assert False, 'Expected ValueError' except ValueError as e: assert str(e) == 'Invalid binary number'\n                                                                       ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 25, "requirement": "Edge Case Handling", "completion": "def find_product(arr):\n    # Type checking\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n        \n    # Return 1 for empty list\n    if not arr:\n        return 1\n        \n    # Convert array to set to remove duplicates\n    unique_elements = set(arr)\n    \n    # Calculate product of unique elements\n    product = 1\n    for num in unique_elements:\n        product *= num\n        \n    return product\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpd81q2e0d.py\", line 15, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "requirement": "Edge Case Handling", "completion": "def check_k_elements(tuple_list, k):\n    # Type checking\n    if not isinstance(tuple_list, list):\n        raise TypeError(\"Input must be a list of tuples\")\n    if not isinstance(k, int):\n        raise TypeError(\"k must be an integer\")\n    if k < 0:\n        raise ValueError(\"k must be non-negative\")\n        \n    # Handle empty list case\n    if not tuple_list:\n        return k == 0  # Empty list is only valid when k=0\n        \n    # Verify all elements are tuples\n    if not all(isinstance(item, tuple) for item in tuple_list):\n        raise TypeError(\"All elements in the list must be tuples\")\n        \n    # Convert tuple list elements into a flat set for efficient lookup\n    elements = set()\n    for tup in tuple_list:\n        elements.update(tup)\n    \n    # Check if all numbers from 0 to k-1 are present\n    required_elements = set(range(k))\n    return elements == required_elements\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgmbei42t.py\", line 22, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "requirement": "Edge Case Handling", "completion": "def remove(string_list):\n    # Type checking\n    if not isinstance(string_list, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Handle empty list\n    if not string_list:\n        return []\n    \n    # Check if all elements are strings\n    if not all(isinstance(s, str) for s in string_list):\n        raise TypeError(\"All elements must be strings\")\n    \n    return [''.join(char for char in s if not char.isdigit()) for s in string_list]\n", "result": "passed", "passed": true}
{"task_id": 28, "requirement": "Edge Case Handling", "completion": "def binomial_coeff(n: int, k: int) -> int:\n    \"\"\"\n    Calculate the binomial coefficient C(n,k) - number of ways to choose k items from n items.\n    \n    Args:\n        n (int): Total number of items\n        k (int): Number of items to choose\n        \n    Returns:\n        int: The binomial coefficient value\n        \n    Raises:\n        ValueError: If n < 0 or k < 0 or k > n\n        \n    Edge cases handled:\n    - When k = 0: returns 1 (there is exactly one way to choose 0 items)\n    - When k = n: returns 1 (there is exactly one way to choose all items)\n    - When n = 0 and k = 0: returns 1\n    \"\"\"\n    # Input validation\n    if n < 0 or k < 0 or k > n:\n        raise ValueError(\"Inputs must be non-negative and k must not be greater than n\")\n    \n    # Handle edge cases\n    if k == 0 or k == n:\n        return 1\n    \n    # Optimize by using the smaller value of k or n-k\n    k = min(k, n - k)\n    \n    # Calculate using multiplicative formula\n    result = 1\n    for i in range(k):\n        result *= (n - i)\n        result //= (i + 1)\n    \n    return result\n", "result": "passed", "passed": true}
{"task_id": 29, "requirement": "Edge Case Handling", "completion": "def get_odd_occurrence(arr):\n    # Handle empty list\n    if not arr:\n        return None\n        \n    result = 0\n    for element in arr:\n        result ^= element\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkzddmbs6.py\", line 9, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "requirement": "Edge Case Handling", "completion": "def count_substring_with_equal_ends(s):\n    # Type checking\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Handle empty string\n    if not s:\n        return 0\n        \n    n = len(s)\n    count = 0\n    \n    # Consider each possible substring\n    for i in range(n):\n        for j in range(i, n):\n            # If first and last characters match, increment count\n            if s[i] == s[j]:\n                count += 1\n                \n    return count\n", "result": "failed: File \"/tmp/tmp_3wex97k.py\", line 21\n    try: count_substring_with_equal_ends(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                                  ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 31, "requirement": "Edge Case Handling", "completion": "from heapq import heappush, heappop\nfrom collections import Counter\n\ndef func(lists, k):\n    # Check if all input lists are empty\n    if not any(lists):  # If all lists are empty\n        return []\n    \n    # Flatten all lists and count frequencies\n    nums = []\n    for lst in lists:\n        nums.extend(lst)\n    \n    # Get total distinct numbers\n    distinct_count = len(set(nums))\n    \n    # Check if k is valid\n    if k > distinct_count:\n        raise ValueError('k cannot be greater than the number of distinct integers')\n    \n    # Count frequency of each number\n    freq_counter = Counter(nums)\n    \n    # Create min heap to maintain top k elements\n    heap = []\n    \n    for num, freq in freq_counter.items():\n        # Push tuple of (frequency, number) to heap\n        heappush(heap, (freq, num))\n        # If heap size exceeds k, remove smallest frequency element\n        if len(heap) > k:\n            heappop(heap)\n    \n    # Extract the k most frequent elements\n    result = []\n    while heap:\n        freq, num = heappop(heap)\n        result.append(num)\n    \n    # Return result in descending order of frequency\n    return result[::-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdn0r89t_.py\", line 33, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "requirement": "Edge Case Handling", "completion": "def max_prime_factors(n):\n    # Input validation\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    # Special case for 2\n    if n == 2:\n        return 2\n        \n    largest_prime = -1\n    \n    # Handle division by 2 separately\n    while n % 2 == 0:\n        largest_prime = 2\n        n = n // 2\n    \n    # Check odd numbers up to sqrt(n)\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            largest_prime = i\n            n = n // i\n    \n    # If n is still greater than 2, it's prime itself\n    if n > 2:\n        largest_prime = n\n    \n    return largest_prime\n", "result": "passed", "passed": true}
{"task_id": 33, "requirement": "Edge Case Handling", "completion": "def decimal_to_binary(decimal_num):\n    # Check if input is a non-negative integer\n    if not isinstance(decimal_num, int) or decimal_num < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    # Handle zero case explicitly\n    if decimal_num == 0:\n        return \"0\"\n    \n    binary = \"\"\n    while decimal_num > 0:\n        binary = str(decimal_num % 2) + binary\n        decimal_num //= 2\n    \n    return binary\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmptuico50y.py\", line 13, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "requirement": "Edge Case Handling", "completion": "def find_missing(arr):\n    # Check if array is empty\n    if not arr:\n        return None\n        \n    # Check if array is sorted\n    if any(arr[i] > arr[i + 1] for i in range(len(arr) - 1)):\n        raise ValueError(\"Input list must be sorted.\")\n    \n    # Handle edge case where missing number is at the start\n    if arr[0] != 1:\n        return 1\n        \n    # Find missing number in the sequence\n    for i in range(len(arr) - 1):\n        if arr[i + 1] - arr[i] > 1:\n            return arr[i] + 1\n            \n    # If no missing number found\n    return None\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpm6dx4jip.py\", line 17, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "requirement": "Edge Case Handling", "completion": "def find_rect_num(n):\n    \"\"\"\n    Find the n-th rectangular number.\n    \n    Args:\n        n (int): The position of the rectangular number to find (n > 0)\n    \n    Returns:\n        int: The n-th rectangular number\n        For n = 1, returns 2 (first rectangular number)\n    \n    Raises:\n        ValueError: If n is less than or equal to 0\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return n * (n + 1)\n\n# Test cases to verify behavior\ndef test_find_rect_num():\n    # Test edge case for n = 1\n    assert find_rect_num(1) == 2, \"First rectangular number should be 2\"\n    \n    # Test other cases\n    assert find_rect_num(2) == 6, \"Second rectangular number should be 6\"\n    assert find_rect_num(3) == 12, \"Third rectangular number should be 12\"\n\n# Run the tests\ntest_find_rect_num()\nprint(\"All tests passed!\")\n", "result": "passed", "passed": true}
{"task_id": 37, "requirement": "Edge Case Handling", "completion": "def sort_mixed_list(mixed_list):\n    # Type checking\n    if not isinstance(mixed_list, list):\n        raise TypeError(\"Input must be a list\")\n        \n    # Handle empty list\n    if not mixed_list:\n        return []\n    \n    # Check if all elements are either integers or strings\n    if not all(isinstance(x, (int, str)) for x in mixed_list):\n        raise TypeError(\"All elements must be either integers or strings\")\n    \n    # Separate integers and strings\n    integers = [x for x in mixed_list if isinstance(x, int)]\n    strings = [x for x in mixed_list if isinstance(x, str)]\n    \n    # Sort each list separately\n    integers.sort()\n    strings.sort()\n    \n    # Return combined sorted list\n    return integers + strings\n", "result": "passed", "passed": true}
{"task_id": 38, "requirement": "Edge Case Handling", "completion": "def div_even_odd(numbers):\n    # Initialize variables to store first even and odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Find first even and odd numbers\n    for num in numbers:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Check if both even and odd numbers were found\n    if first_even is None or first_odd is None:\n        raise ValueError(\"List must contain at least one even and one odd number.\")\n    \n    # If first even number is 0, return 0\n    if first_even == 0:\n        return 0\n        \n    # Perform division and return result\n    return first_even / first_odd\n", "result": "failed: File \"/tmp/tmpv4y9bmrm.py\", line 25\n    try: div_even_odd([2, 4, 6]); assert False; except ValueError as e: assert str(e) == 'List must contain at least one even and one odd number.'\n                                                ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 39, "requirement": "Edge Case Handling", "completion": "from collections import Counter\nimport heapq\n\ndef rearrange_string(s: str) -> str:\n    # Input validation\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string\")\n    \n    if not s:\n        raise ValueError(\"Input string cannot be empty\")\n        \n    if not s.islower():\n        raise ValueError(\"Input string must contain only lowercase letters\")\n    \n    # Handle the case of single character\n    if len(s) == 1:\n        return s\n    \n    # Count frequency of each character\n    char_count = Counter(s)\n    \n    # Check if all characters are identical\n    if len(char_count) == 1:\n        return \"\"\n    \n    # Check if rearrangement is possible\n    max_freq = max(char_count.values())\n    if max_freq > (len(s) + 1) // 2:\n        return \"\"\n    \n    # Create a max heap (using negative counts since heapq is min heap)\n    max_heap = [(-count, char) for char, count in char_count.items()]\n    heapq.heapify(max_heap)\n    \n    result = []\n    \n    # Keep track of the previous character and its count\n    prev_count, prev_char = 0, ''\n    \n    while max_heap:\n        # Get the character with highest frequency\n        count, char = heapq.heappop(max_heap)\n        result.append(char)\n        \n        # If we had a previous character waiting, add it back to heap\n        if prev_count < 0:\n            heapq.heappush(max_heap, (prev_count, prev_char))\n            \n        # Update previous character info\n        prev_count, prev_char = count + 1, char\n        \n    return ''.join(result)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqzapl5vv.py\", line 39, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "requirement": "Edge Case Handling", "completion": "from collections import Counter\nfrom itertools import chain\n\ndef freq_element(list_of_lists):\n    # Check if input is empty list\n    if not list_of_lists:\n        return {}\n    \n    # Type checking\n    if not isinstance(list_of_lists, list):\n        raise TypeError(\"Input must be a list of lists\")\n        \n    # Flatten the list of lists and count elements using Counter\n    flat_list = list(chain.from_iterable(list_of_lists))\n    frequency = Counter(flat_list)\n    return dict(frequency)\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    test_list = [[1, 2, 3], [4, 2, 3], [1, 2]]\n    print(freq_element(test_list))  # Output: {1: 2, 2: 3, 3: 2, 4: 1}\n    \n    # Empty list test case\n    empty_list = []\n    print(freq_element(empty_list))  # Output: {}\n", "result": "failed: File \"/tmp/tmpi3tb6v2a.py\", line 25\n    try: freq_element('not a list'); assert False; except TypeError: assert True\n                                                   ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 41, "requirement": "Edge Case Handling", "completion": "def filter_evennumbers(numbers):\n    # Check if the input list is empty\n    if not numbers:\n        return []\n    \n    return list(filter(lambda x: x % 2 == 0, numbers))\n", "result": "passed", "passed": true}
{"task_id": 42, "requirement": "Edge Case Handling", "completion": "def find_sum(arr):\n    # Type check\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n        \n    # Handle empty array\n    if not arr:\n        return 0\n        \n    # Create a dictionary to store element frequencies\n    freq = {}\n    \n    # Count frequency of each element\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    \n    # Calculate sum of repeated elements\n    repeated_sum = sum(num for num, count in freq.items() if count > 1)\n    \n    return repeated_sum\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpbd7e671t.py\", line 16, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Edge Case Handling", "completion": "# Test cases\nprint(text_match(\"hello_world\"))      # True\nprint(text_match(\"\"))                 # \"Not matched!\"\nprint(text_match(\"hello_World\"))      # \"Not matched!\" (contains uppercase)\nprint(text_match(\"hello_world_\"))     # \"Not matched!\" (ends with underscore)\nprint(text_match(\"Hello_world\"))      # \"Not matched!\" (starts with uppercase)\nprint(text_match(\"hello\"))            # \"Not matched!\" (no underscore)\ntry:\n    print(text_match(123))            # Raises TypeError\nexcept TypeError as e:\n    print(f\"TypeError: {e}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp499z0fat.py\", line 2, in <module>\n    print(text_match(\"hello_world\"))      # True\nNameError: name 'text_match' is not defined", "passed": false}
{"task_id": 44, "requirement": "Edge Case Handling", "completion": "import re\n\ndef text_match_string(text):\n    \"\"\"\n    Check if the string starts with a word character sequence.\n    \n    Args:\n        text (str): The input string to check\n        \n    Returns:\n        bool: True if string starts with a word, False otherwise\n        \n    Raises:\n        TypeError: If input is not a string\n    \"\"\"\n    # Type checking\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Handle empty string and whitespace-only strings\n    if not text or text.isspace():\n        return False\n    \n    # Strip leading whitespace before checking pattern\n    text = text.lstrip()\n    \n    pattern = '^[A-Za-z]+' \n    return bool(re.search(pattern, text))\n\n# Test cases demonstrating edge case handling\ndef run_tests():\n    test_cases = [\n        (\"Hello World\", True),      # Normal case\n        (\"\", False),                # Empty string\n        (\"   \", False),             # Whitespace only\n        (\"   Hello\", True),         # Leading spaces\n        (\"123\", False),             # Numbers only\n        (\"Hello123\", True),         # Letters followed by numbers\n        (\" 123Hello\", False),       # Numbers followed by letters\n    ]\n    \n    for test_input, expected in test_cases:\n        result = text_match_string(test_input)\n        print(f\"Input: '{test_input}' -> Expected: {expected}, Got: {result}\")\n        \n    # Test TypeError\n    try:\n        text_match_string(123)\n    except TypeError as e:\n        print(f\"TypeError test passed: {e}\")\n\nif __name__ == \"__main__\":\n    run_tests()\n", "result": "failed: File \"/tmp/tmpqs7r5b2l.py\", line 37\n    try: text_match_string(123); assert False, 'TypeError not raised' except TypeError: pass\n                                                                      ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 46, "requirement": "Edge Case Handling", "completion": "def test_distinct(numbers):\n    \"\"\"\n    Check if all numbers in the given list are distinct.\n    \n    Args:\n        numbers: A list of integers\n        \n    Returns:\n        bool: True if all numbers are distinct, False otherwise\n        \n    Raises:\n        TypeError: If input is not a list or contains non-integer elements\n    \"\"\"\n    # Check if input is a list\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Handle empty list and single element cases\n    if len(numbers) <= 1:\n        return True\n    \n    # Check if all elements are integers\n    if not all(isinstance(x, int) for x in numbers):\n        raise TypeError(\"All elements must be integers\")\n    \n    # Compare length of set with original list to check for duplicates\n    return len(set(numbers)) == len(numbers)\n", "result": "passed", "passed": true}
{"task_id": 47, "requirement": "Edge Case Handling", "completion": "def compute_last_digit(a, b):\n    if a > b:\n        raise ValueError('a should not be greater than b')\n    \n    # Edge case: when a equals b, the result is 1\n    if a == b:\n        return 1\n    \n    result = 1\n    # We only need to multiply numbers from (a+1) to b\n    # And we only care about the last digit at each step\n    for i in range(a + 1, b + 1):\n        result = (result * (i % 10)) % 10\n        \n    return result\n", "result": "passed", "passed": true}
{"task_id": 48, "requirement": "Edge Case Handling", "completion": "def odd_bit_set_number(n):\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n        \n    # Special case for input 0\n    if n == 0:\n        return 1\n        \n    # Create a mask with all odd bits set (1,3,5,7...)\n    # In binary: ...1010101\n    mask = 0xAAAAAAAA\n    \n    # Perform OR operation to set all odd bits\n    result = n | mask\n    \n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmprk4jf8vj.py\", line 13, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "requirement": "Edge Case Handling", "completion": "def specified_element(matrix, position=0):\n    \"\"\"\n    Extract elements from a specified position in each sublist of a 2D list.\n    Handles varying sublist lengths by only extracting elements where the index is valid.\n    \n    Args:\n        matrix (list): A 2D list/matrix\n        position (int, optional): Position of element to extract (defaults to 0)\n    \n    Returns:\n        list: Elements from the specified position of each sublist where index is valid\n        \n    Raises:\n        IndexError: If position is negative\n    \"\"\"\n    if position < 0:\n        raise IndexError(\"Index cannot be negative\")\n        \n    result = []\n    for sublist in matrix:\n        try:\n            result.append(sublist[position])\n        except (IndexError, TypeError):\n            continue\n            \n    return result\n", "result": "passed", "passed": true}
{"task_id": 50, "requirement": "Edge Case Handling", "completion": "def min_length_list(lists):\n    # Input validation\n    if not isinstance(lists, list) or not all(isinstance(x, list) for x in lists):\n        raise ValueError('Input must be a list of lists.')\n    \n    if not lists:\n        raise ValueError('Input list cannot be empty.')\n        \n    # Find the list with minimum length using lambda\n    min_list = min(lists, key=lambda x: len(x))\n    \n    # Return tuple containing the length and the list itself\n    return (len(min_list), min_list)\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test case 1: Lists with different lengths\n    test_lists1 = [[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]\n    result1 = min_length_list(test_lists1)\n    print(f\"Test 1 - Lists with different lengths:\")\n    print(f\"Input: {test_lists1}\")\n    print(f\"Result: Length = {result1[0]}, List = {result1[1]}\\n\")\n    \n    # Test case 2: Lists with same length\n    test_lists2 = [[1, 2], [3, 4], [5, 6]]\n    result2 = min_length_list(test_lists2)\n    print(f\"Test 2 - Lists with same length:\")\n    print(f\"Input: {test_lists2}\")\n    print(f\"Result: Length = {result2[0]}, List = {result2[1]}\")\n", "result": "passed", "passed": true}
{"task_id": 52, "requirement": "Edge Case Handling", "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n    \n    Args:\n        base (float): The length of the base of the parallelogram\n        height (float): The perpendicular height of the parallelogram\n        \n    Returns:\n        float: The area of the parallelogram. Returns 0 if either base or height is 0.\n        \n    Raises:\n        TypeError: If inputs are not numerical\n        ValueError: If inputs are negative\n    \"\"\"\n    # Check if inputs are numerical\n    if not isinstance(base, (int, float)) or not isinstance(height, (int, float)):\n        raise TypeError(\"Inputs must be numerical\")\n    \n    # Check if inputs are negative\n    if base < 0 or height < 0:\n        raise ValueError(\"Base and height cannot be negative\")\n    \n    # Calculate area\n    area = base * height\n    return area\n", "result": "passed", "passed": true}
{"task_id": 53, "requirement": "Edge Case Handling", "completion": "def check_equality(text):\n    # Check if input is a string\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Handle empty string\n    if not text:\n        return \"Equal\"\n    \n    # Compare first and last characters\n    return \"Equal\" if text[0].lower() == text[-1].lower() else \"Not Equal\"\n", "result": "passed", "passed": true}
{"task_id": 54, "requirement": "Edge Case Handling", "completion": "def counting_sort(arr):\n    # Check if input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Handle empty list\n    if not arr:\n        return []\n    \n    # Handle single element list\n    if len(arr) == 1:\n        if not isinstance(arr[0], int):\n            raise TypeError(\"All elements must be integers\")\n        return arr.copy()\n    \n    # Validate all elements are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements must be integers\")\n    \n    # Find the range of input array\n    max_val = max(arr)\n    min_val = min(arr)\n    range_of_elements = max_val - min_val + 1\n    \n    # Create a counting array to store count of each unique object\n    count = [0] * range_of_elements\n    \n    # Store count of each object\n    for num in arr:\n        count[num - min_val] += 1\n    \n    # Modify count array such that each element at each index \n    # stores actual position of each object\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    \n    # Create an output array\n    output = [0] * len(arr)\n    \n    # Build the output array\n    for i in range(len(arr) - 1, -1, -1):\n        output[count[arr[i] - min_val] - 1] = arr[i]\n        count[arr[i] - min_val] -= 1\n    \n    return output\n", "result": "passed", "passed": true}
{"task_id": 55, "requirement": "Edge Case Handling", "completion": "def tn_gp(a, r, n):\n    \"\"\"\n    Calculate the nth term of a geometric progression.\n    \n    Parameters:\n        a (float): First term of the geometric progression\n        r (float): Common ratio\n        n (int): Position of the term to find\n        \n    Returns:\n        float: The nth term of the geometric progression\n        \n    Raises:\n        ValueError: If n is less than 1\n    \"\"\"\n    if n < 1:\n        raise ValueError('Term number must be greater than 0')\n        \n    # If n is 1, return first term regardless of ratio\n    if n == 1:\n        return a\n        \n    # For terms after first term, if ratio is 0, return 0\n    if r == 0:\n        return 0\n        \n    return a * (r ** (n - 1))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpuoipiukx.py\", line 11, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "requirement": "Edge Case Handling", "completion": "def check(num):\n    # Type checking\n    if not isinstance(num, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    # Handle negative numbers\n    if num < 0:\n        return False\n        \n    # Convert number to string to easily reverse it\n    num_str = str(num)\n    # Reverse the string and convert back to integer\n    reverse_num = int(num_str[::-1])\n    \n    # Check if number is one less than twice its reverse\n    return num == (2 * reverse_num - 1)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpaw18i19q.py\", line 24, in <module>\n    assert check(1) == False\nAssertionError", "passed": false}
{"task_id": 57, "requirement": "Edge Case Handling", "completion": "def find_max_num(digits):\n    # Handle empty list case\n    if not digits:\n        return 0\n        \n    # Convert digits to strings and sort in descending order\n    digits_str = [str(d) for d in digits]\n    digits_str.sort(reverse=True)\n    \n    # Join the sorted digits to form the largest number\n    return int(''.join(digits_str))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvvuxyt61.py\", line 10, in <module>\n    assert find_max_num([1,2,3],3) == 321\nTypeError: find_max_num() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 58, "requirement": "Edge Case Handling", "completion": "def opposite_signs(num1: int, num2: int) -> bool:\n    \"\"\"\n    Check if two integers have opposite signs.\n    \n    Args:\n        num1 (int): First integer\n        num2 (int): Second integer\n        \n    Returns:\n        bool: True if numbers have opposite signs, False otherwise\n        \n    Raises:\n        TypeError: If inputs are not integers\n    \"\"\"\n    # Type checking\n    if not (isinstance(num1, int) and isinstance(num2, int)):\n        raise TypeError(\"Both inputs must be integers\")\n    \n    # Handle zero cases explicitly\n    if num1 == 0 or num2 == 0:\n        return False\n    \n    # Use sign comparison instead of multiplication to avoid overflow\n    return (num1 > 0 and num2 < 0) or (num1 < 0 and num2 > 0)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgtgv9c5o.py\", line 28, in <module>\n    assert opposite_signs(0, -1) == True\nAssertionError", "passed": false}
{"task_id": 59, "requirement": "Edge Case Handling", "completion": "def is_octagonal(n):\n    \"\"\"\n    Calculate the nth octagonal number.\n    \n    Args:\n        n (int): The position of the octagonal number to calculate (must be positive)\n    \n    Returns:\n        int: The nth octagonal number\n        When n = 1, returns 1 (the first octagonal number)\n    \n    Raises:\n        ValueError: If n is less than or equal to 0\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    # Formula: n(3n - 2)\n    # When n = 1: 1(3*1 - 2) = 1(3 - 2) = 1(1) = 1\n    return n * (3 * n - 2)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpd7rhpfwl.py\", line 11, in <module>\n    is_octagonal(-1)\n  File \"/tmp/tmpd7rhpfwl.py\", line 3, in is_octagonal\n    raise ValueError(\"n must be a positive integer\")\nValueError: n must be a positive integer\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpd7rhpfwl.py\", line 13, in <module>\n    assert str(e) == 'Input must be a positive integer'\nAssertionError", "passed": false}
{"task_id": 60, "requirement": "Edge Case Handling", "completion": "def max_len_sub(arr):\n    # Check if array is empty\n    if not arr:\n        return 0\n    # If array has only one element\n    if len(arr) == 1:\n        return 1\n    \n    n = len(arr)\n    # dp[i] stores the length of subsequence ending at index i\n    dp = [1] * n\n    # Initialize the first element\n    max_length = 1\n    \n    for i in range(1, n):\n        for j in range(i):\n            # Check if current element can be added to subsequence ending at j\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n        max_length = max(max_length, dp[i])\n    \n    return max_length\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpndo94xkj.py\", line 20, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}

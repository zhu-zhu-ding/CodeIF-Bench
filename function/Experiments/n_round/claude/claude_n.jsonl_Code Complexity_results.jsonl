{"task_id": 11, "requirement": "Code Complexity", "completion": "def remove_occ(s: str, ch: str) -> str:\n    if len(ch) != 1:\n        raise ValueError('Second parameter must be a single character.')\n        \n    if ch not in s:\n        return s\n        \n    first = s.find(ch)\n    last = s.rfind(ch)\n    return s[:first] + s[first + 1:last] + s[last + 1:]\n", "result": "passed", "passed": true}
{"task_id": 14, "requirement": "Code Complexity", "completion": "# Example usage\nbase_area = 12.0  # area of triangle base\nheight = 4.0      # height of triangle\nlength = 10.0     # length of prism\n\nvolume = find_volume(base_area, height, length)\nprint(f\"The volume of the triangular prism is: {volume} cubic units\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgbw_13cd.py\", line 5, in <module>\n    volume = find_volume(base_area, height, length)\nNameError: name 'find_volume' is not defined", "passed": false}
{"task_id": 15, "requirement": "Code Complexity", "completion": "import re\nfrom typing import List\n\ndef split_lowerstring(text: str) -> List[str]:\n    \"\"\"\n    Splits a string at lowercase letters with a cyclomatic complexity of 1.\n    \n    Args:\n        text (str): The input string to be split\n        \n    Returns:\n        List[str]: List of substrings split at lowercase letters\n        \n    Raises:\n        TypeError: If input is not a string\n    \"\"\"\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n        \n    return [segment for segment in re.split('([a-z])', text) if segment]\n", "result": "failed: File \"/tmp/tmpd0hkw47d.py\", line 11\n    try: split_lowerstring(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 16, "requirement": "Code Complexity", "completion": "# Valid matches\nprint(text_lowercase_underscore('hello_world'))  # 'Found a match!'\nprint(text_lowercase_underscore('a_b_c'))        # 'Found a match!'\n\n# Non-matches\nprint(text_lowercase_underscore('Hello_world'))  # 'Not matched!'\nprint(text_lowercase_underscore('hello'))        # 'Not matched!'\nprint(text_lowercase_underscore(''))             # 'Not matched!'\n\n# Type error\ntry:\n    text_lowercase_underscore(123)\nexcept TypeError as e:\n    print(e)  # \"Input must be a string\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmprt8x6e9a.py\", line 2, in <module>\n    print(text_lowercase_underscore('hello_world'))  # 'Found a match!'\nNameError: name 'text_lowercase_underscore' is not defined", "passed": false}
{"task_id": 17, "requirement": "Code Complexity", "completion": "def square_perimeter(a: int) -> int:\n    \"\"\"\n    Calculate the perimeter of a square.\n    \n    Args:\n        a (int): Length of one side of the square\n        \n    Returns:\n        int: Perimeter of the square\n        \n    Raises:\n        AssertionError: If the side length is negative\n    \"\"\"\n    assert a >= 0, \"Side length cannot be negative\"\n    return 4 * a\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpffu2c065.py\", line 10, in <module>\n    square_perimeter(-5)\n  File \"/tmp/tmpffu2c065.py\", line 2, in square_perimeter\n    assert a >= 0, \"Side length cannot be negative\"\nAssertionError: Side length cannot be negative", "passed": false}
{"task_id": 20, "requirement": "Code Complexity", "completion": "# Test cases\nprint(is_woodall(1))    # True (1 \u00d7 2^1 - 1 = 1)\nprint(is_woodall(7))    # True (2 \u00d7 2^2 - 1 = 7)\nprint(is_woodall(23))   # True (3 \u00d7 2^3 - 1 = 23)\nprint(is_woodall(63))   # True (4 \u00d7 2^4 - 1 = 63)\nprint(is_woodall(10))   # False\nprint(is_woodall(0))    # False\nprint(is_woodall(-5))   # False\n\n# Test type checking\ntry:\n    is_woodall(3.14)    # Raises TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqv2us6ah.py\", line 2, in <module>\n    print(is_woodall(1))    # True (1 \u00d7 2^1 - 1 = 1)\nNameError: name 'is_woodall' is not defined", "passed": false}
{"task_id": 21, "requirement": "Code Complexity", "completion": "def multiples_of_num(m: int, n: int) -> list:\n    \"\"\"\n    Find m multiples of number n.\n    \n    Args:\n        m (int): The number of multiples to find\n        n (int): The number to find multiples of\n        \n    Returns:\n        list: A list containing m multiples of n\n        \n    Raises:\n        ValueError: If either m or n is negative\n    \"\"\"\n    if m < 0 or n < 0:\n        raise ValueError(\"Both m and n must be non-negative\")\n    \n    return [n * i for i in range(1, m + 1)]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpl1gginek.py\", line 19, in <module>\n    assert cc_visit(inspect.getsource(multiples_of_num))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 24, "requirement": "Code Complexity", "completion": "def binary_to_decimal(binary: str) -> int:\n    \"\"\"\n    Convert a binary string to its decimal equivalent.\n    \n    Args:\n        binary: A string containing only 0s and 1s\n        \n    Returns:\n        The decimal (base-10) equivalent of the binary number\n        \n    Raises:\n        ValueError: If the input is not a valid binary string\n    \"\"\"\n    if not binary:\n        return 0\n        \n    if not all(bit in '01' for bit in binary):\n        raise ValueError('Invalid binary number')\n        \n    return sum(int(bit) * (2 ** power) for power, bit in enumerate(reversed(binary)))\n", "result": "failed: File \"/tmp/tmpi6kmoh0b.py\", line 10\n    try: binary_to_decimal('102'); assert False, 'Expected ValueError' except ValueError as e: assert str(e) == 'Invalid binary number'\n                                                                       ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 32, "requirement": "Code Complexity", "completion": "print(max_prime_factors(84))  # Output: 7\nprint(max_prime_factors(13195))  # Output: 29\nprint(max_prime_factors(2))  # Output: 2\nprint(max_prime_factors(1))  # Output: 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8dmjeo6r.py\", line 1, in <module>\n    print(max_prime_factors(84))  # Output: 7\nNameError: name 'max_prime_factors' is not defined", "passed": false}
{"task_id": 33, "requirement": "Code Complexity", "completion": "def decimal_to_binary(N: int) -> str:\n    try:\n        # Validate input is non-negative\n        if N < 0:\n            raise ValueError(\"Input must be a non-negative integer\")\n            \n        # Convert using built-in bin() function and slice off the '0b' prefix\n        return bin(N)[2:]\n        \n    except (TypeError, ValueError):\n        raise ValueError(\"Input must be a non-negative integer\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5ed9p2gi.py\", line 10, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 35, "requirement": "Code Complexity", "completion": "def find_rect_num(n: int) -> int:\n    \"\"\"\n    Find the n-th rectangular number.\n    \n    Args:\n        n (int): The position of the rectangular number to find (n > 0)\n    \n    Returns:\n        int: The n-th rectangular number\n    \n    Raises:\n        ValueError: If n is less than or equal to 0\n    \n    Examples:\n        >>> find_rect_num(1)\n        2\n        >>> find_rect_num(3)\n        12\n    \"\"\"\n    assert n > 0, \"n must be a positive integer\"\n    return n * (n + 1)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpke5u007s.py\", line 8, in <module>\n    try: find_rect_num(-1)\n  File \"/tmp/tmpke5u007s.py\", line 2, in find_rect_num\n    assert n > 0, \"n must be a positive integer\"\nAssertionError: n must be a positive integer", "passed": false}
{"task_id": 36, "requirement": "Code Complexity", "completion": "def calculate_decimal_digits(numerator: int, denominator: int, n: int) -> str:\n    \"\"\"Helper function to calculate decimal digits up to position n\"\"\"\n    decimal_digits = \"\"\n    remainder = (numerator % denominator) * 10\n    \n    for _ in range(n):\n        if remainder == 0:\n            break\n        decimal_digits += str(remainder // denominator)\n        remainder = (remainder % denominator) * 10\n    \n    return decimal_digits.ljust(n, '0')\n\ndef find_nth_digit(p: int, q: int, n: int) -> int:\n    \"\"\"\n    Find the nth digit in the decimal representation of p/q.\n    \n    Args:\n        p: Numerator (integer)\n        q: Denominator (integer)\n        n: Position of digit to find (0 = before decimal point)\n        \n    Returns:\n        Integer representing the nth digit\n        \n    Raises:\n        ValueError: If denominator is zero\n    \"\"\"\n    if q == 0:\n        raise ValueError(\"Denominator cannot be zero\")\n        \n    # Handle the digit before decimal point (n=0)\n    if n == 0:\n        return abs(p // q) % 10\n    \n    # Get decimal digits\n    decimal_part = calculate_decimal_digits(abs(p), abs(q), n)\n    return int(decimal_part[n-1])\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpf2c6_j2c.py\", line 28, in <module>\n    assert find_nth_digit.__annotations__ == {'p': int, 'q': int, 'N': int, 'return': int}\nAssertionError", "passed": false}
{"task_id": 38, "requirement": "Code Complexity", "completion": "def div_even_odd(list1: list) -> float:\n    # Use list comprehension to get first even and odd numbers\n    evens = [num for num in list1 if num % 2 == 0]\n    odds = [num for num in list1 if num % 2 != 0]\n    \n    if not (evens and odds):\n        raise ValueError('List must contain at least one even and one odd number.')\n        \n    return evens[0] / odds[0]\n", "result": "failed: File \"/tmp/tmp9k2n81pd.py\", line 12\n    try: div_even_odd([2, 4, 6]); assert False; except ValueError as e: assert str(e) == 'List must contain at least one even and one odd number.'\n                                                ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 40, "requirement": "Code Complexity", "completion": "from collections import Counter\nfrom itertools import chain\nfrom typing import List\n\ndef freq_element(nums: List[List[int]]) -> dict[int, int]:\n    \"\"\"\n    Find frequency of elements in a list of lists.\n    \n    Args:\n        nums: A list of lists containing integers\n        \n    Returns:\n        A dictionary with elements as keys and their frequencies as values\n        \n    Raises:\n        TypeError: If input is not a list of lists of integers\n    \"\"\"\n    if not isinstance(nums, list) or not all(isinstance(sublist, list) for sublist in nums):\n        raise TypeError(\"Input must be a list of lists\")\n    \n    if not nums:\n        return {}\n        \n    return dict(Counter(chain.from_iterable(nums)))\n\n", "result": "failed: File \"/tmp/tmp1x9zs6l6.py\", line 13\n    try: freq_element('not a list'); assert False; except TypeError: assert True\n                                                   ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 42, "requirement": "Code Complexity", "completion": "def find_sum(arr: list, n: int) -> int:\n    # Check if input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n        \n    # Handle empty array\n    if not arr:\n        return 0\n        \n    # Create a dictionary to store element frequencies\n    freq = {}\n    \n    # Count frequency of each element\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    \n    # Calculate sum of repeated elements\n    return sum(num for num, count in freq.items() if count > 1)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpl6jv8iye.py\", line 15, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nAssertionError", "passed": false}
{"task_id": 43, "requirement": "Code Complexity", "completion": "# Test cases\nprint(text_match(\"hello_world\"))    # \"Found a match!\"\nprint(text_match(\"hello_World\"))    # \"Not matched!\"\nprint(text_match(\"hello_world_\"))   # \"Not matched!\"\nprint(text_match(\"Hello_world\"))    # \"Not matched!\"\nprint(text_match(\"hello\"))          # \"Not matched!\"\nprint(text_match(\"\"))               # \"Not matched!\"\ntry:\n    print(text_match(123))          # Raises TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp00bjhosw.py\", line 2, in <module>\n    print(text_match(\"hello_world\"))    # \"Found a match!\"\nNameError: name 'text_match' is not defined", "passed": false}
{"task_id": 45, "requirement": "Code Complexity", "completion": "from math import gcd\nfrom functools import reduce\nfrom typing import List\n\ndef get_gcd(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError('Input list cannot be empty.')\n        \n    return reduce(gcd, map(abs, numbers))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpp8ynw4ct.py\", line 13, in <module>\n    assert get_gcd.__annotations__ == {'numbers': list, 'return': int}\nAssertionError", "passed": false}
{"task_id": 47, "requirement": "Code Complexity", "completion": "# Valid cases\nprint(compute_last_digit(5, 7))  # Returns 2\nprint(compute_last_digit(5, 5))  # Returns 1\n\n# Invalid case\ntry:\n    compute_last_digit(7, 5)  # Raises ValueError\nexcept ValueError as e:\n    print(e)  # Prints: a should not be greater than b\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0tr9hkwb.py\", line 2, in <module>\n    print(compute_last_digit(5, 7))  # Returns 2\nNameError: name 'compute_last_digit' is not defined", "passed": false}
{"task_id": 51, "requirement": "Code Complexity", "completion": "# Valid cases\nprint(check_equilateral(5, 5, 5))  # Returns True\nprint(check_equilateral(5, 4, 5))  # Returns False\n\n# Invalid case - will raise ValueError\n# check_equilateral(0, 5, 5)  # Raises ValueError\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpum2watr5.py\", line 2, in <module>\n    print(check_equilateral(5, 5, 5))  # Returns True\nNameError: name 'check_equilateral' is not defined", "passed": false}
{"task_id": 52, "requirement": "Code Complexity", "completion": "from numbers import Real\nfrom typing import Union\n\ndef parallelogram_area(base: float, height: float) -> float:\n    \"\"\"\n    Calculate the area of a parallelogram.\n    \n    Args:\n        base (float): The length of the base of the parallelogram. Must be a positive number.\n        height (float): The perpendicular height of the parallelogram. Must be a positive number.\n        \n    Returns:\n        float: The area of the parallelogram\n        \n    Raises:\n        TypeError: If base or height are not numerical values\n    \"\"\"\n    return float(base * height)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp53a6ov90.py\", line 14, in <module>\n    assert False, 'Expected TypeError'\nAssertionError: Expected TypeError", "passed": false}
{"task_id": 53, "requirement": "Code Complexity", "completion": "# Test cases\nprint(check_equality(\"Python\"))     # Not Equal\nprint(check_equality(\"level\"))      # Equal\nprint(check_equality(\"\"))           # Equal\nprint(check_equality(\"a\"))          # Equal\ntry:\n    print(check_equality(123))      # Raises TypeError\nexcept TypeError as e:\n    print(e)                        # \"Input must be a string\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpoahc763n.py\", line 2, in <module>\n    print(check_equality(\"Python\"))     # Not Equal\nNameError: name 'check_equality' is not defined", "passed": false}
{"task_id": 56, "requirement": "Code Complexity", "completion": "# Example usage:\nprint(check(2017))  # True because 2017 = 2 \u00d7 7102 - 1\nprint(check(123))   # False\nprint(check(0))     # True because 0 = 2 \u00d7 0 - 1\n\n# This will raise TypeError\ntry:\n    check(3.14)\nexcept TypeError as e:\n    print(e)  # \"Input must be an integer\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmiwxgot3.py\", line 2, in <module>\n    print(check(2017))  # True because 2017 = 2 \u00d7 7102 - 1\nNameError: name 'check' is not defined", "passed": false}
{"task_id": 58, "requirement": "Code Complexity", "completion": "def opposite_signs(a: int, b: int) -> bool:\n    \"\"\"\n    Check if two integers have opposite signs.\n    \n    Args:\n        a (int): First integer\n        b (int): Second integer\n        \n    Returns:\n        bool: True if numbers have opposite signs, False otherwise\n        \n    Raises:\n        TypeError: If either input is not an integer\n    \"\"\"\n    if not (isinstance(a, int) and isinstance(b, int)):\n        raise TypeError(\"Both inputs must be integers\")\n    \n    return (a * b) < 0\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_mdttr4q.py\", line 23, in <module>\n    assert opposite_signs(0, -1) == True\nAssertionError", "passed": false}

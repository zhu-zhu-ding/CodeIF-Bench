{"task_id": 14, "requirement": "Input-Output Conditions", "completion": "def find_volume(base, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n    \n    Args:\n        base (int or float): The base length of the triangle (must be positive)\n        height (int or float): The height of the triangle (must be positive)\n        length (int or float): The length (depth) of the prism (must be positive)\n    \n    Returns:\n        float: The volume of the triangular prism\n        \n    Raises:\n        TypeError: If inputs are not numbers\n        ValueError: If inputs are not positive numbers\n    \"\"\"\n    # Check if inputs are numbers (int or float)\n    if not all(isinstance(x, (int, float)) for x in [base, height, length]):\n        raise TypeError(\"All inputs must be numerical values (integers or floats)\")\n    \n    # Check if inputs are positive\n    if not all(x > 0 for x in [base, height, length]):\n        raise ValueError(\"All inputs must be positive numbers\")\n    \n    # Calculate the area of the triangle base\n    triangle_area = 0.5 * base * height\n    \n    # Calculate the volume by multiplying base area with length\n    volume = triangle_area * length\n    \n    return volume\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdijkuk87.py\", line 16, in <module>\n    assert find_volume(5.5, 3.2, 4.1) == 72.16\nAssertionError", "passed": false}
{"task_id": 15, "requirement": "Input-Output Conditions", "completion": "def split_lowerstring(text: str) -> list[str]:\n    \"\"\"\n    Splits a string at lowercase letters.\n    \n    Args:\n        text (str): The input string to be split.\n        \n    Returns:\n        list[str]: A list of strings, split at lowercase letters.\n        \n    Examples:\n        >>> split_lowerstring(\"camelCase\")\n        ['c', 'amel', 'Case']\n        >>> split_lowerstring(\"helloWorld\")\n        ['h', 'ello', 'World']\n        >>> split_lowerstring(\"ABCdef\")\n        ['ABC', 'd', 'ef']\n    \"\"\"\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    if not text:\n        return []\n        \n    result = []\n    current_segment = text[0]\n    \n    for char in text[1:]:\n        if char.islower():\n            result.append(current_segment)\n            current_segment = char\n        else:\n            current_segment += char\n            \n    result.append(current_segment)\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjo3mbtk9.py\", line 16, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "requirement": "Input-Output Conditions", "completion": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z]+(?:_[a-z]+)*$'\n    if re.match(pattern, text):\n        return 'Found a match!'\n    return 'Not matched!'\n", "result": "passed", "passed": true}
{"task_id": 17, "requirement": "Input-Output Conditions", "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n    \n    Args:\n        side_length (int): Length of one side of the square (must be a non-negative integer)\n        \n    Returns:\n        int: Perimeter of the square\n        \n    Raises:\n        TypeError: If input is not an integer\n        ValueError: If input is negative\n    \"\"\"\n    # Check if input is an integer\n    if not isinstance(side_length, int):\n        raise TypeError(\"Side length must be an integer\")\n    \n    # Check if input is non-negative\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative\")\n    \n    perimeter = 4 * side_length\n    return perimeter\n", "result": "passed", "passed": true}
{"task_id": 18, "requirement": "Input-Output Conditions", "completion": "def remove_dirty_chars(string1: str, string2: str) -> str:\n    # Check if both strings contain only alphabetic characters\n    if not (string1.isalpha() and string2.isalpha()):\n        raise ValueError('Input strings must only contain alphabetic characters.')\n    \n    # Convert string2 to a set for O(1) lookup\n    chars_to_remove = set(string2)\n    \n    # Use list comprehension to keep only characters not in chars_to_remove\n    return ''.join(char for char in string1 if char not in chars_to_remove)\n", "result": "passed", "passed": true}
{"task_id": 19, "requirement": "Input-Output Conditions", "completion": "def test_duplicate(arr):\n    \"\"\"\n    Check if a list contains any duplicate elements.\n    \n    Args:\n        arr (list): List of integers to check\n        \n    Returns:\n        bool: True if duplicates exist, False otherwise\n        \n    Raises:\n        TypeError: If input is not a list or if any element is not an integer\n    \"\"\"\n    # Check if input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if all elements are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements must be integers\")\n    \n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    \n    return False\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    test_cases = [\n        [1, 2, 3, 4, 5],        # No duplicates\n        [1, 2, 3, 2, 5],        # Has duplicates\n        [],                      # Empty list\n    ]\n    \n    for arr in test_cases:\n        print(f\"Array {arr} has duplicates: {test_duplicate(arr)}\")\n    \n    # Error cases\n    try:\n        test_duplicate(\"not a list\")  # Should raise TypeError\n    except TypeError as e:\n        print(f\"Error: {e}\")\n        \n    try:\n        test_duplicate([1, 2, \"3\", 4])  # Should raise TypeError\n    except TypeError as e:\n        print(f\"Error: {e}\")\n", "result": "passed", "passed": true}
{"task_id": 20, "requirement": "Input-Output Conditions", "completion": "# Test cases showing input and output types\nprint(is_woodall(7))    # Input: int 7, Output: True\nprint(is_woodall(23))   # Input: int 23, Output: True\nprint(is_woodall(10))   # Input: int 10, Output: False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpyb_cn7ua.py\", line 2, in <module>\n    print(is_woodall(7))    # Input: int 7, Output: True\nNameError: name 'is_woodall' is not defined", "passed": false}
{"task_id": 23, "requirement": "Input-Output Conditions", "completion": "def maximum_sum(lists: list[list[int]]) -> int:\n    \"\"\"\n    Find the maximum sum of elements from any sublist in a list of lists.\n    \n    Args:\n        lists: A list of lists containing integers\n        \n    Returns:\n        int: The maximum sum of elements from any sublist\n        \n    Raises:\n        ValueError: If the input list is empty or contains empty sublists\n    \"\"\"\n    if not lists:\n        raise ValueError(\"Input list cannot be empty\")\n    \n    if any(not sublist for sublist in lists):\n        raise ValueError(\"Sublists cannot be empty\")\n        \n    return max(sum(sublist) for sublist in lists)\n", "result": "passed", "passed": true}
{"task_id": 25, "requirement": "Input-Output Conditions", "completion": "# Valid inputs\nprint(find_product([1, 2, 3, 2, 4]))     # Output: 24\nprint(find_product([1, 1, 1, 1]))        # Output: 1\nprint(find_product([1, 2, 3, 4, 5]))     # Output: 120\n\n# Invalid inputs will raise TypeError\ntry:\n    find_product([1, 2, \"3\", 4])         # Raises TypeError: All elements must be integers\n    find_product((1, 2, 3))              # Raises TypeError: Input must be a list\nexcept TypeError as e:\n    print(f\"Error: {e}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpx9bb7850.py\", line 2, in <module>\n    print(find_product([1, 2, 3, 2, 4]))     # Output: 24\nNameError: name 'find_product' is not defined", "passed": false}
{"task_id": 26, "requirement": "Input-Output Conditions", "completion": "def check_k_elements(tuple_list, k):\n    # Check if the list is empty\n    if not tuple_list:\n        return False\n    \n    # Check if each tuple has exactly k elements\n    return all(len(tup) == k for tup in tuple_list)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpnpwsowoi.py\", line 7, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 28, "requirement": "Input-Output Conditions", "completion": "def binomial_coeff(n: int, k: int) -> int:\n    \"\"\"\n    Calculate the binomial coefficient C(n,k) for non-negative integers n and k.\n    \n    Args:\n        n (int): Non-negative integer representing total number of items\n        k (int): Non-negative integer representing items to choose\n        \n    Returns:\n        int: The binomial coefficient value\n        \n    Raises:\n        ValueError: If inputs are not non-negative integers\n    \"\"\"\n    # Validate inputs are non-negative integers\n    if not isinstance(n, int) or not isinstance(k, int):\n        raise ValueError(\"Inputs must be integers\")\n    if n < 0 or k < 0:\n        raise ValueError(\"Inputs must be non-negative\")\n    \n    # If k is greater than n, coefficient is 0\n    if k > n:\n        return 0\n        \n    # Optimize by using the smaller value of k or n-k\n    k = min(k, n - k)\n    \n    # Base cases\n    if k == 0:\n        return 1\n    \n    # Calculate using multiplicative formula\n    result = 1\n    for i in range(k):\n        result *= (n - i)\n        result //= (i + 1)\n    \n    return result\n", "result": "passed", "passed": true}
{"task_id": 30, "requirement": "Input-Output Conditions", "completion": "def count_substring_with_equal_ends(s: str) -> int:\n    \"\"\"\n    Count all substrings that start and end with the same character.\n    \n    Args:\n        s (str): Input string\n        \n    Returns:\n        int: Number of substrings that start and end with the same character\n        \n    Examples:\n        >>> count_substring_with_equal_ends(\"abcab\")\n        7\n        >>> count_substring_with_equal_ends(\"aba\")\n        4\n    \"\"\"\n    if not s:\n        return 0\n        \n    n = len(s)\n    count = 0\n    \n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n                \n    return count\n", "result": "passed", "passed": true}
{"task_id": 32, "requirement": "Input-Output Conditions", "completion": "def max_prime_factors(n):\n    # Input validation\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    largest_prime = -1\n    \n    # Handle division by 2 separately to simplify the loop\n    while n % 2 == 0:\n        largest_prime = 2\n        n = n // 2\n    \n    # Check odd numbers up to sqrt(n)\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            largest_prime = i\n            n = n // i\n    \n    # If n is still greater than 2, it's prime itself\n    if n > 2:\n        largest_prime = n\n    \n    return int(largest_prime)  # Ensure integer output\n", "result": "passed", "passed": true}
{"task_id": 35, "requirement": "Input-Output Conditions", "completion": "def find_rect_num(n):\n    \"\"\"\n    Find the n-th rectangular number.\n    \n    Args:\n        n (int): The position of the rectangular number to find (n > 0)\n    \n    Returns:\n        int: The n-th rectangular number\n    \n    Raises:\n        ValueError: If n is less than or equal to 0\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return n * (n + 1)\n", "result": "passed", "passed": true}
{"task_id": 36, "requirement": "Input-Output Conditions", "completion": "def find_nth_digit(numerator, denominator, n):\n    if denominator == 0:\n        raise ValueError(\"Denominator cannot be zero\")\n    \n    # Handle negative numbers - we only care about positive results\n    numerator = abs(numerator)\n    denominator = abs(denominator)\n    \n    # Get the decimal digits\n    remainder = (numerator * 10 ** n) % denominator\n    digit = (remainder * 10) // denominator\n    \n    return digit\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpcyh64m5l.py\", line 11, in <module>\n    assert find_nth_digit(1,2,1) == 5\nAssertionError", "passed": false}
{"task_id": 38, "requirement": "Input-Output Conditions", "completion": "def div_even_odd(numbers):\n    if not numbers:  # Check if list is empty\n        return None\n        \n    first_even = None\n    first_odd = None\n    \n    # Find first even and odd numbers\n    for num in numbers:\n        if not isinstance(num, int):  # Verify input contains integers\n            return None\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Return None if either number wasn't found\n    if first_even is None or first_odd is None:\n        return None\n        \n    return first_even / first_odd\n", "result": "passed", "passed": true}
{"task_id": 39, "requirement": "Input-Output Conditions", "completion": "from collections import Counter\nimport heapq\n\ndef rearrange_string(s: str) -> str:\n    # Input validation\n    if not s or not s.islower() or not s.isalpha():\n        raise ValueError(\"Input must be a non-empty string of lowercase letters\")\n    \n    # Count frequency of each character\n    char_count = Counter(s)\n    \n    # Create a max heap (using negative counts since heapq is min heap)\n    max_heap = [(-count, char) for char, count in char_count.items()]\n    heapq.heapify(max_heap)\n    \n    result = []\n    \n    while len(result) < len(s):\n        # If we can't get two characters when needed, it's impossible\n        if len(max_heap) < 1:\n            return \"\"\n            \n        # Get the most frequent character\n        count1, char1 = heapq.heappop(max_heap)\n        \n        # If this is not the first character and it's same as previous\n        if result and char1 == result[-1]:\n            # If no other characters available, it's impossible\n            if not max_heap:\n                return \"\"\n            # Get the second most frequent character\n            count2, char2 = heapq.heappop(max_heap)\n            result.append(char2)\n            # Put back char2 if it has remaining count\n            if count2 + 1 < 0:\n                heapq.heappush(max_heap, (count2 + 1, char2))\n            # Put back char1 as we didn't use it\n            heapq.heappush(max_heap, (count1, char1))\n        else:\n            # Use the most frequent character\n            result.append(char1)\n            # Put it back if it has remaining count\n            if count1 + 1 < 0:\n                heapq.heappush(max_heap, (count1 + 1, char1))\n    \n    return ''.join(result)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpynxk6ddi.py\", line 39, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 42, "requirement": "Input-Output Conditions", "completion": "def find_sum(arr):\n    # Create a dictionary to store element frequencies\n    freq = {}\n    \n    # Count frequency of each element\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    \n    # Calculate sum of repeated elements\n    repeated_sum = sum(num for num, count in freq.items() if count > 1)\n    \n    return repeated_sum\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0jrguf0i.py\", line 10, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Input-Output Conditions", "completion": "import re\n\ndef text_match(text):\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return re.search(pattern, text).group()\n    return 'Not matched!'\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdy54v5k7.py\", line 7, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 46, "requirement": "Input-Output Conditions", "completion": "def test_distinct(numbers: list[int]) -> bool:\n    \"\"\"\n    Check if all integers in the given list are distinct.\n    \n    Args:\n        numbers: A list of integers\n        \n    Returns:\n        bool: True if all integers are distinct, False otherwise\n        \n    Raises:\n        TypeError: If input is not a list or contains non-integer values\n    \"\"\"\n    # Input validation\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list\")\n    \n    if not all(isinstance(x, int) for x in numbers):\n        raise TypeError(\"All elements must be integers\")\n        \n    # Check for distinct values\n    return len(set(numbers)) == len(numbers)\n", "result": "passed", "passed": true}
{"task_id": 48, "requirement": "Input-Output Conditions", "completion": "def odd_bit_set_number(num):\n    \"\"\"\n    Set all odd bits of a given integer.\n    Args:\n        num: An integer input\n    Returns:\n        An integer with all odd bits set\n    Raises:\n        TypeError: If input is not an integer\n    \"\"\"\n    # Input validation\n    if not isinstance(num, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    # Get number of bits needed to represent the number\n    num_bits = num.bit_length()\n    \n    # Create a mask with 1s in odd positions\n    # Start with 2 (binary: 10) and keep shifting left\n    mask = 0\n    for i in range(1, num_bits + 2, 2):\n        mask |= (1 << i)\n    \n    # Set odd bits using OR operation\n    result = num | mask\n    \n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp52mrwami.py\", line 15, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "requirement": "Input-Output Conditions", "completion": "def specified_element(matrix, index=0):\n    \"\"\"\n    Extract elements at the specified index from each sublist in a 2D list.\n    \n    Args:\n        matrix (list): A 2D list/matrix\n        index (int): Index of elements to extract (defaults to 0)\n    \n    Returns:\n        list: Elements from the specified index of each sublist\n        If matrix is empty, returns an empty list\n    \"\"\"\n    if not matrix:\n        return []\n        \n    return [sublist[index] for sublist in matrix if len(sublist) > index]\n", "result": "passed", "passed": true}
{"task_id": 50, "requirement": "Input-Output Conditions", "completion": "def min_length_list(lists):\n    shortest_list = min(lists, key=lambda x: len(x))\n    return (len(shortest_list), shortest_list)\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    test_lists = [[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]\n    min_length, shortest = min_length_list(test_lists)\n    print(f\"Lists: {test_lists}\")\n    print(f\"Minimum length: {min_length}\")\n    print(f\"Shortest list: {shortest}\")\n", "result": "passed", "passed": true}
{"task_id": 52, "requirement": "Input-Output Conditions", "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n    \n    Args:\n        base (float): The length of the base of the parallelogram\n        height (float): The perpendicular height of the parallelogram\n        \n    Returns:\n        float: The area of the parallelogram\n        \n    Raises:\n        ValueError: If base or height is not positive\n    \"\"\"\n    if base <= 0 or height <= 0:\n        raise ValueError(\"Base and height must be positive numbers\")\n    \n    area = base * height\n    return area\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpuw86yjbh.py\", line 10, in <module>\n    assert parallelogram_area(0, 10) == 0\n  File \"/tmp/tmpuw86yjbh.py\", line 3, in parallelogram_area\n    raise ValueError(\"Base and height must be positive numbers\")\nValueError: Base and height must be positive numbers", "passed": false}
{"task_id": 53, "requirement": "Input-Output Conditions", "completion": "def check_equality(text):\n    # Check if input is a string\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Check if string is empty\n    if not text:\n        return \"Not Equal\"\n    \n    # Compare first and last characters\n    return \"Equal\" if text[0] == text[-1] else \"Not Equal\"\n", "result": "passed", "passed": true}
{"task_id": 54, "requirement": "Input-Output Conditions", "completion": "def counting_sort(arr):\n    # Input validation\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    if not arr:\n        return arr\n    \n    # Validate that all elements are non-negative integers\n    for num in arr:\n        if not isinstance(num, int):\n            raise TypeError(\"All elements must be integers\")\n        if num < 0:\n            raise ValueError(\"All elements must be non-negative\")\n    \n    # Find the maximum element\n    max_val = max(arr)\n    \n    # Create a counting array initialized with zeros\n    count = [0] * (max_val + 1)\n    \n    # Store count of each number\n    for num in arr:\n        count[num] += 1\n    \n    # Modify count array to store actual positions\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    \n    # Create output array\n    output = [0] * len(arr)\n    \n    # Build the output array\n    for i in range(len(arr) - 1, -1, -1):\n        output[count[arr[i]] - 1] = arr[i]\n        count[arr[i]] -= 1\n    \n    return output\n", "result": "passed", "passed": true}
{"task_id": 57, "requirement": "Input-Output Conditions", "completion": "def find_max_num(digits, n):\n    # Input validation\n    if n > len(digits) or n <= 0:\n        return -1\n    \n    # Convert digits to strings and sort in descending order\n    digits_str = [str(d) for d in digits]\n    digits_str.sort(reverse=True)\n    \n    # Take first n digits and join them\n    result = ''.join(digits_str[:n])\n    \n    return int(result)\n", "result": "passed", "passed": true}
{"task_id": 58, "requirement": "Input-Output Conditions", "completion": "def opposite_signs(num1: int, num2: int) -> bool:\n    \"\"\"\n    Check if two integers have opposite signs.\n    \n    Args:\n        num1 (int): First integer\n        num2 (int): Second integer\n        \n    Returns:\n        bool: True if numbers have opposite signs, False otherwise\n        \n    Raises:\n        TypeError: If inputs are not integers\n    \"\"\"\n    # Validate input types\n    if not (isinstance(num1, int) and isinstance(num2, int)):\n        raise TypeError(\"Both inputs must be integers\")\n    \n    # Check for opposite signs\n    return (num1 * num2) < 0\n", "result": "passed", "passed": true}
{"task_id": 60, "requirement": "Input-Output Conditions", "completion": "def max_len_sub(arr, k):\n    if not arr:\n        return 0\n    if len(arr) < 2:\n        return 1\n    \n    n = len(arr)\n    # dp[i] stores the length of subsequence ending at index i\n    dp = [1] * n\n    max_length = 1\n    \n    for i in range(1, n):\n        for j in range(i):\n            # Check if difference between elements is exactly k\n            if abs(arr[i] - arr[j]) == k:\n                dp[i] = max(dp[i], dp[j] + 1)\n        max_length = max(max_length, dp[i])\n    \n    return max_length\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpn8_ewfwc.py\", line 17, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nAssertionError", "passed": false}

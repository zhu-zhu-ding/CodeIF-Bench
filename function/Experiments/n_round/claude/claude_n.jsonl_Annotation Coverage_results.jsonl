{"task_id": 11, "requirement": "Annotation Coverage", "completion": "def remove_occ(s: str, ch: str) -> str:\n    # Validate that ch is a single character\n    if len(ch) != 1:\n        raise ValueError('Second parameter must be a single character.')\n    \n    # Handle empty string\n    if not s:\n        return s\n    \n    # Find first and last occurrence\n    first = s.find(ch)\n    last = s.rfind(ch)\n    \n    # If character not found, return original string\n    if first == -1:\n        return s\n    \n    # If only one occurrence, remove it\n    if first == last:\n        return s[:first] + s[first + 1:]\n    \n    # Remove both first and last occurrences\n    return s[:first] + s[first + 1:last] + s[last + 1:]\n", "result": "passed", "passed": true}
{"task_id": 12, "requirement": "Annotation Coverage", "completion": "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    # Type checking\n    if not isinstance(matrix, list):\n        raise TypeError(\"Input must be a list of lists\")\n    \n    # Check if matrix is empty\n    if not matrix:\n        return []\n    \n    # Validate each row and element\n    for row in matrix:\n        if not isinstance(row, list):\n            raise TypeError(\"Each row must be a list\")\n        for element in row:\n            if not isinstance(element, int):\n                raise TypeError(\"All elements must be integers\")\n    \n    # Sort matrix rows based on their sums\n    return sorted(matrix, key=sum)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpb948p6s5.py\", line 32, in <module>\n    test_annotations()\n  File \"/tmp/tmpb948p6s5.py\", line 31, in test_annotations\n    assert hints == {'matrix': 'list[list[int]]', 'return': 'list[list[int]]'}\nAssertionError", "passed": false}
{"task_id": 13, "requirement": "Annotation Coverage", "completion": "from collections import Counter\nfrom typing import List, Tuple\n\ndef count_common(words: List[str], n: int = 5) -> List[Tuple[str, int]]:\n    \"\"\"\n    Count the most common words in a list of strings.\n    \n    Args:\n        words (List[str]): List of words to analyze\n        n (int): Number of most common words to return (default=5)\n    \n    Returns:\n        List[Tuple[str, int]]: List of tuples containing (word, count) pairs\n        \n    Raises:\n        TypeError: If input is not a list of strings\n    \"\"\"\n    # Type checking\n    if not isinstance(words, list) or not all(isinstance(word, str) for word in words):\n        raise TypeError(\"Input must be a list of strings\")\n    \n    # Handle empty list\n    if not words:\n        return []\n    \n    # Convert all words to lowercase and count occurrences\n    word_counts = Counter(word.lower() for word in words)\n    \n    # Return n most common words\n    return word_counts.most_common(n)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvfmtrj08.py\", line 14, in <module>\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nAssertionError", "passed": false}
{"task_id": 14, "requirement": "Annotation Coverage", "completion": "def find_volume(base_area: float, height: float, length: float) -> float:\n    \"\"\"Calculate the volume of a triangular prism.\"\"\"\n    \n    # Check if inputs are numeric and positive\n    if not all(isinstance(x, (int, float)) for x in [base_area, height, length]):\n        raise ValueError(\"All dimensions must be positive numbers.\")\n    \n    if not all(x > 0 for x in [base_area, height, length]):\n        raise ValueError(\"All dimensions must be positive numbers.\")\n    \n    # Calculate the volume\n    volume = base_area * length\n    \n    return volume\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmprsvutlk3.py\", line 11, in <module>\n    assert find_volume(10,8,6) == 240\nAssertionError", "passed": false}
{"task_id": 15, "requirement": "Annotation Coverage", "completion": "from typing import List\n\ndef split_lowerstring(text: str) -> List[str]:\n    \"\"\"\n    Splits a string at lowercase letters.\n    \n    Args:\n        text (str): The input string to be split\n        \n    Returns:\n        List[str]: A list of strings split at lowercase letters\n        \n    Raises:\n        TypeError: If the input is not a string\n    \"\"\"\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n        \n    result: List[str] = []\n    current_word: str = \"\"\n    \n    for char in text:\n        if char.islower():\n            if current_word:\n                result.append(current_word)\n            current_word = char\n        else:\n            current_word += char\n    \n    # Append the last word if it exists\n    if current_word:\n        result.append(current_word)\n    \n    return result\n", "result": "failed: File \"/tmp/tmpf3jaswxe.py\", line 22\n    try: split_lowerstring(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 16, "requirement": "Annotation Coverage", "completion": "import re\nfrom typing import Optional\n\ndef text_lowercase_underscore(text: str) -> str:\n    # Type check\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Handle empty string\n    if not text:\n        return \"Not matched!\"\n    \n    # Pattern for lowercase letters joined by underscore\n    pattern = r'^[a-z]+(?:_[a-z]+)*$'\n    \n    # Check if the entire string matches the pattern\n    if re.match(pattern, text):\n        return \"Found a match!\"\n    return \"Not matched!\"\n", "result": "passed", "passed": true}
{"task_id": 17, "requirement": "Annotation Coverage", "completion": "def square_perimeter(a: int) -> int:\n    \"\"\"\n    Calculate the perimeter of a square.\n    \n    Args:\n        a (int): Length of one side of the square\n        \n    Returns:\n        int: Perimeter of the square\n        \n    Raises:\n        ValueError: If the side length is negative\n    \"\"\"\n    if a < 0:\n        raise ValueError(\"Side length cannot be negative\")\n    \n    perimeter = 4 * a\n    return perimeter\n", "result": "passed", "passed": true}
{"task_id": 18, "requirement": "Annotation Coverage", "completion": "def remove_dirty_chars(string: str, second_string: str) -> str:\n    # Type checking\n    if not isinstance(string, str) or not isinstance(second_string, str):\n        raise TypeError(\"Both inputs must be strings\")\n        \n    # Check if strings contain only alphabetic characters\n    if not (string.isalpha() or string == \"\") or not (second_string.isalpha() or second_string == \"\"):\n        raise ValueError(\"Input strings must only contain alphabetic characters\")\n        \n    # Return original string if second_string is empty\n    if not second_string:\n        return string\n        \n    # Convert second_string to a set for O(1) lookup\n    chars_to_remove = set(second_string)\n    \n    # Use list comprehension to keep only characters not in chars_to_remove\n    return ''.join(char for char in string if char not in chars_to_remove)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7cfuccwv.py\", line 19, in <module>\n    try: remove_dirty_chars('hell0', 'world')\n  File \"/tmp/tmp7cfuccwv.py\", line 7, in remove_dirty_chars\n    raise ValueError(\"Input strings must only contain alphabetic characters\")\nValueError: Input strings must only contain alphabetic characters\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmp7cfuccwv.py\", line 20, in <module>\n    except ValueError as e: assert str(e) == 'Input strings must only contain alphabetic characters.'\nAssertionError", "passed": false}
{"task_id": 19, "requirement": "Annotation Coverage", "completion": "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    \"\"\"\n    Check if an array contains any duplicate elements.\n    \n    Args:\n        arraynums (List[int]): List of integers to check\n        \n    Returns:\n        bool: True if duplicates exist, False otherwise\n        \n    Raises:\n        TypeError: If input is not a list\n        ValueError: If input contains non-integer elements\n    \"\"\"\n    # Type checking\n    if not isinstance(arraynums, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Validate all elements are integers\n    if not all(isinstance(x, int) for x in arraynums):\n        raise ValueError(\"Input must be a list of integers\")\n    \n    seen = set()\n    \n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    \n    return False\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    test_cases = [\n        [1, 2, 3, 4, 5],        # No duplicates\n        [1, 2, 3, 2, 5],        # Has duplicates\n        [],                      # Empty list\n        [1],                     # Single element\n    ]\n    \n    for arr in test_cases:\n        print(f\"Array {arr} has duplicates: {test_duplicate(arr)}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2j6qnqg1.py\", line 38, in <module>\n    test_duplicate(None)\n  File \"/tmp/tmp2j6qnqg1.py\", line 5, in test_duplicate\n    raise TypeError(\"Input must be a list\")\nTypeError: Input must be a list\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmp2j6qnqg1.py\", line 41, in <module>\n    assert str(e) == 'Input must be a list of integers'\nAssertionError", "passed": false}
{"task_id": 20, "requirement": "Annotation Coverage", "completion": "def is_woodall(x: int) -> bool:\n    \"\"\"\n    Check if a given number is a Woodall number.\n    A Woodall number follows the formula: n \u00d7 2^n - 1, where n is a natural number.\n    \n    Args:\n        x (int): The number to check\n        \n    Returns:\n        bool: True if the number is a Woodall number, False otherwise\n        \n    Raises:\n        TypeError: If the input is not an integer\n    \"\"\"\n    if not isinstance(x, int):\n        raise TypeError(\"Input must be an integer\")\n        \n    if x < 1:  # Woodall numbers are always positive\n        return False\n    \n    n = 1\n    while True:\n        woodall = n * (2 ** n) - 1\n        if woodall == x:\n            return True\n        if woodall > x:  # If we exceed the input number, it's not a Woodall number\n            return False\n        n += 1\n", "result": "passed", "passed": true}
{"task_id": 21, "requirement": "Annotation Coverage", "completion": "def multiples_of_num(n: int, m: int) -> list[int]:\n    \"\"\"\n    Find m multiples of number n.\n    \n    Args:\n        n (int): The number to find multiples of\n        m (int): The number of multiples to find\n        \n    Returns:\n        list[int]: A list containing m multiples of n\n        \n    Raises:\n        ValueError: If either m or n is negative\n    \"\"\"\n    if n < 0 or m < 0:\n        raise ValueError(\"Both n and m must be non-negative\")\n        \n    if m == 0:\n        return []\n        \n    return [n * i for i in range(1, m + 1)]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpeqpjwwxf.py\", line 7, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "requirement": "Annotation Coverage", "completion": "def find_first_duplicate(nums: list[int]) -> int:\n    \"\"\"\n    Find the first duplicate element in a list of integers.\n    \n    Args:\n        nums: A list of integers\n        \n    Returns:\n        int: The first duplicate element found, or -1 if no duplicates exist\n        \n    Raises:\n        TypeError: If input is not a list of integers\n    \"\"\"\n    # Type checking\n    if not isinstance(nums, list):\n        raise TypeError(\"Input must be a list\")\n    if not all(isinstance(x, int) for x in nums):\n        raise TypeError(\"All elements must be integers\")\n        \n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpiegv13bm.py\", line 20, in <module>\n    assert find_first_duplicate.__annotations__ == {'nums': list, 'return': int}\nAssertionError", "passed": false}
{"task_id": 23, "requirement": "Annotation Coverage", "completion": "from typing import List\n\ndef maximum_sum(list1: List[List[int]]) -> int:\n    if not list1:  # Check if input list is empty\n        return 0\n    \n    # Type validation\n    if not isinstance(list1, list):\n        raise TypeError(\"Input must be a list of lists\")\n    \n    for sublist in list1:\n        if not isinstance(sublist, list):\n            raise TypeError(\"Each element must be a list\")\n        if not all(isinstance(x, int) for x in sublist):\n            raise TypeError(\"All elements in sublists must be integers\")\n    \n    # Use max with default value 0 for empty sublists\n    return max((sum(sublist) for sublist in list1), default=0)\n", "result": "failed: File \"/tmp/tmpgorlb17_.py\", line 19\n    try: maximum_sum([[1, 2], [3, 'a']]); assert False, 'Expected TypeError' except TypeError: pass\n                                                                             ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 24, "requirement": "Annotation Coverage", "completion": "def binary_to_decimal(binary: str) -> int:\n    # Handle empty string case\n    if not binary:\n        return 0\n        \n    # Check if the string contains only 0s and 1s\n    if not all(digit in '01' for digit in binary):\n        raise ValueError('Invalid binary number')\n    \n    decimal = 0\n    power = 0\n    \n    # Iterate through binary digits from right to left\n    for digit in reversed(binary):\n        decimal += int(digit) * (2 ** power)\n        power += 1\n        \n    return decimal\n", "result": "failed: File \"/tmp/tmp4esty__o.py\", line 18\n    try: binary_to_decimal('102'); assert False, 'Expected ValueError' except ValueError as e: assert str(e) == 'Invalid binary number'\n                                                                       ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 25, "requirement": "Annotation Coverage", "completion": "from typing import List\n\ndef find_product(arr: List[int]) -> int:\n    # Type checking\n    if not isinstance(arr, list) or not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"Input must be a list of integers\")\n    \n    # Handle empty list case\n    if not arr:\n        return 1\n        \n    # Convert array to set to remove duplicates\n    unique_elements = set(arr)\n    \n    # Calculate product of unique elements\n    product = 1\n    for num in unique_elements:\n        product *= num\n        \n    return product\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdx3p0fe4.py\", line 16, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "requirement": "Annotation Coverage", "completion": "from typing import List, Tuple\n\ndef check_k_elements(test_list: List[Tuple], k: int) -> bool:\n    \"\"\"\n    Check if all tuples in the list contain exactly k elements.\n    \n    Args:\n        test_list (List[Tuple]): A list of tuples to check\n        k (int): The expected number of elements\n        \n    Returns:\n        bool: True if all tuples have k elements, False otherwise\n        \n    Raises:\n        TypeError: If test_list is not a list of tuples or k is not an integer\n    \"\"\"\n    # Type checking\n    if not isinstance(k, int):\n        raise TypeError(\"k must be an integer\")\n    if not isinstance(test_list, list):\n        raise TypeError(\"Input must be a list\")\n    if not all(isinstance(item, tuple) for item in test_list):\n        raise TypeError(\"All elements in the list must be tuples\")\n    \n    # Handle empty list case\n    if not test_list:\n        return False\n    \n    # Check if all tuples have exactly k elements\n    return all(len(tup) == k for tup in test_list)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpv9rfck4m.py\", line 15, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "requirement": "Annotation Coverage", "completion": "def remove(string_list: list[str]) -> list[str]:\n    \"\"\"\n    Removes all digits from each string in the input list.\n    \n    Args:\n        string_list: A list of strings to process\n        \n    Returns:\n        A new list containing the strings with all digits removed\n        \n    Raises:\n        TypeError: If input is not a list or if any element is not a string\n    \"\"\"\n    if not isinstance(string_list, list):\n        raise TypeError(\"Input must be a list\")\n    \n    if not all(isinstance(s, str) for s in string_list):\n        raise TypeError(\"All elements must be strings\")\n        \n    return [''.join(char for char in s if not char.isdigit()) for s in string_list]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpap5akwg_.py\", line 25, in <module>\n    assert remove.__annotations__ == {'list': list[str], 'return': list[str]}\nAssertionError", "passed": false}
{"task_id": 28, "requirement": "Annotation Coverage", "completion": "def binomial_coeff(n: int, k: int) -> int:\n    \"\"\"\n    Calculate the binomial coefficient C(n,k) - number of ways to choose k items from n items.\n    \n    Args:\n        n (int): Total number of items\n        k (int): Number of items to choose\n        \n    Returns:\n        int: The binomial coefficient value\n        \n    Raises:\n        ValueError: If n < 0 or k < 0 or k > n\n    \"\"\"\n    # Input validation\n    if n < 0 or k < 0 or k > n:\n        raise ValueError(\"Invalid input: Require n >= 0, k >= 0, and k <= n\")\n    \n    # Optimize by using the smaller value of k or n-k\n    k = min(k, n - k)\n    \n    # Base cases\n    if k == 0:\n        return 1\n    if k == 1:\n        return n\n    \n    # Calculate using multiplicative formula\n    result = 1\n    for i in range(k):\n        result *= (n - i)\n        result //= (i + 1)\n    \n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpx0ge85jp.py\", line 22, in <module>\n    try: binomial_coeff(-1, 2)\n  File \"/tmp/tmpx0ge85jp.py\", line 4, in binomial_coeff\n    raise ValueError(\"Invalid input: Require n >= 0, k >= 0, and k <= n\")\nValueError: Invalid input: Require n >= 0, k >= 0, and k <= n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpx0ge85jp.py\", line 23, in <module>\n    except ValueError as e: assert str(e) == 'Inputs must be non-negative and k must not be greater than n'\nAssertionError", "passed": false}
{"task_id": 29, "requirement": "Annotation Coverage", "completion": "from typing import List, Optional\n\ndef get_odd_occurrence(arr: List[int], arr_size: int) -> Optional[int]:\n    # Input validation\n    if not isinstance(arr, list) or not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"Input must be a list of integers\")\n    \n    if not arr:\n        return None\n        \n    if len(arr) != arr_size:\n        raise ValueError(\"Array size doesn't match the provided arr_size parameter\")\n    \n    result = 0\n    for element in arr:\n        result ^= element\n    \n    return result if result != 0 else None\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4cfbeatr.py\", line 30, in <module>\n    assert get_odd_occurrence([]) is None\nTypeError: get_odd_occurrence() missing 1 required positional argument: 'arr_size'", "passed": false}
{"task_id": 30, "requirement": "Annotation Coverage", "completion": "def count_substring_with_equal_ends(s: str) -> int:\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n        \n    if not s:\n        return 0\n        \n    n = len(s)\n    count = 0\n    \n    # Consider each possible substring\n    for i in range(n):\n        for j in range(i, n):\n            # If first and last characters match, increment count\n            if s[i] == s[j]:\n                count += 1\n                \n    return count\n", "result": "failed: File \"/tmp/tmp77_8cwuk.py\", line 19\n    try: count_substring_with_equal_ends(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                                  ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 31, "requirement": "Annotation Coverage", "completion": "from typing import List\nfrom heapq import heappush, heappop\nfrom collections import Counter\n\ndef func(nums: List[List[int]], k: int) -> List[int]:\n    # Handle empty input case\n    if not any(nums):\n        return []\n    \n    # Flatten the list of lists and count frequencies\n    all_nums = []\n    for sublist in nums:\n        all_nums.extend(sublist)\n    \n    # Count frequency of each number\n    freq_counter = Counter(all_nums)\n    \n    # Check if k is valid\n    if k > len(freq_counter):\n        raise ValueError('k cannot be greater than the number of distinct integers')\n    \n    # Create min heap to maintain top k elements\n    heap = []\n    \n    for num, freq in freq_counter.items():\n        # Push tuple of (frequency, number) to heap\n        heappush(heap, (freq, num))\n        # If heap size exceeds k, remove smallest frequency element\n        if len(heap) > k:\n            heappop(heap)\n    \n    # Extract the k most frequent elements\n    result = []\n    while heap:\n        freq, num = heappop(heap)\n        result.append(num)\n    \n    # Return result in descending order of frequency\n    return result[::-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpbfzt5w0a.py\", line 32, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "requirement": "Annotation Coverage", "completion": "def max_prime_factors(n: int) -> int:\n    \"\"\"\n    Find the largest prime factor of a given positive integer.\n    \n    Args:\n        n (int): A positive integer to find its largest prime factor\n        \n    Returns:\n        int: The largest prime factor of the input number\n        \n    Raises:\n        ValueError: If the input is not a positive integer\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    largest_prime = -1\n    \n    # Handle division by 2 separately to simplify the loop\n    while n % 2 == 0:\n        largest_prime = 2\n        n = n // 2\n    \n    # Check odd numbers up to sqrt(n)\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            largest_prime = i\n            n = n // i\n    \n    # If n is still greater than 2, it's prime itself\n    if n > 2:\n        largest_prime = n\n    \n    return largest_prime\n", "result": "passed", "passed": true}
{"task_id": 33, "requirement": "Annotation Coverage", "completion": "def decimal_to_binary(N: int) -> str:\n    if not isinstance(N, int):\n        raise ValueError(\"Input must be an integer\")\n        \n    if N == 0:\n        return \"0\"\n    \n    # Handle negative numbers\n    is_negative = N < 0\n    N = abs(N)\n    \n    binary = \"\"\n    while N > 0:\n        binary = str(N % 2) + binary\n        N //= 2\n    \n    return \"-\" + binary if is_negative else binary\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmph_sl95r1.py\", line 14, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "requirement": "Annotation Coverage", "completion": "def find_missing(ar: list, N: int) -> int:\n    # Check if array is sorted\n    if any(ar[i] > ar[i + 1] for i in range(len(ar) - 1)):\n        raise ValueError(\"Input list must be sorted.\")\n    \n    # Expected sum from 1 to N\n    expected_sum = (N * (N + 1)) // 2\n    \n    # Actual sum of array\n    actual_sum = sum(ar)\n    \n    # Missing number is the difference\n    return expected_sum - actual_sum\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpo0w4tuq3.py\", line 11, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nAssertionError", "passed": false}
{"task_id": 35, "requirement": "Annotation Coverage", "completion": "def find_rect_num(n: int) -> int:\n    \"\"\"\n    Find the n-th rectangular number.\n    \n    Args:\n        n (int): The position of the rectangular number to find (n > 0)\n    \n    Returns:\n        int: The n-th rectangular number\n    \n    Raises:\n        ValueError: If n is less than or equal to 0\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return n * (n + 1)\n", "result": "passed", "passed": true}
{"task_id": 36, "requirement": "Annotation Coverage", "completion": "def find_nth_digit(p: int, q: int, N: int) -> int:\n    if q == 0:\n        raise ValueError(\"Denominator cannot be zero\")\n    \n    # Handle negative numbers\n    if p * q < 0:\n        result = find_nth_digit(abs(p), abs(q), N)\n        return -result if result != 0 else 0\n    \n    p = abs(p)\n    q = abs(q)\n    \n    # Get the decimal digits\n    quotient = p // q\n    remainder = p % q\n    \n    # If N is 0, return the digit before decimal point\n    if N == 0:\n        return int(str(quotient)[-1])\n    \n    # Calculate decimal digits\n    remainders = {}\n    position = 0\n    \n    while remainder != 0 and position < N:\n        # Check for repeating decimals\n        if remainder in remainders:\n            cycle_length = position - remainders[remainder]\n            cycle_start = remainders[remainder]\n            N = ((N - cycle_start - 1) % cycle_length) + cycle_start + 1\n            \n        remainders[remainder] = position\n        remainder *= 10\n        if position == N - 1:\n            return remainder // q\n        remainder %= q\n        position += 1\n    \n    return 0  # If the decimal terminates before Nth position\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2o6tw7e3.py\", line 34, in <module>\n    assert find_nth_digit(5,6,5) == 3\nAssertionError", "passed": false}
{"task_id": 37, "requirement": "Annotation Coverage", "completion": "from typing import Union\n\ndef sort_mixed_list(mixed_list: list[Union[int, str]]) -> list[Union[int, str]]:\n    # Type validation\n    if not isinstance(mixed_list, list):\n        raise TypeError(\"Input must be a list\")\n        \n    # Validate all elements are either int or str\n    if not all(isinstance(x, (int, str)) for x in mixed_list):\n        raise TypeError(\"All elements must be either integers or strings\")\n    \n    # Separate integers and strings\n    integers = [x for x in mixed_list if isinstance(x, int)]\n    strings = [x for x in mixed_list if isinstance(x, str)]\n    \n    # Sort each list separately\n    integers.sort()\n    strings.sort()\n    \n    # Return combined sorted list\n    return integers + strings\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpq1jlpebu.py\", line 35, in <module>\n    assert sort_mixed_list.__annotations__ == {'mixed_list': list[Union[int, str]], 'return' : list}\nAssertionError", "passed": false}
{"task_id": 38, "requirement": "Annotation Coverage", "completion": "from typing import Union, List\n\ndef div_even_odd(list1: List[int]) -> Union[int, float]:\n    # Initialize variables to store first even and odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Find first even and odd numbers\n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Check if both even and odd numbers were found\n    if first_even is None or first_odd is None:\n        raise ValueError(\"List must contain at least one even and one odd number.\")\n    \n    # Handle case where first even number is zero\n    if first_even == 0:\n        return 0\n    \n    # Perform division and return result\n    return first_even / first_odd\n", "result": "failed: File \"/tmp/tmp5bi88a06.py\", line 26\n    try: div_even_odd([2, 4, 6]); assert False; except ValueError as e: assert str(e) == 'List must contain at least one even and one odd number.'\n                                                ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 39, "requirement": "Annotation Coverage", "completion": "from collections import Counter\nimport heapq\nfrom typing import List\n\ndef rearrange_string(s: str) -> str:\n    \"\"\"\n    Write a function to check if the letters of a given string can be rearranged \n    so that two characters that are adjacent to each other are different.\n    \n    Args:\n        s (str): Input string containing only lowercase letters.\n        \n    Returns:\n        str: A rearranged string where no two adjacent characters are the same.\n             Returns an empty string if such rearrangement is not possible.\n             \n    Raises:\n        ValueError: If the input is not a string or contains non-lowercase letters.\n        \n    Examples:\n        >>> rearrange_string(\"aab\")\n        'aba'\n        >>> rearrange_string(\"aaab\")\n        ''\n        >>> rearrange_string(\"aabbcc\")\n        'abcabc'\n    \"\"\"\n    # Input validation\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string\")\n    if not s.islower():\n        raise ValueError(\"Input must contain only lowercase letters\")\n    if not s:\n        raise ValueError(\"Input string cannot be empty\")\n        \n    # Count frequency of each character\n    char_count = Counter(s)\n    \n    # Create a max heap (using negative counts since heapq is min heap)\n    max_heap = [(-count, char) for char, count in char_count.items()]\n    heapq.heapify(max_heap)\n    \n    result: List[str] = []\n    \n    # Keep track of the previous character and its count\n    prev_count, prev_char = 0, ''\n    \n    while max_heap:\n        # Get the character with highest frequency\n        count, char = heapq.heappop(max_heap)\n        result.append(char)\n        \n        # If we had a previous character waiting, add it back to heap\n        if prev_count < 0:\n            heapq.heappush(max_heap, (prev_count, prev_char))\n            \n        # Update previous character info\n        prev_count, prev_char = count + 1, char\n        \n    # Check if the resulting string length matches input length\n    return ''.join(result) if len(result) == len(s) else ''\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2n1w83s6.py\", line 31, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "requirement": "Annotation Coverage", "completion": "from collections import Counter\nfrom itertools import chain\nfrom typing import List, Dict\n\ndef freq_element(nums: List[List[int]]) -> Dict[int, int]:\n    \"\"\"\n    Find the frequency of integer elements in a list of lists.\n    \n    Args:\n        nums: A list of lists containing integers\n        \n    Returns:\n        A dictionary with integers as keys and their frequencies as values\n        \n    Raises:\n        TypeError: If the input is not a list of lists or contains non-integer elements\n    \"\"\"\n    # Type checking\n    if not isinstance(nums, list) or not all(isinstance(sublist, list) for sublist in nums):\n        raise TypeError(\"Input must be a list of lists\")\n    \n    # Check for empty input\n    if not nums:\n        return {}\n    \n    # Check if all elements are integers\n    if not all(isinstance(x, int) for sublist in nums for x in sublist):\n        raise TypeError(\"All elements must be integers\")\n    \n    # Flatten the list of lists and count elements using Counter\n    flat_list = list(chain.from_iterable(nums))\n    frequency = Counter(flat_list)\n    return dict(frequency)\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    test_list = [[1, 2, 3], [4, 2, 3], [1, 2]]\n    result = freq_element(test_list)\n    print(result)  # Output: {1: 2, 2: 3, 3: 2, 4: 1}\n    \n    # Error cases\n    try:\n        freq_element([[1, 2], [3, '4']])  # Will raise TypeError\n    except TypeError as e:\n        print(f\"Error: {e}\")\n        \n    try:\n        freq_element(\"not a list\")  # Will raise TypeError\n    except TypeError as e:\n        print(f\"Error: {e}\")\n", "result": "failed: File \"/tmp/tmpn5iseauf.py\", line 36\n    try: freq_element('not a list'); assert False; except TypeError: assert True\n                                                   ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 41, "requirement": "Annotation Coverage", "completion": "from typing import List\n\ndef filter_evennumbers(nums: List[int]) -> List[int]:\n    # Type checking\n    if not isinstance(nums, list):\n        raise TypeError(\"Input must be a list\")\n    if not all(isinstance(x, int) for x in nums):\n        raise TypeError(\"All elements must be integers\")\n        \n    return list(filter(lambda x: x % 2 == 0, nums))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0bs8jlf8.py\", line 16, in <module>\n    assert filter_evennumbers.__annotations__ == {'nums': list, 'return': list}\nAssertionError", "passed": false}
{"task_id": 42, "requirement": "Annotation Coverage", "completion": "def find_sum(arr: list, n: int) -> int:\n    # Type check for input\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Handle empty array\n    if not arr:\n        return 0\n        \n    # Create a dictionary to store element frequencies\n    freq = {}\n    \n    # Count frequency of each element\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    \n    # Calculate sum of repeated elements\n    repeated_sum = sum(num for num, count in freq.items() if count > 1)\n    \n    return repeated_sum\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplla2l4td.py\", line 16, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nAssertionError", "passed": false}
{"task_id": 43, "requirement": "Annotation Coverage", "completion": "import re\nfrom typing import Optional\n\ndef text_match(text: str) -> str:\n    # Check if input is a string\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Check if string is empty\n    if not text:\n        return \"Not matched!\"\n    \n    pattern = r'^[a-z]+_[a-z]+$'\n    if re.search(pattern, text):\n        return text\n    return \"Not matched!\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpn0i5hw5i.py\", line 14, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 44, "requirement": "Annotation Coverage", "completion": "import re\nfrom typing import Optional\n\ndef text_match_string(text: str) -> str:\n    \"\"\"\n    Check if the string starts with a word character sequence.\n    Returns the matched word if found, empty string otherwise.\n    \n    Args:\n        text (str): The input string to check\n        \n    Returns:\n        str: The matched word if found, empty string otherwise\n        \n    Raises:\n        TypeError: If input is not a string\n    \"\"\"\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n        \n    pattern = '^[A-Za-z]+'\n    match = re.search(pattern, text)\n    \n    return match.group(0) if match else \"\"\n\n# Example usage:\nprint(text_match_string(\"Hello World\"))  # \"Hello\"\nprint(text_match_string(\"123 Hello\"))    # \"\"\nprint(text_match_string(\" Hello\"))       # \"\"\nprint(text_match_string(\"Python3\"))      # \"Python\"\nprint(text_match_string(\"\"))             # \"\"\n", "result": "failed: File \"/tmp/tmpzkboc8s5.py\", line 18\n    try: text_match_string(123); assert False, 'TypeError not raised' except TypeError: pass\n                                                                      ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 45, "requirement": "Annotation Coverage", "completion": "from typing import List\n\ndef get_gcd(numbers: List[int]) -> int:\n    from math import gcd\n    from functools import reduce\n    \n    if not numbers:\n        raise ValueError('Input list cannot be empty.')\n    \n    # Handle negative numbers by using absolute values\n    numbers = [abs(num) for num in numbers]\n    \n    # Reduce applies gcd function pairwise to the array elements\n    return reduce(gcd, numbers)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkm410yhm.py\", line 16, in <module>\n    assert get_gcd.__annotations__ == {'numbers': list, 'return': int}\nAssertionError", "passed": false}
{"task_id": 46, "requirement": "Annotation Coverage", "completion": "def test_distinct(numbers: list) -> bool:\n    \"\"\"\n    Check if all numbers in the given list are distinct.\n    \n    Args:\n        numbers: A list of integers\n        \n    Returns:\n        bool: True if all numbers are distinct, False otherwise\n        \n    Raises:\n        TypeError: If input is not a list or contains non-integer elements\n    \"\"\"\n    # Type checking\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if all elements are integers\n    if not all(isinstance(x, int) for x in numbers):\n        raise TypeError(\"All elements must be integers\")\n    \n    # Check for distinct numbers\n    return len(set(numbers)) == len(numbers)\n", "result": "passed", "passed": true}
{"task_id": 47, "requirement": "Annotation Coverage", "completion": "def compute_last_digit(a: int, b: int) -> int:\n    if a > b:\n        raise ValueError('a should not be greater than b')\n    \n    result = 1\n    # We only need to multiply numbers from (a+1) to b\n    # And we only care about the last digit at each step\n    for i in range(a + 1, b + 1):\n        result = (result * (i % 10)) % 10\n        \n    return result\n", "result": "passed", "passed": true}
{"task_id": 48, "requirement": "Annotation Coverage", "completion": "def odd_bit_set_number(n: int) -> int:\n    \"\"\"\n    Sets all odd bits of a given number.\n    \n    Args:\n        n: int - The input integer\n        \n    Returns:\n        int - Number with all odd bits set\n        \n    Raises:\n        TypeError: If input is not an integer\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n        \n    # Create a mask with all odd bits set (1,3,5,7...)\n    # In binary: ...1010101\n    mask = 0xAAAAAAAA\n    \n    # Perform OR operation to set all odd bits\n    result = n | mask\n    \n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpr6aut_ri.py\", line 10, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 50, "requirement": "Annotation Coverage", "completion": "from typing import List, Tuple\n\ndef min_length_list(lists: List[List]) -> Tuple[int, List]:\n    \"\"\"\n    Find the list with minimum length from a list of lists.\n    \n    Args:\n        lists: A list of lists\n        \n    Returns:\n        A tuple containing the minimum length and the corresponding list\n        \n    Raises:\n        ValueError: If the input is not a list of lists\n    \"\"\"\n    if not isinstance(lists, list) or not all(isinstance(x, list) for x in lists):\n        raise ValueError('Input must be a list of lists.')\n    \n    if not lists:\n        raise ValueError('Input list cannot be empty.')\n        \n    min_list = min(lists, key=lambda x: len(x))\n    return (len(min_list), min_list)\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    test_lists = [[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]\n    min_length, shortest_list = min_length_list(test_lists)\n    print(f\"Lists: {test_lists}\")\n    print(f\"Minimum length: {min_length}\")\n    print(f\"List with minimum length: {shortest_list}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdqb9vi3j.py\", line 24, in <module>\n    assert min_length_list.__annotations__ == {'lists': 'list[list]', 'return': 'tuple[int, list]'}\nAssertionError", "passed": false}
{"task_id": 51, "requirement": "Annotation Coverage", "completion": "def check_equilateral(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Check if a triangle with sides a, b, c is equilateral.\n    \n    Args:\n        a (int): Length of first side\n        b (int): Length of second side\n        c (int): Length of third side\n        \n    Returns:\n        bool: True if the triangle is equilateral, False otherwise\n        \n    Raises:\n        ValueError: If any side length is non-positive\n    \"\"\"\n    # Check for non-positive inputs\n    if a <= 0 or b <= 0 or c <= 0:\n        raise ValueError(\"All sides must be positive integers\")\n        \n    return a == b == c\n\n# Example usage\ntry:\n    print(check_equilateral(5, 5, 5))    # True\n    print(check_equilateral(5, 4, 5))    # False\n    print(check_equilateral(-1, 5, 5))   # Raises ValueError\nexcept ValueError as e:\n    print(f\"Error: {e}\")\n", "result": "passed", "passed": true}
{"task_id": 52, "requirement": "Annotation Coverage", "completion": "def parallelogram_area(base: float, height: float) -> float:\n    \"\"\"\n    Calculate the area of a parallelogram.\n    \n    Args:\n        base (float): The length of the base of the parallelogram\n        height (float): The perpendicular height of the parallelogram\n        \n    Returns:\n        float: The area of the parallelogram\n        \n    Raises:\n        TypeError: If base or height are not numerical\n        ValueError: If base or height are not positive numbers\n    \"\"\"\n    # Check if inputs are numerical\n    if not isinstance(base, (int, float)) or not isinstance(height, (int, float)):\n        raise TypeError(\"Base and height must be numerical values\")\n    \n    # Check if inputs are positive\n    if base <= 0 or height <= 0:\n        raise ValueError(\"Base and height must be positive numbers\")\n    \n    area = base * height\n    return float(area)  # Explicitly convert to float for type consistency\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpt611b4yf.py\", line 14, in <module>\n    assert parallelogram_area(0, 10) == 0\n  File \"/tmp/tmpt611b4yf.py\", line 7, in parallelogram_area\n    raise ValueError(\"Base and height must be positive numbers\")\nValueError: Base and height must be positive numbers", "passed": false}
{"task_id": 53, "requirement": "Annotation Coverage", "completion": "def check_equality(s: str) -> str:\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n        \n    if not s:  # Handle empty string\n        return \"Equal\"\n        \n    return \"Equal\" if s[0].lower() == s[-1].lower() else \"Not Equal\"\n", "result": "passed", "passed": true}
{"task_id": 54, "requirement": "Annotation Coverage", "completion": "from typing import List\n\ndef counting_sort(arr: List[int]) -> List[int]:\n    \"\"\"\n    Sorts a list of integers using the counting sort algorithm.\n    \n    Args:\n        arr: List[int] - Input list of integers to be sorted\n        \n    Returns:\n        List[int] - Sorted list of integers\n        \n    Raises:\n        TypeError: If input is not a list or contains non-integer elements\n    \"\"\"\n    # Type checking\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    if any(not isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements must be integers\")\n    \n    # Handle empty or single-element lists\n    if not arr:\n        return arr\n    \n    # Find the range of input array\n    max_val = max(arr)\n    min_val = min(arr)\n    range_of_elements = max_val - min_val + 1\n    \n    # Create a counting array to store count of each unique object\n    count = [0] * range_of_elements\n    \n    # Store count of each object\n    for num in arr:\n        count[num - min_val] += 1\n    \n    # Modify count array such that each element at each index \n    # stores actual position of each object\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    \n    # Create an output array\n    output = [0] * len(arr)\n    \n    # Build the output array\n    for i in range(len(arr) - 1, -1, -1):\n        output[count[arr[i] - min_val] - 1] = arr[i]\n        count[arr[i] - min_val] -= 1\n    \n    # Copy the output array to arr\n    for i in range(len(arr)):\n        arr[i] = output[i]\n    \n    return arr\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpq2ghuqwo.py\", line 58, in <module>\n    test_annotations()\n  File \"/tmp/tmpq2ghuqwo.py\", line 57, in test_annotations\n    assert hints == {'arr': list, 'return': list}\nAssertionError", "passed": false}
{"task_id": 55, "requirement": "Annotation Coverage", "completion": "def tn_gp(a: int, r: int, n: int) -> int:\n    \"\"\"\n    Calculate the nth term of a geometric progression.\n    \n    Parameters:\n        a (int): First term of the geometric progression\n        r (int): Common ratio\n        n (int): Position of the term to find\n        \n    Returns:\n        int: The nth term of the geometric progression\n        \n    Raises:\n        ValueError: If the term number (n) is less than 1\n    \"\"\"\n    if n < 1:\n        raise ValueError('Term number must be greater than 0')\n        \n    if r == 0:\n        return 0 if n > 1 else a\n        \n    return a * (r ** (n - 1))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2ik2gt6j.py\", line 7, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "requirement": "Annotation Coverage", "completion": "def check(n: int) -> bool:\n    # Check if input is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n        \n    # Convert number to string to easily reverse it\n    num_str = str(n)\n    # Reverse the string and convert back to integer\n    reverse_num = int(num_str[::-1])\n    \n    # Check if number is one less than twice its reverse\n    return n == (2 * reverse_num - 1)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmprjk105wf.py\", line 21, in <module>\n    assert check(1) == False\nAssertionError", "passed": false}
{"task_id": 57, "requirement": "Annotation Coverage", "completion": "def find_max_num(digits: list, n: int) -> int:\n    # Handle empty list case\n    if not digits:\n        return 0\n        \n    # Check if n exceeds list length\n    if n > len(digits):\n        raise ValueError('Number of digits exceeds the length of the list.')\n        \n    # Convert digits to strings and sort in descending order\n    digits_str = [str(d) for d in digits]\n    digits_str.sort(reverse=True)\n    \n    # Take first n digits and join them\n    result = ''.join(digits_str[:n])\n    \n    return int(result)\n", "result": "passed", "passed": true}
{"task_id": 58, "requirement": "Annotation Coverage", "completion": "def opposite_signs(a: int, b: int) -> bool:\n    \"\"\"\n    Check if two integers have opposite signs.\n    \n    Args:\n        a (int): First integer\n        b (int): Second integer\n        \n    Returns:\n        bool: True if numbers have opposite signs, False otherwise\n        \n    Raises:\n        TypeError: If inputs are not integers\n    \"\"\"\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise TypeError(\"Both inputs must be integers\")\n    \n    return (a * b) < 0\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_z_tw0sr.py\", line 23, in <module>\n    assert opposite_signs(0, -1) == True\nAssertionError", "passed": false}
{"task_id": 59, "requirement": "Annotation Coverage", "completion": "def is_octagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth octagonal number.\n    \n    Args:\n        n (int): The position of the octagonal number to calculate (must be positive)\n    \n    Returns:\n        int: The nth octagonal number\n    \n    Raises:\n        ValueError: If n is less than or equal to 0\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return n * (3 * n - 2)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpg7hbynph.py\", line 9, in <module>\n    is_octagonal(-1)\n  File \"/tmp/tmpg7hbynph.py\", line 3, in is_octagonal\n    raise ValueError(\"n must be a positive integer\")\nValueError: n must be a positive integer\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpg7hbynph.py\", line 11, in <module>\n    assert str(e) == 'Input must be a positive integer'\nAssertionError", "passed": false}
{"task_id": 60, "requirement": "Annotation Coverage", "completion": "from typing import List\n\ndef max_len_sub(arr: List[int], diff: int) -> int:\n    # Type checking\n    if not isinstance(arr, list):\n        raise TypeError(\"First argument must be a list\")\n    if not isinstance(diff, int):\n        raise TypeError(\"Second argument must be an integer\")\n    \n    # Handle empty array case\n    if not arr:\n        return 0\n    \n    if len(arr) < 2:\n        return 1\n    \n    n = len(arr)\n    # dp[i] stores the length of subsequence ending at index i\n    dp = [1] * n\n    max_length = 1\n    \n    for i in range(1, n):\n        for j in range(i):\n            # Check if difference between elements equals the given diff\n            if abs(arr[i] - arr[j]) == diff:\n                dp[i] = max(dp[i], dp[j] + 1)\n        max_length = max(max_length, dp[i])\n    \n    return max_length\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpzrnj0es6.py\", line 24, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nAssertionError", "passed": false}

{"task_id": 11, "requirement": "Code Standard", "completion": "def remove_occ(s: str, ch: str) -> str:\n    \"\"\"\n    Remove first and last occurrence of a given character from the string.\n\n    Args:\n        s: The input string to process\n        ch: The character to remove (must be a single character)\n\n    Returns:\n        str: The string with first and last occurrence of the character removed\n\n    Raises:\n        ValueError: If the second parameter is not a single character\n    \"\"\"\n    if len(ch) != 1:\n        raise ValueError('Second parameter must be a single character.')\n\n    if not s:\n        return s\n\n    first = s.find(ch)\n    if first == -1:\n        return s\n\n    last = s.rfind(ch)\n    if first == last:\n        return s[:first] + s[first + 1:]\n\n    return s[:first] + s[first + 1:last] + s[last + 1:]\n", "result": "passed", "passed": true}
{"task_id": 12, "requirement": "Code Standard", "completion": "from typing import List\n\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Sort a matrix in ascending order based on the sum of its rows.\n\n    Args:\n        matrix: A list of lists containing integers. Rows can have varying lengths.\n\n    Returns:\n        A new matrix with rows sorted by their sums in ascending order.\n\n    Raises:\n        TypeError: If input is not a list of lists or if any element is not an integer.\n\n    Examples:\n        >>> sort_matrix([[1, 4, 3], [3, 1, 1], [0, 0, 1]])\n        [[0, 0, 1], [3, 1, 1], [1, 4, 3]]\n        >>> sort_matrix([[1], [1, 2], [1, 2, 3]])  # Handles varying lengths\n        [[1], [1, 2], [1, 2, 3]]\n    \"\"\"\n    # Check if input is a list\n    if not isinstance(matrix, list):\n        raise TypeError(\"Input must be a list of lists\")\n\n    # Handle empty matrix\n    if not matrix:\n        return []\n\n    # Validate matrix elements\n    for row in matrix:\n        if not isinstance(row, list):\n            raise TypeError(\"Each row must be a list\")\n        for element in row:\n            if not isinstance(element, int):\n                raise TypeError(\"All elements must be integers\")\n\n    # Sort matrix rows based on their sums\n    return sorted(matrix, key=sum)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6sqqxkjo.py\", line 32, in <module>\n    test_annotations()\n  File \"/tmp/tmp6sqqxkjo.py\", line 31, in test_annotations\n    assert hints == {'matrix': 'list[list[int]]', 'return': 'list[list[int]]'}\nAssertionError", "passed": false}
{"task_id": 14, "requirement": "Code Standard", "completion": "# Example usage\ntry:\n    volume = find_volume(5.0, 3.0, 2.0)\n    print(f\"The volume of the triangular prism is: {volume} cubic units\")\nexcept ValueError as e:\n    print(f\"Error: {e}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpyayebmsx.py\", line 3, in <module>\n    volume = find_volume(5.0, 3.0, 2.0)\nNameError: name 'find_volume' is not defined", "passed": false}
{"task_id": 15, "requirement": "Code Standard", "completion": "from typing import List\n\n\ndef split_lowerstring(text: str) -> List[str]:\n    \"\"\"\n    Split a string at lowercase letters.\n\n    Args:\n        text (str): The input string to be split.\n\n    Returns:\n        List[str]: A list of strings split at lowercase letters.\n\n    Raises:\n        TypeError: If the input is not a string.\n    \"\"\"\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n\n    result = []\n    current_word = \"\"\n\n    for char in text:\n        if char.islower():\n            if current_word:\n                result.append(current_word)\n            current_word = char\n        else:\n            current_word += char\n\n    if current_word:\n        result.append(current_word)\n\n    return result\n", "result": "failed: File \"/tmp/tmpmtzycg8d.py\", line 21\n    try: split_lowerstring(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 16, "requirement": "Code Standard", "completion": "# Valid cases\nprint(text_lowercase_underscore(\"hello_world\"))  # \"Found a match!\"\nprint(text_lowercase_underscore(\"a_b_c\"))        # \"Found a match!\"\nprint(text_lowercase_underscore(\"\"))             # \"Not matched!\"\n\n# Invalid cases\nprint(text_lowercase_underscore(\"Hello_world\"))  # \"Not matched!\"\nprint(text_lowercase_underscore(\"hello_123\"))    # \"Not matched!\"\nprint(text_lowercase_underscore(\"hello\"))        # \"Not matched!\"\n\n# Will raise TypeError\n# text_lowercase_underscore(123)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvhl6z3hg.py\", line 2, in <module>\n    print(text_lowercase_underscore(\"hello_world\"))  # \"Found a match!\"\nNameError: name 'text_lowercase_underscore' is not defined", "passed": false}
{"task_id": 17, "requirement": "Code Standard", "completion": "def square_perimeter(a: int) -> int:\n    \"\"\"Calculate the perimeter of a square.\n\n    Args:\n        a: The length of one side of the square.\n\n    Returns:\n        The perimeter of the square.\n\n    Raises:\n        ValueError: If the side length is negative.\n    \"\"\"\n    if a < 0:\n        raise ValueError(\"Side length cannot be negative\")\n    \n    return 4 * a\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp94j6izup.py\", line 34, in <module>\n    assert cc_visit(inspect.getsource(square_perimeter))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 18, "requirement": "Code Standard", "completion": "def remove_dirty_chars(string: str, second_string: str) -> str:\n    \"\"\"\n    Remove characters from the first string that are present in the second string.\n\n    Args:\n        string: The source string to filter.\n        second_string: The string containing characters to remove.\n\n    Returns:\n        str: The filtered string with characters removed.\n\n    Raises:\n        TypeError: If either input is not a string.\n        ValueError: If either input contains non-alphabetic characters.\n    \"\"\"\n    # Check if inputs are strings\n    if not isinstance(string, str) or not isinstance(second_string, str):\n        raise TypeError(\"Both inputs must be strings\")\n\n    # Check if strings contain only alphabetic characters\n    if not (string.isalpha() or string == \"\") or not (second_string.isalpha() or second_string == \"\"):\n        raise ValueError(\"Input strings must only contain alphabetic characters\")\n\n    # Return original string if second string is empty\n    if not second_string:\n        return string\n\n    # Convert second_string to a set for O(1) lookup\n    chars_to_remove = set(second_string)\n    \n    # Use list comprehension to keep only characters not in chars_to_remove\n    return ''.join(char for char in string if char not in chars_to_remove)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7kl9ipdc.py\", line 19, in <module>\n    try: remove_dirty_chars('hell0', 'world')\n  File \"/tmp/tmp7kl9ipdc.py\", line 7, in remove_dirty_chars\n    raise ValueError(\"Input strings must only contain alphabetic characters\")\nValueError: Input strings must only contain alphabetic characters\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmp7kl9ipdc.py\", line 20, in <module>\n    except ValueError as e: assert str(e) == 'Input strings must only contain alphabetic characters.'\nAssertionError", "passed": false}
{"task_id": 19, "requirement": "Code Standard", "completion": "from typing import List\n\n\ndef test_duplicate(array_nums: List[int]) -> bool:\n    \"\"\"\n    Check if a list of integers contains any duplicate elements.\n\n    Args:\n        array_nums: A list of integers to check for duplicates.\n\n    Returns:\n        bool: True if duplicates exist, False otherwise.\n\n    Raises:\n        TypeError: If the input is not a list.\n        ValueError: If any element in the list is not an integer.\n    \"\"\"\n    # Check if input is a list\n    if not isinstance(array_nums, list):\n        raise TypeError(\"Input must be a list\")\n\n    # Check if all elements are integers\n    if not all(isinstance(num, int) for num in array_nums):\n        raise ValueError(\"Input must be a list of integers\")\n\n    # Handle empty list and single element list\n    if len(array_nums) <= 1:\n        return False\n\n    # Use set to track seen numbers\n    seen_numbers = set()\n\n    for num in array_nums:\n        if num in seen_numbers:\n            return True\n        seen_numbers.add(num)\n\n    return False\n\n\nif __name__ == \"__main__\":\n    # Test cases\n    test_cases = [\n        [1, 2, 3, 4, 5],        # No duplicates\n        [1, 2, 3, 2, 5],        # Has duplicates\n        [],                      # Empty list\n        [1],                     # Single element\n    ]\n\n    for test_case in test_cases:\n        result = test_duplicate(test_case)\n        print(f\"Array {test_case} has duplicates: {result}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpknihni6_.py\", line 42, in <module>\n    test_duplicate(None)\n  File \"/tmp/tmpknihni6_.py\", line 5, in test_duplicate\n    raise TypeError(\"Input must be a list\")\nTypeError: Input must be a list\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpknihni6_.py\", line 45, in <module>\n    assert str(e) == 'Input must be a list of integers'\nAssertionError", "passed": false}
{"task_id": 20, "requirement": "Code Standard", "completion": "# Test cases\ntry:\n    print(is_woodall(1))     # True (1 \u00d7 2^1 - 1 = 1)\n    print(is_woodall(7))     # True (2 \u00d7 2^2 - 1 = 7)\n    print(is_woodall(23))    # True (3 \u00d7 2^3 - 1 = 23)\n    print(is_woodall(63))    # True (4 \u00d7 2^4 - 1 = 63)\n    print(is_woodall(10))    # False\n    print(is_woodall(0))     # False\n    print(is_woodall(-5))    # False\n    print(is_woodall(1.5))   # Raises TypeError\nexcept TypeError as e:\n    print(f\"TypeError: {e}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpj5vlyayo.py\", line 3, in <module>\n    print(is_woodall(1))     # True (1 \u00d7 2^1 - 1 = 1)\nNameError: name 'is_woodall' is not defined", "passed": false}
{"task_id": 21, "requirement": "Code Standard", "completion": "def multiples_of_num(m: int, n: int) -> list[int]:\n    \"\"\"\n    Find m multiples of number n.\n\n    Args:\n        m (int): The number of multiples to find\n        n (int): The number to find multiples of\n\n    Returns:\n        list[int]: A list containing m multiples of n\n\n    Raises:\n        ValueError: If either m or n is negative\n    \"\"\"\n    if m < 0 or n < 0:\n        raise ValueError(\"Both m and n must be non-negative\")\n\n    if m == 0:\n        return []\n\n    return [n * i for i in range(1, m + 1)]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpyhla9phr.py\", line 18, in <module>\n    assert multiples_of_num.__annotations__ == {'m': int, 'n': int, 'return': list}\nAssertionError", "passed": false}
{"task_id": 22, "requirement": "Code Standard", "completion": "def find_first_duplicate(nums: list) -> int:\n    \"\"\"\n    Find the first duplicate element in a list of integers.\n\n    Args:\n        nums: A list of integers to search for duplicates.\n\n    Returns:\n        int: The first duplicate element found, or -1 if no duplicates exist.\n\n    Raises:\n        TypeError: If the input is not a list or contains non-integer elements.\n    \"\"\"\n    # Check if input is a list\n    if not isinstance(nums, list):\n        raise TypeError(\"Input must be a list\")\n\n    # Handle empty list\n    if not nums:\n        return -1\n\n    # Check if all elements are integers\n    if not all(isinstance(num, int) for num in nums):\n        raise TypeError(\"All elements must be integers\")\n\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n\n    return -1\n", "result": "passed", "passed": true}
{"task_id": 23, "requirement": "Code Standard", "completion": "from typing import List\n\n\ndef maximum_sum(list1: List[List[int]]) -> int:\n    \"\"\"\n    Find the maximum sum of elements from any sublist in a list of lists.\n\n    Args:\n        list1: A list of lists containing integers.\n\n    Returns:\n        int: The maximum sum of elements from any sublist.\n\n    Raises:\n        TypeError: If input is not a list of lists or if any sublist contains\n                  non-integer elements.\n    \"\"\"\n    # Check if input is a list\n    if not isinstance(list1, list):\n        raise TypeError(\"Input must be a list of lists\")\n\n    # Handle empty list case\n    if not list1:\n        return 0\n\n    # Validate input types and handle empty sublists\n    max_sum = float('-inf')\n    for sublist in list1:\n        # Check if sublist is actually a list\n        if not isinstance(sublist, list):\n            raise TypeError(\"All elements must be lists\")\n\n        # Check if all elements in sublist are integers\n        if not all(isinstance(x, int) for x in sublist):\n            raise TypeError(\"All elements in sublists must be integers\")\n\n        # Update max_sum with the current sublist sum\n        current_sum = sum(sublist)\n        max_sum = max(max_sum, current_sum)\n\n    # If max_sum is still negative infinity, it means all sublists were empty\n    return 0 if max_sum == float('-inf') else max_sum\n", "result": "failed: File \"/tmp/tmpgwk4yool.py\", line 27\n    try: maximum_sum([[1, 2], [3, 'a']]); assert False, 'Expected TypeError' except TypeError: pass\n                                                                             ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 24, "requirement": "Code Standard", "completion": "def binary_to_decimal(binary: str) -> int:\n    \"\"\"\n    Convert a binary string to its decimal equivalent.\n\n    Args:\n        binary: A string containing a binary number (composed of 0s and 1s)\n\n    Returns:\n        int: The decimal equivalent of the binary number\n\n    Raises:\n        ValueError: If the input string is not a valid binary number\n    \"\"\"\n    if not binary:\n        return 0\n\n    if not all(digit in '01' for digit in binary):\n        raise ValueError('Invalid binary number')\n\n    return int(binary, 2)\n", "result": "failed: File \"/tmp/tmpkjl12k79.py\", line 10\n    try: binary_to_decimal('102'); assert False, 'Expected ValueError' except ValueError as e: assert str(e) == 'Invalid binary number'\n                                                                       ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 25, "requirement": "Code Standard", "completion": "from typing import List\n\n\ndef find_product(arr: List[int]) -> int:\n    \"\"\"\n    Calculate the product of non-repeated elements in a list.\n\n    Args:\n        arr: A list of integers.\n\n    Returns:\n        int: The product of all unique elements in the list.\n\n    Raises:\n        TypeError: If input is not a list or contains non-integer elements.\n    \"\"\"\n    # Check if input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n\n    # Return 1 for empty list\n    if not arr:\n        return 1\n\n    # Check if all elements are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements must be integers\")\n\n    # Convert array to set to remove duplicates\n    unique_elements = set(arr)\n    \n    # Calculate product of unique elements\n    product = 1\n    for num in unique_elements:\n        product *= num\n        \n    return product\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4k5ut6tu.py\", line 19, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "requirement": "Code Standard", "completion": "# Valid cases\ntest_list1 = [(0, 1), (2, 3), (1, 2)]\nprint(check_k_elements(test_list1, 4))  # True\n\ntest_list2 = [(0, 1), (2, 3), (1, 2)]\nprint(check_k_elements(test_list2, 5))  # False\n\n# Edge cases\nempty_list = []\nprint(check_k_elements(empty_list, 0))  # True\nprint(check_k_elements(empty_list, 1))  # False\n\n# Error cases\ntry:\n    check_k_elements([(1, 2), \"not a tuple\"], 3)  # Raises TypeError\nexcept TypeError as e:\n    print(e)\n\ntry:\n    check_k_elements([(1, 2)], -1)  # Raises ValueError\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpfjqzvjr5.py\", line 3, in <module>\n    print(check_k_elements(test_list1, 4))  # True\nNameError: name 'check_k_elements' is not defined", "passed": false}
{"task_id": 27, "requirement": "Code Standard", "completion": "from typing import List\n\n\ndef remove(string_list: List[str]) -> List[str]:\n    \"\"\"\n    Remove all digits from each string in the input list.\n\n    Args:\n        string_list: A list of strings to process.\n\n    Returns:\n        A new list containing the strings with all digits removed.\n\n    Raises:\n        TypeError: If input is not a list or if any element is not a string.\n    \"\"\"\n    if not isinstance(string_list, list):\n        raise TypeError(\"Input must be a list\")\n\n    for item in string_list:\n        if not isinstance(item, str):\n            raise TypeError(\"All elements must be strings\")\n\n    return [''.join(char for char in s if not char.isdigit()) \n            for s in string_list]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgqziiwnn.py\", line 28, in <module>\n    assert remove.__annotations__ == {'list': list[str], 'return': list[str]}\nAssertionError", "passed": false}
{"task_id": 28, "requirement": "Code Standard", "completion": "def binomial_coeff(n: int, k: int) -> int:\n    \"\"\"Calculate the binomial coefficient C(n,k).\n\n    Computes the binomial coefficient, which represents the number of ways\n    to choose k items from a set of n items without regard to order.\n\n    Args:\n        n: Total number of items.\n        k: Number of items to choose.\n\n    Returns:\n        The binomial coefficient value.\n\n    Raises:\n        ValueError: If n < 0 or k < 0 or k > n.\n    \"\"\"\n    if n < 0 or k < 0 or k > n:\n        raise ValueError(\n            \"Inputs must be non-negative and k must not be greater than n\"\n        )\n\n    # Optimize by using the smaller value of k or n-k\n    k = min(k, n - k)\n\n    # Base cases\n    if k == 0:\n        return 1\n    if k == 1:\n        return n\n\n    # Calculate using multiplicative formula\n    result = 1\n    for i in range(k):\n        result *= (n - i)\n        result //= (i + 1)\n\n    return result\n", "result": "passed", "passed": true}
{"task_id": 29, "requirement": "Code Standard", "completion": "from typing import List, Optional\n\n\ndef get_odd_occurrence(arr: List[int], arr_size: int) -> Optional[int]:\n    \"\"\"\n    Find the element occurring odd number of times in a list.\n\n    Args:\n        arr: A list of integers\n        arr_size: The size of the input list\n\n    Returns:\n        The integer that appears odd number of times, or None if the list is empty\n\n    Raises:\n        TypeError: If the input is not a list of integers\n    \"\"\"\n    # Check if input is empty\n    if not arr:\n        return None\n\n    # Type checking\n    if not isinstance(arr, list) or not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"Input must be a list of integers\")\n\n    # Verify if arr_size matches the actual list size\n    if arr_size != len(arr):\n        raise ValueError(\"Array size doesn't match the provided size parameter\")\n\n    result = 0\n    for element in arr:\n        result ^= element\n    \n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqecew4n_.py\", line 32, in <module>\n    assert get_odd_occurrence([]) is None\nTypeError: get_odd_occurrence() missing 1 required positional argument: 'arr_size'", "passed": false}
{"task_id": 30, "requirement": "Code Standard", "completion": "def count_substring_with_equal_ends(s: str) -> int:\n    \"\"\"\n    Count all substrings that start and end with the same character.\n\n    Args:\n        s: Input string to process.\n\n    Returns:\n        Number of substrings that start and end with the same character.\n\n    Raises:\n        TypeError: If input is not a string.\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n\n    if not s:\n        return 0\n\n    n = len(s)\n    count = 0\n\n    # Consider each possible substring\n    for i in range(n):\n        for j in range(i, n):\n            # If first and last characters match, increment count\n            if s[i] == s[j]:\n                count += 1\n\n    return count\n", "result": "failed: File \"/tmp/tmplfqtydta.py\", line 19\n    try: count_substring_with_equal_ends(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                                  ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 31, "requirement": "Code Standard", "completion": "from collections import Counter\nfrom heapq import heappush, heappop\nfrom typing import List\n\n\ndef func(nums: List[List[int]], k: int) -> List[int]:\n    \"\"\"\n    Find the top k integers that occur most frequently in the given lists.\n\n    Args:\n        nums: A list of lists containing sorted and distinct integers.\n        k: The number of most frequent integers to return.\n\n    Returns:\n        A list containing the k most frequent integers in descending order of frequency.\n\n    Raises:\n        ValueError: If k is greater than the number of distinct integers.\n    \"\"\"\n    # Handle empty input case\n    if not any(nums):\n        return []\n\n    # Create a single list of all numbers\n    flattened_nums = [num for sublist in nums for num in sublist]\n    \n    # Count frequency of each number\n    freq_counter = Counter(flattened_nums)\n    \n    # Check if k is valid\n    if k > len(freq_counter):\n        raise ValueError('k cannot be greater than the number of distinct integers')\n    \n    # Create min heap to maintain top k elements\n    heap = []\n    \n    for num, freq in freq_counter.items():\n        # Push tuple of (frequency, number) to heap\n        heappush(heap, (freq, num))\n        # If heap size exceeds k, remove smallest frequency element\n        if len(heap) > k:\n            heappop(heap)\n    \n    # Extract the k most frequent elements\n    result = []\n    while heap:\n        _, num = heappop(heap)\n        result.append(num)\n    \n    # Return result in descending order of frequency\n    return result[::-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5ceenr28.py\", line 30, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "requirement": "Code Standard", "completion": "def max_prime_factors(n: int) -> int:\n    \"\"\"\n    Find the largest prime factor of a given positive integer.\n\n    Args:\n        n: A positive integer to find its largest prime factor.\n\n    Returns:\n        The largest prime factor of the input number.\n\n    Raises:\n        ValueError: If the input is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n\n    largest_prime = -1\n    \n    # Handle division by 2 separately to simplify the loop\n    while n % 2 == 0:\n        largest_prime = 2\n        n = n // 2\n    \n    # Check odd numbers up to sqrt(n)\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            largest_prime = i\n            n = n // i\n    \n    # If n is still greater than 2, it's prime itself\n    if n > 2:\n        largest_prime = n\n    \n    return largest_prime\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdeh_dh_5.py\", line 34, in <module>\n    assert cc_visit(inspect.getsource(max_prime_factors))[0].complexity <= 5\nAssertionError", "passed": false}
{"task_id": 33, "requirement": "Code Standard", "completion": "def decimal_to_binary(n: int) -> str:\n    \"\"\"\n    Convert a decimal integer to its binary representation.\n\n    Args:\n        n: A non-negative integer to convert.\n\n    Returns:\n        str: Binary representation of the input number.\n\n    Raises:\n        ValueError: If the input is not a non-negative integer.\n    \"\"\"\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be an integer\")\n    \n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n        \n    if n == 0:\n        return \"0\"\n    \n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    \n    return binary\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpodk48lyd.py\", line 13, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "requirement": "Code Standard", "completion": "def find_missing(arr: list[int], n: int) -> int:\n    \"\"\"\n    Find the missing number in a sorted array.\n\n    Args:\n        arr: A sorted list of integers\n        n: The expected length of the sequence (including missing number)\n\n    Returns:\n        int: The missing number in the sequence\n\n    Raises:\n        ValueError: If the input list is not sorted\n        ValueError: If n is less than the length of arr\n    \"\"\"\n    # Check if array is sorted\n    if not all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1)):\n        raise ValueError(\"Input list must be sorted.\")\n\n    # Check if n is valid\n    if n <= len(arr):\n        raise ValueError(\"n must be greater than the length of input array.\")\n\n    # Check if array is empty\n    if not arr:\n        return 1\n\n    # Find the missing number using arithmetic sequence\n    expected_sum = (n * (n + 1)) // 2\n    actual_sum = sum(arr)\n    missing_number = expected_sum - actual_sum\n\n    return missing_number\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppi012y8n.py\", line 16, in <module>\n    assert find_missing([1,2,3,5],4) == 4\n  File \"/tmp/tmppi012y8n.py\", line 7, in find_missing\n    raise ValueError(\"n must be greater than the length of input array.\")\nValueError: n must be greater than the length of input array.", "passed": false}
{"task_id": 35, "requirement": "Code Standard", "completion": "def find_rect_num(n: int) -> int:\n    \"\"\"\n    Find the n-th rectangular number.\n    \n    Args:\n        n: The position of the rectangular number to find (must be positive)\n    \n    Returns:\n        The n-th rectangular number\n        \n    Raises:\n        ValueError: If n is not a positive integer\n        \n    Examples:\n        >>> find_rect_num(1)\n        2\n        >>> find_rect_num(3)\n        12\n    \"\"\"\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be an integer\")\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n        \n    return n * (n + 1)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7uhwg2r4.py\", line 18, in <module>\n    assert cc_visit(inspect.getsource(find_rect_num))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 36, "requirement": "Code Standard", "completion": "def find_nth_digit(p: int, q: int, n: int) -> int:\n    \"\"\"\n    Find the nth digit in the decimal representation of p/q.\n\n    Args:\n        p: Numerator of the fraction\n        q: Denominator of the fraction\n        n: Position of the digit to find (0 represents digit before decimal point)\n\n    Returns:\n        The digit at the nth position in the decimal representation\n\n    Raises:\n        ValueError: If denominator is zero\n    \"\"\"\n    if q == 0:\n        raise ValueError(\"Denominator cannot be zero\")\n\n    # Handle negative numbers\n    if p * q < 0:\n        result = find_nth_digit(abs(p), abs(q), n)\n        return -result if result != 0 else 0\n\n    p, q = abs(p), abs(q)\n    \n    # Get the digit before decimal point\n    quotient, remainder = divmod(p, q)\n    if n == 0:\n        return int(str(quotient)[-1])\n    \n    # Calculate decimal digits\n    seen_remainders = {}\n    decimal_digits = []\n    position = 0\n    \n    while remainder and position < n:\n        if remainder in seen_remainders:\n            cycle_length = position - seen_remainders[remainder]\n            cycle_start = seen_remainders[remainder]\n            if n > cycle_start:\n                adjusted_position = cycle_start + (n - cycle_start - 1) % cycle_length\n                return decimal_digits[adjusted_position]\n        \n        seen_remainders[remainder] = position\n        remainder *= 10\n        digit, remainder = divmod(remainder, q)\n        decimal_digits.append(digit)\n        position += 1\n    \n    return decimal_digits[n - 1] if n <= len(decimal_digits) else 0\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpam4g01uq.py\", line 38, in <module>\n    assert find_nth_digit.__annotations__ == {'p': int, 'q': int, 'N': int, 'return': int}\nAssertionError", "passed": false}
{"task_id": 37, "requirement": "Code Standard", "completion": "# Valid usage\ntest_list = [4, \"apple\", 1, \"zebra\", \"banana\", 10, 3]\nresult = sort_mixed_list(test_list)\nprint(result)  # Output: [1, 3, 4, 10, \"apple\", \"banana\", \"zebra\"]\n\n# Error cases\ntry:\n    sort_mixed_list([1, \"hello\", 3.14])  # Will raise TypeError\nexcept TypeError as e:\n    print(e)\n\ntry:\n    sort_mixed_list(\"not a list\")  # Will raise TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpd910vf_1.py\", line 3, in <module>\n    result = sort_mixed_list(test_list)\nNameError: name 'sort_mixed_list' is not defined", "passed": false}
{"task_id": 38, "requirement": "Code Standard", "completion": "from typing import Union, List\n\n\ndef div_even_odd(numbers: List[int]) -> Union[float, int]:\n    \"\"\"\n    Find the division of first even number by first odd number in a given list.\n\n    Args:\n        numbers: A list of integers.\n\n    Returns:\n        The division of first even number by first odd number.\n\n    Raises:\n        ValueError: If the list doesn't contain at least one even and one odd number.\n    \"\"\"\n    first_even = None\n    first_odd = None\n\n    for num in numbers:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n\n    if first_even is None or first_odd is None:\n        raise ValueError(\"List must contain at least one even and one odd number.\")\n\n    return first_even / first_odd\n", "result": "failed: File \"/tmp/tmppugp6aot.py\", line 19\n    try: div_even_odd([2, 4, 6]); assert False; except ValueError as e: assert str(e) == 'List must contain at least one even and one odd number.'\n                                                ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 39, "requirement": "Code Standard", "completion": "# Test cases\ntry:\n    print(rearrange_string(\"aab\"))      # Outputs: \"aba\"\n    print(rearrange_string(\"aaab\"))     # Outputs: \"\"\n    print(rearrange_string(\"aabbcc\"))   # Outputs: \"abcabc\"\n    print(rearrange_string(\"ABC\"))      # Raises ValueError\n    print(rearrange_string(123))        # Raises ValueError\nexcept ValueError as e:\n    print(f\"Error: {e}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8sx1i0ss.py\", line 3, in <module>\n    print(rearrange_string(\"aab\"))      # Outputs: \"aba\"\nNameError: name 'rearrange_string' is not defined", "passed": false}
{"task_id": 40, "requirement": "Code Standard", "completion": "from collections import Counter\nfrom itertools import chain\nfrom typing import List\n\n\ndef freq_element(nums: List[List[int]]) -> dict[int, int]:\n    \"\"\"\n    Find the frequency of elements in a list of lists.\n\n    Args:\n        nums: A list of lists containing integers.\n\n    Returns:\n        A dictionary with elements as keys and their frequencies as values.\n\n    Raises:\n        TypeError: If the input is not a list of lists.\n    \"\"\"\n    if not isinstance(nums, list) or not all(isinstance(x, list) for x in nums):\n        raise TypeError(\"Input must be a list of lists\")\n\n    if not nums:\n        return {}\n\n    return dict(Counter(chain.from_iterable(nums)))\n\n\nif __name__ == \"__main__\":\n    # Test cases\n    test_list = [[1, 2, 3], [4, 2, 3], [1, 2]]\n    result = freq_element(test_list)\n    print(result)  # Output: {1: 2, 2: 3, 3: 2, 4: 1}\n", "result": "failed: File \"/tmp/tmp5d1knkbb.py\", line 18\n    try: freq_element('not a list'); assert False; except TypeError: assert True\n                                                   ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 41, "requirement": "Code Standard", "completion": "from typing import List\n\ndef filter_evennumbers(nums: List[int]) -> List[int]:\n    \"\"\"\n    Filter even numbers from the input list using a lambda function.\n\n    Args:\n        nums: A list of integers to filter.\n\n    Returns:\n        A list containing only the even numbers from the input list.\n\n    Raises:\n        TypeError: If the input is not a list or contains non-integer values.\n    \"\"\"\n    # Check if input is a list\n    if not isinstance(nums, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if all elements are integers\n    if not all(isinstance(x, int) for x in nums):\n        raise TypeError(\"All elements must be integers\")\n    \n    # Return empty list if input is empty\n    if not nums:\n        return []\n    \n    return list(filter(lambda x: x % 2 == 0, nums))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpz84rqwdz.py\", line 20, in <module>\n    assert filter_evennumbers.__annotations__ == {'nums': list, 'return': list}\nAssertionError", "passed": false}
{"task_id": 42, "requirement": "Code Standard", "completion": "from typing import List\n\n\ndef find_sum(arr: List[int]) -> int:\n    \"\"\"\n    Find the sum of all elements that appear more than once in the input array.\n\n    Args:\n        arr: A list of integers to check for repeated elements.\n\n    Returns:\n        int: The sum of all repeated elements in the array.\n\n    Raises:\n        TypeError: If the input is not a list.\n    \"\"\"\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n\n    # Create a dictionary to store element frequencies\n    freq = {}\n    \n    # Count frequency of each element\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    \n    # Calculate sum of repeated elements\n    repeated_sum = sum(num for num, count in freq.items() if count > 1)\n    \n    return repeated_sum\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppvprsr4b.py\", line 13, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Code Standard", "completion": "# Test cases\nprint(text_match(\"hello_world\"))      # Found a match!\nprint(text_match(\"hello_World\"))      # Not matched!\nprint(text_match(\"hello_world_\"))     # Not matched!\nprint(text_match(\"Hello_world\"))      # Not matched!\nprint(text_match(\"hello\"))            # Not matched!\nprint(text_match(\"\"))                 # Not matched!\ntry:\n    print(text_match(123))            # Raises TypeError\nexcept TypeError as e:\n    print(f\"TypeError: {e}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpr001rurh.py\", line 2, in <module>\n    print(text_match(\"hello_world\"))      # Found a match!\nNameError: name 'text_match' is not defined", "passed": false}
{"task_id": 44, "requirement": "Code Standard", "completion": "# Test cases\nprint(text_match_string(\"Hello World\"))      # True\nprint(text_match_string(\"123 Hello\"))        # False\nprint(text_match_string(\" Hello\"))           # True (after stripping)\nprint(text_match_string(\"\"))                 # False\nprint(text_match_string(\"   \"))              # False\ntry:\n    text_match_string(123)                   # Raises TypeError\nexcept TypeError as e:\n    print(f\"Error: {e}\")\n", "result": "failed: File \"/tmp/tmpotkdy_h5.py\", line 14\n    try: text_match_string(123); assert False, 'TypeError not raised' except TypeError: pass\n                                                                      ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 45, "requirement": "Code Standard", "completion": "# Test cases\nprint(get_gcd([24, 36, 48]))      # Output: 12\nprint(get_gcd([2, 4, 6, 8]))      # Output: 2\nprint(get_gcd([7, 14, -21]))      # Output: 7\ntry:\n    print(get_gcd([]))\nexcept ValueError as e:\n    print(e)                      # Output: \"Input list cannot be empty.\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgz8zb9uo.py\", line 2, in <module>\n    print(get_gcd([24, 36, 48]))      # Output: 12\nNameError: name 'get_gcd' is not defined", "passed": false}
{"task_id": 46, "requirement": "Code Standard", "completion": "from typing import List\n\n\ndef test_distinct(numbers: List[int]) -> bool:\n    \"\"\"\n    Determine whether all numbers in the input list are distinct.\n\n    Args:\n        numbers: A list of integers to check for uniqueness.\n\n    Returns:\n        bool: True if all numbers are distinct, False otherwise.\n\n    Raises:\n        TypeError: If input is not a list or contains non-integer elements.\n\n    Examples:\n        >>> test_distinct([1, 2, 3, 4])\n        True\n        >>> test_distinct([1, 2, 2, 3])\n        False\n        >>> test_distinct([])\n        True\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list\")\n\n    for num in numbers:\n        if not isinstance(num, int):\n            raise TypeError(\"All elements must be integers\")\n\n    return len(set(numbers)) == len(numbers)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpbnys3an2.py\", line 29, in <module>\n    assert test_distinct.__annotations__ == {'numbers': list, 'return': bool}\nAssertionError", "passed": false}
{"task_id": 48, "requirement": "Code Standard", "completion": "# Test cases\nprint(odd_bit_set_number(5))    # Output: 1431655765\nprint(odd_bit_set_number(0))    # Output: 1431655765\nprint(odd_bit_set_number(10))   # Output: 1431655770\n\n# This will raise TypeError\ntry:\n    odd_bit_set_number(3.14)\nexcept TypeError as e:\n    print(e)  # Output: \"Input must be an integer\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqx9vcxat.py\", line 2, in <module>\n    print(odd_bit_set_number(5))    # Output: 1431655765\nNameError: name 'odd_bit_set_number' is not defined", "passed": false}
{"task_id": 49, "requirement": "Code Standard", "completion": "def specified_element(matrix: list, position: int = 0) -> list:\n    \"\"\"\n    Extract elements from a specified position in each sublist of a 2D list.\n\n    Args:\n        matrix: A two-dimensional list containing sublists of elements.\n        position: Index position of elements to extract (defaults to 0).\n\n    Returns:\n        A list containing elements from the specified position of each sublist.\n\n    Raises:\n        IndexError: If the specified position is out of range for any non-empty sublist.\n    \"\"\"\n    if not matrix:\n        return []\n\n    result = []\n    \n    for sublist in matrix:\n        if not sublist:\n            continue\n            \n        if position >= len(sublist):\n            raise IndexError('Index out of range for sublist')\n            \n        result.append(sublist[position])\n        \n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2rk72r9m.py\", line 18, in <module>\n    assert specified_element([[1, 2], [3], [4, 5, 6]], 1) == [2, 5]\n  File \"/tmp/tmp2rk72r9m.py\", line 9, in specified_element\n    raise IndexError('Index out of range for sublist')\nIndexError: Index out of range for sublist", "passed": false}
{"task_id": 51, "requirement": "Code Standard", "completion": "print(check_equilateral(5, 5, 5))  # Output: True\nprint(check_equilateral(5, 4, 5))  # Output: False\nprint(check_equilateral(-1, 5, 5)) # Raises ValueError\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1535kbab.py\", line 1, in <module>\n    print(check_equilateral(5, 5, 5))  # Output: True\nNameError: name 'check_equilateral' is not defined", "passed": false}
{"task_id": 52, "requirement": "Code Standard", "completion": "def parallelogram_area(base: float, height: float) -> float:\n    \"\"\"Calculate the area of a parallelogram.\n\n    Args:\n        base: The length of the base of the parallelogram.\n        height: The perpendicular height of the parallelogram.\n\n    Returns:\n        The area of the parallelogram.\n\n    Raises:\n        TypeError: If base or height are not numerical values.\n        ValueError: If base or height are not positive numbers.\n    \"\"\"\n    if not isinstance(base, (int, float)) or not isinstance(height, (int, float)):\n        raise TypeError(\"Base and height must be numerical values\")\n    \n    if base <= 0 or height <= 0:\n        raise ValueError(\"Base and height must be positive numbers\")\n\n    return base * height\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmob722yd.py\", line 21, in <module>\n    assert parallelogram_area(0, 10) == 0\n  File \"/tmp/tmpmob722yd.py\", line 15, in parallelogram_area\n    raise ValueError(\"Base and height must be positive numbers\")\nValueError: Base and height must be positive numbers", "passed": false}
{"task_id": 53, "requirement": "Code Standard", "completion": "# Test cases\nprint(check_equality(\"Python\"))     # \"Not Equal\"\nprint(check_equality(\"level\"))      # \"Equal\"\nprint(check_equality(\"\"))           # \"Equal\"\nprint(check_equality(\"a\"))          # \"Equal\"\ntry:\n    print(check_equality(123))      # Raises TypeError\nexcept TypeError as e:\n    print(e)                        # \"Input must be a string\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkj0l15xe.py\", line 2, in <module>\n    print(check_equality(\"Python\"))     # \"Not Equal\"\nNameError: name 'check_equality' is not defined", "passed": false}
{"task_id": 54, "requirement": "Code Standard", "completion": "# Example usage\ndef main():\n    # Test with positive integers\n    arr1 = [4, 2, 2, 8, 3, 3, 1]\n    print(counting_sort(arr1))  # Output: [1, 2, 2, 3, 3, 4, 8]\n\n    # Test with negative integers\n    arr2 = [-5, -10, 0, -3, 8, 5, -1]\n    print(counting_sort(arr2))  # Output: [-10, -5, -3, -1, 0, 5, 8]\n\n    # Test with empty list\n    arr3 = []\n    print(counting_sort(arr3))  # Output: []\n\n    # Test with single element\n    arr4 = [1]\n    print(counting_sort(arr4))  # Output: [1]\n\n    try:\n        # Test with invalid input\n        arr5 = [1, 2, \"3\"]\n        counting_sort(arr5)\n    except TypeError as e:\n        print(f\"Error: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3p0lnv6t.py\", line 22, in <module>\n    main()\n  File \"/tmp/tmp3p0lnv6t.py\", line 5, in main\n    print(counting_sort(arr1))  # Output: [1, 2, 2, 3, 3, 4, 8]\nNameError: name 'counting_sort' is not defined", "passed": false}
{"task_id": 55, "requirement": "Code Standard", "completion": "def tn_gp(a: int, r: int, n: int) -> int:\n    \"\"\"\n    Calculate the nth term of a geometric progression.\n\n    Args:\n        a: First term of the geometric progression\n        r: Common ratio\n        n: Position of the term to find (must be positive)\n\n    Returns:\n        The nth term of the geometric progression\n\n    Raises:\n        ValueError: If n is less than 1\n    \"\"\"\n    if n < 1:\n        raise ValueError('Term number must be greater than 0')\n\n    if r == 0:\n        return 0 if n > 1 else a\n\n    return a * (r ** (n - 1))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp43g_9tqg.py\", line 7, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "requirement": "Code Standard", "completion": "def check(n: int) -> bool:\n    \"\"\"\n    Check if a number is one less than twice its reverse.\n\n    Args:\n        n: An integer to check.\n\n    Returns:\n        bool: True if the number is one less than twice its reverse, False otherwise.\n\n    Raises:\n        TypeError: If the input is not an integer.\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n\n    # Convert number to string to easily reverse it\n    num_str = str(n)\n    # Reverse the string and convert back to integer\n    reverse_num = int(num_str[::-1])\n    \n    # Check if number is one less than twice its reverse\n    return n == (2 * reverse_num - 1)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4mzgcuny.py\", line 20, in <module>\n    assert check(1) == False\nAssertionError", "passed": false}
{"task_id": 57, "requirement": "Code Standard", "completion": "def find_max_num(digits: list[int], n: int) -> int:\n    \"\"\"\n    Find the largest number that can be formed using n digits from the given list.\n\n    Args:\n        digits: A list of integers containing single digits (0-9)\n        n: Number of digits to use from the list\n\n    Returns:\n        int: The largest possible number that can be formed\n\n    Raises:\n        ValueError: If n is greater than the length of digits list\n    \"\"\"\n    # Handle empty list case\n    if not digits:\n        return 0\n\n    # Check if n exceeds list length\n    if n > len(digits):\n        raise ValueError('Number of digits exceeds the length of the list.')\n\n    # Convert digits to strings and sort in descending order\n    digits_str = [str(d) for d in digits]\n    digits_str.sort(reverse=True)\n    \n    # Take first n digits and join them\n    result = ''.join(digits_str[:n])\n    \n    return int(result) if result else 0\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpv59iszkn.py\", line 23, in <module>\n    assert find_max_num.__annotations__ == {'digits': list, 'n': int, 'return': int}\nAssertionError", "passed": false}
{"task_id": 58, "requirement": "Code Standard", "completion": "def opposite_signs(a: int, b: int) -> bool:\n    \"\"\"\n    Check if two integers have opposite signs.\n\n    Args:\n        a (int): First integer to compare\n        b (int): Second integer to compare\n\n    Returns:\n        bool: True if the integers have opposite signs, False otherwise\n\n    Raises:\n        TypeError: If either input is not an integer\n    \"\"\"\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise TypeError(\"Both inputs must be integers\")\n\n    return (a * b) < 0\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpe305w8o1.py\", line 23, in <module>\n    assert opposite_signs(0, -1) == True\nAssertionError", "passed": false}
{"task_id": 59, "requirement": "Code Standard", "completion": "def is_octagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth octagonal number.\n\n    Args:\n        n: The position of the octagonal number to calculate (must be positive)\n\n    Returns:\n        The nth octagonal number\n\n    Raises:\n        ValueError: If n is not a positive integer\n    \"\"\"\n    if not isinstance(n, int):\n        raise ValueError(\"n must be an integer\")\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    return n * (3 * n - 2)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpr_82x_ih.py\", line 11, in <module>\n    is_octagonal(-1)\n  File \"/tmp/tmpr_82x_ih.py\", line 5, in is_octagonal\n    raise ValueError(\"n must be a positive integer\")\nValueError: n must be a positive integer\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpr_82x_ih.py\", line 13, in <module>\n    assert str(e) == 'Input must be a positive integer'\nAssertionError", "passed": false}
{"task_id": 60, "requirement": "Code Standard", "completion": "from typing import List\n\n\ndef max_len_sub(numbers: List[int], difference: int) -> int:\n    \"\"\"\n    Find the maximum length of subsequence where adjacent elements differ by a given value.\n\n    Args:\n        numbers: List of integers to process\n        difference: Required difference between adjacent elements\n\n    Returns:\n        Maximum length of valid subsequence\n\n    Raises:\n        TypeError: If numbers is not a list or difference is not an integer\n    \"\"\"\n    # Type checking\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input 'numbers' must be a list\")\n    if not isinstance(difference, int):\n        raise TypeError(\"Input 'difference' must be an integer\")\n    \n    # Handle empty list case\n    if not numbers:\n        return 0\n    \n    n = len(numbers)\n    # dp[i] stores the length of subsequence ending at index i\n    dp = [1] * n\n    max_length = 1\n    \n    for i in range(1, n):\n        for j in range(i):\n            # Check if current element can be added to subsequence ending at j\n            if abs(numbers[i] - numbers[j]) == difference:\n                dp[i] = max(dp[i], dp[j] + 1)\n        max_length = max(max_length, dp[i])\n    \n    return max_length\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmdg76bxt.py\", line 22, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nAssertionError", "passed": false}

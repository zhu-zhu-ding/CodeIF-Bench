{"task_id": 14, "requirement": "Input-Output Conditions", "completion": "def find_volume(base_area, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base_area (float or int): The area of the triangular base of the prism.\n    height (float or int): The height of the prism perpendicular to the base.\n    length (float or int): The length of the prism along the base.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    if base_area <= 0 or height <= 0 or length <= 0:\n        raise ValueError(\"All dimensions must be positive numbers.\")\n    \n    # Volume of a triangular prism is given by the formula: V = base_area * height * length\n    volume = base_area * height * length\n    return volume\n\n# Example usage:\nbase_area = 10.5  # Example base area\nheight = 20.0     # Example height\nlength = 15.0     # Example length\ntry:\n    volume = find_volume(base_area, height, length)\n    print(\"The volume of the triangular prism is:\", volume)\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvqa8dwxj.py\", line 16, in <module>\n    assert find_volume(10,8,6) == 240\nAssertionError", "passed": false}
{"task_id": 15, "requirement": "Input-Output Conditions", "completion": "import re\n\ndef split_lowerstring(input_string):\n    # Use regular expression to find all segments that end with a lowercase letter\n    segments = re.findall(r'.*?[a-z]', input_string)\n    \n    # If the input string does not end with a lowercase letter, add the remaining part\n    if not input_string[-1].islower():\n        last_segment = re.findall(r'[^a-z]*$', input_string)[0]\n        if last_segment:\n            segments.append(last_segment)\n    \n    return segments\n\n# Example usage\ninput_string = \"HelloWorld\"\nprint(split_lowerstring(input_string))  # Output: ['Hell', 'o', 'World']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphexngzqe.py\", line 14, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "requirement": "Input-Output Conditions", "completion": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'\\b[a-z]+(?:_[a-z]+)+\\b'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\ntext1 = \"This is an example_text with multiple_words and some single_words.\"\ntext2 = \"This is a text without the specified pattern.\"\nprint(text_lowercase_underscore(text1))  # Output: 'Found a match!'\nprint(text_lowercase_underscore(text2))  # Output: 'Not matched!'\n", "result": "passed", "passed": true}
{"task_id": 17, "requirement": "Input-Output Conditions", "completion": "def square_perimeter(side_length):\n    if isinstance(side_length, int) and side_length >= 0:\n        return 4 * side_length\n    else:\n        raise ValueError(\"Input must be a non-negative integer\")", "result": "passed", "passed": true}
{"task_id": 18, "requirement": "Input-Output Conditions", "completion": "def remove_dirty_chars(s1, s2):\n    # Check if both strings contain only alphabetic characters\n    if not (s1.isalpha() and s2.isalpha()):\n        raise ValueError('Input strings must only contain alphabetic characters.')\n    \n    # Create a set of characters from the second string\n    dirty_chars = set(s2)\n    \n    # Use a list comprehension to filter out characters from the first string that are in the dirty_chars set\n    filtered_chars = [char for char in s1 if char not in dirty_chars]\n    \n    # Join the filtered characters to form the cleaned string\n    cleaned_string = ''.join(filtered_chars)\n    \n    return cleaned_string\n\n# Example usage:\ntry:\n    s1 = \"hello world\"\n    s2 = \"aeiou\"\n    result = remove_dirty_chars(s1, s2)\nexcept ValueError as e:\n    print(e)  # Output: Input strings must only contain alphabetic characters.\n", "result": "passed", "passed": true}
{"task_id": 19, "requirement": "Input-Output Conditions", "completion": "def test_duplicate(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements in the list must be integers\")\n    \n    # Create an empty set to store unique elements\n    seen = set()\n    \n    # Iterate through each element in the array\n    for num in arr:\n        # Check if the element is already in the set\n        if num in seen:\n            # If it is, return True indicating a duplicate is found\n            return True\n        # Add the element to the set\n        seen.add(num)\n    \n    # If no duplicates are found, return False\n    return False\n\n# Example usage:\ntry:\n    arr = [1, 2, 3, 4, 5, 1]\n    print(test_duplicate(arr))  # Output: True\n\n    arr = [1, 2, 3, 4, 5]\n    print(test_duplicate(arr))  # Output: False\n\n    arr = \"not a list\"\n    print(test_duplicate(arr))  # Raises TypeError\n\n    arr = [1, 2, 'three', 4]\n    print(test_duplicate(arr))  # Raises TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 20, "requirement": "Input-Output Conditions", "completion": "def is_woodall(num):\n    n = 1\n    while True:\n        # Calculate the Woodall number for the current n\n        woodall_number = n * (2 ** n) - 1\n        \n        # Check if the calculated Woodall number matches the input number\n        if woodall_number == num:\n            return True\n        # If the calculated Woodall number exceeds the input number, return False\n        elif woodall_number > num:\n            return False\n        \n        # Increment n to check the next possible Woodall number\n        n += 1\n\n# Example usage:\nprint(is_woodall(7))  # True, because 7 is 2*2^2 - 1\nprint(is_woodall(15)) # False\nprint(is_woodall(31)) # True, because 31 is 3*2^3 - 1\n", "result": "passed", "passed": true}
{"task_id": 23, "requirement": "Input-Output Conditions", "completion": "def maximum_sum(list_of_lists):\n    # Initialize a variable to store the maximum sum, starting with the smallest possible integer\n    max_sum = float('-inf')\n    \n    # Iterate through each list (sublist) in the list of lists\n    for lst in list_of_lists:\n        # Calculate the sum of the current list (sublist)\n        current_sum = sum(lst)\n        \n        # Update max_sum if the current sum is greater than the previous max_sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    # Return the maximum sum found among all sublists\n    return max_sum\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [4, 5, 6], [10, 11, -2]]\nprint(maximum_sum(list_of_lists))  # Output: 19\n", "result": "passed", "passed": true}
{"task_id": 25, "requirement": "Input-Output Conditions", "completion": "def find_product(arr):\n    # Create a dictionary to store the frequency of each element\n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    \n    # Calculate the product of non-repeated elements\n    product = 1\n    has_non_repeated = False  # Flag to check if there's any non-repeated element\n    for num, count in frequency.items():\n        if count == 1:\n            product *= num\n            has_non_repeated = True\n    \n    # If there are no non-repeated elements, return 1\n    if not has_non_repeated:\n        return 1\n    return product\n\n# Example usage\narr = [1, 2, 3, 2, 4, 5, 5]\nresult = find_product(arr)\nprint(result)  # Output: 12 (1 * 3 * 4)\n\narr_empty = []\nresult_empty = find_product(arr_empty)\nprint(result_empty)  # Output: 1 (no non-repeated elements)\n\narr_no_non_repeated = [2, 2, 3, 3]\nresult_no_non_repeated = find_product(arr_no_non_repeated)\nprint(result_no_non_repeated)  # Output: 1 (no non-repeated elements)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpm761kcok.py\", line 30, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "requirement": "Input-Output Conditions", "completion": "def check_k_elements(tuple_list, k):\n    # Iterate through each tuple in the list\n    for tup in tuple_list:\n        # Check if the length of the tuple is not equal to k\n        if len(tup) != k:\n            return False\n    # If all tuples have k elements, return True\n    return True\n\n# Example usage:\nsample_tuples = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nk = 3\nresult = check_k_elements(sample_tuples, k)\nprint(\"All tuples have\", k, \"elements:\", result)  # Output: All tuples have 3 elements: True\n\nsample_tuples2 = [(1, 2), (3, 4, 5), (6,)]\nk2 = 2\nresult2 = check_k_elements(sample_tuples2, k2)\nprint(\"All tuples have\", k2, \"elements:\", result2)  # Output: All tuples have 2 elements: False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7muzvx1h.py\", line 18, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 28, "requirement": "Input-Output Conditions", "completion": "def binomial_coeff(n, k):\n    # Check if n and k are non-negative integers\n    if not isinstance(n, int) or not isinstance(k, int) or n < 0 or k < 0:\n        raise ValueError(\"Inputs must be non-negative integers\")\n    \n    # If k is greater than n, the binomial coefficient is 0\n    if k > n:\n        return 0\n    \n    # If k is 0 or n, the binomial coefficient is 1\n    if k == 0 or k == n:\n        return 1\n    \n    # Take advantage of symmetry\n    k = min(k, n - k)\n    \n    # Calculate binomial coefficient using an iterative approach\n    coeff = 1\n    for i in range(k):\n        coeff = coeff * (n - i) // (i + 1)\n    \n    return coeff\n\n# Example usage:\nn = 5\nk = 2\nprint(f\"Binomial Coefficient C({n}, {k}) is {binomial_coeff(n, k)}\")\n", "result": "passed", "passed": true}
{"task_id": 30, "requirement": "Input-Output Conditions", "completion": "def count_substring_with_equal_ends(s):\n    \"\"\"\n    Count all substrings of the input string that start and end with the same character.\n\n    :param s: str - The input string\n    :return: int - The count of substrings with equal start and end characters\n    \"\"\"\n    count = 0\n    n = len(s)\n    \n    # Iterate over each character in the string\n    for i in range(n):\n        # Check substrings starting from the current character\n        for j in range(i, n):\n            # If the start and end characters of the substring are the same, increment the count\n            if s[i] == s[j]:\n                count += 1\n    \n    return count\n\n# Example usage:\ninput_string = \"abcab\"\nresult = count_substring_with_equal_ends(input_string)\nprint(f\"Number of substrings starting and ending with the same character: {result}\")\n", "result": "passed", "passed": true}
{"task_id": 32, "requirement": "Input-Output Conditions", "completion": "def max_prime_factors(n):\n    if n <= 1:\n        raise ValueError(\"Input should be a positive integer greater than 1\")\n    \n    # Initialize the maximum prime factor variable\n    max_prime = -1\n    \n    # Check for number of 2s that divide n\n    while n % 2 == 0:\n        max_prime = 2\n        n >>= 1  # equivalent to n //= 2\n    \n    # n must be odd at this point, thus skip even numbers and iterate only for odd integers\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n // i\n    \n    # This condition is to check if n is a prime number greater than 2\n    if n > 2:\n        max_prime = n\n    \n    return int(max_prime)\n\n# Example usage\nnumber = 315\nprint(f\"The largest prime factor of {number} is {max_prime_factors(number)}\")\n", "result": "passed", "passed": true}
{"task_id": 35, "requirement": "Input-Output Conditions", "completion": "def find_rect_num(n):\n    # Check if the input is a non-negative integer\n    if n < 0:\n        return \"Invalid input: n must be a non-negative integer\"\n    \n    # Calculate the n-th rectangular number\n    return n * (n + 1)\n\n# Example usage:\nn = 5\nresult = find_rect_num(n)\nprint(f\"The {n}-th rectangular number is: {result}\")\n", "result": "passed", "passed": true}
{"task_id": 36, "requirement": "Input-Output Conditions", "completion": "def find_nth_digit(numerator, denominator, n):\n    # Check if the denominator is zero\n    if denominator == 0:\n        raise ValueError(\"Denominator cannot be zero\")\n    \n    # Check if n is a positive integer\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    # Initialize the remainder\n    remainder = numerator % denominator\n    \n    # Loop to find the nth digit\n    for i in range(n):\n        # Multiply the remainder by 10\n        remainder *= 10\n        # Get the digit\n        digit = remainder // denominator\n        # Update the remainder\n        remainder = remainder % denominator\n    \n    return digit\n\n# Example usage:\nnumerator = 1\ndenominator = 7\nn = 5\nprint(f\"The {n}th digit in the decimal representation of {numerator}/{denominator} is {find_nth_digit(numerator, denominator, n)}\")\n", "result": "passed", "passed": true}
{"task_id": 38, "requirement": "Input-Output Conditions", "completion": "def div_even_odd(numbers):\n    even = None\n    odd = None\n    \n    # Loop through the list to find the first even and odd numbers\n    for num in numbers:\n        if num % 2 == 0 and even is None:\n            even = num\n        if num % 2 != 0 and odd is None:\n            odd = num\n        \n        # If both even and odd numbers are found, break the loop\n        if even is not None and odd is not None:\n            break\n    \n    # Check if both even and odd numbers were found\n    if even is None or odd is None:\n        raise ValueError(\"List must contain at least one even and one odd number.\")\n    \n    # Perform the division\n    return even / odd\n\n# Example usage:\nnumbers = [1, 3, 5, 8, 10]\nresult = div_even_odd(numbers)\nprint(result)  # Output: 8.0\n", "result": "passed", "passed": true}
{"task_id": 39, "requirement": "Input-Output Conditions", "completion": "from collections import Counter\nimport heapq\n\ndef rearrange_string(s):\n    # Count the frequency of each character\n    char_count = Counter(s)\n    # Create a max heap based on the frequency of characters\n    max_heap = [(-freq, char) for char, freq in char_count.items()]\n    heapq.heapify(max_heap)\n    \n    prev_char = None\n    prev_freq = 0\n    result = []\n    \n    while max_heap:\n        freq, char = heapq.heappop(max_heap)\n        # Append the current character to the result\n        result.append(char)\n        \n        # If there is a previous character with non-zero frequency, push it back to the heap\n        if prev_char and prev_freq < 0:\n            heapq.heappush(max_heap, (prev_freq, prev_char))\n        \n        # Update the previous character and its frequency\n        prev_char = char\n        prev_freq = freq + 1  # Decrease the frequency since we used one occurrence of this character\n    \n    # If the length of the result matches the length of the input string, it means we successfully rearranged it\n    if len(result) == len(s):\n        return ''.join(result)\n    else:\n        return \"\"\n\n# Example usage:\nprint(rearrange_string(\"aab\"))  # Output: \"aba\"\nprint(rearrange_string(\"aaab\")) # Output: \"\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplrs0rjbs.py\", line 30, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 42, "requirement": "Input-Output Conditions", "completion": "def find_sum(arr):\n    # Create a dictionary to store the frequency of each element\n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    \n    # Calculate the sum of elements that appear more than once\n    sum_repeated = 0\n    for num, count in frequency.items():\n        if count > 1:\n            sum_repeated += num * count\n    \n    return sum_repeated\n\n# Example usage:\narr1 = [1, 2, 3, 2, 3, 4, 5, 3]\nresult1 = find_sum(arr1)\nprint(\"Sum of repeated elements in arr1:\", result1)  # Output: 13 (2*2 + 3*3)\n\narr2 = [1, 2, 3, 4, 5]\nresult2 = find_sum(arr2)\nprint(\"Sum of repeated elements in arr2:\", result2)  # Output: 0 (no repeated elements)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpev2xdbbz.py\", line 22, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Input-Output Conditions", "completion": "import re\n\ndef text_match(text):\n    pattern = r'\\b[a-z]+(?:_[a-z]+)+\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches\n    else:\n        return 'Not matched!'\n\n# Example usage:\ntext1 = \"Here are some examples: first_example, second_example, another_one\"\nresult1 = text_match(text1)\nprint(result1)  # Output: ['first_example', 'second_example', 'another_one']\n\ntext2 = \"No matches here!\"\nresult2 = text_match(text2)\nprint(result2)  # Output: 'Not matched!'\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0a1zl564.py\", line 16, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 46, "requirement": "Input-Output Conditions", "completion": "def test_distinct(numbers):\n    \"\"\"\n    Check if all numbers in the list are distinct.\n\n    Args:\n    numbers (list of int): A list of integers.\n\n    Returns:\n    bool: True if all numbers are distinct, False otherwise.\n    \"\"\"\n    if not all(isinstance(num, int) for num in numbers):\n        raise ValueError(\"All elements in the list must be integers.\")\n    \n    return len(numbers) == len(set(numbers))\n\n# Example usage:\nnumbers = [1, 2, 3, 4, 5]\nprint(test_distinct(numbers))  # Output: True\n\nnumbers = [1, 2, 3, 3, 4]\nprint(test_distinct(numbers))  # Output: False\n\nnumbers = [1, 2, '3', 4, 5]\ntry:\n    print(test_distinct(numbers))\nexcept ValueError as e:\n    print(e)  # Output: All elements in the list must be integers.\n", "result": "passed", "passed": true}
{"task_id": 48, "requirement": "Input-Output Conditions", "completion": "def odd_bit_set_number(num):\n    # Determine the number of bits needed for the binary representation of the number\n    num_bits = num.bit_length()\n    \n    # Generate a mask with all odd bits set to 1\n    mask = 0\n    for i in range(num_bits + 1):\n        if i % 2 == 1:  # Check if the bit position is odd\n            mask |= (1 << i)\n    \n    # Set all odd bits of the given number using bitwise OR operation\n    result = num | mask\n    \n    return result\n\n# Example usage\nnumber = 10  # Binary representation: 1010\nresult = odd_bit_set_number(number)\nprint(f\"Original number: {number}, Binary: {bin(number)}\")\nprint(f\"Number with odd bits set: {result}, Binary: {bin(result)}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpl86i3xy1.py\", line 17, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "requirement": "Input-Output Conditions", "completion": "def specified_element(matrix, index):\n    \"\"\"\n    Extracts the specified element from each sub-list in a two-dimensional list.\n    \n    :param matrix: A two-dimensional list (list of lists)\n    :param index: The index of the element to extract from each sub-list\n    :return: A list containing the extracted elements\n    \"\"\"\n    # Check if the matrix is empty\n    if not matrix:\n        return []\n    \n    # Initialize an empty list to store the extracted elements\n    extracted_elements = []\n    \n    # Iterate through each sub-list in the matrix\n    for sublist in matrix:\n        # Check if the sublist is long enough to have the specified index\n        if len(sublist) > index:\n            # Append the element at the specified index to the extracted_elements list\n            extracted_elements.append(sublist[index])\n        else:\n            # If the sublist is too short, append None or handle it as needed\n            extracted_elements.append(None)\n    \n    return extracted_elements\n\n# Example usage:\nmatrix = [[1, 2, 3], [4, 5], [7, 8, 9, 10]]\nprint(specified_element(matrix, 2))  # Output: [3, None, 9]\n", "result": "passed", "passed": true}
{"task_id": 50, "requirement": "Input-Output Conditions", "completion": "def min_length_list(list_of_lists):\n    if not list_of_lists:\n        return None\n    shortest_list = min(list_of_lists, key=lambda x: len(x))\n    return (len(shortest_list), shortest_list)\n\n# Example usage:\nlists = [[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]\nresult = min_length_list(lists)\nprint(\"The length of the shortest list and the list itself are:\", result)\n", "result": "passed", "passed": true}
{"task_id": 52, "requirement": "Input-Output Conditions", "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram with input validation.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram if inputs are valid, otherwise raises ValueError.\n    \"\"\"\n    # Validate inputs\n    if not (isinstance(base, (int, float)) and isinstance(height, (int, float))):\n        raise ValueError(\"Both base and height must be numerical values.\")\n    if base <= 0 or height <= 0:\n        raise ValueError(\"Both base and height must be positive numbers.\")\n    \n    # Calculate area\n    area = base * height\n    return area\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpaalpiu8a.py\", line 14, in <module>\n    assert parallelogram_area(0, 10) == 0\n  File \"/tmp/tmpaalpiu8a.py\", line 6, in parallelogram_area\n    raise ValueError(\"Both base and height must be positive numbers.\")\nValueError: Both base and height must be positive numbers.", "passed": false}
{"task_id": 53, "requirement": "Input-Output Conditions", "completion": "def check_equality(s):\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string\")\n    if len(s) < 1:\n        return \"Not Equal\"\n    return \"Equal\" if s[0] == s[-1] else \"Not Equal\"\n\n# Example usage:\nresult = check_equality(\"hello\")\nprint(result)  # Output: Not Equal\n\nresult = check_equality(\"radar\")\nprint(result)  # Output: Equal\n", "result": "passed", "passed": true}
{"task_id": 54, "requirement": "Input-Output Conditions", "completion": "def counting_sort(arr):\n    # Check if all elements are non-negative integers\n    if not all(isinstance(x, int) and x >= 0 for x in arr):\n        raise ValueError(\"Input list must contain only non-negative integers.\")\n    \n    if len(arr) == 0:\n        return arr\n    \n    # Find the maximum element in the array\n    max_val = max(arr)\n    \n    # Initialize the count array with zeros\n    count = [0] * (max_val + 1)\n    \n    # Store the count of each element in the count array\n    for num in arr:\n        count[num] += 1\n    \n    # Modify the count array by adding the previous counts\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    \n    # Create an output array to store the sorted elements\n    output = [0] * len(arr)\n    \n    # Build the output array using the count array\n    for num in reversed(arr):\n        output[count[num] - 1] = num\n        count[num] -= 1\n    \n    # Copy the sorted elements back to the original array\n    for i in range(len(arr)):\n        arr[i] = output[i]\n\n    return arr\n\n# Example usage:\ntry:\n    arr = [4, 2, 2, 8, 3, 3, 1]\n    sorted_arr = counting_sort(arr)\n    print(sorted_arr)\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 57, "requirement": "Input-Output Conditions", "completion": "def find_max_num(digits, num_digits):\n    if num_digits > len(digits):\n        raise ValueError(\"Number of digits requested exceeds the number of available digits\")\n    \n    # Convert each integer in the list to a string\n    str_digits = [str(digit) for digit in digits]\n    \n    # Sort the string digits in descending order\n    sorted_digits = sorted(str_digits, reverse=True)\n    \n    # Select the first 'num_digits' from the sorted list\n    selected_digits = sorted_digits[:num_digits]\n    \n    # Join the selected digits into a single string\n    max_num_str = ''.join(selected_digits)\n    \n    # Convert the string back to an integer\n    max_num = int(max_num_str)\n    \n    return max_num\n\n# Example usage:\ndigits = [3, 1, 4, 1, 5, 9]\nnum_digits = 4\nresult = find_max_num(digits, num_digits)\nprint(\"The largest number that can be formed with\", num_digits, \"digits is:\", result)\n", "result": "passed", "passed": true}
{"task_id": 58, "requirement": "Input-Output Conditions", "completion": "def opposite_signs(x, y):\n    if not isinstance(x, int) or not isinstance(y, int):\n        raise ValueError(\"Both inputs must be integers\")\n    return (x < 0 and y > 0) or (x > 0 and y < 0)\n\n# Example usage:\ntry:\n    num1 = -5\n    num2 = 10\n    print(opposite_signs(num1, num2))  # Output: True\n\n    num1 = 15\n    num2 = 20\n    print(opposite_signs(num1, num2))  # Output: False\n\n    num1 = \"15\"\n    num2 = -20\n    print(opposite_signs(num1, num2))  # This will raise a ValueError\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 60, "requirement": "Input-Output Conditions", "completion": "def max_len_sub(arr, diff):\n    if not arr:\n        return 0\n    \n    # Dictionary to store the length of subsequence ending with each element\n    subseq_length = {}\n    \n    # Initialize the dictionary with 1 for each element\n    for num in arr:\n        subseq_length[num] = 1\n    \n    # Iterate through the array to build the subsequence lengths\n    for num in arr:\n        # Check if there's a subsequence ending with num-diff\n        if num - diff in subseq_length:\n            subseq_length[num] = max(subseq_length[num], subseq_length[num - diff] + 1)\n        # Check if there's a subsequence ending with num+diff\n        if num + diff in subseq_length:\n            subseq_length[num + diff] = max(subseq_length[num + diff], subseq_length[num] + 1)\n    \n    # The maximum length of subsequence with specified difference between adjacent elements\n    return max(subseq_length.values())\n\n# Example usage\narr = [1, 2, 3, 4, 5, 3, 2, 1]\ndiff = 1\nprint(max_len_sub(arr, diff))  # Output: 5 (subsequence: [1, 2, 3, 2, 1])\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp764ijwgn.py\", line 23, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nAssertionError", "passed": false}

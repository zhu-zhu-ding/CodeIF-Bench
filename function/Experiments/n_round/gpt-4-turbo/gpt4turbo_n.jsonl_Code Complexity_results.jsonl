{"task_id": 11, "requirement": "Code Complexity", "completion": "def remove_occ(s: str, ch: str) -> str:\n    if len(ch) != 1:\n        raise ValueError(\"Second parameter must be a single character.\")\n    \n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    \n    if first_occurrence == -1:\n        return s\n    \n    # Remove the first occurrence\n    s = s[:first_occurrence] + s[first_occurrence + 1:]\n    \n    # Adjust the index for the last occurrence if necessary\n    if last_occurrence != -1 and last_occurrence != first_occurrence:\n        last_occurrence -= 1\n        s = s[:last_occurrence] + s[last_occurrence + 1:]\n    \n    return s\n\n# Example usage:\nresult = remove_occ(\"hello world\", \"l\")\nprint(result)  # Output: \"heo world\"\n", "result": "passed", "passed": true}
{"task_id": 14, "requirement": "Code Complexity", "completion": "def find_volume(base_area: float, height: float, length: float) -> float:\n    \"\"\"\n    Calculate the volume of a triangular prism.\n    \n    Parameters:\n    base_area (float): The area of the triangular base of the prism.\n    height (float): The height of the prism perpendicular to the base.\n    length (float): The length of the prism along which the triangular base extends.\n    \n    Returns:\n    float: The volume of the triangular prism.\n    \n    Raises:\n    ValueError: If any of the inputs are non-positive or non-numeric.\n    \"\"\"\n    # Validate inputs\n    if not all(isinstance(x, (int, float)) and x > 0 for x in [base_area, height, length]):\n        raise ValueError(\"All dimensions must be positive numbers.\")\n    \n    # Volume of a triangular prism is given by the formula: V = base_area * height * length\n    volume = base_area * height * length\n    return volume\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkmmlft9l.py\", line 8, in <module>\n    assert find_volume(10,8,6) == 240\nAssertionError", "passed": false}
{"task_id": 15, "requirement": "Code Complexity", "completion": "import re\nfrom typing import List\n\ndef split_lowerstring(text: str) -> List[str]:\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Split the string at lowercase letters and filter out empty strings\n    return [s for s in re.split(r'([a-z])', text) if s]\n\n# Example usage\ninput_string = \"HelloWorld\"\nprint(split_lowerstring(input_string))  # Output: ['H', 'e', 'llo', 'W', 'o', 'rld']\n", "result": "failed: File \"/tmp/tmp2bsdwwrn.py\", line 15\n    try: split_lowerstring(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 16, "requirement": "Code Complexity", "completion": "import re\nfrom typing import str\n\ndef text_lowercase_underscore(text: str) -> str:\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    pattern = r'\\b[a-z]+(?:_[a-z]+)+\\b'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\ntry:\n    print(text_lowercase_underscore(\"This is an example_text with multiple_words and some single_words.\"))  # Output: 'Found a match!'\n    print(text_lowercase_underscore(\"This is a test without any matches.\"))  # Output: 'Not matched!'\n    print(text_lowercase_underscore(\"\"))  # Output: 'Not matched!'\n    print(text_lowercase_underscore(123))  # Raises TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpcjezlvh6.py\", line 2, in <module>\n    from typing import str\nImportError: cannot import name 'str' from 'typing' (/home/liminxiao/miniconda3/envs/DevEval/lib/python3.9/typing.py)", "passed": false}
{"task_id": 17, "requirement": "Code Complexity", "completion": "def square_perimeter(side_length: int) -> int:\n    if side_length < 0:\n        raise ValueError(\"Side length must be a non-negative integer\")\n    return 4 * side_length", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2o53xu5b.py\", line 23, in <module>\n    assert square_perimeter.__annotations__ == {'a': int, 'return': int}\nAssertionError", "passed": false}
{"task_id": 20, "requirement": "Code Complexity", "completion": "def is_woodall(x: int) -> bool:\n    if not isinstance(x, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    n = 1\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number >= x:\n            return woodall_number == x\n        n += 1\n\n# Example usage:\nprint(is_woodall(7))  # True, because 7 is 2*2^2 - 1\nprint(is_woodall(15)) # False\nprint(is_woodall(31)) # True, because 31 is 3*2^3 - 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdu2147uw.py\", line 31, in <module>\n    assert cc_visit(inspect.getsource(is_woodall))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 21, "requirement": "Code Complexity", "completion": "from typing import List\n\ndef multiples_of_num(n: int, m: int) -> List[int]:\n    if n < 0 or m < 0:\n        raise ValueError(\"Both m and n must be non-negative integers.\")\n    \n    # Return an empty list if m is zero\n    if m == 0:\n        return []\n    \n    # Generate and return the list of multiples\n    return [n * i for i in range(1, m + 1)]\n\n# Example usage:\nprint(multiples_of_num(5, 10))  # Output: [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]\nprint(multiples_of_num(3, 0))   # Output: []\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpz38vva10.py\", line 13, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 24, "requirement": "Code Complexity", "completion": "def binary_to_decimal(binary: str) -> int:\n    if not all(c in '01' for c in binary):\n        raise ValueError(\"Invalid binary number\")\n    if binary == \"\":\n        return 0\n    return int(binary, 2)\n", "result": "failed: File \"/tmp/tmp76rr2fm2.py\", line 10\n    try: binary_to_decimal('102'); assert False, 'Expected ValueError' except ValueError as e: assert str(e) == 'Invalid binary number'\n                                                                       ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 32, "requirement": "Code Complexity", "completion": "def is_positive_integer(n: int) -> bool:\n    \"\"\"\n    Check if the input is a positive integer.\n    \"\"\"\n    return isinstance(n, int) and n > 0\n\ndef find_largest_prime_factor(n: int) -> int:\n    \"\"\"\n    Find the largest prime factor of a given positive integer.\n    \"\"\"\n    max_prime = -1\n    \n    # Check for number of 2s that divide n\n    while n % 2 == 0:\n        max_prime = 2\n        n >>= 1  # equivalent to n //= 2\n    \n    # n must be odd at this point, thus skip even numbers and iterate only for odd integers\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n // i\n    \n    # This condition is to check if n is a prime number greater than 2\n    if n > 2:\n        max_prime = n\n    \n    return max_prime\n\ndef max_prime_factors(n: int) -> int:\n    \"\"\"\n    Find the largest prime factor of a given number.\n    \n    :param n: int - The number to find the largest prime factor for.\n    :return: int - The largest prime factor.\n    :raises ValueError: If the input is not a positive integer.\n    \"\"\"\n    if not is_positive_integer(n):\n        raise ValueError(\"Input must be a positive integer\")\n    \n    return find_largest_prime_factor(n)\n\n# Example usage\nnumber = 315\ntry:\n    print(f\"The largest prime factor of {number} is {max_prime_factors(number)}\")\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 33, "requirement": "Code Complexity", "completion": "def decimal_to_binary(N: int) -> str:\n    if not isinstance(N, int) or N < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    return bin(N)[2:]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7mfa0n3j.py\", line 5, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 35, "requirement": "Code Complexity", "completion": "def find_rect_num(n: int) -> int:\n    if n < 1:\n        raise ValueError(\"Input must be a positive integer\")\n    return n * (n + 1)\n\n# Example usage:\ntry:\n    n = 1\n    result = find_rect_num(n)\n    print(f\"The {n}-th rectangular number is: {result}\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpue_4faxz.py\", line 23, in <module>\n    assert cc_visit(inspect.getsource(find_rect_num))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 36, "requirement": "Code Complexity", "completion": "def find_nth_digit(p: int, q: int, N: int) -> int:\n    if q == 0:\n        raise ValueError(\"Denominator cannot be zero\")\n    \n    # Get the initial remainder after the decimal point\n    remainder = p % q\n    \n    # Find the Nth digit in the decimal expansion\n    for _ in range(N):\n        remainder = (remainder * 10) % q\n        digit = (remainder * 10) // q\n    \n    return digit\n\n# Example usage:\ntry:\n    p = 1\n    q = 7\n    N = 5\n    result = find_nth_digit(p, q, N)\n    print(f\"The {N}th digit in the decimal representation of {p}/{q} is {result}\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpap4ijswo.py\", line 20, in <module>\n    assert find_nth_digit(1,2,1) == 5\nAssertionError", "passed": false}
{"task_id": 38, "requirement": "Code Complexity", "completion": "from typing import List, Union\n\ndef div_even_odd(numbers: List[int]) -> Union[int, float]:\n    even = next((num for num in numbers if num % 2 == 0), None)\n    odd = next((num for num in numbers if num % 2 != 0), None)\n    \n    if even is None or odd is None:\n        raise ValueError(\"List must contain at least one even and one odd number.\")\n    \n    return even / odd\n\n# Example usage:\nnumbers = [1, 3, 5, 8, 10]\ntry:\n    result = div_even_odd(numbers)\n    print(result)  # Output: 8.0\nexcept ValueError as e:\n    print(e)\n", "result": "failed: File \"/tmp/tmpi7xr0hzb.py\", line 19\n    try: div_even_odd([2, 4, 6]); assert False; except ValueError as e: assert str(e) == 'List must contain at least one even and one odd number.'\n                                                ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 40, "requirement": "Code Complexity", "completion": "from collections import Counter\nfrom typing import List, Dict\n\ndef freq_element(nums: List[List[int]]) -> Dict[int, int]:\n    if not all(isinstance(sublist, list) for sublist in nums):\n        raise TypeError(\"Input must be a list of lists\")\n    \n    # Flatten the list of lists into a single list using a list comprehension\n    flat_list = [item for sublist in nums for item in sublist]\n    \n    # Use Counter to count the frequency of each element\n    frequency = Counter(flat_list)\n    \n    return dict(frequency)\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\ntry:\n    result = freq_element(list_of_lists)\n    print(result)  # Output: {3: 3, 2: 2, 4: 2, 1: 1, 5: 1}\nexcept TypeError as e:\n    print(e)\n", "result": "failed: File \"/tmp/tmpqpeir_x6.py\", line 21\n    try: freq_element('not a list'); assert False; except TypeError: assert True\n                                                   ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 42, "requirement": "Code Complexity", "completion": "from typing import List\nfrom collections import Counter\n\ndef find_sum(arr: List[int]) -> int:\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    if len(arr) == 0:\n        return 0\n    \n    # Count the frequency of each element\n    frequency = Counter(arr)\n    \n    # Calculate the sum of elements that appear more than once\n    sum_repeated = sum(num * count for num, count in frequency.items() if count > 1)\n    \n    return sum_repeated\n\n# Example usage:\narr = [1, 2, 3, 2, 3, 4, 5, 3]\nresult = find_sum(arr)\nprint(\"Sum of repeated elements:\", result)  # Output: 13 (2*2 + 3*3)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpoxd_alvz.py\", line 17, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Code Complexity", "completion": "import re\nfrom typing import str\n\ndef text_match(text: str) -> str:\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    if text == \"\":\n        return \"Not matched!\"\n    \n    pattern = r'\\b[a-z]+(?:_[a-z]+)+\\b'\n    if re.search(pattern, text):\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"\n\n# Example usage:\ntry:\n    print(text_match(\"Here are some examples: first_example, second_example, another_one\"))  # Output: \"Matched!\"\n    print(text_match(\"No underscores here\"))  # Output: \"Not matched!\"\n    print(text_match(\"\"))  # Output: \"Not matched!\"\n    print(text_match(123))  # This will raise TypeError\nexcept TypeError as e:\n    print(e)  # Output: \"Input must be a string\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpj23h5snn.py\", line 2, in <module>\n    from typing import str\nImportError: cannot import name 'str' from 'typing' (/home/liminxiao/miniconda3/envs/DevEval/lib/python3.9/typing.py)", "passed": false}
{"task_id": 45, "requirement": "Code Complexity", "completion": "from typing import List\nimport math\nfrom functools import reduce\n\ndef get_gcd(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"Input list cannot be empty.\")\n    \n    return reduce(math.gcd, numbers)\n\n# Example usage:\ntry:\n    arr = [24, 36, 48]\n    result = get_gcd(arr)\n    print(f\"The GCD of the array elements {arr} is {result}\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpq_doblqi.py\", line 20, in <module>\n    assert get_gcd.__annotations__ == {'numbers': list, 'return': int}\nAssertionError", "passed": false}
{"task_id": 47, "requirement": "Code Complexity", "completion": "def compute_last_digit(a: int, b: int) -> int:\n    if a > b:\n        raise ValueError(\"a should not be greater than b\")\n    if a == b:\n        return 1  # factorial(a) // factorial(b) is 1 when a == b\n\n    # Calculate factorial(b) // factorial(a)\n    result = 1\n    for i in range(a + 1, b + 1):\n        result *= i\n        result %= 10  # Keep only the last digit to prevent overflow\n\n    return result\n\n# Example usage:\nprint(compute_last_digit(3, 5))  # Output: 2\nprint(compute_last_digit(4, 10)) # Output: 8\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvb0b_j7v.py\", line 26, in <module>\n    assert cc_visit(inspect.getsource(compute_last_digit))[0].complexity <=3\nAssertionError", "passed": false}
{"task_id": 51, "requirement": "Code Complexity", "completion": "def check_equilateral(a: int, b: int, c: int) -> bool:\n    if a <= 0 or b <= 0 or c <= 0:\n        raise ValueError(\"All sides must be positive integers.\")\n    return a == b == c\n\n# Example usage:\ntry:\n    print(check_equilateral(5, 5, 5))  # Output: True\n    print(check_equilateral(3, 4, 5))  # Output: False\n    print(check_equilateral(-1, 5, 5))  # Raises ValueError\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmprkxbguei.py\", line 31, in <module>\n    assert cc_visit(inspect.getsource(check_equilateral))[0].complexity ==1\nAssertionError", "passed": false}
{"task_id": 52, "requirement": "Code Complexity", "completion": "def parallelogram_area(base: float, height: float) -> float:\n    \"\"\"\n    Calculate the area of a parallelogram given its base and height.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram.\n\n    Raises:\n    TypeError: If either base or height is not a float.\n    ValueError: If either base or height is negative.\n    \"\"\"\n    if not isinstance(base, (int, float)) or not isinstance(height, (int, float)):\n        raise TypeError(\"Both base and height must be numbers.\")\n    if base < 0 or height < 0:\n        raise ValueError(\"Both base and height must be non-negative.\")\n    \n    area = base * height\n    return area\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp14byt3g8.py\", line 36, in <module>\n    assert cc_visit(inspect.getsource(parallelogram_area))[0].complexity ==1\nAssertionError", "passed": false}
{"task_id": 53, "requirement": "Code Complexity", "completion": "def check_equality(s: str) -> str:\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    if len(s) == 0 or s[0] == s[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n\n# Example usage:\ntry:\n    print(check_equality(\"hello\"))  # Output: Not Equal\n    print(check_equality(\"radar\"))  # Output: Equal\n    print(check_equality(\"\"))       # Output: Equal\n    print(check_equality(123))      # This will raise TypeError\nexcept TypeError as e:\n    print(e)  # Output: Input must be a string\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphf6osr23.py\", line 30, in <module>\n    assert cc_visit(inspect.getsource(check_equality))[0].complexity <=3\nAssertionError", "passed": false}
{"task_id": 56, "requirement": "Code Complexity", "completion": "def check(n: int) -> bool:\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    reversed_number = int(str(n)[::-1])\n    return n == 2 * reversed_number - 1\n\n# Example usage:\ntry:\n    number = 17\n    result = check(number)\n    print(f\"Is {number} one less than twice its reverse? {result}\")\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5qonu1zv.py\", line 23, in <module>\n    assert check(1) == False\nAssertionError", "passed": false}
{"task_id": 58, "requirement": "Code Complexity", "completion": "def opposite_signs(a: int, b: int) -> bool:\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise TypeError(\"Both inputs must be integers\")\n    return (a ^ b) < 0\n\n# Example usage:\nprint(opposite_signs(-5, 10))  # Output: True\nprint(opposite_signs(15, 20))  # Output: False\nprint(opposite_signs(0, -1))   # Output: True\nprint(opposite_signs(0, 0))    # Output: False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphax65tqv.py\", line 29, in <module>\n    assert opposite_signs(0, 1) == True\nAssertionError", "passed": false}

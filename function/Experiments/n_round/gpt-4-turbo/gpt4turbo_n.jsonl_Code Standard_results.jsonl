{"task_id": 11, "requirement": "Code Standard", "completion": "def remove_occ(s: str, char: str) -> str:\n    if len(char) != 1:\n        raise ValueError(\"Second parameter must be a single character.\")\n    \n    # Find the index of the first occurrence of the character\n    first_occurrence = s.find(char)\n    if first_occurrence == -1:\n        # If the character is not found, return the original string\n        return s\n    \n    # Remove the first occurrence of the character\n    s = s[:first_occurrence] + s[first_occurrence + 1:]\n    \n    # Find the index of the last occurrence of the character\n    last_occurrence = s.rfind(char)\n    if last_occurrence == -1:\n        # If the character is not found after removing the first occurrence, return the modified string\n        return s\n    \n    # Remove the last occurrence of the character\n    s = s[:last_occurrence] + s[last_occurrence + 1:]\n    \n    return s\n\n# Example usage:\ntry:\n    result = remove_occ(\"hello world\", \"l\")\n    print(result)  # Output: \"heo world\"\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvmwruwq6.py\", line 31, in <module>\n    assert remove_occ.__annotations__ == {'s': str, 'ch': str, 'return': str}\nAssertionError", "passed": false}
{"task_id": 12, "requirement": "Code Standard", "completion": "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    # Check if the input is a list of lists and all elements are integers\n    if not all(isinstance(row, list) for row in matrix):\n        raise TypeError(\"Input should be a list of lists.\")\n    for row in matrix:\n        if not all(isinstance(element, int) for element in row):\n            raise TypeError(\"All elements in the matrix should be integers.\")\n    \n    # Calculate the sum of each row, treating missing values as zeros\n    row_sums_with_index = [(sum(row), index) for index, row in enumerate(matrix)]\n    \n    # Sort the list of tuples by the sum (first element of the tuple)\n    row_sums_with_index.sort()\n    \n    # Create a new matrix sorted by the row sums\n    sorted_matrix = [matrix[index] for _, index in row_sums_with_index]\n    \n    return sorted_matrix\n\n# Example usage:\nmatrix = [\n    [3, 2, 1],\n    [1, 2, 3],\n    [6, 5, 4]\n]\n\ntry:\n    sorted_matrix = sort_matrix(matrix)\n    for row in sorted_matrix:\n        print(row)\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpzv_1vkkn.py\", line 42, in <module>\n    test_annotations()\n  File \"/tmp/tmpzv_1vkkn.py\", line 41, in test_annotations\n    assert hints == {'matrix': 'list[list[int]]', 'return': 'list[list[int]]'}\nAssertionError", "passed": false}
{"task_id": 14, "requirement": "Code Standard", "completion": "def find_volume(base_area: float, height: float, length: float) -> float:\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base_area (float): The area of the triangular base of the prism.\n    height (float): The height of the prism perpendicular to the base.\n    length (float): The length of the prism along which the base extends.\n\n    Returns:\n    float: The volume of the triangular prism.\n\n    Raises:\n    ValueError: If any of the inputs are non-positive or non-numeric.\n    \"\"\"\n    if not all(isinstance(x, (int, float)) and x > 0 for x in [base_area, height, length]):\n        raise ValueError(\"All dimensions must be positive numbers.\")\n\n    # Volume of a triangular prism is given by the formula: V = base_area * height * length\n    volume = base_area * height * length\n    return volume\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdcu1ihnw.py\", line 7, in <module>\n    assert find_volume(10,8,6) == 240\nAssertionError", "passed": false}
{"task_id": 15, "requirement": "Code Standard", "completion": "import re\nfrom typing import List\n\ndef split_lowerstring(text: str) -> List[str]:\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Use regular expression to split the string at lowercase letters\n    result = re.split(r'([a-z])', text)\n    \n    # Filter out empty strings and lowercase letters from the result\n    filtered_result = [segment for segment in result if segment and not segment.islower()]\n    \n    return filtered_result\n\n# Example usage\ninput_string = \"HelloWorld\"\nprint(split_lowerstring(input_string))  # Output: ['H', 'ello', 'W', 'orld']\n", "result": "failed: File \"/tmp/tmpwof1ypcz.py\", line 18\n    try: split_lowerstring(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 16, "requirement": "Code Standard", "completion": "import re\nfrom typing import List\n\ndef text_lowercase_underscore(text: str) -> List[str]:\n    \"\"\"\n    Finds sequences of lowercase letters joined with an underscore in the given text.\n\n    Args:\n    text (str): The input string to search for patterns.\n\n    Returns:\n    List[str]: A list of matched patterns.\n    \"\"\"\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n\n    pattern = r'\\b[a-z]+(?:_[a-z]+)+\\b'\n    matches = re.findall(pattern, text)\n    return matches\n\n# Example usage:\ntext = \"This is an example_text with multiple_words and some single_words.\"\nresult = text_lowercase_underscore(text)\nprint(result)  # Output: ['example_text', 'multiple_words', 'single_words']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpq4guma0k.py\", line 13, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "requirement": "Code Standard", "completion": "def square_perimeter(side_length: int) -> int:\n    if side_length < 0:\n        raise ValueError(\"Side length must be a non-negative integer\")\n    return 4 * side_length", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpx68ic0cl.py\", line 23, in <module>\n    assert square_perimeter.__annotations__ == {'a': int, 'return': int}\nAssertionError", "passed": false}
{"task_id": 18, "requirement": "Code Standard", "completion": "def remove_dirty_chars(string: str, second_string: str) -> str:\n    \"\"\"\n    Remove characters from 'string' that are present in 'second_string'.\n    \n    Args:\n    string (str): The source string from which characters will be removed.\n    second_string (str): The string containing characters to remove from the first string.\n    \n    Returns:\n    str: A new string with characters removed that are present in 'second_string'.\n    \n    Raises:\n    ValueError: If any of the input strings contain non-alphabetic characters.\n    TypeError: If either of the inputs is not a string.\n    \"\"\"\n    if not isinstance(string, str) or not isinstance(second_string, str):\n        raise TypeError(\"Both inputs must be strings.\")\n    \n    if not string.isalpha() or not second_string.isalpha():\n        raise ValueError(\"Input strings must only contain alphabetic characters.\")\n    \n    # Create a set of characters from the second string\n    dirty_chars = set(second_string)\n    \n    # Use a list comprehension to filter out characters from the first string that are in the dirty_chars set\n    filtered_chars = [char for char in string if char not in dirty_chars]\n    \n    # Join the filtered characters to form the cleaned string\n    cleaned_string = ''.join(filtered_chars)\n    \n    return cleaned_string\n\n# Example usage:\ntry:\n    s1 = \"hello world\"\n    s2 = \"aeiou\"\n    result = remove_dirty_chars(s1, s2)\n    print(result)  # This will raise an error due to space in \"hello world\"\nexcept ValueError as ve:\n    print(ve)\nexcept TypeError as te:\n    print(te)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9cpqf1kn.py\", line 35, in <module>\n    assert remove_dirty_chars('example', '') == 'example', 'Function should return the original string if the second string is empty.'\n  File \"/tmp/tmp9cpqf1kn.py\", line 5, in remove_dirty_chars\n    raise ValueError(\"Input strings must only contain alphabetic characters.\")\nValueError: Input strings must only contain alphabetic characters.", "passed": false}
{"task_id": 19, "requirement": "Code Standard", "completion": "from typing import List\n\ndef test_duplicate(array_nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list of integers contains any duplicate elements.\n\n    Args:\n    array_nums (List[int]): A list of integers to check for duplicates.\n\n    Returns:\n    bool: True if duplicates are found, False otherwise.\n\n    Raises:\n    TypeError: If the input is not a list.\n    ValueError: If the input is not a list of integers.\n    \"\"\"\n    if not isinstance(array_nums, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    if not all(isinstance(num, int) for num in array_nums):\n        raise ValueError(\"Input must be a list of integers.\")\n    \n    seen = set()\n    \n    for num in array_nums:\n        if num in seen:\n            return True\n        seen.add(num)\n    \n    return False\n\n# Example usage:\ntry:\n    arr = [1, 2, 3, 4, 5, 1]\n    print(test_duplicate(arr))  # Output: True\n\n    arr = [1, 2, 3, 4, 5]\n    print(test_duplicate(arr))  # Output: False\n\n    arr = \"not a list\"\n    print(test_duplicate(arr))  # Should raise TypeError\n\n    arr = [1, 2, 'three', 4]\n    print(test_duplicate(arr))  # Should raise ValueError\nexcept (TypeError, ValueError) as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgi6p9p6v.py\", line 37, in <module>\n    test_duplicate(None)\n  File \"/tmp/tmpgi6p9p6v.py\", line 4, in test_duplicate\n    raise TypeError(\"Input must be a list.\")\nTypeError: Input must be a list.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpgi6p9p6v.py\", line 40, in <module>\n    assert str(e) == 'Input must be a list of integers'\nAssertionError", "passed": false}
{"task_id": 20, "requirement": "Code Standard", "completion": "def is_woodall(x: int) -> bool:\n    \"\"\"\n    Check if a given number is a Woodall number.\n\n    A Woodall number is defined as n * 2^n - 1, where n is a positive integer.\n\n    Args:\n    x (int): The number to check.\n\n    Returns:\n    bool: True if x is a Woodall number, False otherwise.\n\n    Raises:\n    TypeError: If x is not an integer.\n    \"\"\"\n    if not isinstance(x, int):\n        raise TypeError(\"Input must be an integer\")\n\n    n = 1\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number == x:\n            return True\n        elif woodall_number > x:\n            return False\n        n += 1\n\n# Example usage:\nprint(is_woodall(7))  # True, because 7 is 2*2^2 - 1\nprint(is_woodall(15)) # False\nprint(is_woodall(31)) # True, because 31 is 3*2^3 - 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4w2y1irj.py\", line 33, in <module>\n    assert cc_visit(inspect.getsource(is_woodall))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 21, "requirement": "Code Standard", "completion": "from typing import List\n\ndef multiples_of_num(n: int, m: int) -> List[int]:\n    if n < 0 or m < 0:\n        raise ValueError(\"Both n and m must be non-negative integers.\")\n    \n    if m == 0:\n        return []\n    \n    return [n * i for i in range(1, m + 1)]\n\n# Example usage:\ntry:\n    print(multiples_of_num(5, 10))  # Output: [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]\n    print(multiples_of_num(3, 0))   # Output: []\n    print(multiples_of_num(-1, 5))  # This will raise ValueError\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1p91jabq.py\", line 15, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "requirement": "Code Standard", "completion": "from typing import List, Union\n\ndef find_first_duplicate(nums: List[int]) -> Union[int, None]:\n    if not isinstance(nums, list) or not all(isinstance(num, int) for num in nums):\n        raise TypeError(\"Input must be a list of integers\")\n    \n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    \n    return None  # Return None if no duplicate is found\n\n# Example usage:\ntry:\n    print(find_first_duplicate([1, 2, 3, 2, 5]))  # Output: 2\n    print(find_first_duplicate([1, 2, 3, 4, 5]))  # Output: None\n    print(find_first_duplicate([]))               # Output: None\n    print(find_first_duplicate([1, 2, 'a', 3]))   # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmprlkne8kc.py\", line 20, in <module>\n    assert find_first_duplicate([1, 2, 3, 4])==-1\nAssertionError", "passed": false}
{"task_id": 23, "requirement": "Code Standard", "completion": "from typing import List\n\ndef maximum_sum(list1: List[List[int]]) -> int:\n    if not isinstance(list1, list) or any(not isinstance(sublist, list) for sublist in list1):\n        raise TypeError(\"Input must be a list of lists\")\n    \n    for sublist in list1:\n        if not all(isinstance(item, int) for item in sublist):\n            raise TypeError(\"All elements in sublists must be integers\")\n    \n    if not list1 or all(not sublist for sublist in list1):\n        return 0\n    \n    max_sum = float('-inf')\n    \n    for sublist in list1:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum if max_sum != float('-inf') else 0\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [4, 5, 6], [10, 11, -2]]\nprint(maximum_sum(list_of_lists))  # Output: 19\n\nempty_list_of_lists = []\nprint(maximum_sum(empty_list_of_lists))  # Output: 0\n\nnested_empty_lists = [[], [], []]\nprint(maximum_sum(nested_empty_lists))  # Output: 0\n", "result": "failed: File \"/tmp/tmp1xgphk_0.py\", line 27\n    try: maximum_sum([[1, 2], [3, 'a']]); assert False, 'Expected TypeError' except TypeError: pass\n                                                                             ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 24, "requirement": "Code Standard", "completion": "def binary_to_decimal(binary: str) -> int:\n    \"\"\"\n    Convert a binary number (as a string) to its decimal equivalent.\n\n    Args:\n    binary (str): The binary number as a string.\n\n    Returns:\n    int: The decimal equivalent of the binary number.\n\n    Raises:\n    ValueError: If the input is not a valid binary string.\n    \"\"\"\n    if not binary:  # Handle the edge case of an empty string\n        return 0\n\n    if any(char not in '01' for char in binary):  # Validate binary input\n        raise ValueError(\"Invalid binary number\")\n\n    decimal = 0\n    binary = binary[::-1]  # Reverse to ease calculation\n\n    for i, bit in enumerate(binary):\n        decimal += int(bit) * (2 ** i)\n\n    return decimal\n", "result": "failed: File \"/tmp/tmpjqoawk_y.py\", line 14\n    try: binary_to_decimal('102'); assert False, 'Expected ValueError' except ValueError as e: assert str(e) == 'Invalid binary number'\n                                                                       ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 25, "requirement": "Code Standard", "completion": "from typing import List\n\ndef find_product(arr: List[int]) -> int:\n    if not isinstance(arr, list) or not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"Input must be a list of integers\")\n    \n    # Create a dictionary to store the frequency of each element\n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    \n    # Calculate the product of non-repeated elements\n    product = 1\n    for num, count in frequency.items():\n        if count == 1:\n            product *= num\n    \n    return product\n\n# Example usage\ntry:\n    arr = [1, 2, 3, 2, 4, 5, 5]\n    result = find_product(arr)\n    print(result)  # Output: 12 (1 * 3 * 4)\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1dftb9c5.py\", line 25, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "requirement": "Code Standard", "completion": "from typing import List, Tuple\n\ndef check_k_elements(test_list: List[Tuple], k: int) -> bool:\n    \"\"\"\n    Check if all tuples in the list have exactly k elements.\n\n    Args:\n    test_list (List[Tuple]): A list of tuples to be checked.\n    k (int): The number of elements each tuple should have.\n\n    Returns:\n    bool: True if all tuples have exactly k elements, False otherwise.\n\n    Raises:\n    TypeError: If test_list is not a list of tuples or if k is not an integer.\n    \"\"\"\n    if not isinstance(test_list, list) or not all(isinstance(tup, tuple) for tup in test_list):\n        raise TypeError(\"test_list must be a list of tuples\")\n    if not isinstance(k, int):\n        raise TypeError(\"k must be an integer\")\n\n    # Check if all tuples in the list have exactly k elements\n    for tup in test_list:\n        if len(tup) != k:\n            return False\n    return True\n\n# Example usage:\ntry:\n    sample_tuples = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n    k = 3\n    result = check_k_elements(sample_tuples, k)\n    print(\"All tuples have\", k, \"elements:\", result)  # Output: All tuples have 3 elements: True\n\n    sample_tuples2 = [(1, 2), (3, 4, 5), (6,)]\n    k2 = 2\n    result2 = check_k_elements(sample_tuples2, k2)\n    print(\"All tuples have\", k2, \"elements:\", result2)  # Output: All tuples have 2 elements: False\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpn3ntbni4.py\", line 24, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "requirement": "Code Standard", "completion": "from typing import List\n\ndef remove(list_of_strings: List[str]) -> List[str]:\n    \"\"\"\n    Removes all digits from each string in a list of strings.\n\n    Args:\n    list_of_strings (List[str]): A list of strings from which digits are to be removed.\n\n    Returns:\n    List[str]: A list of strings with all digits removed.\n\n    Raises:\n    TypeError: If the input is not a list or any element in the list is not a string.\n    \"\"\"\n    if not isinstance(list_of_strings, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    modified_strings = []\n    for string in list_of_strings:\n        if not isinstance(string, str):\n            raise TypeError(\"All elements in the list must be strings.\")\n        \n        filtered_string = ''.join([char for char in string if not char.isdigit()])\n        modified_strings.append(filtered_string)\n    \n    return modified_strings\n\n# Example usage:\ninput_strings = [\"hello123\", \"world456\", \"python789\"]\ntry:\n    output_strings = remove(input_strings)\n    print(output_strings)  # Output: ['hello', 'world', 'python']\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkwhr0db9.py\", line 37, in <module>\n    assert remove.__annotations__ == {'list': list[str], 'return': list[str]}\nAssertionError", "passed": false}
{"task_id": 28, "requirement": "Code Standard", "completion": "def factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\ndef binomial_coeff(n: int, k: int) -> int:\n    if n < 0 or k < 0 or k > n:\n        raise ValueError(\"Inputs must be non-negative and k must not be greater than n\")\n    \n    if k == 0 or k == n:\n        return 1\n    \n    k = min(k, n - k)  # Take advantage of symmetry\n    c = 1\n    for i in range(k):\n        c = c * (n - i) // (i + 1)\n    return c\n\n# Example usage:\ntry:\n    n = 5\n    k = 2\n    print(f\"Binomial Coefficient C({n}, {k}) is {binomial_coeff(n, k)}\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7l0yf34n.py\", line 47, in <module>\n    check_code_style(binomial_coeff)\n  File \"/tmp/tmp7l0yf34n.py\", line 43, in check_code_style\n    assert result.total_errors == 0, \"Code does not conform to PEP 8 standards.\"\nAssertionError: Code does not conform to PEP 8 standards.", "passed": false}
{"task_id": 29, "requirement": "Code Standard", "completion": "from typing import List, Optional\n\ndef get_odd_occurrence(arr: List[int], arr_size: int) -> Optional[int]:\n    if not isinstance(arr, list) or not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"Input must be a list of integers.\")\n    \n    if arr_size == 0:\n        return None\n    \n    result = 0\n    for element in arr:\n        result ^= element\n    \n    return result\n\n# Example usage\narr = [1, 2, 3, 2, 3, 1, 3]\narr_size = len(arr)\ntry:\n    print(get_odd_occurrence(arr, arr_size))  # Output: 3\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmph4fbdpyq.py\", line 34, in <module>\n    assert get_odd_occurrence([]) is None\nTypeError: get_odd_occurrence() missing 1 required positional argument: 'arr_size'", "passed": false}
{"task_id": 30, "requirement": "Code Standard", "completion": "def count_substring_with_equal_ends(s: str) -> int:\n    \"\"\"\n    Count all substrings of the input string that start and end with the same character.\n\n    :param s: str - The input string\n    :return: int - The count of substrings with equal start and end characters\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    \n    count = 0\n    n = len(s)\n    \n    # Iterate over each character in the string\n    for i in range(n):\n        # Check substrings starting from the current character\n        for j in range(i, n):\n            # If the start and end characters of the substring are the same, increment the count\n            if s[i] == s[j]:\n                count += 1\n    \n    return count\n\n# Example usage:\ninput_string = \"abcab\"\nresult = count_substring_with_equal_ends(input_string)\nprint(f\"Number of substrings starting and ending with the same character: {result}\")\n", "result": "failed: File \"/tmp/tmp4v58b06c.py\", line 22\n    try: count_substring_with_equal_ends(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                                  ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 31, "requirement": "Code Standard", "completion": "from typing import List\nimport heapq\nfrom collections import defaultdict\n\ndef func(nums: List[List[int]], k: int) -> List[int]:\n    if not nums:\n        return []\n    \n    # Create a dictionary to count the frequency of each integer\n    frequency = defaultdict(int)\n    \n    # Count the frequency of each integer in all lists\n    for lst in nums:\n        for num in lst:\n            frequency[num] += 1\n    \n    # Check if k is greater than the number of distinct integers\n    if k > len(frequency):\n        raise ValueError(\"k cannot be greater than the number of distinct integers\")\n    \n    # Use a heap to find the top k integers with the highest frequency\n    # We use a min-heap, so we store negative frequencies to simulate a max-heap\n    heap = []\n    for num, freq in frequency.items():\n        heapq.heappush(heap, (-freq, num))\n        if len(heap) > k:\n            heapq.heappop(heap)\n    \n    # Extract the top k integers from the heap\n    top_k = []\n    while heap:\n        freq, num = heapq.heappop(heap)\n        top_k.append(num)\n    \n    # Since we want the result in descending order of frequency, reverse the list\n    return top_k[::-1]\n\n# Example usage:\nlists = [[1, 3, 5], [1, 2, 4], [1, 2, 3]]\nk = 2\nprint(func(lists, k))  # Output: [1, 2]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpf2cxkyep.py\", line 34, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "requirement": "Code Standard", "completion": "def max_prime_factors(n: int) -> int:\n    \"\"\"\n    Find the largest prime factor of a given positive integer.\n\n    Parameters:\n    n (int): The positive integer to find the largest prime factor of.\n\n    Returns:\n    int: The largest prime factor of the given number.\n\n    Raises:\n    ValueError: If the input is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n\n    max_prime = -1\n\n    # Check for number of 2s that divide n\n    while n % 2 == 0:\n        max_prime = 2\n        n >>= 1  # equivalent to n //= 2\n\n    # n must be odd at this point, thus skip even numbers and iterate only for odd integers\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n // i\n\n    # This condition is to check if n is a prime number greater than 2\n    if n > 2:\n        max_prime = n\n\n    return max_prime\n\n# Example usage\ntry:\n    number = 315\n    print(f\"The largest prime factor of {number} is {max_prime_factors(number)}\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkzfbznt8.py\", line 40, in <module>\n    assert cc_visit(inspect.getsource(max_prime_factors))[0].complexity <= 5\nAssertionError", "passed": false}
{"task_id": 33, "requirement": "Code Standard", "completion": "def decimal_to_binary(N: int) -> str:\n    if not isinstance(N, int) or N < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    if N == 0:\n        return \"0\"\n    \n    binary = \"\"\n    while N > 0:\n        binary = str(N % 2) + binary\n        N = N // 2\n    \n    return binary\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwehb04ro.py\", line 11, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "requirement": "Code Standard", "completion": "from typing import List\n\ndef find_missing(arr: List[int]) -> int:\n    \"\"\"\n    Finds the missing number in a sorted array of integers.\n\n    Parameters:\n    arr (List[int]): A sorted list of integers.\n\n    Returns:\n    int: The missing integer in the sequence.\n\n    Raises:\n    ValueError: If the input list is not sorted.\n    \"\"\"\n    # Check if the list is sorted\n    if not all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1)):\n        raise ValueError(\"Input list must be sorted.\")\n\n    # Initialize left and right pointers\n    left, right = 0, len(arr) - 1\n\n    # Binary search for the missing number\n    while left <= right:\n        mid = (left + right) // 2\n\n        # Check if the missing number is in the left half\n        if arr[mid] != mid + arr[0]:\n            if mid == 0 or arr[mid - 1] == mid - 1 + arr[0]:\n                return mid + arr[0]\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    # If no missing number found, return -1\n    return -1\n\n# Example usage:\narr = [1, 2, 3, 4, 6, 7, 8]\ntry:\n    missing_number = find_missing(arr)\n    print(\"The missing number is:\", missing_number)\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpviq81g36.py\", line 27, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "requirement": "Code Standard", "completion": "def find_rect_num(n: int) -> int:\n    \"\"\"\n    Calculate the n-th rectangular number, which is the product of two consecutive integers, n * (n + 1).\n\n    Parameters:\n    n (int): The position of the rectangular number to be calculated.\n\n    Returns:\n    int: The n-th rectangular number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    return n * (n + 1)\n\n# Example usage:\ntry:\n    n = 1\n    result = find_rect_num(n)\n    print(f\"The {n}-th rectangular number is: {result}\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3hfh1jni.py\", line 23, in <module>\n    assert cc_visit(inspect.getsource(find_rect_num))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 36, "requirement": "Code Standard", "completion": "def find_nth_digit(p: int, q: int, N: int) -> int:\n    \"\"\"\n    Find the Nth digit in the decimal representation of the fraction p/q.\n\n    Args:\n    p (int): Numerator of the fraction.\n    q (int): Denominator of the fraction.\n    N (int): The position of the digit in the decimal part to retrieve.\n\n    Returns:\n    int: The Nth digit in the decimal representation of the fraction.\n\n    Raises:\n    ValueError: If the denominator q is zero.\n    \"\"\"\n    # Check if the denominator is zero\n    if q == 0:\n        raise ValueError(\"Denominator cannot be zero\")\n    \n    # Initialize the remainder\n    remainder = p % q\n    \n    # Loop to find the Nth digit\n    for _ in range(N):\n        # Multiply the remainder by 10\n        remainder *= 10\n        # Get the digit\n        digit = remainder // q\n        # Update the remainder\n        remainder %= q\n    \n    return digit\n\n# Example usage:\nnumerator = 1\ndenominator = 7\nn = 5\ntry:\n    result = find_nth_digit(numerator, denominator, n)\n    print(f\"The {n}th digit in the decimal representation of {numerator}/{denominator} is {result}\")\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 37, "requirement": "Code Standard", "completion": "from typing import Union, List\n\ndef sort_mixed_list(mixed_list: List[Union[int, str]]) -> List[Union[int, str]]:\n    if not isinstance(mixed_list, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    if any(not isinstance(item, (int, str)) for item in mixed_list):\n        raise TypeError(\"List elements must be either integers or strings.\")\n    \n    # Separate integers and strings into two different lists\n    int_list = [item for item in mixed_list if isinstance(item, int)]\n    str_list = [item for item in mixed_list if isinstance(item, str)]\n    \n    # Sort the integer list and string list\n    int_list.sort()\n    str_list.sort()\n    \n    # Combine the sorted lists\n    sorted_list = int_list + str_list\n    \n    return sorted_list\n\n# Example usage:\nmixed_list = [3, \"apple\", 1, \"banana\", 2, \"cherry\"]\nsorted_list = sort_mixed_list(mixed_list)\nprint(sorted_list)  # Output: [1, 2, 3, 'apple', 'banana', 'cherry']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5n43igbq.py\", line 38, in <module>\n    assert sort_mixed_list.__annotations__ == {'mixed_list': list[Union[int, str]], 'return' : list}\nAssertionError", "passed": false}
{"task_id": 38, "requirement": "Code Standard", "completion": "from typing import List, Union\n\ndef div_even_odd(numbers: List[int]) -> Union[int, float]:\n    even = None\n    odd = None\n    \n    # Loop through the list to find the first even and odd numbers\n    for num in numbers:\n        if num % 2 == 0 and even is None:\n            even = num\n        if num % 2 != 0 and odd is None:\n            odd = num\n        \n        # If both even and odd numbers are found, break the loop\n        if even is not None and odd is not None:\n            break\n    \n    # Check if both even and odd numbers were found\n    if even is None or odd is None:\n        raise ValueError(\"List must contain at least one even and one odd number.\")\n    \n    # Perform the division\n    return even / odd\n\n# Example usage:\nnumbers = [1, 3, 5, 8, 10]\ntry:\n    result = div_even_odd(numbers)\n    print(result)  # Output: 8.0\nexcept ValueError as e:\n    print(e)\n", "result": "failed: File \"/tmp/tmpbrb9px3o.py\", line 30\n    try: div_even_odd([2, 4, 6]); assert False; except ValueError as e: assert str(e) == 'List must contain at least one even and one odd number.'\n                                                ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 39, "requirement": "Code Standard", "completion": "from collections import Counter\nimport heapq\nfrom typing import List, Tuple\n\ndef rearrange_string(s: str) -> str:\n    \"\"\"\n    Write a function to check if the letters of a given string can be rearranged so that two characters\n    that are adjacent to each other are different.\n    \n    Parameters:\n    s (str): The input string consisting only of lowercase letters.\n    \n    Returns:\n    str: A rearranged string where no two adjacent characters are the same, or an empty string if it's not possible.\n    \n    Raises:\n    ValueError: If the input is not a string or contains characters other than lowercase letters.\n    \"\"\"\n    if not isinstance(s, str) or not s.isalpha() or not s.islower():\n        raise ValueError(\"Input must be a non-empty string of lowercase letters.\")\n    \n    # Count the frequency of each character\n    char_count = Counter(s)\n    # Create a max heap based on the frequency of characters\n    max_heap: List[Tuple[int, str]] = [(-freq, char) for char, freq in char_count.items()]\n    heapq.heapify(max_heap)\n    \n    prev_char: str = ''\n    prev_freq: int = 0\n    result: List[str] = []\n    \n    while max_heap:\n        freq, char = heapq.heappop(max_heap)\n        # Append the current character to the result\n        result.append(char)\n        \n        # If there is a previous character with non-zero frequency, push it back to the heap\n        if prev_char and prev_freq < 0:\n            heapq.heappush(max_heap, (prev_freq, prev_char))\n        \n        # Update the previous character and its frequency\n        prev_char = char\n        prev_freq = freq + 1  # Decrease the frequency since we used one occurrence of this character\n    \n    # If the length of the result matches the length of the input string, it means we successfully rearranged it\n    if len(result) == len(s):\n        return ''.join(result)\n    else:\n        return \"\"\n\n# Example usage:\nprint(rearrange_string(\"aab\"))  # Output: \"aba\"\nprint(rearrange_string(\"aaab\"))  # Output: \"\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpu77bbf44.py\", line 33, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "requirement": "Code Standard", "completion": "from collections import Counter\nfrom typing import List, Dict\n\ndef freq_element(nums: List[List[int]]) -> Dict[int, int]:\n    if not isinstance(nums, list) or not all(isinstance(sublist, list) for sublist in nums):\n        raise TypeError(\"Input must be a list of lists\")\n    \n    if not nums:\n        return {}\n    \n    # Flatten the list of lists into a single list\n    flat_list = [item for sublist in nums for item in sublist]\n    \n    # Use Counter to count the frequency of each element\n    frequency = Counter(flat_list)\n    \n    return dict(frequency)\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\nresult = freq_element(list_of_lists)\nprint(result)  # Output: {3: 3, 2: 2, 4: 2, 1: 1, 5: 1}\n", "result": "failed: File \"/tmp/tmpcsf4yb_r.py\", line 20\n    try: freq_element('not a list'); assert False; except TypeError: assert True\n                                                   ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 41, "requirement": "Code Standard", "completion": "from typing import List\n\ndef filter_evennumbers(nums: List[int]) -> List[int]:\n    if not isinstance(nums, list) or not all(isinstance(num, int) for num in nums):\n        raise TypeError(\"Input must be a list of integers.\")\n    \n    if not nums:\n        return []\n    \n    even_numbers = list(filter(lambda x: x % 2 == 0, nums))\n    return even_numbers\n\n# Example usage:\ntry:\n    numbers_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    result = filter_evennumbers(numbers_list)\n    print(result)  # Output: [2, 4, 6, 8, 10]\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdp35u5xt.py\", line 23, in <module>\n    assert filter_evennumbers.__annotations__ == {'nums': list, 'return': list}\nAssertionError", "passed": false}
{"task_id": 42, "requirement": "Code Standard", "completion": "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    \"\"\"\n    Calculate the sum of repeated elements in the given list.\n\n    Args:\n    arr (List[int]): The list of integers to check for repeated elements.\n\n    Returns:\n    int: The sum of all repeated elements in the list.\n\n    Raises:\n    TypeError: If the input is not a list.\n    \"\"\"\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n\n    # Create a dictionary to store the frequency of each element\n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    \n    # Calculate the sum of elements that appear more than once\n    sum_repeated = 0\n    for num, count in frequency.items():\n        if count > 1:\n            sum_repeated += num * count\n    \n    return sum_repeated\n\n# Example usage:\ntry:\n    arr = [1, 2, 3, 2, 3, 4, 5, 3]\n    result = find_sum(arr)\n    print(\"Sum of repeated elements:\", result)  # Output: 13 (2*2 + 3*3)\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpilm9mr4c.py\", line 25, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Code Standard", "completion": "import re\nfrom typing import str\n\ndef text_match(text: str) -> str:\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    if text == \"\":\n        return \"Not matched!\"\n    \n    pattern = r'\\b[a-z]+(?:_[a-z]+)+\\b'\n    if re.search(pattern, text):\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"\n\n# Example usage:\ntry:\n    print(text_match(\"example_text\"))  # Output: Matched!\n    print(text_match(\"ExampleText\"))   # Output: Not matched!\n    print(text_match(\"\"))              # Output: Not matched!\n    print(text_match(123))             # This will raise TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphpk11os4.py\", line 2, in <module>\n    from typing import str\nImportError: cannot import name 'str' from 'typing' (/home/liminxiao/miniconda3/envs/DevEval/lib/python3.9/typing.py)", "passed": false}
{"task_id": 44, "requirement": "Code Standard", "completion": "import re\n\ndef text_match_string(text: str, word: str) -> bool:\n    if not isinstance(text, str) or not isinstance(word, str):\n        raise TypeError(\"Both text and word must be strings.\")\n    \n    pattern = r'^' + re.escape(word) + r'\\b'\n    return bool(re.match(pattern, text))\n\n# Example usage:\ntry:\n    text = \"hello world\"\n    word = \"hello\"\n    result = text_match_string(text, word)\n    print(result)  # Output: True\n\n    text = \"world hello\"\n    result = text_match_string(text, word)\n    print(result)  # Output: False\n\n    text = 123  # This will raise a TypeError\n    result = text_match_string(text, word)\nexcept TypeError as e:\n    print(e)\n", "result": "failed: File \"/tmp/tmpmwxcfvx4.py\", line 23\n    try: text_match_string(123); assert False, 'TypeError not raised' except TypeError: pass\n                                                                      ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 45, "requirement": "Code Standard", "completion": "from typing import List\nfrom functools import reduce\nimport math\n\ndef get_gcd(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError(\"Input list cannot be empty.\")\n    \n    def gcd(x: int, y: int) -> int:\n        while y != 0:\n            (x, y) = (y, x % y)\n        return x\n    \n    return reduce(gcd, numbers)\n\n# Example usage:\ntry:\n    arr = [24, 36, 48]\n    result = get_gcd(arr)\n    print(f\"The GCD of the array elements {arr} is {result}\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgzdv5yee.py\", line 24, in <module>\n    assert get_gcd.__annotations__ == {'numbers': list, 'return': int}\nAssertionError", "passed": false}
{"task_id": 46, "requirement": "Code Standard", "completion": "from typing import List\n\ndef test_distinct(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if all numbers in the list are distinct.\n\n    Args:\n    numbers (List[int]): A list of integers.\n\n    Returns:\n    bool: True if all numbers are distinct, False otherwise.\n\n    Raises:\n    TypeError: If the input is not a list or contains non-integer elements.\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    for number in numbers:\n        if not isinstance(number, int):\n            raise TypeError(\"All elements in the list must be integers.\")\n    \n    return len(numbers) == len(set(numbers))\n\n# Example usage:\nnumbers = [1, 2, 3, 4, 5]\nprint(test_distinct(numbers))  # Output: True\n\nnumbers = [1, 2, 3, 3, 4]\nprint(test_distinct(numbers))  # Output: False\n\n# Edge cases:\nempty_list = []\nprint(test_distinct(empty_list))  # Output: True\n\nsingle_element_list = [42]\nprint(test_distinct(single_element_list))  # Output: True\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmprgd6p7jg.py\", line 39, in <module>\n    assert test_distinct.__annotations__ == {'numbers': list, 'return': bool}\nAssertionError", "passed": false}
{"task_id": 48, "requirement": "Code Standard", "completion": "def odd_bit_set_number(n: int) -> int:\n    \"\"\"\n    Set all odd bits of a given integer to 1.\n\n    Args:\n    n (int): The integer whose odd bits are to be set.\n\n    Returns:\n    int: The integer with all odd bits set.\n\n    Raises:\n    TypeError: If the input is not an integer.\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n\n    # Mask with all odd bits set (0xAAAAAAAA is a 32-bit mask with all odd bits set)\n    mask = 0xAAAAAAAA\n\n    # Set all odd bits of the given number using bitwise OR operation\n    result = n | mask\n\n    return result\n\n# Example usage\ntry:\n    number = 10  # Binary representation: 1010\n    result = odd_bit_set_number(number)\n    print(f\"Original number: {number}, Binary: {bin(number)}\")\n    print(f\"Number with odd bits set: {result}, Binary: {bin(result)}\")\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgcq4s_cr.py\", line 17, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "requirement": "Code Standard", "completion": "def specified_element(matrix, index=0):\n    \"\"\"\n    Extracts the specified element from each sub-list in a two-dimensional list.\n    \n    :param matrix: A two-dimensional list (list of lists)\n    :param index: The index of the element to extract from each sub-list (default is 0)\n    :return: A list containing the extracted elements\n    \"\"\"\n    # Check if the matrix is empty\n    if not matrix:\n        return []\n    \n    # Initialize an empty list to store the extracted elements\n    extracted_elements = []\n    \n    # Iterate through each sub-list in the matrix\n    for sublist in matrix:\n        # Check if the sublist is long enough to have the specified index\n        if len(sublist) > index:\n            # Append the element at the specified index to the extracted_elements list\n            extracted_elements.append(sublist[index])\n        else:\n            # Raise an IndexError if the index is out of range for the sublist\n            raise IndexError('Index out of range for sublist')\n    \n    return extracted_elements\n\n# Example usage:\nmatrix = [[1, 2, 3], [4, 5], [7, 8, 9]]\nprint(specified_element(matrix))  # Output: [1, 4, 7]\nprint(specified_element(matrix, 1))  # Output: [2, 5, 8]\ntry:\n    print(specified_element(matrix, 2))  # Raises IndexError: Index out of range for sublist\nexcept IndexError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpy22bxckb.py\", line 31, in <module>\n    assert specified_element([[1, 2], [3], [4, 5, 6]], 1) == [2, 5]\n  File \"/tmp/tmpy22bxckb.py\", line 15, in specified_element\n    raise IndexError('Index out of range for sublist')\nIndexError: Index out of range for sublist", "passed": false}
{"task_id": 51, "requirement": "Code Standard", "completion": "def check_equilateral(a: int, b: int, c: int) -> bool:\n    if a <= 0 or b <= 0 or c <= 0:\n        raise ValueError(\"All sides must be positive integers.\")\n    return a == b == c\n\n# Example usage:\ntry:\n    print(check_equilateral(5, 5, 5))  # Output: True\n    print(check_equilateral(3, 4, 5))  # Output: False\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmptyh_1c0k.py\", line 30, in <module>\n    assert cc_visit(inspect.getsource(check_equilateral))[0].complexity ==1\nAssertionError", "passed": false}
{"task_id": 52, "requirement": "Code Standard", "completion": "def parallelogram_area(base: float, height: float) -> float:\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram.\n    \"\"\"\n    if not isinstance(base, (int, float)) or not isinstance(height, (int, float)):\n        raise TypeError(\"Both base and height must be numerical values.\")\n    \n    if base < 0 or height < 0:\n        raise ValueError(\"Both base and height must be positive values.\")\n    \n    area = base * height\n    return area\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpr8ctd1wz.py\", line 36, in <module>\n    assert cc_visit(inspect.getsource(parallelogram_area))[0].complexity ==1\nAssertionError", "passed": false}
{"task_id": 53, "requirement": "Code Standard", "completion": "def check_equality(s: str) -> str:\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    if len(s) == 0 or s[0] == s[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n\n# Example usage:\ntry:\n    result = check_equality(\"hello\")\n    print(result)  # Output: Not Equal\n\n    result = check_equality(\"radar\")\n    print(result)  # Output: Equal\n\n    result = check_equality(\"\")\n    print(result)  # Output: Equal\n\n    result = check_equality(123)  # This will raise a TypeError\nexcept TypeError as e:\n    print(e)  # Output: Input must be a string\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2k2cblon.py\", line 33, in <module>\n    assert cc_visit(inspect.getsource(check_equality))[0].complexity <=3\nAssertionError", "passed": false}
{"task_id": 54, "requirement": "Code Standard", "completion": "from typing import List\n\ndef counting_sort(arr: List[int]) -> List[int]:\n    if not isinstance(arr, list) or any(not isinstance(x, int) for x in arr):\n        raise TypeError(\"Input must be a list of integers.\")\n    \n    if not arr:\n        return arr  # Return empty list as is\n    \n    # Handling negative integers by finding the minimum value\n    min_val = min(arr)\n    max_val = max(arr)\n    \n    # Shift all numbers to make all elements non-negative\n    shift = -min_val if min_val < 0 else 0\n    size = max_val - min_val + 1\n    count = [0] * size\n    \n    # Count each element\n    for num in arr:\n        count[num + shift] += 1\n    \n    # Modify the count array by adding the previous counts\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    \n    # Create an output array to store the sorted elements\n    output = [0] * len(arr)\n    \n    # Build the output array using the count array\n    for num in reversed(arr):\n        output[count[num + shift] - 1] = num\n        count[num + shift] -= 1\n    \n    return output\n\n# Example usage:\narr = [4, -2, 2, -8, 3, 3, 1]\nsorted_arr = counting_sort(arr)\nprint(sorted_arr)  # Output: [-8, -2, 1, 2, 3, 3, 4]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpq0o2k5fr.py\", line 31, in <module>\n    assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n  File \"/tmp/tmpq0o2k5fr.py\", line 16, in counting_sort\n    count[num + shift] += 1\nIndexError: list index out of range", "passed": false}
{"task_id": 55, "requirement": "Code Standard", "completion": "def tn_gp(a: int, r: int, n: int) -> int:\n    \"\"\"\n    Calculate the n-th term of a geometric series.\n    \n    Parameters:\n        a (int): The first term of the geometric series.\n        r (int): The common ratio of the geometric series.\n        n (int): The term number to find.\n        \n    Returns:\n        int: The n-th term of the geometric series.\n        \n    Raises:\n        ValueError: If the term number n is less than 1.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Term number must be greater than 0\")\n    \n    if r == 0:\n        if n == 1:\n            return a\n        else:\n            return 0\n    \n    return a * (r ** (n - 1))\n\n# Example usage:\ntry:\n    first_term = 2\n    common_ratio = 3\n    term_number = 4\n    result = tn_gp(first_term, common_ratio, term_number)\n    print(f\"The {term_number}-th term of the geometric series is: {result}\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpa5ka1sy6.py\", line 19, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "requirement": "Code Standard", "completion": "def check(n: int) -> bool:\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n\n    Args:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number is one less than twice its reverse, False otherwise.\n\n    Raises:\n    TypeError: If the input is not an integer.\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n\n    # Convert the number to a string to reverse it\n    reversed_number_str = str(n)[::-1]\n\n    # Convert the reversed string back to an integer\n    reversed_number = int(reversed_number_str)\n\n    # Calculate twice the reversed number\n    twice_reversed = 2 * reversed_number\n\n    # Check if the given number is one less than twice its reverse\n    return n == twice_reversed - 1\n\n# Example usage:\ntry:\n    number = 17\n    result = check(number)\n    print(f\"Is {number} one less than twice its reverse? {result}\")\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpojgj44dg.py\", line 29, in <module>\n    assert check(1) == False\nAssertionError", "passed": false}
{"task_id": 57, "requirement": "Code Standard", "completion": "from typing import List\n\ndef find_max_num(digits: List[int], n: int) -> int:\n    if n > len(digits):\n        raise ValueError('Number of digits exceeds the length of the list.')\n    if not digits:\n        return 0\n    \n    # Convert each integer in the list to a string\n    str_digits = [str(digit) for digit in digits]\n    \n    # Sort the string digits in descending order\n    sorted_digits = sorted(str_digits, reverse=True)\n    \n    # Join the sorted digits into a single string\n    max_num_str = ''.join(sorted_digits[:n])\n    \n    # Convert the string back to an integer\n    max_num = int(max_num_str)\n    \n    return max_num\n\n# Example usage:\ndigits = [3, 1, 4, 1, 5, 9]\nn = 3\ntry:\n    result = find_max_num(digits, n)\n    print(\"The largest number that can be formed is:\", result)\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdsbrrav9.py\", line 33, in <module>\n    assert find_max_num.__annotations__ == {'digits': list, 'n': int, 'return': int}\nAssertionError", "passed": false}
{"task_id": 58, "requirement": "Code Standard", "completion": "def opposite_signs(a: int, b: int) -> bool:\n    \"\"\"\n    Check if two integers have opposite signs.\n\n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n\n    Returns:\n    bool: True if the integers have opposite signs, False otherwise.\n\n    Raises:\n    TypeError: If either input is not an integer.\n    \"\"\"\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise TypeError(\"Both inputs must be integers\")\n\n    return (a < 0 and b > 0) or (a > 0 and b < 0)\n\n# Example usage:\nprint(opposite_signs(-5, 10))  # Output: True\nprint(opposite_signs(15, 20))  # Output: False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqwg1o0in.py\", line 26, in <module>\n    assert opposite_signs(0, -1) == True\nAssertionError", "passed": false}
{"task_id": 59, "requirement": "Code Standard", "completion": "def is_octagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth octagonal number.\n\n    Parameters:\n    n (int): The position in the sequence of octagonal numbers.\n\n    Returns:\n    int: The nth octagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"Input should be a positive integer\")\n    \n    return n * (3 * n - 2)\n\n# Example usage:\ntry:\n    nth_octagonal = is_octagonal(5)\n    print(f\"The 5th octagonal number is: {nth_octagonal}\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdpg212nn.py\", line 15, in <module>\n    is_octagonal(-1)\n  File \"/tmp/tmpdpg212nn.py\", line 3, in is_octagonal\n    raise ValueError(\"Input should be a positive integer\")\nValueError: Input should be a positive integer\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpdpg212nn.py\", line 17, in <module>\n    assert str(e) == 'Input must be a positive integer'\nAssertionError", "passed": false}
{"task_id": 60, "requirement": "Code Standard", "completion": "from typing import List\n\ndef max_len_sub(arr: List[int], diff: int) -> int:\n    if not isinstance(arr, list):\n        raise TypeError(\"First argument must be a list of integers.\")\n    if not isinstance(diff, int):\n        raise TypeError(\"Second argument must be an integer.\")\n    \n    if not arr:\n        return 0\n    \n    # Dictionary to store the length of subsequence ending with each element\n    subseq_length = {}\n    \n    # Initialize the dictionary with 1 for each element\n    for num in arr:\n        subseq_length[num] = 1\n    \n    # Iterate through the array to build the subsequence lengths\n    for num in arr:\n        # Check if there's a subsequence ending with num-diff\n        if num - diff in subseq_length:\n            subseq_length[num] = max(subseq_length[num], subseq_length[num - diff] + 1)\n        # Check if there's a subsequence ending with num+diff\n        if num + diff in subseq_length:\n            subseq_length[num + diff] = max(subseq_length[num + diff], subseq_length[num] + 1)\n    \n    # The maximum length of subsequence with the specified difference between adjacent elements\n    return max(subseq_length.values())\n\n# Example usage\narr = [1, 2, 3, 4, 5, 3, 2, 1]\ndiff = 1\nprint(max_len_sub(arr, diff))  # Output: 5 (subsequence: [1, 2, 3, 2, 1])\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpeb9n23e1.py\", line 28, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nAssertionError", "passed": false}

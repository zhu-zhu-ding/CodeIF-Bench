{"task_id": 11, "requirement": "Edge Case Handling", "completion": "def remove_occ(s, char):\n    \"\"\"\n    Removes the first and last occurrences of a given character from the string.\n\n    :param s: The original string.\n    :param char: The character to be removed.\n    :return: A new string with the first and last occurrences of the character removed.\n    \"\"\"\n    if len(char) != 1:\n        raise ValueError(\"The character must be a single character.\")\n    \n    # Check if the character exists in the string\n    if char not in s:\n        return s\n\n    # Find the indices of the first and last occurrences of the character\n    first_occurrence = s.index(char)\n    last_occurrence = s.rindex(char)\n\n    # Construct the new string without the first and last occurrences\n    new_string = s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]\n    \n    return new_string\n\n# Example usage\nif __name__ == \"__main__\":\n    test_string = \"hello world\"\n    char_to_remove = \"l\"\n    print(remove_occ(test_string, char_to_remove))  # Output: \"heo word\"\n\n    test_string = \"hello world\"\n    char_to_remove = \"x\"\n    print(remove_occ(test_string, char_to_remove))  # Output: \"hello world\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpg9ohggf3.py\", line 24, in <module>\n    try: remove_occ('hello', 'll')\n  File \"/tmp/tmpg9ohggf3.py\", line 3, in remove_occ\n    raise ValueError(\"The character must be a single character.\")\nValueError: The character must be a single character.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpg9ohggf3.py\", line 25, in <module>\n    except ValueError as e: assert str(e) == 'Second parameter must be a single character.'\nAssertionError", "passed": false}
{"task_id": 12, "requirement": "Edge Case Handling", "completion": "def sort_matrix(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order based on the sum of its rows.\n\n    Parameters:\n    - matrix (list of lists): The matrix to be sorted.\n\n    Returns:\n    - list of lists: The sorted matrix.\n\n    Raises:\n    - TypeError: If the input is not a list of lists or if any element in the matrix is not an integer.\n    \"\"\"\n    if not isinstance(matrix, list):\n        raise TypeError(\"Input must be a list of lists.\")\n    \n    for row in matrix:\n        if not isinstance(row, list):\n            raise TypeError(\"Each row must be a list.\")\n        \n        for elem in row:\n            if not isinstance(elem, int):\n                raise TypeError(\"All elements must be integers.\")\n\n    # Handle the case when the matrix is empty\n    if len(matrix) == 0:\n        return []\n\n    # Calculate the sum of each row and pair it with the row itself\n    summed_rows = [(sum(row), row) for row in matrix]\n    \n    # Sort the list of tuples based on the first element (the sum)\n    sorted_summed_rows = sorted(summed_rows)\n\n    # Extract the rows from the sorted list of tuples\n    sorted_matrix = [row for _, row in sorted_summed_rows]\n\n    return sorted_matrix\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_matrix = [\n        [3, 4, 5],\n        [1, 2],\n        [6, 7, 8, 9],\n        [0]\n    ]\n    print(\"Original Matrix:\")\n    for row in example_matrix:\n        print(row)\n    \n    sorted_matrix = sort_matrix(example_matrix)\n    print(\"\\nSorted Matrix:\")\n    for row in sorted_matrix:\n        print(row)\n\n    # Test with an empty matrix\n    empty_matrix = []\n    print(\"\\nEmpty Matrix Sorted:\")\n    sorted_empty_matrix = sort_matrix(empty_matrix)\n    for row in sorted_empty_matrix:\n        print(row)\n", "result": "passed", "passed": true}
{"task_id": 13, "requirement": "Edge Case Handling", "completion": "from collections import Counter\n\ndef count_common(words):\n    \"\"\"\n    This function takes a list of strings and returns a list of tuples containing the most common word(s)\n    and their count. If the input list is empty, it returns an empty list. Raises a TypeError if the input\n    is not a list of strings.\n    \n    :param words: A list of strings.\n    :return: A list of tuples, each containing a word and its count.\n    \"\"\"\n    if not isinstance(words, list):\n        raise TypeError(\"Input must be a list of strings\")\n    \n    if not all(isinstance(word, str) for word in words):\n        raise TypeError(\"All elements in the list must be strings\")\n    \n    if not words:\n        return []\n    \n    # Count the frequency of each word\n    word_counts = Counter(words)\n    \n    # Find the maximum count\n    max_count = max(word_counts.values())\n    \n    # Find all words that have the maximum count\n    most_common_words = [(word, count) for word, count in word_counts.items() if count == max_count]\n    \n    return most_common_words\n\n# Example usage:\nwords_example = ['apple', 'banana', 'apple', 'cherry', 'apple', 'banana']\nprint(count_common(words_example))  # Output: [('apple', 3), ('banana', 2)]\nempty_list = []\nprint(count_common(empty_list))     # Output: []\n\n# Test with invalid inputs\ninvalid_input = \"not a list\"\ntry:\n    print(count_common(invalid_input))\nexcept TypeError as e:\n    print(e)  # Output: Input must be a list of strings\n\ninvalid_input = [1, 2, 3]\ntry:\n    print(count_common(invalid_input))\nexcept TypeError as e:\n    print(e)  # Output: All elements in the list must be strings\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5vtwq1n4.py\", line 32, in <module>\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nAssertionError", "passed": false}
{"task_id": 14, "requirement": "Edge Case Handling", "completion": "def find_volume(base, height_triangle, length_prism):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n    \n    Parameters:\n    - base (float): The base length of the triangular face.\n    - height_triangle (float): The height of the triangular face.\n    - length_prism (float): The length of the prism.\n    \n    Returns:\n    float: The volume of the triangular prism.\n    \n    Raises:\n    ValueError: If any of the dimensions are not positive numbers.\n    \"\"\"\n    # Check if inputs are positive numbers\n    if base <= 0 or height_triangle <= 0 or length_prism <= 0:\n        raise ValueError('All dimensions must be positive numbers.')\n    \n    # Calculate the area of the triangular base\n    base_area = 0.5 * base * height_triangle\n    \n    # Calculate the volume of the triangular prism\n    volume = base_area * length_prism\n    \n    return volume\n\n# Example usage:\ntry:\n    volume = find_volume(4, 3, 10)\n    print(f\"The volume of the triangular prism is {volume} cubic units.\")\nexcept ValueError as e:\n    print(e)\n\n# Edge case with very small positive values\ntry:\n    volume = find_volume(0.00001, 0.00001, 0.00001)\n    print(f\"The volume of the triangular prism with very small dimensions is {volume} cubic units.\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8w8aeraz.py\", line 25, in <module>\n    assert find_volume(5.5, 3.2, 4.1) == 72.16\nAssertionError", "passed": false}
{"task_id": 15, "requirement": "Edge Case Handling", "completion": "import re\n\ndef split_lowerstring(input_string):\n    # Check if the input is a string\n    if not isinstance(input_string, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Use regex to find all segments split by lowercase letters\n    # The pattern looks for transitions between non-lowercase characters and lowercase characters\n    pattern = r'([A-Z0-9]*)([a-z]+)'\n    \n    # Find all matches but return only the segments containing lowercase letters\n    matches = re.findall(pattern, input_string)\n\n    # Extract and concatenate the lowercase letter segments\n    split_strings = [match[1] for match in matches]\n\n    # Return the result, ensuring an empty list if there are no matches\n    return split_strings if split_strings else []\n\n# Example usage:\nexample_string = \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\nprint(split_lowerstring(example_string))  # Expected output: ['a', 'b', 'c', ..., 'z']\n\nno_lowercase_string = \"ABCD\"\nprint(split_lowerstring(no_lowercase_string))  # Expected output: []\n", "result": "failed: File \"/tmp/tmp65rdjrpo.py\", line 24\n    try: split_lowerstring(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 16, "requirement": "Edge Case Handling", "completion": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Checks if there are sequences of lowercase letters joined with an underscore in the given text.\n\n    :param text: A string containing the text to search within.\n    :return: 'Found a match!' if a sequence is found, 'Not matched!' otherwise.\n    :raises TypeError: If the input is not a string.\n    \"\"\"\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Define the regex pattern for finding sequences of lowercase letters joined with an underscore\n    pattern = r\"([a-z]+_[a-z]+)\"\n    \n    # Use re.search to look for the pattern in the text\n    match = re.search(pattern, text)\n    \n    if match:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\nexample_text = \"This_is_an_example_text_with_lower_case_words_and_this_one_is_special\"\nprint(text_lowercase_underscore(example_text))  # Should print 'Found a match!'\nprint(text_lowercase_underscore(\"\"))            # Should print 'Not matched!'\nprint(text_lowercase_underscore(\"NO_UNDERSCORE\"))  # Should print 'Not matched!'\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjpdm57sx.py\", line 20, in <module>\n    assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')\nAssertionError", "passed": false}
{"task_id": 17, "requirement": "Edge Case Handling", "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n    \n    :param side_length: The length of one side of the square. Must be a non-negative integer.\n    :return: The perimeter of the square.\n    :raises ValueError: If the side length is negative.\n    \"\"\"\n    if not isinstance(side_length, int) or side_length < 0:\n        raise ValueError(\"Side length must be a non-negative integer.\")\n    \n    # Handle the edge case where side_length is zero\n    if side_length == 0:\n        return 0\n    \n    return 4 * side_length\n\n# Example usage:\ntry:\n    perimeter = square_perimeter(5)\n    print(\"The perimeter of the square is:\", perimeter)\nexcept ValueError as e:\n    print(e)\n\ntry:\n    perimeter = square_perimeter(-1)\n    print(\"The perimeter of the square is:\", perimeter)\nexcept ValueError as e:\n    print(e)\n\ntry:\n    perimeter = square_perimeter(0)\n    print(\"The perimeter of the square is:\", perimeter)\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 18, "requirement": "Edge Case Handling", "completion": "def remove_dirty_chars(main_string, chars_to_remove):\n    \"\"\"\n    Removes characters from main_string that are present in chars_to_remove.\n    \n    Parameters:\n    - main_string (str): The original string from which characters will be removed.\n    - chars_to_remove (str): The string containing characters to be removed from main_string.\n    \n    Returns:\n    - str: The modified string after removing specified characters.\n    \n    Raises:\n    - ValueError: If either input string contains non-alphabetic characters or if any input is not a string.\n    \"\"\"\n    if not isinstance(main_string, str) or not isinstance(chars_to_remove, str):\n        raise TypeError(\"Both inputs must be strings.\")\n    \n    if not main_string.isalpha() or not chars_to_remove.isalpha():\n        raise ValueError(\"Input strings must only contain alphabetic characters.\")\n    \n    if not chars_to_remove:  # Return the original string if chars_to_remove is an empty string\n        return main_string\n    \n    # Use a set for faster lookup\n    chars_set = set(chars_to_remove)\n    \n    # Filter out unwanted characters\n    filtered_string = ''.join(char for char in main_string if char not in chars_set)\n    \n    return filtered_string\n\n# Example usage:\ntry:\n    print(remove_dirty_chars(\"HelloWorld\", \"Helo\"))  # Should print \"WorlD\"\n    print(remove_dirty_chars(\"HelloWorld\", \"\"))      # Should print \"HelloWorld\"\nexcept ValueError as e:\n    print(e)\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp46xcs3cf.py\", line 33, in <module>\n    assert remove_dirty_chars('example', '') == 'example', 'Function should return the original string if the second string is empty.'\n  File \"/tmp/tmp46xcs3cf.py\", line 5, in remove_dirty_chars\n    raise ValueError(\"Input strings must only contain alphabetic characters.\")\nValueError: Input strings must only contain alphabetic characters.", "passed": false}
{"task_id": 19, "requirement": "Edge Case Handling", "completion": "def test_duplicate(arr):\n    \"\"\"\n    Check if the given list contains any duplicate elements.\n    \n    :param arr: List of integers\n    :return: True if there are duplicates, False otherwise\n    :raises TypeError: If the input is not a list\n    :raises ValueError: If the list is not a list of integers\n    \"\"\"\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    for item in arr:\n        if not isinstance(item, int):\n            raise ValueError(\"Input must be a list of integers\")\n    \n    seen = set()\n    for number in arr:\n        if number in seen:\n            return True\n        seen.add(number)\n    return False\n\n# Example usage:\ntry:\n    print(test_duplicate([]))  # Output: False (empty list)\n    print(test_duplicate([1]))  # Output: False (single element)\n    print(test_duplicate([1, 2, 3, 4, 5, 2]))  # Output: True (contains duplicates)\n    print(test_duplicate([10, 22, 33, 44, 55]))  # Output: False (no duplicates)\n    print(test_duplicate([1, 'a', 3]))  # Raises ValueError: Input must be a list of integers\nexcept TypeError as e:\n    print(e)\nexcept ValueError as e:\n    print(e)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpltr_wok9.py\", line 36, in <module>\n    test_duplicate(None)\n  File \"/tmp/tmpltr_wok9.py\", line 3, in test_duplicate\n    raise TypeError(\"Input must be a list\")\nTypeError: Input must be a list\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpltr_wok9.py\", line 39, in <module>\n    assert str(e) == 'Input must be a list of integers'\nAssertionError", "passed": false}
{"task_id": 20, "requirement": "Edge Case Handling", "completion": "def is_woodall(num):\n    \"\"\"\n    Check if the given number is a Woodall number.\n    \n    A Woodall number is of the form n * 2^n - 1 for some positive integer n.\n    \n    :param num: Integer to check\n    :return: True if num is a Woodall number, False otherwise\n    :raises TypeError: If the input is not an integer\n    \"\"\"\n    if not isinstance(num, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    # Zero cannot be a Woodall number\n    if num == 0:\n        return False\n    \n    # Iterate over possible values of n\n    n = 1\n    while True:\n        woodall_num = n * 2**n - 1\n        if woodall_num > num:\n            break\n        if woodall_num == num:\n            return True\n        n += 1\n    return False\n\n# Example usage:\nprint(is_woodall(7))   # True, because 7 is 1*2^1-1\nprint(is_woodall(23))  # True, because 23 is 2*2^2-1\nprint(is_woodall(63))  # True, because 63 is 3*2^3-1\nprint(is_woodall(10))  # False\nprint(is_woodall(0))   # False\nprint(is_woodall(-5))  # False\nprint(is_woodall(4294967295))  # True, because 4294967295 is a large Woodall number\n", "result": "passed", "passed": true}
{"task_id": 21, "requirement": "Edge Case Handling", "completion": "def multiples_of_num(m, n):\n    \"\"\"\n    Generates the first m multiples of the number n.\n\n    Parameters:\n    m (int): The number of multiples to generate.\n    n (int): The base number to find multiples of.\n\n    Returns:\n    list: A list containing the first m multiples of n.\n\n    Raises:\n    ValueError: If either m or n is negative.\n    \"\"\"\n    if m < 0 or n < 0:\n        raise ValueError(\"Both m and n must be non-negative.\")\n    \n    return [i * n for i in range(1, m + 1)] if m > 0 else []\n\n# Example usage:\ntry:\n    m = 5\n    n = 3\n    print(multiples_of_num(m, n))  # Output: [3, 6, 9, 12, 15]\n\n    m = 0\n    n = 3\n    print(multiples_of_num(m, n))  # Output: []\n\n    m = -1\n    n = 3\n    print(multiples_of_num(m, n))  # This will raise ValueError\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 22, "requirement": "Edge Case Handling", "completion": "def find_first_duplicate(nums):\n    if not isinstance(nums, list):\n        raise TypeError(\"Input must be a list\")\n    \n    if len(nums) == 0:\n        return -1\n    \n    seen = set()\n    for num in nums:\n        if not isinstance(num, int):\n            raise TypeError(\"All elements in the list must be integers\")\n        \n        if num in seen:\n            return num\n        seen.add(num)\n    \n    return None\n\n# Example usage:\ntry:\n    print(find_first_duplicate([2, 5, 1, 2, 3, 5, 1, 2, 4]))  # Output will be 2\n    print(find_first_duplicate([]))                           # Output will be -1\n    print(find_first_duplicate(['a', 5, 1]))                  # This should raise TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_o3w2g9o.py\", line 22, in <module>\n    assert find_first_duplicate([1, 2, 3, 4])==-1\nAssertionError", "passed": false}
{"task_id": 23, "requirement": "Edge Case Handling", "completion": "def maximum_sum(list_of_lists):\n    \"\"\"\n    Finds the maximum sum of elements among all sublists in a given list of lists.\n    \n    Parameters:\n    - list_of_lists (list of lists): A list containing multiple sublists of integers.\n    \n    Returns:\n    - int: The maximum sum of elements found in any of the sublists. Returns 0 if the input list is empty or if all sublists are empty.\n    \n    Raises:\n    - TypeError: If the input is not a list of lists or if any sublist contains non-integer elements.\n    \"\"\"\n    # Check if the input is a list and each element is also a list\n    if not isinstance(list_of_lists, list) or not all(isinstance(sublist, list) for sublist in list_of_lists):\n        raise TypeError(\"Input must be a list of lists.\")\n    \n    # Check if the input list is empty or if all sublists are empty\n    if len(list_of_lists) == 0 or all(len(sublist) == 0 for sublist in list_of_lists):\n        return 0\n    \n    max_sum = float('-inf')  # Initialize with negative infinity to handle negative numbers as well\n    \n    for sublist in list_of_lists:\n        # Check if the sublist contains only integers\n        if not all(isinstance(element, int) for element in sublist):\n            raise TypeError(\"All elements in each sublist must be integers.\")\n        \n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            \n    return max_sum\n\n# Example usage:\nexample_list_of_lists = [[1, 2, 3], [4, 5, 6], [-7, -8, 9], [0]]\nprint(maximum_sum(example_list_of_lists))  # Output should be 15 (from the sublist [4, 5, 6])\n\nempty_list_of_lists = []\nprint(maximum_sum(empty_list_of_lists))  # Output should be 0\n\nall_empty_sublists = [[]]\nprint(maximum_sum(all_empty_sublists))  # Output should be 0\n\ninvalid_input = [1, [2, 3]]  # Should raise TypeError\ntry:\n    print(maximum_sum(invalid_input))\nexcept TypeError as e:\n    print(e)\n\ninvalid_elements = [[1, 'two', 3]]  # Should raise TypeError\ntry:\n    print(maximum_sum(invalid_elements))\nexcept TypeError as e:\n    print(e)\n", "result": "failed: File \"/tmp/tmpgi6nof_x.py\", line 38\n    try: maximum_sum([[1, 2], [3, 'a']]); assert False, 'Expected TypeError' except TypeError: pass\n                                                                             ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 24, "requirement": "Edge Case Handling", "completion": "def binary_to_decimal(binary_str):\n    \"\"\"\n    Convert a binary number (as a string) to its decimal equivalent.\n    \n    :param binary_str: A string representing a binary number.\n    :return: The decimal equivalent of the binary number.\n    \"\"\"\n    if not binary_str:  # Handle the edge case of an empty string\n        return 0\n    \n    decimal_value = 0\n    # Reverse iterate over the binary string\n    for index, digit in enumerate(reversed(binary_str)):\n        if digit not in ('0', '1'):\n            raise ValueError(\"Invalid binary number\")\n        # Calculate the decimal value\n        decimal_value += int(digit) * (2 ** index)\n    return decimal_value\n\n# Example usage:\nprint(binary_to_decimal('1011'))  # Output should be 11\nprint(binary_to_decimal(''))      # Output should be 0\nprint(binary_to_decimal('1021'))  # Should raise ValueError\n", "result": "failed: File \"/tmp/tmp404cv65s.py\", line 19\n    try: binary_to_decimal('102'); assert False, 'Expected ValueError' except ValueError as e: assert str(e) == 'Invalid binary number'\n                                                                       ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 25, "requirement": "Edge Case Handling", "completion": "from collections import Counter\n\ndef find_product(arr):\n    # Check if the input is a list and contains only integers\n    if not isinstance(arr, list) or not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"Input must be a list of integers\")\n\n    # Handle the case where the input list is empty\n    if len(arr) == 0:\n        return 1\n\n    # Count the frequency of each element in the array\n    freq = Counter(arr)\n\n    # Calculate the product of non-repeated elements\n    product = 1\n    for element, count in freq.items():\n        if count == 1:\n            product *= element\n\n    return product\n\n# Example usage:\ntry:\n    print(find_product([2, 3, 4, 5, 6, 3, 4]))  # Output should be 2 * 5 * 6 = 60\n    print(find_product([]))  # Output should be 1\n    print(find_product([1, 1, 1, 2, 2]))  # Output should be 1 (since 1 and 2 are repeated)\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmzs3e3ck.py\", line 24, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "requirement": "Edge Case Handling", "completion": "def check_k_elements(tuples_list, k):\n    \"\"\"\n    Checks if all tuples in the list contain exactly k elements.\n\n    :param tuples_list: List of tuples to be checked.\n    :param k: An integer specifying the exact length each tuple should have.\n    :return: True if all tuples have exactly k elements, False otherwise.\n    Raises TypeError if input is not a list of tuples or if k is not an integer.\n    \"\"\"\n    # Input validation\n    if not isinstance(tuples_list, list) or not all(isinstance(t, tuple) for t in tuples_list):\n        raise TypeError(\"tuples_list must be a list of tuples.\")\n    if not isinstance(k, int):\n        raise TypeError(\"k must be an integer.\")\n\n    # Check each tuple\n    for tup in tuples_list:\n        if len(tup) != k:\n            return False\n\n    return True\n\n# Example usage:\ntry:\n    tuples_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n    print(check_k_elements(tuples_list, 3))  # Output: True\n\n    tuples_list_with_zero_element = [(1,), (2,), (3,)]\n    print(check_k_elements(tuples_list_with_zero_element, 1))  # Output: True\n\n    tuples_list_empty = []\n    print(check_k_elements(tuples_list_empty, 3))  # Output: True (All tuples meet the criteria vacuously)\n\n    tuples_list_mixed_lengths = [(1, 2), (3, 4, 5), (6,)]\n    print(check_k_elements(tuples_list_mixed_lengths, 2))  # Output: False\n\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpklmozyd1.py\", line 24, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "requirement": "Edge Case Handling", "completion": "import re\n\ndef remove_digits(input_list):\n    \"\"\"\n    Removes all digits from each string in the provided list of strings.\n    \n    :param input_list: List of strings from which digits are to be removed\n    :return: A new list of strings with all digits removed\n    :raises TypeError: If the input is not a list or any element in the list is not a string\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(input_list, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Check if every element in the list is a string\n    if not all(isinstance(item, str) for item in input_list):\n        raise TypeError(\"All elements in the list must be strings.\")\n    \n    # Remove digits from each string using regex\n    return [re.sub(r'\\d', '', s) for s in input_list]\n\n# Example usage:\ntry:\n    example_list = [\"abc123\", \"456def\", \"7890\", \"no_digits_here\"]\n    cleaned_list = remove_digits(example_list)\n    print(cleaned_list)  # Output: ['abc', 'def', '', 'no_digits_here']\n    \n    # Test with an empty list\n    empty_list = []\n    cleaned_empty = remove_digits(empty_list)\n    print(cleaned_empty)  # Output: []\n    \n    # Test with a string without digits\n    normal_string = [\"just_letters\"]\n    cleaned_normal = remove_digits(normal_string)\n    print(cleaned_normal)  # Output: ['just_letters']\n    \n    # Test with invalid input types\n    invalid_input = \"not_a_list\"\n    remove_digits(invalid_input)  # Should raise TypeError\n    \nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwthn4wcu.py\", line 29, in <module>\n    assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\nNameError: name 'remove' is not defined", "passed": false}
{"task_id": 28, "requirement": "Edge Case Handling", "completion": "def binomial_coeff(n, k):\n    \"\"\"\n    Calculate the binomial coefficient (n choose k).\n\n    Parameters:\n    n (int): The total number of items.\n    k (int): The number of items to choose.\n\n    Returns:\n    int: The binomial coefficient C(n, k).\n\n    Raises:\n    ValueError: If n or k are negative, or if k is greater than n.\n    \"\"\"\n    if n < 0 or k < 0:\n        raise ValueError(\"Inputs must be non-negative.\")\n    if k > n:\n        raise ValueError(\"k must not be greater than n.\")\n    \n    # Edge cases\n    if k == 0 or n == k:\n        return 1\n    \n    # Optimization to reduce the number of multiplications\n    if k > n - k:\n        k = n - k\n\n    res = 1\n    for i in range(k):\n        res *= (n - i)\n        res //= (i + 1)\n    return res\n\n# Example usage:\nprint(binomial_coeff(5, 2))  # Output: 10\nprint(binomial_coeff(10, 3)) # Output: 120\nprint(binomial_coeff(5, 0))  # Output: 1\nprint(binomial_coeff(5, 5))  # Output: 1\ntry:\n    print(binomial_coeff(-1, 2))\nexcept ValueError as e:\n    print(e)  # Output: Inputs must be non-negative.\ntry:\n    print(binomial_coeff(5, 6))\nexcept ValueError as e:\n    print(e)  # Output: k must not be greater than n.\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkgqceg3v.py\", line 34, in <module>\n    try: binomial_coeff(-1, 2)\n  File \"/tmp/tmpkgqceg3v.py\", line 3, in binomial_coeff\n    raise ValueError(\"Inputs must be non-negative.\")\nValueError: Inputs must be non-negative.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpkgqceg3v.py\", line 35, in <module>\n    except ValueError as e: assert str(e) == 'Inputs must be non-negative and k must not be greater than n'\nAssertionError", "passed": false}
{"task_id": 29, "requirement": "Edge Case Handling", "completion": "def get_odd_occurrence(arr):\n    # Check if input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if the list is empty\n    if len(arr) == 0:\n        return None\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"List must contain only integers\")\n    \n    # Dictionary to store the count of each element\n    count_dict = {}\n    \n    # Count the occurrences of each element\n    for element in arr:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n    \n    # Find and return the element with an odd occurrence\n    for element, count in count_dict.items():\n        if count % 2 != 0:\n            return element\n    \n    # If no element occurs an odd number of times, return None\n    return None\n\n# Example usage:\ntry:\n    arr = [1, 2, 3, 2, 3, 1, 3]\n    print(get_odd_occurrence(arr))  # Output should be 3\n    print(get_odd_occurrence([]))   # Output should be None\n    print(get_odd_occurrence([1, 2, 2]))  # Output should be 1\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp67ludput.py\", line 33, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "requirement": "Edge Case Handling", "completion": "from collections import Counter\n\ndef count_substring_with_equal_ends_optimized(s):\n    \"\"\"\n    Counts all substrings starting and ending with the same character using frequency counting.\n    \n    :param s: Input string\n    :return: Number of substrings starting and ending with the same character\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    \n    if s == \"\":\n        return 0\n    \n    char_count = Counter(s)\n    count = sum((freq * (freq + 1)) // 2 for freq in char_count.values())\n    return count\n\n# Example usage:\nprint(count_substring_with_equal_ends_optimized(\"\"))  # Output: 0\nprint(count_substring_with_equal_ends_optimized(\"abcab\"))  # Output depends on the input string\n", "result": "failed: File \"/tmp/tmpnm55yfpf.py\", line 17\n    try: count_substring_with_equal_ends(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                                  ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 31, "requirement": "Edge Case Handling", "completion": "import heapq\nfrom collections import defaultdict\n\ndef func(lists, k):\n    # Check if all input lists are empty\n    if all(not lst for lst in lists):\n        return []\n\n    # Dictionary to count occurrences of each integer\n    count = defaultdict(int)\n\n    # Count the occurrence of each integer in the lists\n    for lst in lists:\n        for num in set(lst):  # Using set to ensure distinct elements\n            count[num] += 1\n    \n    # Min-heap to keep track of top k elements based on their frequencies\n    heap = []\n    \n    # Push elements into the heap if its size is less than k or if the current element's frequency is greater than the smallest frequency in the heap\n    for num, freq in count.items():\n        if len(heap) < k:\n            heapq.heappush(heap, (freq, num))\n        elif freq > heap[0][0]:\n            # Replace the root of the heap if the current element's frequency is higher\n            heapq.heapreplace(heap, (freq, num))\n    \n    # Raise ValueError if k is greater than the number of distinct integers\n    if k > len(count):\n        raise ValueError('k cannot be greater than the number of distinct integers')\n    \n    # Extract the top k elements from the heap\n    result = [num for _, num in heap]\n    \n    return result\n\n# Example usage:\nlists = [\n    [1, 4, 5, 8],\n    [4, 5, 6, 7],\n    [1, 3, 4, 6],\n    [2, 4, 6, 8]\n]\n\nk = 2\nprint(func(lists, k))  # Output should be the top 2 most frequent integers\n\n# Test case with all empty lists\nempty_lists = [[]] * 5\nprint(func(empty_lists, 2))  # Should return an empty list\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvr42hubx.py\", line 40, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "requirement": "Edge Case Handling", "completion": "def max_prime_factors(n):\n    # Check if the input is a positive integer\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    max_prime = -1\n    \n    # Handle the factor 2 separately\n    while n % 2 == 0:\n        max_prime = 2\n        n //= 2\n    \n    # Check for odd factors starting from 3\n    factor = 3\n    while factor * factor <= n:\n        while n % factor == 0:\n            max_prime = factor\n            n //= factor\n        factor += 2\n    \n    # If n is a prime number greater than 2\n    if n > 2:\n        max_prime = n\n    \n    return max_prime\n\n# Example usage:\nprint(max_prime_factors(2))     # Output: 2\nprint(max_prime_factors(13195)) # Output: 29\nprint(max_prime_factors(2048))  # Output: 2\n", "result": "passed", "passed": true}
{"task_id": 33, "requirement": "Edge Case Handling", "completion": "def decimal_to_binary(decimal_number):\n    \"\"\"\n    Convert a decimal number to its binary representation.\n    \n    Parameters:\n    - decimal_number (int): The decimal number to be converted.\n    \n    Returns:\n    - str: The binary representation of the decimal number.\n    \n    Raises:\n    - ValueError: If the input is not a non-negative integer.\n    \"\"\"\n    if not isinstance(decimal_number, int) or decimal_number < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    if decimal_number == 0:\n        return \"0\"  # Handle the edge case of zero\n    \n    binary_digits = []\n    while decimal_number > 0:\n        binary_digits.append(str(decimal_number % 2))\n        decimal_number //= 2\n    \n    # Reverse the list and join to form the binary string\n    return ''.join(reversed(binary_digits))\n\n# Example usage:\nprint(decimal_to_binary(10))  # Output: \"1010\"\nprint(decimal_to_binary(255)) # Output: \"11111111\"\nprint(decimal_to_binary(0))   # Output: \"0\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgat6nnrh.py\", line 16, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "requirement": "Edge Case Handling", "completion": "def find_missing(arr):\n    \"\"\"\n    Finds the missing number in a sorted array of integers in arithmetic progression.\n    \n    Parameters:\n    arr (list): A sorted list of integers in arithmetic progression with one missing number.\n    \n    Returns:\n    int: The missing number in the array.\n    \n    Raises:\n    ValueError: If the input list is not sorted.\n    \"\"\"\n    if arr != sorted(arr):\n        raise ValueError('Input list must be sorted.')\n    \n    if not arr:\n        return None\n    \n    n = len(arr)\n    total_diff = arr[-1] - arr[0]\n    expected_diff = total_diff // n\n    \n    # Check if the first element is the start of the sequence or if it's already the second element in the sequence\n    if arr[0] == 0:\n        # If the first element is 0, it's likely the start of the sequence\n        for i in range(1, n):\n            if arr[i] != arr[i-1] + expected_diff:\n                return arr[i-1] + expected_diff\n    else:\n        # Calculate the expected first element of the sequence\n        expected_first_element = arr[0] - expected_diff\n        if expected_first_element >= 0:\n            return expected_first_element  # The missing number is the smallest number in the sequence\n    \n    # Further checks within the array\n    for i in range(1, n):\n        if arr[i] != arr[i-1] + expected_diff:\n            return arr[i-1] + expected_diff\n    \n    # If no missing number is found within the array, check the boundaries again\n    if arr[-1] != arr[0] + (n+1) * expected_diff:\n        return arr[-1] + expected_diff\n    \n    return None\n\n# Example usage:\narr_example = [1, 2, 3, 5, 6, 7, 8]\nprint(find_missing(arr_example))  # Output should be 4\narr_example_2 = [2, 3, 4, 5, 6, 7, 8]\nprint(find_missing(arr_example_2))  # Output should be 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp39pkq318.py\", line 33, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "requirement": "Edge Case Handling", "completion": "def find_rect_num(n):\n    \"\"\"\n    Calculate the n-th rectangular number.\n    \n    :param n: An integer representing the position in the sequence of rectangular numbers.\n    :return: The n-th rectangular number.\n    \"\"\"\n    # Input validation\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    # Calculate the n-th rectangular number\n    return n * (n + 1)\n\n# Example usage:\nif __name__ == \"__main__\":\n    try:\n        n = 5  # Example input\n        print(f\"The {n}-th rectangular number is: {find_rect_num(n)}\")\n        \n        n = 1  # Edge case\n        print(f\"The {n}-th rectangular number is: {find_rect_num(n)}\")\n        \n        n = -3  # Invalid input\n        print(find_rect_num(n))  # This should raise an error\n    except ValueError as e:\n        print(e)\n", "result": "passed", "passed": true}
{"task_id": 37, "requirement": "Edge Case Handling", "completion": "def sort_mixed_list(mixed_list):\n    # Check if the input is a list\n    if not isinstance(mixed_list, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Initialize lists for integers and strings\n    integers = []\n    strings = []\n\n    # Separate integers and strings\n    for item in mixed_list:\n        if isinstance(item, int):\n            integers.append(item)\n        elif isinstance(item, str):\n            strings.append(item)\n        else:\n            raise TypeError(\"List must contain only integers and strings.\")\n    \n    # Sort each list\n    integers.sort()\n    strings.sort()\n    \n    # Concatenate the sorted lists\n    sorted_list = integers + strings\n    \n    return sorted_list\n\n# Example usage:\ntry:\n    mixed_list = [5, \"banana\", 3, \"apple\", 7, \"cherry\"]\n    sorted_list = sort_mixed_list(mixed_list)\n    print(sorted_list)  # Output: [3, 5, 7, 'apple', 'banana', 'cherry']\n\n    empty_list = []\n    sorted_empty_list = sort_mixed_list(empty_list)\n    print(sorted_empty_list)  # Output: []\nexcept TypeError as e:\n    print(e)\n\nmixed_list_with_invalid_type = [5, \"banana\", 3, \"apple\", 7, \"cherry\", 2.5]\ntry:\n    sorted_list_with_invalid_type = sort_mixed_list(mixed_list_with_invalid_type)\nexcept TypeError as e:\n    print(e)  # Output: List must contain only integers and strings.\n", "result": "passed", "passed": true}
{"task_id": 38, "requirement": "Edge Case Handling", "completion": "def div_even_odd(numbers):\n    \"\"\"\n    Divides the first even number by the first odd number in the given list.\n    \n    :param numbers: List of integers.\n    :return: The division result of the first even number by the first odd number.\n             Returns 0 if the first even number is 0.\n             Raises ValueError if the list does not contain at least one even and one odd number.\n    \"\"\"\n    first_even = None\n    first_odd = None\n    \n    for num in numbers:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        elif first_odd is None and num % 2 != 0:\n            first_odd = num\n        \n        # Once both first even and first odd are found, break the loop\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Check if both first even and first odd were found\n    if first_even is None or first_odd is None:\n        raise ValueError('List must contain at least one even and one odd number.')\n    \n    # Special case: if the first even number is zero, return 0\n    if first_even == 0:\n        return 0\n    \n    # Perform the division\n    try:\n        result = first_even / first_odd\n    except ZeroDivisionError:\n        # Handle the case where the first odd number is zero\n        return None\n    \n    return result\n\n# Example usage:\nprint(div_even_odd([5, 3, 2, 8]))  # Output should be 2.0 (2/1)\nprint(div_even_odd([0, 3, 4]))     # Output should be 0 (0/3)\nprint(div_even_odd([2, 4, 6]))     # Raises ValueError\nprint(div_even_odd([1, 3, 5]))     # Raises ValueError\n", "result": "failed: File \"/tmp/tmpad9hwga9.py\", line 34\n    try: div_even_odd([2, 4, 6]); assert False; except ValueError as e: assert str(e) == 'List must contain at least one even and one odd number.'\n                                                ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 39, "requirement": "Edge Case Handling", "completion": "from collections import Counter\n\ndef rearrange_string(s):\n    # Validate input\n    if not isinstance(s, str) or not s.islower():\n        raise ValueError(\"Input must be a non-empty string consisting only of lowercase letters.\")\n    \n    # Count the frequency of each character\n    char_count = Counter(s)\n    \n    # Edge case: if all characters are the same, return an empty string\n    if len(char_count) == 1:\n        return \"\"\n    \n    # Sort characters by their frequency (descending order)\n    sorted_chars = sorted(char_count.items(), key=lambda x: -x[1])\n    \n    result = []\n    used_char = None\n    \n    while sorted_chars:\n        for i, (char, count) in enumerate(sorted_chars):\n            if char != used_char:\n                # Add the character to the result\n                result.append(char)\n                used_char = char\n                # Decrease the count\n                sorted_chars[i] = (char, count - 1)\n                \n                # Remove the character from the list if its count becomes zero\n                if count - 1 == 0:\n                    del sorted_chars[i]\n                break\n        else:\n            # If we couldn't find a suitable character to add, return an empty string\n            return \"\"\n    \n    # Join the result list into a string\n    return ''.join(result)\n\n# Example usage:\nprint(rearrange_string(\"aab\"))   # Output: \"aba\" (or any valid permutation)\nprint(rearrange_string(\"aaab\"))  # Output: \"\"\nprint(rearrange_string(\"abc\"))   # Output: \"abc\" (or any valid permutation)\nprint(rearrange_string(\"a\"))     # Output: \"a\"\nprint(rearrange_string(\"aaa\"))   # Output: \"\"\nprint(rearrange_string(\"aA\"))    # Raises ValueError\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5fj_2bx1.py\", line 38, in <module>\n    print(rearrange_string(\"aA\"))    # Raises ValueError\n  File \"/tmp/tmp5fj_2bx1.py\", line 5, in rearrange_string\n    raise ValueError(\"Input must be a non-empty string consisting only of lowercase letters.\")\nValueError: Input must be a non-empty string consisting only of lowercase letters.", "passed": false}
{"task_id": 40, "requirement": "Edge Case Handling", "completion": "from collections import Counter\nfrom itertools import chain\n\ndef freq_element(list_of_lists):\n    # Check if the input is a list of lists\n    if not isinstance(list_of_lists, list) or not all(isinstance(sublist, list) for sublist in list_of_lists):\n        raise TypeError(\"Input must be a list of lists.\")\n    \n    # Check if the list of lists is empty\n    if len(list_of_lists) == 0 or all(len(sublist) == 0 for sublist in list_of_lists):\n        return {}\n    \n    # Flatten the list of lists into a single list\n    flattened_list = list(chain.from_iterable(list_of_lists))\n    \n    # Count the frequency of each element in the flattened list\n    freq_counter = Counter(flattened_list)\n    \n    return dict(freq_counter)\n\n# Example usage:\nlist_of_lists = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [1, 2, 3, 4],\n    [7, 8, 9]\n]\n\nprint(freq_element(list_of_lists))  # Output: {1: 2, 2: 2, 3: 2, 4: 2, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1}\n\n# Test with an empty input\nprint(freq_element([]))  # Output: {}\n\n# Test with a non-list input\ntry:\n    print(freq_element([1, 2, 3]))  # Should raise TypeError\nexcept TypeError as e:\n    print(e)  # Output: Input must be a list of lists.\n", "result": "failed: File \"/tmp/tmpsqyy1fbf.py\", line 33\n    try: freq_element('not a list'); assert False; except TypeError: assert True\n                                                   ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 41, "requirement": "Edge Case Handling", "completion": "def filter_evennumbers(numbers):\n    # Check if the input is a list\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in numbers):\n        raise TypeError(\"All elements in the list must be integers.\")\n    \n    # Use filter() with a lambda function to filter even numbers\n    even_numbers = filter(lambda x: x % 2 == 0, numbers)\n    \n    # Convert the filter object to a list before returning\n    return list(even_numbers)\n\n# Examples\ntry:\n    print(filter_evennumbers([1, 2, 3, 4, 5, 6]))  # Output: [2, 4, 6]\n    print(filter_evennumbers([]))                   # Output: []\n    print(filter_evennumbers([2, 4, 6]))           # Output: [2, 4, 6]\n    print(filter_evennumbers([1, \"two\", 3]))       # Raises TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 42, "requirement": "Edge Case Handling", "completion": "def find_sum(arr):\n    \"\"\"\n    Finds the sum of all repeated elements in a given list.\n    \n    Parameters:\n    arr (list): A list of integers.\n    \n    Returns:\n    int: The sum of all repeated elements in the list.\n    \n    Raises:\n    TypeError: If the input is not a list.\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Dictionary to store the count of each element\n    element_count = {}\n    \n    # Iterate through the list to populate the dictionary with counts\n    for element in arr:\n        if element in element_count:\n            element_count[element] += 1\n        else:\n            element_count[element] = 1\n    \n    # Calculate the sum of elements that appear more than once\n    repeated_sum = sum(element * (count - 1) for element, count in element_count.items() if count > 1)\n    \n    return repeated_sum\n\n# Example usage:\ntry:\n    print(find_sum([1, 2, 3, 2, 3, 4, 5, 3]))  # Output should be 8\n    print(find_sum([]))                         # Output should be 0\n    print(find_sum([1, 1, 1]))                  # Output should be 2 (because 1 appears twice extra)\n    print(find_sum(\"not a list\"))               # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwe6ufrtf.py\", line 24, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Edge Case Handling", "completion": "import re\n\ndef text_match(text):\n    # Check if the input is a string\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Define the regex pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    \n    # Find all occurrences of the pattern in the provided text\n    matches = re.findall(pattern, text)\n    \n    # If there are no matches, return 'Not matched!'\n    if not matches:\n        return 'Not matched!'\n    \n    # Otherwise, return the list of matches\n    return matches\n\n# Example usage:\ntry:\n    sample_text = \"this_is_a_sample_text with_multiple_matches_like_this_one_and_another_example\"\n    print(text_match(sample_text))  # Should print the list of matches\n    \n    empty_text = \"\"\n    print(text_match(empty_text))  # Should return 'Not matched!'\n    \n    non_string_input = 12345\n    print(text_match(non_string_input))  # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpn90mjwzr.py\", line 25, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 44, "requirement": "Edge Case Handling", "completion": "import re\n\ndef text_match_string(text, pattern):\n    \"\"\"\n    Checks if the given pattern (word) is at the beginning of the text.\n    \n    :param text: String to be searched\n    :param pattern: Word to match at the beginning of the text\n    :raises TypeError: If either text or pattern is not a string\n    :return: True if the pattern is found at the beginning of the text, False otherwise\n    \"\"\"\n    # Raise TypeError if input types are not strings\n    if not isinstance(text, str) or not isinstance(pattern, str):\n        raise TypeError(\"Both text and pattern must be strings\")\n    \n    # Compile a regex pattern to match the word at the start of the string\n    regex = re.compile(r'^' + re.escape(pattern))\n    \n    # Search for the pattern in the text\n    match = regex.search(text)\n    \n    # If match is found, return True; otherwise, return False\n    return bool(match)\n\n# Example usage:\nprint(text_match_string(\"Hello world\", \"Hello\"))  # Should return True\nprint(text_match_string(\"world Hello\", \"Hello\"))  # Should return False\nprint(text_match_string(\"\", \"Hello\"))             # Should return False\nprint(text_match_string(\"  \", \"Hello\"))           # Should return False\ntry:\n    print(text_match_string(123, \"Hello\"))        # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "failed: File \"/tmp/tmpfmoovdq0.py\", line 24\n    try: text_match_string(123); assert False, 'TypeError not raised' except TypeError: pass\n                                                                      ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 46, "requirement": "Edge Case Handling", "completion": "def test_distinct(numbers):\n    \"\"\"\n    Determine if all numbers in the list are distinct.\n\n    Args:\n    - numbers: A list of integers.\n\n    Returns:\n    - True if all numbers are distinct, False otherwise.\n\n    Raises:\n    - TypeError if the input is not a list or if the list contains non-integer elements.\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    if not all(isinstance(x, int) for x in numbers):\n        raise TypeError(\"All elements in the list must be integers.\")\n\n    return len(numbers) == len(set(numbers))\n\n# Example usage:\ntry:\n    print(test_distinct([1, 2, 3, 4]))  # Should print True\n    print(test_distinct([1, 2, 2, 3]))  # Should print False\n    print(test_distinct([]))            # Should print True (empty list)\n    print(test_distinct([5]))           # Should print True (single element)\n    print(test_distinct([1, 2, \"3\"]))   # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 47, "requirement": "Edge Case Handling", "completion": "def last_non_zero_digit(n):\n    if n < 2:\n        return 1  # 0! and 1! are both 1, so their last non-zero digit is 1\n    \n    # Remove factors of 10 and track last non-zero digits\n    last_digit = 1\n    for i in range(2, n + 1):\n        while i % 5 == 0:\n            i //= 5\n        last_digit = (last_digit * (i % 10)) % 10\n    \n    # Adjust for powers of 2 left over\n    power_of_two = 0\n    for i in range(2, n + 1):\n        while i % 2 == 0:\n            i //= 2\n            power_of_two += 1\n    \n    # Adjust based on the number of factors of 5 and 2\n    if power_of_two > n // 5 + n // 25 + n // 125:\n        last_digit *= 6\n    elif power_of_two > n // 5 + n // 25:\n        last_digit *= 4\n    else:\n        last_digit *= 2\n    \n    return last_digit % 10\n\ndef compute_last_digit(a, b):\n    if a > b:\n        raise ValueError('a should not be greater than b')\n    \n    if a == b:\n        return 1  # Since factorial(a) / factorial(a) = 1\n    \n    last_digit_a = last_non_zero_digit(a)\n    last_digit_b = last_non_zero_digit(b)\n    \n    # Calculate the modular inverse of last_digit_b\n    mod_inverse_b = pow(last_digit_b, -1, 10)\n    \n    # Calculate the last digit of the division\n    result = (last_digit_a * mod_inverse_b) % 10\n    \n    return result\n\n# Example usages:\nprint(compute_last_digit(3, 5))  # Expected output depends on the specific implementation details\nprint(compute_last_digit(5, 5))  # Should print 1\ntry:\n    print(compute_last_digit(7, 3))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_13tyirj.py\", line 37, in <module>\n    print(compute_last_digit(3, 5))  # Expected output depends on the specific implementation details\n  File \"/tmp/tmp_13tyirj.py\", line 32, in compute_last_digit\n    mod_inverse_b = pow(last_digit_b, -1, 10)\nValueError: base is not invertible for the given modulus", "passed": false}
{"task_id": 48, "requirement": "Edge Case Handling", "completion": "def odd_bit_set_number(n):\n    \"\"\"\n    Set all odd bits of the given integer n to 1.\n    \n    Args:\n    - n (int): The input integer whose odd bits are to be set.\n    \n    Returns:\n    - int: The modified integer with all odd bits set to 1.\n    \n    Raises:\n    - TypeError: If the input is not an integer.\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n\n    # Handle the edge case where n is 0\n    if n == 0:\n        return 1\n\n    # Determine the number of bits in the binary representation of n\n    num_bits = n.bit_length()\n\n    # Create a mask where all odd bits are set to 1\n    mask = 0\n    for i in range(num_bits):\n        if i % 2 == 1:\n            mask |= (1 << i)\n\n    # Set the odd bits of n using the mask\n    result = n | mask\n\n    return result\n\n# Example usage:\nprint(bin(odd_bit_set_number(10)))  # Example input: 10 (binary: 1010)\nprint(bin(odd_bit_set_number(0)))   # Edge case: Should return 1 (binary: 1)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp89zejshy.py\", line 20, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "requirement": "Edge Case Handling", "completion": "def specified_element(two_dim_list, index):\n    \"\"\"\n    Extracts the element at the specified index from each sub-list of a two-dimensional list,\n    only including sub-lists where the index is valid.\n    \n    :param two_dim_list: A two-dimensional list (list of lists)\n    :param index: The index of the element to extract from each sub-list\n    :return: A list containing the extracted elements\n    \"\"\"\n    # Initialize an empty list to store the extracted elements\n    extracted_elements = []\n    \n    # Iterate through each sub-list in the two-dimensional list\n    for sublist in two_dim_list:\n        # Check if the index is within the bounds of the current sub-list\n        if 0 <= index < len(sublist):\n            # Append the element at the specified index to the extracted_elements list\n            extracted_elements.append(sublist[index])\n        else:\n            # Raise an exception if the index is out of bounds for any sublist\n            raise IndexError(f\"Index {index} is out of range for sublist {sublist}\")\n\n    return extracted_elements\n\n# Example usage:\ntwo_dim_list = [[1, 2, 3], [4, 5], [7, 8, 9, 10]]\nindex = 1  # We want to extract the second element (index 1) from each sublist\n\ntry:\n    print(specified_element(two_dim_list, index))\nexcept IndexError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp25djw72w.py\", line 25, in <module>\n    try: specified_element([[1, 2], [3, 4]], 3)\n  File \"/tmp/tmp25djw72w.py\", line 12, in specified_element\n    raise IndexError(f\"Index {index} is out of range for sublist {sublist}\")\nIndexError: Index 3 is out of range for sublist [1, 2]\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmp25djw72w.py\", line 26, in <module>\n    except IndexError as e: assert str(e) == 'Index out of range for sublist'\nAssertionError", "passed": false}
{"task_id": 50, "requirement": "Edge Case Handling", "completion": "def min_length_list(lists):\n    # Check if the input is a list of lists\n    if not all(isinstance(lst, list) for lst in lists):\n        raise ValueError('Input must be a list of lists.')\n    \n    # Find the minimum length and get the first occurrence of that length\n    min_length = min(len(lst) for lst in lists)\n    for lst in lists:\n        if len(lst) == min_length:\n            return (min_length, lst)\n\n# Example usage:\ntry:\n    lists = [[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]\n    print(min_length_list(lists))  # Output: (1, [6])\nexcept ValueError as e:\n    print(e)\n\ntry:\n    lists = [[1, 2], [3, 4], [5, 6]]\n    print(min_length_list(lists))  # Output: (2, [1, 2]) - First list of the minimum length\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 52, "requirement": "Edge Case Handling", "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n    \n    Parameters:\n    base (float|int): The length of the base of the parallelogram.\n    height (float|int): The height of the parallelogram, measured perpendicularly from the base.\n    \n    Returns:\n    float: The area of the parallelogram.\n    \n    Raises:\n    TypeError: If either base or height is not a number.\n    \"\"\"\n    # Check if inputs are numerical\n    if not (isinstance(base, (int, float)) and isinstance(height, (int, float))):\n        raise TypeError(\"Both base and height must be numbers.\")\n    \n    # Calculate the area\n    area = base * height\n    \n    return area\n\n# Example usage:\ntry:\n    base = 5.0\n    height = 3.0\n    area = parallelogram_area(base, height)\n    print(f\"The area of the parallelogram with base {base} and height {height} is {area}\")\nexcept TypeError as e:\n    print(e)\n\ntry:\n    base = 0\n    height = 3.0\n    area = parallelogram_area(base, height)\n    print(f\"The area of the parallelogram with base {base} and height {height} is {area}\")\nexcept TypeError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 53, "requirement": "Edge Case Handling", "completion": "def check_equality(s):\n    \"\"\"\n    Check if the first and last characters of the string s are equal.\n\n    :param s: Input string\n    :return: 'Equal' if the first and last characters are the same, 'Not Equal' otherwise\n    :raises TypeError: If the input is not a string\n    \"\"\"\n    # Check if the input is a string\n    if not isinstance(s, str):\n        raise TypeError('Input must be a string')\n    \n    # If the string is empty, return 'Equal'\n    if len(s) == 0:\n        return 'Equal'\n    \n    # Compare the first and last character\n    if s[0] == s[-1]:\n        return 'Equal'\n    else:\n        return 'Not Equal'\n\n# Example usage:\nprint(check_equality(\"radar\"))  # Should print 'Equal'\nprint(check_equality(\"hello\"))  # Should print 'Not Equal'\nprint(check_equality(\"\"))       # Should print 'Equal'\nprint(check_equality(\"a\"))      # Should print 'Equal'\ntry:\n    print(check_equality(123))  # Should raise TypeError\nexcept TypeError as e:\n    print(e)  # Expected output: Input must be a string\n", "result": "passed", "passed": true}
{"task_id": 54, "requirement": "Edge Case Handling", "completion": "def counting_sort(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Check if the list is empty\n    if not arr:\n        return []\n    \n    # Check if the list contains only integers and they are non-negative\n    if not all(isinstance(x, int) and x >= 0 for x in arr):\n        raise ValueError(\"List must contain only non-negative integers.\")\n    \n    # Find the maximum value in the array\n    max_val = max(arr)\n    \n    # The range of the numbers\n    range_of_numbers = max_val + 1\n    \n    # Initialize count array with zeros\n    count_arr = [0] * range_of_numbers\n    \n    # Store the count of each element in count_arr\n    for num in arr:\n        count_arr[num] += 1\n    \n    # Modify count_arr such that each element at each index\n    # stores the sum of previous counts\n    for i in range(1, len(count_arr)):\n        count_arr[i] += count_arr[i - 1]\n    \n    # Output array that will have sorted arr\n    output_arr = [0] * len(arr)\n    \n    # Build the output array\n    for num in reversed(arr):\n        output_arr[count_arr[num] - 1] = num\n        count_arr[num] -= 1\n    \n    return output_arr\n\n# Example usage:\ntry:\n    arr = [4, 2, 2, 8, 3, 3, 1]\n    sorted_arr = counting_sort(arr)\n    print(\"Sorted array:\", sorted_arr)\n\n    # Testing edge cases\n    print(\"Empty array:\", counting_sort([]))\n    print(\"Single element array:\", counting_sort([5]))\nexcept TypeError as e:\n    print(e)\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4597joln.py\", line 56, in <module>\n    counting_sort([1, 'a', 3])\n  File \"/tmp/tmp4597joln.py\", line 10, in counting_sort\n    raise ValueError(\"List must contain only non-negative integers.\")\nValueError: List must contain only non-negative integers.", "passed": false}
{"task_id": 55, "requirement": "Edge Case Handling", "completion": "def tn_gp(a, r, n):\n    \"\"\"\n    Calculate the n-th term of a geometric progression.\n\n    Parameters:\n    a (float): The first term of the geometric sequence.\n    r (float): The common ratio of the geometric sequence.\n    n (int): The term number to calculate.\n\n    Returns:\n    float: The value of the n-th term.\n\n    Raises:\n    ValueError: If the term number (n) is less than 1.\n    \"\"\"\n\n    if n < 1:\n        raise ValueError('Term number must be greater than 0')\n\n    if r == 0:\n        # If the common ratio is zero, all terms after the first term are zero.\n        if n > 1:\n            return 0\n        else:\n            return a\n    \n    return a * (r ** (n - 1))\n\n# Example usage:\na = 2  # First term\nr = 0  # Common ratio\nn = 4  # Term number to find\n\ntry:\n    result = tn_gp(a, r, n)\n    print(f\"The {n}-th term of the geometric series with first term {a} and common ratio {r} is: {result}\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpi2tu3kwk.py\", line 20, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "requirement": "Edge Case Handling", "completion": "def reverse_number(n):\n    \"\"\"Helper function to reverse the digits of a number.\"\"\"\n    return int(str(n)[::-1])\n\ndef check(number):\n    \"\"\"\n    Function to check if a given number is one less than twice its reverse.\n    \n    Parameters:\n    - number: An integer\n    \n    Returns:\n    - True if the number is one less than twice its reverse, False otherwise.\n    \n    Raises:\n    - TypeError: If the input is not an integer.\n    \"\"\"\n    if not isinstance(number, int):\n        raise TypeError(\"Input must be an integer.\")\n    \n    reversed_num = reverse_number(number)\n    doubled_reversed = 2 * reversed_num\n    one_less_than_twice_reverse = doubled_reversed - 1\n    \n    return number == one_less_than_twice_reverse\n\n# Example usage:\ntry:\n    print(check(47))  # Should return True because 2*74 - 1 = 147\n    print(check(83))  # Should return False\n    print(check(0))   # Should return True because 2*0 - 1 = -1 (0 is not equal to -1, but the logic still applies)\n    print(check(5))   # Should return False because 2*5 - 1 = 9\nexcept TypeError as e:\n    print(e)\n\n# Testing with non-integer inputs\ntry:\n    print(check(47.0))  # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7ekcagve.py\", line 34, in <module>\n    assert check(1) == False\nAssertionError", "passed": false}
{"task_id": 57, "requirement": "Edge Case Handling", "completion": "def find_max_num(digits, num_digits):\n    # Check if the list of digits is empty\n    if not digits:\n        return 0\n    \n    # Check if the number of digits specified is greater than the length of the list\n    if num_digits > len(digits):\n        raise ValueError('Number of digits exceeds the length of the list.')\n    \n    # Convert all digits to strings\n    str_digits = [str(digit) for digit in digits]\n    \n    # Sort the digits in descending order\n    str_digits.sort(reverse=True)\n    \n    # Take only the top num_digits elements\n    str_digits = str_digits[:num_digits]\n    \n    # Join the sorted digits to form the largest number\n    max_num_str = ''.join(str_digits)\n    \n    # Convert the result back to an integer\n    max_num = int(max_num_str)\n    \n    return max_num\n\n# Example usage:\ntry:\n    print(find_max_num([5, 3, 7, 9, 0], 3))  # Output will be 975\n    print(find_max_num([], 2))               # Output will be 0\n    print(find_max_num([5, 3, 7], 4))        # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 58, "requirement": "Edge Case Handling", "completion": "def opposite_signs(a, b):\n    \"\"\"\n    Check if two integers have opposite signs.\n\n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n\n    Returns:\n    bool: True if the integers have opposite signs, False otherwise.\n\n    Raises:\n    TypeError: If either input is not an integer.\n    \"\"\"\n    # Check if both inputs are integers\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise TypeError(\"Both inputs must be integers.\")\n    \n    # Check if the integers have opposite signs\n    return (a > 0) != (b > 0)\n\n# Example usage:\ntry:\n    print(opposite_signs(1, -2))  # Should print True\n    print(opposite_signs(-1, -2)) # Should print False\n    print(opposite_signs(0, 5))   # Should print False since 0 does not have a sign\n    print(opposite_signs(10**100, -10**100)) # Large integers, should print True\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1f10cqqu.py\", line 33, in <module>\n    assert opposite_signs(0, -1) == True\nAssertionError", "passed": false}
{"task_id": 59, "requirement": "Edge Case Handling", "completion": "def nth_octagonal_number(n):\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return n * (3 * n - 2)\n\n# Example usage:\ntry:\n    print(nth_octagonal_number(1))  # Should return 1\n    print(nth_octagonal_number(2))  # Should return 8\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp503kkol4.py\", line 11, in <module>\n    assert is_octagonal(5) == 65\nNameError: name 'is_octagonal' is not defined", "passed": false}
{"task_id": 60, "requirement": "Edge Case Handling", "completion": "def max_len_sub(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"The first argument must be a list.\")\n    \n    n = len(arr)\n    \n    # Return 0 for an empty array\n    if n == 0:\n        return 0\n    \n    # Initialize the result variable\n    max_length = 1\n    \n    # Dictionary to store the lengths of sequences ending at each element\n    lengths = {i: 1 for i in arr}\n    \n    # Iterate through the array to find the maximum length subsequence\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(arr[j] - arr[i]) == 1:\n                # Update the length of the sequence ending at arr[j]\n                lengths[arr[j]] = max(lengths[arr[j]], lengths[arr[i]] + 1)\n                # Update the overall maximum length\n                max_length = max(max_length, lengths[arr[j]])\n                \n    return max_length\n\n# Example usage:\narr = [1, 2, 3, 4, 5, 3, 2, 1]\nprint(max_len_sub(arr))  # Expected output: 5 (longest subsequence: 1 -> 2 -> 3 -> 4 -> 5)\n\nempty_arr = []\nprint(max_len_sub(empty_arr))  # Expected output: 0\n\nnon_list_input = \"not a list\"\ntry:\n    print(max_len_sub(non_list_input))\nexcept TypeError as e:\n    print(e)  # Expected output: The first argument must be a list.\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpo4ym4716.py\", line 32, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}

{"task_id": 11, "requirement": "Code Standard", "completion": "def remove_occ(s: str, ch: str) -> str:\n    \"\"\"\n    Removes the first and last occurrences of a given character from the string.\n\n    :param s: The original string.\n    :param ch: The character to be removed.\n    :return: A new string with the first and last occurrences of the character removed.\n    \"\"\"\n    if len(ch) != 1:\n        raise ValueError('Second parameter must be a single character.')\n\n    # Find the indices of the first and last occurrences of the character\n    try:\n        first_occurrence = s.index(ch)\n        last_occurrence = s.rindex(ch)\n    except ValueError:\n        # If the character is not found, return the original string\n        return s\n\n    # Construct the new string without the first and last occurrences\n    new_string = s[:first_occurrence] + s[first_occurrence + 1:last_occurrence] + s[last_occurrence + 1:]\n\n    return new_string\n\n\n# Example usage\nif __name__ == \"__main__\":\n    test_string = \"hello world\"\n    char_to_remove = \"l\"\n    print(remove_occ(test_string, char_to_remove))  # Output: \"heo word\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6pwkya42.py\", line 44, in <module>\n    check_code_style(remove_occ)\n  File \"/tmp/tmp6pwkya42.py\", line 40, in check_code_style\n    assert result.total_errors == 0, \"Code does not conform to PEP 8 standards.\"\nAssertionError: Code does not conform to PEP 8 standards.", "passed": false}
{"task_id": 12, "requirement": "Code Standard", "completion": "def sort_matrix(matrix: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Sorts a given matrix in ascending order based on the sum of its rows.\n\n    Parameters:\n    - matrix (list of lists): The matrix to be sorted.\n\n    Returns:\n    - list of lists: The sorted matrix.\n\n    Raises:\n    - TypeError: If the input is not a list of lists or contains non-integer values.\n    \"\"\"\n\n    # Check if the input is a list of lists\n    if not all(isinstance(row, list) and all(isinstance(x, int) for x in row) for row in matrix):\n        raise TypeError(\"Input must be a list of lists containing only integers.\")\n\n    # Calculate the sum of each row and pair it with the row itself\n    summed_rows = [(sum(row), row) for row in matrix]\n\n    # Sort the list of tuples based on the first element (the sum)\n    sorted_summed_rows = sorted(summed_rows)\n\n    # Extract the rows from the sorted list of tuples\n    sorted_matrix = [row for _, row in sorted_summed_rows]\n\n    return sorted_matrix\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_matrix = [\n        [3, 4, 5],\n        [1, 2],\n        [6, 7, 8, 9],\n        [0]\n    ]\n\n    print(\"Original Matrix:\")\n    for row in example_matrix:\n        print(row)\n\n    sorted_matrix = sort_matrix(example_matrix)\n    print(\"\\nSorted Matrix:\")\n    for row in sorted_matrix:\n        print(row)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1lbah5xt.py\", line 41, in <module>\n    test_annotations()\n  File \"/tmp/tmp1lbah5xt.py\", line 40, in test_annotations\n    assert hints == {'matrix': 'list[list[int]]', 'return': 'list[list[int]]'}\nAssertionError", "passed": false}
{"task_id": 14, "requirement": "Code Standard", "completion": "def find_volume(base_area: float, height: float, length: float) -> float:\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    - base_area (float): The area of the triangular base.\n    - height (float): The height of the prism.\n    - length (float): The length of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n\n    Raises:\n    ValueError: If any input is not a positive number.\n    \"\"\"\n\n    # Validate inputs\n    if not (isinstance(base_area, (int, float)) and base_area > 0 and\n            isinstance(height, (int, float)) and height > 0 and\n            isinstance(length, (int, float)) and length > 0):\n        raise ValueError('All dimensions must be positive numbers.')\n\n    # Calculate the volume of the triangular prism\n    volume = base_area * height * length\n\n    return volume\n\n# Example usage:\ntry:\n    volume = find_volume(4.0, 3.0, 10.0)\n    print(f\"The volume of the triangular prism is {volume} cubic units.\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgxjphus7.py\", line 16, in <module>\n    assert find_volume(10,8,6) == 240\nAssertionError", "passed": false}
{"task_id": 15, "requirement": "Code Standard", "completion": "import re\n\ndef split_lowerstring(text: str) -> list:\n    \"\"\"\n    Splits a string at each lowercase letter and returns a list of the resulting substrings.\n    \n    Parameters:\n    text (str): The string to be split.\n    \n    Returns:\n    list: A list of substrings, each starting from a lowercase letter.\n    \n    Raises:\n    TypeError: If the input is not a string.\n    \"\"\"\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Match each position right after a lowercase letter\n    pattern = r'(?<=[a-z])(?=[A-Z0-9])'\n    \n    # Split the string using the found patterns, and filter out empty strings\n    split_strings = re.split(pattern, text)\n    \n    # Return non-empty strings\n    return [s for s in split_strings if s]\n\n# Example usage:\nexample_string = \"startMiddleEnd\"\nprint(split_lowerstring(example_string))  # Expected output: ['start', 'Middle', 'End']\n", "result": "failed: File \"/tmp/tmp6s5s91wv.py\", line 18\n    try: split_lowerstring(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 16, "requirement": "Code Standard", "completion": "import re\n\ndef text_lowercase_underscore(text: str) -> str:\n    \"\"\"\n    Checks if the input string contains sequences of lowercase letters joined with an underscore.\n\n    :param text: A string containing the text to search within.\n    :return: 'Found a match!' if the pattern is found, 'Not matched!' otherwise.\n    :raises TypeError: If the input is not a string.\n    \"\"\"\n    # Raise TypeError if input is not a string\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n\n    # Define the regex pattern for finding sequences of lowercase letters joined with an underscore\n    pattern = r\"[a-z]+_[a-z]+\"\n\n    # Check if the pattern is found in the text\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\ntry:\n    example_text = \"This_is_an_example_text_with_lower_case_words_and_this_one_is_special\"\n    print(text_lowercase_underscore(example_text))  # Should print 'Found a match!'\n\n    empty_string = \"\"\n    print(text_lowercase_underscore(empty_string))  # Should print 'Not matched!'\n\n    invalid_input = [\"This\", \"is\", \"not\", \"a\", \"string\"]\n    print(text_lowercase_underscore(invalid_input))  # Should raise a TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpj3gwndqb.py\", line 25, in <module>\n    assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')\nAssertionError", "passed": false}
{"task_id": 17, "requirement": "Code Standard", "completion": "def square_perimeter(side_length: int) -> int:\n    \"\"\"\n    Calculates the perimeter of a square given the non-negative integer side length.\n\n    :param side_length: The length of one side of the square.\n    :type side_length: int\n    :return: The perimeter of the square.\n    :rtype: int\n    :raises ValueError: If the input side length is negative.\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length must be a non-negative integer\")\n    return 4 * side_length\n\n# Example usage:\ntry:\n    perimeter = square_perimeter(5)\n    print(\"The perimeter of the square is:\", perimeter)\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpy6apm59z.py\", line 29, in <module>\n    assert square_perimeter.__annotations__ == {'a': int, 'return': int}\nAssertionError", "passed": false}
{"task_id": 18, "requirement": "Code Standard", "completion": "def remove_dirty_chars(main_string: str, chars_to_remove: str) -> str:\n    \"\"\"\n    Removes characters from main_string that are present in chars_to_remove.\n\n    Parameters:\n    - main_string (str): The original string from which characters will be removed.\n    - chars_to_remove (str): The string containing characters to be removed from main_string.\n\n    Returns:\n    - str: The modified string after removing specified characters.\n\n    Raises:\n    - ValueError: If the input strings contain non-alphabetic characters.\n    - TypeError: If either of the inputs is not a string.\n    \"\"\"\n    # Check if both inputs are strings\n    if not isinstance(main_string, str) or not isinstance(chars_to_remove, str):\n        raise TypeError(\"Both inputs must be strings.\")\n\n    # Check if both strings contain only alphabetic characters\n    if not main_string.isalpha() or not chars_to_remove.isalpha():\n        raise ValueError(\"Input strings must only contain alphabetic characters.\")\n\n    # Create a set of characters to remove for faster lookup\n    chars_set = set(chars_to_remove)\n\n    # Use a generator expression to filter out unwanted characters\n    filtered_string = ''.join(char for char in main_string if char not in chars_set)\n\n    return filtered_string\n\n# Example usage:\ntry:\n    original_str = \"HelloWorld\"\n    chars_to_remove = \"Helo\"\n    cleaned_str = remove_dirty_chars(original_str, chars_to_remove)\n    print(cleaned_str)  # Output should be \"Wrd\"\nexcept ValueError as e:\n    print(f\"ValueError: {e}\")\nexcept TypeError as e:\n    print(f\"TypeError: {e}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplubh9cbr.py\", line 35, in <module>\n    assert remove_dirty_chars('example', '') == 'example', 'Function should return the original string if the second string is empty.'\n  File \"/tmp/tmplubh9cbr.py\", line 7, in remove_dirty_chars\n    raise ValueError(\"Input strings must only contain alphabetic characters.\")\nValueError: Input strings must only contain alphabetic characters.", "passed": false}
{"task_id": 19, "requirement": "Code Standard", "completion": "from typing import List\n\ndef test_duplicate(array_nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given list contains any duplicate elements.\n\n    :param array_nums: List of integers\n    :return: True if there are duplicates, False otherwise\n    :raises TypeError: If the input is not a list\n    :raises ValueError: If the list contains non-integer values\n    \"\"\"\n    if not isinstance(array_nums, list):\n        raise TypeError(\"Input must be a list\")\n\n    seen = set()\n    for num in array_nums:\n        if not isinstance(num, int):\n            raise ValueError(\"Input must be a list of integers\")\n        if num in seen:\n            return True\n        seen.add(num)\n    \n    return False\n\n# Example usage:\ntry:\n    example_list = [1, 2, 3, 4, 5, 2]\n    print(test_duplicate(example_list))  # Output: True\n    \n    another_example_list = [10, 22, 33, 44, 55]\n    print(test_duplicate(another_example_list))  # Output: False\n    \n    invalid_input = \"Not a list\"\n    print(test_duplicate(invalid_input))  # Raises TypeError\n    \n    invalid_elements = [1, 2, \"three\", 4, 5]\n    print(test_duplicate(invalid_elements))  # Raises ValueError\n    \nexcept TypeError as te:\n    print(te)\nexcept ValueError as ve:\n    print(ve)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmqpbk4rz.py\", line 39, in <module>\n    test_duplicate(None)\n  File \"/tmp/tmpmqpbk4rz.py\", line 4, in test_duplicate\n    raise TypeError(\"Input must be a list\")\nTypeError: Input must be a list\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpmqpbk4rz.py\", line 42, in <module>\n    assert str(e) == 'Input must be a list of integers'\nAssertionError", "passed": false}
{"task_id": 20, "requirement": "Code Standard", "completion": "def is_woodall(x: int) -> bool:\n    \"\"\"\n    Check if the given number is a Woodall number.\n\n    A Woodall number is of the form n * 2^n - 1 for some positive integer n.\n    \n    :param x: Integer to check\n    :return: True if x is a Woodall number, False otherwise\n    \"\"\"\n    if not isinstance(x, int):\n        raise TypeError(\"Input must be an integer\")\n\n    def find_woodall(n: int) -> int:\n        \"\"\"Helper function to calculate the Woodall number for a given n.\"\"\"\n        return n * 2 ** n - 1\n\n    n = 1\n    while True:\n        woodall_num = find_woodall(n)\n        if woodall_num == x:\n            return True\n        elif woodall_num > x:\n            return False\n        n += 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6mlu99uq.py\", line 32, in <module>\n    assert cc_visit(inspect.getsource(is_woodall))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 21, "requirement": "Code Standard", "completion": "def multiples_of_num(m: int, n: int) -> list[int]:\n    \"\"\"\n    Generates the first m multiples of the number n.\n\n    Parameters:\n    m (int): The number of multiples to generate. Must be non-negative.\n    n (int): The base number to find multiples of. Must be non-negative.\n\n    Returns:\n    list[int]: A list containing the first m multiples of n.\n\n    Raises:\n    ValueError: If either m or n is negative.\n    \"\"\"\n    if m < 0 or n < 0:\n        raise ValueError(\"Both m and n must be non-negative.\")\n    \n    if m == 0:\n        return []\n    \n    return [i * n for i in range(1, m + 1)]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4km0jtyg.py\", line 18, in <module>\n    assert multiples_of_num.__annotations__ == {'m': int, 'n': int, 'return': list}\nAssertionError", "passed": false}
{"task_id": 22, "requirement": "Code Standard", "completion": "from typing import List\n\ndef find_first_duplicate(nums: List[int]) -> int:\n    \"\"\"\n    Finds the first duplicate element in a list of integers.\n    \n    Args:\n    nums (List[int]): A list of integers.\n    \n    Returns:\n    int: The first duplicate integer found in the list, or -1 if there is no duplicate.\n    \n    Raises:\n    TypeError: If the input is not a list of integers.\n    \"\"\"\n    if not isinstance(nums, list) or not all(isinstance(x, int) for x in nums):\n        raise TypeError(\"Input must be a list of integers.\")\n    \n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    \n    return -1\n\n# Example usage:\ntry:\n    print(find_first_duplicate([2, 5, 1, 2, 3, 5, 1, 2, 4]))  # Output will be 2\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5cve0s35.py\", line 23, in <module>\n    assert find_first_duplicate.__annotations__ == {'nums': list, 'return': int}\nAssertionError", "passed": false}
{"task_id": 23, "requirement": "Code Standard", "completion": "from typing import List\n\ndef maximum_sum(list_of_lists: List[List[int]]) -> int:\n    \"\"\"\n    Finds the maximum sum of elements among all sublists in a given list of lists.\n\n    Parameters:\n    - list_of_lists (List[List[int]]): A list containing multiple sublists of integers.\n\n    Returns:\n    - int: The maximum sum of elements found in any of the sublists.\n\n    Raises:\n    - TypeError: If the input is not a list of lists or any sublist contains non-integer elements.\n    \"\"\"\n    if not isinstance(list_of_lists, list) or not all(isinstance(sublist, list) for sublist in list_of_lists):\n        raise TypeError(\"Input must be a list of lists.\")\n    \n    max_sum = float('-inf')  # Initialize with negative infinity to handle negative numbers as well\n    \n    for sublist in list_of_lists:\n        if not all(isinstance(element, int) for element in sublist):\n            raise TypeError(\"All elements in sublists must be integers.\")\n        \n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            \n    return max_sum if max_sum != float('-inf') else 0\n\n# Example usage:\nexample_list_of_lists = [[1, 2, 3], [4, 5, 6], [-7, -8, 9], [0]]\nprint(maximum_sum(example_list_of_lists))  # Output should be 15 (from the sublist [4, 5, 6])\n\n# Test cases\ntry:\n    print(maximum_sum([[], [], []]))  # Output should be 0 (all sublists are empty)\nexcept TypeError as e:\n    print(e)\n\ntry:\n    print(maximum_sum([[1, 2, 'a'], [4, 5, 6]]))  # Should raise TypeError due to non-integer element\nexcept TypeError as e:\n    print(e)\n\ntry:\n    print(maximum_sum('not a list'))  # Should raise TypeError due to invalid input type\nexcept TypeError as e:\n    print(e)\n", "result": "failed: File \"/tmp/tmpqxkqxq5_.py\", line 33\n    try: maximum_sum([[1, 2], [3, 'a']]); assert False, 'Expected TypeError' except TypeError: pass\n                                                                             ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 24, "requirement": "Code Standard", "completion": "def binary_to_decimal(binary: str) -> int:\n    \"\"\"\n    Convert a binary number (as a string) to its decimal equivalent.\n\n    :param binary: A string representing a binary number.\n    :return: The decimal equivalent of the binary number.\n    :raises ValueError: If the input is not a valid binary number.\n    \"\"\"\n    if not binary:\n        return 0\n\n    decimal_value = 0\n    for index, digit in enumerate(reversed(binary)):\n        if digit not in '01':\n            raise ValueError('Invalid binary number')\n        decimal_value += int(digit) * (2 ** index)\n\n    return decimal_value\n\n# Example usage:\ntry:\n    print(binary_to_decimal('1011'))  # Output should be 11\n    print(binary_to_decimal(''))      # Output should be 0\n    print(binary_to_decimal('1021'))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n", "result": "failed: File \"/tmp/tmpd2f3hj87.py\", line 20\n    try: binary_to_decimal('102'); assert False, 'Expected ValueError' except ValueError as e: assert str(e) == 'Invalid binary number'\n                                                                       ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 25, "requirement": "Code Standard", "completion": "from typing import List\nfrom collections import Counter\n\ndef find_product(arr: List[int]) -> int:\n    \"\"\"\n    Finds the product of non-repeated elements in a given list of integers.\n\n    Parameters:\n    arr (List[int]): A list of integers.\n\n    Returns:\n    int: The product of non-repeated elements in the list.\n\n    Raises:\n    TypeError: If the input is not a list of integers.\n    \"\"\"\n\n    if not isinstance(arr, list) or not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"Input must be a list of integers\")\n\n    # Count the frequency of each element in the list\n    element_counts = Counter(arr)\n\n    # Calculate the product of non-repeated elements\n    product = 1\n    for element, count in element_counts.items():\n        if count == 1:\n            product *= element\n\n    return product\n\n# Example usage:\ntry:\n    print(find_product([2, 3, 4, 5, 6, 3, 4]))  # Output should be 2 * 5 * 6 = 60\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdxwjdc0q.py\", line 19, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "requirement": "Code Standard", "completion": "from typing import List, Tuple, Set\n\ndef check_k_elements(test_list: List[Tuple], k: int) -> bool:\n    \"\"\"\n    Checks if all tuples in the given list have exactly k elements.\n\n    :param test_list: List of tuples to be checked.\n    :param k: Integer representing the expected number of elements in each tuple.\n    :return: True if all tuples in the list have exactly k elements, False otherwise.\n    :raises TypeError: If test_list is not a list of tuples or k is not an integer.\n    \"\"\"\n    # Check if the input types are correct\n    if not isinstance(test_list, list) or not all(isinstance(item, tuple) for item in test_list):\n        raise TypeError(\"The first argument must be a list of tuples.\")\n    if not isinstance(k, int):\n        raise TypeError(\"The second argument must be an integer.\")\n\n    # Check if the list is empty\n    if not test_list:\n        return True  # An empty list trivially satisfies the condition since there are no tuples to violate it.\n\n    # Verify each tuple in the list\n    for tup in test_list:\n        if len(tup) != k:\n            return False\n\n    return True\n\n# Example usage:\ntry:\n    print(check_k_elements([(1, 2), (3, 4), (5, 6)], 2))  # Expected output: True\n    print(check_k_elements([(1, 2), (3, 4, 5), (5, 6)], 2))  # Expected output: False\n    print(check_k_elements([], 2))  # Expected output: True\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpecgmv_av.py\", line 23, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "requirement": "Code Standard", "completion": "import re\n\ndef remove_digits(strings: list[str]) -> list[str]:\n    \"\"\"\n    Removes all digits from each string in the provided list of strings.\n    \n    :param strings: List of strings from which digits are to be removed.\n    :return: A new list of strings with all digits removed.\n    :raises TypeError: If the input is not a list or if any element in the list is not a string.\n    \"\"\"\n    if not isinstance(strings, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    for item in strings:\n        if not isinstance(item, str):\n            raise TypeError(\"All elements in the list must be strings.\")\n    \n    # Using regular expressions to remove digits\n    return [re.sub(r'\\d', '', s) for s in strings]\n\n# Example usage:\nexample_list = [\"abc123\", \"456def\", \"7890\"]\ntry:\n    cleaned_list = remove_digits(example_list)\n    print(cleaned_list)  # Output should be ['abc', 'def', '']\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpm9y5b2dp.py\", line 17, in <module>\n    assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\nNameError: name 'remove' is not defined", "passed": false}
{"task_id": 28, "requirement": "Code Standard", "completion": "def binomial_coeff(n: int, k: int) -> int:\n    \"\"\"\n    Calculate the binomial coefficient C(n, k).\n\n    Parameters:\n    n (int): The total number of items.\n    k (int): The number of items to choose.\n\n    Returns:\n    int: The binomial coefficient C(n, k).\n\n    Raises:\n    ValueError: If inputs are negative or if k is greater than n.\n    \"\"\"\n    # Check for valid inputs\n    if n < 0 or k < 0 or k > n:\n        raise ValueError('Inputs must be non-negative and k must not be greater than n')\n\n    # Use symmetry property: C(n, k) == C(n, n-k)\n    if k > n - k:\n        k = n - k\n\n    res = 1\n    for i in range(k):\n        res *= (n - i)\n        res //= (i + 1)\n\n    return res\n\n# Example usage:\ntry:\n    print(binomial_coeff(5, 2))  # Output: 10\n    print(binomial_coeff(10, 3)) # Output: 120\n    print(binomial_coeff(10, 11)) # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8t7np43i.py\", line 44, in <module>\n    check_code_style(binomial_coeff)\n  File \"/tmp/tmp8t7np43i.py\", line 40, in check_code_style\n    assert result.total_errors == 0, \"Code does not conform to PEP 8 standards.\"\nAssertionError: Code does not conform to PEP 8 standards.", "passed": false}
{"task_id": 29, "requirement": "Code Standard", "completion": "from typing import List\n\ndef get_odd_occurrence(arr: List[int], arr_size: int) -> int:\n    \"\"\"\n    Finds the element that occurs an odd number of times in a given list of integers.\n    \n    Parameters:\n    arr (List[int]): A list of integers.\n    arr_size (int): The size of the list (not used in this version but included for completeness).\n    \n    Returns:\n    int: The integer that occurs an odd number of times, or None if no such element exists.\n    \n    Raises:\n    TypeError: If the input is not a list of integers.\n    \"\"\"\n    \n    # Check if the input is a list of integers\n    if not isinstance(arr, list) or not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"Input must be a list of integers.\")\n    \n    # Handle empty list\n    if len(arr) == 0:\n        return None\n    \n    # Dictionary to store the count of each element\n    count_dict = {}\n    \n    # Count the occurrences of each element\n    for element in arr:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n    \n    # Find and return the element with an odd occurrence\n    for element, count in count_dict.items():\n        if count % 2 != 0:\n            return element\n    \n    # If no element occurs an odd number of times, return None\n    return None\n\n# Example usage:\narr = [1, 2, 3, 2, 3, 1, 3]\nprint(get_odd_occurrence(arr, len(arr)))  # Output should be 3\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_og__nbl.py\", line 42, in <module>\n    assert get_odd_occurrence([]) is None\nTypeError: get_odd_occurrence() missing 1 required positional argument: 'arr_size'", "passed": false}
{"task_id": 30, "requirement": "Code Standard", "completion": "from collections import Counter\n\ndef count_substring_with_equal_ends(s: str) -> int:\n    \"\"\"\n    Counts all substrings starting and ending with the same character.\n\n    Parameters:\n    s (str): The input string.\n\n    Returns:\n    int: The number of substrings starting and ending with the same character.\n\n    Raises:\n    TypeError: If the input is not a string.\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n\n    if s == \"\":\n        return 0\n\n    char_count = Counter(s)\n    count = sum((freq * (freq + 1)) // 2 for freq in char_count.values())\n\n    return count\n\n# Example usage:\ntry:\n    print(count_substring_with_equal_ends(\"abcab\"))  # Output will depend on the input string\nexcept TypeError as e:\n    print(e)\n", "result": "failed: File \"/tmp/tmpcvcqtx6g.py\", line 19\n    try: count_substring_with_equal_ends(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                                  ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 31, "requirement": "Code Standard", "completion": "import heapq\nfrom typing import List, Dict\nfrom collections import defaultdict\n\ndef func(nums: List[List[int]], k: int) -> List[int]:\n    \"\"\"\n    Finds the top k integers that occur most frequently from given lists of sorted and distinct integers.\n    \n    :param nums: List of lists containing sorted and distinct integers.\n    :param k: The number of top integers to find based on their frequency.\n    :return: A list of the top k integers occurring most frequently across the lists.\n    :raises ValueError: If k is greater than the number of distinct integers across all lists.\n    \"\"\"\n    if k <= 0:\n        raise ValueError(\"k must be a positive integer.\")\n    \n    # Dictionary to count occurrences of each integer\n    count: Dict[int, int] = defaultdict(int)\n    \n    # Count the occurrence of each integer in the lists\n    for lst in nums:\n        for num in set(lst):  # Using set to ensure distinct elements\n            count[num] += 1\n    \n    # Check if k is greater than the number of distinct integers\n    if k > len(count):\n        raise ValueError(\"k cannot be greater than the number of distinct integers\")\n    \n    # Min-heap to keep track of top k elements based on their frequencies\n    heap = []\n    \n    # Push elements into the heap if its size is less than k or if the current element's frequency is greater than the smallest frequency in the heap\n    for num, freq in count.items():\n        if len(heap) < k:\n            heapq.heappush(heap, (freq, num))\n        elif freq > heap[0][0]:\n            # Replace the root of the heap if the current element's frequency is higher\n            heapq.heapreplace(heap, (freq, num))\n    \n    # Extract the top k elements from the heap\n    result = [num for _, num in heap]\n    \n    return result\n\n# Example usage:\nlists = [\n    [1, 4, 5, 8],\n    [4, 5, 6, 7],\n    [1, 3, 4, 6],\n    [2, 4, 6, 8]\n]\n\nk = 2\nprint(func(lists, k))  # Output should be the top 2 most frequent integers\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpsmksgp72.py\", line 37, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "requirement": "Code Standard", "completion": "from typing import Union\n\ndef max_prime_factors(n: int) -> Union[int, None]:\n    \"\"\"\n    Find the largest prime factor of a given positive integer.\n    \n    Args:\n    n (int): A positive integer whose largest prime factor is to be found.\n    \n    Returns:\n    int: The largest prime factor of the input number.\n    None: If the input is less than 2.\n    \n    Raises:\n    ValueError: If the input is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n < 2:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    max_prime = -1\n    \n    # Remove all factors of 2\n    while n % 2 == 0:\n        max_prime = 2\n        n //= 2\n    \n    # Check for odd factors from 3 onwards\n    factor = 3\n    while factor * factor <= n:\n        while n % factor == 0:\n            max_prime = factor\n            n //= factor\n        factor += 2\n    \n    # If n is a prime number greater than 2\n    if n > 2:\n        max_prime = n\n    \n    return max_prime\n\n# Example usage:\nprint(max_prime_factors(13195))  # Output: 29\nprint(max_prime_factors(2048))   # Output: 2\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmixwfuhn.py\", line 37, in <module>\n    assert max_prime_factors.__annotations__ == {'n': int, 'return': int}\nAssertionError", "passed": false}
{"task_id": 33, "requirement": "Code Standard", "completion": "def decimal_to_binary(n: int) -> str:\n    \"\"\"\n    Convert a non-negative integer to its binary representation.\n    \n    Parameters:\n    - n (int): A non-negative integer to be converted to binary.\n    \n    Returns:\n    - str: The binary representation of the input integer.\n    \n    Raises:\n    - ValueError: If the input is not a non-negative integer.\n    \"\"\"\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n\n    return bin(n)[2:]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpg_3u47or.py\", line 5, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "requirement": "Code Standard", "completion": "from typing import List\n\ndef find_missing(ar: List[int]) -> int:\n    \"\"\"\n    Finds the missing number in a sorted list of integers in arithmetic progression.\n    \n    Parameters:\n    ar (List[int]): A sorted list of integers in arithmetic progression with one missing number.\n    \n    Returns:\n    int: The missing number in the array.\n    \n    Raises:\n    ValueError: If the input list is not sorted.\n    \"\"\"\n    # Check if the list is empty\n    if not ar:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    # Verify if the list is sorted\n    if ar != sorted(ar):\n        raise ValueError(\"Input list must be sorted.\")\n    \n    n = len(ar)\n    total_diff = ar[-1] - ar[0]\n    expected_diff = total_diff // n\n    \n    # Iterate through the array to find the missing number\n    for i in range(1, n):\n        if ar[i] != ar[i - 1] + expected_diff:\n            return ar[i - 1] + expected_diff\n    \n    # Check the boundaries for the missing number\n    if ar[0] != expected_diff:\n        return expected_diff\n    elif ar[-1] != ar[0] + (n + 1) * expected_diff:\n        return ar[-1] + expected_diff\n    \n    # Return None if no missing number is found (should theoretically not happen)\n    return None\n\n# Example usage:\nif __name__ == \"__main__\":\n    arr_example = [0, 1, 2, 4, 5, 6, 7, 8]\n    print(find_missing(arr_example))  # Output should be 3\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpbop3hrx0.py\", line 27, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "requirement": "Code Standard", "completion": "def find_nth_rectangular_number(n: int) -> int:\n    \"\"\"\n    Calculate the n-th rectangular number.\n\n    Parameters:\n    n (int): An integer representing the position in the sequence of rectangular numbers.\n\n    Returns:\n    int: The n-th rectangular number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    # The first rectangular number is 2\n    if n == 1:\n        return 2\n\n    return n * (n + 1)\n\n# Example usage:\nif __name__ == \"__main__\":\n    try:\n        n = 5  # Find the 5th rectangular number\n        print(f\"The {n}th rectangular number is: {find_nth_rectangular_number(n)}\")\n    except ValueError as e:\n        print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpci5ksdp5.py\", line 15, in <module>\n    assert find_rect_num(4) == 20\nNameError: name 'find_rect_num' is not defined", "passed": false}
{"task_id": 36, "requirement": "Code Standard", "completion": "def find_nth_digit(p: int, q: int, n: int) -> int:\n    \"\"\"\n    Finds the nth digit in the decimal representation of the fraction p/q.\n    \n    Parameters:\n    p (int): The numerator of the fraction.\n    q (int): The denominator of the fraction.\n    n (int): The position of the digit to find in the decimal representation.\n    \n    Returns:\n    int: The nth digit in the decimal representation of p/q.\n    \n    Raises:\n    ValueError: If the denominator is zero.\n    \"\"\"\n    if q == 0:\n        raise ValueError(\"Denominator cannot be zero\")\n    \n    # Initial division to get the integer part\n    quotient = p // q\n    remainder = p % q\n    \n    # String to store the decimal digits\n    decimal_digits = []\n    \n    # Dictionary to detect cycles\n    seen_remainders = {}\n    \n    # Loop to generate the decimal part until we find the nth digit\n    position = 0\n    while remainder != 0 and position < n + 10:  # Add buffer to ensure enough digits\n        if remainder in seen_remainders:\n            break\n        seen_remainders[remainder] = position\n        \n        remainder *= 10\n        digit = remainder // q\n        decimal_digits.append(str(digit))\n        \n        remainder = remainder % q\n        position += 1\n    \n    # Check if we reached a cycle or not enough digits\n    if position < n:\n        return -1  # Indicates the digit could not be found\n    \n    # Return the nth digit\n    return int(decimal_digits[n - seen_remainders.get(remainder, 0)])\n\n# Example usage\nif __name__ == \"__main__\":\n    print(find_nth_digit(1, 2, 3))  # Output: 0\n    print(find_nth_digit(2, 3, 5))  # Output: 6\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpj3bkgfai.py\", line 31, in <module>\n    assert find_nth_digit(1,2,1) == 5\n  File \"/tmp/tmpj3bkgfai.py\", line 26, in find_nth_digit\n    return int(decimal_digits[n - seen_remainders.get(remainder, 0)])\nIndexError: list index out of range", "passed": false}
{"task_id": 37, "requirement": "Code Standard", "completion": "from typing import List, Union\n\ndef sort_mixed_list(mixed_list: List[Union[int, str]]) -> List[Union[int, str]]:\n    \"\"\"\n    Sorts a given list containing both integers and strings.\n    \n    Args:\n        mixed_list (List[Union[int, str]]): A list containing integers and strings.\n        \n    Returns:\n        List[Union[int, str]]: A sorted list where integers are sorted among themselves,\n                               and strings are sorted among themselves, but the two types\n                               remain separated.\n                               \n    Raises:\n        TypeError: If the input is not a list or if the list contains elements that are\n                   neither integers nor strings.\n    \"\"\"\n    if not isinstance(mixed_list, list):\n        raise TypeError(\"Input must be a list.\")\n\n    integers: List[int] = []\n    strings: List[str] = []\n\n    for item in mixed_list:\n        if isinstance(item, int):\n            integers.append(item)\n        elif isinstance(item, str):\n            strings.append(item)\n        else:\n            raise TypeError(\"List must contain only integers and strings.\")\n\n    # Sort each list\n    integers.sort()\n    strings.sort()\n\n    # Concatenate the sorted lists\n    sorted_list = integers + strings\n\n    return sorted_list\n\n# Example usage:\nif __name__ == \"__main__\":\n    mixed_list = [5, \"banana\", 3, \"apple\", 7, \"cherry\"]\n    sorted_list = sort_mixed_list(mixed_list)\n    print(sorted_list)  # Output: [3, 5, 7, 'apple', 'banana', 'cherry']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpg2l3dmbh.py\", line 43, in <module>\n    assert sort_mixed_list.__annotations__ == {'mixed_list': list[Union[int, str]], 'return' : list}\nAssertionError", "passed": false}
{"task_id": 38, "requirement": "Code Standard", "completion": "def div_even_odd(numbers: list) -> float:\n    \"\"\"\n    Divides the first even number by the first odd number in the given list.\n\n    Args:\n    numbers (list): A list of integers.\n\n    Returns:\n    float: The division result of the first even number by the first odd number.\n           Returns None if there's no even or odd number in the list.\n\n    Raises:\n    ValueError: If the list does not contain at least one even and one odd number.\n    \"\"\"\n    first_even = None\n    first_odd = None\n    \n    for num in numbers:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        \n        # Once both first even and first odd are found, break the loop\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Check if both first even and first odd were found\n    if first_even is None or first_odd is None:\n        raise ValueError(\"List must contain at least one even and one odd number.\")\n    \n    # Perform the division\n    try:\n        result = first_even / first_odd\n    except ZeroDivisionError:\n        # Handle the case where the first odd number is zero\n        return None\n    \n    return result\n\n\n# Example usage:\ntry:\n    print(div_even_odd([5, 3, 2, 8]))  # Output should be 2.0 (2/1)\n    print(div_even_odd([2, 4, 6]))     # Raises ValueError: List must contain at least one even and one odd number.\n    print(div_even_odd([1, 3, 5]))     # Raises ValueError: List must contain at least one even and one odd number.\nexcept ValueError as e:\n    print(e)\n", "result": "failed: File \"/tmp/tmpy0g3g93_.py\", line 33\n    try: div_even_odd([2, 4, 6]); assert False; except ValueError as e: assert str(e) == 'List must contain at least one even and one odd number.'\n                                                ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 39, "requirement": "Code Standard", "completion": "from collections import Counter\n\ndef rearrange_string(S: str) -> str:\n    \"\"\"\n    Rearranges the characters in the given string so that no two adjacent characters are the same.\n    \n    Parameters:\n    S (str): A non-empty string consisting only of lowercase letters.\n    \n    Returns:\n    str: A string where no two adjacent characters are the same, or an empty string if rearrangement is not possible.\n    \n    Raises:\n    ValueError: If the input is not a string or contains characters other than lowercase letters.\n    \"\"\"\n    # Validate input\n    if not isinstance(S, str):\n        raise ValueError(\"Input must be a string.\")\n    if not S.islower():\n        raise ValueError(\"String must contain only lowercase letters.\")\n\n    # Count the frequency of each character\n    char_count = Counter(S)\n\n    # Sort characters by their frequency (descending order)\n    sorted_chars = sorted(char_count.items(), key=lambda x: -x[1])\n\n    result = []\n    used_char = None\n\n    while sorted_chars:\n        for i, (char, count) in enumerate(sorted_chars):\n            if char != used_char:\n                # Add the character to the result\n                result.append(char)\n                used_char = char\n                # Decrease the count\n                sorted_chars[i] = (char, count - 1)\n                \n                # Remove the character from the list if its count becomes zero\n                if count - 1 == 0:\n                    del sorted_chars[i]\n                break\n        else:\n            # If we couldn't find a suitable character to add, return an empty string\n            return \"\"\n\n    # Join the characters in the result list to form the final string\n    return ''.join(result)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpthozlg2p.py\", line 31, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "requirement": "Code Standard", "completion": "from collections import Counter\nfrom itertools import chain\n\ndef freq_element(nums: list[list[int]]) -> dict[int, int]:\n    if not isinstance(nums, list) or not all(isinstance(sublist, list) for sublist in nums):\n        raise TypeError(\"Input must be a list of lists\")\n\n    # Flatten the list of lists into a single list\n    flattened_list = list(chain.from_iterable(nums))\n\n    # Count the frequency of each element in the flattened list\n    freq_counter = Counter(flattened_list)\n\n    return freq_counter\n\n# Example usage:\nlist_of_lists = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [1, 2, 3, 4],\n    [7, 8, 9]\n]\n\ntry:\n    print(freq_element(list_of_lists))\nexcept TypeError as e:\n    print(e)\n", "result": "failed: File \"/tmp/tmplovhlji8.py\", line 25\n    try: freq_element('not a list'); assert False; except TypeError: assert True\n                                                   ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 41, "requirement": "Code Standard", "completion": "from typing import List\n\ndef filter_even_numbers(nums: List[int]) -> List[int]:\n    \"\"\"\n    Filters even numbers from a list of integers.\n\n    Args:\n    nums (List[int]): A list of integers.\n\n    Returns:\n    List[int]: A list of even integers from the input list.\n    \n    Raises:\n    TypeError: If the input is not a list of integers.\n    \"\"\"\n    if not isinstance(nums, list) or not all(isinstance(x, int) for x in nums):\n        raise TypeError(\"Input must be a list of integers\")\n\n    even_numbers = filter(lambda x: x % 2 == 0, nums)\n    return list(even_numbers)\n\n# Example usage:\ntry:\n    example_list = [1, 2, 3, 4, 5, 6]\n    print(filter_even_numbers(example_list))  # Output: [2, 4, 6]\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppvf96wt_.py\", line 13, in <module>\n    assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\nNameError: name 'filter_evennumbers' is not defined", "passed": false}
{"task_id": 42, "requirement": "Code Standard", "completion": "def find_sum(arr: list) -> int:\n    \"\"\"\n    Finds the sum of all repeated elements in a given list.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The sum of all repeated elements in the list.\n    \"\"\"\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n\n    # Dictionary to store the count of each element\n    element_count = {}\n\n    # Iterate through the list to populate the dictionary with counts\n    for element in arr:\n        if element in element_count:\n            element_count[element] += 1\n        else:\n            element_count[element] = 1\n\n    # Calculate the sum of elements that appear more than once\n    repeated_sum = sum(element * count for element, count in element_count.items() if count > 1)\n\n    return repeated_sum\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_list = [1, 2, 3, 2, 3, 4, 5, 3]\n    print(find_sum(example_list))  # Output will be 10 because 2 appears twice (2*2=4) and 3 appears three times (3*3=9), but only count repeats, so 3*(3-1)+2*(2-1)=6+2=8\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpeeikiw28.py\", line 19, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Code Standard", "completion": "import re\n\ndef text_match(text: str) -> str:\n    \"\"\"\n    Finds sequences of lowercase letters joined with an underscore.\n    \n    Args:\n        text (str): The string to search within.\n        \n    Returns:\n        str: A message indicating whether matches were found or not.\n        \n    Raises:\n        TypeError: If the input is not a string.\n    \"\"\"\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string.\")\n    \n    if not text:\n        return \"Not matched!\"\n    \n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    matches = re.findall(pattern, text)\n    \n    return \"\\n\".join(matches) if matches else \"Not matched!\"\n\n# Example usage:\nsample_text = \"this_is_a_sample_text with_multiple_matches_like_this_one_and_another_example\"\nprint(text_match(sample_text))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1b9z9dhf.py\", line 13, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 44, "requirement": "Code Standard", "completion": "import re\n\ndef matches_word_at_start(text: str, pattern: str) -> bool:\n    \"\"\"\n    This function checks if the given pattern (word) is at the beginning of the text.\n    \n    :param text: String to be searched\n    :param pattern: Word to match at the beginning of the text\n    :raises TypeError: If the input is not a string\n    :return: True if the pattern is found at the beginning of the text, False otherwise\n    \"\"\"\n    if not isinstance(text, str) or not isinstance(pattern, str):\n        raise TypeError(\"Both text and pattern must be strings\")\n    \n    # Compile a regex pattern to match the word at the start of the string\n    regex = re.compile(r'^' + re.escape(pattern))\n    \n    # Search for the pattern in the text\n    match = regex.search(text)\n    \n    # If match is found, return True; otherwise, return False\n    return bool(match)\n\n# Example usage:\nprint(matches_word_at_start(\"Hello world\", \"Hello\"))  # Should return True\nprint(matches_word_at_start(\"world Hello\", \"Hello\"))  # Should return False\nprint(matches_word_at_start(\"\", \"Hello\"))             # Should return False\nprint(matches_word_at_start(\"   \", \"Hello\"))          # Should return False\n", "result": "failed: File \"/tmp/tmprtfqg6w6.py\", line 19\n    try: text_match_string(123); assert False, 'TypeError not raised' except TypeError: pass\n                                                                      ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 45, "requirement": "Code Standard", "completion": "from math import gcd\n\ndef get_gcd(numbers: list[int]) -> int:\n    \"\"\"\n    Find the greatest common divisor (GCD) of all elements in the given list of integers.\n    \n    :param numbers: List[int] - A list of positive integers.\n    :return: int - The GCD of all elements in the list.\n    :raises ValueError: If the input list is empty.\n    \"\"\"\n    if not numbers:\n        raise ValueError('Input list cannot be empty.')\n\n    gcd_result = numbers[0]\n\n    for num in numbers[1:]:\n        gcd_result = gcd(gcd_result, num)\n\n    return gcd_result\n\n# Example usage:\ntry:\n    numbers = [8, 12, 24]\n    print(\"The GCD of\", numbers, \"is:\", get_gcd(numbers))\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0p90655q.py\", line 20, in <module>\n    assert get_gcd.__annotations__ == {'numbers': list, 'return': int}\nAssertionError", "passed": false}
{"task_id": 46, "requirement": "Code Standard", "completion": "from typing import List\n\ndef test_distinct(numbers: List[int]) -> bool:\n    \"\"\"\n    Determine if all numbers in the list are distinct.\n\n    Args:\n    - numbers: A list of integers.\n\n    Returns:\n    - True if all numbers are distinct, False otherwise.\n\n    Raises:\n    - TypeError if the input is not a list of integers.\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    if not all(isinstance(x, int) for x in numbers):\n        raise TypeError(\"All items in the list must be integers.\")\n    \n    return len(numbers) == len(set(numbers))\n\n# Example usage:\ntry:\n    print(test_distinct([1, 2, 3, 4]))  # Should print True\n    print(test_distinct([1, 2, 2, 3]))  # Should print False\n    print(test_distinct([1, \"two\", 3]))  # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpbrb7kdu8.py\", line 35, in <module>\n    assert test_distinct.__annotations__ == {'numbers': list, 'return': bool}\nAssertionError", "passed": false}
{"task_id": 48, "requirement": "Code Standard", "completion": "from typing import TypeVar\n\nT = TypeVar('T', bound=int)\n\ndef set_odd_bits(number: T) -> int:\n    \"\"\"\n    Set all odd bits of the given integer to 1.\n    \n    Args:\n    - number (int): The input integer whose odd bits are to be set.\n    \n    Returns:\n    - int: The modified integer with all odd bits set to 1.\n    \n    Raises:\n    - TypeError: If the input is not an integer.\n    \"\"\"\n    if not isinstance(number, int):\n        raise TypeError(\"Input must be an integer\")\n\n    # Edge case: If the input is 0, return 1\n    if number == 0:\n        return 1\n\n    # Determine the number of bits in the binary representation of the number\n    num_bits = number.bit_length()\n\n    # Create a mask where all odd bits are set to 1\n    mask = 0\n    for i in range(num_bits):\n        if i % 2 == 1:\n            mask |= (1 << i)\n\n    # Apply the mask to set all odd bits of the number\n    result = number | mask\n\n    return result\n\n# Example usage:\nprint(set_odd_bits(10))  # Example input: 10 (binary: 1010)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmprg5hae8w.py\", line 21, in <module>\n    assert odd_bit_set_number(10) == 15\nNameError: name 'odd_bit_set_number' is not defined", "passed": false}
{"task_id": 49, "requirement": "Code Standard", "completion": "def extract_element_from_sublists(two_dimensional_list, index):\n    \"\"\"\n    Extracts the element at the specified index from each sub-list of a two-dimensional list.\n\n    :param two_dimensional_list: A two-dimensional list (list of lists)\n    :param index: The index of the element to extract from each sub-list\n    :return: A list containing the extracted elements\n    :raises IndexError: If the specified index is out of range for any sublist\n    \"\"\"\n    extracted_elements = []\n\n    for sublist in two_dimensional_list:\n        if 0 <= index < len(sublist):\n            extracted_elements.append(sublist[index])\n        else:\n            raise IndexError(f\"Index {index} is out of bounds for sublist {sublist}\")\n\n    return extracted_elements\n\n# Example usage:\ntwo_dimensional_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nindex = 1  # We want to extract the second element (index 1) from each sublist\ntry:\n    print(extract_element_from_sublists(two_dimensional_list, index))\nexcept IndexError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpaal_msmz.py\", line 16, in <module>\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\nNameError: name 'specified_element' is not defined", "passed": false}
{"task_id": 51, "requirement": "Code Standard", "completion": "def check_equilateral(a: int, b: int, c: int) -> None:\n    \"\"\"\n    Check if a triangle with sides a, b, and c is equilateral.\n\n    Parameters:\n    a (int): Length of the first side of the triangle.\n    b (int): Length of the second side of the triangle.\n    c (int): Length of the third side of the triangle.\n\n    Raises:\n    ValueError: If any of the input values are non-positive integers.\n\n    Returns:\n    None: Prints whether the triangle is equilateral or not.\n    \"\"\"\n    if a <= 0 or b <= 0 or c <= 0:\n        raise ValueError(\"All sides must be positive integers.\")\n\n    if a == b == c:\n        print(\"The triangle is equilateral.\")\n    else:\n        print(\"The triangle is not equilateral.\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgrdd1u6s.py\", line 8, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "requirement": "Code Standard", "completion": "def parallelogram_area(base: float, height: float) -> float:\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Args:\n        base (float): The length of the base of the parallelogram.\n        height (float): The height of the parallelogram, measured perpendicularly from the base.\n\n    Returns:\n        float: The area of the parallelogram.\n\n    Raises:\n        TypeError: If either base or height is not a numerical value.\n    \"\"\"\n    if not isinstance(base, (int, float)) or not isinstance(height, (int, float)):\n        raise TypeError(\"Base and height must be numerical values.\")\n    \n    # Calculate the area\n    area = base * height\n    \n    return area\n\n# Example usage:\ntry:\n    base = 5.0\n    height = 3.0\n    area = parallelogram_area(base, height)\n    print(f\"The area of the parallelogram with base {base} and height {height} is {area}\")\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9_xfntzs.py\", line 43, in <module>\n    assert cc_visit(inspect.getsource(parallelogram_area))[0].complexity ==1\nAssertionError", "passed": false}
{"task_id": 53, "requirement": "Code Standard", "completion": "def check_equality(s: str) -> str:\n    \"\"\"\n    Check if the first and last characters of the string s are equal.\n    \n    :param s: Input string\n    :return: 'Equal' if the first and last characters are the same, 'Not Equal' otherwise\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError('Input must be a string')\n    \n    # Handle empty strings\n    if len(s) == 0:\n        return 'Equal'\n    \n    # Check if the first and last characters are the same\n    if s[0] == s[-1]:\n        return 'Equal'\n    else:\n        return 'Not Equal'\n\n# Example usage:\nprint(check_equality(\"radar\"))  # Should print 'Equal'\nprint(check_equality(\"hello\"))  # Should print 'Not Equal'\nprint(check_equality(\"a\"))      # Should print 'Equal'\nprint(check_equality(\"\"))       # Should print 'Equal'\ntry:\n    print(check_equality(123))  # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvw7h43bs.py\", line 35, in <module>\n    assert cc_visit(inspect.getsource(check_equality))[0].complexity <=3\nAssertionError", "passed": false}
{"task_id": 54, "requirement": "Code Standard", "completion": "from typing import List\n\ndef counting_sort(arr: List[int]) -> List[int]:\n    \"\"\"\n    Sorts a list of non-negative integers using counting sort.\n\n    Parameters:\n    arr (List[int]): A list of non-negative integers.\n\n    Returns:\n    List[int]: A sorted list of non-negative integers.\n\n    Raises:\n    TypeError: If the input is not a list or contains non-integer elements.\n    ValueError: If the list contains negative integers.\n    \"\"\"\n\n    # Check if input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n\n    # Check if all elements are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements in the list must be integers.\")\n\n    # Check for negative integers\n    if any(x < 0 for x in arr):\n        raise ValueError(\"List cannot contain negative integers.\")\n\n    # Handle edge cases\n    if not arr or len(arr) == 1:\n        return arr\n\n    # Find the maximum and minimum values in the array\n    max_val = max(arr)\n    min_val = min(arr)\n\n    # The range of the numbers\n    range_of_numbers = max_val - min_val + 1\n\n    # Initialize count array with zeros\n    count_arr = [0] * range_of_numbers\n\n    # Store the count of each element in count_arr\n    for num in arr:\n        count_arr[num - min_val] += 1\n\n    # Modify count_arr such that each element at each index\n    # stores the sum of previous counts\n    for i in range(1, len(count_arr)):\n        count_arr[i] += count_arr[i - 1]\n\n    # Output array that will have sorted arr\n    output_arr = [0] * len(arr)\n\n    # Build the output array\n    for num in reversed(arr):\n        output_arr[count_arr[num - min_val] - 1] = num\n        count_arr[num - min_val] -= 1\n\n    return output_arr\n\n# Example usage:\narr = [4, 2, 2, 8, 3, 3, 1]\nsorted_arr = counting_sort(arr)\nprint(\"Sorted array:\", sorted_arr)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2_vgzany.py\", line 64, in <module>\n    test_annotations()\n  File \"/tmp/tmp2_vgzany.py\", line 63, in test_annotations\n    assert hints == {'arr': list, 'return': list}\nAssertionError", "passed": false}
{"task_id": 55, "requirement": "Code Standard", "completion": "def tn_gp(a: int, r: int, n: int) -> int:\n    \"\"\"\n    Calculate the n-th term of a geometric progression.\n\n    Args:\n        a (int): The first term of the geometric sequence.\n        r (int): The common ratio of the geometric sequence.\n        n (int): The term number to calculate.\n\n    Returns:\n        int: The value of the n-th term.\n\n    Raises:\n        ValueError: If the term number (n) is less than 1.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Term number must be greater than 0\")\n\n    if r == 0 and n > 1:\n        return 0\n\n    return a * (r ** (n - 1))\n\n\n# Example usage:\ntry:\n    a = 2  # First term\n    r = 3  # Common ratio\n    n = 4  # Term number to find\n    result = tn_gp(a, r, n)\n    print(f\"The {n}-th term of the geometric series with first term {a} and common ratio {r} is: {result}\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphfso22pn.py\", line 16, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "requirement": "Code Standard", "completion": "def reverse_number(n: int) -> int:\n    \"\"\"Helper function to reverse the digits of a number.\"\"\"\n    return int(str(n)[::-1])\n\n\ndef check(number: int) -> bool:\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n\n    Parameters:\n    - number (int): An integer value\n\n    Returns:\n    - bool: True if the number is one less than twice its reverse, False otherwise.\n\n    Raises:\n    - TypeError: If the input is not an integer.\n    \"\"\"\n    if not isinstance(number, int):\n        raise TypeError(\"Input must be an integer\")\n\n    reversed_num = reverse_number(number)\n    doubled_reversed = 2 * reversed_num\n    one_less_than_twice_reverse = doubled_reversed - 1\n\n    return number == one_less_than_twice_reverse\n\n\n# Example usage:\nprint(check(47))  # Should return True because 2*74 - 1 = 147\nprint(check(83))  # Should return False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2of_k_g3.py\", line 24, in <module>\n    assert check(1) == False\nAssertionError", "passed": false}
{"task_id": 57, "requirement": "Code Standard", "completion": "from typing import List\n\ndef find_max_num(digits: List[int], n: int) -> int:\n    \"\"\"\n    Finds the largest number that can be formed with the given digits.\n\n    Args:\n        digits (List[int]): A list of integers representing the digits.\n        n (int): The number of digits to use from the list.\n\n    Returns:\n        int: The largest number that can be formed with the given digits.\n\n    Raises:\n        ValueError: If the number of digits specified is greater than the length of the list of digits.\n    \"\"\"\n    if len(digits) == 0:\n        return 0\n    \n    if n > len(digits):\n        raise ValueError('Number of digits exceeds the length of the list.')\n    \n    # Convert all digits to strings\n    str_digits = [str(digit) for digit in digits]\n\n    # Sort the digits in descending order\n    str_digits.sort(reverse=True)\n\n    # Take the first n digits after sorting\n    str_digits = str_digits[:n]\n\n    # Join the sorted digits to form the largest number\n    max_num_str = ''.join(str_digits)\n\n    # Convert the result back to an integer\n    max_num = int(max_num_str)\n\n    return max_num\n\n# Example usage:\ntry:\n    print(find_max_num([5, 3, 7, 9, 0], 4))  # Output should be 9753\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkm38b8ve.py\", line 32, in <module>\n    assert find_max_num.__annotations__ == {'digits': list, 'n': int, 'return': int}\nAssertionError", "passed": false}
{"task_id": 58, "requirement": "Code Standard", "completion": "def opposite_signs(a: int, b: int) -> bool:\n    \"\"\"\n    Check if two integers have opposite signs.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n\n    Returns:\n        bool: True if the integers have opposite signs, False otherwise.\n\n    Raises:\n        TypeError: If either input is not an integer.\n    \"\"\"\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise TypeError(\"Both inputs must be integers\")\n    \n    return (a > 0) != (b > 0)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpw1kskitc.py\", line 23, in <module>\n    assert opposite_signs(0, -1) == True\nAssertionError", "passed": false}
{"task_id": 59, "requirement": "Code Standard", "completion": "def nth_octagonal_number(n: int) -> int:\n    \"\"\"\n    Returns the nth octagonal number.\n    \n    Parameters:\n    n (int): The position in the sequence of octagonal numbers (must be a positive integer).\n    \n    Returns:\n    int: The nth octagonal number.\n    \n    Raises:\n    ValueError: If n is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return n * (3 * n - 2)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpduyse57s.py\", line 5, in <module>\n    assert is_octagonal(5) == 65\nNameError: name 'is_octagonal' is not defined", "passed": false}
{"task_id": 60, "requirement": "Code Standard", "completion": "def max_len_sub(sequence: list[int], diff: int) -> int:\n    \"\"\"\n    Finds the maximum length of a subsequence with a given difference between adjacent elements.\n\n    :param sequence: A list of integers representing the input array.\n    :param diff: An integer representing the difference between adjacent elements in the subsequence.\n    :return: An integer representing the maximum length of the subsequence.\n    :raises TypeError: If sequence is not a list or diff is not an integer.\n    \"\"\"\n    if not isinstance(sequence, list):\n        raise TypeError(\"The first argument must be a list.\")\n    if not isinstance(diff, int):\n        raise TypeError(\"The second argument must be an integer.\")\n    \n    if not sequence:\n        return 0\n    \n    max_length = 1  # At least one element can form a subsequence of length 1\n    \n    for i in range(len(sequence)):\n        current_length = 1\n        for j in range(i + 1, len(sequence)):\n            if abs(sequence[j] - sequence[i]) == diff:\n                current_length += 1\n                i = j  # Move i to j to continue the sequence from the new end\n            else:\n                break  # If the condition fails, break and start checking from i+1\n        max_length = max(max_length, current_length)\n    \n    return max_length\n\n# Example usage:\narr = [1, 2, 3, 4, 5, 3, 2, 1]\nprint(max_len_sub(arr, 1))  # Output should be the length of the longest subsequence with the required property\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpusbq551b.py\", line 22, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nAssertionError", "passed": false}

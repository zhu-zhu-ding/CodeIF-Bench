{"task_id": 11, "requirement": "Edge Case Handling", "completion": "def remove_occ(s, char):\n    \"\"\"\n    Removes the first and last occurrences of a specified character from the string.\n\n    Parameters:\n    s (str): The input string.\n    char (str): The character to be removed.\n\n    Returns:\n    str: The modified string with the first and last occurrences of the specified character removed.\n    Raises:\n    ValueError: If the second parameter is not a single character.\n    \"\"\"\n    \n    # Check if the second parameter is a single character\n    if not isinstance(char, str) or len(char) != 1:\n        raise ValueError('Second parameter must be a single character.')\n\n    # Find the indices of the first and last occurrences of the character\n    try:\n        first_index = s.index(char)\n        last_index = s.rindex(char)\n    except ValueError:\n        # If the character is not found in the string, return the original string\n        return s\n\n    # Handle cases where the first and last index are the same (i.e., only one occurrence)\n    if first_index == last_index:\n        return \"\"\n\n    # Construct the new string by excluding the first and last occurrences of the character\n    if first_index > 0:\n        start = s[:first_index]\n    else:\n        start = \"\"\n\n    if last_index < len(s) - 1:\n        end = s[last_index + 1:]\n    else:\n        end = \"\"\n\n    return start + end\n\n# Example usage:\ninput_string = \"hello world\"\ncharacter_to_remove = \"l\"\nresult = remove_occ(input_string, character_to_remove)\nprint(result)  # Output should be \"heo wor\"\n\n# Example with non-existent character\ninput_string = \"hello world\"\ncharacter_to_remove = \"z\"\nresult = remove_occ(input_string, character_to_remove)\nprint(result)  # Output should be \"hello world\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpde8mpge6.py\", line 36, in <module>\n    assert remove_occ(\"abcda\",\"a\") == \"bcd\"\nAssertionError", "passed": false}
{"task_id": 12, "requirement": "Edge Case Handling", "completion": "def sort_matrix(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order based on the sum of its rows.\n\n    :param matrix: A list of lists representing the matrix.\n    :return: The sorted matrix.\n    \"\"\"\n    # Check if the input is a list of lists\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise TypeError(\"Input must be a list of lists.\")\n    \n    # Check if each element in the matrix is an integer\n    if not all(isinstance(item, int) for row in matrix for item in row):\n        raise TypeError(\"All elements in the matrix must be integers.\")\n    \n    # Handle empty matrix\n    if len(matrix) == 0:\n        return []\n    \n    # Use sorted with a key that calculates the sum of each row\n    sorted_matrix = sorted(matrix, key=sum)\n    return sorted_matrix\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_matrix = [\n        [3, 5, 1],\n        [2, 2, 2],\n        [4, 0, 1]\n    ]\n    \n    sorted_matrix = sort_matrix(example_matrix)\n    print(\"Sorted Matrix:\")\n    for row in sorted_matrix:\n        print(row)\n\n    # Test with an empty matrix\n    empty_matrix = []\n    sorted_empty_matrix = sort_matrix(empty_matrix)\n    print(\"\\nEmpty Matrix Sorted:\")\n    for row in sorted_empty_matrix:\n        print(row)\n", "result": "passed", "passed": true}
{"task_id": 13, "requirement": "Edge Case Handling", "completion": "from collections import Counter\n\ndef count_common(word_freq_dict):\n    \"\"\"\n    Count and return the most common words in a given dictionary.\n    \n    :param word_freq_dict: A dictionary with words as keys and their frequencies as values.\n    :return: A list of tuples (word, frequency) for the most common words.\n    \"\"\"\n    if not isinstance(word_freq_dict, dict):\n        raise TypeError(\"Input must be a dictionary.\")\n    \n    # Convert the dictionary to a list of tuples for processing\n    word_list = list(word_freq_dict.items())\n    \n    # Check if the list is empty\n    if not word_list:\n        return []\n    \n    # Use Counter to get the most common elements\n    counter = Counter(word_list)\n    most_common_words = counter.most_common()\n    \n    return most_common_words\n\n# Example usage:\nword_freq = {\n    'apple': 4,\n    'banana': 2,\n    'cherry': 5,\n    'date': 1,\n    'elderberry': 3\n}\n\ncommon_words = count_common(word_freq)\nprint(common_words)\n\n# Handling an empty input\nempty_input = {}\nempty_result = count_common(empty_input)\nprint(empty_result)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpt88aa2g7.py\", line 28, in <module>\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n  File \"/tmp/tmpt88aa2g7.py\", line 4, in count_common\n    raise TypeError(\"Input must be a dictionary.\")\nTypeError: Input must be a dictionary.", "passed": false}
{"task_id": 14, "requirement": "Edge Case Handling", "completion": "def find_volume(base, base_height, prism_height):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base (float): The base length of the triangular face.\n    base_height (float): The height of the triangular face.\n    prism_height (float): The height (or length) of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \n    Raises:\n    ValueError: If any of the inputs are non-positive or non-numeric.\n    \"\"\"\n    # Validate the inputs\n    if not all(isinstance(i, (int, float)) and i > 0 for i in [base, base_height, prism_height]):\n        raise ValueError('All dimensions must be positive numbers.')\n\n    # Calculate the area of the triangular base\n    base_area = 0.5 * base * base_height\n    \n    # Calculate the volume of the prism\n    volume = base_area * prism_height\n    \n    return volume\n\n# Example usage:\nbase_length = 5.0  # example base length of the triangle\ntriangle_height = 4.0  # example height of the triangle\nprism_height = 10.0  # example height of the prism\n\ntry:\n    volume = find_volume(base_length, triangle_height, prism_height)\n    print(f\"The volume of the triangular prism is {volume:.2f} cubic units.\")\nexcept ValueError as e:\n    print(e)\n\n# Edge case examples\ntry:\n    volume = find_volume(0.0001, 0.0001, 0.0001)\n    print(f\"The volume of the triangular prism is {volume:.2f} cubic units.\")\nexcept ValueError as e:\n    print(e)\n\ntry:\n    volume = find_volume(-1, 4.0, 10.0)\n    print(f\"The volume of the triangular prism is {volume:.2f} cubic units.\")\nexcept ValueError as e:\n    print(e)\n\ntry:\n    volume = find_volume(5.0, -4.0, 10.0)\n    print(f\"The volume of the triangular prism is {volume:.2f} cubic units.\")\nexcept ValueError as e:\n    print(e)\n\ntry:\n    volume = find_volume(5.0, 4.0, -10.0)\n    print(f\"The volume of the triangular prism is {volume:.2f} cubic units.\")\nexcept ValueError as e:\n    print(e)\n\ntry:\n    volume = find_volume(\"5\", \"4\", \"10\")\n    print(f\"The volume of the triangular prism is {volume:.2f} cubic units.\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpzdh9wbrv.py\", line 48, in <module>\n    assert find_volume(5.5, 3.2, 4.1) == 72.16\nAssertionError", "passed": false}
{"task_id": 15, "requirement": "Edge Case Handling", "completion": "def split_lowerstring(s):\n    \"\"\"\n    Splits the given string at lowercase letters.\n    \n    Parameters:\n    s (str): The input string to be split.\n    \n    Returns:\n    list: A list of substrings split at lowercase letters. Returns an empty list if no lowercase letters are found.\n    \"\"\"\n    # Initialize an empty list to store the resulting substrings\n    result = []\n    # Initialize an empty string to build the current substring\n    current_substring = ''\n    \n    for char in s:\n        if char.islower():\n            # If the character is lowercase, add the current substring to the result list\n            if current_substring:\n                result.append(current_substring)\n                current_substring = ''\n            # Start a new substring with the current character\n            current_substring += char\n        else:\n            # Otherwise, append the character to the current substring\n            current_substring += char\n    \n    # Add the last substring to the result list\n    if current_substring:\n        result.append(current_substring)\n    \n    # Return an empty list if no lowercase letters were found\n    return result if any(char.islower() for char in s) else []\n\n# Example usage:\ninput_string = \"HelloWorld2023Python\"\noutput = split_lowerstring(input_string)\nprint(output)  # Output: ['H', 'W', '2023P', 'y', 't', 'h', 'o', 'n']\n\ninput_string_no_lowercase = \"HELLO2023WORLD\"\noutput = split_lowerstring(input_string_no_lowercase)\nprint(output)  # Output: []\n", "result": "failed: File \"/tmp/tmpvhdeq728.py\", line 33\n    try: split_lowerstring(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 16, "requirement": "Edge Case Handling", "completion": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    This function searches for sequences of lowercase letters joined with an underscore in the given text.\n    \n    Args:\n    text (str): The input string to search within.\n    \n    Returns:\n    str: 'Found a match!' if any valid sequences are found, otherwise 'Not matched!'.\n    \"\"\"\n    # Check if the input is a string\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Regular expression pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    \n    # Find all matches in the text\n    matches = re.findall(pattern, text)\n    \n    # Return appropriate message based on whether any matches were found\n    if matches:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\nexample_text = \"Here is an example_text_to_match and another_example_sequence but notThisOne\"\nprint(text_lowercase_underscore(example_text))  # Output: Found a match!\n\nempty_text = \"\"\nprint(text_lowercase_underscore(empty_text))  # Output: Not matched!\n", "result": "passed", "passed": true}
{"task_id": 17, "requirement": "Edge Case Handling", "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Parameters:\n    side_length (int): The length of one side of the square.\n\n    Returns:\n    int: The perimeter of the square.\n\n    Raises:\n    ValueError: If the input is negative.\n    \"\"\"\n    # Check if the side length is a non-negative integer\n    if not isinstance(side_length, int) or side_length < 0:\n        raise ValueError(\"Side length must be a non-negative integer.\")\n    \n    # Calculate the perimeter\n    perimeter = 4 * side_length\n    return perimeter\n\n# Example usage:\ntry:\n    side_length = 5  # Example side length of the square\n    perimeter = square_perimeter(side_length)\n    print(f\"The perimeter of the square with side length {side_length} is {perimeter}\")\nexcept ValueError as e:\n    print(e)\n\n# Edge case: side length is zero\nside_length_zero = 0\ntry:\n    perimeter_zero = square_perimeter(side_length_zero)\n    print(f\"The perimeter of the square with side length {side_length_zero} is {perimeter_zero}\")\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 18, "requirement": "Edge Case Handling", "completion": "def remove_dirty_chars(source, chars_to_remove):\n    \"\"\"\n    Removes characters from the source string that are present in the chars_to_remove string.\n\n    :param source: The original string from which characters will be removed.\n    :param chars_to_remove: A string containing characters to be removed from the source string.\n    :return: A new string with characters removed or the original string if chars_to_remove is empty.\n    \"\"\"\n    # Check if inputs are strings\n    assert isinstance(source, str), \"Input source must be a string.\"\n    assert isinstance(chars_to_remove, str), \"Input chars_to_remove must be a string.\"\n\n    # Check if both strings contain only alphabetic characters\n    if not source.isalpha() or not chars_to_remove.isalpha():\n        raise ValueError(\"Input strings must only contain alphabetic characters.\")\n\n    # Create a translation table for str.translate() method\n    if chars_to_remove:\n        translation_table = str.maketrans('', '', chars_to_remove)\n        cleaned_string = source.translate(translation_table)\n    else:\n        cleaned_string = source\n\n    return cleaned_string\n\n# Example usage:\nsource = \"Hello, World!\"\nchars_to_remove = \",!\"\ncleaned_source = remove_dirty_chars(source, chars_to_remove)\nprint(cleaned_source)  # Output: Hello World\n\n# Test with empty chars_to_remove\ncleaned_source_empty = remove_dirty_chars(source, \"\")\nprint(cleaned_source_empty)  # Output: Hello, World!\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp16gamlth.py\", line 18, in <module>\n    cleaned_source = remove_dirty_chars(source, chars_to_remove)\n  File \"/tmp/tmp16gamlth.py\", line 7, in remove_dirty_chars\n    raise ValueError(\"Input strings must only contain alphabetic characters.\")\nValueError: Input strings must only contain alphabetic characters.", "passed": false}
{"task_id": 19, "requirement": "Edge Case Handling", "completion": "def test_duplicate(arr):\n    \"\"\"\n    Check if the given list of integers contains any duplicate elements.\n\n    Args:\n    arr (list): A list of integers.\n\n    Returns:\n    bool: True if there is at least one duplicate element, False otherwise.\n    \n    Raises:\n    TypeError: If the input is not a list.\n    ValueError: If the input is not a list of integers.\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n\n    # Check for non-integer elements in the list\n    if not all(isinstance(x, int) for x in arr):\n        raise ValueError(\"Input must be a list of integers\")\n\n    # Handle edge cases\n    if len(arr) < 2:\n        return False\n\n    # Convert the list to a set and compare lengths\n    return len(arr) != len(set(arr))\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(test_duplicate([]))               # Output: False\n    print(test_duplicate([1]))              # Output: False\n    print(test_duplicate([1, 2, 3, 4]))     # Output: False\n    print(test_duplicate([1, 2, 3, 3]))     # Output: True\n    print(test_duplicate([7, 8, 9, 7]))     # Output: True\n    print(test_duplicate(['a', 1, 2]))      # Raises ValueError\n    print(test_duplicate('not a list'))     # Raises TypeError\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5knyunvp.py\", line 21, in <module>\n    print(test_duplicate(['a', 1, 2]))      # Raises ValueError\n  File \"/tmp/tmp5knyunvp.py\", line 7, in test_duplicate\n    raise ValueError(\"Input must be a list of integers\")\nValueError: Input must be a list of integers", "passed": false}
{"task_id": 20, "requirement": "Edge Case Handling", "completion": "def is_woodall(number):\n    \"\"\"\n    Check if the given number is a Woodall number.\n    \n    Args:\n    number (int): The number to check.\n    \n    Returns:\n    bool: True if the number is a Woodall number, False otherwise.\n    \"\"\"\n    if not isinstance(number, int):\n        raise TypeError(\"Input must be an integer.\")\n    \n    if number < 0:\n        return False  # Negative numbers cannot be Woodall numbers\n    \n    # Upper bound for n: Since W_n = n * 2^n - 1, we can estimate n\n    # from the inequality: n * 2^n - 1 <= number\n    max_n = 0\n    current_value = 1\n    while current_value < number:\n        current_value *= 2\n        max_n += 1\n    \n    for n in range(max_n + 1):\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number == number:\n            return True\n        if woodall_number > number:\n            break\n    \n    return False\n\n# Example usage:\nprint(is_woodall(7))      # True, because 7 = 1 * 2^3 - 1\nprint(is_woodall(23))     # False, 23 is not a Woodall number\nprint(is_woodall(4095))   # True, because 4095 = 14 * 2^14 - 1\nprint(is_woodall(0))      # False, 0 is not a Woodall number\nprint(is_woodall(-5))     # False, negative numbers are not Woodall numbers\nprint(is_woodall(10**18)) # Handling very large numbers\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6fr3t9sz.py\", line 39, in <module>\n    assert is_woodall(1) == True\nAssertionError", "passed": false}
{"task_id": 21, "requirement": "Edge Case Handling", "completion": "def multiples_of_num(n, m):\n    \"\"\"\n    Generates a list of the first m multiples of n.\n\n    Parameters:\n    n (int): The base number.\n    m (int): The number of multiples to generate.\n\n    Returns:\n    list: A list containing the first m multiples of n.\n\n    Raises:\n    ValueError: If either n or m is negative.\n    \"\"\"\n    if n < 0 or m < 0:\n        raise ValueError(\"Both n and m must be non-negative.\")\n    \n    return [i * n for i in range(1, m + 1)]\n\n# Example usage:\nif __name__ == \"__main__\":\n    n = 5  # Base number\n    m = 7  # Number of multiples to generate\n    print(multiples_of_num(n, m))  # Output: [5, 10, 15, 20, 25, 30, 35]\n\n    # Edge case where m is zero\n    m = 0\n    print(multiples_of_num(n, m))  # Output: []\n\n    # Negative inputs should raise an error\n    try:\n        n = -5\n        m = 7\n        print(multiples_of_num(n, m))\n    except ValueError as e:\n        print(e)  # Output: Both n and m must be non-negative.\n\n    try:\n        n = 5\n        m = -7\n        print(multiples_of_num(n, m))\n    except ValueError as e:\n        print(e)  # Output: Both n and m must be non-negative.\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpnh_u6eh1.py\", line 26, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "requirement": "Edge Case Handling", "completion": "def find_first_duplicate(nums):\n    if not isinstance(nums, list):\n        raise TypeError(\"Input must be a list of integers.\")\n    \n    if len(nums) == 0:\n        return -1\n    \n    seen = set()\n    \n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    \n    return None\n\n# Example usage:\nnums = [2, 3, 1, 4, 5, 6, 7, 8, 9, 2]\nprint(find_first_duplicate(nums))  # Output should be 2\n\nempty_list = []\nprint(find_first_duplicate(empty_list))  # Output should be -1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8pypxb_n.py\", line 18, in <module>\n    assert find_first_duplicate([1, 2, 3, 4])==-1\nAssertionError", "passed": false}
{"task_id": 23, "requirement": "Edge Case Handling", "completion": "def maximum_sum(list_of_lists):\n    \"\"\"\n    Finds the maximum sum of elements in a list of lists.\n    \n    Parameters:\n    list_of_lists (list): A list containing multiple sublists.\n    \n    Returns:\n    int: The maximum sum of elements found in any of the sublists, or 0 if the input is empty or all sublists are empty.\n    \"\"\"\n    if not list_of_lists:  # Check if the input list is empty\n        return 0\n    \n    max_sum = float('-inf')  # Initialize max_sum to negative infinity\n    \n    for sublist in list_of_lists:\n        if not sublist:  # Check if the sublist is empty\n            continue\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum if max_sum != float('-inf') else 0\n\n# Example usage:\nexample_list = [[1, 2, 3], [], [4, 5, 6], [10, -1, 2]]\nprint(maximum_sum(example_list))  # Output should be 15 (from [4, 5, 6])\n\nempty_list = []\nprint(maximum_sum(empty_list))  # Output should be 0\n", "result": "failed: File \"/tmp/tmphom_qshx.py\", line 21\n    try: maximum_sum([[1, 2], [3, 'a']]); assert False, 'Expected TypeError' except TypeError: pass\n                                                                             ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 24, "requirement": "Edge Case Handling", "completion": "def binary_to_decimal(binary_str):\n    \"\"\"\n    Convert a binary number (given as a string) to its decimal equivalent.\n    \n    :param binary_str: A string representing a binary number.\n    :return: An integer representing the decimal equivalent of the binary number.\n    \"\"\"\n    # Check if the input string is empty\n    if len(binary_str) == 0:\n        return 0\n    \n    # Initialize the decimal value\n    decimal_value = 0\n    \n    # Iterate over each character in the binary string\n    for index, digit in enumerate(reversed(binary_str)):\n        if digit not in ('0', '1'):\n            raise ValueError(\"Invalid binary number\")\n        \n        # Calculate the decimal value\n        decimal_value += int(digit) * (2 ** index)\n    \n    return decimal_value\n\n# Example usage:\nbinary_number = \"\"\ndecimal_number = binary_to_decimal(binary_number)\nprint(f\"The decimal equivalent of {binary_number} is {decimal_number}\")\n\nbinary_number = \"1101\"\ndecimal_number = binary_to_decimal(binary_number)\nprint(f\"The decimal equivalent of {binary_number} is {decimal_number}\")\n", "result": "failed: File \"/tmp/tmp5ou2pxd2.py\", line 24\n    try: binary_to_decimal('102'); assert False, 'Expected ValueError' except ValueError as e: assert str(e) == 'Invalid binary number'\n                                                                       ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 25, "requirement": "Edge Case Handling", "completion": "from functools import reduce\nfrom operator import mul\n\ndef find_product(arr):\n    if not isinstance(arr, list) or not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"Input must be a list of integers\")\n    \n    # Convert the list to a set to get unique elements and check if it is empty\n    unique_elements = set(arr)\n    \n    # Return 1 if there are no elements, otherwise calculate the product\n    if len(unique_elements) == 0:\n        return 1\n    else:\n        product = reduce(mul, unique_elements, 1)\n        return product\n\n# Example usage:\narr = [1, 2, 3, 4, 2, 3, 5]\nprint(find_product(arr))  # Output should be 60 (1 * 2 * 3 * 4 * 5)\n\n# Test with an empty list\nempty_arr = []\nprint(find_product(empty_arr))  # Output should be 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpuajqog5z.py\", line 20, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "requirement": "Edge Case Handling", "completion": "def check_k_elements(tuples_list, k):\n    \"\"\"\n    Check if each tuple in the given list has exactly k elements.\n\n    :param tuples_list: List of tuples to be checked.\n    :param k: The number of elements that each tuple should have.\n    :return: True if all tuples have exactly k elements, False otherwise.\n    :raises TypeError: If the input is not a list of tuples or if k is not an integer.\n    \"\"\"\n    # Check if k is an integer\n    if not isinstance(k, int):\n        raise TypeError(\"k must be an integer\")\n\n    # Check if tuples_list is a list\n    if not isinstance(tuples_list, list):\n        raise TypeError(\"Input must be a list of tuples\")\n\n    # Check if each element in the list is a tuple\n    if not all(isinstance(tup, tuple) for tup in tuples_list):\n        raise TypeError(\"All elements in the list must be tuples\")\n\n    # Check if each tuple has exactly k elements\n    for tup in tuples_list:\n        if len(tup) != k:\n            return False\n    return True\n\n# Example usage:\nexample_tuples = [(1, 2), (3, 4, 5), (6, 7)]\nk = 2\n\nresult = check_k_elements(example_tuples, k)\nprint(f\"All tuples have {k} elements: {result}\")\n\nempty_tuples = []\nk = 2\n\ntry:\n    result = check_k_elements(empty_tuples, k)\n    print(f\"All tuples have {k} elements: {result}\")\nexcept TypeError as e:\n    print(e)\n\ninvalid_tuples = [(), (1,), (2, 3)]\nk = 2\n\ntry:\n    result = check_k_elements(invalid_tuples, k)\n    print(f\"All tuples have {k} elements: {result}\")\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8p_dg8q8.py\", line 35, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "requirement": "Edge Case Handling", "completion": "def remove(strings):\n    \"\"\"\n    Removes all digits from each string in the given list of strings.\n\n    :param strings: List of strings from which digits need to be removed.\n    :return: A new list of strings with all digits removed.\n    :raises TypeError: If the input is not a list or if any element in the list is not a string.\n    \"\"\"\n    if not isinstance(strings, list):\n        raise TypeError(\"Input must be a list\")\n    \n    cleaned_strings = []\n    for s in strings:\n        if not isinstance(s, str):\n            raise TypeError(\"All elements in the list must be strings\")\n        \n        # Remove digits from the string\n        cleaned_string = ''.join(filter(lambda x: not x.isdigit(), s))\n        cleaned_strings.append(cleaned_string)\n    \n    return cleaned_strings\n\n# Example usage:\nexample_list = [\"hello123\", \"world456\", \"test789\", \"12345\", \"\", \"no_digits_here\"]\ntry:\n    result = remove(example_list)\n    print(result)  # Output: ['hello', 'world', 'test', '', 'no_digits_here']\nexcept TypeError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 28, "requirement": "Edge Case Handling", "completion": "def binomial_coeff(n, k):\n    # Check for invalid inputs\n    if n < 0 or k < 0:\n        raise ValueError(\"Inputs must be non-negative.\")\n    if k > n:\n        raise ValueError(\"k must not be greater than n.\")\n    \n    # If k is 0 or n, the binomial coefficient is 1\n    if k == 0 or k == n:\n        return 1\n    \n    # If k is more than n - k, use n - k instead to minimize the number of multiplications\n    if k > n - k:\n        k = n - k\n    \n    # Initialize result\n    result = 1\n    \n    # Calculate value of [n*(n-1)*---*(n-k+1)] / [k*(k-1)*---*1]\n    for i in range(k):\n        result *= (n - i)\n        result //= (i + 1)\n    \n    return result\n\n# Example usage:\nprint(binomial_coeff(5, 2))  # Output: 10\nprint(binomial_coeff(10, 3)) # Output: 120\nprint(binomial_coeff(5, 0))  # Output: 1\nprint(binomial_coeff(5, 5))  # Output: 1\nprint(binomial_coeff(0, 0))  # Output: 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmilesd6d.py\", line 30, in <module>\n    try: binomial_coeff(-1, 2)\n  File \"/tmp/tmpmilesd6d.py\", line 4, in binomial_coeff\n    raise ValueError(\"Inputs must be non-negative.\")\nValueError: Inputs must be non-negative.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpmilesd6d.py\", line 31, in <module>\n    except ValueError as e: assert str(e) == 'Inputs must be non-negative and k must not be greater than n'\nAssertionError", "passed": false}
{"task_id": 29, "requirement": "Edge Case Handling", "completion": "from collections import Counter\n\ndef get_odd_occurrence(arr):\n    # Check if the input is a list and contains only integers\n    if not isinstance(arr, list) or not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"Input must be a list of integers\")\n    \n    # Check if the list is empty\n    if len(arr) == 0:\n        return None\n    \n    # Count the occurrences of each element in the array\n    counts = Counter(arr)\n    \n    # Iterate through the counted items\n    for element, count in counts.items():\n        # Check if the count is odd\n        if count % 2 != 0:\n            return element\n    \n    # If no element has an odd occurrence, return None\n    return None\n\n# Example usage:\narr = [1, 2, 3, 2, 3, 1, 3]\nprint(get_odd_occurrence(arr))  # Output should be 3\n\nempty_arr = []\nprint(get_odd_occurrence(empty_arr))  # Output should be None\n\ninvalid_input = \"not a list\"\ntry:\n    print(get_odd_occurrence(invalid_input))\nexcept TypeError as e:\n    print(e)  # Output should be \"Input must be a list of integers\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjc561ess.py\", line 28, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "requirement": "Edge Case Handling", "completion": "def count_substring_with_equal_ends(s):\n    \"\"\"\n    Counts all substrings of the input string s that start and end with the same character.\n\n    :param s: Input string\n    :return: The number of substrings that start and end with the same character\n    \"\"\"\n    n = len(s)\n    \n    # Return 0 if the string is empty\n    if n == 0:\n        return 0\n\n    count = 0\n\n    # Iterate through each character in the string\n    for i in range(n):\n        # Count substrings starting from index i\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n\n    return count\n\n# Example usage:\ninput_string = \"\"\nresult = count_substring_with_equal_ends(input_string)\nprint(f\"Number of substrings starting and ending with the same character: {result}\")\n\ninput_string = \"abca\"\nresult = count_substring_with_equal_ends(input_string)\nprint(f\"Number of substrings starting and ending with the same character: {result}\")\n", "result": "failed: File \"/tmp/tmp1qz9p7jb.py\", line 25\n    try: count_substring_with_equal_ends(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                                  ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 31, "requirement": "Edge Case Handling", "completion": "from collections import Counter\nimport heapq\n\ndef func(nums_list, k):\n    \"\"\"\n    Finds the top k integers that occur most frequently from given lists of sorted and distinct integers.\n    \n    :param nums_list: List of lists containing sorted and distinct integers.\n    :param k: The number of top frequent integers to return.\n    :return: A list of the top k integers with their highest frequency. Returns an empty list if all input lists are empty.\n    \"\"\"\n    # Check if all input lists are empty\n    if not any(nums_list):\n        return []\n\n    # Flatten the list of lists into a single list\n    all_nums = [num for sublist in nums_list for num in sublist]\n    \n    # Count the frequency of each integer\n    freq_counter = Counter(all_nums)\n    \n    # Return an empty list if there are no distinct integers\n    if not freq_counter:\n        return []\n    \n    # Use a min heap to keep track of the top k elements based on frequency\n    # We use negative frequencies because heapq is a min-heap by default\n    heap = []\n    \n    for num, freq in freq_counter.items():\n        if len(heap) < k:\n            heapq.heappush(heap, (-freq, num))\n        elif -freq > heap[0][0]:\n            heapq.heapreplace(heap, (-freq, num))\n    \n    # Extract the top k elements from the heap\n    top_k = [item[1] for item in heap]\n    \n    return top_k\n\n# Example usage\nnums_list = [[], [], []]  # All lists are empty\nk = 3\nprint(func(nums_list, k))  # Output: []\n\nnums_list = [[1, 2, 3], [2, 3, 4], [4, 5, 6]]\nk = 3\nprint(func(nums_list, k))  # Output: [2, 3, 4]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpfs8pi53v.py\", line 32, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "requirement": "Edge Case Handling", "completion": "def max_prime_factors(n):\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    # Initialize the largest prime factor\n    largest_factor = -1\n    \n    # Handle the case where n is even\n    while n % 2 == 0:\n        largest_factor = 2\n        n //= 2\n    \n    # Check for odd factors starting from 3\n    factor = 3\n    while factor * factor <= n:\n        while n % factor == 0:\n            largest_factor = factor\n            n //= factor\n        factor += 2\n    \n    # If n is a prime number greater than 2\n    if n > 2:\n        largest_factor = n\n    \n    return largest_factor\n\n# Example usage:\nprint(max_prime_factors(2))  # Output should be 2\nprint(max_prime_factors(13195))  # Output should be 29\nprint(max_prime_factors(600851475143))  # Output should be 6857\n", "result": "passed", "passed": true}
{"task_id": 33, "requirement": "Edge Case Handling", "completion": "def decimal_to_binary(decimal_number):\n    \"\"\"\n    Convert a decimal number to its binary representation.\n\n    Parameters:\n    decimal_number (int): A non-negative integer to be converted to binary.\n\n    Returns:\n    str: The binary representation of the decimal number.\n    \n    Raises:\n    ValueError: If the input is not a non-negative integer.\n    \"\"\"\n    if not isinstance(decimal_number, int) or decimal_number < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    if decimal_number == 0:\n        return \"0\"\n    \n    binary_number = \"\"\n    while decimal_number > 0:\n        remainder = decimal_number % 2\n        binary_number = str(remainder) + binary_number\n        decimal_number = decimal_number // 2\n    \n    return binary_number\n\n# Example usage:\nprint(decimal_to_binary(10))  # Output: \"1010\"\nprint(decimal_to_binary(255)) # Output: \"11111111\"\nprint(decimal_to_binary(0))   # Output: \"0\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2wavqmzb.py\", line 16, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "requirement": "Edge Case Handling", "completion": "def find_missing(arr):\n    \"\"\"\n    Finds the missing number in a sorted array of integers where exactly one number\n    in the range [arr[0], arr[-1]] is missing. The array is assumed to be sorted.\n\n    :param arr: List[int] - A sorted list of integers with exactly one missing element.\n    :return: int - The missing number in the array.\n    \"\"\"\n    if not arr:\n        raise ValueError(\"Input list cannot be empty.\")\n    \n    n = len(arr)\n    left, right = 0, n - 1\n    \n    # Check if the array is sorted\n    for i in range(1, n):\n        if arr[i] < arr[i - 1]:\n            raise ValueError(\"Input list must be sorted.\")\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        # Check if the difference between the current index and the value at that index matches the expected difference\n        if arr[mid] - mid == arr[0]:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # At this point, left should point to the position where the missing number would be\n    return arr[0] + left\n\n# Example usage:\narr = [1, 2, 4, 5, 6]\nprint(find_missing(arr))  # Output: 3\n\narr = [2, 3, 4, 6, 7, 8]\nprint(find_missing(arr))  # Output: 5\n\n# Edge case: Missing number is the smallest number\narr = [4, 5, 6, 7]\nprint(find_missing(arr))  # Output: 3\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdlg2lj8u.py\", line 27, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "requirement": "Edge Case Handling", "completion": "def find_rect_num(n):\n    \"\"\"\n    Find the n-th rectangular number.\n\n    Parameters:\n    n (int): The position in the sequence of rectangular numbers.\n\n    Returns:\n    int: The n-th rectangular number.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    # For n = 1, the result should be 2\n    if n == 1:\n        return 2\n    \n    return n * (n + 1)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test the function with some values\n    print(\"The 1st rectangular number is:\", find_rect_num(1))  # Output should be 2\n    print(\"The 5th rectangular number is:\", find_rect_num(5))  # Output should be 30\n    print(\"The 7th rectangular number is:\", find_rect_num(7))  # Output should be 56\n", "result": "passed", "passed": true}
{"task_id": 37, "requirement": "Edge Case Handling", "completion": "def sort_mixed_list(mixed_list):\n    \"\"\"\n    Sorts a mixed list of integers and strings.\n\n    Args:\n    mixed_list (list): A list containing integers and strings.\n\n    Returns:\n    list: A sorted list with integers and strings in ascending order.\n    \"\"\"\n    def custom_sort_key(item):\n        \"\"\"\n        Converts items to integers if possible, otherwise returns the item itself.\n        \"\"\"\n        try:\n            # Try to convert the item to an integer\n            return int(item)\n        except ValueError:\n            # If conversion fails, return the item itself\n            return item\n\n    # Use the sorted function with the custom key\n    sorted_list = sorted(mixed_list, key=custom_sort_key)\n    return sorted_list\n\n# Example usage:\nmixed_list = [10, \"2\", \"3\", 5, \"1\", \"4\"]\nsorted_list = sort_mixed_list(mixed_list)\nprint(sorted_list)  # Output: [1, 2, 3, 4, 5, 10]\n\n# Handling an empty list\nempty_list = []\nsorted_empty_list = sort_mixed_list(empty_list)\nprint(sorted_empty_list)  # Output: []\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwv2qiwv1.py\", line 20, in <module>\n    assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n  File \"/tmp/tmpwv2qiwv1.py\", line 10, in sort_mixed_list\n    sorted_list = sorted(mixed_list, key=custom_sort_key)\nTypeError: '<' not supported between instances of 'str' and 'int'", "passed": false}
{"task_id": 38, "requirement": "Edge Case Handling", "completion": "def div_even_odd(numbers):\n    # Initialize variables to store the first even and odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Iterate through the list to find the first even and odd numbers\n    for num in numbers:\n        if num % 2 == 0 and (first_even is None or num == 0):\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n    \n    # Check if both first_even and first_odd are found\n    if first_even is not None and first_odd is not None:\n        # Perform the division and return the result\n        return first_even / first_odd\n    else:\n        # Handle the case where either or both numbers are not found\n        if first_even is None:\n            return \"No even number found\"\n        elif first_even == 0 and first_odd is not None:\n            return 0\n        elif first_odd is None:\n            return \"No odd number found\"\n        else:\n            return \"Both even and odd numbers found but cannot perform division\"\n\n# Example usage\nnumbers = [5, 3, 2, 8, 10]\nprint(div_even_odd(numbers))  # Output should be 2.0\n\nnumbers = [7, 9, 11]\nprint(div_even_odd(numbers))  # Output should be \"No even number found\"\n\nnumbers = [2, 4, 6]\nprint(div_even_odd(numbers))  # Output should be \"No odd number found\"\n\nnumbers = [2, 4, 6, 1, 3]\nprint(div_even_odd(numbers))  # Output should be 2.0\n\nnumbers = [2, 4, 6, 1, 3, 5]\nprint(div_even_odd(numbers))  # Output should be 2.0\n\nnumbers = [0, 4, 6, 1, 3, 5]\nprint(div_even_odd(numbers))  # Output should be 0\n\nnumbers = [2, 0, 6, 1, 3, 5]\nprint(div_even_odd(numbers))  # Output should be 0\n\nnumbers = [4, 6, 1, 3, 5]\nprint(div_even_odd(numbers))  # Output should be 4.0\n", "result": "failed: File \"/tmp/tmpo6_6efuf.py\", line 46\n    try: div_even_odd([2, 4, 6]); assert False; except ValueError as e: assert str(e) == 'List must contain at least one even and one odd number.'\n                                                ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 39, "requirement": "Edge Case Handling", "completion": "from collections import Counter\n\ndef rearrange_string(s):\n    # Check if the input is a string and contains only lowercase letters\n    if not isinstance(s, str) or not s.islower():\n        raise ValueError(\"Input must be a non-empty string consisting only of lowercase letters.\")\n    \n    # Count the frequency of each character in the string\n    char_count = Counter(s)\n    \n    # Check if any character appears more than half the length of the string\n    max_char_count = max(char_count.values())\n    if max_char_count > (len(s) + 1) // 2:\n        return \"\"\n    \n    # If all characters are the same, return an empty string\n    if len(set(s)) == 1:\n        return \"\"\n    \n    # If there's only one unique character or all other characters appear less frequently,\n    # it's always possible to rearrange the string as required.\n    if len(set(s)) == 1 or (max_char_count == (len(s) + 1) // 2 and len(set(s)) == 2):\n        return \"\"\n    \n    # Try to place the most frequent character first\n    result = []\n    for i in range(len(s)):\n        if s[i] != s[(i - 1) % len(s)]:\n            result.append(s[i])\n    \n    # If we have exhausted the string and haven't found a valid rearrangement\n    if len(result) != len(s):\n        return \"\"\n    \n    return ''.join(result)\n\n# Example usage:\nprint(rearrange_string(\"aabbcc\"))  # Output: \"abacbc\" or some valid rearrangement\nprint(rearrange_string(\"aaabc\"))   # Output: \"\"\nprint(rearrange_string(\"abc\"))     # Output: \"abc\"\nprint(rearrange_string(\"a\"))       # Output: \"\"\nprint(rearrange_string(\"aab\"))     # Output: \"aba\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpeid8wrmw.py\", line 34, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "requirement": "Edge Case Handling", "completion": "from collections import Counter\n\ndef freq_element(nested_list):\n    # Check if the input is a list of lists\n    if not isinstance(nested_list, list) or not all(isinstance(sublist, list) for sublist in nested_list):\n        raise TypeError(\"Input must be a list of lists\")\n    \n    # Flatten the list of lists into a single list\n    flat_list = [item for sublist in nested_list for item in sublist]\n    \n    # Use Counter to count the frequency of each element\n    frequency_counter = Counter(flat_list)\n    \n    # Return the frequency counter as a dictionary\n    return dict(frequency_counter)\n\n# Example usage:\nnested_lists = [[], [1, 2, 3], [4, 5, 6], [1, 2, 7], [8, 9, 10]]\nresult = freq_element(nested_lists)\nprint(result)  # Output: {1: 2, 2: 2, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1}\n\nempty_nested_lists = []\nresult_empty = freq_element(empty_nested_lists)\nprint(result_empty)  # Output: {}\n", "result": "failed: File \"/tmp/tmp1ufuf32j.py\", line 22\n    try: freq_element('not a list'); assert False; except TypeError: assert True\n                                                   ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 41, "requirement": "Edge Case Handling", "completion": "def filter_evennumbers(numbers):\n    \"\"\"\n    Filters out even numbers from the given list.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    list: A list containing only the even numbers from the input list. Returns an empty list if the input list is empty.\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if the list is empty\n    if not numbers:\n        return []\n    \n    # Using filter() with a lambda function to filter even numbers\n    even_numbers = list(filter(lambda x: x % 2 == 0, numbers))\n    return even_numbers\n\n# Example usage:\nexample_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nfiltered_list = filter_evennumbers(example_list)\nprint(filtered_list)  # Output: [2, 4, 6, 8, 10]\n\nempty_list = []\nfiltered_empty_list = filter_evennumbers(empty_list)\nprint(filtered_empty_list)  # Output: []\n\nnon_list_input = \"not a list\"\ntry:\n    filtered_non_list = filter_evennumbers(non_list_input)\nexcept TypeError as e:\n    print(e)  # Output: Input must be a list\n", "result": "passed", "passed": true}
{"task_id": 42, "requirement": "Edge Case Handling", "completion": "def find_sum(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Handle the case where the array is empty\n    if len(arr) == 0:\n        return 0\n    \n    # Create a dictionary to keep track of the count of each element\n    element_count = {}\n    \n    # Count the occurrences of each element\n    for element in arr:\n        if element in element_count:\n            element_count[element] += 1\n        else:\n            element_count[element] = 1\n    \n    # Calculate the sum of elements that appear more than once\n    sum_of_repeated_elements = sum(element * count for element, count in element_count.items() if count > 1)\n    \n    return sum_of_repeated_elements\n\n# Example usage:\narr = [1, 2, 3, 2, 4, 5, 5, 6, 7, 8, 8]\nresult = find_sum(arr)\nprint(\"Sum of repeated elements:\", result)  # Output should be 32\n\n# Test with an empty array\nempty_arr = []\nresult_empty = find_sum(empty_arr)\nprint(\"Sum of repeated elements (empty array):\", result_empty)  # Output should be 0\n\n# Test with a non-list input\nnon_list_input = \"not a list\"\ntry:\n    result_non_list = find_sum(non_list_input)\nexcept TypeError as e:\n    print(e)  # Output should be \"Input must be a list\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdxye7hgo.py\", line 33, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Edge Case Handling", "completion": "import re\n\ndef text_match(text):\n    # Check if the input is a string\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Define the pattern for lowercase letters joined with an underscore\n    pattern = '^[a-z]+_[a-z]+$'\n    \n    # Check if the input is an empty string\n    if text == \"\":\n        return 'Not matched!'\n    \n    # Search for the pattern in the given text\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\n# Example usage:\nprint(text_match(\"hello_world\"))  # Should return True\nprint(text_match(\"Hello_World\"))  # Should return False\nprint(text_match(\"hello_world_123\"))  # Should return False\nprint(text_match(\"_hello_world\"))  # Should return False\nprint(text_match(\"hello_world_\"))  # Should return False\nprint(text_match(\"\"))  # Should return 'Not matched!'\nprint(text_match(123))  # Should raise TypeError\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp88p6jc29.py\", line 23, in <module>\n    print(text_match(123))  # Should raise TypeError\n  File \"/tmp/tmp88p6jc29.py\", line 5, in text_match\n    raise TypeError(\"Input must be a string\")\nTypeError: Input must be a string", "passed": false}
{"task_id": 44, "requirement": "Edge Case Handling", "completion": "import re\n\ndef text_match_string(input_string, word_to_match):\n    \"\"\"\n    Matches a specified word at the beginning of the input string.\n    \n    Parameters:\n    - input_string (str): The string to be searched.\n    - word_to_match (str): The word to match at the beginning of the input string.\n    \n    Returns:\n    - bool: True if the word matches at the beginning, False otherwise.\n    \"\"\"\n    # Check if the input is not a string\n    if not isinstance(input_string, str):\n        raise TypeError(\"Input must be a string.\")\n    \n    # Strip leading and trailing whitespace from the input string\n    input_string = input_string.strip()\n    \n    # Check for empty string after stripping\n    if not input_string:\n        return False\n    \n    # Create a regex pattern to match the word at the beginning of the string\n    pattern = r'^' + re.escape(word_to_match)\n    \n    # Use re.match to check if the pattern matches the start of the string\n    if re.match(pattern, input_string):\n        return True\n    else:\n        return False\n\n# Example usage:\ninput_str = \"Hello world, this is a test.\"\nword = \"Hello\"\nprint(text_match_string(input_str, word))  # Output: True\n\ninput_str = \"  Hello world, this is a test. \"\nword = \"Hello\"\nprint(text_match_string(input_str, word))  # Output: True\n\ninput_str = \"\"\nword = \"Hello\"\nprint(text_match_string(input_str, word))  # Output: False\n\ninput_str = \"     \"\nword = \"Hello\"\nprint(text_match_string(input_str, word))  # Output: False\n\ninput_str = \"This is a test, hello world.\"\nword = \"hello\"\nprint(text_match_string(input_str, word))  # Output: False\n", "result": "failed: File \"/tmp/tmpfuounv7q.py\", line 37\n    try: text_match_string(123); assert False, 'TypeError not raised' except TypeError: pass\n                                                                      ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 46, "requirement": "Edge Case Handling", "completion": "def test_distinct(numbers):\n    \"\"\"\n    Determine if all numbers in the given list are distinct.\n\n    :param numbers: List of integers or floats.\n    :return: True if all numbers are distinct, False otherwise.\n    :raises TypeError: If the input is not a list or if the list contains non-integer elements.\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list\")\n\n    # Check for non-integer elements in the list\n    if not all(isinstance(x, (int, float)) for x in numbers):\n        raise TypeError(\"All elements in the list must be integers or floats\")\n\n    # Handle edge cases\n    if len(numbers) < 2:\n        return True  # An empty list or a list with a single element is considered to have distinct elements\n\n    # Convert the list to a set and compare lengths\n    return len(numbers) == len(set(numbers))\n\n# Example usage:\nnumbers_list = [1, 2, 3, 4, 5]\nprint(test_distinct(numbers_list))  # Output: True\n\nnumbers_list_with_duplicates = [1, 2, 3, 4, 4]\nprint(test_distinct(numbers_list_with_duplicates))  # Output: False\n\nempty_list = []\nprint(test_distinct(empty_list))  # Output: True\n\nsingle_element_list = [1]\nprint(test_distinct(single_element_list))  # Output: True\n\nlist_with_floats = [1.0, 2.0, 3.0]\nprint(test_distinct(list_with_floats))  # Output: True\n\ninvalid_input = \"not a list\"\ntry:\n    print(test_distinct(invalid_input))\nexcept TypeError as e:\n    print(e)  # Output: Input must be a list\n\ninvalid_type_list = [1, \"2\", 3]\ntry:\n    print(test_distinct(invalid_type_list))\nexcept TypeError as e:\n    print(e)  # Output: All elements in the list must be integers or floats\n", "result": "passed", "passed": true}
{"task_id": 47, "requirement": "Edge Case Handling", "completion": "def compute_last_digit(a, b):\n    def last_digit_of_factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        last_digit = 1\n        for i in range(2, n + 1):\n            last_digit = (last_digit * (i % 10)) % 10\n        return last_digit\n    \n    if a > b:\n        raise ValueError('a should not be greater than b')\n    \n    # Compute the last digit of factorial(a) and factorial(b)\n    last_digit_a = last_digit_of_factorial(a)\n    last_digit_b = last_digit_of_factorial(b)\n    \n    # Handle the edge case where a equals b\n    if a == b:\n        return 1\n    \n    # Compute the last digit of b! / a!\n    if last_digit_a == 0:\n        return 0  # If factorial(a) ends in 0, the result will be 0 regardless of b\n    else:\n        # Use modular inverse to handle the division\n        mod_inverse_a = pow(last_digit_a, -1, 10)\n        return (last_digit_b * mod_inverse_a) % 10\n\n# Example usage:\nprint(compute_last_digit(3, 5))  # Output should be 0 because 5! / 3! = 20 and the last digit is 0\nprint(compute_last_digit(4, 7))  # Output should be 0 because 7! / 4! = 210 and the last digit is 0\nprint(compute_last_digit(2, 6))  # Output should be 0 because 6! / 2! = 360 and the last digit is 0\nprint(compute_last_digit(5, 5))  # Output should be 1 because 5! / 5! = 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpb28wltxk.py\", line 25, in <module>\n    print(compute_last_digit(3, 5))  # Output should be 0 because 5! / 3! = 20 and the last digit is 0\n  File \"/tmp/tmpb28wltxk.py\", line 22, in compute_last_digit\n    mod_inverse_a = pow(last_digit_a, -1, 10)\nValueError: base is not invertible for the given modulus", "passed": false}
{"task_id": 48, "requirement": "Edge Case Handling", "completion": "def odd_bit_set_number(n):\n    \"\"\"\n    Sets all odd bits of the given number n.\n    \n    :param n: An integer whose odd bits are to be set.\n    :return: An integer with all odd bits set.\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    # If the input is 0, return 1 to set the first odd bit\n    if n == 0:\n        return 1\n    \n    # Create a mask with odd bits set\n    # For example, for a 32-bit integer, the mask would be 0b01010101010101010101010101010101\n    mask = 0b01010101010101010101010101010101\n    \n    # Apply the mask using bitwise OR operation\n    result = n | mask\n    \n    return result\n\n# Example usage:\nprint(odd_bit_set_number(10))  # Output should be 21 (Binary: 10101)\nprint(odd_bit_set_number(0))   # Output should be 1\nprint(odd_bit_set_number(21))  # Output should be 21 (Already has all odd bits set)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpo3vm1qsf.py\", line 17, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "requirement": "Edge Case Handling", "completion": "def specified_element(two_d_list, index=0):\n    \"\"\"\n    Extracts the specified element (default is the first) from each sublist in a 2D list.\n\n    :param two_d_list: A list of lists where each sublist contains elements.\n    :param index: The index of the element to be extracted from each sublist. Default is 0 (first element).\n    :return: A list containing the extracted elements.\n    :raises IndexError: If the specified index is out of range for any sublist.\n    \"\"\"\n    extracted_elements = []\n    for sublist in two_d_list:\n        if index < len(sublist):\n            extracted_elements.append(sublist[index])\n        else:\n            raise IndexError(f\"Index {index} out of range for sublist {sublist}\")\n    \n    return extracted_elements\n\n# Example usage:\ntwo_d_list = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n    [10, 11, 12]\n]\n\n# Extracting the first element from each sublist\nprint(specified_element(two_d_list))  # Output: [1, 4, 7, 10]\n\n# Extracting the second element from each sublist\nprint(specified_element(two_d_list, index=1))  # Output: [2, 5, 8, 11]\n\n# Attempting to extract an out-of-range element\ntry:\n    print(specified_element(two_d_list, index=3))\nexcept IndexError as e:\n    print(e)  # Output: Index 3 out of range for sublist [1, 2, 3]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1ra2b3_w.py\", line 29, in <module>\n    try: specified_element([[1, 2], [3, 4]], 3)\n  File \"/tmp/tmp1ra2b3_w.py\", line 7, in specified_element\n    raise IndexError(f\"Index {index} out of range for sublist {sublist}\")\nIndexError: Index 3 out of range for sublist [1, 2]\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmp1ra2b3_w.py\", line 30, in <module>\n    except IndexError as e: assert str(e) == 'Index out of range for sublist'\nAssertionError", "passed": false}
{"task_id": 50, "requirement": "Edge Case Handling", "completion": "def min_length_list(list_of_lists):\n    # Check if input is a list of lists\n    if not all(isinstance(lst, list) for lst in list_of_lists):\n        raise ValueError(\"Input must be a list of lists.\")\n    \n    # Find the minimum length among all lists\n    min_length = min(len(lst) for lst in list_of_lists)\n    \n    # Filter the lists that have the minimum length\n    shortest_lists = [lst for lst in list_of_lists if len(lst) == min_length]\n    \n    # Return the first list with the minimum length\n    return (min_length, shortest_lists[0])\n\n# Example usage:\nexample_lists = [[1, 2, 3], [4, 5], [6, 7, 8, 9], [], [0]]\nprint(min_length_list(example_lists))  # Output: (0, [])\n", "result": "passed", "passed": true}
{"task_id": 52, "requirement": "Edge Case Handling", "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram. Returns 0 if either base or height is zero.\n    Raises:\n    TypeError: If either base or height is not a numerical value.\n    \"\"\"\n    # Check if inputs are numerical\n    if not isinstance(base, (int, float)) or not isinstance(height, (int, float)):\n        raise TypeError(\"Both base and height must be numerical values.\")\n    \n    # Calculate area\n    if base == 0 or height == 0:\n        return 0\n    else:\n        return base * height\n\n# Example usage:\nbase = 5.0  # Example base length\nheight = 3.0  # Example height\narea = parallelogram_area(base, height)\nprint(f\"The area of the parallelogram with base {base} and height {height} is {area}\")\n\n# Test edge cases\narea_zero_base = parallelogram_area(0, 10)\narea_zero_height = parallelogram_area(5, 0)\narea_zero_both = parallelogram_area(0, 0)\n\nprint(f\"Area with zero base: {area_zero_base}\")\nprint(f\"Area with zero height: {area_zero_height}\")\nprint(f\"Area with zero both: {area_zero_both}\")\n\n# Test invalid input types\ntry:\n    invalid_base = parallelogram_area(\"5\", 10)\nexcept TypeError as e:\n    print(e)\n\ntry:\n    invalid_height = parallelogram_area(5, \"10\")\nexcept TypeError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 53, "requirement": "Edge Case Handling", "completion": "def check_equality(s):\n    \"\"\"\n    Check if the first and last characters of a given string are equal.\n\n    Args:\n    s (str): The input string to be checked.\n\n    Returns:\n    str: 'Equal' if the first and last characters are the same, 'Not Equal' otherwise.\n    Raises:\n    TypeError: If the input is not a string.\n    \"\"\"\n    # Check if the input is a string\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n\n    # Handle empty strings\n    if len(s) == 0:\n        return 'Equal'\n\n    # Compare the first and last characters\n    return 'Equal' if s[0] == s[-1] else 'Not Equal'\n\n# Example usage:\ntest_strings = [\"\", \"radar\", \"hello\", \"a\"]\nfor test in test_strings:\n    try:\n        result = check_equality(test)\n        print(f\"The first and last characters of '{test}' are {'equal' if result == 'Equal' else 'not equal'}: {result}\")\n    except TypeError as e:\n        print(e)\n", "result": "passed", "passed": true}
{"task_id": 54, "requirement": "Edge Case Handling", "completion": "def counting_sort(arr):\n    \"\"\"\n    Sorts an array of non-negative integers using the counting sort algorithm.\n    \n    :param arr: List of non-negative integers to be sorted.\n    :return: Sorted list of integers.\n    :raises TypeError: If the input is not a list or contains non-integer elements.\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Check if the list is empty\n    if not arr:\n        return []\n    \n    # Check if all elements are non-negative integers\n    if not all(isinstance(x, int) and x >= 0 for x in arr):\n        raise TypeError(\"All elements in the list must be non-negative integers.\")\n    \n    # Find the maximum value in the array\n    max_value = max(arr)\n    \n    # Initialize count array with zeros\n    count = [0] * (max_value + 1)\n    \n    # Count each element\n    for num in arr:\n        count[num] += 1\n    \n    # Reconstruct the sorted array\n    sorted_arr = []\n    for i, cnt in enumerate(count):\n        sorted_arr.extend([i] * cnt)\n    \n    return sorted_arr\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    test_cases = [\n        [4, 2, 2, 8, 3, 3, 1],\n        [],\n        [5],\n        [-1, 2, 3],\n        [1, 2, 3, \"a\"]\n    ]\n    \n    for case in test_cases:\n        try:\n            sorted_case = counting_sort(case)\n            print(f\"Sorted: {sorted_case}\")\n        except TypeError as e:\n            print(f\"Error: {e}\")\n", "result": "passed", "passed": true}
{"task_id": 55, "requirement": "Edge Case Handling", "completion": "def tn_gp(a, r, n):\n    \"\"\"\n    Calculate the n-th term of a geometric series.\n\n    Parameters:\n    a (float): The first term of the geometric series.\n    r (float): The common ratio of the geometric series.\n    n (int): The term number to find.\n\n    Returns:\n    float: The n-th term of the geometric series.\n    \"\"\"\n    # Ensure n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    # Handle the case where the common ratio is zero\n    if r == 0:\n        return 0 if n > 1 else a\n    \n    # Calculate the n-th term\n    a_n = a * (r ** (n - 1))\n    return a_n\n\n# Example usage:\na = 3  # First term\nr = 2  # Common ratio\nn = 5  # Term number to find\n\nprint(f\"The {n}-th term of the geometric series is: {tn_gp(a, r, n)}\")\n\n# Test with r = 0\nr_zero = 0\nn_zero = 3\nprint(f\"The {n_zero}-th term of the geometric series with r = 0 is: {tn_gp(a, r_zero, n_zero)}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjngvv0bn.py\", line 20, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "requirement": "Edge Case Handling", "completion": "def check(number):\n    # Ensure the input is an integer\n    if not isinstance(number, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    # Handle edge cases\n    if number < 0:\n        return False  # Negative numbers do not make sense in this context\n    elif number == 0:\n        return False  # 0 does not satisfy the condition since 2 * 0 != 0 + 1\n    elif number < 10:\n        return False  # Single-digit numbers other than 0 do not satisfy the condition\n    \n    # Convert the number to a string to easily reverse it\n    num_str = str(number)\n    \n    # Reverse the string representation of the number\n    reversed_num_str = num_str[::-1]\n    \n    # Convert the reversed string back to an integer\n    reversed_number = int(reversed_num_str)\n    \n    # Calculate twice the reversed number\n    twice_reversed = 2 * reversed_number\n    \n    # Check if the result is one more than the original number\n    return twice_reversed == number + 1\n\n# Example usage:\nprint(check(47))  # True, because 2 * 74 (reversed 47) is 148, which is 47 + 1\nprint(check(69))  # False, because 2 * 96 (reversed 69) is 192, which is not 69 + 1\nprint(check(0))   # False, because 2 * 0 (reversed 0) is 0, which is not 0 + 1\nprint(check(-47)) # False, because negative numbers do not satisfy the condition\n", "result": "passed", "passed": true}
{"task_id": 57, "requirement": "Edge Case Handling", "completion": "def find_max_num(digits):\n    \"\"\"\n    Finds the largest number that can be formed from the given list of digits.\n\n    :param digits: A list of integers (digits).\n    :return: An integer representing the largest number that can be formed.\n    \"\"\"\n    if not digits:\n        return 0  # Handle the case where the list is empty\n    \n    # Convert each digit to a string for easy concatenation\n    str_digits = [str(digit) for digit in digits]\n    \n    # Sort the digits in descending order\n    str_digits.sort(reverse=True)\n    \n    # Join the sorted digits to form the largest number\n    max_num_str = ''.join(str_digits)\n    \n    # Convert the string back to an integer\n    max_num = int(max_num_str)\n    \n    return max_num\n\n# Example usage:\ndigits = [5, 3, 0, 7, 4]\nprint(find_max_num(digits))  # Output: 75430\n\n# Edge case: Empty list\nprint(find_max_num([]))  # Output: 0\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmporkcrx86.py\", line 18, in <module>\n    assert find_max_num([1,2,3],3) == 321\nTypeError: find_max_num() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 58, "requirement": "Edge Case Handling", "completion": "def opposite_signs(a, b):\n    \"\"\"\n    Check if two integers have opposite signs.\n\n    Parameters:\n    a (int): First integer.\n    b (int): Second integer.\n\n    Returns:\n    bool: True if the integers have opposite signs, False otherwise.\n    Raises:\n    TypeError: If either a or b is not an integer.\n    \"\"\"\n    # Check if both inputs are integers\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise TypeError(\"Both inputs must be integers\")\n\n    # Get the sign bit of both numbers\n    # The sign bit is the MSB (most significant bit)\n    # For positive numbers, the sign bit is 0\n    # For negative numbers, the sign bit is 1\n    sign_a = a >> (a.bit_length() - 1)\n    sign_b = b >> (b.bit_length() - 1)\n\n    # If the sign bits are different, the numbers have opposite signs\n    return sign_a != sign_b\n\n# Example usage:\nprint(opposite_signs(10, -5))  # Output: True\nprint(opposite_signs(-10, -5)) # Output: False\nprint(opposite_signs(10, 5))   # Output: False\nprint(opposite_signs(0, -1))   # Output: True\nprint(opposite_signs(-1, 0))   # Output: True\nprint(opposite_signs(2**63, -2**63))  # Output: True\nprint(opposite_signs(2**63, 2**63))  # Output: False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9t9ue_h5.py\", line 17, in <module>\n    print(opposite_signs(0, -1))   # Output: True\n  File \"/tmp/tmp9t9ue_h5.py\", line 9, in opposite_signs\n    sign_a = a >> (a.bit_length() - 1)\nValueError: negative shift count", "passed": false}
{"task_id": 59, "requirement": "Edge Case Handling", "completion": "import math\n\ndef is_octagonal(n):\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    # Calculate the discriminant of the quadratic equation 3n^2 - 2n - x = 0\n    a = 3\n    b = -2\n    c = -n\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is non-negative and a perfect square\n    if discriminant >= 0:\n        sqrt_discriminant = math.isqrt(discriminant)\n        if sqrt_discriminant * sqrt_discriminant == discriminant:\n            # Calculate the potential n values\n            n1 = (-b + sqrt_discriminant) / (2*a)\n            n2 = (-b - sqrt_discriminant) / (2*a)\n            \n            # Check if either n1 or n2 is a positive integer\n            if n1 > 0 and n1.is_integer():\n                return True\n            if n2 > 0 and n2.is_integer():\n                return True\n    \n    return False\n\n# Helper function to generate the nth octagonal number\ndef nth_octagonal_number(n):\n    if n < 1 or not isinstance(n, int):\n        raise ValueError(\"Input must be a positive integer.\")\n    return n * (3*n - 2)\n\n# Example usage:\nprint(is_octagonal(1))   # True, 1 is the first octagonal number\nprint(is_octagonal(8))   # True, 8 is the second octagonal number\nprint(is_octagonal(15))  # True, 15 is the third octagonal number\nprint(is_octagonal(22))  # False, 22 is not an octagonal number\nprint(nth_octagonal_number(1))  # 1, the first octagonal number\nprint(nth_octagonal_number(2))  # 8, the second octagonal number\nprint(nth_octagonal_number(3))  # 21, the third octagonal number\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1ygb7l68.py\", line 36, in <module>\n    assert is_octagonal(5) == 65\nAssertionError", "passed": false}
{"task_id": 60, "requirement": "Edge Case Handling", "completion": "def max_len_sub(arr):\n    if not isinstance(arr, list):  # Check if the input is a list\n        raise TypeError(\"Input must be a list\")\n    \n    if not arr:  # Check if the list is empty\n        return 0\n    \n    # Dictionary to store the length of the longest subsequence ending with a particular element\n    dp = {}\n    \n    # Iterate through the array\n    for num in arr:\n        # The length of the subsequence ending with `num` can be derived from the lengths of subsequences\n        # ending with `num-1` or `num+1`, whichever is available in the dictionary.\n        dp[num] = 1 + max(dp.get(num - 1, 0), dp.get(num + 1, 0))\n    \n    # Return the maximum value from the dictionary, which represents the length of the longest subsequence\n    return max(dp.values())\n\n# Example usage:\narr = [1, 2, 3, 2, 4, 5]\nprint(max_len_sub(arr))  # Output should be 4 (subsequence: 1, 2, 3, 2)\n\nempty_arr = []\nprint(max_len_sub(empty_arr))  # Output should be 0\n\ninvalid_input = \"not a list\"\ntry:\n    print(max_len_sub(invalid_input))\nexcept TypeError as e:\n    print(e)  # Output should be \"Input must be a list\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphwji9jkr.py\", line 25, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}

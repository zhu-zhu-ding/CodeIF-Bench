{"task_id": 11, "requirement": "Code Complexity", "completion": "from typing import *\n\ndef remove_occ(s: str, ch: str) -> str:\n    \"\"\"\n    Removes the first and last occurrences of a specified character from the string.\n\n    Parameters:\n    s (str): The input string.\n    ch (str): The character to be removed.\n\n    Returns:\n    str: The modified string with the first and last occurrences of the specified character removed.\n    \"\"\"\n    \n    # Check if the second parameter is a single character\n    if not isinstance(ch, str) or len(ch) != 1:\n        raise ValueError('Second parameter must be a single character.')\n    \n    # Initialize variables to store the first and last positions\n    try:\n        first_index = s.index(ch)\n        last_index = s.rindex(ch)\n    except ValueError:\n        # If the character is not found in the string, return the original string\n        return s\n    \n    # Handle edge case where the first and last indices are the same\n    if first_index == last_index:\n        return \"\"\n    \n    # Construct the new string by excluding the first and last occurrences of the character\n    if first_index > 0:\n        start = s[:first_index]\n    else:\n        start = \"\"\n    \n    if last_index < len(s) - 1:\n        end = s[last_index + 1:]\n    else:\n        end = \"\"\n    \n    return start + end\n\n# Example usage:\ninput_string = \"hello world\"\ncharacter_to_remove = \"l\"\ntry:\n    result = remove_occ(input_string, character_to_remove)\n    print(result)  # Output should be \"heo wor\"\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpztrg5yc3.py\", line 35, in <module>\n    assert remove_occ(\"abcda\",\"a\") == \"bcd\"\nAssertionError", "passed": false}
{"task_id": 14, "requirement": "Code Complexity", "completion": "from typing import Union\n\ndef find_volume(base_area: float, height: float, length: float) -> float:\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base_area (float): The area of the triangular base.\n    height (float): The height of the triangular prism.\n    length (float): The length of the triangular prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    \n    # Check if all inputs are positive numbers\n    if not (isinstance(base_area, (int, float)) and base_area > 0 and \n            isinstance(height, (int, float)) and height > 0 and \n            isinstance(length, (int, float)) and length > 0):\n        raise ValueError(\"All dimensions must be positive numbers.\")\n    \n    # Calculate the volume of the triangular prism\n    volume = base_area * length\n    \n    return volume\n\n# Example usage:\nbase_area = 6.0  # Example area of the triangular base\nheight = 8.0     # Example height of the prism\nlength = 12.0    # Example length of the prism\n\ntry:\n    volume = find_volume(base_area, height, length)\n    print(f\"The volume of the triangular prism is {volume:.2f} cubic units.\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpww_qq6jj.py\", line 20, in <module>\n    assert find_volume(10,8,6) == 240\nAssertionError", "passed": false}
{"task_id": 15, "requirement": "Code Complexity", "completion": "from typing import List\n\ndef split_lowerstring(text: str) -> List[str]:\n    \"\"\"\n    Splits the given string at lowercase letters.\n    \n    Parameters:\n    text (str): The input string to be split.\n    \n    Returns:\n    List[str]: A list of substrings split at lowercase letters.\n    \"\"\"\n    result = []\n    current_substring = None\n    \n    for char in text:\n        if char.islower():\n            if current_substring is not None:\n                result.append(current_substring)\n                current_substring = char\n            else:\n                current_substring = char\n        else:\n            if current_substring is not None:\n                current_substring += char\n    \n    if current_substring is not None:\n        result.append(current_substring)\n    \n    return result\n\n# Example usage:\ninput_string = \"HelloWorld2023Python\"\noutput = split_lowerstring(input_string)\nprint(output)  # Output: ['H', 'W', '2023P', 'y', 't', 'h', 'o', 'n']\n", "result": "failed: File \"/tmp/tmpceuegbn3.py\", line 26\n    try: split_lowerstring(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 16, "requirement": "Code Complexity", "completion": "import re\n\ndef text_lowercase_underscore(text: str) -> str:\n    \"\"\"\n    This function searches for sequences of lowercase letters joined with an underscore in the given text.\n    \n    Args:\n    text (str): The input string to search within.\n    \n    Returns:\n    str: 'Found a match!' if any match is found, otherwise 'Not matched!'.\n    \"\"\"\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n\n    # Regular expression pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    \n    # Find all matches in the text\n    matches = re.findall(pattern, text)\n    \n    # Check if there are any matches\n    if matches:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\nexample_text = \"Here is an example_text_to_match and another_example_sequence but notThisOne\"\nprint(text_lowercase_underscore(example_text))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpurgveel1.py\", line 31, in <module>\n    assert cc_visit(inspect.getsource(text_lowercase_underscore))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 17, "requirement": "Code Complexity", "completion": "from typing import TypeVar\n\nT = TypeVar('T', bound=int)\n\ndef square_perimeter(a: T) -> T:\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Parameters:\n    a (int): The length of one side of the square.\n\n    Returns:\n    int: The perimeter of the square.\n    \"\"\"\n    if a < 0:\n        raise ValueError(\"Side length must be a non-negative integer.\")\n    return 4 * a\n\n# Example usage:\ntry:\n    side_length = 5  # Example side length of the square\n    perimeter = square_perimeter(side_length)\n    print(f\"The perimeter of the square with side length {side_length} is {perimeter}\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpr0p31njs.py\", line 32, in <module>\n    assert square_perimeter.__annotations__ == {'a': int, 'return': int}\nAssertionError", "passed": false}
{"task_id": 20, "requirement": "Code Complexity", "completion": "from typing import TypeVar\n\nT = TypeVar('T', bound=int)\n\ndef is_woodall(number: T) -> bool:\n    \"\"\"\n    Check if the given number is a Woodall number.\n    \n    Args:\n    number (int): The number to check.\n    \n    Returns:\n    bool: True if the number is a Woodall number, False otherwise.\n    \"\"\"\n    if not isinstance(number, int):\n        raise TypeError(\"Input must be an integer.\")\n    \n    # Start with n = 1 and keep checking until n * 2^n - 1 exceeds the given number\n    n = 1\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number == number:\n            return True\n        elif woodall_number > number:\n            return False\n        n += 1\n\n# Example usage:\nprint(is_woodall(7))    # True, because 7 = 1 * 2^3 - 1\nprint(is_woodall(23))   # False, 23 is not a Woodall number\nprint(is_woodall(4095)) # True, because 4095 = 14 * 2^14 - 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqo5uq0rb.py\", line 33, in <module>\n    assert is_woodall.__annotations__ == {'x': int, 'return': bool}\nAssertionError", "passed": false}
{"task_id": 21, "requirement": "Code Complexity", "completion": "from typing import List\n\ndef multiples_of_num(n: int, m: int) -> List[int]:\n    \"\"\"\n    Generates a list of the first m multiples of n.\n\n    Parameters:\n    n (int): The base number.\n    m (int): The number of multiples to generate.\n\n    Returns:\n    List[int]: A list containing the first m multiples of n.\n    \"\"\"\n    if n < 0 or m < 0:\n        raise ValueError(\"Both n and m must be non-negative.\")\n    \n    return [i * n for i in range(1, m + 1)]\n\n# Example usage:\nif __name__ == \"__main__\":\n    try:\n        n = 5  # Base number\n        m = 7  # Number of multiples to generate\n        print(multiples_of_num(n, m))\n    except ValueError as e:\n        print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxiyrgv8x.py\", line 14, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 24, "requirement": "Code Complexity", "completion": "from typing import Union\n\ndef binary_to_decimal(binary_str: str) -> Union[int, None]:\n    \"\"\"\n    Convert a binary number (given as a string) to its decimal equivalent.\n    \n    :param binary_str: A string representing a binary number.\n    :return: An integer representing the decimal equivalent of the binary number.\n             Returns None if the input is an empty string.\n    \"\"\"\n    # Check if the input string is empty\n    if not binary_str:\n        return 0\n    \n    # Validate the input string\n    if not all(digit in '01' for digit in binary_str):\n        raise ValueError(\"Invalid binary number\")\n    \n    # Convert the binary string to decimal\n    decimal_value = 0\n    for index, digit in enumerate(reversed(binary_str)):\n        decimal_value += int(digit) * (2 ** index)\n    \n    return decimal_value\n\n# Example usage:\nbinary_number = \"1101\"\ntry:\n    decimal_number = binary_to_decimal(binary_number)\n    print(f\"The decimal equivalent of {binary_number} is {decimal_number}\")\nexcept ValueError as e:\n    print(e)\n\n# Handling empty string\nempty_binary = \"\"\ntry:\n    decimal_number = binary_to_decimal(empty_binary)\n    print(f\"The decimal equivalent of an empty string is {decimal_number}\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: File \"/tmp/tmpet4rozf0.py\", line 31\n    try: binary_to_decimal('102'); assert False, 'Expected ValueError' except ValueError as e: assert str(e) == 'Invalid binary number'\n                                                                       ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 32, "requirement": "Code Complexity", "completion": "from math import sqrt\n\ndef max_prime_factors(n: int) -> int:\n    \"\"\"\n    Returns the largest prime factor of the given positive integer n.\n    \n    Parameters:\n    n (int): A positive integer whose largest prime factor is to be found.\n    \n    Returns:\n    int: The largest prime factor of n.\n    \n    Raises:\n    ValueError: If the input is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    # Initialize the largest prime factor\n    largest_factor = -1\n    \n    # Remove all factors of 2\n    while n % 2 == 0:\n        largest_factor = 2\n        n //= 2\n    \n    # Start checking for odd factors\n    factor = 3\n    max_factor = int(sqrt(n)) + 1  # Only need to check up to the square root of n\n    \n    while factor * factor <= n:\n        while n % factor == 0:\n            largest_factor = factor\n            n //= factor\n        factor += 2\n    \n    # If n is a prime number greater than 2\n    if n > 2:\n        largest_factor = n\n    \n    return largest_factor\n\n# Example usage:\nprint(max_prime_factors(13195))  # Output should be 29\nprint(max_prime_factors(600851475143))  # Output should be 6857\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpa0w_0n23.py\", line 42, in <module>\n    assert cc_visit(inspect.getsource(max_prime_factors))[0].complexity <= 5\nAssertionError", "passed": false}
{"task_id": 33, "requirement": "Code Complexity", "completion": "def decimal_to_binary(decimal_number: int) -> str:\n    \"\"\"\n    Convert a decimal number to its binary representation.\n\n    Parameters:\n    decimal_number (int): A non-negative integer to be converted to binary.\n\n    Returns:\n    str: The binary representation of the decimal number.\n    \"\"\"\n    if decimal_number < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    if decimal_number == 0:\n        return \"0\"\n    \n    return bin(decimal_number)[2:]\n\n# Example usage:\nprint(decimal_to_binary(10))  # Output: \"1010\"\nprint(decimal_to_binary(255)) # Output: \"11111111\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1laqoi7m.py\", line 10, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 35, "requirement": "Code Complexity", "completion": "def find_rect_num(n: int) -> int:\n    \"\"\"\n    Find the n-th rectangular number.\n\n    Parameters:\n    n (int): The position in the sequence of rectangular numbers.\n\n    Returns:\n    int: The n-th rectangular number.\n    \"\"\"\n    return n * (n + 1)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test the function with some values\n    print(\"The 5th rectangular number is:\", find_rect_num(5))  # Output should be 30\n    print(\"The 7th rectangular number is:\", find_rect_num(7))  # Output should be 56\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxfnl7tjb.py\", line 14, in <module>\n    else: assert False, 'Expected ValueError for negative input'\nAssertionError: Expected ValueError for negative input", "passed": false}
{"task_id": 36, "requirement": "Code Complexity", "completion": "from typing import Union\n\ndef find_nth_digit(numerator: int, denominator: int, n: int) -> Union[int, str]:\n    \"\"\"\n    Find the nth digit in the decimal representation of the division result of two given numbers.\n\n    Parameters:\n    numerator (int): The numerator of the fraction.\n    denominator (int): The denominator of the fraction.\n    n (int): The position of the digit to find (1-based index).\n\n    Returns:\n    int: The nth digit in the decimal representation of the division result.\n    str: A message indicating a problem, such as a zero denominator or invalid n.\n    \"\"\"\n\n    # Raise ValueError if the denominator is zero\n    if denominator == 0:\n        return \"Denominator cannot be zero\"\n\n    # Perform the division\n    division_result = numerator / denominator\n\n    # Convert the result to a string to easily access individual digits\n    division_str = str(division_result)\n\n    # Check if the result has a decimal part\n    if '.' not in division_str:\n        return \"No decimal part in the result\"\n\n    # Extract the decimal part and remove the leading '.'\n    decimal_part = division_str.split('.')[1]\n\n    # Ensure n is within bounds\n    if n <= 0 or n > len(decimal_part):\n        return \"Invalid position\"\n\n    # Return the nth digit\n    return int(decimal_part[n - 1])\n\n# Example usage:\nnumerator = 1\ndenominator = 7\nn = 4\nprint(find_nth_digit(numerator, denominator, n))  # Output should be the 4th digit in the decimal representation of 1/7\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4b38hbb5.py\", line 33, in <module>\n    assert find_nth_digit.__annotations__ == {'p': int, 'q': int, 'N': int, 'return': int}\nAssertionError", "passed": false}
{"task_id": 38, "requirement": "Code Complexity", "completion": "from typing import List, Union\n\ndef div_even_odd(numbers: List[int]) -> Union[int, float, str]:\n    # Initialize variables to store the first even and odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Iterate through the list to find the first even and odd numbers\n    for num in numbers:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        elif first_odd is None and num % 2 != 0:\n            first_odd = num\n    \n    # Check if both first_even and first_odd are found\n    if first_even is None or first_odd is None:\n        if first_even is None:\n            return \"No even number found\"\n        elif first_odd is None:\n            return \"No odd number found\"\n        else:\n            return \"Both even and odd numbers found but cannot perform division\"\n    \n    # Perform the division and return the result\n    return first_even / first_odd\n\n# Example usage\nnumbers = [5, 3, 2, 8, 10]\nprint(div_even_odd(numbers))  # Output should be 2.0\n\nnumbers = [7, 9, 11]\nprint(div_even_odd(numbers))  # Output should be \"No even number found\"\n\nnumbers = [2, 4, 6]\nprint(div_even_odd(numbers))  # Output should be \"No odd number found\"\n\nnumbers = [2, 4, 6, 1, 3]\nprint(div_even_odd(numbers))  # Output should be 2.0\n\nnumbers = [2, 4, 6, 1, 3, 5]\nprint(div_even_odd(numbers))  # Output should be 2.0\n", "result": "failed: File \"/tmp/tmp88agsmj_.py\", line 37\n    try: div_even_odd([2, 4, 6]); assert False; except ValueError as e: assert str(e) == 'List must contain at least one even and one odd number.'\n                                                ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 40, "requirement": "Code Complexity", "completion": "from collections import Counter\n\ndef freq_element(nested_list: list[list[int]]) -> dict[int, int]:\n    # Guard clause to check if the input is not a list of lists\n    if not all(isinstance(sublist, list) for sublist in nested_list):\n        raise TypeError(\"Input must be a list of lists\")\n    \n    # Guard clause to return an empty dictionary if the input list is empty\n    if not nested_list:\n        return {}\n    \n    # Flatten the list of lists into a single list\n    flat_list = [item for sublist in nested_list for item in sublist]\n    \n    # Use Counter to count the frequency of each element\n    frequency_counter = Counter(flat_list)\n    \n    # Convert Counter to dictionary\n    return dict(frequency_counter)\n\n# Example usage:\nnested_lists = [[1, 2, 3], [4, 5, 6], [1, 2, 7], [8, 9, 10]]\nresult = freq_element(nested_lists)\nprint(result)  # Output: {1: 2, 2: 2, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1}\n", "result": "failed: File \"/tmp/tmp662xrm14.py\", line 22\n    try: freq_element('not a list'); assert False; except TypeError: assert True\n                                                   ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 42, "requirement": "Code Complexity", "completion": "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Initialize a dictionary to count the occurrences of each element\n    element_count = {}\n    \n    # Count the occurrences of each element in the array\n    for element in arr:\n        element_count[element] = element_count.get(element, 0) + 1\n    \n    # Calculate the sum of elements that appear more than once\n    sum_of_repeated_elements = sum(element * count for element, count in element_count.items() if count > 1)\n    \n    return sum_of_repeated_elements\n\n# Example usage:\narr = [1, 2, 3, 2, 4, 5, 5, 6, 7, 8, 8]\nresult = find_sum(arr)\nprint(\"Sum of repeated elements:\", result)  # Output should be 32\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpe07xuf1q.py\", line 17, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Code Complexity", "completion": "import re\n\ndef text_match(text: str) -> str:\n    \"\"\"\n    This function checks if the input text contains sequences of lowercase letters joined with an underscore.\n    It returns 'Matched!' if the text matches the pattern; otherwise, it returns 'Not matched!'.\n    \n    :param text: The input string to be checked.\n    :return: 'Matched!' if the text matches the pattern, otherwise 'Not matched!'.\n    \"\"\"\n    # Define the pattern for lowercase letters joined with an underscore\n    pattern = '^[a-z]+_[a-z]+$'\n    \n    # Check if the input is a string\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Check if the text is empty\n    if not text:\n        return 'Not matched!'\n    \n    # Search for the pattern in the given text\n    if re.search(pattern, text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\nprint(text_match(\"hello_world\"))  # Should return 'Matched!'\nprint(text_match(\"Hello_World\"))  # Should return 'Not matched!'\nprint(text_match(\"hello_world_123\"))  # Should return 'Not matched!'\nprint(text_match(\"\"))  # Should return 'Not matched!'\nprint(text_match(123))  # Should raise TypeError\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp635kedyd.py\", line 21, in <module>\n    print(text_match(123))  # Should raise TypeError\n  File \"/tmp/tmp635kedyd.py\", line 7, in text_match\n    raise TypeError(\"Input must be a string\")\nTypeError: Input must be a string", "passed": false}
{"task_id": 45, "requirement": "Code Complexity", "completion": "from typing import List\nimport math\n\ndef get_gcd(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError('Input list cannot be empty.')\n    \n    # Initialize gcd with the first element of the array\n    current_gcd = numbers[0]\n    \n    # Iterate through the array starting from the second element\n    for num in numbers[1:]:\n        current_gcd = math.gcd(current_gcd, num)\n        \n        # If current_gcd becomes 1, no need to proceed further as GCD cannot be less than 1\n        if current_gcd == 1:\n            break\n    \n    return current_gcd\n\n# Example usage:\narr = [24, 36, 48]\nprint(get_gcd(arr))  # Output should be 12\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvot5gwju.py\", line 23, in <module>\n    assert get_gcd.__annotations__ == {'numbers': list, 'return': int}\nAssertionError", "passed": false}
{"task_id": 47, "requirement": "Code Complexity", "completion": "from typing import Literal\n\ndef compute_last_digit(a: int, b: int) -> int:\n    if a > b:\n        raise ValueError(\"a should not be greater than b\")\n    \n    if a == b:\n        return 1  # factorial(a) / factorial(a) = 1\n    \n    def last_digit_of_factorial(n: int) -> int:\n        if n == 0 or n == 1:\n            return 1\n        last_digit = 1\n        for i in range(2, n + 1):\n            last_digit = (last_digit * (i % 10)) % 10\n        return last_digit\n    \n    # Compute the last digit of factorial(a) and factorial(b)\n    last_digit_a = last_digit_of_factorial(a)\n    last_digit_b = last_digit_of_factorial(b)\n    \n    # Special case where factorial(a) ends in 0\n    if last_digit_a == 0:\n        return 0  # If factorial(a) ends in 0, the result will be 0\n    \n    # Compute the last digit of b! / a!\n    return (last_digit_b * pow(last_digit_a, -1, 10)) % 10\n\n# Example usage:\nprint(compute_last_digit(3, 5))  # Output should be 0\nprint(compute_last_digit(4, 7))  # Output should be 0\nprint(compute_last_digit(2, 6))  # Output should be 0\nprint(compute_last_digit(5, 5))  # Output should be 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6p8ini0p.py\", line 23, in <module>\n    print(compute_last_digit(3, 5))  # Output should be 0\n  File \"/tmp/tmp6p8ini0p.py\", line 21, in compute_last_digit\n    return (last_digit_b * pow(last_digit_a, -1, 10)) % 10\nValueError: base is not invertible for the given modulus", "passed": false}
{"task_id": 51, "requirement": "Code Complexity", "completion": "from typing import NoReturn\n\ndef check_equilateral(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Check if a triangle with given side lengths is equilateral.\n\n    Parameters:\n    a (int): The length of the first side.\n    b (int): The length of the second side.\n    c (int): The length of the third side.\n\n    Returns:\n    bool: True if the triangle is equilateral, False otherwise.\n    \"\"\"\n    if a <= 0 or b <= 0 or c <= 0:\n        raise ValueError(\"All side lengths must be positive integers.\")\n    \n    return a == b == c\n\n# Example usage:\ntry:\n    print(check_equilateral(5, 5, 5))  # Should return True\n    print(check_equilateral(5, 4, 5))  # Should return False\nexcept ValueError as e:\n    print(e)\n\n# If you want to print the result directly:\nif check_equilateral(5, 5, 5):\n    print(\"The triangle is equilateral.\")\nelse:\n    print(\"The triangle is not equilateral.\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmptpyjb711.py\", line 36, in <module>\n    assert cc_visit(inspect.getsource(check_equilateral))[0].complexity ==1\nAssertionError", "passed": false}
{"task_id": 52, "requirement": "Code Complexity", "completion": "from typing import Union\n\ndef parallelogram_area(base: float, height: float) -> float:\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram.\n    \"\"\"\n    # Check if inputs are numerical\n    if not (isinstance(base, (int, float)) and isinstance(height, (int, float))):\n        raise TypeError(\"Both base and height must be numerical values.\")\n\n    # Handle edge case where base or height is zero\n    if base == 0 or height == 0:\n        return 0.0\n\n    return base * height\n\n# Example usage:\nbase = 5.0  # Example base length\nheight = 3.0  # Example height\ntry:\n    area = parallelogram_area(base, height)\n    print(f\"The area of the parallelogram with base {base} and height {height} is {area}\")\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8xs_uwzm.py\", line 46, in <module>\n    assert cc_visit(inspect.getsource(parallelogram_area))[0].complexity ==1\nAssertionError", "passed": false}
{"task_id": 53, "requirement": "Code Complexity", "completion": "from typing import Union\n\ndef check_equality(s: str) -> Union[str, None]:\n    \"\"\"\n    Check if the first and last characters of a given string are equal.\n\n    Args:\n    s (str): The input string to be checked.\n\n    Returns:\n    Union[str, None]: 'Equal' if the first and last characters are equal, 'Not Equal' otherwise.\n    Raises:\n    TypeError: If the input is not a string.\n    \"\"\"\n    \n    # Check if the input is a string\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Handle empty strings\n    if not s:\n        return 'Equal'\n    \n    # Check if the first and last characters are equal\n    if s[0] == s[-1]:\n        return 'Equal'\n    else:\n        return 'Not Equal'\n\n# Example usage:\ntry:\n    test_string = \"radar\"\n    result = check_equality(test_string)\n    print(f\"The first and last characters of '{test_string}' are equal: {result}\")\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpr0b_061f.py\", line 32, in <module>\n    assert check_equality.__annotations__ == {'s': str, 'return': str}\nAssertionError", "passed": false}
{"task_id": 56, "requirement": "Code Complexity", "completion": "from typing import TypeVar\n\nT = TypeVar('T', bound=int)\n\ndef check(n: T) -> bool:\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    # Convert the number to a string to easily reverse it\n    num_str = str(n)\n    \n    # Reverse the string representation of the number\n    reversed_num_str = num_str[::-1]\n    \n    # Convert the reversed string back to an integer\n    reversed_number = int(reversed_num_str)\n    \n    # Calculate twice the reversed number\n    twice_reversed = 2 * reversed_number\n    \n    # Check if the result is one more than the original number\n    return twice_reversed == n + 1\n\n# Example usage:\nprint(check(47))  # True, because 2 * 74 (reversed 47) is 148, which is 47 + 1\nprint(check(69))  # False, because 2 * 96 (reversed 69) is 192, which is not 69 + 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpsirre2st.py\", line 29, in <module>\n    assert check(1) == False\nAssertionError", "passed": false}
{"task_id": 58, "requirement": "Code Complexity", "completion": "def opposite_signs(a: int, b: int) -> bool:\n    \"\"\"\n    Check if two integers have opposite signs.\n\n    Parameters:\n    a (int): First integer.\n    b (int): Second integer.\n\n    Returns:\n    bool: True if the integers have opposite signs, False otherwise.\n    \"\"\"\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise TypeError(\"Both inputs must be integers.\")\n    \n    # Use bitwise AND with the sign bit to check for opposite signs\n    return (a ^ b) < 0\n\n# Example usage:\nprint(opposite_signs(10, -5))  # Output: True\nprint(opposite_signs(-10, -5)) # Output: False\nprint(opposite_signs(10, 5))   # Output: False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqw5r1iwj.py\", line 29, in <module>\n    assert opposite_signs(0, 1) == True\nAssertionError", "passed": false}

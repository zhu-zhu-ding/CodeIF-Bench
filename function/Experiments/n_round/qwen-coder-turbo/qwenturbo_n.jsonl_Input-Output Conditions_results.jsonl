{"task_id": 14, "requirement": "Input-Output Conditions", "completion": "def find_volume(base_area, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n    \n    Parameters:\n    - base_area: Positive numerical value representing the area of the triangular base.\n    - height: Positive numerical value representing the height of the triangular face.\n    - length: Positive numerical value representing the height (or length) of the prism.\n    \n    Returns:\n    - Volume of the triangular prism as a positive numerical value.\n    \n    Raises:\n    - ValueError: If any of the input values are not positive or not numerical.\n    \"\"\"\n    # Check if all inputs are positive and numerical\n    if not all(isinstance(x, (int, float)) and x > 0 for x in [base_area, height, length]):\n        raise ValueError(\"All inputs must be positive numbers.\")\n    \n    # Calculate the volume of the prism\n    volume = base_area * height * length\n    \n    return volume\n\n# Example usage:\nbase_area = 6.0  # Area of the triangular base\nheight = 3.0     # Height of the triangular face\nlength = 10.0    # Length of the prism\n\ntry:\n    volume = find_volume(base_area, height, length)\n    print(f\"The volume of the triangular prism is: {volume}\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpfwudy2qm.py\", line 17, in <module>\n    assert find_volume(10,8,6) == 240\nAssertionError", "passed": false}
{"task_id": 15, "requirement": "Input-Output Conditions", "completion": "import re\n\ndef split_lowerstring(s):\n    # Use regular expression to split the string at lowercase letters\n    return re.split(r'[a-z]', s)\n\n# Example usage:\ninput_string = \"helloWorldThisIsPython\"\nresult = split_lowerstring(input_string)\nprint(result)  # Output: ['', 'Hello', 'World', 'This', 'Is', 'Python', '']\n\n# Filter out empty strings if needed\nresult_filtered = [seg for seg in result if seg]\nprint(result_filtered)  # Output: ['Hello', 'World', 'This', 'Is', 'Python']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmba84_lm.py\", line 12, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "requirement": "Input-Output Conditions", "completion": "import re\n\ndef text_lowercase_underscore(text):\n    # Define the regex pattern for lowercase letters joined with an underscore\n    pattern = r'[a-z]+_[a-z]+'\n    \n    # Use re.search to find at least one occurrence of the pattern in the text\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\ntext = \"hello_world this_is_python example_text\"\nresult = text_lowercase_underscore(text)\nprint(result)  # Output: 'Found a match!'\n\ntext = \"HelloWorld thisIsPython exampleText\"\nresult = text_lowercase_underscore(text)\nprint(result)  # Output: 'Not matched!'\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8yc9ino7.py\", line 19, in <module>\n    assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')\nAssertionError", "passed": false}
{"task_id": 17, "requirement": "Input-Output Conditions", "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Args:\n        side_length (int): The length of one side of the square. Must be a non-negative integer.\n\n    Returns:\n        int: The perimeter of the square. Will always be a non-negative integer.\n\n    Raises:\n        ValueError: If the side_length is not a non-negative integer.\n    \"\"\"\n    if not isinstance(side_length, int) or side_length < 0:\n        raise ValueError(\"Side length must be a non-negative integer.\")\n    \n    return 4 * side_length\n\n# Example usage:\ntry:\n    side = 5\n    perimeter = square_perimeter(side)\n    print(f\"The perimeter of a square with side length {side} is {perimeter}.\")\nexcept ValueError as e:\n    print(e)\n\n# Testing with invalid input\ntry:\n    side = -3\n    perimeter = square_perimeter(side)\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 18, "requirement": "Input-Output Conditions", "completion": "def remove_dirty_chars(string1, string2):\n    assert all(char.isalpha() for char in string1) and \\\n        all(char.isalpha() for char in string2), \\\n        'Input strings must only contain alphabetic characters.'\n    \n    clean_string = [char for char in string1 if char not in string2]\n    return ''.join(clean_string)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpct3x7ty_.py\", line 11, in <module>\n    try: remove_dirty_chars('hell0', 'world')\n  File \"/tmp/tmpct3x7ty_.py\", line 2, in remove_dirty_chars\n    assert all(char.isalpha() for char in string1) and \\\nAssertionError: Input strings must only contain alphabetic characters.", "passed": false}
{"task_id": 19, "requirement": "Input-Output Conditions", "completion": "def test_duplicate(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Convert the list into a set to remove duplicates\n    unique_elements = set(arr)\n    \n    # Compare the length of the original list with the set\n    # If they're different, there must be duplicates\n    return len(arr) != len(unique_elements)\n\n# Example usage:\ntry:\n    my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1]\n    print(test_duplicate(my_list))  # Output: True\n    \n    # Test with non-list input\n    test_duplicate('not a list')\nexcept TypeError as e:\n    print(e)  # Output: Input must be a list\n", "result": "passed", "passed": true}
{"task_id": 20, "requirement": "Input-Output Conditions", "completion": "def is_woodall(num):\n    # Check if the input number is less than 3 (the smallest Woodall number)\n    if num < 3:\n        return False\n    \n    # Iterate over possible values of n starting from 1\n    n = 1\n    while True:\n        # Calculate the Woodall number for the current value of n\n        woodall_number = n * (2 ** n) - 1\n        \n        # If the calculated Woodall number matches the input number, it is a Woodall number\n        if woodall_number == num:\n            return True\n        \n        # If the calculated Woodall number exceeds the input number, break the loop\n        elif woodall_number > num:\n            return False\n        \n        # Increment n for the next iteration\n        n += 1\n\n# Example usage:\nprint(is_woodall(7))   # Output: True (since 7 = 1 * 2^3 - 1)\nprint(is_woodall(8))   # Output: False\n", "result": "passed", "passed": true}
{"task_id": 23, "requirement": "Input-Output Conditions", "completion": "def maximum_sum(list_of_lists):\n    \"\"\"\n    Finds the maximum sum of elements in any sublist within the given list of lists.\n    \n    Parameters:\n    list_of_lists (list): A list containing other lists of integers.\n    \n    Returns:\n    int: The maximum sum of elements from any sublist.\n    \"\"\"\n    # Check if the input list is empty\n    if not list_of_lists:\n        raise ValueError(\"Input list cannot be empty.\")\n    \n    # Initialize the maximum sum to a very small number\n    max_sum = float('-inf')\n    \n    # Iterate through each sublist and calculate its sum\n    for sublist in list_of_lists:\n        # Calculate the sum of the current sublist\n        current_sum = sum(sublist)\n        \n        # Update the maximum sum if the current sum is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum\n\n# Example usage:\nresult = maximum_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nprint(result)  # Output: 24\n", "result": "passed", "passed": true}
{"task_id": 25, "requirement": "Input-Output Conditions", "completion": "def find_product(arr):\n    # Check if the list is empty\n    if len(arr) == 0:\n        return None\n\n    # Compute frequency of each element\n    freq_dict = {}\n    for i in arr:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n\n    # Find product of non-repeated elements\n    product = 1\n    has_non_repeated = False\n    for key in freq_dict:\n        if freq_dict[key] == 1:\n            product *= key\n            has_non_repeated = True\n    \n    if not has_non_repeated:\n        return 0\n\n    return product\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdv8h0le7.py\", line 22, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "requirement": "Input-Output Conditions", "completion": "def check_k_elements(tuple_list, k):\n    \"\"\"\n    Check if all tuples in the given list have exactly k elements.\n\n    Parameters:\n    tuple_list (list of tuples): The list of tuples to check.\n    k (int): The number of elements each tuple should have.\n\n    Returns:\n    bool: True if all tuples have exactly k elements, False otherwise.\n    \"\"\"\n    for tup in tuple_list:\n        if len(tup) != k:\n            return False\n    return True\n\n# Example usage:\ntuples = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nk = 3\nprint(check_k_elements(tuples, k))  # Output: True\n\ntuples = [(1, 2), (3, 4, 5), (6, 7, 8)]\nk = 3\nprint(check_k_elements(tuples, k))  # Output: False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpw2w7n3xn.py\", line 13, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 28, "requirement": "Input-Output Conditions", "completion": "def binomial_coefficient(n, k):\n    \"\"\"\n    Calculate the binomial coefficient C(n, k).\n\n    Parameters:\n    n (int): The total number of items. Must be a non-negative integer.\n    k (int): The number of items to choose. Must be a non-negative integer.\n\n    Returns:\n    int: The binomial coefficient C(n, k).\n    \"\"\"\n    if not isinstance(n, int) or not isinstance(k, int):\n        raise ValueError(\"Both n and k must be integers.\")\n    if n < 0 or k < 0:\n        raise ValueError(\"Both n and k must be non-negative integers.\")\n    if k > n:\n        return 0\n    \n    # Utilize the property C(n, k) = C(n, n-k) for efficiency\n    k = min(k, n - k)\n    \n    # Calculate the binomial coefficient using factorial\n    numerator = math.factorial(n)\n    denominator = math.factorial(k) * math.factorial(n - k)\n    \n    return numerator // denominator\n\n# Example usage:\nn = 5\nk = 2\nprint(f\"C({n}, {k}) = {binomial_coefficient(n, k)}\")  # Output: C(5, 2) = 10\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3fgnf6cc.py\", line 17, in <module>\n    print(f\"C({n}, {k}) = {binomial_coefficient(n, k)}\")  # Output: C(5, 2) = 10\n  File \"/tmp/tmp3fgnf6cc.py\", line 11, in binomial_coefficient\n    numerator = math.factorial(n)\nNameError: name 'math' is not defined", "passed": false}
{"task_id": 30, "requirement": "Input-Output Conditions", "completion": "def count_substring_with_equal_ends(s):\n    n = len(s)\n    count = 0\n    \n    # Iterate over all possible starting points of substrings\n    for i in range(n):\n        # Iterate over all possible ending points of substrings\n        for j in range(i, n):\n            # Check if the substring from index i to j has equal start and end characters\n            if s[i] == s[j]:\n                count += 1\n                \n    return count\n\n# Example usage:\ns = \"abcab\"\nprint(count_substring_with_equal_ends(s))  # Output: 7\n", "result": "passed", "passed": true}
{"task_id": 32, "requirement": "Input-Output Conditions", "completion": "def max_prime_factors(n):\n    # Ensure the input is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    # Initialize the smallest prime factor\n    factor = 2\n    \n    # Variable to store the largest prime factor found\n    max_factor = -1\n    \n    # Divide n by 2 until it becomes odd\n    while n % factor == 0:\n        max_factor = factor\n        n //= factor\n    \n    # Check for odd factors from 3 onwards\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            max_factor = i\n            n //= i\n    \n    # If n is still greater than 2, then n itself is a prime number\n    if n > 2:\n        max_factor = n\n    \n    return max_factor\n\n# Example usage:\nnumber = 600851475143\ntry:\n    print(f\"The largest prime factor of {number} is {max_prime_factors(number)}\")\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 35, "requirement": "Input-Output Conditions", "completion": "def find_triangular_number(n):\n    \"\"\"\n    Calculate the n-th triangular number.\n\n    Parameters:\n    n (int): The position of the triangular number in the sequence.\n\n    Returns:\n    int: The n-th triangular number.\n    \"\"\"\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"The input must be a non-negative integer.\")\n    \n    return n * (n + 1) // 2\n\n# Example usage:\nprint(find_triangular_number(1))  # Output: 1\nprint(find_triangular_number(3))  # Output: 6\nprint(find_triangular_number(5))  # Output: 15\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmptb9h971u.py\", line 9, in <module>\n    assert find_rect_num(4) == 20\nNameError: name 'find_rect_num' is not defined", "passed": false}
{"task_id": 36, "requirement": "Input-Output Conditions", "completion": "def find_nth_digit(numerator, denominator, n):\n    \"\"\"\n    Find the nth digit in the decimal representation of the proper fraction numerator/denominator.\n    \n    :param numerator: The numerator of the fraction (must be an integer).\n    :param denominator: The denominator of the fraction (must be an integer greater than 0).\n    :param n: The position of the digit to be found (1-based index, must be greater than 0).\n    :return: The nth digit in the decimal representation of the fraction.\n    \"\"\"\n    if not isinstance(numerator, int) or not isinstance(denominator, int):\n        raise TypeError(\"Both numerator and denominator must be integers.\")\n    \n    if denominator <= 0:\n        raise ValueError(\"Denominator must be greater than 0.\")\n    \n    if numerator < 0 or numerator >= denominator:\n        raise ValueError(\"Numerator must be less than the denominator for a proper fraction.\")\n    \n    if n <= 0:\n        raise ValueError(\"n must be greater than 0.\")\n    \n    # Dictionary to store seen remainders and their corresponding position in the decimal part\n    seen_remainders = {}\n    \n    # Initialize variables\n    quotient = []\n    remainder = numerator % denominator\n    \n    # Position counter\n    pos = 0\n    \n    while remainder != 0:\n        if remainder in seen_remainders:\n            start = seen_remainders[remainder]\n            repeating_part = ''.join(map(str, quotient[start:]))\n            return int(repeating_part[n - start - 1])\n        \n        seen_remainders[remainder] = pos\n        \n        remainder *= 10\n        digit = remainder // denominator\n        quotient.append(digit)\n        remainder %= denominator\n        \n        pos += 1\n    \n    # If we exit the loop, it means there is no repeating part\n    return quotient[n - 1]\n\n# Example usage:\nnumerator = 1\ndenominator = 3\nn = 5\nprint(find_nth_digit(numerator, denominator, n))  # Output: 3 (since 1/3 = 0.3333...)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxjmavnhr.py\", line 34, in <module>\n    print(find_nth_digit(numerator, denominator, n))  # Output: 3 (since 1/3 = 0.3333...)\n  File \"/tmp/tmpxjmavnhr.py\", line 21, in find_nth_digit\n    return int(repeating_part[n - start - 1])\nIndexError: string index out of range", "passed": false}
{"task_id": 38, "requirement": "Input-Output Conditions", "completion": "def div_even_odd(lst):\n    # Initialize variables to store the first even and first odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Iterate through the list to find the first even and first odd numbers\n    for num in lst:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        \n        # If both even and odd numbers have been found, break out of the loop\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Check if both even and odd numbers were found\n    if first_even is not None and first_odd is not None:\n        return first_even / first_odd\n    else:\n        raise ValueError(\"The list must contain at least one even and one odd number.\")\n\n# Example usage:\nlst = [5, 7, 4, 9, 2]\nresult = div_even_odd(lst)\nprint(f\"The division of the first even and odd number is: {result}\")\n", "result": "passed", "passed": true}
{"task_id": 39, "requirement": "Input-Output Conditions", "completion": "import heapq\nfrom collections import Counter\n\ndef rearrange_string(s):\n    # Count the frequency of each character\n    char_count = Counter(s)\n    \n    # Create a max-heap based on character frequency\n    max_heap = [(-freq, char) for char, freq in char_count.items()]\n    heapq.heapify(max_heap)\n    \n    # Initialize the previous character and its frequency\n    prev_char = None\n    prev_freq = 0\n    \n    result = []\n    \n    while max_heap or prev_freq:\n        if prev_freq < 0:\n            heapq.heappush(max_heap, (prev_freq, prev_char))\n        \n        if not max_heap:\n            return \"\"  # It's not possible to rearrange\n        \n        freq, char = heapq.heappop(max_heap)\n        \n        # Add the character to the result\n        result.append(char)\n        \n        # Update the previous character and its frequency\n        prev_char = char\n        prev_freq = freq + 1  # Increase frequency because it's stored as negative\n    \n    return ''.join(result)\n\n# Example usage:\ns = \"aabbcc\"\nprint(rearrange_string(s))  # Output could be \"abcabc\" or any valid rearrangement\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpd0slk32b.py\", line 28, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 42, "requirement": "Input-Output Conditions", "completion": "def find_sum(arr):\n    # Create a dictionary to count occurrences of each element\n    element_count = {}\n    \n    for num in arr:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n    \n    # Calculate the sum of repeated elements (elements that appear more than once)\n    repeated_sum = 0\n    for num, count in element_count.items():\n        if count > 1:\n            repeated_sum += num * count\n    \n    # Return 0 if there are no repeated elements\n    if repeated_sum == 0:\n        return 0\n    \n    return repeated_sum\n\n# Example usage:\narr1 = [1, 2, 3, 4, 5, 6]\nprint(find_sum(arr1))  # Output should be 0 (no repeated elements)\n\narr2 = [1, 2, 3, 2, 4, 5, 3, 6]\nprint(find_sum(arr2))  # Output should be 10 (2+2+3+3)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7uiw17z3.py\", line 23, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Input-Output Conditions", "completion": "import re\n\ndef text_match(text):\n    \"\"\"\n    This function finds sequences of lowercase letters joined with an underscore.\n    \n    Args:\n    text (str): The input string to search for the pattern.\n    \n    Returns:\n    str: 'Matched!' if at least one sequence is found, otherwise 'Not matched!'\n    \"\"\"\n    # Define the regex pattern for lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    \n    # Use re.search to find the first occurrence of the pattern\n    match = re.search(pattern, text)\n    \n    if match:\n        return 'Matched!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\ninput_text_1 = \"hello_world this_is_a_test example_string another_example\"\ninput_text_2 = \"No matching sequence here!\"\n\nmatches_1 = text_match(input_text_1)\nmatches_2 = text_match(input_text_2)\n\nprint(matches_1)  # Output: Matched!\nprint(matches_2)  # Output: Not matched!\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpynnc3ln2.py\", line 18, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 46, "requirement": "Input-Output Conditions", "completion": "def test_distinct(numbers):\n    \"\"\"\n    Determine whether all numbers in the list are distinct.\n\n    Parameters:\n    numbers (list of int): A list of integers.\n\n    Returns:\n    bool: True if all numbers are distinct, False otherwise.\n    \"\"\"\n    # Convert the list to a set and compare its length to the original list\n    return len(numbers) == len(set(numbers))\n\n# Example usage:\nnumbers = [1, 2, 3, 4, 5]\nprint(test_distinct(numbers))  # Output: True\n\nnumbers_with_duplicates = [1, 2, 3, 3, 5]\nprint(test_distinct(numbers_with_duplicates))  # Output: False\n", "result": "passed", "passed": true}
{"task_id": 48, "requirement": "Input-Output Conditions", "completion": "def odd_bit_set_number(n):\n    # Calculate the number of bits in n\n    num_bits = n.bit_length()\n    \n    # Initialize a mask with all odd bits set to 1\n    if num_bits % 2 == 0:\n        mask = (1 << num_bits) - 1  # Mask for even number of bits\n    else:\n        mask = ((1 << num_bits) - 1) ^ 0x55555555  # Mask for odd number of bits\n\n    # Use bitwise OR to set all odd bits of n to 1\n    result = n | mask\n    \n    return result\n\n# Example usage:\nnumber = 0b1010101010101010  # Binary representation of 43690\nresult = odd_bit_set_number(number)\nprint(bin(result))  # Output should be the same as the input since all odd bits are already 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqjqnsh1q.py\", line 17, in <module>\n    assert odd_bit_set_number(20) == 21\nAssertionError", "passed": false}
{"task_id": 49, "requirement": "Input-Output Conditions", "completion": "def specified_element(two_d_list, index=0):\n    \"\"\"\n    Extracts the specified element from each sub-list in a given 2D list.\n    \n    Parameters:\n    - two_d_list: A list of lists from which elements need to be extracted.\n    - index: The index of the element to extract from each sub-list. Default is 0 (first element).\n    \n    Returns:\n    - A list containing the extracted elements. \n      Returns an empty list if the input list is empty.\n    \"\"\"\n    if not two_d_list:\n        return []\n    \n    return [sublist[index] for sublist in two_d_list if len(sublist) > index]\n\n# Example usage:\n\ntwo_d_list = [[1, 2, 3], [4, 5], [6, 7, 8, 9]]\n\nprint(specified_element(two_d_list))  # Output: [1, 4, 6]\nprint(specified_element(two_d_list, 1))  # Output: [2, 5, 7]\nprint(specified_element([]))  # Output: []\n\n", "result": "passed", "passed": true}
{"task_id": 50, "requirement": "Input-Output Conditions", "completion": "def min_length_list(lists):\n    # Find the list with the minimum length\n    min_list = min(lists, key=len)\n    \n    # Return a tuple containing the length of the shortest list and the list itself\n    return (len(min_list), min_list)\n\n# Example usage:\nlist1 = [1, 2, 3]\nlist2 = [4, 5]\nlist3 = [6, 7, 8, 9]\n\nresult = min_length_list([list1, list2, list3])\nprint(result)  # Output: (2, [4, 5]) (since it has the minimum length)\n", "result": "passed", "passed": true}
{"task_id": 52, "requirement": "Input-Output Conditions", "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram, must be positive.\n    height (float): The height of the parallelogram, must be positive.\n\n    Returns:\n    float: The area of the parallelogram, which is always positive.\n\n    Raises:\n    ValueError: If either base or height is not a positive number.\n    \"\"\"\n    if not isinstance(base, (int, float)) or not isinstance(height, (int, float)):\n        raise TypeError(\"Both base and height must be numbers.\")\n    if base <= 0 or height <= 0:\n        raise ValueError(\"Both base and height must be positive numbers.\")\n    \n    return base * height\n\n# Example usage:\nbase = 5\nheight = 3\ntry:\n    area = parallelogram_area(base, height)\n    print(f\"The area of the parallelogram with base {base} and height {height} is {area}.\")\nexcept ValueError as e:\n    print(e)\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpy4lpy34z.py\", line 21, in <module>\n    assert parallelogram_area(0, 10) == 0\n  File \"/tmp/tmpy4lpy34z.py\", line 5, in parallelogram_area\n    raise ValueError(\"Both base and height must be positive numbers.\")\nValueError: Both base and height must be positive numbers.", "passed": false}
{"task_id": 53, "requirement": "Input-Output Conditions", "completion": "def check_equality(input_string):\n    # Check if the input is indeed a string\n    if not isinstance(input_string, str):\n        raise ValueError(\"Input must be a string\")\n\n    # Remove any leading/trailing whitespace\n    input_string = input_string.strip()\n\n    # Check if the input string is empty after removing whitespace\n    if len(input_string) == 0:\n        return \"Not Equal\"\n\n    # Compare the first and last character of the string\n    if input_string[0].lower() == input_string[-1].lower():\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n", "result": "passed", "passed": true}
{"task_id": 54, "requirement": "Input-Output Conditions", "completion": "def counting_sort(arr):\n    # Filter out negative numbers\n    non_negative_arr = [num for num in arr if num >= 0]\n\n    if not non_negative_arr:\n        return []\n\n    # Find the maximum value in the array to determine the size of count array\n    max_value = max(non_negative_arr)\n\n    # Initialize the count array with zeros\n    count_array = [0] * (max_value + 1)\n\n    # Populate the count array where each index represents a key and its value represents the frequency of that key\n    for num in non_negative_arr:\n        count_array[num] += 1\n\n    # Reconstruct the sorted array based on the count array\n    sorted_index = 0\n    for i, count in enumerate(count_array):\n        for _ in range(count):\n            arr[sorted_index] = i\n            sorted_index += 1\n\n    return arr\n\n# Example usage:\narr = [4, 2, 2, -8, 3, 3, -1, 8]\nsorted_arr = counting_sort(arr)\nprint(\"Sorted Array:\", sorted_arr)\n", "result": "passed", "passed": true}
{"task_id": 57, "requirement": "Input-Output Conditions", "completion": "def find_max_num(digits, num_digits):\n    if len(digits) < num_digits:\n        raise ValueError(\"The list must contain at least as many elements as num_digits.\")\n    \n    # Convert each digit to a string for easy sorting\n    str_digits = [str(digit) for digit in digits[:num_digits]]\n    \n    # Sort the digits in descending order\n    sorted_digits = sorted(str_digits, reverse=True)\n    \n    # Concatenate the sorted digits to form the largest number\n    max_number = int(''.join(sorted_digits))\n    \n    return max_number\n\n# Example usage:\ndigits = [3, 1, 4, 1, 5, 9]\nnum_digits = 3\nprint(find_max_num(digits, num_digits))  # Output: 954\n", "result": "passed", "passed": true}
{"task_id": 58, "requirement": "Input-Output Conditions", "completion": "def opposite_signs(a, b):\n    # Check if both inputs are integers\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both inputs must be integers.\")\n    \n    # Check if the integers have opposite signs\n    return (a ^ b) < 0\n\n# Example usage:\ntry:\n    num1 = -5\n    num2 = 10\n    print(opposite_signs(num1, num2))  # Output: True\n\n    num3 = 7\n    num4 = 9\n    print(opposite_signs(num3, num4))  # Output: False\n\n    # Providing non-integer inputs should raise an exception\n    num5 = \"five\"\n    num6 = 10\n    print(opposite_signs(num5, num6))\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 60, "requirement": "Input-Output Conditions", "completion": "def max_len_sub(arr, diff):\n    if not arr or diff < 0:\n        return 0\n    \n    n = len(arr)\n    dp = [1] * n  # Initialize DP array with 1s since the minimum length of any subsequence is 1\n    \n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) <= diff:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)\n\n# Example usage:\narr = [1, 2, 3, 4, 5]\ndiff = 1\nprint(max_len_sub(arr, diff))  # Output: 5\n\narr = [4, 3, 5, 2, 1]\ndiff = 1\nprint(max_len_sub(arr, diff))  # Output: 5\n\narr = [1, 3, 5, 7, 9]\ndiff = 2\nprint(max_len_sub(arr, diff))  # Output: 3\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp552k46h_.py\", line 21, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nAssertionError", "passed": false}

{"task_id": 11, "requirement": "Code Standard", "completion": "def remove_occ(s: str, char: str) -> str:\n    \"\"\"\n    Removes the first and last occurrence of a specified character from a given string.\n    \n    Parameters:\n    s (str): The input string.\n    char (str): The character to remove.\n    \n    Returns:\n    str: The modified string with the first and last occurrence of the character removed.\n    \n    Raises:\n    ValueError: If the second parameter is not a single character.\n    \"\"\"\n    \n    if len(char) != 1:\n        raise ValueError('Second parameter must be a single character.')\n    \n    # Find the index of the first occurrence of the character\n    first_index = s.find(char)\n    \n    if first_index == -1:\n        return s  # Character not found in the string\n    \n    # Remove the first occurrence\n    s = s[:first_index] + s[first_index+1:]\n    \n    # Find the index of the last occurrence of the character\n    last_index = s.rfind(char)\n    \n    if last_index == -1:\n        return s  # Character not found in the string (shouldn't happen as we already removed the first one)\n    \n    # Remove the last occurrence\n    s = s[:last_index] + s[last_index+1:]\n    \n    return s\n\n# Example usage:\nresult = remove_occ(\"hello world\", \"o\")\nprint(result)  # Output: \"hell wrld\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpshe_qrr7.py\", line 26, in <module>\n    assert remove_occ.__annotations__ == {'s': str, 'ch': str, 'return': str}\nAssertionError", "passed": false}
{"task_id": 12, "requirement": "Code Standard", "completion": "def sort_matrix(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order based on the sum of its rows.\n\n    Parameters:\n    matrix (List[List[int]]): The input matrix to be sorted.\n\n    Returns:\n    List[List[int]]: The sorted matrix.\n    \"\"\"\n\n    # Check if the input is a list of lists\n    if not all(isinstance(row, list) for row in matrix):\n        raise TypeError(\"Input must be a list of lists\")\n\n    # Check if all elements in the matrix are integers\n    if not all(all(isinstance(element, int) for element in row) for row in matrix):\n        raise TypeError(\"All elements in the matrix must be integers\")\n\n    # Handle empty matrix\n    if len(matrix) == 0:\n        return []\n\n    # Extend the function to handle matrices with rows of varying lengths\n    # Treat missing values as zeros\n    max_length = max(len(row) for row in matrix)\n    extended_matrix = [row + [0] * (max_length - len(row)) for row in matrix]\n\n    # Sort the matrix based on the sum of each row\n    sorted_matrix = sorted(extended_matrix, key=lambda row: sum(row))\n    \n    return sorted_matrix\n\n\n# Example usage:\nmatrix = [\n    [3, 1, 2],\n    [2, 5, 1],\n    [4, 0, 6]\n]\n\nsorted_matrix = sort_matrix(matrix)\nprint(\"Original Matrix:\")\nfor row in matrix:\n    print(row)\n\nprint(\"\\nSorted Matrix:\")\nfor row in sorted_matrix:\n    print(row)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpud17qkhm.py\", line 45, in <module>\n    test_annotations()\n  File \"/tmp/tmpud17qkhm.py\", line 44, in test_annotations\n    assert hints == {'matrix': 'list[list[int]]', 'return': 'list[list[int]]'}\nAssertionError", "passed": false}
{"task_id": 14, "requirement": "Code Standard", "completion": "def find_volume(base_length: float, triangle_height: float, prism_height: float) -> float:\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    - base_length: Length of the base of the triangular face.\n    - triangle_height: Height of the triangular face.\n    - prism_height: Height (or length) of the prism.\n\n    Returns:\n    - Volume of the triangular prism.\n    \"\"\"\n\n    # Calculate the area of the triangular base\n    base_area = 0.5 * base_length * triangle_height\n    \n    # Calculate the volume of the prism\n    volume = base_area * prism_height\n    \n    return volume\n\n# Example usage:\nbase_length = 4.0\ntriangle_height = 3.0\nprism_height = 10.0\n\nvolume = find_volume(base_length, triangle_height, prism_height)\nprint(f\"The volume of the triangular prism is: {volume}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxvtqkbkt.py\", line 16, in <module>\n    assert find_volume(5.5, 3.2, 4.1) == 72.16\nAssertionError", "passed": false}
{"task_id": 15, "requirement": "Code Standard", "completion": "import re\n\ndef split_lowerstring(text: str) -> list:\n    \"\"\"\n    Splits a string at lowercase letters.\n\n    Parameters:\n    text (str): The string to be split.\n\n    Returns:\n    list: A list of strings, each representing a segment of the original string split at lowercase letters.\n    \n    Raises:\n    TypeError: If the input is not a string.\n    \"\"\"\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n\n    # Use regular expression to find all occurrences where a lowercase letter is followed by any non-lowercase characters\n    return re.findall(r'[a-z][^a-z]*', text)\n", "result": "failed: File \"/tmp/tmpb8gm5a2k.py\", line 11\n    try: split_lowerstring(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 16, "requirement": "Code Standard", "completion": "import re\n\ndef text_lowercase_underscore(text: str) -> str:\n    \"\"\"\n    Finds sequences of lowercase letters joined with an underscore in a given string.\n\n    Parameters:\n    text (str): The input string to search for the pattern.\n\n    Returns:\n    str: A message indicating whether a match was found or not.\n    \"\"\"\n    # Define the regex pattern for lowercase letters joined with an underscore\n    pattern = r'[a-z]+_[a-z]+'\n    \n    # Check if the input is a string\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Use re.findall to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Return appropriate message based on whether matches were found\n    if matches:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\ntry:\n    text = \"hello_world this_is_python example_text\"\n    result = text_lowercase_underscore(text)\n    print(result)  # Output: Found a match!\nexcept TypeError as e:\n    print(e)\n\n# Testing with empty string\ntry:\n    text = \"\"\n    result = text_lowercase_underscore(text)\n    print(result)  # Output: Not matched!\nexcept TypeError as e:\n    print(e)\n\n# Testing with non-string input\ntry:\n    text = 12345\n    result = text_lowercase_underscore(text)\nexcept TypeError as e:\n    print(e)  # Output: Input must be a string\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpyx287uwz.py\", line 37, in <module>\n    assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')\nAssertionError", "passed": false}
{"task_id": 17, "requirement": "Code Standard", "completion": "def square_perimeter(side_length: int) -> int:\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    :param side_length: The length of one side of the square.\n    :type side_length: int\n    \n    :return: The perimeter of the square.\n    :rtype: int\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length must be a non-negative integer.\")\n    \n    return 4 * side_length\n\n# Example usage:\nside = 5\ntry:\n    perimeter = square_perimeter(side)\n    print(f\"The perimeter of a square with side length {side} is {perimeter}.\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpoam5_ywf.py\", line 30, in <module>\n    assert square_perimeter.__annotations__ == {'a': int, 'return': int}\nAssertionError", "passed": false}
{"task_id": 18, "requirement": "Code Standard", "completion": "def remove_dirty_chars(string1: str, string2: str) -> str:\n    \"\"\"\n    Removes characters from 'string1' that are also present in 'string2'.\n\n    Args:\n        string1 (str): The string to remove characters from.\n        string2 (str): The string containing characters to remove from 'string1'.\n\n    Returns:\n        str: A new string with characters removed.\n\n    Raises:\n        ValueError: If either input contains non-alphabetic characters.\n        TypeError: If either input is not a string.\n    \"\"\"\n\n    assert isinstance(string1, str), \"'string1' must be a string.\"\n    assert isinstance(string2, str), \"'string2' must be a string.\"\n\n    for c in string1 + string2:\n        assert c.isalpha(), f\"Invalid character '{c}'.\"\n\n    return \"\".join(char for char in string1 if char not in string2)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7eyx_nle.py\", line 11, in <module>\n    try: remove_dirty_chars('hell0', 'world')\n  File \"/tmp/tmp7eyx_nle.py\", line 5, in remove_dirty_chars\n    assert c.isalpha(), f\"Invalid character '{c}'.\"\nAssertionError: Invalid character '0'.", "passed": false}
{"task_id": 19, "requirement": "Code Standard", "completion": "def test_duplicate(array_nums: list) -> bool:\n    \"\"\"\n    Check if a given list of integers contains any duplicate element.\n    \n    Parameters:\n    - array_nums (list): List of integers to check for duplicates.\n    \n    Returns:\n    - bool: True if duplicates exist, False otherwise.\n    \n    Raises:\n    - TypeError: If the input is not a list.\n    - ValueError: If the input is not a list of integers.\n    \"\"\"\n    if not isinstance(array_nums, list):\n        raise TypeError(\"Input must be a list\")\n    \n    if not all(isinstance(num, int) for num in array_nums):\n        raise ValueError(\"Input must be a list of integers\")\n    \n    # Convert the list into a set, which automatically removes duplicates\n    unique_elements = set(array_nums)\n    \n    # Compare the length of the original list with the set\n    # If they're different, there must be duplicates\n    return len(array_nums) != len(unique_elements)\n\n# Example usage:\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1]\nprint(test_duplicate(my_list))  # Output: True\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp70ixbsrp.py\", line 26, in <module>\n    test_duplicate(None)\n  File \"/tmp/tmp70ixbsrp.py\", line 3, in test_duplicate\n    raise TypeError(\"Input must be a list\")\nTypeError: Input must be a list\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmp70ixbsrp.py\", line 29, in <module>\n    assert str(e) == 'Input must be a list of integers'\nAssertionError", "passed": false}
{"task_id": 20, "requirement": "Code Standard", "completion": "def is_woodall(x: int) -> bool:\n    # Check if the input number is less than 3 (the smallest Woodall number)\n    if x < 3:\n        return False\n    \n    # Iterate over possible values of n starting from 1\n    n = 1\n    while True:\n        # Calculate the Woodall number for the current value of n\n        woodall_number = n * (2 ** n) - 1\n        \n        # If the calculated Woodall number matches the input number, it is a Woodall number\n        if woodall_number == x:\n            return True\n        \n        # If the calculated Woodall number exceeds the input number, break the loop\n        elif woodall_number > x:\n            return False\n        \n        # Increment n for the next iteration\n        n += 1\n\n# Example usage:\nprint(is_woodall(7))   # Output: True (since 7 = 1 * 2^3 - 1)\nprint(is_woodall(8))   # Output: False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpo4ml9ud6.py\", line 31, in <module>\n    else: assert False, 'TypeError not raised'\nAssertionError: TypeError not raised", "passed": false}
{"task_id": 21, "requirement": "Code Standard", "completion": "def multiples_of_num(n: int, m: int) -> list:\n    \"\"\"\n    This function returns a list of the first m multiples of n.\n    \n    Parameters:\n    n (int): The number for which to find multiples.\n    m (int): The number of multiples to find.\n    \n    Returns:\n    list: A list containing the first m multiples of n.\n    \"\"\"\n    if m < 1:\n        raise ValueError(\"The number of multiples must be a positive integer.\")\n    \n    return [i * n for i in range(1, m + 1)]\n\n# Example usage:\nprint(multiples_of_num(3, 5))  # Output: [3, 6, 9, 12, 15]\nprint(multiples_of_num(7, 4))  # Output: [7, 14, 21, 28]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpujtq17v_.py\", line 8, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "requirement": "Code Standard", "completion": "def find_first_duplicate(nums: list) -> int:\n    seen = set()\n    \n    for num in nums:\n        if num in seen:\n            return num\n        else:\n            seen.add(num)\n    \n    return None  # Return None if no duplicates found\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpm7jx1cay.py\", line 10, in <module>\n    assert find_first_duplicate([1, 2, 3, 4])==-1\nAssertionError", "passed": false}
{"task_id": 23, "requirement": "Code Standard", "completion": "def find_maximum_sum(input_list: list[list[int]]) -> int:\n    \"\"\"\n    Finds the maximum sum of elements from any sublist.\n    \n    Args:\n        input_list (list[list[int]]): A list of lists containing integers.\n        \n    Returns:\n        int: An integer representing the maximum sum of elements from any sublist.\n        \n    Raises:\n        TypeError: If the input is not a list of lists or if any sublist contains non-integer elements.\n    \"\"\"\n\n    # Raise error if input is not a list of lists\n    if not isinstance(input_list, list) or not all(isinstance(sublist, list) for sublist in input_list):\n        raise TypeError('Input must be a list of lists')\n\n    # Raise error if any sublist contains non-integer elements\n    flattened = [item for sublist in input_list for item in sublist]\n    if not all(isinstance(item, int) for item in flattened):\n        raise TypeError('All elements in sublists must be integers')\n\n    # Return the maximum sum of elements from any sublist\n    return max(sum(sublist) for sublist in input_list)\n\n\n# Examples:\nprint(find_maximum_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]])) # Should print 24\nprint(find_maximum_sum([[-1, -2, -3], [-4, -5, -6], [-7, -8, -9]])) # Should print -3\nprint(find_maximum_sum([])) # Should print 0\n", "result": "failed: File \"/tmp/tmp8q1mq3b7.py\", line 19\n    try: maximum_sum([[1, 2], [3, 'a']]); assert False, 'Expected TypeError' except TypeError: pass\n                                                                             ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 24, "requirement": "Code Standard", "completion": "def binary_to_decimal(binary_str: str) -> int:\n    \"\"\"\n    Convert a binary number (as a string) to its decimal equivalent.\n\n    Parameters:\n    binary_str (str): The binary number as a string.\n\n    Returns:\n    int: The decimal equivalent of the binary number.\n    \"\"\"\n    if not all(char in '01' for char in binary_str):\n        raise ValueError('Invalid binary number')\n    \n    decimal_value = 0\n    length = len(binary_str)\n    \n    for i in range(length):\n        power = length - i - 1\n        if binary_str[i] == '1':\n            decimal_value += 2 ** power\n    \n    return decimal_value\n\n# Example usage:\nbinary_number = \"1101\"\ntry:\n    decimal_number = binary_to_decimal(binary_number)\n    print(f\"The decimal equivalent of {binary_number} is {decimal_number}\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: File \"/tmp/tmpr_rwf9u0.py\", line 21\n    try: binary_to_decimal('102'); assert False, 'Expected ValueError' except ValueError as e: assert str(e) == 'Invalid binary number'\n                                                                       ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 25, "requirement": "Code Standard", "completion": "def find_product(arr: list) -> int:\n    \"\"\"\n    Find the product of non-repeated elements in a given list of integers.\n    \n    :param arr: List of integers\n    :return: Product of non-repeated elements\n    \"\"\"\n\n    # Check if the input is a list of integers\n    if not isinstance(arr, list) or not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"Input must be a list of integers\")\n\n    # Handle the case when the list is empty\n    if len(arr) == 0:\n        return 1\n\n    # Create a dictionary to store the frequency of each element\n    frequency = {}\n    for num in arr:\n        if num not in frequency:\n            frequency[num] = 1\n        else:\n            frequency[num] += 1\n\n    # Calculate the product of non-repeated elements\n    product = 1\n    for num in arr:\n        if frequency[num] == 1:\n            product *= num\n\n    return product\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpie2gkw1v.py\", line 21, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "requirement": "Code Standard", "completion": "def check_k_elements(test_list, K):\n    \"\"\"\n    Checks if all tuples in the given list have exactly k elements.\n\n    Parameters:\n    test_list (List[Tuple[Any]]): The list of tuples to check.\n    K (int): The number of elements each tuple should have.\n\n    Returns:\n    bool: True if all tuples have exactly K elements, False otherwise.\n    \"\"\"\n    for tup in test_list:\n        if len(tup) != K:\n            return False\n    return True\n\n# Example usage:\ntuples = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nK = 3\nprint(check_k_elements(tuples, K))  # Output: True\n\ntuples = [(1, 2), (3, 4, 5), (6, 7, 8)]\nK = 3\nprint(check_k_elements(tuples, K))  # Output: False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpf9ktk0m9.py\", line 13, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "requirement": "Code Standard", "completion": "import re\n\ndef remove(strings):\n    \"\"\"\n    Removes all digits from each string in the given list of strings.\n    \n    Parameters:\n    strings (list): A list of strings from which digits will be removed.\n    \n    Returns:\n    list: A new list containing the modified strings with digits removed.\n    \"\"\"\n    digit_pattern = re.compile(r'\\d')\n    return [digit_pattern.sub('', s) for s in strings]\n\n# Example usage:\ninput_list = [\"hello123\", \"world456\", \"test789\"]\noutput_list = remove(input_list)\nprint(output_list)  # Output: ['hello', 'world', 'test']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphuyya755.py\", line 17, in <module>\n    assert False, 'TypeError not raised'\nAssertionError: TypeError not raised", "passed": false}
{"task_id": 28, "requirement": "Code Standard", "completion": "from typing import Tuple\n\ndef binomial_coefficient(n: int, k: int) -> int:\n    \"\"\"\n    Calculate the binomial coefficient C(n, k).\n\n    Parameters:\n    n (int): The total number of items.\n    k (int): The number of items to choose.\n\n    Returns:\n    int: The binomial coefficient C(n, k).\n    \"\"\"\n    if k > n:\n        raise ValueError(\"Inputs must be non-negative integers and k must not be greater than n\")\n    \n    if k == 0 or k == n:\n        return 1\n    \n    # Utilize the property C(n, k) = C(n, n-k) for efficiency\n    k = min(k, n - k)\n    \n    # Calculate the binomial coefficient using factorials\n    numerator = math.factorial(n)\n    denominator = math.factorial(k) * math.factorial(n - k)\n    \n    return numerator // denominator\n\n# Example usage:\nn, k = 5, 2\ntry:\n    print(f\"C({n}, {k}) = {binomial_coefficient(n, k)}\")  # Output: C(5, 2) = 10\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvbx1vre8.py\", line 16, in <module>\n    print(f\"C({n}, {k}) = {binomial_coefficient(n, k)}\")  # Output: C(5, 2) = 10\n  File \"/tmp/tmpvbx1vre8.py\", line 10, in binomial_coefficient\n    numerator = math.factorial(n)\nNameError: name 'math' is not defined", "passed": false}
{"task_id": 29, "requirement": "Code Standard", "completion": "def get_odd_occurrence(arr: list) -> int:\n    \"\"\"\n    Find the element occurring an odd number of times in an array.\n    \n    Parameters:\n    arr (list): A list of integers.\n    \n    Returns:\n    int: The element that occurs an odd number of times. Returns None if the list is empty.\n    \n    Raises:\n    TypeError: If the input is not a list of integers.\n    \"\"\"\n    # Check if the input is a list of integers\n    if not isinstance(arr, list) or not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"Input must be a list of integers.\")\n    \n    # Handle an empty list by returning None\n    if len(arr) == 0:\n        return None\n    \n    result = 0\n    for num in arr:\n        result ^= num\n    \n    return result\n\n# Example usage:\narr = [2, 3, 5, 4, 5, 3, 4]\nprint(get_odd_occurrence(arr))  # Output: 2\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpslsfwhxn.py\", line 15, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "requirement": "Code Standard", "completion": "def count_substring_with_equal_ends(s: str) -> int:\n    \"\"\"\n    Count all substrings starting and ending with the same character.\n\n    :param s: The input string.\n    :return: An integer count of substrings starting and ending with the same character.\n    \"\"\"\n    \n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    \n    n = len(s)\n    count = 0\n    \n    # Iterate over all possible starting points of substrings\n    for i in range(n):\n        # Iterate over all possible ending points of substrings\n        for j in range(i, n):\n            # Check if the substring from index i to j has equal start and end characters\n            if s[i] == s[j]:\n                count += 1\n    \n    return count\n\n# Example usage:\ns = \"abcab\"\nprint(count_substring_with_equal_ends(s))  # Output: 7\n", "result": "failed: File \"/tmp/tmpj00_vbv8.py\", line 21\n    try: count_substring_with_equal_ends(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                                  ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 31, "requirement": "Code Standard", "completion": "import heapq\nfrom collections import defaultdict\nfrom typing import List\n\ndef func(lists_of_integers: List[List[int]], k: int) -> List[int]:\n    # Dictionary to store the frequency of each integer\n    freq_dict = defaultdict(int)\n    \n    # Count the frequency of each integer in all lists\n    for lst in lists_of_integers:\n        for num in lst:\n            freq_dict[num] += 1\n    \n    # Min-heap to store the top k frequent elements\n    min_heap = []\n    \n    # Iterate over the frequency dictionary\n    for num, freq in freq_dict.items():\n        if len(min_heap) < k:\n            # Push the current element onto the heap\n            heapq.heappush(min_heap, (freq, num))\n        elif freq > min_heap[0][0]:\n            # Replace the smallest element with the current element if it has higher frequency\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (freq, num))\n    \n    # Extract the elements from the heap and sort them in descending order of frequency\n    result = [num for freq, num in sorted(min_heap, reverse=True)]\n    \n    return result\n\n# Example usage:\nlists_of_integers = [\n    [1, 2, 3],\n    [2, 3, 4],\n    [2, 5]\n]\nk = 2\nprint(func(lists_of_integers, k))  # Output: [2, 3]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpj76ed3bt.py\", line 33, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "requirement": "Code Standard", "completion": "def max_prime_factors(n: int) -> int:\n    \"\"\"\n    Finds the largest prime factor of a given positive integer.\n    \n    Parameters:\n    n (int): A positive integer whose largest prime factor is to be found.\n    \n    Returns:\n    int: The largest prime factor of the given number.\n    \n    Raises:\n    ValueError: If the input is not a positive integer.\n    \"\"\"\n    \n    # Ensure the input is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    # Initialize the smallest prime factor\n    factor = 2\n    \n    # Variable to store the largest prime factor found\n    max_factor = -1\n    \n    # Divide n by 2 until it becomes odd\n    while n % factor == 0:\n        max_factor = factor\n        n //= factor\n    \n    # Check for odd factors from 3 onwards\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            max_factor = i\n            n //= i\n    \n    # If n is still greater than 2, then n itself is a prime number\n    if n > 2:\n        max_factor = n\n    \n    return max_factor\n\n# Example usage:\nnumber = 600851475143\nprint(f\"The largest prime factor of {number} is {max_prime_factors(number)}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpd4ctonos.py\", line 30, in <module>\n    max_prime_factors(-10)\n  File \"/tmp/tmpd4ctonos.py\", line 4, in max_prime_factors\n    raise ValueError(\"Input must be a positive integer.\")\nValueError: Input must be a positive integer.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpd4ctonos.py\", line 32, in <module>\n    assert str(e) == 'Input must be a positive integer'\nAssertionError", "passed": false}
{"task_id": 33, "requirement": "Code Standard", "completion": "def decimal_to_binary(decimal_number: int) -> str:\n    if not isinstance(decimal_number, int) or decimal_number < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    # Special case for 0\n    if decimal_number == 0:\n        return \"0\"\n    \n    binary_digits = []\n    \n    while decimal_number > 0:\n        remainder = decimal_number % 2\n        binary_digits.append(str(remainder))\n        decimal_number //= 2\n    \n    # The binary digits are in reverse order, so we need to reverse them\n    binary_digits.reverse()\n    \n    return ''.join(binary_digits)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpz1ixscaq.py\", line 15, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "requirement": "Code Standard", "completion": "def find_missing(array: list) -> int:\n    \"\"\"\n    Find the missing number in a sorted array.\n\n    Parameters:\n    array (list): A sorted list of integers with one missing number.\n\n    Returns:\n    int: The missing number.\n    \"\"\"\n    if not array:\n        raise ValueError(\"Input list must not be empty.\")\n    \n    left_index = 0\n    right_index = len(array) - 1\n    \n    while left_index <= right_index:\n        mid_index = (left_index + right_index) // 2\n        \n        # Check if the missing number is on the left side\n        if array[mid_index] != mid_index + array[0]:\n            right_index = mid_index - 1\n        else:\n            left_index = mid_index + 1\n    \n    # If no missing number found, return None\n    return None\n\n# Example usage:\nsorted_array = [1, 2, 3, 4, 6, 7, 8]\ntry:\n    missing_number = find_missing(sorted_array)\n    print(f\"The missing number is: {missing_number}\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpsx36ys2w.py\", line 22, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "requirement": "Code Standard", "completion": "def find_rectangular_number(n: int) -> int:\n    \"\"\"\n    Calculate the n-th triangular number.\n\n    Parameters:\n    n (int): The position of the triangular number in the sequence.\n\n    Returns:\n    int: The n-th triangular number.\n    \"\"\"\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"The input must be a non-negative integer.\")\n    \n    return n * (n + 1) // 2\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(find_rectangular_number(1))  # Output: 1\n    print(find_rectangular_number(3))  # Output: 6\n    print(find_rectangular_number(5))  # Output: 15\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp249ey6vv.py\", line 10, in <module>\n    assert find_rect_num(4) == 20\nNameError: name 'find_rect_num' is not defined", "passed": false}
{"task_id": 36, "requirement": "Code Standard", "completion": "def find_nth_digit(numerator: int, denominator: int, n: int) -> int:\n    \"\"\"\n    Find the nth digit in the decimal representation of the proper fraction numerator/denominator.\n    \n    :param numerator: The numerator of the fraction.\n    :param denominator: The denominator of the fraction.\n    :param n: The position of the digit to be found (1-based index).\n    :return: The nth digit in the decimal representation of the fraction.\n    \"\"\"\n    if numerator >= denominator:\n        raise ValueError(\"Numerator must be less than the denominator for a proper fraction.\")\n    \n    # Dictionary to store seen remainders and their corresponding position in the decimal part\n    seen_remainders = {}\n    \n    # Initialize variables\n    quotient_digits = []\n    remainder = numerator % denominator\n    \n    # Position counter\n    current_position = 0\n    \n    while remainder != 0:\n        if remainder in seen_remainders:\n            start_index = seen_remainders[remainder]\n            repeating_sequence = ''.join(map(str, quotient_digits[start_index:]))\n            return int(repeating_sequence[n - start_index - 1])\n        \n        seen_remainders[remainder] = current_position\n        \n        remainder *= 10\n        digit = remainder // denominator\n        quotient_digits.append(digit)\n        remainder %= denominator\n        \n        current_position += 1\n    \n    # If we exit the loop, it means there is no repeating part\n    return quotient_digits[n - 1]\n\n# Example usage:\nnumerator = 1\ndenominator = 3\nn = 5\nprint(find_nth_digit(numerator, denominator, n))  # Output: 3 (since 1/3 = 0.3333...)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp17hpx87x.py\", line 28, in <module>\n    print(find_nth_digit(numerator, denominator, n))  # Output: 3 (since 1/3 = 0.3333...)\n  File \"/tmp/tmp17hpx87x.py\", line 15, in find_nth_digit\n    return int(repeating_sequence[n - start_index - 1])\nIndexError: string index out of range", "passed": false}
{"task_id": 37, "requirement": "Code Standard", "completion": "from typing import List, Union\n\ndef sort_mixed_list(mixed_list: List[Union[int, str]]) -> List[Union[int, str]]:\n    \"\"\"\n    Sorts a mixed list of integers and strings.\n\n    Parameters:\n    mixed_list (List[Union[int, str]]): A list containing both integers and strings.\n\n    Returns:\n    List[Union[int, str]]: A sorted list containing both integers and strings.\n    \"\"\"\n\n    # Validate input\n    if not isinstance(mixed_list, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Separate integers and strings into two different lists\n    int_list = [item for item in mixed_list if isinstance(item, int)]\n    str_list = [item for item in mixed_list if isinstance(item, str)]\n\n    # Sort each list separately\n    int_list.sort()\n    str_list.sort()\n\n    # Combine the sorted lists back together\n    sorted_list = int_list + str_list\n\n    return sorted_list\n\n\n# Example usage:\nmixed_list = [3, \"apple\", 1, \"banana\", 2, \"cherry\"]\nsorted_list = sort_mixed_list(mixed_list)\nprint(sorted_list)  # Output: [1, 2, 3, 'apple', 'banana', 'cherry']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpa1taanuj.py\", line 34, in <module>\n    assert False, 'Expected TypeError'\nAssertionError: Expected TypeError", "passed": false}
{"task_id": 38, "requirement": "Code Standard", "completion": "def div_even_odd(lst):\n    \"\"\"\n    Find the division of the first even and first odd number in a given list.\n\n    Parameters:\n    lst (list): A list of integers.\n\n    Returns:\n    int or float: The division of the first even number by the first odd number.\n\n    Raises:\n    ValueError: If the list does not contain at least one even and one odd number.\n    \"\"\"\n    # Initialize variables to store the first even and first odd numbers\n    first_even = None\n    first_odd = None\n\n    # Iterate through the list to find the first even and first odd numbers\n    for num in lst:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n\n        # If both even and odd numbers have been found, break out of the loop\n        if first_even is not None and first_odd is not None:\n            break\n\n    # Check if both even and odd numbers were found\n    if first_even is not None and first_odd is not None:\n        return first_even / first_odd\n    else:\n        raise ValueError(\"List must contain at least one even and one odd number.\")\n", "result": "failed: File \"/tmp/tmp5oa7j_lj.py\", line 23\n    try: div_even_odd([2, 4, 6]); assert False; except ValueError as e: assert str(e) == 'List must contain at least one even and one odd number.'\n                                                ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 39, "requirement": "Code Standard", "completion": "import heapq\nfrom collections import Counter\n\ndef rearrange_string(s: str) -> str:\n    \"\"\"\n    Rearranges the letters of a given string so that no two adjacent characters are the same.\n    \n    Parameters:\n    s (str): The input string consisting of lowercase letters.\n    \n    Returns:\n    str: A rearranged string with no two adjacent characters being the same, \n         or an empty string if rearrangement is not possible.\n         \n    Raises:\n    ValueError: If the input is not a string or contains characters other than lowercase letters.\n    \"\"\"\n    # Check if the input is a string and contains only lowercase letters\n    if not isinstance(s, str) or not s.islower():\n        raise ValueError(\"Input must be a non-empty string consisting only of lowercase letters.\")\n    \n    # Edge case: if all characters are the same, return an empty string\n    if len(set(s)) == 1:\n        return \"\"\n    \n    # Count the frequency of each character\n    char_count = Counter(s)\n    \n    # Create a max-heap based on character frequency\n    max_heap = [(-freq, char) for char, freq in char_count.items()]\n    heapq.heapify(max_heap)\n    \n    prev_char = None\n    prev_freq = 0\n    \n    result = []\n    \n    while max_heap or prev_freq:\n        if prev_freq < 0:\n            heapq.heappush(max_heap, (prev_freq, prev_char))\n        \n        if not max_heap:\n            return \"\"  # It's not possible to rearrange\n        \n        freq, char = heapq.heappop(max_heap)\n        result.append(char)\n        prev_char = char\n        prev_freq = freq + 1  # Increase frequency because it's stored as negative\n    \n    return ''.join(result)\n\n# Example usage:\ns = \"aabbcc\"\nprint(rearrange_string(s))  # Output could be \"abcabc\" or any valid rearrangement\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_ly5ahna.py\", line 31, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "requirement": "Code Standard", "completion": "from collections import Counter\n\ndef freq_element(nums: list[list[int]]) -> dict[int, int]:\n    \"\"\"\n    Find the frequency of elements in a given list of lists.\n\n    Args:\n        nums (list[list[int]]): A list of lists containing integers.\n\n    Returns:\n        dict[int, int]: A dictionary where keys are the unique elements and values are their frequencies.\n    \"\"\"\n\n    # Flatten the list of lists into a single list\n    flattened_list = [item for sublist in nums for item in sublist]\n\n    # Use Counter to count the frequency of each element\n    frequency_counter = Counter(flattened_list)\n\n    return frequency_counter\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [2, 3, 4], [4, 5]]\nresult = freq_element(list_of_lists)\nprint(result)  # Output: {2: 2, 3: 2, 4: 2, 1: 1, 5: 1}\n", "result": "failed: File \"/tmp/tmplf6easwg.py\", line 15\n    try: freq_element('not a list'); assert False; except TypeError: assert True\n                                                   ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 41, "requirement": "Code Standard", "completion": "def filter_evennumbers(nums: list) -> list:\n    \"\"\"\n    Filters even numbers from a given list of integers.\n\n    :param nums: List of integers to be filtered.\n    :type nums: list\n    :return: A list containing only the even numbers from the input list.\n    :rtype: list\n    \"\"\"\n\n    # Check if the input is a list of integers\n    if not all(isinstance(num, int) for num in nums):\n        raise TypeError(\"Input must be a list of integers.\")\n\n    # Filter even numbers using a lambda function\n    even_numbers = list(filter(lambda x: x % 2 == 0, nums))\n\n    return even_numbers\n\n# Example usage:\nif __name__ == \"__main__\":\n    sample_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    result = filter_evennumbers(sample_numbers)\n    print(\"Even Numbers:\", result)\n", "result": "passed", "passed": true}
{"task_id": 42, "requirement": "Code Standard", "completion": "def find_sum(arr: list) -> int:\n    \"\"\"\n    Find the sum of repeated elements in a given array.\n    \n    Parameters:\n    arr (list): The input array.\n    \n    Returns:\n    int: The sum of repeated elements.\n    \"\"\"\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    if not arr:\n        return 0\n    \n    # Create a dictionary to count occurrences of each element\n    element_count = {}\n    \n    for num in arr:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n    \n    # Calculate the sum of repeated elements (elements that appear more than once)\n    repeated_sum = 0\n    for num, count in element_count.items():\n        if count > 1:\n            repeated_sum += num * count\n    \n    return repeated_sum\n\n# Example usage:\narr = [1, 2, 3, 2, 4, 5, 3, 6]\nprint(find_sum(arr))  # Output should be 10 (2+2+3+3)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqo78rbgq.py\", line 22, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Code Standard", "completion": "import re\n\ndef text_match(text: str) -> list:\n    \"\"\"\n    Find sequences of lowercase letters joined with an underscore.\n\n    Args:\n        text (str): The input string to search for the pattern.\n\n    Returns:\n        list: A list of all matches found in the input string.\n    \"\"\"\n    # Define the regex pattern for lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n\n    # Use re.findall to find all occurrences of the pattern\n    matches = re.findall(pattern, text)\n\n    return matches\n\n# Example usage:\nif __name__ == \"__main__\":\n    input_text = \"hello_world this_is_a_test example_string another_example\"\n    matches = text_match(input_text)\n    print(matches)  # Output: ['hello_world', 'this_is_a_test', 'example_string', 'another_example']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpuvfypafs.py\", line 13, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 44, "requirement": "Code Standard", "completion": "import re\n\ndef text_match_string(text: str) -> str:\n    \"\"\"\n    Check if a given string starts with a word.\n\n    Parameters:\n    text (str): The string to be checked.\n\n    Returns:\n    str: A message indicating whether a match was found or not.\n    \"\"\"\n    # Regular expression pattern to match a word at the beginning of the string\n    pattern = r'^\\w+'\n    \n    # Search for the pattern in the text\n    if re.match(pattern, text):\n        return \"Match found!\"\n    else:\n        return \"No match.\"\n\n# Example usage:\nprint(text_match_string(\"Hello, world!\"))  # Output: Match found!\nprint(text_match_string(\", Hello, world!\"))  # Output: No match.\n", "result": "failed: File \"/tmp/tmpegjwnfrg.py\", line 16\n    try: text_match_string(123); assert False, 'TypeError not raised' except TypeError: pass\n                                                                      ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 45, "requirement": "Code Standard", "completion": "import math\nfrom functools import reduce\n\ndef get_gcd(numbers: list) -> int:\n    \"\"\"\n    Find the greatest common divisor (GCD) of an array of integers.\n    \n    Parameters:\n    numbers (list): A list of integers for which to find the GCD.\n    \n    Returns:\n    int: The GCD of the array elements.\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"Input list cannot be empty.\")\n    \n    return reduce(math.gcd, numbers)\n\n# Example usage:\narr = [24, 60, 36]\nprint(get_gcd(arr))  # Output should be 12\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpntcvlq8z.py\", line 18, in <module>\n    assert cc_visit(inspect.getsource(get_gcd))[0].complexity <=1\nAssertionError", "passed": false}
{"task_id": 46, "requirement": "Code Standard", "completion": "def test_distinct(numbers: list) -> bool:\n    \"\"\"\n    Determine whether all numbers in the list are distinct.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        bool: True if all numbers are distinct, False otherwise.\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(num, int) for num in numbers):\n        raise TypeError(\"All elements in the list must be integers.\")\n    \n    # Convert the list to a set and compare its length to the original list\n    return len(numbers) == len(set(numbers))\n\n# Example usage:\nnumbers = [1, 2, 3, 4, 5]\nprint(test_distinct(numbers))  # Output: True\n\nnumbers_with_duplicates = [1, 2, 3, 3, 5]\nprint(test_distinct(numbers_with_duplicates))  # Output: False\n", "result": "passed", "passed": true}
{"task_id": 48, "requirement": "Code Standard", "completion": "def set_odd_bits_of_number(n: int) -> int:\n    # Initialize a mask with all odd bits set to 1\n    mask = 0xAAAAAAAA  # This is a hexadecimal representation where all odd bits are 1 (binary: 10101010...)\n\n    # Use bitwise OR to set all odd bits of n to 1\n    result = n | mask\n    \n    return result\n\n# Example usage:\nnumber = 0b1010101010101010  # Binary representation of 43690\nresult = set_odd_bits_of_number(number)\nprint(bin(result))  # Output should be the same as the input since all odd bits are already 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpt43_1adv.py\", line 11, in <module>\n    assert odd_bit_set_number(10) == 15\nNameError: name 'odd_bit_set_number' is not defined", "passed": false}
{"task_id": 49, "requirement": "Code Standard", "completion": "def specified_element(two_d_list, index=0):\n    \"\"\"\n    Extracts the first or specified element from each sub-list in a given 2D list.\n\n    Parameters:\n    - two_d_list: A list of lists from which elements need to be extracted.\n    - index: The index of the element to extract from each sub-list. Default is 0 (first element).\n\n    Returns:\n    - A list containing the extracted elements.\n    \"\"\"\n    result = []\n    for sublist in two_d_list:\n        if len(sublist) > index:\n            result.append(sublist[index])\n    return result\n\n# Example usage:\n\ntwo_d_list = [[1, 2, 3], [4, 5], [6, 7, 8, 9]]\n\nprint(specified_element(two_d_list))  # Output: [1, 4, 6]\nprint(specified_element(two_d_list, 1))  # Output: [2, 5, 7]\n", "result": "passed", "passed": true}
{"task_id": 51, "requirement": "Code Standard", "completion": "def check_equilateral(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Checks if a triangle with sides a, b, and c is equilateral.\n    \n    Parameters:\n    a (int): Length of the first side of the triangle.\n    b (int): Length of the second side of the triangle.\n    c (int): Length of the third side of the triangle.\n    \n    Returns:\n    bool: True if the triangle is equilateral, False otherwise.\n    \"\"\"\n    if a <= 0 or b <= 0 or c <= 0:\n        raise ValueError(\"All side lengths must be positive integers.\")\n    \n    return a == b == c\n\n# Example usage:\nside1 = 5\nside2 = 5\nside3 = 5\n\nis_equilateral = check_equilateral(side1, side2, side3)\nprint(is_equilateral)  # Output: True\n\nside1 = 5\nside2 = 6\nside3 = 7\n\nis_equilateral = check_equilateral(side1, side2, side3)\nprint(is_equilateral)  # Output: False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwvepq01c.py\", line 35, in <module>\n    assert cc_visit(inspect.getsource(check_equilateral))[0].complexity ==1\nAssertionError", "passed": false}
{"task_id": 52, "requirement": "Code Standard", "completion": "def parallelogram_area(base: float, height: float) -> float:\n    \"\"\"Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram.\n    \"\"\"\n    # Check if base and height are non-negative\n    if base < 0 or height < 0:\n        raise ValueError(\"Base and height must be non-negative numbers.\")\n    \n    # Calculate the area\n    area = base * height\n    \n    return area\n\n# Example usage:\nbase = 5\nheight = 3\narea = parallelogram_area(base, height)\nprint(f\"The area of the parallelogram with base {base} and height {height} is {area}.\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvn3xwfig.py\", line 48, in <module>\n    assert cc_visit(inspect.getsource(parallelogram_area))[0].complexity ==1\nAssertionError", "passed": false}
{"task_id": 53, "requirement": "Code Standard", "completion": "def check_equality(s: str) -> bool:\n    \"\"\"\n    Check if the first and last characters of a given string are equal.\n    \n    Args:\n        s (str): The string to check.\n        \n    Returns:\n        bool: True if the first and last characters are equal, False otherwise.\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    if len(s) == 0:\n        return True\n    return s[0] == s[-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxs5mthlu.py\", line 7, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 54, "requirement": "Code Standard", "completion": "def counting_sort(arr: list[int]) -> list[int]:\n    \"\"\"\n    Sorts a list of non-negative integers using counting sort algorithm.\n    \n    Parameters:\n    arr (list[int]): List of non-negative integers to be sorted.\n    \n    Returns:\n    list[int]: Sorted list of integers.\n    \"\"\"\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"List must contain only integers.\")\n    \n    if not all(x >= 0 for x in arr):\n        raise TypeError(\"List must contain non-negative integers.\")\n    \n    # Edge case: if the list is empty or has only one element, return it as is\n    if len(arr) <= 1:\n        return arr\n    \n    # Find the maximum value in the array to determine the size of count array\n    max_value = max(arr)\n    \n    # Initialize the count array with zeros\n    count_array = [0] * (max_value + 1)\n    \n    # Populate the count array where each index represents a key and its value represents the frequency of that key\n    for num in arr:\n        count_array[num] += 1\n    \n    # Reconstruct the sorted array based on the count array\n    sorted_index = 0\n    for i in range(max_value + 1):\n        while count_array[i] > 0:\n            arr[sorted_index] = i\n            sorted_index += 1\n            count_array[i] -= 1\n    \n    return arr\n\n# Example usage:\narr = [4, 2, 2, 8, 3, 3, 1]\nsorted_arr = counting_sort(arr)\nprint(\"Sorted Array:\", sorted_arr)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpc2t5wj9b.py\", line 54, in <module>\n    test_annotations()\n  File \"/tmp/tmpc2t5wj9b.py\", line 53, in test_annotations\n    assert hints == {'arr': list, 'return': list}\nAssertionError", "passed": false}
{"task_id": 55, "requirement": "Code Standard", "completion": "def tn_gp(a: float, r: float, n: int) -> float:\n    \"\"\"\n    Calculate the n-th term of a geometric series.\n    \n    Parameters:\n    a (float): The first term of the geometric series.\n    r (float): The common ratio of the geometric series.\n    n (int): The term number to find.\n    \n    Returns:\n    float: The n-th term of the geometric series.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"The term number n must be a positive integer.\")\n    \n    return a * (r ** (n - 1))\n\n\n# Example usage:\nfirst_term = 2\ncommon_ratio = 3\nterm_number = 5\n\ntry:\n    nth_term = tn_gp(first_term, common_ratio, term_number)\n    print(f\"The {term_number}-th term of the geometric series is: {nth_term}\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3wzq1z1l.py\", line 14, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "requirement": "Code Standard", "completion": "def reverse_number(n: int) -> int:\n    \"\"\"Helper function to reverse the digits of a number.\"\"\"\n    reversed_n = 0\n    while n > 0:\n        reversed_n = reversed_n * 10 + n % 10\n        n //= 10\n    return reversed_n\n\ndef check(number: int) -> bool:\n    \"\"\"Function to check if the number is one less than twice its reverse.\"\"\"\n    if not isinstance(number, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    reversed_num = reverse_number(number)\n    return number == 2 * reversed_num - 1\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(check(19))  # True, because 2 * 91 - 1 = 181\n    print(check(123)) # False, because 2 * 321 - 1 != 123\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp__mpabx1.py\", line 28, in <module>\n    assert check(1) == False\nAssertionError", "passed": false}
{"task_id": 57, "requirement": "Code Standard", "completion": "def find_max_num(digits: list, n: int) -> int:\n    # Check if the number of digits exceeds the length of the list\n    if n > len(digits):\n        raise ValueError('Number of digits exceeds the length of the list.')\n    \n    # Handle the edge case where the list of digits is empty\n    if not digits:\n        return 0\n    \n    # Convert each digit to a string for easy sorting\n    str_digits = [str(digit) for digit in digits]\n    \n    # Sort the digits in descending order\n    sorted_digits = sorted(str_digits, reverse=True)\n    \n    # Concatenate the sorted digits to form the largest number\n    max_number = int(''.join(sorted_digits))\n    \n    return max_number\n\n# Example usage:\ndigits = [3, 1, 4, 1, 5, 9]\nprint(find_max_num(digits, 6))  # Output: 954311\n", "result": "passed", "passed": true}
{"task_id": 58, "requirement": "Code Standard", "completion": "def opposite_signs(a: int, b: int) -> bool:\n    \"\"\"\n    Check whether the given two integers have opposite signs.\n    \n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n    \n    Returns:\n        bool: True if the integers have opposite signs, False otherwise.\n    \n    Raises:\n        TypeError: If either input is not an integer.\n    \"\"\"\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise TypeError(\"Both inputs must be integers.\")\n    \n    return (a ^ b) < 0\n\n# Example usage:\nnum1 = -5\nnum2 = 10\nprint(opposite_signs(num1, num2))  # Output: True\n\nnum3 = 7\nnum4 = 9\nprint(opposite_signs(num3, num4))  # Output: False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwmsrvgxm.py\", line 31, in <module>\n    assert opposite_signs(0, 1) == True\nAssertionError", "passed": false}
{"task_id": 59, "requirement": "Code Standard", "completion": "def is_octagonal(n):\n    if n <= 0:\n        raise ValueError(\"The input must be a positive integer.\")\n    \n    # Calculate the nth octagonal number using the formula\n    return n * (3 * n - 2)\n\n# Example usage:\n# print(is_octagonal(1))  # Output: 1\n# print(is_octagonal(2))  # Output: 8\n# print(is_octagonal(3))  # Output: 21\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp75p1jdyn.py\", line 14, in <module>\n    is_octagonal(-1)\n  File \"/tmp/tmp75p1jdyn.py\", line 3, in is_octagonal\n    raise ValueError(\"The input must be a positive integer.\")\nValueError: The input must be a positive integer.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmp75p1jdyn.py\", line 16, in <module>\n    assert str(e) == 'Input must be a positive integer'\nAssertionError", "passed": false}
{"task_id": 60, "requirement": "Code Standard", "completion": "def max_len_sub(arr: list[int]) -> int:\n    \"\"\"\n    Find the maximum length of the subsequence where the difference between adjacent elements is at most 1.\n\n    Parameters:\n    arr (list[int]): A list of integers.\n\n    Returns:\n    int: The maximum length of the subsequence.\n    \"\"\"\n    if not arr:\n        return 0\n    \n    n = len(arr)\n    dp = [1] * n  # Initialize DP array with 1s since the minimum length of any subsequence is 1\n    \n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) <= 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)\n\n# Example usage:\narr = [1, 2, 3, 4, 5]\nprint(max_len_sub(arr))  # Output: 5\n\narr = [4, 3, 5, 2, 1]\nprint(max_len_sub(arr))  # Output: 5\n\narr = [1, 3, 5, 7, 9]\nprint(max_len_sub(arr))  # Output: 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvopx1kke.py\", line 18, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}

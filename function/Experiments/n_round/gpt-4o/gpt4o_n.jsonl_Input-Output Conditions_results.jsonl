{"task_id": 14, "requirement": "Input-Output Conditions", "completion": "def find_volume(base_length, triangle_height, prism_height):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base_length (float or int): The length of the base of the triangular face.\n    triangle_height (float or int): The height of the triangular face.\n    prism_height (float or int): The height (or length) of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n\n    Raises:\n    ValueError: If any of the inputs are not positive numbers.\n    \"\"\"\n    # Validate the inputs\n    if not (isinstance(base_length, (int, float)) and base_length > 0):\n        raise ValueError(\"Base length must be a positive number.\")\n    if not (isinstance(triangle_height, (int, float)) and triangle_height > 0):\n        raise ValueError(\"Triangle height must be a positive number.\")\n    if not (isinstance(prism_height, (int, float)) and prism_height > 0):\n        raise ValueError(\"Prism height must be a positive number.\")\n    \n    # Calculate the area of the triangular base\n    base_area = 0.5 * base_length * triangle_height\n    \n    # Calculate the volume of the prism\n    volume = base_area * prism_height\n    \n    return volume\n\n# Example usage:\ntry:\n    volume = find_volume(5, 4, 10)\n    print(volume)  # Output: 100.0\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpg6c8vdlv.py\", line 23, in <module>\n    assert find_volume(5.5, 3.2, 4.1) == 72.16\nAssertionError", "passed": false}
{"task_id": 15, "requirement": "Input-Output Conditions", "completion": "import re\n\ndef split_lowerstring(s):\n    # Use a regular expression to find segments that start with an uppercase letter followed by zero or more lowercase letters\n    return re.findall(r'[A-Z][a-z]*', s)\n\n# Example usage:\nexample_string = \"HelloWorldThisIsATest\"\nresult = split_lowerstring(example_string)\nprint(result)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_f_ii5h8.py\", line 9, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "requirement": "Input-Output Conditions", "completion": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Checks if there are sequences of lowercase letters joined with an underscore in the given text.\n\n    Parameters:\n    text (str): The input string to search within.\n\n    Returns:\n    str: 'Found a match!' if a matching sequence is found, otherwise 'Not matched!'.\n    \"\"\"\n    # Define the regular expression pattern\n    pattern = r'\\b[a-z]+(?:_[a-z]+)+\\b'\n    \n    # Use re.search to find the first match of the pattern in the text\n    match = re.search(pattern, text)\n    \n    # Return the appropriate message based on whether a match was found\n    if match:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\ntext = \"Here are some examples: this_is_a_test, another_example, and not_thisOne.\"\nprint(text_lowercase_underscore(text))  # Output: Found a match!\n\ntext = \"No_matches_here or HereEither\"\nprint(text_lowercase_underscore(text))  # Output: Not matched!\n", "result": "passed", "passed": true}
{"task_id": 17, "requirement": "Input-Output Conditions", "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Parameters:\n    side_length (int): The length of one side of the square, must be a non-negative integer.\n\n    Returns:\n    int: The perimeter of the square, a non-negative integer.\n    \"\"\"\n    if not isinstance(side_length, int):\n        raise TypeError(\"Side length must be an integer.\")\n    \n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    \n    return 4 * side_length\n\n# Example usage:\n# perimeter = square_perimeter(5)\n# print(perimeter)  # Output: 20\n", "result": "passed", "passed": true}
{"task_id": 18, "requirement": "Input-Output Conditions", "completion": "def remove_dirty_chars(source: str, dirty: str) -> str:\n    # Validate that both strings contain only alphabetic characters\n    if not (source.isalpha() and dirty.isalpha()):\n        raise ValueError('Input strings must only contain alphabetic characters.')\n    \n    # Create a set of characters from the 'dirty' string for quick lookup\n    dirty_set = set(dirty)\n    \n    # Use a list comprehension to filter out characters from 'source' that are in 'dirty_set'\n    cleaned_string = ''.join([char for char in source if char not in dirty_set])\n    \n    return cleaned_string\n\n# Example usage:\ntry:\n    source_string = \"hello world\"\n    dirty_string = \"lo\"\n    cleaned_string = remove_dirty_chars(source_string, dirty_string)\n    print(cleaned_string)\nexcept ValueError as e:\n    print(e)  # Output: Input strings must only contain alphabetic characters.\n", "result": "passed", "passed": true}
{"task_id": 19, "requirement": "Input-Output Conditions", "completion": "def test_duplicate(arr):\n    \"\"\"\n    Function to check if there are any duplicate elements in the array.\n    Raises TypeError if the input is not a list.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    bool: True if there are duplicates, False otherwise.\n    \"\"\"\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list of integers.\")\n    \n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\n# Example usage:\ntry:\n    print(test_duplicate([1, 2, 3, 4, 5]))  # Output: False\n    print(test_duplicate([1, 2, 3, 4, 5, 3]))  # Output: True\n    print(test_duplicate(\"Not a list\"))  # This will raise a TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 20, "requirement": "Input-Output Conditions", "completion": "def is_woodall(number):\n    # Check if the input number is negative, return False as Woodall numbers are positive\n    if number < 0:\n        return False\n    \n    # Initialize n starting from 1\n    n = 1\n    while True:\n        # Calculate the Woodall number for the current n\n        woodall_number = n * (2 ** n) - 1\n        \n        # If the calculated Woodall number matches the input, return True\n        if woodall_number == number:\n            return True\n        # If the calculated Woodall number exceeds the input, return False\n        elif woodall_number > number:\n            return False\n        \n        # Increment n for the next iteration\n        n += 1\n\n# Example usage:\nprint(is_woodall(7))  # True, because 7 is 1 * 2^3 - 1\nprint(is_woodall(23)) # True, because 23 is 3 * 2^3 - 1\nprint(is_woodall(10)) # False, 10 is not a Woodall number\n", "result": "passed", "passed": true}
{"task_id": 23, "requirement": "Input-Output Conditions", "completion": "def maximum_sum(list_of_lists):\n    # Check if the input is empty\n    if not list_of_lists:\n        return 0  # Return 0 if the list of lists is empty\n    \n    # Initialize a variable to keep track of the maximum sum\n    max_sum = float('-inf')\n    \n    # Iterate over each list in the list of lists\n    for inner_list in list_of_lists:\n        # Calculate the sum of the current inner list\n        current_sum = sum(inner_list)\n        \n        # Update max_sum if the current_sum is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(maximum_sum(list_of_lists))  # Output: 24\n", "result": "passed", "passed": true}
{"task_id": 25, "requirement": "Input-Output Conditions", "completion": "def find_product(arr):\n    # Dictionary to store the count of each element\n    element_count = {}\n    \n    # Count the occurrences of each element in the array\n    for num in arr:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n    \n    # Calculate the product of non-repeated elements\n    product = 1\n    has_non_repeated = False\n    for num, count in element_count.items():\n        if count == 1:\n            product *= num\n            has_non_repeated = True\n    \n    # If there are no non-repeated elements, return 0\n    return product if has_non_repeated else 0\n\n# Test cases\nprint(find_product([2, 3, 4, 2, 5, 3, 6]))  # Output: 120 (4 * 5 * 6)\nprint(find_product([1, 1, 1, 1, 1]))         # Output: 0 (no non-repeated elements)\nprint(find_product([7, 8, 9]))               # Output: 504 (7 * 8 * 9)\nprint(find_product([]))                      # Output: 0 (empty list)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpo3_l7tg9.py\", line 24, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "requirement": "Input-Output Conditions", "completion": "def check_k_elements(tuple_list, k):\n    \"\"\"\n    Check if all tuples in the given list have exactly k elements.\n\n    Parameters:\n    tuple_list (list of tuples): The list of tuples to check.\n    k (int): The number of elements each tuple should have.\n\n    Returns:\n    bool: True if all tuples have exactly k elements, False otherwise.\n    \"\"\"\n    for t in tuple_list:\n        if len(t) != k:\n            return False\n    return True\n\n# Example usage:\ntuples = [(1, 2), (3, 4), (5, 6)]\nk = 2\nprint(check_k_elements(tuples, k))  # Output: True\n\ntuples = [(1, 2, 3), (4, 5), (6, 7, 8)]\nk = 2\nprint(check_k_elements(tuples, k))  # Output: False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpuzqqkd6o.py\", line 13, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 28, "requirement": "Input-Output Conditions", "completion": "def binomial_coeff(n, k):\n    # Validate inputs\n    if not isinstance(n, int) or not isinstance(k, int):\n        raise ValueError(\"Both n and k must be integers\")\n    if n < 0 or k < 0:\n        raise ValueError(\"Both n and k must be non-negative\")\n    \n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    \n    # Use a more efficient approach to calculate the binomial coefficient\n    # C(n, k) = C(n, n-k)\n    k = min(k, n - k)\n    \n    c = 1\n    for i in range(k):\n        c = c * (n - i) // (i + 1)\n    \n    return c\n\n# Example usage:\ntry:\n    n = 5\n    k = 2\n    print(f\"Binomial Coefficient C({n}, {k}) is {binomial_coeff(n, k)}\")\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 30, "requirement": "Input-Output Conditions", "completion": "def count_substring_with_equal_ends(s):\n    # Dictionary to store the frequency of each character\n    frequency = {}\n    \n    # Count the frequency of each character in the string\n    for char in s:\n        if char in frequency:\n            frequency[char] += 1\n        else:\n            frequency[char] = 1\n    \n    # Calculate the number of substrings for each character\n    count = 0\n    for char in frequency:\n        n = frequency[char]\n        count += (n * (n + 1)) // 2\n    \n    return count\n\n# Example usage:\ns = \"abcab\"\nprint(count_substring_with_equal_ends(s))  # Output: 7\n", "result": "passed", "passed": true}
{"task_id": 32, "requirement": "Input-Output Conditions", "completion": "def max_prime_factors(n):\n    # Check if the input is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    # Initialize the largest prime factor\n    largest_prime = -1\n    \n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n    \n    # Check for odd factors from 3 onwards\n    factor = 3\n    while factor * factor <= n:\n        while n % factor == 0:\n            largest_prime = factor\n            n //= factor\n        factor += 2\n    \n    # If n is still greater than 2, then it is a prime number\n    if n > 2:\n        largest_prime = n\n    \n    return largest_prime\n\n# Example usage:\ntry:\n    number = 13195\n    print(f\"The largest prime factor of {number} is {max_prime_factors(number)}\")\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 35, "requirement": "Input-Output Conditions", "completion": "def find_rect_num(n):\n    \"\"\"\n    Calculate the n-th rectangular number.\n\n    Parameters:\n    n (int): The position of the rectangular number to find.\n\n    Returns:\n    int: The n-th rectangular number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    return n * (n + 1)\n\n# Example usage:\nn = 5\nrect_num = find_rect_num(n)\nprint(f\"The {n}-th rectangular number is: {rect_num}\")\n", "result": "passed", "passed": true}
{"task_id": 36, "requirement": "Input-Output Conditions", "completion": "def find_nth_digit(numerator, denominator, n):\n    if denominator == 0:\n        raise ValueError(\"Denominator cannot be zero.\")\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    # Initialize the remainder\n    remainder = numerator % denominator\n    \n    # Find the nth digit by simulating long division\n    for i in range(1, n + 1):\n        # Multiply the remainder by 10 to get the next digit\n        remainder *= 10\n        digit = remainder // denominator\n        remainder = remainder % denominator\n        \n        # If it's the nth iteration, return the digit\n        if i == n:\n            return digit\n\n# Example usage:\nnumerator = 1\ndenominator = 3\nn = 5\nprint(find_nth_digit(numerator, denominator, n))  # Output: 3\n", "result": "passed", "passed": true}
{"task_id": 38, "requirement": "Input-Output Conditions", "completion": "def div_even_odd(numbers):\n    first_even = None\n    first_odd = None\n    \n    # Iterate through the list to find the first even and odd numbers\n    for num in numbers:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Check if an even or odd number was not found and raise an error if so\n    if first_even is None:\n        raise ValueError(\"No even number found in the list.\")\n    if first_odd is None:\n        raise ValueError(\"No odd number found in the list.\")\n    \n    # Perform the division and return the result\n    return first_even / first_odd\n\n# Example usage:\nnumbers = [5, 3, 8, 6, 7]\nresult = div_even_odd(numbers)\nprint(\"Division of first even and odd number:\", result)\n", "result": "passed", "passed": true}
{"task_id": 39, "requirement": "Input-Output Conditions", "completion": "from collections import Counter\nimport heapq\n\ndef rearrange_string(s):\n    # Validate input\n    if not s or not s.islower() or not s.isalpha():\n        return \"Invalid input: The string must be non-empty and consist only of lowercase letters.\"\n    \n    # Count the frequency of each character\n    char_count = Counter(s)\n    \n    # Create a max heap based on character frequency\n    max_heap = [(-count, char) for char, count in char_count.items()]\n    heapq.heapify(max_heap)\n    \n    # This will store the rearranged characters\n    result = []\n    \n    # Previous character and its count\n    prev_count, prev_char = 0, ''\n    \n    while max_heap:\n        # Get the character with the highest frequency\n        count, char = heapq.heappop(max_heap)\n        \n        # Append the current character to the result\n        result.append(char)\n        \n        # Since we used one occurrence of this character, decrease the count\n        count += 1  # Increment because we are using negative counts for max heap\n        \n        # If the previous character still has remaining occurrences, push it back into the heap\n        if prev_count < 0:\n            heapq.heappush(max_heap, (prev_count, prev_char))\n        \n        # Update previous character and its count\n        prev_count, prev_char = count, char\n    \n    # Join the result list to form the rearranged string\n    rearranged = ''.join(result)\n    \n    # Check if the rearranged string is valid\n    if len(rearranged) != len(s):\n        return \"\"  # Not possible to rearrange\n    return rearranged\n\n# Example usage:\ns = \"aabbcc\"\nprint(rearrange_string(s))  # Output could be \"abcabc\" or any other valid rearrangement\n\n# Example of invalid input:\ninvalid_input = \"AaBb1\"\nprint(rearrange_string(invalid_input))  # Output: Invalid input message\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0rpnbocq.py\", line 40, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 42, "requirement": "Input-Output Conditions", "completion": "def find_sum(arr):\n    # Create a dictionary to count occurrences of each element\n    element_count = {}\n    \n    # Count each element in the array\n    for element in arr:\n        if element in element_count:\n            element_count[element] += 1\n        else:\n            element_count[element] = 1\n    \n    # Calculate the sum of elements that are repeated\n    repeated_sum = 0\n    for element, count in element_count.items():\n        if count > 1:\n            repeated_sum += element * count\n    \n    return repeated_sum\n\n# Example usage:\narray_with_repeats = [1, 2, 3, 2, 4, 5, 6, 3, 3]\nprint(find_sum(array_with_repeats))  # Output: 13 (2*2 + 3*3)\n\narray_without_repeats = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(find_sum(array_without_repeats))  # Output: 0 (no repeated elements)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpbdn44d9u.py\", line 21, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Input-Output Conditions", "completion": "import re\n\ndef text_match(text):\n    # Define the regex pattern for sequences of lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    \n    # Use re.findall to find all matches of the pattern in the input text\n    matches = re.findall(pattern, text)\n    \n    # Check if the list of matches is empty\n    if not matches:\n        return 'Not matched!'\n    else:\n        return matches\n\n# Example usage:\nexample_text1 = \"Here are some examples: abc_def, ghi_jkl, and mno_pqr.\"\nexample_text2 = \"No matches here, just some text.\"\nprint(text_match(example_text1))  # Output will show the matched patterns\nprint(text_match(example_text2))  # Output will be 'Not matched!'\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpa75eem2j.py\", line 17, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 46, "requirement": "Input-Output Conditions", "completion": "def test_distinct(numbers):\n    \"\"\"\n    Determine whether all numbers in the list are distinct.\n\n    Parameters:\n    numbers (list of int): A list of integers.\n\n    Returns:\n    bool: True if all numbers are distinct, False otherwise.\n    \"\"\"\n    # Convert the list to a set, which removes duplicates\n    unique_numbers = set(numbers)\n    \n    # Compare the length of the set with the original list\n    return len(unique_numbers) == len(numbers)\n\n# Example usage:\nnumbers = [1, 2, 3, 4, 5]\nprint(test_distinct(numbers))  # Output: True\n\nnumbers = [1, 2, 2, 4, 5]\nprint(test_distinct(numbers))  # Output: False\n", "result": "passed", "passed": true}
{"task_id": 48, "requirement": "Input-Output Conditions", "completion": "def odd_bit_set_number(n):\n    \"\"\"\n    Set all odd bits of a given integer to 1.\n\n    Args:\n    n (int): The input integer whose odd bits are to be set.\n\n    Returns:\n    int: An integer with all odd bits set to 1.\n    \"\"\"\n    # Create a mask with all odd bits set for a 32-bit integer\n    mask = 0x55555555  # This is 01010101010101010101010101010101 in binary\n    \n    # Set all odd bits of the number using bitwise OR\n    result = n | mask\n    \n    return result\n\n# Example usage:\nnumber = 10  # Binary: 1010\nresult = odd_bit_set_number(number)\nprint(f\"Original number: {number} (Binary: {bin(number)})\")\nprint(f\"Number with odd bits set: {result} (Binary: {bin(result)})\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4wg2gvhf.py\", line 12, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "requirement": "Input-Output Conditions", "completion": "def specified_element(two_d_list, index):\n    \"\"\"\n    Extracts the element at the specified index from each sublist in a given two-dimensional list.\n\n    Parameters:\n    two_d_list (list of lists): The input two-dimensional list.\n    index (int): The index of the element to extract from each sublist.\n\n    Returns:\n    list: A list containing the extracted elements, or an empty list if the input list is empty.\n    \"\"\"\n    if not two_d_list:\n        return []  # Return an empty list if the input list is empty\n\n    extracted_elements = []\n    for sublist in two_d_list:\n        if len(sublist) > index:\n            extracted_elements.append(sublist[index])\n        # If the index is out of range, skip adding any element for that sublist\n\n    return extracted_elements\n\n# Example usage:\ntwo_d_list = [[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]\nprint(specified_element(two_d_list, 0))  # Output: [1, 4, 6, 10]\nprint(specified_element(two_d_list, 1))  # Output: [2, 5, 7]\nprint(specified_element(two_d_list, 2))  # Output: [3, 8]\nprint(specified_element(two_d_list, 3))  # Output: [9]\nprint(specified_element([], 1))          # Output: []\n", "result": "passed", "passed": true}
{"task_id": 50, "requirement": "Input-Output Conditions", "completion": "def min_length_list(lists):\n    \"\"\"\n    This function takes a list of lists and returns a tuple containing the length of the shortest list and the list itself.\n    \n    :param lists: A list of lists\n    :return: A tuple (length of the shortest list, shortest list)\n    \"\"\"\n    shortest_list = min(lists, key=lambda x: len(x))\n    return (len(shortest_list), shortest_list)\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]\nresult = min_length_list(list_of_lists)\nprint(result)  # Output: (1, [10])\n", "result": "passed", "passed": true}
{"task_id": 52, "requirement": "Input-Output Conditions", "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram.\n    \"\"\"\n    if base <= 0 or height <= 0:\n        raise ValueError(\"Base and height must be positive numbers.\")\n    \n    return base * height\n\n# Example usage:\n# base = 5, height = 10\n# area = parallelogram_area(5, 10)\n# print(area)  # Output: 50\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppuxmlqzq.py\", line 13, in <module>\n    assert parallelogram_area(0, 10) == 0\n  File \"/tmp/tmppuxmlqzq.py\", line 3, in parallelogram_area\n    raise ValueError(\"Base and height must be positive numbers.\")\nValueError: Base and height must be positive numbers.", "passed": false}
{"task_id": 53, "requirement": "Input-Output Conditions", "completion": "def check_equality(s):\n    \"\"\"\n    Check if the first and last characters of the string are equal.\n\n    Parameters:\n    s (str): The string to check.\n\n    Returns:\n    str: 'Equal' if the first and last characters are equal, 'Not Equal' otherwise.\n    \"\"\"\n    # Check if the string is empty or not a string\n    if not isinstance(s, str) or not s:\n        return 'Not Equal'\n    \n    # Compare the first and last characters\n    return 'Equal' if s[0] == s[-1] else 'Not Equal'\n\n# Example usage:\nprint(check_equality(\"radar\"))  # Output: Equal\nprint(check_equality(\"hello\"))  # Output: Not Equal\nprint(check_equality(\"a\"))      # Output: Equal\nprint(check_equality(\"\"))       # Output: Not Equal\nprint(check_equality(123))      # Output: Not Equal\n", "result": "passed", "passed": true}
{"task_id": 54, "requirement": "Input-Output Conditions", "completion": "def counting_sort(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list of non-negative integers.\")\n    \n    # Check if the list is empty\n    if not arr:\n        return arr\n    \n    # Validate that all elements are non-negative integers\n    if any(not isinstance(num, int) or num < 0 for num in arr):\n        raise ValueError(\"All elements must be non-negative integers.\")\n    \n    # Find the maximum value in the array\n    max_val = max(arr)\n    \n    # Create a count array to store the count of each unique object\n    count = [0] * (max_val + 1)\n    \n    # Store the count of each element in the count array\n    for num in arr:\n        count[num] += 1\n    \n    # Output array to store the sorted order\n    output = []\n    \n    # Build the output array using the count array\n    for num, cnt in enumerate(count):\n        output.extend([num] * cnt)\n    \n    return output\n\n# Example usage:\narr = [4, 2, 2, 8, 3, 3, 1]\nsorted_arr = counting_sort(arr)\nprint(\"Sorted array:\", sorted_arr)\n", "result": "passed", "passed": true}
{"task_id": 57, "requirement": "Input-Output Conditions", "completion": "def find_max_num(digits, num_digits):\n    # Convert each digit to a string to facilitate sorting and joining\n    digits_str = [str(digit) for digit in digits]\n    \n    # Sort the digits in descending order\n    digits_str.sort(reverse=True)\n    \n    # Join the top 'num_digits' sorted digits to form the largest number\n    if num_digits > len(digits_str):\n        raise ValueError(\"Number of digits requested exceeds the number of available digits\")\n    max_num_str = ''.join(digits_str[:num_digits])\n    \n    # Convert the result back to an integer\n    max_num = int(max_num_str)\n    \n    return max_num\n\n# Example usage:\ndigits = [3, 1, 4, 1, 5, 9]\nlargest_number = find_max_num(digits, 4)\nprint(largest_number)  # Output: 9543\n", "result": "passed", "passed": true}
{"task_id": 58, "requirement": "Input-Output Conditions", "completion": "def opposite_signs(x, y):\n    \"\"\"\n    Check if two integers have opposite signs.\n\n    Parameters:\n    x (int): First integer.\n    y (int): Second integer.\n\n    Returns:\n    bool: True if x and y have opposite signs, False otherwise.\n\n    Raises:\n    TypeError: If either x or y is not an integer.\n    \"\"\"\n    # Check if both inputs are integers\n    if not isinstance(x, int) or not isinstance(y, int):\n        raise TypeError(\"Both inputs must be integers\")\n\n    # Using bitwise XOR to check if the sign bits are different\n    return (x ^ y) < 0\n\n# Example usage:\ntry:\n    print(opposite_signs(10, -5))  # Output: True\n    print(opposite_signs(-10, 5))  # Output: True\n    print(opposite_signs(10, 5))   # Output: False\n    print(opposite_signs(-10, -5)) # Output: False\n    print(opposite_signs(10.0, -5)) # Raises TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 60, "requirement": "Input-Output Conditions", "completion": "def max_len_sub(arr, allowed_diff):\n    if not arr:\n        return 0\n\n    # Dictionary to store the length of the longest subsequence ending at each index\n    dp = [{} for _ in range(len(arr))]\n    max_length = 1\n\n    for i in range(len(arr)):\n        for j in range(i):\n            diff = arr[i] - arr[j]\n            # Check if the difference matches the allowed difference\n            if diff == allowed_diff:\n                # If there is already a subsequence with this difference ending at j, extend it\n                if diff in dp[j]:\n                    dp[i][diff] = dp[j][diff] + 1\n                else:\n                    # Otherwise, start a new subsequence with length 2 (arr[j], arr[i])\n                    dp[i][diff] = 2\n\n                # Update the maximum length found so far\n                max_length = max(max_length, dp[i][diff])\n\n    return max_length\n\n# Example usage:\narr = [3, 6, 9, 12]\nallowed_diff = 3\nprint(max_len_sub(arr, allowed_diff))  # Output: 4\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2enazzod.py\", line 25, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nAssertionError", "passed": false}

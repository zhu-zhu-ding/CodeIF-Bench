{"task_id": 11, "requirement": "Code Complexity", "completion": "def remove_occ(s: str, char: str) -> str:\n    \"\"\"\n    Remove the first and last occurrence of a given character from the string.\n\n    Parameters:\n    s (str): The input string.\n    char (str): The character to remove.\n\n    Returns:\n    str: The modified string with the first and last occurrence of the character removed.\n\n    Raises:\n    ValueError: If the 'char' parameter is not a single character.\n    \"\"\"\n    if len(char) != 1:\n        raise ValueError(\"Second parameter must be a single character.\")\n    \n    # Find the first and last occurrence of the character\n    first_index = s.find(char)\n    last_index = s.rfind(char)\n    \n    # If the character is not found or only occurs once, return the original string\n    if first_index == -1 or first_index == last_index:\n        return s\n    \n    # Remove the first and last occurrence of the character\n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]\n\n# Example usage:\ntry:\n    string = \"abracadabra\"\n    char_to_remove = \"a\"\n    result = remove_occ(string, char_to_remove)\n    print(result)  # Output: \"bracadabr\"\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpov4z_3aj.py\", line 26, in <module>\n    assert remove_occ.__annotations__ == {'s': str, 'ch': str, 'return': str}\nAssertionError", "passed": false}
{"task_id": 14, "requirement": "Code Complexity", "completion": "def find_volume(base_area: float, height: float, length: float) -> float:\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base_area (float): The area of the triangular base of the prism.\n    height (float): The height of the prism perpendicular to the base.\n    length (float): The length along which the triangular base extends.\n\n    Returns:\n    float: The volume of the triangular prism.\n\n    Raises:\n    ValueError: If any of the inputs are non-positive or non-numeric.\n    \"\"\"\n    # Validate inputs\n    if not all(isinstance(x, (int, float)) and x > 0 for x in [base_area, height, length]):\n        raise ValueError(\"All dimensions must be positive numbers.\")\n\n    # Calculate the volume of the triangular prism\n    volume = base_area * height * length\n    return volume\n\n# Example usage:\ntry:\n    # Example with valid inputs\n    print(find_volume(10.0, 5.0, 20.0))  # Output: 1000.0\n\n    # Example with invalid input\n    print(find_volume(-10.0, 5.0, 20.0))  # This will raise an error\nexcept ValueError as e:\n    print(e)  # Output: All dimensions must be positive numbers.\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7qe9y5ay.py\", line 16, in <module>\n    assert find_volume(10,8,6) == 240\nAssertionError", "passed": false}
{"task_id": 15, "requirement": "Code Complexity", "completion": "import re\nfrom typing import List\n\ndef split_lowerstring(text: str) -> List[str]:\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Use a regular expression to split the string at lowercase letters\n    result = re.split(r'(?=[a-z])', text)\n    \n    # Filter out any empty strings that might result from the split\n    return [segment for segment in result if segment]\n\n# Example usage:\ntry:\n    example_string = \"HelloWorldThisIsATest\"\n    result = split_lowerstring(example_string)\n    print(result)\nexcept TypeError as e:\n    print(e)\n", "result": "failed: File \"/tmp/tmppgklsve2.py\", line 21\n    try: split_lowerstring(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 16, "requirement": "Code Complexity", "completion": "import re\nfrom typing import str\n\ndef text_lowercase_underscore(text: str) -> str:\n    \"\"\"\n    Finds sequences of lowercase letters joined with an underscore in the given text.\n\n    Parameters:\n    text (str): The input string to search within.\n\n    Returns:\n    str: 'Found a match!' if a match is found, otherwise 'Not matched!'.\n    \"\"\"\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Define the regular expression pattern\n    pattern = r'\\b[a-z]+(?:_[a-z]+)+\\b'\n    \n    # Use re.search to find the first match of the pattern in the text\n    match = re.search(pattern, text)\n    \n    # Return the appropriate message based on whether a match was found\n    return 'Found a match!' if match else 'Not matched!'\n\n# Example usage:\ntry:\n    print(text_lowercase_underscore(\"this_is_a_test\"))  # Expected: 'Found a match!'\n    print(text_lowercase_underscore(\"This_is_not_a_match\"))  # Expected: 'Not matched!'\n    print(text_lowercase_underscore(\"\"))  # Expected: 'Not matched!'\n    print(text_lowercase_underscore(123))  # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpb5m3ai_o.py\", line 2, in <module>\n    from typing import str\nImportError: cannot import name 'str' from 'typing' (/home/liminxiao/miniconda3/envs/DevEval/lib/python3.9/typing.py)", "passed": false}
{"task_id": 17, "requirement": "Code Complexity", "completion": "def square_perimeter(a: int) -> int:\n    \"\"\"\n    Calculate the perimeter of a square given the side length.\n\n    Parameters:\n    a (int): The length of one side of the square.\n\n    Returns:\n    int: The perimeter of the square.\n\n    Raises:\n    ValueError: If the input side length is negative.\n    \"\"\"\n    if a < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    \n    return 4 * a\n\n# Example usage:\n# perimeter = square_perimeter(5)\n# print(perimeter)  # Output: 20\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp491tk717.py\", line 29, in <module>\n    assert cc_visit(inspect.getsource(square_perimeter))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 20, "requirement": "Code Complexity", "completion": "def is_woodall(x: int) -> bool:\n    if not isinstance(x, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    if x <= 0:\n        return False\n    \n    n = 1\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number >= x:\n            return woodall_number == x\n        n += 1\n\n# Example usage:\nprint(is_woodall(7))  # True, because 7 is 1 * 2^1 - 1\nprint(is_woodall(23)) # True, because 23 is 3 * 2^3 - 1\nprint(is_woodall(10)) # False, 10 is not a Woodall number\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpbczcqf27.py\", line 33, in <module>\n    assert cc_visit(inspect.getsource(is_woodall))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 21, "requirement": "Code Complexity", "completion": "from typing import List\n\ndef multiples_of_num(n: int, m: int) -> List[int]:\n    \"\"\"\n    Returns a list of the first m multiples of n.\n\n    Parameters:\n    n (int): The number to find multiples of.\n    m (int): The number of multiples to find.\n\n    Returns:\n    List[int]: A list containing the first m multiples of n.\n\n    Raises:\n    ValueError: If either n or m is negative.\n    \"\"\"\n    if n < 0 or m < 0:\n        raise ValueError(\"Both n and m must be non-negative integers.\")\n    \n    return [n * i for i in range(1, m + 1)]\n\n# Example usage:\nn = 5\nm = 10\nprint(multiples_of_num(n, m))  # Output: [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxcaje600.py\", line 10, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 24, "requirement": "Code Complexity", "completion": "def binary_to_decimal(binary: str) -> int:\n    \"\"\"\n    Convert a binary number (given as a string) to its decimal equivalent.\n\n    Parameters:\n    binary (str): A string representing a binary number (e.g., '1011').\n\n    Returns:\n    int: The decimal equivalent of the binary number.\n\n    Raises:\n    ValueError: If the input is not a valid binary number.\n    \"\"\"\n    # Handle the edge case of an empty string\n    if binary.strip() == '':\n        return 0\n\n    # Convert binary string to decimal using int() with base 2\n    try:\n        return int(binary, 2)\n    except ValueError:\n        raise ValueError(\"Invalid binary number\")\n\n# Example usage:\nbinary_number = '1011'\ntry:\n    decimal_number = binary_to_decimal(binary_number)\n    print(f\"The decimal equivalent of binary {binary_number} is {decimal_number}.\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: File \"/tmp/tmpt0aump8g.py\", line 20\n    try: binary_to_decimal('102'); assert False, 'Expected ValueError' except ValueError as e: assert str(e) == 'Invalid binary number'\n                                                                       ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 32, "requirement": "Code Complexity", "completion": "def max_prime_factors(n: int) -> int:\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    # Initialize the largest prime factor\n    largest_prime = -1\n    \n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n    \n    # Check for odd factors from 3 onwards\n    factor = 3\n    while factor * factor <= n:\n        if n % factor == 0:\n            largest_prime = factor\n            while n % factor == 0:\n                n //= factor\n        factor += 2\n    \n    # If n is still greater than 2, then it is a prime number\n    if n > 2:\n        largest_prime = n\n    \n    return largest_prime\n\n# Example usage:\nnumber = 13195\nprint(f\"The largest prime factor of {number} is {max_prime_factors(number)}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp63v90b3h.py\", line 41, in <module>\n    assert cc_visit(inspect.getsource(max_prime_factors))[0].complexity <= 5\nAssertionError", "passed": false}
{"task_id": 33, "requirement": "Code Complexity", "completion": "def decimal_to_binary(N: int) -> str:\n    if not isinstance(N, int) or N < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    return bin(N)[2:]\n\n# Example usage:\nprint(decimal_to_binary(10))  # Output: \"1010\"\nprint(decimal_to_binary(0))   # Output: \"0\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpe898fv52.py\", line 8, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 35, "requirement": "Code Complexity", "completion": "def find_rect_num(n: int) -> int:\n    \"\"\"\n    Calculate the n-th rectangular number.\n\n    Parameters:\n    n (int): The position of the rectangular number to find.\n\n    Returns:\n    int: The n-th rectangular number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    return n * (n + 1)\n\n# Example usage:\ntry:\n    n = 5\n    rect_num = find_rect_num(n)\n    print(f\"The {n}-th rectangular number is: {rect_num}\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpj8v_qfj5.py\", line 23, in <module>\n    assert cc_visit(inspect.getsource(find_rect_num))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 36, "requirement": "Code Complexity", "completion": "def find_nth_digit(p: int, q: int, N: int) -> int:\n    if q == 0:\n        raise ValueError(\"Denominator cannot be zero.\")\n    \n    # Perform the division and get the decimal representation as a string\n    result = str(p / q)\n    \n    # Find the position of the decimal point\n    decimal_index = result.find('.')\n    \n    # Calculate the index of the Nth digit in the string\n    target_index = decimal_index + N\n    \n    # Check if the target index is within the bounds of the string\n    if target_index < len(result):\n        return int(result[target_index])\n    else:\n        return 0  # Return 0 if the Nth digit does not exist\n\n# Example usage:\nprint(find_nth_digit(1, 3, 5))  # Output: 3\nprint(find_nth_digit(1, 3, 1))  # Output: 3\nprint(find_nth_digit(1, 3, 10))  # Output: 0\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpop25dcdw.py\", line 24, in <module>\n    find_nth_digit(1, 0, 1)\n  File \"/tmp/tmpop25dcdw.py\", line 3, in find_nth_digit\n    raise ValueError(\"Denominator cannot be zero.\")\nValueError: Denominator cannot be zero.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpop25dcdw.py\", line 26, in <module>\n    assert str(e) == 'Denominator cannot be zero'\nAssertionError", "passed": false}
{"task_id": 38, "requirement": "Code Complexity", "completion": "from typing import List, Union\n\ndef div_even_odd(numbers: List[int]) -> Union[int, float]:\n    first_even = next((num for num in numbers if num % 2 == 0), None)\n    first_odd = next((num for num in numbers if num % 2 != 0), None)\n    \n    if first_even is None or first_odd is None:\n        raise ValueError(\"List must contain at least one even and one odd number.\")\n    \n    return first_even / first_odd\n\n# Example usage:\nnumbers = [5, 3, 8, 6, 7]\nresult = div_even_odd(numbers)\nprint(\"Division of first even and odd number:\", result)\n", "result": "failed: File \"/tmp/tmp0wvq_scb.py\", line 16\n    try: div_even_odd([2, 4, 6]); assert False; except ValueError as e: assert str(e) == 'List must contain at least one even and one odd number.'\n                                                ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 40, "requirement": "Code Complexity", "completion": "from typing import List, Dict\nfrom collections import Counter\nfrom itertools import chain\n\ndef freq_element(nums: List[List[int]]) -> Dict[int, int]:\n    if not all(isinstance(sublist, list) for sublist in nums):\n        raise TypeError(\"Input must be a list of lists\")\n    \n    # Flatten the list of lists using itertools.chain\n    flat_list = list(chain.from_iterable(nums))\n    \n    # Use Counter to count the frequency of each element\n    frequency = Counter(flat_list)\n    \n    return dict(frequency)\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [4, 5, 1], [2, 3, 4, 4]]\nresult = freq_element(list_of_lists)\nprint(result)\n", "result": "failed: File \"/tmp/tmp2gjlkbax.py\", line 19\n    try: freq_element('not a list'); assert False; except TypeError: assert True\n                                                   ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 42, "requirement": "Code Complexity", "completion": "from collections import Counter\nfrom typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    if len(arr) == 0:\n        return 0\n    \n    # Count occurrences of each element\n    element_count = Counter(arr)\n    \n    # Calculate the sum of elements that are repeated\n    repeated_sum = sum(element * count for element, count in element_count.items() if count > 1)\n    \n    return repeated_sum\n\n# Example usage:\narray = [1, 2, 3, 2, 4, 5, 6, 3, 3]\nprint(find_sum(array))  # Output: 13 (2*2 + 3*3)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6a5unhs6.py\", line 16, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Code Complexity", "completion": "import re\nfrom typing import str\n\ndef text_match(text: str) -> str:\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    if text == \"\":\n        return 'Not matched!'\n    \n    # Define the regex pattern for sequences of lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    \n    # Use re.search to find the first match of the pattern in the input text\n    match = re.search(pattern, text)\n    \n    # Check if there was a match\n    if match:\n        return match.group()\n    else:\n        return 'Not matched!'\n\n# Example usage:\nexample_text = \"Here are some examples: abc_def, ghi_jkl, and mno_pqr.\"\nprint(text_match(example_text))  # Output: abc_def\n\n# Test with non-matching input\nprint(text_match(\"No underscores here\"))  # Output: Not matched!\n\n# Test with empty string\nprint(text_match(\"\"))  # Output: Not matched!\n\n# Test with non-string input\ntry:\n    print(text_match(123))  # Should raise TypeError\nexcept TypeError as e:\n    print(e)  # Output: Input must be a string\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpddsgcg1m.py\", line 2, in <module>\n    from typing import str\nImportError: cannot import name 'str' from 'typing' (/home/liminxiao/miniconda3/envs/DevEval/lib/python3.9/typing.py)", "passed": false}
{"task_id": 45, "requirement": "Code Complexity", "completion": "from typing import List\nfrom math import gcd\nfrom functools import reduce\n\ndef get_gcd(numbers: List[int]) -> int:\n    \"\"\"\n    Calculate the GCD of an array of numbers.\n\n    Parameters:\n    numbers (List[int]): A list of integers.\n\n    Returns:\n    int: The GCD of the list of numbers.\n\n    Raises:\n    ValueError: If the input list is empty.\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"Input list cannot be empty.\")\n    \n    return reduce(gcd, numbers)\n\n# Example usage:\ntry:\n    numbers = [48, 64, 80]\n    result = get_gcd(numbers)\n    print(f\"The GCD of {numbers} is {result}.\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpto9wj0ff.py\", line 20, in <module>\n    assert get_gcd.__annotations__ == {'numbers': list, 'return': int}\nAssertionError", "passed": false}
{"task_id": 47, "requirement": "Code Complexity", "completion": "def compute_last_digit(a: int, b: int) -> int:\n    if a > b:\n        raise ValueError(\"a should not be greater than b\")\n    \n    last_digit = 1\n    for i in range(a + 1, b + 1):\n        last_digit = (last_digit * i) % 10\n    \n    return last_digit\n\n# Example usage:\nprint(compute_last_digit(5, 10))  # Output: 2\nprint(compute_last_digit(7, 7))   # Output: 1\n", "result": "passed", "passed": true}
{"task_id": 51, "requirement": "Code Complexity", "completion": "def check_equilateral(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Check if a triangle is equilateral.\n\n    Parameters:\n    a (int): Length of the first side of the triangle.\n    b (int): Length of the second side of the triangle.\n    c (int): Length of the third side of the triangle.\n\n    Returns:\n    bool: True if the triangle is equilateral, False otherwise.\n\n    Raises:\n    ValueError: If any of the side lengths are non-positive.\n    \"\"\"\n    if a <= 0 or b <= 0 or c <= 0:\n        raise ValueError(\"All side lengths must be positive integers.\")\n    \n    return a == b == c\n\n# Example usage:\nprint(check_equilateral(5, 5, 5))  # True\nprint(check_equilateral(5, 5, 3))  # False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpp5zho01n.py\", line 27, in <module>\n    assert cc_visit(inspect.getsource(check_equilateral))[0].complexity ==1\nAssertionError", "passed": false}
{"task_id": 52, "requirement": "Code Complexity", "completion": "def parallelogram_area(base: float, height: float) -> float:\n    \"\"\"\n    Calculate the area of a parallelogram given its base and height.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram.\n    \"\"\"\n    return base * height\n\n# Example usage:\n# base = 5, height = 10\n# area = parallelogram_area(5, 10)\n# print(area)  # Output: 50\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2e9f8opj.py\", line 16, in <module>\n    assert False, 'Expected TypeError'\nAssertionError: Expected TypeError", "passed": false}
{"task_id": 53, "requirement": "Code Complexity", "completion": "def check_equality(s: str) -> str:\n    \"\"\"\n    Check if the first and last characters of the string are equal.\n\n    Parameters:\n    s (str): The string to check.\n\n    Returns:\n    str: 'Equal' if the first and last characters are the same, otherwise 'Not Equal'.\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Handle empty string case and compare first and last characters\n    return 'Equal' if s == \"\" or s[0] == s[-1] else 'Not Equal'\n\n# Example usage:\nprint(check_equality(\"radar\"))  # Output: 'Equal'\nprint(check_equality(\"hello\"))  # Output: 'Not Equal'\nprint(check_equality(\"a\"))      # Output: 'Equal'\nprint(check_equality(\"\"))       # Output: 'Equal'\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5tff0vkf.py\", line 25, in <module>\n    assert cc_visit(inspect.getsource(check_equality))[0].complexity <=3\nAssertionError", "passed": false}
{"task_id": 56, "requirement": "Code Complexity", "completion": "def check(n: int) -> bool:\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    # Convert the number to a string to easily reverse it\n    str_number = str(n)\n    \n    # Reverse the string representation of the number\n    reversed_str_number = str_number[::-1]\n    \n    # Convert the reversed string back to an integer\n    reversed_number = int(reversed_str_number)\n    \n    # Directly return the result of the condition check\n    return n == 2 * reversed_number - 1\n\n# Example usage:\nprint(check(37))  # True, because 37 is one less than twice 73 (73 * 2 - 1 = 145)\nprint(check(21))  # False, because 21 is not one less than twice 12 (12 * 2 - 1 = 23)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8ouewnoi.py\", line 25, in <module>\n    assert check(1) == False\nAssertionError", "passed": false}
{"task_id": 58, "requirement": "Code Complexity", "completion": "def opposite_signs(a: int, b: int) -> bool:\n    \"\"\"\n    Check if two integers have opposite signs.\n\n    Parameters:\n    a (int): First integer.\n    b (int): Second integer.\n\n    Returns:\n    bool: True if a and b have opposite signs, False otherwise.\n\n    Raises:\n    TypeError: If either a or b is not an integer.\n    \"\"\"\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise TypeError(\"Both inputs must be integers\")\n    \n    return (a < 0) != (b < 0)\n\n# Example usage:\nprint(opposite_signs(10, -5))  # Output: True\nprint(opposite_signs(-10, 5))  # Output: True\nprint(opposite_signs(10, 5))   # Output: False\nprint(opposite_signs(-10, -5)) # Output: False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjr8yq0nu.py\", line 29, in <module>\n    assert opposite_signs(0, 1) == True\nAssertionError", "passed": false}

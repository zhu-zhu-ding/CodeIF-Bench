{"task_id": 11, "requirement": "Annotation Coverage", "completion": "def remove_occ(s: str, ch: str) -> str:\n    # Check if the second parameter is a single character\n    if not isinstance(ch, str) or len(ch) != 1:\n        raise ValueError(\"Second parameter must be a single character.\")\n    \n    # Find the index of the first occurrence\n    first_index = s.find(ch)\n    \n    # Find the index of the last occurrence\n    last_index = s.rfind(ch)\n    \n    # If the character is not found, return the original string\n    if first_index == -1 or last_index == -1:\n        return s\n    \n    # Remove the first occurrence\n    s = s[:first_index] + s[first_index+1:]\n    \n    # Since we removed the first occurrence, the last occurrence index might have shifted\n    # So we need to find the last occurrence again\n    last_index = s.rfind(ch)\n    \n    # Remove the last occurrence\n    s = s[:last_index] + s[last_index+1:]\n    \n    return s\n\n# Example usage:\ninput_string = \"banana\"\ncharacter = \"a\"\nresult = remove_occ(input_string, character)\nprint(result)  # Output: \"bnna\"\n", "result": "passed", "passed": true}
{"task_id": 12, "requirement": "Annotation Coverage", "completion": "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n\n    :param matrix: List of lists of integers (the matrix to be sorted)\n    :return: List of lists of integers (the sorted matrix)\n    :raises TypeError: If the input is not a list of lists or if any element is not an integer.\n    \"\"\"\n    # Check if the input is a list of lists\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise TypeError(\"Input must be a list of lists.\")\n\n    # Check if all elements in the matrix are integers\n    for row in matrix:\n        if not all(isinstance(element, int) for element in row):\n            raise TypeError(\"All elements in the matrix must be integers.\")\n\n    # Handle empty matrix\n    if not matrix:\n        return []\n\n    # Handle rows of varying lengths by treating missing values as zeros\n    max_length = max(len(row) for row in matrix) if matrix else 0\n    padded_matrix = [row + [0] * (max_length - len(row)) for row in matrix]\n\n    # Sort the matrix based on the sum of its rows\n    sorted_matrix = sorted(padded_matrix, key=lambda row: sum(row))\n\n    # Remove padding (zeros) from the sorted matrix\n    sorted_matrix = [row[:len(original_row)] for row, original_row in zip(sorted_matrix, matrix)]\n\n    return sorted_matrix\n\n# Example usage:\nmatrix = [\n    [1, 2, 3],\n    [4, 5],\n    [7, 8, 9],\n    [1, 1, 1]\n]\n\ntry:\n    sorted_matrix = sort_matrix(matrix)\n    print(\"Sorted Matrix:\")\n    for row in sorted_matrix:\n        print(row)\nexcept TypeError as e:\n    print(f\"Error: {e}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmptximmklg.py\", line 49, in <module>\n    test_annotations()\n  File \"/tmp/tmptximmklg.py\", line 48, in test_annotations\n    assert hints == {'matrix': 'list[list[int]]', 'return': 'list[list[int]]'}\nAssertionError", "passed": false}
{"task_id": 13, "requirement": "Annotation Coverage", "completion": "from collections import Counter\nfrom typing import List, Tuple\n\ndef count_common(words: List[str], top_n: int = 10) -> List[Tuple[str, int]]:\n    \"\"\"\n    Count the most common words in a list of strings.\n\n    Parameters:\n    words (List[str]): A list of strings (words) to count.\n    top_n (int): The number of most common words to return. Default is 10.\n\n    Returns:\n    List[Tuple[str, int]]: A list of tuples containing the most common words and their counts.\n\n    Raises:\n    TypeError: If the input is not a list of strings.\n    \"\"\"\n    # Check if the input is a list of strings\n    if not isinstance(words, list) or not all(isinstance(word, str) for word in words):\n        raise TypeError(\"Input must be a list of strings.\")\n\n    # Handle empty list input\n    if not words:\n        return []\n\n    # Use Counter to count the occurrences of each word\n    counter = Counter(words)\n\n    # Get the top_n most common words\n    most_common = counter.most_common(top_n)\n\n    return most_common\n\n# Example usage:\nwords = [\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"grape\", \"banana\", \"orange\", \"apple\"]\nmost_common_words = count_common(words, top_n=3)\nprint(most_common_words)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8wzfdszf.py\", line 19, in <module>\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nAssertionError", "passed": false}
{"task_id": 14, "requirement": "Annotation Coverage", "completion": "def find_volume(base_area: float, height: float, length: float) -> float:\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base_area (float): The area of the triangular base.\n    height (float): The height of the triangular base.\n    length (float): The length (or height) of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n\n    Raises:\n    ValueError: If any of the inputs are non-positive or non-numeric.\n    \"\"\"\n    # Validate inputs\n    if not (isinstance(base_area, (int, float)) and isinstance(height, (int, float)) and isinstance(length, (int, float))):\n        raise ValueError(\"All dimensions must be positive numbers.\")\n    if base_area <= 0 or height <= 0 or length <= 0:\n        raise ValueError(\"All dimensions must be positive numbers.\")\n\n    # Calculate the volume\n    volume = base_area * length\n    return volume\n\n# Example usage:\ntry:\n    base_area = 10.0  # area of the triangular base\n    height = 4.0      # height of the triangular base (not used in volume calculation)\n    length = 5.0      # length of the prism\n\n    volume = find_volume(base_area, height, length)\n    print(f\"The volume of the triangular prism is: {volume}\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpx8rw9j7c.py\", line 19, in <module>\n    assert find_volume(10,8,6) == 240\nAssertionError", "passed": false}
{"task_id": 15, "requirement": "Annotation Coverage", "completion": "import re\nfrom typing import List\n\ndef split_lowerstring(text: str) -> List[str]:\n    \"\"\"\n    Splits a string at lowercase letters and returns a list of segments.\n\n    Args:\n        text (str): The input string to be split.\n\n    Returns:\n        List[str]: A list of strings, each representing a segment of the original string\n                   split at lowercase letters. Returns an empty list if the input string\n                   contains no lowercase letters.\n\n    Raises:\n        TypeError: If the input is not a string.\n    \"\"\"\n    # Check if the input is a string\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string.\")\n\n    # Use regular expression to split the string at lowercase letters\n    segments = re.split('[a-z]', text)\n\n    # Return the segments, filtering out empty strings if any\n    return [segment for segment in segments if segment]\n\n# Example usage:\ninput_string = \"HelloWorldPython\"\nresult = split_lowerstring(input_string)\nprint(result)  # Output: ['H', 'W', 'P']\n", "result": "failed: File \"/tmp/tmppheqhen8.py\", line 19\n    try: split_lowerstring(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 16, "requirement": "Annotation Coverage", "completion": "import re\nfrom typing import Union\n\ndef text_lowercase_underscore(text: str) -> str:\n    \"\"\"\n    Find sequences of lowercase letters joined with an underscore.\n\n    :param text: The input string to search for sequences.\n    :return: 'Found a match!' if a match is found, otherwise 'Not matched!'.\n    :raises TypeError: If the input is not a string.\n    \"\"\"\n    # Check if the input is a string\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string.\")\n\n    # Regular expression pattern to match lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n\n    # Search for matches in the input text\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\nprint(text_lowercase_underscore(\"hello_world\"))  # Output: Found a match!\nprint(text_lowercase_underscore(\"Hello_World\"))  # Output: Not matched!\nprint(text_lowercase_underscore(\"123_abc\"))      # Output: Not matched!\nprint(text_lowercase_underscore(\"\"))             # Output: Not matched!\nprint(text_lowercase_underscore(\"example_test\")) # Output: Found a match!\n", "result": "passed", "passed": true}
{"task_id": 17, "requirement": "Annotation Coverage", "completion": "def square_perimeter(a: int) -> int:\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Parameters:\n    a (int): The length of one side of the square. Must be a non-negative integer.\n\n    Returns:\n    int: The perimeter of the square.\n\n    Raises:\n    ValueError: If the input `a` is negative.\n    \"\"\"\n    if a < 0:\n        raise ValueError(\"Side length must be a non-negative integer.\")\n    return 4 * a\n\n# Example usage:\n# side = 5\n# perimeter = square_perimeter(side)\n# print(f\"The perimeter of the square with side length {side} is {perimeter}.\")\n", "result": "passed", "passed": true}
{"task_id": 18, "requirement": "Annotation Coverage", "completion": "def remove_dirty_chars(string: str, second_string: str) -> str:\n    # Check if both inputs are strings\n    if not isinstance(string, str) or not isinstance(second_string, str):\n        raise TypeError(\"Both inputs must be strings.\")\n    \n    # Check if the input strings contain only alphabetic characters\n    if not string.isalpha() or not second_string.isalpha():\n        raise ValueError(\"Input strings must only contain alphabetic characters.\")\n    \n    # If the second string is empty, return the original string\n    if not second_string:\n        return string\n    \n    # Create a set of characters to remove for faster lookup\n    dirty_set = set(second_string)\n    \n    # Use a list comprehension to filter out the dirty characters\n    cleaned_string = ''.join([char for char in string if char not in dirty_set])\n    \n    return cleaned_string\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpa47ggl0f.py\", line 28, in <module>\n    assert remove_dirty_chars('example', '') == 'example', 'Function should return the original string if the second string is empty.'\n  File \"/tmp/tmpa47ggl0f.py\", line 7, in remove_dirty_chars\n    raise ValueError(\"Input strings must only contain alphabetic characters.\")\nValueError: Input strings must only contain alphabetic characters.", "passed": false}
{"task_id": 19, "requirement": "Annotation Coverage", "completion": "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    \"\"\"\n    Check if the given array contains any duplicate elements.\n\n    Parameters:\n    arraynums (List[int]): The array of integers to check.\n\n    Returns:\n    bool: True if there are duplicates, False otherwise.\n    \"\"\"\n    # Use a set to store unique elements\n    unique_elements = set()\n    \n    for num in arraynums:\n        if num in unique_elements:\n            return True\n        unique_elements.add(num)\n    \n    return False\n\n# Example usage:\nif __name__ == \"__main__\":\n    array1 = [1, 2, 3, 4, 5]\n    array2 = [1, 2, 3, 4, 2]\n    \n    print(test_duplicate(array1))  # Output: False\n    print(test_duplicate(array2))  # Output: True\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpj41tibto.py\", line 24, in <module>\n    assert False, 'TypeError not raised'\nAssertionError: TypeError not raised", "passed": false}
{"task_id": 20, "requirement": "Annotation Coverage", "completion": "def is_woodall(x: int) -> bool:\n    \"\"\"\n    Check if the given integer is a Woodall number.\n\n    A Woodall number is a number of the form W_n = n * 2^n - 1 for some integer n >= 1.\n\n    Args:\n        x (int): The integer to check.\n\n    Returns:\n        bool: True if x is a Woodall number, False otherwise.\n\n    Raises:\n        TypeError: If the input is not an integer.\n    \"\"\"\n    if not isinstance(x, int):\n        raise TypeError(\"Input must be an integer.\")\n    \n    if x < 1:\n        return False\n    \n    n = 1\n    while True:\n        woodall = n * (2 ** n) - 1\n        if woodall == x:\n            return True\n        if woodall > x:\n            return False\n        n += 1\n\n# Example usage:\nprint(is_woodall(1))    # True, because 1 * 2^1 - 1 = 1\nprint(is_woodall(7))    # True, because 2 * 2^2 - 1 = 7\nprint(is_woodall(23))   # True, because 3 * 2^3 - 1 = 23\nprint(is_woodall(10))   # False, 10 is not a Woodall number\nprint(is_woodall(0))    # False, 0 is not a Woodall number\nprint(is_woodall(-5))   # False, negative numbers are not Woodall numbers\n", "result": "passed", "passed": true}
{"task_id": 21, "requirement": "Annotation Coverage", "completion": "def multiples_of_num(n: int, m: int) -> list[int]:\n    \"\"\"\n    Find m number of multiples of n.\n\n    Parameters:\n    n (int): The number whose multiples are to be found.\n    m (int): The number of multiples to find.\n\n    Returns:\n    list[int]: A list containing the first m multiples of n.\n\n    Raises:\n    ValueError: If either m or n is negative.\n    \"\"\"\n    if m < 0 or n < 0:\n        raise ValueError(\"Both m and n must be non-negative integers.\")\n    if m == 0:\n        return []\n    return [n * i for i in range(1, m + 1)]\n\n# Example usage:\ntry:\n    n = 5\n    m = 10\n    result = multiples_of_num(n, m)\n    print(f\"The first {m} multiples of {n} are: {result}\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvok_wwhg.py\", line 15, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "requirement": "Annotation Coverage", "completion": "def find_first_duplicate(nums: list[int]) -> int:\n    # Check if the input is a list of integers\n    if not isinstance(nums, list) or not all(isinstance(num, int) for num in nums):\n        raise TypeError(\"Input must be a list of integers.\")\n    \n    # Handle empty list case\n    if not nums:\n        return -1\n    \n    # Create a set to keep track of seen elements\n    seen = set()\n    \n    # Iterate through the array\n    for num in nums:\n        # If the number is already in the set, it's a duplicate\n        if num in seen:\n            return num\n        # Otherwise, add it to the set\n        seen.add(num)\n    \n    # If no duplicates are found, return -1\n    return -1\n\n# Example usage:\narr = [3, 5, 2, 5, 3, 7]\nresult = find_first_duplicate(arr)\nprint(\"First duplicate:\", result)  # Output: First duplicate: 5\n\n# Test empty list\nempty_arr = []\nresult = find_first_duplicate(empty_arr)\nprint(\"First duplicate in empty list:\", result)  # Output: First duplicate in empty list: -1\n\n# Test invalid input (non-list or non-integer elements)\ntry:\n    invalid_arr = [1, 2, \"3\", 4]\n    result = find_first_duplicate(invalid_arr)\nexcept TypeError as e:\n    print(e)  # Output: Input must be a list of integers.\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9ecld9dh.py\", line 40, in <module>\n    assert find_first_duplicate.__annotations__ == {'nums': list, 'return': int}\nAssertionError", "passed": false}
{"task_id": 23, "requirement": "Annotation Coverage", "completion": "from typing import List\n\ndef maximum_sum(list1: List[List[int]]) -> int:\n    \"\"\"\n    Find the maximum sum of elements of any sublist in a list of lists.\n\n    :param list1: List of lists containing integers.\n    :return: The maximum sum of elements of any sublist.\n    :raises TypeError: If the input is not a list of lists or if any sublist contains non-integer elements.\n    \"\"\"\n    if not isinstance(list1, list):\n        raise TypeError(\"Input must be a list of lists.\")\n\n    if not list1:\n        return 0  # Return 0 if the list of lists is empty\n\n    max_sum = float('-inf')  # Initialize with negative infinity to handle all possible sums\n\n    for sublist in list1:\n        if not isinstance(sublist, list):\n            raise TypeError(\"Each element in the input must be a list.\")\n        for item in sublist:\n            if not isinstance(item, int):\n                raise TypeError(\"All elements in sublists must be integers.\")\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum if max_sum != float('-inf') else 0\n\n# Example usage:\nlists = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [10, -2, 1],\n    [7, 8, 9]\n]\n\nprint(maximum_sum(lists))  # Output: 24 (since [7, 8, 9] has the maximum sum)\n", "result": "failed: File \"/tmp/tmpbcfjr2_3.py\", line 30\n    try: maximum_sum([[1, 2], [3, 'a']]); assert False, 'Expected TypeError' except TypeError: pass\n                                                                             ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 24, "requirement": "Annotation Coverage", "completion": "def binary_to_decimal(binary: str) -> int:\n    \"\"\"\n    Convert a binary string to its decimal equivalent.\n\n    :param binary: A string representing a binary number (e.g., '1010')\n    :return: The decimal equivalent of the binary number\n    :raises ValueError: If the input is not a valid binary string\n    \"\"\"\n    if not binary:\n        return 0  # Handle the edge case of an empty string\n\n    decimal = 0\n    length = len(binary)\n\n    for i, bit in enumerate(binary):\n        if bit not in ('0', '1'):\n            raise ValueError(\"Invalid binary number. It should contain only '0's and '1's.\")\n        decimal += int(bit) * (2 ** (length - i - 1))\n\n    return decimal\n\n# Example usage:\nbinary_number = \"1010\"\ndecimal_number = binary_to_decimal(binary_number)\nprint(f\"The decimal equivalent of binary {binary_number} is {decimal_number}\")\n", "result": "failed: File \"/tmp/tmpboru6qhi.py\", line 18\n    try: binary_to_decimal('102'); assert False, 'Expected ValueError' except ValueError as e: assert str(e) == 'Invalid binary number'\n                                                                       ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 25, "requirement": "Annotation Coverage", "completion": "from collections import Counter\nfrom typing import List\n\ndef find_product(arr: List[int]) -> int:\n    \"\"\"\n    Calculate the product of non-repeated elements in a given list of integers.\n\n    Args:\n        arr (List[int]): A list of integers.\n\n    Returns:\n        int: The product of non-repeated elements. Returns 1 if the list is empty.\n\n    Raises:\n        TypeError: If the input is not a list of integers.\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list of integers.\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(element, int) for element in arr):\n        raise TypeError(\"All elements in the list must be integers.\")\n    \n    # Count the occurrences of each element in the array\n    element_counts = Counter(arr)\n    \n    # Filter out elements that appear more than once\n    non_repeated_elements = [element for element, count in element_counts.items() if count == 1]\n    \n    # Calculate the product of non-repeated elements\n    product = 1\n    for element in non_repeated_elements:\n        product *= element\n    \n    return product\n\n# Example usage:\narr = [1, 2, 3, 4, 2, 3, 5]\nresult = find_product(arr)\nprint(\"Product of non-repeated elements:\", result)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4rldeqtw.py\", line 23, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "requirement": "Annotation Coverage", "completion": "from typing import List, Tuple\n\ndef check_k_elements(test_list: List[Tuple], k: int) -> bool:\n    \"\"\"\n    Check if all tuples in the given list have exactly k elements.\n\n    :param test_list: List of tuples to be checked.\n    :param k: The expected number of elements in each tuple.\n    :return: True if all tuples have exactly k elements, False otherwise.\n    :raises TypeError: If the input is not a list of tuples or if k is not an integer.\n    \"\"\"\n    # Check if the input is a list of tuples\n    if not isinstance(test_list, list) or not all(isinstance(t, tuple) for t in test_list):\n        raise TypeError(\"Input must be a list of tuples.\")\n\n    # Check if k is an integer\n    if not isinstance(k, int):\n        raise TypeError(\"k must be an integer.\")\n\n    # Check if all tuples have exactly k elements\n    return all(len(t) == k for t in test_list)\n\n# Example usage:\ntry:\n    tuple_list = [(1, 2), (3, 4), (5, 6)]\n    k = 2\n    print(check_k_elements(tuple_list, k))  # Output: True\n\n    tuple_list = [(1, 2, 3), (4, 5), (6, 7)]\n    k = 2\n    print(check_k_elements(tuple_list, k))  # Output: False\n\n    # Edge case: Empty list\n    tuple_list = []\n    k = 2\n    print(check_k_elements(tuple_list, k))  # Output: True\n\n    # Edge case: Tuples with zero elements\n    tuple_list = [(), (), ()]\n    k = 0\n    print(check_k_elements(tuple_list, k))  # Output: True\n\n    # Invalid input: Not a list of tuples\n    tuple_list = [(1, 2), [3, 4], (5, 6)]\n    k = 2\n    print(check_k_elements(tuple_list, k))  # Raises TypeError\n\nexcept TypeError as e:\n    print(f\"Error: {e}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp34fc60ei.py\", line 33, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "requirement": "Annotation Coverage", "completion": "from typing import List\n\ndef remove(lst: List[str]) -> List[str]:\n    \"\"\"\n    Removes all digits from each string in a list of strings.\n\n    :param lst: List of strings from which digits need to be removed.\n    :return: List of strings with all digits removed.\n    :raises TypeError: If the input is not a list or if any element in the list is not a string.\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list.\")\n\n    # Check if all elements in the list are strings\n    for item in lst:\n        if not isinstance(item, str):\n            raise TypeError(\"All elements in the list must be strings.\")\n\n    # Use a list comprehension to iterate over each string in the list\n    # and remove digits using the str.translate method with str.maketrans.\n    return [s.translate(str.maketrans('', '', '0123456789')) for s in lst]\n\n# Example usage:\ninput_list = [\"abc123\", \"4def56\", \"ghi789\", \"jkl0\"]\noutput_list = remove(input_list)\nprint(output_list)  # Output: ['abc', 'def', 'ghi', 'jkl']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpc90ov775.py\", line 35, in <module>\n    assert remove.__annotations__ == {'list': list[str], 'return': list[str]}\nAssertionError", "passed": false}
{"task_id": 28, "requirement": "Annotation Coverage", "completion": "import math\n\ndef binomial_coeff(n: int, k: int) -> int:\n    \"\"\"\n    Calculate the binomial coefficient C(n, k), which is the number of ways to choose k elements from a set of n elements.\n\n    Parameters:\n    n (int): Total number of elements.\n    k (int): Number of elements to choose.\n\n    Returns:\n    int: The binomial coefficient C(n, k).\n\n    Raises:\n    ValueError: If either input is negative or if k is greater than n.\n    \"\"\"\n    if n < 0 or k < 0:\n        raise ValueError(\"Inputs must be non-negative and k must not be greater than n\")\n    if k > n:\n        raise ValueError(\"Inputs must be non-negative and k must not be greater than n\")\n    \n    return math.comb(n, k)\n\n# Example usage:\nn = 5\nk = 2\nprint(f\"C({n}, {k}) = {binomial_coeff(n, k)}\")\n", "result": "passed", "passed": true}
{"task_id": 29, "requirement": "Annotation Coverage", "completion": "from typing import List, Optional\n\ndef get_odd_occurrence(arr: List[int], arr_size: int) -> Optional[int]:\n    \"\"\"\n    Finds the element that occurs an odd number of times in the given list.\n\n    :param arr: List of integers\n    :param arr_size: Size of the list\n    :return: The element that occurs an odd number of times, or None if the list is empty\n    :raises TypeError: If the input is not a list of integers\n    \"\"\"\n    # Check if the input is a list of integers\n    if not isinstance(arr, list) or not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"Input must be a list of integers.\")\n    \n    # Handle empty list\n    if arr_size == 0:\n        return None\n    \n    # Initialize a dictionary to store the count of each element\n    count_dict = {}\n    \n    # Count the occurrences of each element in the list\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Find the element with an odd count\n    for key, value in count_dict.items():\n        if value % 2 != 0:\n            return key\n    \n    # If no element occurs an odd number of times, return None\n    return None\n\n# Example usage:\narr = [1, 2, 3, 2, 3, 1, 3]\narr_size = len(arr)\nresult = get_odd_occurrence(arr, arr_size)\nprint(f\"The element occurring an odd number of times is: {result}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpslagfeyx.py\", line 44, in <module>\n    assert get_odd_occurrence([]) is None\nTypeError: get_odd_occurrence() missing 1 required positional argument: 'arr_size'", "passed": false}
{"task_id": 30, "requirement": "Annotation Coverage", "completion": "def count_substring_with_equal_ends(s: str) -> int:\n    # Raise TypeError if the input is not a string\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string.\")\n    \n    # Return 0 for an empty string\n    if not s:\n        return 0\n    \n    count = 0\n    n = len(s)\n    \n    # Iterate over all possible substrings\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substring = s[i:j]\n            if substring[0] == substring[-1]:\n                count += 1\n                \n    return count\n\n# Example usage:\ninput_string = \"abcab\"\nresult = count_substring_with_equal_ends(input_string)\nprint(f\"Number of substrings with equal ends: {result}\")\n", "result": "failed: File \"/tmp/tmp3gsunk9e.py\", line 25\n    try: count_substring_with_equal_ends(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                                  ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 31, "requirement": "Annotation Coverage", "completion": "import heapq\nfrom collections import defaultdict\nfrom typing import List\n\ndef func(nums: List[List[int]], k: int) -> List[int]:\n    # Step 1: Count the frequency of each integer across all lists\n    frequency_map = defaultdict(int)\n    for lst in nums:\n        for num in lst:\n            frequency_map[num] += 1\n    \n    # Step 2: Check if k is greater than the number of distinct integers\n    distinct_count = len(frequency_map)\n    if k > distinct_count:\n        raise ValueError(\"k cannot be greater than the number of distinct integers\")\n    \n    # Step 3: Use a min-heap to keep track of the top k frequent integers\n    min_heap = []\n    for num, freq in frequency_map.items():\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, (freq, num))\n        else:\n            if freq > min_heap[0][0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, (freq, num))\n    \n    # Step 4: Extract the top k frequent integers from the heap\n    top_k = [heapq.heappop(min_heap)[1] for _ in range(len(min_heap))]\n    \n    # Step 5: Return the result in descending order of frequency\n    return top_k[::-1]\n\n# Example usage:\nlists = [\n    [1, 2, 3],\n    [2, 3, 4],\n    [3, 4, 5],\n    [1, 3, 5]\n]\nk = 2\nprint(func(lists, k))  # Output: [3, 1]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp75a65v2k.py\", line 36, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "requirement": "Annotation Coverage", "completion": "def max_prime_factors(n: int) -> int:\n    # Check if the input is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    # Initialize the largest prime factor\n    largest_prime: int = -1\n    \n    # Divide out all factors of 2\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n    \n    # Check for odd factors from 3 to sqrt(n)\n    i: int = 3\n    while i * i <= n:\n        while n % i == 0:\n            largest_prime = i\n            n //= i\n        i += 2\n    \n    # If n is still greater than 2, then n itself is prime\n    if n > 2:\n        largest_prime = n\n    \n    return largest_prime\n\n# Example usage:\nnumber = 13195\nprint(f\"The largest prime factor of {number} is: {max_prime_factors(number)}\")\n", "result": "passed", "passed": true}
{"task_id": 33, "requirement": "Annotation Coverage", "completion": "def decimal_to_binary(N: int) -> str:\n    \"\"\"\n    Convert a non-negative integer to its binary representation.\n\n    Args:\n        N (int): The non-negative integer to convert.\n\n    Returns:\n        str: The binary representation of the input number as a string.\n\n    Raises:\n        ValueError: If the input is not a non-negative integer.\n    \"\"\"\n    if not isinstance(N, int) or N < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    if N == 0:\n        return \"0\"\n    \n    binary_num = \"\"\n    while N > 0:\n        remainder = N % 2\n        binary_num = str(remainder) + binary_num\n        N = N // 2\n    \n    return binary_num\n\n# Example usage:\ndecimal_number = 13\nbinary_number = decimal_to_binary(decimal_number)\nprint(f\"The binary representation of {decimal_number} is {binary_number}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpr7gc2rz0.py\", line 16, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "requirement": "Annotation Coverage", "completion": "from typing import List\n\ndef find_missing(ar: List[int], N: int) -> int:\n    \"\"\"\n    Find the missing number in a sorted array of integers from 1 to N.\n\n    Args:\n        ar (List[int]): A sorted list of integers from 1 to N with one missing number.\n        N (int): The maximum number in the sequence (1 to N).\n\n    Returns:\n        int: The missing number in the sequence.\n\n    Raises:\n        ValueError: If the input list is not sorted.\n    \"\"\"\n    # Check if the list is sorted\n    if ar != sorted(ar):\n        raise ValueError(\"Input list must be sorted.\")\n    \n    left, right = 0, len(ar) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # If the middle element is not equal to its expected value (mid + 1),\n        # the missing number is on the left side.\n        if ar[mid] != mid + 1:\n            right = mid - 1\n        else:\n            left = mid + 1\n    \n    # The missing number is the value at the left index + 1\n    return left + 1\n\n# Example usage:\narr = [1, 2, 3, 4, 6, 7, 8]\nN = 8\nprint(find_missing(arr, N))  # Output: 5\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmrpd4pce.py\", line 29, in <module>\n    assert find_missing.__annotations__ == {'ar': list, 'N': int, 'return': int}\nAssertionError", "passed": false}
{"task_id": 35, "requirement": "Annotation Coverage", "completion": "def find_rect_num(n: int) -> int:\n    \"\"\"\n    Calculate the n-th rectangular number.\n\n    Parameters:\n    n (int): The position of the rectangular number to find.\n\n    Returns:\n    int: The n-th rectangular number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    return n * (n + 1)\n\n# Example usage:\nif __name__ == \"__main__\":\n    n = 5\n    result = find_rect_num(n)\n    print(f\"The {n}-th rectangular number is: {result}\")\n", "result": "passed", "passed": true}
{"task_id": 36, "requirement": "Annotation Coverage", "completion": "def find_nth_digit(p: int, q: int, N: int) -> int:\n    \"\"\"\n    Find the Nth digit in the decimal representation of the fraction p/q.\n\n    Args:\n        p (int): The numerator of the fraction.\n        q (int): The denominator of the fraction.\n        N (int): The position of the digit to find (1-based index).\n\n    Returns:\n        int: The Nth digit in the decimal representation of p/q.\n\n    Raises:\n        ValueError: If the denominator q is zero.\n    \"\"\"\n    if q == 0:\n        raise ValueError(\"Denominator cannot be zero\")\n    \n    # Calculate the decimal representation\n    decimal = abs(p) / abs(q)\n    \n    # Convert the decimal part to a string\n    decimal_str = str(decimal).split('.')[1]\n    \n    # Check if N is within the range of the decimal digits\n    if N > len(decimal_str):\n        raise ValueError(\"N is out of range for the decimal representation\")\n    \n    # Return the Nth digit (1-based index)\n    return int(decimal_str[N - 1])\n\n# Example usage:\nnumerator = 1\ndenominator = 7\nn = 3\nprint(find_nth_digit(numerator, denominator, n))  # Output: 4\n", "result": "passed", "passed": true}
{"task_id": 37, "requirement": "Annotation Coverage", "completion": "from typing import List, Union\n\ndef sort_mixed_list(mixed_list: List[Union[int, str]]) -> List[Union[int, str]]:\n    # Check if the input is a list\n    if not isinstance(mixed_list, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Check if all elements are either integers or strings\n    for item in mixed_list:\n        if not isinstance(item, (int, str)):\n            raise TypeError(\"List elements must be either integers or strings.\")\n    \n    # Separate integers and strings\n    integers = [x for x in mixed_list if isinstance(x, int)]\n    strings = [x for x in mixed_list if isinstance(x, str)]\n    \n    # Sort integers and strings separately\n    integers.sort()\n    strings.sort()\n    \n    # Combine the sorted integers and strings\n    sorted_list = integers + strings\n    \n    return sorted_list\n\n# Example usage:\nmixed_list = [3, 'apple', 1, 'banana', 2, 'cherry']\nsorted_list = sort_mixed_list(mixed_list)\nprint(sorted_list)  # Output: [1, 2, 3, 'apple', 'banana', 'cherry']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppuyq9rvh.py\", line 41, in <module>\n    assert sort_mixed_list.__annotations__ == {'mixed_list': list[Union[int, str]], 'return' : list}\nAssertionError", "passed": false}
{"task_id": 38, "requirement": "Annotation Coverage", "completion": "def div_even_odd(list1: list[int]) -> int | float:\n    \"\"\"\n    Find the division of the first even number by the first odd number in the list.\n\n    Args:\n        list1 (list[int]): A list of integers.\n\n    Returns:\n        int | float: The result of dividing the first even number by the first odd number.\n\n    Raises:\n        ValueError: If the list does not contain at least one even and one odd number.\n    \"\"\"\n    first_even = None\n    first_odd = None\n\n    # Find the first even and first odd numbers in the list\n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n\n    # Check if both even and odd numbers were found\n    if first_even is None or first_odd is None:\n        raise ValueError(\"List must contain at least one even and one odd number.\")\n\n    # Handle division by zero (if first_odd is zero)\n    if first_odd == 0:\n        raise ValueError(\"Division by zero is not allowed (first odd number is zero).\")\n\n    # Return the division result\n    return first_even / first_odd\n", "result": "failed: File \"/tmp/tmpkeq8z_mt.py\", line 24\n    try: div_even_odd([2, 4, 6]); assert False; except ValueError as e: assert str(e) == 'List must contain at least one even and one odd number.'\n                                                ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 39, "requirement": "Annotation Coverage", "completion": "from collections import Counter\n\ndef rearrange_string(s: str) -> str:\n    \"\"\"\n    Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n\n    Args:\n        s (str): The input string consisting of lowercase letters.\n\n    Returns:\n        str: A rearranged string where no two adjacent characters are the same. If rearrangement is not possible, returns an empty string.\n\n    Raises:\n        ValueError: If the input is not a string or contains characters other than lowercase letters.\n    \"\"\"\n    # Validate input\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string.\")\n    if not s.islower() or not s.isalpha():\n        raise ValueError(\"Input must consist only of lowercase letters.\")\n\n    # Count the frequency of each character\n    char_counts = Counter(s)\n\n    # Find the most frequent character and its count\n    max_char, max_count = char_counts.most_common(1)[0]\n\n    # Check if rearrangement is possible\n    if max_count > (len(s) + 1) // 2:\n        return \"\"  # Rearrangement is not possible\n\n    # Rearrange the string\n    result = [None] * len(s)\n    index = 0\n\n    # Place the most frequent character first\n    for _ in range(max_count):\n        result[index] = max_char\n        index += 2\n\n    # Place the remaining characters\n    for char, count in char_counts.items():\n        if char == max_char:\n            continue\n        for _ in range(count):\n            if index >= len(s):\n                index = 1\n            result[index] = char\n            index += 2\n\n    return \"\".join(result)\n\n# Example usage\nprint(rearrange_string(\"aabb\"))  # Output: \"abab\" or \"baba\"\nprint(rearrange_string(\"aaab\"))  # Output: \"\"\nprint(rearrange_string(\"abc\"))   # Output: \"abc\" or any valid rearrangement\nprint(rearrange_string(\"aaa\"))   # Output: \"\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpl7yfmg4m.py\", line 37, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "requirement": "Annotation Coverage", "completion": "from collections import Counter\nfrom typing import List, Dict\n\ndef freq_element(nums: List[List[int]]) -> Dict[int, int]:\n    # Check if the input is a list of lists\n    if not isinstance(nums, list) or not all(isinstance(sublist, list) for sublist in nums):\n        raise TypeError(\"Input must be a list of lists.\")\n    \n    # Return an empty dictionary if the input is an empty list\n    if not nums:\n        return {}\n    \n    # Flatten the list of lists into a single list\n    flattened_list = [item for sublist in nums for item in sublist]\n    \n    # Use Counter to get the frequency of each element\n    frequency = Counter(flattened_list)\n    \n    # Convert Counter to a regular dictionary to match the return type annotation\n    return dict(frequency)\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\nresult = freq_element(list_of_lists)\nprint(result)\n", "result": "failed: File \"/tmp/tmp2bczwp8y.py\", line 23\n    try: freq_element('not a list'); assert False; except TypeError: assert True\n                                                   ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 41, "requirement": "Annotation Coverage", "completion": "from typing import List\n\ndef filter_evennumbers(nums: List[int]) -> List[int]:\n    \"\"\"\n    Filters even numbers from the given list using a lambda function.\n\n    :param nums: List of integers\n    :return: List of even integers\n    :raises TypeError: If the input is not a list of integers\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(nums, list):\n        raise TypeError(\"Input must be a list of integers.\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(num, int) for num in nums):\n        raise TypeError(\"All elements in the list must be integers.\")\n    \n    # Return an empty list if the input list is empty\n    if not nums:\n        return []\n    \n    # Filter even numbers using a lambda function\n    return list(filter(lambda x: x % 2 == 0, nums))\n\n# Example usage:\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven_numbers = filter_evennumbers(numbers)\nprint(even_numbers)  # Output: [2, 4, 6, 8, 10]\n\n# Example with an empty list\nempty_list = []\nprint(filter_evennumbers(empty_list))  # Output: []\n\n# Example with invalid input (non-integer list)\ntry:\n    invalid_list = [1, 2, \"three\", 4]\n    print(filter_evennumbers(invalid_list))\nexcept TypeError as e:\n    print(e)  # Output: All elements in the list must be integers.\n\n# Example with invalid input (not a list)\ntry:\n    invalid_input = \"not a list\"\n    print(filter_evennumbers(invalid_input))\nexcept TypeError as e:\n    print(e)  # Output: Input must be a list of integers.\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2ik_r5vf.py\", line 40, in <module>\n    assert filter_evennumbers.__annotations__ == {'nums': list, 'return': list}\nAssertionError", "passed": false}
{"task_id": 42, "requirement": "Annotation Coverage", "completion": "from collections import Counter\nfrom typing import List\n\ndef find_sum(arr: List[int], n: int) -> int:\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Handle empty array\n    if not arr:\n        return 0\n    \n    # Count the occurrences of each element in the array\n    element_counts = Counter(arr)\n    \n    # Sum the elements that appear more than once\n    sum_repeated = sum(element for element, count in element_counts.items() if count > 1)\n    \n    return sum_repeated\n\n# Example usage:\narr = [1, 2, 3, 4, 2, 3, 5, 6, 7, 7]\nn = len(arr)  # n is the length of the array\nresult = find_sum(arr, n)\nprint(\"Sum of repeated elements:\", result)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6smbf6k2.py\", line 20, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nAssertionError", "passed": false}
{"task_id": 43, "requirement": "Annotation Coverage", "completion": "import re\nfrom typing import Union\n\ndef text_match(text: str) -> str:\n    \"\"\"\n    Find sequences of lowercase letters joined with an underscore using regex.\n\n    Args:\n        text (str): The input string to search for matches.\n\n    Returns:\n        str: 'Found a match!' if a match is found, otherwise 'Not matched!'.\n\n    Raises:\n        TypeError: If the input is not a string.\n    \"\"\"\n    # Check if the input is a string\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string.\")\n    \n    # Handle empty string case\n    if not text:\n        return 'Not matched!'\n    \n    # Define the regex pattern to match sequences of lowercase letters joined by an underscore\n    pattern = r'[a-z]+_[a-z]+'\n    \n    # Search for the pattern in the input text\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\nprint(text_match(\"hello_world\"))  # Output: 'Found a match!'\nprint(text_match(\"Hello_world\"))  # Output: 'Not matched!' (uppercase 'H')\nprint(text_match(\"no_match\"))     # Output: 'Not matched!' (no underscore)\nprint(text_match(\"\"))             # Output: 'Not matched!' (empty string)\nprint(text_match(123))            # Raises TypeError: Input must be a string.\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpx11xc7n3.py\", line 22, in <module>\n    print(text_match(123))            # Raises TypeError: Input must be a string.\n  File \"/tmp/tmpx11xc7n3.py\", line 6, in text_match\n    raise TypeError(\"Input must be a string.\")\nTypeError: Input must be a string.", "passed": false}
{"task_id": 44, "requirement": "Annotation Coverage", "completion": "import re\nfrom typing import Optional\n\ndef text_match_string(text: str, word: str) -> Optional[str]:\n    \"\"\"\n    Check if the given word appears at the beginning of the text.\n\n    Parameters:\n    text (str): The text in which to search for the word.\n    word (str): The word to search for at the beginning of the text.\n\n    Returns:\n    Optional[str]: The matched word if found at the beginning of the text, otherwise None.\n\n    Raises:\n    TypeError: If the input is not a string.\n    \"\"\"\n    # Check if the inputs are strings\n    if not isinstance(text, str) or not isinstance(word, str):\n        raise TypeError(\"Both 'text' and 'word' must be strings.\")\n\n    # Handle edge cases: empty string or string with only spaces\n    if not text.strip():\n        return None\n\n    # Create a regular expression pattern that matches the word at the beginning of the string\n    pattern = r'^' + re.escape(word)\n\n    # Search for the pattern in the text\n    match = re.search(pattern, text)\n\n    # Return the matched word if found, otherwise None\n    return match.group(0) if match else None\n\n# Example usage:\nprint(text_match_string(\"hello world\", \"hello\"))  # Output: \"hello\"\nprint(text_match_string(\"world hello\", \"hello\"))  # Output: None\nprint(text_match_string(\"\", \"hello\"))             # Output: None\nprint(text_match_string(\"   \", \"hello\"))          # Output: None\nprint(text_match_string(\"hello\", \"hello\"))        # Output: \"hello\"\n", "result": "failed: File \"/tmp/tmpf3uetgy_.py\", line 25\n    try: text_match_string(123); assert False, 'TypeError not raised' except TypeError: pass\n                                                                      ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 45, "requirement": "Annotation Coverage", "completion": "from math import gcd\nfrom functools import reduce\nfrom typing import List\n\ndef get_gcd(numbers: List[int]) -> int:\n    \"\"\"\n    Compute the greatest common divisor (GCD) of an array of integers.\n\n    :param numbers: List of integers\n    :return: GCD of the array elements\n    :raises ValueError: If the input list is empty\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"Input list cannot be empty.\")\n    \n    # Use reduce to apply the gcd function across the array\n    return reduce(gcd, numbers)\n\n# Example usage:\narray = [24, 36, 48, 60]\nresult = get_gcd(array)\nprint(f\"The GCD of {array} is {result}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpz0b_y95a.py\", line 18, in <module>\n    assert get_gcd.__annotations__ == {'numbers': list, 'return': int}\nAssertionError", "passed": false}
{"task_id": 46, "requirement": "Annotation Coverage", "completion": "def test_distinct(numbers: list) -> bool:\n    \"\"\"\n    Determine whether all the numbers in the list are distinct.\n\n    :param numbers: List of integers\n    :return: True if all numbers are distinct, False otherwise\n    :raises TypeError: If the input is not a list or if the list contains non-integer elements\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n\n    # Check if all elements in the list are integers\n    if not all(isinstance(num, int) for num in numbers):\n        raise TypeError(\"All elements in the list must be integers.\")\n\n    # Convert the list to a set to remove duplicates\n    unique_numbers = set(numbers)\n\n    # Compare the length of the set to the length of the original list\n    return len(unique_numbers) == len(numbers)\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(test_distinct([1, 2, 3, 4, 5]))  # Output: True\n    print(test_distinct([1, 2, 2, 3, 4]))  # Output: False\n    print(test_distinct([10, 20, 30, 40, 50]))  # Output: True\n    print(test_distinct([10, 20, 30, 40, 10]))  # Output: False\n\n    # Edge cases\n    print(test_distinct([]))  # Output: True (empty list has no duplicates)\n    print(test_distinct([42]))  # Output: True (single element is always unique)\n\n    # TypeError cases\n    try:\n        test_distinct(\"not a list\")  # Raises TypeError\n    except TypeError as e:\n        print(e)  # Output: Input must be a list.\n\n    try:\n        test_distinct([1, 2, \"three\", 4])  # Raises TypeError\n    except TypeError as e:\n        print(e)  # Output: All elements in the list must be integers.\n", "result": "passed", "passed": true}
{"task_id": 47, "requirement": "Annotation Coverage", "completion": "def compute_last_digit(a: int, b: int) -> int:\n    \"\"\"\n    Compute the last digit of (a! / b!).\n\n    Args:\n        a (int): The numerator factorial.\n        b (int): The denominator factorial.\n\n    Returns:\n        int: The last digit of (a! / b!).\n\n    Raises:\n        ValueError: If a is greater than b.\n    \"\"\"\n    if a > b:\n        raise ValueError(\"a should not be greater than b\")\n    elif a == b:\n        return 1\n    else:\n        # Compute the product (b+1) * (b+2) * ... * a modulo 10\n        result = 1\n        for i in range(b + 1, a + 1):\n            result = (result * i) % 10\n            if result == 0:\n                break  # If result is 0, it will remain 0\n        return result\n\n# Example usage:\nprint(compute_last_digit(5, 3))  # Output: 0 (since 5! / 3! = 20, last digit is 0)\nprint(compute_last_digit(7, 7))  # Output: 1 (since 7! / 7! = 1, last digit is 1)\nprint(compute_last_digit(4, 5))  # Output: 0 (since 4! / 5! is not an integer)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpohxh5zxf.py\", line 15, in <module>\n    print(compute_last_digit(5, 3))  # Output: 0 (since 5! / 3! = 20, last digit is 0)\n  File \"/tmp/tmpohxh5zxf.py\", line 3, in compute_last_digit\n    raise ValueError(\"a should not be greater than b\")\nValueError: a should not be greater than b", "passed": false}
{"task_id": 48, "requirement": "Annotation Coverage", "completion": "def odd_bit_set_number(n: int) -> int:\n    # Check if the input is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    \n    # Handle the edge case where the input is 0\n    if n == 0:\n        return 1  # 0b1 (binary 1) has the first odd bit set\n    \n    # Create a mask with all odd bits set to 1\n    mask = 0\n    bit = 1\n    while bit <= n:\n        mask |= bit\n        bit <<= 2  # Move to the next odd bit\n    \n    # Set all odd bits of n by ORing it with the mask\n    result = n | mask\n    return result\n\n# Example usage:\nprint(odd_bit_set_number(0))       # Output: 1 (0b1)\nprint(odd_bit_set_number(10))      # Output: 11 (0b1011)\nprint(odd_bit_set_number(0b1010))  # Output: 11 (0b1011)\nprint(odd_bit_set_number(0b1111))  # Output: 15 (0b1111)\n", "result": "passed", "passed": true}
{"task_id": 50, "requirement": "Annotation Coverage", "completion": "from typing import List, Tuple\n\ndef min_length_list(lists: List[List]) -> Tuple[int, List]:\n    \"\"\"\n    Finds the list with the minimum length from a given list of lists.\n\n    :param lists: A list of lists.\n    :return: A tuple containing the length of the shortest list and the list itself.\n    :raises ValueError: If the input is not a list of lists.\n    \"\"\"\n    # Check if the input is a list of lists\n    if not isinstance(lists, list) or not all(isinstance(lst, list) for lst in lists):\n        raise ValueError(\"Input must be a list of lists.\")\n\n    # Handle edge case where the input list is empty\n    if not lists:\n        raise ValueError(\"Input list is empty.\")\n\n    # Find the list with the minimum length\n    min_list = min(lists, key=lambda x: len(x))\n    return (len(min_list), min_list)\n\n# Example usage:\ntry:\n    lists = [[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]\n    result = min_length_list(lists)\n    print(result)  # Output: (1, [6])\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplnxbhcy5.py\", line 26, in <module>\n    assert min_length_list.__annotations__ == {'lists': 'list[list]', 'return': 'tuple[int, list]'}\nAssertionError", "passed": false}
{"task_id": 51, "requirement": "Annotation Coverage", "completion": "def check_equilateral(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Check if a triangle is equilateral.\n\n    Parameters:\n    a (int): Length of the first side of the triangle.\n    b (int): Length of the second side of the triangle.\n    c (int): Length of the third side of the triangle.\n\n    Returns:\n    bool: True if the triangle is equilateral, False otherwise.\n\n    Raises:\n    ValueError: If any of the inputs are non-positive integers.\n    \"\"\"\n    # Check if any side is non-positive\n    if a <= 0 or b <= 0 or c <= 0:\n        raise ValueError(\"All sides must be positive integers.\")\n    \n    # Check if all sides are equal\n    return a == b == c\n\n# Example usage:\ntry:\n    print(check_equilateral(5, 5, 5))  # Output: True\n    print(check_equilateral(5, 4, 5))  # Output: False\n    print(check_equilateral(0, 5, 5))  # Raises ValueError\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 52, "requirement": "Annotation Coverage", "completion": "def parallelogram_area(base: float, height: float) -> float:\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram.\n\n    Raises:\n    TypeError: If the inputs are not numerical.\n    \"\"\"\n    # Check if inputs are numerical\n    if not isinstance(base, (int, float)) or not isinstance(height, (int, float)):\n        raise TypeError(\"Both base and height must be numerical values.\")\n    \n    # Handle edge cases where base or height is zero\n    if base == 0 or height == 0:\n        return 0.0\n    \n    # Calculate and return the area\n    return base * height\n\n# Example usage:\ntry:\n    base = 5.0\n    height = 3.0\n    area = parallelogram_area(base, height)\n    print(f\"The area of the parallelogram is: {area}\")\nexcept TypeError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 53, "requirement": "Annotation Coverage", "completion": "def check_equality(s: str) -> str:\n    # Check if the input is a string\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Handle empty strings\n    if not s:\n        return \"Equal\"\n    \n    # Compare the first and last characters\n    if s[0] == s[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n\n# Example usage:\nprint(check_equality(\"hello\"))  # Output: Not Equal\nprint(check_equality(\"racecar\"))  # Output: Equal\nprint(check_equality(\"a\"))  # Output: Equal\nprint(check_equality(\"\"))  # Output: Equal\nprint(check_equality(123))  # Raises TypeError: Input must be a string\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp01ed_9jo.py\", line 18, in <module>\n    print(check_equality(123))  # Raises TypeError: Input must be a string\n  File \"/tmp/tmp01ed_9jo.py\", line 4, in check_equality\n    raise TypeError(\"Input must be a string\")\nTypeError: Input must be a string", "passed": false}
{"task_id": 54, "requirement": "Annotation Coverage", "completion": "from typing import List\n\ndef counting_sort(arr: List[int]) -> List[int]:\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(num, int) for num in arr):\n        raise TypeError(\"All elements in the list must be integers.\")\n    \n    # Handle edge cases: empty list or single element\n    if len(arr) <= 1:\n        return arr.copy()  # Return a copy to avoid modifying the original list\n    \n    # Find the minimum and maximum values in the array\n    min_val = min(arr)\n    max_val = max(arr)\n    \n    # Create a count array to store the count of each unique element\n    count = [0] * (max_val - min_val + 1)\n    \n    # Store the count of each element in the count array\n    for num in arr:\n        count[num - min_val] += 1\n    \n    # Modify the count array to store cumulative counts\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    \n    # Create an output array to store the sorted elements\n    output = [0] * len(arr)\n    \n    # Build the output array by placing elements in their correct position\n    for num in reversed(arr):\n        output[count[num - min_val] - 1] = num\n        count[num - min_val] -= 1\n    \n    return output\n\n# Example usage:\narr = [4, 2, 2, 8, 3, 3, 1]\nsorted_arr = counting_sort(arr)\nprint(\"Sorted array:\", sorted_arr)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdav_cp91.py\", line 58, in <module>\n    test_annotations()\n  File \"/tmp/tmpdav_cp91.py\", line 57, in test_annotations\n    assert hints == {'arr': list, 'return': list}\nAssertionError", "passed": false}
{"task_id": 55, "requirement": "Annotation Coverage", "completion": "def tn_gp(a: int, r: int, n: int) -> int:\n    \"\"\"\n    Calculate the t-nth term of a geometric series.\n\n    Parameters:\n    a (int): The first term of the geometric series.\n    r (int): The common ratio of the geometric series.\n    n (int): The term number to find.\n\n    Returns:\n    int: The t-nth term of the geometric series.\n\n    Raises:\n    ValueError: If the term number 'n' is less than 1.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Term number 'n' must be greater than 0.\")\n    \n    # Handle the edge case where the common ratio is zero\n    if r == 0:\n        return 0 if n > 1 else a\n    \n    return a * (r ** (n - 1))\n\n# Example usage:\na = 2  # First term\nr = 3  # Common ratio\nn = 4  # Term number\n\nresult = tn_gp(a, r, n)\nprint(f\"The {n}-th term of the geometric series is: {result}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpoullj29p.py\", line 14, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "requirement": "Annotation Coverage", "completion": "def check(n: int) -> bool:\n    # Raise TypeError if the input is not an integer\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    \n    # Reverse the number\n    reversed_n = int(str(n)[::-1])\n    \n    # Check if the number is one less than twice its reverse\n    return n == 2 * reversed_n - 1\n\n# Example usage:\ntry:\n    number = 21\n    if check(number):\n        print(f\"{number} is one less than twice its reverse.\")\n    else:\n        print(f\"{number} is not one less than twice its reverse.\")\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmptj6xu9qr.py\", line 28, in <module>\n    assert check(1) == False\nAssertionError", "passed": false}
{"task_id": 57, "requirement": "Annotation Coverage", "completion": "from typing import List\n\ndef find_max_num(digits: List[int], n: int) -> int:\n    \"\"\"\n    Find the largest number that can be formed with the given digits.\n\n    Args:\n        digits (List[int]): A list of integers representing the digits.\n        n (int): The number of digits to use to form the largest number.\n\n    Returns:\n        int: The largest number that can be formed with the given digits.\n\n    Raises:\n        ValueError: If the number of digits specified (n) exceeds the length of the list of digits.\n    \"\"\"\n    # Handle edge case: empty list\n    if not digits:\n        return 0\n\n    # Check if n exceeds the length of the list\n    if n > len(digits):\n        raise ValueError(\"Number of digits exceeds the length of the list.\")\n\n    # Convert each digit to a string to facilitate sorting\n    str_digits = [str(d) for d in digits]\n\n    # Sort the digits in descending order to form the largest number\n    str_digits.sort(reverse=True)\n\n    # Select the first n digits\n    selected_digits = str_digits[:n]\n\n    # Join the selected digits into a single string and convert it to an integer\n    max_num = int(''.join(selected_digits))\n\n    return max_num\n\n# Example usage:\ndigits = [1, 2, 3, 4]\nn = 3\nprint(find_max_num(digits, n))  # Output: 432\n\ndigits = [9, 8, 7, 6]\nn = 4\nprint(find_max_num(digits, n))  # Output: 9876\n\ndigits = [5, 5, 5, 5]\nn = 2\nprint(find_max_num(digits, n))  # Output: 55\n\n# Edge case: empty list\ndigits = []\nn = 2\nprint(find_max_num(digits, n))  # Output: 0\n\n# Edge case: n exceeds the length of the list\ndigits = [1, 2, 3]\nn = 5\ntry:\n    print(find_max_num(digits, n))\nexcept ValueError as e:\n    print(e)  # Output: Number of digits exceeds the length of the list.\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_zlp_zty.py\", line 48, in <module>\n    assert find_max_num.__annotations__ == {'digits': list, 'n': int, 'return': int}\nAssertionError", "passed": false}
{"task_id": 58, "requirement": "Annotation Coverage", "completion": "def opposite_signs(a: int, b: int) -> bool:\n    \"\"\"\n    Check if two integers have opposite signs.\n\n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n\n    Returns:\n    bool: True if the integers have opposite signs, False otherwise.\n\n    Raises:\n    TypeError: If either of the inputs is not an integer.\n    \"\"\"\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise TypeError(\"Both inputs must be integers.\")\n    return (a < 0) != (b < 0)\n\n# Example usage:\nprint(opposite_signs(5, -3))  # Output: True\nprint(opposite_signs(-4, -7))  # Output: False\nprint(opposite_signs(10, 20))  # Output: False\nprint(opposite_signs(0, 0))    # Output: False\nprint(opposite_signs(0, -5))   # Output: True\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1b3jo_w8.py\", line 30, in <module>\n    assert opposite_signs(0, 1) == True\nAssertionError", "passed": false}
{"task_id": 59, "requirement": "Annotation Coverage", "completion": "def is_octagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth octagonal number.\n\n    Parameters:\n    n (int): The position of the octagonal number to calculate.\n\n    Returns:\n    int: The nth octagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return n * (3 * n - 2)\n\n# Example usage:\nif __name__ == \"__main__\":\n    n = 5\n    print(f\"The {n}th octagonal number is: {is_octagonal(n)}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpswzl96lb.py\", line 13, in <module>\n    is_octagonal(-1)\n  File \"/tmp/tmpswzl96lb.py\", line 3, in is_octagonal\n    raise ValueError(\"n must be a positive integer\")\nValueError: n must be a positive integer\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpswzl96lb.py\", line 15, in <module>\n    assert str(e) == 'Input must be a positive integer'\nAssertionError", "passed": false}
{"task_id": 60, "requirement": "Annotation Coverage", "completion": "from typing import List\n\ndef max_len_sub(arr: List[int], diff: int) -> int:\n    \"\"\"\n    Finds the maximum length of a subsequence where the difference between adjacent elements is `diff`.\n\n    Args:\n        arr (List[int]): The input array of integers.\n        diff (int): The required difference between adjacent elements in the subsequence.\n\n    Returns:\n        int: The maximum length of the subsequence.\n\n    Raises:\n        TypeError: If `arr` is not a list or `diff` is not an integer.\n    \"\"\"\n    # Input validation\n    if not isinstance(arr, list):\n        raise TypeError(\"The input array must be a list.\")\n    if not isinstance(diff, int):\n        raise TypeError(\"The difference parameter must be an integer.\")\n    \n    # Handle empty array case\n    if not arr:\n        return 0\n    \n    # Dictionary to store the length of the longest subsequence ending with a particular value\n    dp = {}\n    max_length = 1\n    \n    for num in arr:\n        # Initialize the length of the subsequence ending with num as 1\n        dp[num] = 1\n        \n        # Check if num - diff exists in the dictionary\n        if num - diff in dp:\n            dp[num] = max(dp[num], dp[num - diff] + 1)\n        \n        # Check if num + diff exists in the dictionary\n        if num + diff in dp:\n            dp[num] = max(dp[num], dp[num + diff] + 1)\n        \n        # Update the maximum length found so far\n        max_length = max(max_length, dp[num])\n    \n    return max_length\n\n# Example usage:\narr = [1, 2, 3, 4, 5, 3, 2]\ndiff = 1\nprint(max_len_sub(arr, diff))  # Output: 5 (Subsequence: [1, 2, 3, 4, 5])\n\narr = [10, 9, 4, 5, 4, 8, 6]\ndiff = 1\nprint(max_len_sub(arr, diff))  # Output: 3 (Subsequence: [4, 5, 4] or [9, 8, 6])\n\n# Test with invalid inputs\ntry:\n    print(max_len_sub(\"not a list\", 1))  # Raises TypeError\nexcept TypeError as e:\n    print(e)  # Output: The input array must be a list.\n\ntry:\n    print(max_len_sub([1, 2, 3], \"not an integer\"))  # Raises TypeError\nexcept TypeError as e:\n    print(e)  # Output: The difference parameter must be an integer.\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpykh9od9q.py\", line 42, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nAssertionError", "passed": false}

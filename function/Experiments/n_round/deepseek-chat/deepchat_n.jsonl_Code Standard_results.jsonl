{"task_id": 11, "requirement": "Code Standard", "completion": "def remove_occ(s: str, ch: str) -> str:\n    \"\"\"\n    Remove the first and last occurrence of a given character from the string.\n\n    Args:\n        s (str): The input string.\n        ch (str): The character to remove.\n\n    Returns:\n        str: The modified string with the first and last occurrence of `ch` removed.\n\n    Raises:\n        ValueError: If `ch` is not a single character.\n    \"\"\"\n    # Check if `ch` is a single character\n    if not isinstance(ch, str) or len(ch) != 1:\n        raise ValueError(\"Second parameter must be a single character.\")\n\n    # Find the indices of the first and last occurrence of `ch`\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n\n    # If the character is not found, return the original string\n    if first_index == -1 or last_index == -1:\n        return s\n\n    # Remove the first occurrence\n    s = s[:first_index] + s[first_index + 1:]\n\n    # Recalculate the last index after removing the first occurrence\n    last_index = s.rfind(ch)\n\n    # Remove the last occurrence\n    s = s[:last_index] + s[last_index + 1:]\n\n    return s\n\n\n# Example usage\nif __name__ == \"__main__\":\n    input_string = \"banana\"\n    character = \"a\"\n    result = remove_occ(input_string, character)\n    print(result)  # Output: \"bnna\"\n", "result": "passed", "passed": true}
{"task_id": 12, "requirement": "Code Standard", "completion": "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n\n    Args:\n        matrix (List[List[int]]): The matrix to be sorted.\n\n    Returns:\n        List[List[int]]: The sorted matrix.\n\n    Raises:\n        TypeError: If the input is not a list of lists or if any element is not an integer.\n    \"\"\"\n    # Validate input type\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise TypeError(\"Input must be a list of lists.\")\n    \n    # Validate that all elements are integers\n    for row in matrix:\n        if not all(isinstance(element, int) for element in row):\n            raise TypeError(\"All elements in the matrix must be integers.\")\n    \n    # Handle empty matrix\n    if not matrix:\n        return []\n    \n    # Calculate the sum of each row, treating missing values as zeros\n    rows_with_sum = []\n    for row in matrix:\n        row_sum = sum(row)  # Automatically treats missing values as zeros\n        rows_with_sum.append((row_sum, row))\n    \n    # Sort the rows based on the sum\n    rows_with_sum.sort(key=lambda x: x[0])\n    \n    # Extract the sorted rows\n    sorted_matrix = [row for (_, row) in rows_with_sum]\n    \n    return sorted_matrix\n\n\n# Example usage\nif __name__ == \"__main__\":\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9],\n        [1, 1, 1],\n        [2],  # Row with varying length\n        []    # Empty row\n    ]\n\n    try:\n        sorted_matrix = sort_matrix(matrix)\n        print(\"Sorted Matrix:\")\n        for row in sorted_matrix:\n            print(row)\n    except TypeError as e:\n        print(f\"Error: {e}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqbs4z25f.py\", line 54, in <module>\n    test_annotations()\n  File \"/tmp/tmpqbs4z25f.py\", line 53, in test_annotations\n    assert hints == {'matrix': 'list[list[int]]', 'return': 'list[list[int]]'}\nAssertionError", "passed": false}
{"task_id": 14, "requirement": "Code Standard", "completion": "def find_volume(base_area: float, height: float, length: float) -> float:\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base_area (float): The area of the triangular base.\n    height (float): The height of the triangular prism.\n    length (float): The length of the triangular prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n\n    Raises:\n    ValueError: If any of the inputs are non-positive or non-numeric.\n    \"\"\"\n    # Validate inputs\n    if not all(isinstance(dim, (int, float)) and dim > 0 for dim in (base_area, height, length)):\n        raise ValueError(\"All dimensions must be positive numbers.\")\n\n    # Calculate the volume\n    volume = base_area * height * length\n    return volume\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpnxv4mtjg.py\", line 8, in <module>\n    assert find_volume(10,8,6) == 240\nAssertionError", "passed": false}
{"task_id": 15, "requirement": "Code Standard", "completion": "import re\nfrom typing import List\n\n\ndef split_lowerstring(text: str) -> List[str]:\n    \"\"\"\n    Splits a string at lowercase letters.\n\n    Args:\n        text (str): The input string to be split.\n\n    Returns:\n        List[str]: A list of strings, each representing a segment of the original string\n                   split at lowercase letters. Returns an empty list if the input string\n                   contains no lowercase letters.\n\n    Raises:\n        TypeError: If the input is not a string.\n    \"\"\"\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string.\")\n\n    # Use regular expression to split the string at lowercase letters\n    return re.split(\"[a-z]\", text)\n\n\n# Example usage\nif __name__ == \"__main__\":\n    input_string = \"HelloWorldPython\"\n    result = split_lowerstring(input_string)\n    print(result)  # Output: ['H', 'W', 'P']\n", "result": "failed: File \"/tmp/tmp3u_onrpf.py\", line 17\n    try: split_lowerstring(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 16, "requirement": "Code Standard", "completion": "import re\nfrom typing import Union\n\n\ndef text_lowercase_underscore(text: str) -> str:\n    \"\"\"\n    Find sequences of lowercase letters joined with an underscore.\n\n    Args:\n        text (str): The input string to search for sequences.\n\n    Returns:\n        str: 'Found a match!' if a match is found, otherwise 'Not matched!'.\n\n    Raises:\n        TypeError: If the input is not a string.\n    \"\"\"\n    # Check if the input is a string\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string.\")\n\n    # Regular expression pattern to match lowercase letters joined with an underscore\n    pattern = r'^[a-z]+_[a-z]+$'\n\n    # Check if the entire string matches the pattern\n    if re.match(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(text_lowercase_underscore(\"hello_world\"))  # Output: Found a match!\n    print(text_lowercase_underscore(\"Hello_world\"))  # Output: Not matched!\n    print(text_lowercase_underscore(\"hello_world_123\"))  # Output: Not matched!\n    print(text_lowercase_underscore(\"\"))  # Output: Not matched!\n    try:\n        print(text_lowercase_underscore(123))  # Raises TypeError\n    except TypeError as e:\n        print(e)  # Output: Input must be a string.\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmgcdx22q.py\", line 39, in <module>\n    assert cc_visit(inspect.getsource(text_lowercase_underscore))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 17, "requirement": "Code Standard", "completion": "def square_perimeter(a: int) -> int:\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Parameters:\n    a (int): The length of one side of the square. Must be a non-negative integer.\n\n    Returns:\n    int: The perimeter of the square.\n\n    Raises:\n    ValueError: If the input `a` is negative.\n    \"\"\"\n    if a < 0:\n        raise ValueError(\"Side length must be a non-negative integer.\")\n    return 4 * a\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqlrhxs4i.py\", line 26, in <module>\n    assert cc_visit(inspect.getsource(square_perimeter))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 18, "requirement": "Code Standard", "completion": "def remove_dirty_chars(string: str, dirty_chars: str) -> str:\n    \"\"\"\n    Removes characters from the first string that are present in the second string.\n\n    Args:\n        string (str): The original string to be cleaned.\n        dirty_chars (str): The string containing characters to remove from the first string.\n\n    Returns:\n        str: The cleaned string with characters from `dirty_chars` removed.\n\n    Raises:\n        TypeError: If either `string` or `dirty_chars` is not a string.\n        ValueError: If either `string` or `dirty_chars` contains non-alphabetic characters.\n    \"\"\"\n    # Check if inputs are strings\n    if not isinstance(string, str) or not isinstance(dirty_chars, str):\n        raise TypeError(\"Inputs must be strings.\")\n\n    # Check if inputs contain only alphabetic characters\n    if not string.isalpha() or not dirty_chars.isalpha():\n        raise ValueError(\"Input strings must only contain alphabetic characters.\")\n\n    # If dirty_chars is empty, return the original string\n    if not dirty_chars:\n        return string\n\n    # Create a set of characters to remove for faster lookup\n    dirty_set = set(dirty_chars)\n\n    # Use a list comprehension to filter out the dirty characters\n    cleaned_string = \"\".join([char for char in string if char not in dirty_set])\n\n    return cleaned_string\n\n\n# Example usage\nif __name__ == \"__main__\":\n    try:\n        string = \"hello world\"\n        dirty_chars = \"lo\"\n        result = remove_dirty_chars(string, dirty_chars)\n        print(result)  # Output: \"he wrd\"\n    except (TypeError, ValueError) as e:\n        print(f\"Error: {e}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwh8g9a10.py\", line 37, in <module>\n    assert remove_dirty_chars('example', '') == 'example', 'Function should return the original string if the second string is empty.'\n  File \"/tmp/tmpwh8g9a10.py\", line 7, in remove_dirty_chars\n    raise ValueError(\"Input strings must only contain alphabetic characters.\")\nValueError: Input strings must only contain alphabetic characters.", "passed": false}
{"task_id": 19, "requirement": "Code Standard", "completion": "from typing import List\n\ndef test_duplicate(array_nums: List[int]) -> bool:\n    \"\"\"\n    Check if the given array contains any duplicate elements.\n\n    Parameters:\n    array_nums (List[int]): The list of integers to check.\n\n    Returns:\n    bool: True if there are duplicates, False otherwise.\n\n    Raises:\n    TypeError: If the input is not a list.\n    ValueError: If the input is not a list of integers.\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(array_nums, list):\n        raise TypeError(\"Input must be a list.\")\n\n    # Check if the list contains only integers\n    if not all(isinstance(num, int) for num in array_nums):\n        raise ValueError(\"Input must be a list of integers.\")\n\n    # Handle edge cases: empty list or list with one element\n    if len(array_nums) <= 1:\n        return False\n\n    # Use a set to track unique elements\n    unique_elements = set()\n\n    for num in array_nums:\n        if num in unique_elements:\n            return True\n        unique_elements.add(num)\n\n    return False\n\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    array1 = [1, 2, 3, 4, 5]\n    array2 = [1, 2, 3, 4, 2]\n    array3 = []\n    array4 = [42]\n    array5 = [1, 2, \"3\", 4]  # Invalid input (non-integer)\n\n    print(test_duplicate(array1))  # Output: False\n    print(test_duplicate(array2))  # Output: True\n    print(test_duplicate(array3))  # Output: False\n    print(test_duplicate(array4))  # Output: False\n\n    try:\n        print(test_duplicate(array5))  # Raises ValueError\n    except ValueError as e:\n        print(e)  # Output: Input must be a list of integers.\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphru1fob9.py\", line 47, in <module>\n    test_duplicate(None)\n  File \"/tmp/tmphru1fob9.py\", line 5, in test_duplicate\n    raise TypeError(\"Input must be a list.\")\nTypeError: Input must be a list.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmphru1fob9.py\", line 50, in <module>\n    assert str(e) == 'Input must be a list of integers'\nAssertionError", "passed": false}
{"task_id": 20, "requirement": "Code Standard", "completion": "def is_woodall(x: int) -> bool:\n    \"\"\"\n    Check if the given number is a Woodall number.\n\n    A Woodall number is a natural number of the form W_n = n * 2^n - 1.\n\n    Args:\n        x (int): The number to check.\n\n    Returns:\n        bool: True if the number is a Woodall number, False otherwise.\n\n    Raises:\n        TypeError: If the input is not an integer.\n    \"\"\"\n    if not isinstance(x, int):\n        raise TypeError(\"Input must be an integer.\")\n\n    if x < 1:\n        return False\n\n    n = 1\n    while True:\n        woodall = n * (2 ** n) - 1\n        if woodall == x:\n            return True\n        if woodall > x:\n            return False\n        n += 1\n\n\n# Example usage:\nprint(is_woodall(1))    # True, because 1 * 2^1 - 1 = 1\nprint(is_woodall(7))    # True, because 2 * 2^2 - 1 = 7\nprint(is_woodall(23))   # True, because 3 * 2^3 - 1 = 23\nprint(is_woodall(10))   # False, 10 is not a Woodall number\nprint(is_woodall(0))    # False, 0 is not a Woodall number\nprint(is_woodall(-5))   # False, negative numbers are not Woodall numbers\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpx28to708.py\", line 38, in <module>\n    assert cc_visit(inspect.getsource(is_woodall))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 21, "requirement": "Code Standard", "completion": "from typing import List\n\ndef multiples_of_num(n: int, m: int) -> List[int]:\n    \"\"\"\n    Find m number of multiples of n.\n\n    Parameters:\n    n (int): The number whose multiples are to be found.\n    m (int): The number of multiples to find.\n\n    Returns:\n    List[int]: A list containing the first m multiples of n.\n\n    Raises:\n    ValueError: If either m or n is negative.\n    \"\"\"\n    if m < 0 or n < 0:\n        raise ValueError(\"Both m and n must be non-negative integers.\")\n    if m == 0:\n        return []\n    return [n * i for i in range(1, m + 1)]\n\n# Example usage:\nn = 5\nm = 10\nresult = multiples_of_num(n, m)\nprint(f\"The first {m} multiples of {n} are: {result}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdbxehasc.py\", line 13, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "requirement": "Code Standard", "completion": "from typing import List, Union\n\n\ndef find_first_duplicate(nums: List[int]) -> Union[int, None]:\n    \"\"\"\n    Find the first duplicate element in a given list of integers.\n\n    Args:\n        nums (List[int]): A list of integers.\n\n    Returns:\n        Union[int, None]: The first duplicate element if found, otherwise -1 for an empty list or None if no duplicates.\n\n    Raises:\n        TypeError: If the input is not a list of integers.\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(nums, list):\n        raise TypeError(\"Input must be a list of integers.\")\n\n    # Check if the list is empty\n    if not nums:\n        return -1\n\n    # Check if all elements in the list are integers\n    if not all(isinstance(num, int) for num in nums):\n        raise TypeError(\"All elements in the list must be integers.\")\n\n    # Use a set to track seen elements\n    seen = set()\n\n    # Iterate through the list\n    for num in nums:\n        # If the number is already in the set, it's a duplicate\n        if num in seen:\n            return num\n        # Otherwise, add it to the set\n        seen.add(num)\n\n    # If no duplicates are found, return None\n    return None\n\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    test_cases = [\n        [3, 5, 2, 5, 3, 7],  # First duplicate: 5\n        [1, 2, 3, 4],        # No duplicates\n        [],                  # Empty list\n        [1, 1, 2, 2],        # First duplicate: 1\n        \"not a list\",        # TypeError\n        [1, 2, \"three\", 4],  # TypeError\n    ]\n\n    for case in test_cases:\n        try:\n            result = find_first_duplicate(case)\n            print(f\"Input: {case}, Result: {result}\")\n        except TypeError as e:\n            print(f\"Input: {case}, Error: {e}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5c55wwq7.py\", line 41, in <module>\n    assert find_first_duplicate([1, 2, 3, 4])==-1\nAssertionError", "passed": false}
{"task_id": 23, "requirement": "Code Standard", "completion": "from typing import List\n\ndef maximum_sum(list_of_lists: List[List[int]]) -> int:\n    \"\"\"\n    Find the maximum sum of elements of any sublist in a list of lists.\n\n    Args:\n        list_of_lists (List[List[int]]): A list of lists containing integers.\n\n    Returns:\n        int: The maximum sum of elements of any sublist.\n\n    Raises:\n        TypeError: If the input is not a list of lists or if any sublist contains non-integer elements.\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(list_of_lists, list):\n        raise TypeError(\"Input must be a list of lists.\")\n\n    # Return 0 if the input list is empty\n    if not list_of_lists:\n        return 0\n\n    max_sum = float('-inf')  # Initialize with negative infinity to handle all possible sums\n\n    for sublist in list_of_lists:\n        # Check if each sublist is a list\n        if not isinstance(sublist, list):\n            raise TypeError(\"Each element in the input must be a list.\")\n\n        # Check if all elements in the sublist are integers\n        if not all(isinstance(element, int) for element in sublist):\n            raise TypeError(\"All elements in the sublists must be integers.\")\n\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    # Return 0 if all sublists are empty\n    return max(max_sum, 0)\n\n# Example usage\nif __name__ == \"__main__\":\n    lists = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [10, -2, 1],\n        [7, 8, 9]\n    ]\n\n    print(maximum_sum(lists))  # Output: 24 (since [7, 8, 9] has the maximum sum)\n", "result": "failed: File \"/tmp/tmphxrgyzmi.py\", line 35\n    try: maximum_sum([[1, 2], [3, 'a']]); assert False, 'Expected TypeError' except TypeError: pass\n                                                                             ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 24, "requirement": "Code Standard", "completion": "def binary_to_decimal(binary: str) -> int:\n    \"\"\"\n    Convert a binary string to its decimal equivalent.\n\n    Args:\n        binary (str): A string representing a binary number (e.g., '1010').\n\n    Returns:\n        int: The decimal equivalent of the binary number.\n\n    Raises:\n        ValueError: If the input is not a valid binary string.\n    \"\"\"\n    if not binary:\n        return 0\n\n    if not all(bit in \"01\" for bit in binary):\n        raise ValueError(\"Invalid binary number\")\n\n    decimal = 0\n    length = len(binary)\n\n    for i, bit in enumerate(binary):\n        decimal += int(bit) * (2 ** (length - i - 1))\n\n    return decimal\n\n\n# Example usage\nif __name__ == \"__main__\":\n    binary_number = \"1010\"\n    try:\n        decimal_number = binary_to_decimal(binary_number)\n        print(f\"The decimal equivalent of binary {binary_number} is {decimal_number}\")\n    except ValueError as e:\n        print(e)\n", "result": "failed: File \"/tmp/tmp4o8f3weh.py\", line 22\n    try: binary_to_decimal('102'); assert False, 'Expected ValueError' except ValueError as e: assert str(e) == 'Invalid binary number'\n                                                                       ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 25, "requirement": "Code Standard", "completion": "from collections import Counter\nfrom typing import List\n\ndef find_product(arr: List[int]) -> int:\n    \"\"\"\n    Calculate the product of non-repeated elements in a given list of integers.\n\n    Args:\n        arr (List[int]): A list of integers.\n\n    Returns:\n        int: The product of non-repeated elements. Returns 1 if the list is empty.\n\n    Raises:\n        TypeError: If the input is not a list of integers.\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list of integers.\")\n\n    # Check if all elements in the list are integers\n    if not all(isinstance(element, int) for element in arr):\n        raise TypeError(\"All elements in the list must be integers.\")\n\n    # Count the occurrences of each element in the array\n    element_counts = Counter(arr)\n\n    # Filter out elements that appear more than once\n    non_repeated_elements = [element for element, count in element_counts.items() if count == 1]\n\n    # Calculate the product of non-repeated elements\n    product = 1\n    for element in non_repeated_elements:\n        product *= element\n\n    return product\n\n\n# Example usage\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 2, 3, 5]\n    result = find_product(arr)\n    print(\"Product of non-repeated elements:\", result)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpp3jyb3cj.py\", line 24, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "requirement": "Code Standard", "completion": "from typing import List, Tuple\n\ndef check_k_elements(test_list: List[Tuple], k: int) -> bool:\n    \"\"\"\n    Check if all tuples in the given list contain exactly k elements.\n\n    Args:\n        test_list: A list of tuples to be checked.\n        k: The expected number of elements in each tuple.\n\n    Returns:\n        bool: True if all tuples have exactly k elements, False otherwise.\n\n    Raises:\n        TypeError: If the input is not a list of tuples or if k is not an integer.\n    \"\"\"\n    # Validate input types\n    if not isinstance(test_list, list) or not all(isinstance(t, tuple) for t in test_list):\n        raise TypeError(\"Input must be a list of tuples.\")\n    if not isinstance(k, int):\n        raise TypeError(\"k must be an integer.\")\n\n    # Handle edge case: empty list\n    if not test_list:\n        return True  # An empty list trivially satisfies the condition\n\n    # Check if all tuples have exactly k elements\n    return all(len(t) == k for t in test_list)\n\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    tuple_list = [(1, 2), (3, 4), (5, 6)]\n    k = 2\n    print(check_k_elements(tuple_list, k))  # Output: True\n\n    tuple_list = [(1, 2, 3), (4, 5), (6, 7)]\n    k = 2\n    print(check_k_elements(tuple_list, k))  # Output: False\n\n    # Edge case: empty list\n    empty_list = []\n    print(check_k_elements(empty_list, k))  # Output: True\n\n    # Invalid input: not a list of tuples\n    try:\n        invalid_list = [(1, 2), [3, 4], (5, 6)]\n        print(check_k_elements(invalid_list, k))\n    except TypeError as e:\n        print(f\"Error: {e}\")  # Output: Error: Input must be a list of tuples.\n\n    # Invalid input: k is not an integer\n    try:\n        invalid_k = \"2\"\n        print(check_k_elements(tuple_list, invalid_k))\n    except TypeError as e:\n        print(f\"Error: {e}\")  # Output: Error: k must be an integer.\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpehgxe0ph.py\", line 37, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "requirement": "Code Standard", "completion": "from typing import List\n\ndef remove(lst: List[str]) -> List[str]:\n    \"\"\"\n    Removes all digits from each string in a list of strings.\n\n    Args:\n        lst (List[str]): A list of strings from which digits need to be removed.\n\n    Returns:\n        List[str]: A list of strings with all digits removed.\n\n    Raises:\n        TypeError: If the input is not a list or if any element in the list is not a string.\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list.\")\n\n    # Check if all elements in the list are strings\n    if not all(isinstance(item, str) for item in lst):\n        raise TypeError(\"All elements in the list must be strings.\")\n\n    # Remove digits from each string in the list\n    return [s.translate(str.maketrans(\"\", \"\", \"0123456789\")) for s in lst]\n\n\n# Example usage\nif __name__ == \"__main__\":\n    input_list = [\"abc123\", \"4def56\", \"ghi789\", \"jkl0\"]\n    output_list = remove(input_list)\n    print(output_list)  # Output: ['abc', 'def', 'ghi', 'jkl']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpc0f6ytvj.py\", line 34, in <module>\n    assert remove.__annotations__ == {'list': list[str], 'return': list[str]}\nAssertionError", "passed": false}
{"task_id": 28, "requirement": "Code Standard", "completion": "from math import comb\n\n\ndef binomial_coeff(n: int, k: int) -> int:\n    \"\"\"\n    Calculate the binomial coefficient C(n, k), which represents the number of ways\n    to choose k elements from a set of n elements without regard to order.\n\n    Parameters:\n        n (int): Total number of elements. Must be a non-negative integer.\n        k (int): Number of elements to choose. Must be a non-negative integer.\n\n    Returns:\n        int: The binomial coefficient C(n, k).\n\n    Raises:\n        ValueError: If either n or k is negative, or if k is greater than n.\n    \"\"\"\n    if n < 0 or k < 0:\n        raise ValueError(\"Inputs must be non-negative and k must not be greater than n.\")\n    if k > n:\n        raise ValueError(\"Inputs must be non-negative and k must not be greater than n.\")\n\n    return comb(n, k)\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    n = 5\n    k = 2\n    try:\n        result = binomial_coeff(n, k)\n        print(f\"C({n}, {k}) = {result}\")\n    except ValueError as e:\n        print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpshsvtxck.py\", line 21, in <module>\n    try: binomial_coeff(-1, 2)\n  File \"/tmp/tmpshsvtxck.py\", line 4, in binomial_coeff\n    raise ValueError(\"Inputs must be non-negative and k must not be greater than n.\")\nValueError: Inputs must be non-negative and k must not be greater than n.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpshsvtxck.py\", line 22, in <module>\n    except ValueError as e: assert str(e) == 'Inputs must be non-negative and k must not be greater than n'\nAssertionError", "passed": false}
{"task_id": 29, "requirement": "Code Standard", "completion": "from typing import List, Optional\n\n\ndef get_odd_occurrence(arr: List[int], arr_size: int) -> Optional[int]:\n    \"\"\"\n    Finds the element that occurs an odd number of times in the given list.\n\n    :param arr: A list of integers.\n    :param arr_size: The size of the list.\n    :return: The element that occurs an odd number of times, or None if the list is empty.\n    :raises TypeError: If the input is not a list of integers.\n    \"\"\"\n    # Check if the input is a list of integers\n    if not isinstance(arr, list) or not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"Input must be a list of integers.\")\n\n    # Handle empty list case\n    if arr_size == 0:\n        return None\n\n    # Initialize a dictionary to store the count of each element\n    count_dict = {}\n\n    # Count the occurrences of each element in the list\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Find the element with an odd count\n    for key, value in count_dict.items():\n        if value % 2 != 0:\n            return key\n\n    # If no element occurs an odd number of times, return None\n    return None\n\n\n# Example usage\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 2, 3, 1, 3]\n    arr_size = len(arr)\n    result = get_odd_occurrence(arr, arr_size)\n    print(f\"The element occurring an odd number of times is: {result}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpts93rnjc.py\", line 45, in <module>\n    assert get_odd_occurrence([]) is None\nTypeError: get_odd_occurrence() missing 1 required positional argument: 'arr_size'", "passed": false}
{"task_id": 30, "requirement": "Code Standard", "completion": "from collections import defaultdict\nfrom typing import Dict\n\n\ndef count_substring_with_equal_ends(s: str) -> int:\n    \"\"\"\n    Counts all substrings in a string that start and end with the same character.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        int: The count of substrings with equal starting and ending characters.\n\n    Raises:\n        TypeError: If the input is not a string.\n    \"\"\"\n    # Check if the input is a string\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string.\")\n\n    # Handle empty string case\n    if not s:\n        return 0\n\n    # Use a dictionary to count the frequency of each character\n    char_count: Dict[str, int] = defaultdict(int)\n\n    # Count the frequency of each character in the string\n    for char in s:\n        char_count[char] += 1\n\n    # Calculate the total number of substrings with equal ends\n    count = 0\n    for char in char_count:\n        k = char_count[char]\n        # Use the formula k * (k + 1) // 2 to calculate substrings for each character\n        count += k * (k + 1) // 2\n\n    return count\n\n\n# Example usage\nif __name__ == \"__main__\":\n    input_string = \"abcab\"\n    result = count_substring_with_equal_ends(input_string)\n    print(f\"Number of substrings with equal ends: {result}\")\n", "result": "failed: File \"/tmp/tmp1nbbr5qd.py\", line 31\n    try: count_substring_with_equal_ends(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                                  ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 31, "requirement": "Code Standard", "completion": "import heapq\nfrom collections import defaultdict\nfrom typing import List\n\n\ndef func(nums: List[List[int]], k: int) -> List[int]:\n    \"\"\"\n    Find the top k integers that occur most frequently from given lists of sorted and distinct integers.\n\n    Args:\n        nums: A list of lists containing sorted and distinct integers.\n        k: The number of top frequent integers to return.\n\n    Returns:\n        A list of the top k most frequent integers in descending order of frequency.\n\n    Raises:\n        ValueError: If k is greater than the number of distinct integers.\n    \"\"\"\n    # Step 1: Count the frequency of each integer across all lists\n    frequency_map = defaultdict(int)\n    for lst in nums:\n        for num in lst:\n            frequency_map[num] += 1\n\n    # Step 2: Check if k is greater than the number of distinct integers\n    distinct_count = len(frequency_map)\n    if k > distinct_count:\n        raise ValueError(\"k cannot be greater than the number of distinct integers\")\n\n    # Step 3: Use a min-heap to keep track of the top k frequent integers\n    min_heap = []\n    for num, freq in frequency_map.items():\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, (freq, num))\n        else:\n            if freq > min_heap[0][0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, (freq, num))\n\n    # Step 4: Extract the top k frequent integers from the heap\n    top_k = [heapq.heappop(min_heap)[1] for _ in range(len(min_heap))]\n\n    # Step 5: Return the result in descending order of frequency\n    return top_k[::-1]\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    lists = [\n        [1, 2, 3],\n        [2, 3, 4],\n        [3, 4, 5],\n        [1, 3, 5]\n    ]\n    k = 2\n    print(func(lists, k))  # Output: [3, 1]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4z33h3v0.py\", line 37, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "requirement": "Code Standard", "completion": "def max_prime_factors(n: int) -> int:\n    \"\"\"\n    Find the largest prime factor of a given positive integer.\n\n    Args:\n        n (int): The input positive integer.\n\n    Returns:\n        int: The largest prime factor of the input number.\n\n    Raises:\n        ValueError: If the input is not a positive integer.\n    \"\"\"\n    # Input validation\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    largest_prime = -1\n\n    # Divide out all factors of 2\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n\n    # Check for odd factors from 3 to sqrt(n)\n    i = 3\n    while i * i <= n:\n        while n % i == 0:\n            largest_prime = i\n            n //= i\n        i += 2\n\n    # If n is still greater than 2, then n itself is prime\n    if n > 2:\n        largest_prime = n\n\n    return largest_prime\n\n\n# Example usage\nif __name__ == \"__main__\":\n    number = 13195\n    print(f\"The largest prime factor of {number} is: {max_prime_factors(number)}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmph8s967rd.py\", line 30, in <module>\n    max_prime_factors(-10)\n  File \"/tmp/tmph8s967rd.py\", line 4, in max_prime_factors\n    raise ValueError(\"Input must be a positive integer.\")\nValueError: Input must be a positive integer.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmph8s967rd.py\", line 32, in <module>\n    assert str(e) == 'Input must be a positive integer'\nAssertionError", "passed": false}
{"task_id": 33, "requirement": "Code Standard", "completion": "def decimal_to_binary(decimal_num: int) -> str:\n    \"\"\"\n    Convert a non-negative integer from decimal to binary representation.\n\n    Args:\n        decimal_num (int): The non-negative integer to convert.\n\n    Returns:\n        str: The binary representation of the input number as a string.\n\n    Raises:\n        ValueError: If the input is not a non-negative integer.\n    \"\"\"\n    if not isinstance(decimal_num, int) or decimal_num < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n\n    if decimal_num == 0:\n        return \"0\"\n\n    binary_num = \"\"\n    while decimal_num > 0:\n        remainder = decimal_num % 2\n        binary_num = str(remainder) + binary_num\n        decimal_num = decimal_num // 2\n\n    return binary_num\n\n\n# Example usage\nif __name__ == \"__main__\":\n    decimal_number = 13\n    binary_number = decimal_to_binary(decimal_number)\n    print(f\"The binary representation of {decimal_number} is {binary_number}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkkij_2uw.py\", line 17, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "requirement": "Code Standard", "completion": "from typing import List\n\n\ndef find_missing(arr: List[int]) -> int:\n    \"\"\"\n    Find the missing number in a sorted array of integers.\n\n    Args:\n        arr (List[int]): A sorted list of integers with one missing number.\n\n    Returns:\n        int: The missing number.\n\n    Raises:\n        ValueError: If the input list is not sorted.\n    \"\"\"\n    # Check if the input list is sorted\n    if arr != sorted(arr):\n        raise ValueError(\"Input list must be sorted.\")\n\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        # If the middle element is not equal to its expected value,\n        # the missing number is on the left side.\n        if arr[mid] != mid + arr[0]:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    # The missing number is the value at the left index + the first element\n    return left + arr[0]\n\n\n# Example usage\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 6, 7, 8]\n    try:\n        missing_number = find_missing(arr)\n        print(f\"The missing number is: {missing_number}\")\n    except ValueError as e:\n        print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqf20yx4q.py\", line 25, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "requirement": "Code Standard", "completion": "def find_rect_num(n: int) -> int:\n    \"\"\"\n    Calculate the n-th rectangular number.\n\n    Parameters:\n    n (int): The position of the rectangular number to find.\n\n    Returns:\n    int: The n-th rectangular number.\n\n    Raises:\n    ValueError: If `n` is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n\n    return n * (n + 1)\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    n = 5\n    result = find_rect_num(n)\n    print(f\"The {n}-th rectangular number is: {result}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpazjvx959.py\", line 21, in <module>\n    assert cc_visit(inspect.getsource(find_rect_num))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 36, "requirement": "Code Standard", "completion": "def find_nth_digit(p: int, q: int, N: int) -> int:\n    \"\"\"\n    Find the Nth digit in the decimal representation of the fraction p/q.\n\n    Args:\n        p (int): The numerator of the fraction.\n        q (int): The denominator of the fraction.\n        N (int): The position of the digit to find (1-based index).\n\n    Returns:\n        int: The Nth digit in the decimal representation of p/q.\n\n    Raises:\n        ValueError: If the denominator q is zero.\n    \"\"\"\n    if q == 0:\n        raise ValueError(\"Denominator cannot be zero\")\n\n    # Calculate the decimal representation of p / q\n    decimal = p / q\n\n    # Convert the decimal part to a string\n    decimal_str = str(decimal).split(\".\")[1]\n\n    # Check if N is within the range of the decimal digits\n    if N > len(decimal_str):\n        raise ValueError(\"N is out of range for the decimal representation\")\n\n    # Return the Nth digit (1-based index)\n    return int(decimal_str[N - 1])\n\n\n# Example usage\nif __name__ == \"__main__\":\n    try:\n        numerator = 1\n        denominator = 7\n        n = 3\n        result = find_nth_digit(numerator, denominator, n)\n        print(f\"The {n}th digit of {numerator}/{denominator} is: {result}\")\n    except ValueError as e:\n        print(e)\n", "result": "passed", "passed": true}
{"task_id": 37, "requirement": "Code Standard", "completion": "from typing import List, Union\n\n\ndef sort_mixed_list(mixed_list: List[Union[int, str]]) -> List[Union[int, str]]:\n    \"\"\"\n    Sorts a mixed list of integers and strings.\n\n    Args:\n        mixed_list (List[Union[int, str]]): A list containing integers and strings.\n\n    Returns:\n        List[Union[int, str]]: A sorted list with integers first, followed by strings.\n\n    Raises:\n        TypeError: If the input is not a list or contains elements that are neither integers nor strings.\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(mixed_list, list):\n        raise TypeError(\"Input must be a list.\")\n\n    # Check if all elements are either integers or strings\n    for item in mixed_list:\n        if not isinstance(item, (int, str)):\n            raise TypeError(\"List elements must be either integers or strings.\")\n\n    # Separate integers and strings\n    integers = [x for x in mixed_list if isinstance(x, int)]\n    strings = [x for x in mixed_list if isinstance(x, str)]\n\n    # Sort integers and strings separately\n    integers.sort()\n    strings.sort()\n\n    # Combine the sorted integers and strings\n    sorted_list = integers + strings\n\n    return sorted_list\n\n\n# Example usage\nif __name__ == \"__main__\":\n    mixed_list = [3, \"apple\", 1, \"banana\", 2, \"cherry\"]\n    sorted_list = sort_mixed_list(mixed_list)\n    print(sorted_list)  # Output: [1, 2, 3, 'apple', 'banana', 'cherry']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppnnzh7up.py\", line 42, in <module>\n    assert sort_mixed_list.__annotations__ == {'mixed_list': list[Union[int, str]], 'return' : list}\nAssertionError", "passed": false}
{"task_id": 38, "requirement": "Code Standard", "completion": "from typing import List, Union\n\n\ndef div_even_odd(list1: List[int]) -> Union[int, float]:\n    \"\"\"\n    Find the division of the first even and odd number in a given list.\n\n    Args:\n        list1 (List[int]): A list of integers.\n\n    Returns:\n        Union[int, float]: The division of the first even number by the first odd number.\n\n    Raises:\n        ValueError: If the list does not contain at least one even and one odd number.\n    \"\"\"\n    first_even = None\n    first_odd = None\n\n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n\n    if first_even is None or first_odd is None:\n        raise ValueError(\"List must contain at least one even and one odd number.\")\n\n    # Handle division by zero if the first odd number is zero\n    if first_odd == 0:\n        return 0 if first_even == 0 else float(\"inf\")\n\n    return first_even / first_odd\n\n\n# Example usage\nif __name__ == \"__main__\":\n    numbers = [1, 3, 5, 7, 8, 10]\n    try:\n        result = div_even_odd(numbers)\n        print(f\"Result: {result}\")  # Output: Result: 8.0\n    except ValueError as e:\n        print(e)\n", "result": "failed: File \"/tmp/tmpqgefhq2d.py\", line 30\n    try: div_even_odd([2, 4, 6]); assert False; except ValueError as e: assert str(e) == 'List must contain at least one even and one odd number.'\n                                                ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 39, "requirement": "Code Standard", "completion": "from collections import Counter\n\n\ndef rearrange_string(s: str) -> str:\n    \"\"\"\n    Rearrange the characters of a given string so that no two adjacent characters are the same.\n\n    Args:\n        s (str): The input string consisting of lowercase letters.\n\n    Returns:\n        str: A rearranged string where no two adjacent characters are the same.\n             If rearrangement is not possible, returns an empty string.\n\n    Raises:\n        ValueError: If the input is not a string or contains characters other than lowercase letters.\n    \"\"\"\n    # Validate input\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string.\")\n    if not s.islower() or not s.isalpha():\n        raise ValueError(\"Input must consist only of lowercase letters.\")\n\n    # Count the frequency of each character\n    char_counts = Counter(s)\n\n    # Find the most frequent character and its count\n    max_char, max_count = char_counts.most_common(1)[0]\n\n    # Check if rearrangement is possible\n    if max_count > (len(s) + 1) // 2:\n        return \"\"  # Rearrangement is not possible\n\n    # Rearrange the string\n    result = [\"\"] * len(s)\n    index = 0\n\n    # Place the most frequent character first\n    for _ in range(max_count):\n        result[index] = max_char\n        index += 2\n\n    # Place the remaining characters\n    for char, count in char_counts.items():\n        if char == max_char:\n            continue\n        for _ in range(count):\n            if index >= len(s):\n                index = 1  # Start filling odd indices\n            result[index] = char\n            index += 2\n\n    return \"\".join(result)\n\n\n# Example usage\nif __name__ == \"__main__\":\n    print(rearrange_string(\"aabb\"))  # Output: \"abab\" or \"baba\"\n    print(rearrange_string(\"aaab\"))  # Output: \"\"\n    print(rearrange_string(\"abc\"))   # Output: \"abc\" or any valid rearrangement\n    print(rearrange_string(\"aaa\"))   # Output: \"\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6cjftdf9.py\", line 38, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "requirement": "Code Standard", "completion": "from collections import Counter\nfrom typing import List, Dict\n\n\ndef freq_element(nums: List[List[int]]) -> Dict[int, int]:\n    \"\"\"\n    Calculate the frequency of elements in a given list of lists.\n\n    Args:\n        nums (List[List[int]]): A list of lists containing integers.\n\n    Returns:\n        Dict[int, int]: A dictionary where keys are elements and values are their frequencies.\n\n    Raises:\n        TypeError: If the input is not a list of lists.\n    \"\"\"\n    # Check if the input is a list of lists\n    if not isinstance(nums, list) or not all(isinstance(sublist, list) for sublist in nums):\n        raise TypeError(\"Input must be a list of lists.\")\n\n    # Return an empty dictionary if the input is an empty list\n    if not nums:\n        return {}\n\n    # Flatten the list of lists into a single list\n    flattened_list = [item for sublist in nums for item in sublist]\n\n    # Use Counter to get the frequency of each element\n    frequency = Counter(flattened_list)\n\n    # Convert Counter to a regular dictionary and return\n    return dict(frequency)\n\n\n# Example usage\nif __name__ == \"__main__\":\n    list_of_lists = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\n    result = freq_element(list_of_lists)\n    print(result)  # Output: {1: 1, 2: 2, 3: 3, 4: 2, 5: 1}\n", "result": "failed: File \"/tmp/tmprpao1uxn.py\", line 24\n    try: freq_element('not a list'); assert False; except TypeError: assert True\n                                                   ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 41, "requirement": "Code Standard", "completion": "from typing import List\n\ndef filter_evennumbers(nums: List[int]) -> List[int]:\n    \"\"\"\n    Filters even numbers from the given list using a lambda function.\n\n    Args:\n        nums (List[int]): A list of integers to filter.\n\n    Returns:\n        List[int]: A list of even integers.\n\n    Raises:\n        TypeError: If the input is not a list of integers.\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(nums, list):\n        raise TypeError(\"Input must be a list of integers.\")\n\n    # Check if all elements in the list are integers\n    if not all(isinstance(num, int) for num in nums):\n        raise TypeError(\"All elements in the list must be integers.\")\n\n    # Return an empty list if the input list is empty\n    if not nums:\n        return []\n\n    # Filter even numbers using a lambda function\n    return list(filter(lambda x: x % 2 == 0, nums))\n\n\n# Example usage\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    even_numbers = filter_evennumbers(numbers)\n    print(even_numbers)  # Output: [2, 4, 6, 8, 10]\n\n    # Test empty list\n    empty_list = []\n    print(filter_evennumbers(empty_list))  # Output: []\n\n    # Test non-list input\n    try:\n        filter_evennumbers(\"not a list\")\n    except TypeError as e:\n        print(e)  # Output: Input must be a list of integers.\n\n    # Test list with non-integer elements\n    try:\n        filter_evennumbers([1, 2, \"three\", 4])\n    except TypeError as e:\n        print(e)  # Output: All elements in the list must be integers.\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpp784hkb0.py\", line 39, in <module>\n    assert filter_evennumbers.__annotations__ == {'nums': list, 'return': list}\nAssertionError", "passed": false}
{"task_id": 42, "requirement": "Code Standard", "completion": "from collections import Counter\nfrom typing import List\n\n\ndef find_sum(arr: List[int]) -> int:\n    \"\"\"\n    Find the sum of repeated elements in a given array.\n\n    Args:\n        arr (List[int]): The input array of integers.\n\n    Returns:\n        int: The sum of repeated elements. Returns 0 if no repeated elements are found.\n\n    Raises:\n        TypeError: If the input is not a list.\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n\n    # Handle empty array\n    if not arr:\n        return 0\n\n    # Count the occurrences of each element in the array\n    element_counts = Counter(arr)\n\n    # Sum the elements that appear more than once\n    sum_repeated = sum(element for element, count in element_counts.items() if count > 1)\n\n    return sum_repeated\n\n\n# Example usage\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 2, 3, 5, 6, 7, 7]\n    result = find_sum(arr)\n    print(\"Sum of repeated elements:\", result)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3d7j3x_b.py\", line 20, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Code Standard", "completion": "import re\nfrom typing import Union\n\n\ndef text_match(text: str) -> str:\n    \"\"\"\n    Find sequences of lowercase letters joined with an underscore using regex.\n\n    Args:\n        text (str): The input string to search for matches.\n\n    Returns:\n        str: 'Found a match!' if a match is found, otherwise 'Not matched!'.\n\n    Raises:\n        TypeError: If the input is not a string.\n    \"\"\"\n    # Check if the input is a string\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string.\")\n\n    # Handle empty string case\n    if not text:\n        return \"Not matched!\"\n\n    # Define the regex pattern to match sequences of lowercase letters joined by an underscore\n    pattern = r\"[a-z]+_[a-z]+\"\n\n    # Search for the pattern in the input text\n    if re.search(pattern, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(text_match(\"hello_world\"))  # Output: Found a match!\n    print(text_match(\"Hello_world\"))  # Output: Not matched!\n    print(text_match(\"helloWorld\"))   # Output: Not matched!\n    print(text_match(\"\"))             # Output: Not matched!\n    try:\n        print(text_match(123))        # Raises TypeError\n    except TypeError as e:\n        print(e)                      # Output: Input must be a string.\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppus74g6w.py\", line 30, in <module>\n    assert text_match(\"Aaab_abbbc\") == 'Not matched!'\nAssertionError", "passed": false}
{"task_id": 44, "requirement": "Code Standard", "completion": "import re\nfrom typing import Optional\n\n\ndef text_match_string(word: str, text: str) -> bool:\n    \"\"\"\n    Check if the given word appears at the beginning of the text.\n\n    Parameters:\n    word (str): The word to search for at the beginning of the text.\n    text (str): The text in which to search for the word.\n\n    Returns:\n    bool: True if the word is found at the beginning of the text, False otherwise.\n\n    Raises:\n    TypeError: If either `word` or `text` is not a string.\n    \"\"\"\n    # Validate input types\n    if not isinstance(word, str) or not isinstance(text, str):\n        raise TypeError(\"Both 'word' and 'text' must be strings.\")\n\n    # Handle edge cases: empty string or string with only spaces\n    if not word.strip():\n        return False  # Empty word or word with only spaces cannot match\n\n    # Create a regular expression pattern that matches the word at the beginning of the string\n    pattern = r'^' + re.escape(word)\n\n    # Search for the pattern in the text\n    match = re.search(pattern, text)\n\n    # Return True if a match is found, otherwise False\n    return bool(match)\n\n\n# Example usage\nif __name__ == \"__main__\":\n    print(text_match_string(\"hello\", \"hello world\"))  # Output: True\n    print(text_match_string(\"hello\", \"world hello\"))  # Output: False\n    print(text_match_string(\"\", \"hello world\"))       # Output: False\n    print(text_match_string(\"hello\", \"\"))             # Output: False\n    print(text_match_string(\"  \", \"   hello world\"))  # Output: False\n", "result": "failed: File \"/tmp/tmpzv24w5q7.py\", line 26\n    try: text_match_string(123); assert False, 'TypeError not raised' except TypeError: pass\n                                                                      ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 45, "requirement": "Code Standard", "completion": "from math import gcd\nfrom functools import reduce\nfrom typing import List\n\n\ndef get_gcd(numbers: List[int]) -> int:\n    \"\"\"\n    Compute the greatest common divisor (GCD) of a list of integers.\n\n    :param numbers: List of integers\n    :return: GCD of the list elements\n    :raises ValueError: If the input list is empty\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    # Use reduce to apply the gcd function across the list\n    return reduce(gcd, numbers)\n\n\n# Example usage\nif __name__ == \"__main__\":\n    array = [24, 36, 48, 60]\n    result = get_gcd(array)\n    print(f\"The GCD of {array} is {result}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpw7n5bft0.py\", line 19, in <module>\n    assert get_gcd.__annotations__ == {'numbers': list, 'return': int}\nAssertionError", "passed": false}
{"task_id": 46, "requirement": "Code Standard", "completion": "from typing import List\n\ndef test_distinct(numbers: List[int]) -> bool:\n    \"\"\"\n    Determine whether all the numbers in the list are distinct.\n\n    Args:\n        numbers (List[int]): A list of integers to check for distinctness.\n\n    Returns:\n        bool: True if all numbers are distinct, False otherwise.\n\n    Raises:\n        TypeError: If the input is not a list or if the list contains non-integer elements.\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n\n    # Check if all elements in the list are integers\n    if not all(isinstance(num, int) for num in numbers):\n        raise TypeError(\"All elements in the list must be integers.\")\n\n    # Use a set to check for duplicates\n    unique_numbers = set(numbers)\n\n    # Compare the length of the set to the length of the original list\n    return len(unique_numbers) == len(numbers)\n\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(test_distinct([1, 2, 3, 4, 5]))  # Output: True\n    print(test_distinct([1, 2, 2, 3, 4]))  # Output: False\n    print(test_distinct([]))  # Output: True (empty list has no duplicates)\n    print(test_distinct([42]))  # Output: True (single element is always distinct)\n\n    # Test invalid inputs\n    try:\n        print(test_distinct(\"not a list\"))  # Raises TypeError\n    except TypeError as e:\n        print(e)  # Output: Input must be a list.\n\n    try:\n        print(test_distinct([1, 2, \"three\", 4]))  # Raises TypeError\n    except TypeError as e:\n        print(e)  # Output: All elements in the list must be integers.\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjrd5kf2s.py\", line 49, in <module>\n    assert test_distinct.__annotations__ == {'numbers': list, 'return': bool}\nAssertionError", "passed": false}
{"task_id": 48, "requirement": "Code Standard", "completion": "def odd_bit_set_number(n: int) -> int:\n    \"\"\"\n    Set all odd bits of a given integer.\n\n    Args:\n        n (int): The input integer.\n\n    Returns:\n        int: The integer with all odd bits set.\n\n    Raises:\n        TypeError: If the input is not an integer.\n    \"\"\"\n    # Input validation\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n\n    # Create a mask with all odd bits set to 1\n    # The mask will be 0xAA...AA in hexadecimal, which is 10101010...1010 in binary\n    # For example, for 8 bits, the mask is 0xAA (10101010)\n    mask = 0\n    bit = 1\n    while bit <= n or bit == 1:  # Ensure at least one bit is set for n = 0\n        mask |= bit\n        bit <<= 2  # Move to the next odd bit\n\n    # Set all odd bits of n by ORing it with the mask\n    result = n | mask\n    return result\n\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(odd_bit_set_number(0))  # Output: 1 (binary: 0b1)\n    print(odd_bit_set_number(10))  # Output: 11 (binary: 0b1011)\n    print(odd_bit_set_number(0b10101010))  # Output: 170 (binary: 0b10101010)\n    print(odd_bit_set_number(0b00000000))  # Output: 85 (binary: 0b1010101)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9nkhv3e8.py\", line 46, in <module>\n    check_code_style(odd_bit_set_number)\n  File \"/tmp/tmp9nkhv3e8.py\", line 42, in check_code_style\n    assert result.total_errors == 0, \"Code does not conform to PEP 8 standards.\"\nAssertionError: Code does not conform to PEP 8 standards.", "passed": false}
{"task_id": 49, "requirement": "Code Standard", "completion": "def specified_element(two_dim_list, index):\n    \"\"\"\n    Extract every first or specified element from a given two-dimensional list.\n\n    Args:\n        two_dim_list (list): A two-dimensional list.\n        index (int): The index of the element to extract from each sublist.\n\n    Returns:\n        list: A list of elements from each sublist at the specified index.\n\n    Raises:\n        IndexError: If the specified index is out of range for any sublist.\n    \"\"\"\n    if not two_dim_list:\n        return []\n\n    result = []\n    for sublist in two_dim_list:\n        if index >= len(sublist) or index < -len(sublist):\n            raise IndexError(\"Index out of range for sublist\")\n        result.append(sublist[index])\n\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpv2u5ypce.py\", line 16, in <module>\n    assert specified_element([[1, 2], [3], [4, 5, 6]], 1) == [2, 5]\n  File \"/tmp/tmpv2u5ypce.py\", line 7, in specified_element\n    raise IndexError(\"Index out of range for sublist\")\nIndexError: Index out of range for sublist", "passed": false}
{"task_id": 51, "requirement": "Code Standard", "completion": "def check_equilateral(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Check if a triangle is equilateral.\n\n    Parameters:\n    a (int): Length of the first side of the triangle.\n    b (int): Length of the second side of the triangle.\n    c (int): Length of the third side of the triangle.\n\n    Returns:\n    bool: True if the triangle is equilateral, False otherwise.\n\n    Raises:\n    ValueError: If any of the inputs are non-positive integers.\n    \"\"\"\n    # Check if all sides are positive integers\n    if not (isinstance(a, int) and isinstance(b, int) and isinstance(c, int)):\n        raise ValueError(\"All sides must be integers.\")\n    if a <= 0 or b <= 0 or c <= 0:\n        raise ValueError(\"All sides must be positive integers.\")\n\n    # Check if all sides are equal\n    return a == b == c\n\n\n# Example usage:\ntry:\n    print(check_equilateral(5, 5, 5))  # Output: True\n    print(check_equilateral(5, 4, 5))  # Output: False\n    print(check_equilateral(-1, 2, 3))  # Raises ValueError\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_ihyk5xa.py\", line 35, in <module>\n    assert cc_visit(inspect.getsource(check_equilateral))[0].complexity ==1\nAssertionError", "passed": false}
{"task_id": 52, "requirement": "Code Standard", "completion": "def parallelogram_area(base: float, height: float) -> float:\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram.\n\n    Raises:\n    TypeError: If the inputs are not numerical.\n    \"\"\"\n    # Check if inputs are numerical\n    if not isinstance(base, (int, float)) or not isinstance(height, (int, float)):\n        raise TypeError(\"Both base and height must be numerical values.\")\n\n    # Handle edge cases where base or height is zero\n    if base == 0 or height == 0:\n        return 0.0\n\n    # Calculate and return the area\n    return base * height\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9mmpmvmk.py\", line 38, in <module>\n    assert cc_visit(inspect.getsource(parallelogram_area))[0].complexity ==1\nAssertionError", "passed": false}
{"task_id": 53, "requirement": "Code Standard", "completion": "def check_equality(s: str) -> str:\n    \"\"\"\n    Check if the first and last characters of a given string are equal.\n\n    Args:\n        s (str): The input string to check.\n\n    Returns:\n        str: 'Equal' if the first and last characters are the same, otherwise 'Not Equal'.\n\n    Raises:\n        TypeError: If the input is not a string.\n    \"\"\"\n    # Check if the input is a string\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n\n    # Handle empty strings by returning 'Equal'\n    if not s:\n        return \"Equal\"\n\n    # Compare the first and last characters\n    if s[0] == s[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpsb1io0ok.py\", line 27, in <module>\n    assert cc_visit(inspect.getsource(check_equality))[0].complexity <=3\nAssertionError", "passed": false}
{"task_id": 54, "requirement": "Code Standard", "completion": "from typing import List\n\ndef counting_sort(arr: List[int]) -> List[int]:\n    \"\"\"\n    Sorts a list of integers using the counting sort algorithm.\n    \n    Args:\n        arr (List[int]): A list of integers to be sorted.\n        \n    Returns:\n        List[int]: The sorted list of integers.\n        \n    Raises:\n        TypeError: If the input is not a list or contains non-integer elements.\n    \"\"\"\n    # Input validation\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements in the list must be integers.\")\n    \n    # Handle edge cases\n    if not arr or len(arr) == 1:\n        return arr\n    \n    # Find the minimum and maximum values in the array\n    min_val = min(arr)\n    max_val = max(arr)\n    \n    # Create a count array to store the count of each unique element\n    count = [0] * (max_val - min_val + 1)\n    \n    # Store the count of each element in the count array\n    for num in arr:\n        count[num - min_val] += 1\n    \n    # Modify the count array to store the cumulative count\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    \n    # Create an output array to store the sorted elements\n    output = [0] * len(arr)\n    \n    # Build the output array by placing elements in their correct position\n    for num in reversed(arr):\n        output[count[num - min_val] - 1] = num\n        count[num - min_val] -= 1\n    \n    return output\n\n\n# Example usage\nif __name__ == \"__main__\":\n    arr = [4, 2, 2, 8, 3, 3, 1]\n    sorted_arr = counting_sort(arr)\n    print(\"Sorted array:\", sorted_arr)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_wzrhias.py\", line 58, in <module>\n    test_annotations()\n  File \"/tmp/tmp_wzrhias.py\", line 57, in test_annotations\n    assert hints == {'arr': list, 'return': list}\nAssertionError", "passed": false}
{"task_id": 55, "requirement": "Code Standard", "completion": "def tn_gp(a: int, r: int, n: int) -> int:\n    \"\"\"\n    Calculate the t-nth term of a geometric series.\n\n    Parameters:\n    a (int): The first term of the geometric series.\n    r (int): The common ratio of the geometric series.\n    n (int): The term number to find.\n\n    Returns:\n    int: The t-nth term of the geometric series.\n\n    Raises:\n    ValueError: If the term number 'n' is less than 1.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Term number must be greater than 0\")\n\n    # Handle edge case where common ratio is zero\n    if r == 0:\n        return 0 if n > 1 else a\n\n    return a * (r ** (n - 1))\n\n\n# Example usage\nif __name__ == \"__main__\":\n    a = 2  # First term\n    r = 3  # Common ratio\n    n = 4  # Term number\n\n    result = tn_gp(a, r, n)\n    print(f\"The {n}-th term of the geometric series is: {result}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp33s5zqzw.py\", line 15, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "requirement": "Code Standard", "completion": "def check(n: int) -> bool:\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is one less than twice its reverse, False otherwise.\n\n    Raises:\n        TypeError: If the input is not an integer.\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n\n    # Reverse the number\n    reversed_n = int(str(n)[::-1])\n\n    # Check if the number is one less than twice its reverse\n    return n == 2 * reversed_n - 1\n\n\n# Example usage\nif __name__ == \"__main__\":\n    number = 21\n    try:\n        if check(number):\n            print(f\"{number} is one less than twice its reverse.\")\n        else:\n            print(f\"{number} is not one less than twice its reverse.\")\n    except TypeError as e:\n        print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpybypookx.py\", line 28, in <module>\n    assert check(1) == False\nAssertionError", "passed": false}
{"task_id": 57, "requirement": "Code Standard", "completion": "from typing import List\n\ndef find_max_num(digits: List[int], n: int) -> int:\n    \"\"\"\n    Find the largest number that can be formed with the given digits.\n\n    Args:\n        digits (List[int]): A list of integers representing the digits.\n        n (int): The number of digits to use to form the largest number.\n\n    Returns:\n        int: The largest number that can be formed with the given digits.\n\n    Raises:\n        ValueError: If the number of digits specified (n) exceeds the length of the list.\n    \"\"\"\n    # Handle edge case: empty list\n    if not digits:\n        return 0\n\n    # Raise ValueError if n exceeds the length of the list\n    if n > len(digits):\n        raise ValueError(\"Number of digits exceeds the length of the list.\")\n\n    # Convert each digit to a string to facilitate sorting\n    str_digits = [str(d) for d in digits]\n\n    # Sort the digits in descending order to form the largest number\n    str_digits.sort(reverse=True)\n\n    # Select the first n digits to form the largest number\n    selected_digits = str_digits[:n]\n\n    # Join the selected digits into a single string and convert it to an integer\n    max_num = int(\"\".join(selected_digits))\n\n    return max_num\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpenznw4eb.py\", line 27, in <module>\n    assert find_max_num.__annotations__ == {'digits': list, 'n': int, 'return': int}\nAssertionError", "passed": false}
{"task_id": 58, "requirement": "Code Standard", "completion": "def opposite_signs(a: int, b: int) -> bool:\n    \"\"\"\n    Check if two integers have opposite signs.\n\n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n\n    Returns:\n    bool: True if the integers have opposite signs, False otherwise.\n\n    Raises:\n    TypeError: If either `a` or `b` is not an integer.\n    \"\"\"\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise TypeError(\"Both inputs must be integers.\")\n\n    return (a < 0) != (b < 0)\n\n\n# Example usage:\nprint(opposite_signs(5, -3))  # Output: True\nprint(opposite_signs(-4, -7))  # Output: False\nprint(opposite_signs(10, 20))  # Output: False\nprint(opposite_signs(0, 0))    # Output: False\nprint(opposite_signs(0, -5))   # Output: True\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpyse4jymv.py\", line 30, in <module>\n    assert opposite_signs(0, 1) == True\nAssertionError", "passed": false}
{"task_id": 59, "requirement": "Code Standard", "completion": "def is_octagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth octagonal number.\n\n    Parameters:\n    n (int): The position of the octagonal number to calculate.\n\n    Returns:\n    int: The nth octagonal number.\n\n    Raises:\n    ValueError: If `n` is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"n must be a positive integer\")\n\n    return n * (3 * n - 2)\n\n\n# Example usage\nif __name__ == \"__main__\":\n    n = 5\n    print(f\"The {n}th octagonal number is: {is_octagonal(n)}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpizrerif9.py\", line 13, in <module>\n    is_octagonal(-1)\n  File \"/tmp/tmpizrerif9.py\", line 3, in is_octagonal\n    raise ValueError(\"n must be a positive integer\")\nValueError: n must be a positive integer\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpizrerif9.py\", line 15, in <module>\n    assert str(e) == 'Input must be a positive integer'\nAssertionError", "passed": false}
{"task_id": 60, "requirement": "Code Standard", "completion": "from typing import List\n\ndef max_len_sub(arr: List[int]) -> int:\n    \"\"\"\n    Find the maximum length of a subsequence where the difference between\n    adjacent elements is either +1 or -1.\n\n    Args:\n        arr (List[int]): The input array of integers.\n\n    Returns:\n        int: The maximum length of such a subsequence.\n\n    Raises:\n        TypeError: If the input is not a list or if the elements are not integers.\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list of integers.\")\n    \n    # Check if the list is empty\n    if not arr:\n        return 0\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(num, int) for num in arr):\n        raise TypeError(\"All elements in the list must be integers.\")\n    \n    # Dictionary to store the length of the longest subsequence ending with a particular value\n    dp = {}\n    max_length = 1  # Initialize the maximum length to 1\n    \n    for num in arr:\n        # Initialize the length of the subsequence ending with num as 1\n        dp[num] = 1\n        \n        # Check if num - 1 exists in the dictionary\n        if num - 1 in dp:\n            dp[num] = max(dp[num], dp[num - 1] + 1)\n        \n        # Check if num + 1 exists in the dictionary\n        if num + 1 in dp:\n            dp[num] = max(dp[num], dp[num + 1] + 1)\n        \n        # Update the maximum length found so far\n        max_length = max(max_length, dp[num])\n    \n    return max_length\n\n\n# Example usage\nif __name__ == \"__main__\":\n    arr1 = [1, 2, 3, 4, 5, 3, 2]\n    print(max_len_sub(arr1))  # Output: 5 (Subsequence: [1, 2, 3, 4, 5])\n    \n    arr2 = [10, 9, 4, 5, 4, 8, 6]\n    print(max_len_sub(arr2))  # Output: 3 (Subsequence: [4, 5, 4] or [9, 8, 6])\n    \n    # Test with invalid input\n    try:\n        max_len_sub(\"not a list\")\n    except TypeError as e:\n        print(e)  # Output: Input must be a list of integers.\n    \n    try:\n        max_len_sub([1, 2, \"not an integer\", 4])\n    except TypeError as e:\n        print(e)  # Output: All elements in the list must be integers.\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjhauuct_.py\", line 42, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}

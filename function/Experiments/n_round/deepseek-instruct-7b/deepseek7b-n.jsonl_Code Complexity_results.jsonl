{"task_id": 11, "requirement": "Code Complexity", "completion": "def remove_occ(s: str, ch: str) -> str:\n    # Check if the second parameter is a single character\n    if len(ch) != 1:\n        raise ValueError('Second parameter must be a single character.')\n\n    # Find the first and last occurrence of the character\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n\n    # If the character is not found, return the original string\n    if first_index == -1 or last_index == -1:\n        return s\n\n    # Remove the first and last occurrence of the character\n    s = s[:first_index] + s[first_index+1:]\n    s = s[:last_index] + s[last_index+1:]\n\n    return s\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpo00cmy72.py\", line 15, in <module>\n    assert remove_occ(\"hello\",\"l\") == \"heo\"\nAssertionError", "passed": false}
{"task_id": 14, "requirement": "Code Complexity", "completion": "def find_volume(base_area: float, height: float, length: float) -> float:\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base_area (float): The base area of the triangular base.\n    height (float): The height of the prism.\n    length (float): The length of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    return (base_area * height) * length\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpr7uk0iyf.py\", line 3, in <module>\n    assert find_volume(10,8,6) == 240\nAssertionError", "passed": false}
{"task_id": 15, "requirement": "Code Complexity", "completion": "def split_lowerstring(text: str) -> list:\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    result = []\n    current_segment = ''\n    for char in text:\n        if char.islower():\n            if current_segment:\n                result.append(current_segment)\n                current_segment = ''\n        current_segment += char\n    \n    if current_segment:\n        result.append(current_segment)\n    \n    return result if any(char.islower() for char in text) else []\n\n# Example usage:\nprint(split_lowerstring(\"HelloWorldThisIsATest\"))  # Output: ['HelloWorld', 'ThisIsATest']\nprint(split_lowerstring(\"HELLO\"))  # Output: []\n", "result": "failed: File \"/tmp/tmp3tnn17i7.py\", line 22\n    try: split_lowerstring(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 16, "requirement": "Code Complexity", "completion": "def text_lowercase_underscore(text: str) -> str:\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    if text == \"\":\n        return \"Not matched!\"\n    for word in text.split():\n        if '_' in word and word.islower():\n            return \"Found a match!\"\n    return \"Not matched!\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5j7q02ga.py\", line 24, in <module>\n    assert cc_visit(inspect.getsource(text_lowercase_underscore))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 17, "requirement": "Code Complexity", "completion": "def square_perimeter(side_length: int) -> int:\n    \"\"\"\n    This function calculates the perimeter of a square.\n\n    :param side_length: length of one side of the square\n    :return: perimeter of the square\n    \"\"\"\n    return 4 * side_length\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpilrf4dzw.py\", line 13, in <module>\n    assert False, 'Expected ValueError for negative input'\nAssertionError: Expected ValueError for negative input", "passed": false}
{"task_id": 20, "requirement": "Code Complexity", "completion": "def is_woodall(x: int) -> bool:\n    if x < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    if x == 0:\n        return True  # 0*2^0 - 1 = 0 is a Woodall number\n    while x > 1:\n        if x % 2 != 0:\n            return False\n        x //= 2\n    return True\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgo1wtlqb.py\", line 11, in <module>\n    assert is_woodall(383) == True\nAssertionError", "passed": false}
{"task_id": 21, "requirement": "Code Complexity", "completion": "from typing import List\n\ndef multiples_of_num(n: int, m: int) -> List[int]:\n    if m < 0 or n < 0:\n        raise ValueError(\"Both m and n must be non-negative\")\n    return [n * i for i in range(1, m + 1)]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpp2la_cik.py\", line 6, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 24, "requirement": "Code Complexity", "completion": "def binary_to_decimal(binary: str) -> int:\n    if not all(bit == '0' or bit == '1' for bit in binary):\n        raise ValueError('Invalid binary number')\n    return int(binary, 2) if binary else 0\n", "result": "failed: File \"/tmp/tmphjgy7gpd.py\", line 8\n    try: binary_to_decimal('102'); assert False, 'Expected ValueError' except ValueError as e: assert str(e) == 'Invalid binary number'\n                                                                       ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 32, "requirement": "Code Complexity", "completion": "def max_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\ndef max_prime_factors(n: int) -> int:\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    return max_prime_factor(n)\n", "result": "passed", "passed": true}
{"task_id": 33, "requirement": "Code Complexity", "completion": "def decimal_to_binary(n: int) -> str:\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    if n == 0:\n        return \"0\"\n    \n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n\n# Test the function\nprint(decimal_to_binary(10))  # Output: 1010\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpv3av591u.py\", line 13, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 35, "requirement": "Code Complexity", "completion": "def find_rect_num(n: int) -> int:\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"Input must be a positive integer\")\n    return n * (n + 1) // 2\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0s98f197.py\", line 5, in <module>\n    assert find_rect_num(4) == 20\nAssertionError", "passed": false}
{"task_id": 36, "requirement": "Code Complexity", "completion": "def find_nth_digit(p: int, q: int, N: int) -> int:\n    # Check if denominator is zero\n    if q == 0:\n        raise ValueError(\"Denominator cannot be zero\")\n\n    # Convert the numbers to strings\n    p_str = str(p)\n    q_str = str(q)\n\n    # Concatenate the two numbers\n    fraction_str = p_str + q_str\n\n    # Check if n is a valid index\n    if N < len(fraction_str):\n        # Return the nth digit\n        return int(fraction_str[N])\n    else:\n        # Return -1 if n is out of range\n        return -1\n\n# Example usage:\ntry:\n    print(find_nth_digit(123, 456, 2))  # Output: 2\n    print(find_nth_digit(123, 456, 10))  # Output: -1\n    print(find_nth_digit(123, 0, 2))  # Raises ValueError: Denominator cannot be zero\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgn7n1q_w.py\", line 24, in <module>\n    assert find_nth_digit(1,2,1) == 5\nAssertionError", "passed": false}
{"task_id": 38, "requirement": "Code Complexity", "completion": "def div_even_odd(list1: list) -> float:\n    even = None\n    odd = None\n    for num in list1:\n        if even is None and num % 2 == 0:\n            even = num\n        if odd is None and num % 2 != 0:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    if even is None or odd is None:\n        raise ValueError('List must contain at least one even and one odd number.')\n    return odd / even if even != 0 else 0\n\n# Example usage:\n# print(div_even_odd([1, 2, 3, 4, 5]))  # Output: 1.5\n# print(div_even_odd([10, 2, 3, 4, 5])) # Output: 0.2\n", "result": "failed: File \"/tmp/tmph3tmzp24.py\", line 21\n    try: div_even_odd([2, 4, 6]); assert False; except ValueError as e: assert str(e) == 'List must contain at least one even and one odd number.'\n                                                ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 40, "requirement": "Code Complexity", "completion": "from collections import Counter\nfrom typing import List, Dict\n\ndef freq_element(nums: List[List[int]]) -> Dict[int, int]:\n    # Check if the input is a list of lists\n    if not all(isinstance(i, list) for i in nums):\n        raise TypeError(\"Input should be a list of lists\")\n    \n    # Flatten the list of lists\n    flat_list = [item for sublist in nums for item in sublist]\n    \n    # Use Counter to get the frequency of each element\n    freq = Counter(flat_list)\n    \n    return freq\n", "result": "failed: File \"/tmp/tmp42_f0t2q.py\", line 15\n    try: freq_element('not a list'); assert False; except TypeError: assert True\n                                                   ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 42, "requirement": "Code Complexity", "completion": "def find_sum(arr: list) -> int:\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Handle an empty array\n    if not arr:\n        return 0\n    \n    # Use a set to keep track of seen elements and a variable to keep track of the sum\n    seen = set()\n    sum_of_repeats = 0\n    \n    for num in arr:\n        if num in seen:\n            sum_of_repeats += num\n        else:\n            seen.add(num)\n    \n    return sum_of_repeats\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkknoz8x8.py\", line 17, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Code Complexity", "completion": "import re\nfrom typing import Optional\n\ndef text_match(text: str) -> str:\n    pattern = '[_][a-z]+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return \"Not matched!\"\n\n# Test the function\nprint(text_match(\"test_string\"))  # Output: _string\nprint(text_match(\"testString\"))   # Output: Not matched!\nprint(text_match(\"\"))              # Output: Not matched!\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpltrz9iyq.py\", line 14, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 45, "requirement": "Code Complexity", "completion": "from typing import List\n\ndef gcd(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef get_gcd(numbers: List[int]) -> int:\n    if not numbers:\n        raise ValueError('Input list cannot be empty.')\n    \n    result = numbers[0]\n    \n    for num in numbers[1:]:\n        result = gcd(result, num)\n    \n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjng160qt.py\", line 18, in <module>\n    assert get_gcd.__annotations__ == {'numbers': list, 'return': int}\nAssertionError", "passed": false}
{"task_id": 47, "requirement": "Code Complexity", "completion": "def compute_last_digit(a: int, b: int) -> int:\n    # Check if a is greater than b\n    if a > b:\n        raise ValueError('a should not be greater than b')\n    \n    # If a equals b, the result is 1\n    if a == b:\n        return 1\n\n    # Calculate the last digit of factorial(b) / factorial(a)\n    # Since the last digit of a factorial is always 0, 1, 2, 6, or 8,\n    # we only need to consider these cases.\n    last_digit = 1\n    for i in range(a + 1, b + 1):\n        last_digit *= i % 10\n        last_digit %= 10\n\n    return last_digit\n\n# Test the function\nprint(compute_last_digit(5, 7))  # Output: 5\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvw92ekyw.py\", line 29, in <module>\n    assert cc_visit(inspect.getsource(compute_last_digit))[0].complexity <=3\nAssertionError", "passed": false}
{"task_id": 51, "requirement": "Code Complexity", "completion": "def check_equilateral(a: int, b: int, c: int) -> bool:\n    # Check for non-positive integers\n    if a <= 0 or b <= 0 or c <= 0:\n        raise ValueError(\"All sides of a triangle must be positive integers.\")\n    # Return the result of the equality check\n    return a == b == c\n\n# Example usage:\ntry:\n    print(check_equilateral(3, 3, 3))  # This should return True\n    print(check_equilateral(3, 4, 5))  # This should return False\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmps5_m3im8.py\", line 32, in <module>\n    assert cc_visit(inspect.getsource(check_equilateral))[0].complexity ==1\nAssertionError", "passed": false}
{"task_id": 52, "requirement": "Code Complexity", "completion": "def parallelogram_area(base: float, height: float) -> float:\n    return base * height\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpoxud6o3w.py\", line 12, in <module>\n    assert False, 'Expected TypeError'\nAssertionError: Expected TypeError", "passed": false}
{"task_id": 53, "requirement": "Code Complexity", "completion": "def check_equality(s: str) -> str:\n    if not isinstance(s, str):\n        raise TypeError('Input must be a string')\n    return 'Equal' if s and s[0] == s[-1] else 'Not Equal'\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0lqfk74t.py\", line 15, in <module>\n    assert check_equality('') == 'Equal'\nAssertionError", "passed": false}
{"task_id": 56, "requirement": "Code Complexity", "completion": "def check(n: int) -> bool:\n    # Check if the input is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n\n    # Convert the number to a string, reverse it, and convert it back to an integer\n    reverse = int(str(n)[::-1])\n\n    # Check if the number is one less than its reverse\n    return n == reverse - 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3jrejidd.py\", line 11, in <module>\n    assert check(73) == True\nAssertionError", "passed": false}
{"task_id": 58, "requirement": "Code Complexity", "completion": "def opposite_signs(a: int, b: int) -> bool:\n    # Check if the signs of a and b are different\n    return a * b < 0\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmph9emjpk0.py\", line 15, in <module>\n    assert False, 'TypeError not raised for float input'\nAssertionError: TypeError not raised for float input", "passed": false}

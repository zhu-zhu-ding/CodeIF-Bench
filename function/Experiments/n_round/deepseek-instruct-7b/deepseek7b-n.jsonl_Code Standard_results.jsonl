{"task_id": 11, "requirement": "Code Standard", "completion": "def remove_occ(s: str, ch: str) -> str:\n    if len(ch) != 1:\n        raise ValueError('Second parameter must be a single character.')\n\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n\n    if first_index != -1 and last_index != -1:\n        s = s[:first_index] + s[first_index + 1:]\n        s = s[:last_index] + s[last_index + 1:]\n\n    return s\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpktgplabn.py\", line 10, in <module>\n    assert remove_occ(\"hello\",\"l\") == \"heo\"\nAssertionError", "passed": false}
{"task_id": 12, "requirement": "Code Standard", "completion": "def sort_matrix(matrix: list[list[int]]) -> list[list[int]]:\n    # Check if the input is a list of lists and if all elements are integers\n    if not all(isinstance(row, list) for row in matrix):\n        raise TypeError(\"The input matrix should be a list of lists.\")\n    if not all(all(isinstance(num, int) for num in row) for row in matrix):\n        raise TypeError(\"All elements in the matrix should be integers.\")\n\n    # Extend the function to handle matrices with rows of varying lengths\n    # by treating missing values as zeros\n    matrix = [list(row) + [0] * (max(len(row) for row in matrix) - len(row)) for row in matrix]\n\n    # Sort the matrix in ascending order according to the sum of its rows\n    sorted_matrix = sorted(matrix, key=sum)\n\n    return sorted_matrix\n\n# Example usage:\nmatrix = [[1, 2, 3], [4, 5], [6, 7, 8, 9]]\nsorted_matrix = sort_matrix(matrix)\nprint(sorted_matrix)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5vgn7jha.py\", line 31, in <module>\n    test_annotations()\n  File \"/tmp/tmp5vgn7jha.py\", line 30, in test_annotations\n    assert hints == {'matrix': 'list[list[int]]', 'return': 'list[list[int]]'}\nAssertionError", "passed": false}
{"task_id": 14, "requirement": "Code Standard", "completion": "def find_volume(base_area: float, height: float, length: float) -> float:\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base_area (float): The base area of the triangular base.\n    height (float): The height of the triangular base.\n    length (float): The length of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    if base_area <= 0 or height <= 0 or length <= 0:\n        raise ValueError('All dimensions must be positive numbers.')\n\n    return base_area * height * length\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpy2pj55_v.py\", line 5, in <module>\n    assert find_volume(10,8,6) == 240\nAssertionError", "passed": false}
{"task_id": 15, "requirement": "Code Standard", "completion": "def split_lowerstring(text: str) -> list:\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n\n    segments = []\n    current_segment = ''\n\n    for char in text:\n        if char.islower():\n            if current_segment:\n                segments.append(current_segment)\n                current_segment = ''\n            segments.append(char)\n        else:\n            current_segment += char\n\n    if current_segment:\n        segments.append(current_segment)\n\n    return segments\n", "result": "failed: File \"/tmp/tmp525a8l13.py\", line 21\n    try: split_lowerstring(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 16, "requirement": "Code Standard", "completion": "import re\n\ndef text_lowercase_underscore(text: str) -> str:\n    \"\"\"\n    Find sequences of lowercase letters joined with an underscore.\n\n    Args:\n        text (str): The input string to search for lowercase sequences.\n\n    Returns:\n        str: 'Found a match!' if a match is found, 'Not matched!' otherwise.\n\n    Raises:\n        TypeError: If the input is not a string.\n    \"\"\"\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n\n    # The regular expression pattern r'\\b[a-z]+\\_[a-z]+\\b' matches sequences of\n    # one or more lowercase letters followed by an underscore, followed by\n    # one or more lowercase letters, where the sequence is a word boundary.\n    pattern = r'\\b[a-z]+\\_[a-z]+\\b'\n    matches = re.findall(pattern, text)\n\n    if matches:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\ntext = \"This is a test_string with some lowercase_letters and an underscore.\"\nprint(text_lowercase_underscore(text))  # Output: Found a match!\n\ntext = \"No lowercase_sequences here.\"\nprint(text_lowercase_underscore(text))  # Output: Not matched!\n\n# Testing TypeError case\ntry:\n    print(text_lowercase_underscore(123))  # Raises TypeError: Input must be a string\nexcept TypeError as e:\n    print(e)\n\n# Testing empty string case\nprint(text_lowercase_underscore(\"\"))  # Output: Not matched!\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpnvzmm10b.py\", line 40, in <module>\n    assert cc_visit(inspect.getsource(text_lowercase_underscore))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 17, "requirement": "Code Standard", "completion": "def square_perimeter(side_length: int) -> int:\n    \"\"\"\n    Calculate the perimeter of a square given the length of one side.\n\n    :param side_length: The length of one side of the square (must be a non-negative integer).\n    :return: The perimeter of the square.\n    :raises ValueError: If the side_length is negative.\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length must be a non-negative integer.\")\n    return 4 * side_length\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpv0fnrzjj.py\", line 23, in <module>\n    assert square_perimeter.__annotations__ == {'a': int, 'return': int}\nAssertionError", "passed": false}
{"task_id": 18, "requirement": "Code Standard", "completion": "def remove_dirty_chars(string_to_clean: str, dirty_chars: str) -> str:\n    if not (isinstance(string_to_clean, str) and isinstance(dirty_chars, str)):\n        raise TypeError(\"Both inputs must be strings.\")\n    \n    if not string_to_clean.isalpha() or not dirty_chars.isalpha():\n        raise ValueError(\"Input strings must only contain alphabetic characters.\")\n    \n    return ''.join(char for char in string_to_clean if char not in dirty_chars)\n\n# Example usage:\ns1 = \"Hello, World!\"\ns2 = \"lowrd\"\nprint(remove_dirty_chars(s1, s2))  # Outputs: \"Helo, He!\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpilnmhjfu.py\", line 10, in <module>\n    print(remove_dirty_chars(s1, s2))  # Outputs: \"Helo, He!\"\n  File \"/tmp/tmpilnmhjfu.py\", line 5, in remove_dirty_chars\n    raise ValueError(\"Input strings must only contain alphabetic characters.\")\nValueError: Input strings must only contain alphabetic characters.", "passed": false}
{"task_id": 19, "requirement": "Code Standard", "completion": "def test_duplicate(arraynums: list) -> bool:\n    if not isinstance(arraynums, list):\n        raise TypeError('Input must be a list of integers')\n    for num in arraynums:\n        if not isinstance(num, int):\n            raise ValueError('Input must be a list of integers')\n    return len(arraynums) != len(set(arraynums))\n", "result": "passed", "passed": true}
{"task_id": 20, "requirement": "Code Standard", "completion": "def is_woodall(x: int) -> bool:\n    \"\"\"\n    Check if the given number is a Woodall number.\n\n    A Woodall number is a positive integer of the form n * 2^n - 1,\n    where n is a non-negative integer.\n\n    :param x: The number to check.\n    :type x: int\n    :return: True if the number is a Woodall number, False otherwise.\n    :rtype: bool\n    \"\"\"\n    if not isinstance(x, int) or x < 0:\n        raise TypeError(\"Input must be a non-negative integer.\")\n\n    i = 0\n    while True:\n        woodall_num = i * 2**i - 1\n        if woodall_num == x:\n            return True\n        if woodall_num > x:\n            return False\n        i += 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpz6yulths.py\", line 29, in <module>\n    assert cc_visit(inspect.getsource(is_woodall))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 21, "requirement": "Code Standard", "completion": "def multiples_of_num(n: int, m: int) -> list:\n    \"\"\"\n    Find the first m multiples of n.\n\n    Args:\n        n (int): The number to find multiples of.\n        m (int): The number of multiples to find.\n\n    Returns:\n        list: A list of the first m multiples of n.\n\n    Raises:\n        ValueError: If n or m is negative.\n    \"\"\"\n    if n < 0 or m < 0:\n        raise ValueError(\"n and m must be non-negative\")\n    \n    return [n * i for i in range(1, m + 1)]\n\n# Example usage:\nprint(multiples_of_num(7, 5))  # Output: [7, 14, 21, 28, 35]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5_9pwya2.py\", line 7, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "requirement": "Code Standard", "completion": "def find_first_duplicate(nums: list) -> int:\n    if not all(isinstance(num, int) for num in nums):\n        raise TypeError(\"All elements in the list must be integers.\")\n    \n    num_dict = {}\n    for num in nums:\n        if num in num_dict:\n            return num\n        num_dict[num] = True\n    \n    return -1\n", "result": "passed", "passed": true}
{"task_id": 23, "requirement": "Code Standard", "completion": "def maximum_sum(list_of_lists: list[list[int]]) -> int:\n    if not all(isinstance(sublist, list) for sublist in list_of_lists):\n        raise TypeError(\"All elements in the input list must be lists.\")\n    if not all(all(isinstance(num, int) for num in sublist) for sublist in list_of_lists):\n        raise TypeError(\"All elements in the sublists must be integers.\")\n    \n    if not list_of_lists or all(not sublist for sublist in list_of_lists):\n        return 0\n    \n    return max(sum(inner_list) for inner_list in list_of_lists)\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]\nprint(maximum_sum(list_of_lists))  # Output: 39\n", "result": "failed: File \"/tmp/tmpdepdej6f.py\", line 16\n    try: maximum_sum([[1, 2], [3, 'a']]); assert False, 'Expected TypeError' except TypeError: pass\n                                                                             ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 24, "requirement": "Code Standard", "completion": "def binary_to_decimal(binary: str) -> int:\n    \"\"\"\n    Convert a binary number to its decimal equivalent.\n\n    :param binary: A string representing a binary number.\n    :return: The decimal equivalent of the binary number.\n    :raises ValueError: If the input is not a valid binary string.\n    \"\"\"\n    if not isinstance(binary, str):\n        raise ValueError('Invalid binary number')\n    \n    binary = binary.strip()\n    \n    if not all(digit in '01' for digit in binary):\n        raise ValueError('Invalid binary number')\n    \n    if not binary:\n        return 0\n    \n    decimal = 0\n    for digit in binary:\n        decimal = decimal * 2 + int(digit)\n    \n    return decimal\n", "result": "failed: File \"/tmp/tmp0mig2q4j.py\", line 16\n    try: binary_to_decimal('102'); assert False, 'Expected ValueError' except ValueError as e: assert str(e) == 'Invalid binary number'\n                                                                       ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 25, "requirement": "Code Standard", "completion": "from typing import List, Union\n\ndef find_product(arr: List[int]) -> Union[int, None]:\n    # Check if the input is a list of integers\n    if not isinstance(arr, list) or not all(isinstance(i, int) for i in arr):\n        raise TypeError(\"Input must be a list of integers\")\n    \n    # Return 1 if the list is empty\n    if not arr:\n        return 1\n\n    # Create a set to store the non-repeated elements\n    non_repeated_elements = set()\n\n    # Create a set to store the repeated elements\n    repeated_elements = set()\n\n    # Iterate over the array to find non-repeated and repeated elements\n    for num in arr:\n        if num in non_repeated_elements:\n            non_repeated_elements.remove(num)\n            repeated_elements.add(num)\n        elif num not in repeated_elements:\n            non_repeated_elements.add(num)\n\n    # Calculate the product of the non-repeated elements\n    product = 1\n    for num in non_repeated_elements:\n        product *= num\n\n    return product\n\n# Example usage:\nprint(find_product([1, 2, 3, 2, 1]))  # Output: 3\nprint(find_product([1, 2, 3, 2, 1, 4, 5, 6, 7, 8, 9, 10]))  # Output: 210\nprint(find_product([]))  # Output: 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0gn2gbl3.py\", line 29, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "requirement": "Code Standard", "completion": "def check_k_elements(test_list: list[tuple], k: int) -> bool:\n    \"\"\"\n    Check if all tuples in the list contain exactly k elements.\n\n    Parameters:\n    test_list (list[tuple]): The list of tuples to check.\n    k (int): The number of elements each tuple should contain.\n\n    Returns:\n    bool: True if all tuples contain exactly k elements, False otherwise.\n\n    Raises:\n    TypeError: If test_list is not a list of tuples or if k is not an integer.\n    \"\"\"\n    if not isinstance(test_list, list) or not all(isinstance(t, tuple) for t in test_list):\n        raise TypeError(\"test_list must be a list of tuples\")\n    if not isinstance(k, int):\n        raise TypeError(\"k must be an integer\")\n\n    return all(len(t) == k for t in test_list)\n\n# Example usage:\ntuple_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nprint(check_k_elements(tuple_list, 3))  # prints: True\n\ntuple_list = [(1, 2, 3), (4, 5), (7, 8, 9)]\nprint(check_k_elements(tuple_list, 3))  # prints: False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4f0rjp7f.py\", line 12, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "requirement": "Code Standard", "completion": "def remove_digits_from_strings(string_list: list[str]) -> list[str]:\n    \"\"\"\n    Remove all digits from a list of strings.\n\n    Args:\n        string_list (list[str]): A list of strings.\n\n    Returns:\n        list[str]: A list of strings with all digits removed.\n\n    Raises:\n        TypeError: If the input is not a list or if any element in the list is not a string.\n    \"\"\"\n    if not isinstance(string_list, list):\n        raise TypeError(\"Input should be a list.\")\n    for element in string_list:\n        if not isinstance(element, str):\n            raise TypeError(\"All elements in the list should be strings.\")\n    return [''.join([char for char in s if not char.isdigit()]) for s in string_list]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp600z6xeb.py\", line 8, in <module>\n    assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\nNameError: name 'remove' is not defined", "passed": false}
{"task_id": 28, "requirement": "Code Standard", "completion": "import math\n\ndef binomial_coeff(n: int, k: int) -> int:\n    \"\"\"\n    Calculate the binomial coefficient \"C(n, k)\".\n    \n    :param n: The total number of items.\n    :param k: The number of items to choose.\n    :return: The binomial coefficient \"C(n, k)\".\n    :raises ValueError: If n or k is negative or if k is greater than n.\n    \"\"\"\n    # Check if n and k are non-negative integers\n    if not isinstance(n, int) or n < 0:\n        raise ValueError('n must be a non-negative integer')\n    if not isinstance(k, int) or k < 0:\n        raise ValueError('k must be a non-negative integer')\n    \n    # Check if k is not greater than n\n    if k > n:\n        raise ValueError('k must not be greater than n')\n    \n    # Calculate binomial coefficient using the formula: C(n, k) = n! / [k!(n-k)!]\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n\n# Example usage:\ntry:\n    result = binomial_coeff(5, 2)\n    print(f\"The binomial coefficient C(5, 2) is: {result}\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpg4qnhck1.py\", line 23, in <module>\n    try: binomial_coeff(-1, 2)\n  File \"/tmp/tmpg4qnhck1.py\", line 5, in binomial_coeff\n    raise ValueError('n must be a non-negative integer')\nValueError: n must be a non-negative integer\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpg4qnhck1.py\", line 24, in <module>\n    except ValueError as e: assert str(e) == 'Inputs must be non-negative and k must not be greater than n'\nAssertionError", "passed": false}
{"task_id": 29, "requirement": "Code Standard", "completion": "def get_odd_occurrence(arr: list) -> int:\n    # Check if the input is a list of integers\n    if not all(isinstance(i, int) for i in arr):\n        raise TypeError(\"The input list should only contain integers.\")\n\n    # Create a dictionary to count occurrences\n    count_dict = {}\n    for num in arr:\n        count_dict[num] = count_dict.get(num, 0) + 1\n\n    # Find the element with an odd count\n    for num, count in count_dict.items():\n        if count % 2 != 0:\n            return num\n\n    # If no element is found, return None\n    return None\n\n# Example usage:\nprint(get_odd_occurrence([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]))  # Output: 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpsa4197ut.py\", line 17, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "requirement": "Code Standard", "completion": "def count_substrings_with_equal_ends(s: str) -> int:\n    \"\"\"\n    Count all the substrings starting and ending with the same characters.\n\n    :param s: The input string.\n    :type s: str\n    :return: The count of substrings starting and ending with the same character.\n    :rtype: int\n    :raises TypeError: If the input is not a string.\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n\n    count = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] == s[j]:\n                count += 1\n\n    return count\n", "result": "failed: File \"/tmp/tmpyelrxqt1.py\", line 14\n    try: count_substring_with_equal_ends(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                                  ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 31, "requirement": "Code Standard", "completion": "import heapq\nfrom typing import List\n\ndef func(nums: List[List[int]], k: int) -> List[int]:\n    # Flatten the list of lists into a single list\n    flat_nums = [num for sublist in nums for num in sublist]\n    \n    # Raise a ValueError if k is greater than the number of distinct integers\n    if k > len(set(flat_nums)):\n        raise ValueError('k cannot be greater than the number of distinct integers')\n    \n    # Create a dictionary to store the frequency of each number\n    freq = {}\n    for num in flat_nums:\n        freq[num] = freq.get(num, 0) + 1\n\n    # Use a heap to find the k most frequent numbers\n    heap = []\n    for num, count in freq.items():\n        if len(heap) < k:\n            heapq.heappush(heap, (count, num))\n        else:\n            if count > heap[0][0]:\n                heapq.heapreplace(heap, (count, num))\n\n    # Return the k most frequent numbers\n    return [num for _, num in heap]\n\n# Example usage:\nnums = [[1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5], [6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9]]\nk = 3\ntry:\n    print(func(nums, k))  # Output: [5, 3, 4]\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1paftsil.py\", line 30, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "requirement": "Code Standard", "completion": "def max_prime_factor(n: int) -> int:\n    \"\"\"\n    Find the largest prime factor of a given number.\n\n    Args:\n        n (int): A positive integer.\n\n    Returns:\n        int: The largest prime factor of the input number.\n\n    Raises:\n        ValueError: If the input is not a positive integer.\n    \"\"\"\n    if n <= 0 or not isinstance(n, int):\n        raise ValueError('Input must be a positive integer')\n\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n\n    return n\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpafrd6m4u.py\", line 11, in <module>\n    assert max_prime_factors(15) == 5\nNameError: name 'max_prime_factors' is not defined", "passed": false}
{"task_id": 33, "requirement": "Code Standard", "completion": "def decimal_to_binary(n: int) -> str:\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    elif n == 0:\n        return \"0\"\n    else:\n        binary = \"\"\n        while n > 0:\n            binary = str(n % 2) + binary\n            n = n // 2\n        return binary\n\n# Test the function\nprint(decimal_to_binary(10))  # Output: 1010\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6_yje9w5.py\", line 14, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "requirement": "Code Standard", "completion": "def find_missing(ar: list, N: int) -> int:\n    \"\"\"\n    Find the missing number in a sorted array.\n\n    Parameters:\n    ar (list): A sorted list of integers.\n    N (int): The total number of elements (length of the array + 1).\n\n    Returns:\n    int: The missing number.\n\n    Raises:\n    ValueError: If the input list is not sorted.\n    \"\"\"\n    if not ar or ar != sorted(ar):\n        raise ValueError('Input list must be sorted.')\n\n    # Check if the first number is missing\n    if ar[0] != 1:\n        return 1\n\n    # Check for missing numbers in the array\n    for i in range(1, len(ar)):\n        if ar[i] - ar[i - 1] > 1:\n            return ar[i] - 1\n\n    # If no missing number found, return the next number after the last one\n    return N\n\n# Example usage:\ntry:\n    print(find_missing([1, 2, 3, 4, 6, 7, 8], 8))  # Output: 5\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 35, "requirement": "Code Standard", "completion": "def find_rect_num(n: int) -> int:\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"Input must be a positive integer\")\n    return n * (n + 1) * (2 * n + 1) // 6\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_4lqfexj.py\", line 5, in <module>\n    assert find_rect_num(4) == 20\nAssertionError", "passed": false}
{"task_id": 36, "requirement": "Code Standard", "completion": "def find_nth_digit(p: int, q: int, N: int) -> int:\n    \"\"\"\n    Find the nth digit in the decimal representation of the fraction p/q.\n\n    Args:\n        p (int): The numerator of the fraction.\n        q (int): The denominator of the fraction.\n        N (int): The position of the digit to find.\n\n    Returns:\n        int: The nth digit of the fraction.\n\n    Raises:\n        ValueError: If the denominator is zero.\n    \"\"\"\n    # Check if denominator is zero\n    if q == 0:\n        raise ValueError(\"Denominator cannot be zero\")\n\n    # Convert the numbers to strings\n    p_str = str(p)\n    q_str = str(q)\n\n    # Concatenate the two numbers\n    fraction_str = p_str + q_str\n\n    # Check if n is a valid index\n    if N < len(fraction_str):\n        # Return the nth digit\n        return int(fraction_str[N])\n    else:\n        # Return None if n is out of range\n        return None\n\n# Example usage:\ntry:\n    print(find_nth_digit(123, 456, 2))  # Output: 2\n    print(find_nth_digit(123, 456, 10))  # Output: None\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpo7azpb2a.py\", line 23, in <module>\n    assert find_nth_digit(1,2,1) == 5\nAssertionError", "passed": false}
{"task_id": 37, "requirement": "Code Standard", "completion": "from typing import List, Union\n\ndef sort_mixed_list(mixed_list: List[Union[int, str]]) -> List[Union[int, str]]:\n    \"\"\"\n    Sort a list of mixed integers and strings.\n\n    Parameters:\n    mixed_list (List[Union[int, str]]): The list to be sorted.\n\n    Returns:\n    List[Union[int, str]]: The sorted list.\n    \"\"\"\n    if not isinstance(mixed_list, list):\n        raise TypeError(\"Input should be a list.\")\n    \n    int_list = sorted([item for item in mixed_list if isinstance(item, int)])\n    str_list = sorted([item for item in mixed_list if isinstance(item, str)])\n    \n    return int_list + str_list\n\n# Test the function\nprint(sort_mixed_list([3, 'a', 1, 'b', 2, 'c', 'd', 4]))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8jyiifux.py\", line 25, in <module>\n    assert False, 'Expected TypeError'\nAssertionError: Expected TypeError", "passed": false}
{"task_id": 38, "requirement": "Code Standard", "completion": "def div_even_odd(list1: list) -> float:\n    \"\"\"\n    Find the division of the first even number by the first odd number in a list.\n\n    Args:\n        list1 (list): A list of integers.\n\n    Returns:\n        float: The division of the first even number by the first odd number.\n\n    Raises:\n        ValueError: If the list does not contain at least one even and one odd number.\n    \"\"\"\n    even = None\n    odd = None\n\n    for number in list1:\n        if number % 2 == 0 and even is None:\n            even = number\n        elif number % 2 != 0 and odd is None:\n            odd = number\n\n        if even is not None and odd is not None:\n            break\n\n    if even is None or odd is None:\n        raise ValueError('List must contain at least one even and one odd number.')\n\n    # Handle the case where the first even number is zero\n    if even == 0:\n        return 0\n\n    return odd / even\n", "result": "failed: File \"/tmp/tmpmbq_h9jb.py\", line 21\n    try: div_even_odd([2, 4, 6]); assert False; except ValueError as e: assert str(e) == 'List must contain at least one even and one odd number.'\n                                                ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 39, "requirement": "Code Standard", "completion": "from collections import Counter\n\ndef rearrange_string(s: str) -> str:\n    \"\"\"\n    Write a function to check if the letters of a given string can be rearranged\n    so that two characters that are adjacent to each other are different.\n    \"\"\"\n    # Check if the input is a string\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string\")\n    \n    # Check if the string contains only lowercase letters\n    if not s.islower() or not s.isalpha():\n        raise ValueError(\"Input string must consist only of lowercase letters\")\n    \n    # Count the frequency of each character\n    freq = Counter(s)\n    \n    # Check if the frequency of each character is even\n    for char, count in freq.items():\n        if count % 2 != 0:\n            # If any character has an odd count, it's impossible to rearrange\n            return \"\"\n    \n    # If all characters have an even count, rearrange the string\n    # The rearranged string will have each character repeated twice\n    rearranged = ''.join([char * (freq[char] // 2) for char in freq])\n    \n    # If the length of the rearranged string is less than the original,\n    # it's impossible to rearrange the string with no adjacent duplicates\n    if len(rearranged) < len(s):\n        return \"\"\n    \n    # If the length is equal to the original, return the rearranged string\n    return rearranged\n\n# Example usage:\ntry:\n    print(rearrange_string(\"aabbcc\"))  # Output: \"aabbcc\"\n    print(rearrange_string(\"abcabc\"))  # Output: \"abcabc\"\n    print(rearrange_string(\"aabbccd\")) # Output: \"\"\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdvtuod44.py\", line 32, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "requirement": "Code Standard", "completion": "from collections import Counter\nfrom typing import List, Dict, Union\n\ndef freq_element(nums: List[List[int]]) -> Dict[int, int]:\n    # Check if the input is a list of lists\n    if not all(isinstance(i, list) for i in nums):\n        raise TypeError(\"Input should be a list of lists\")\n    \n    # Flatten the list of lists\n    flat_list = [item for sublist in nums for item in sublist]\n    \n    # Use Counter to get the frequency of each element\n    freq = Counter(flat_list)\n    \n    # Return the frequency dictionary\n    return freq\n\n# Example usage:\nlst = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\nprint(freq_element(lst))  # Output: Counter({3: 3, 2: 2, 1: 1, 4: 2, 5: 1})\n", "result": "failed: File \"/tmp/tmpj7pgghpw.py\", line 19\n    try: freq_element('not a list'); assert False; except TypeError: assert True\n                                                   ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 41, "requirement": "Code Standard", "completion": "from typing import List\n\ndef filter_even_numbers(nums: List[int]) -> List[int]:\n    \"\"\"\n    Filter even numbers from a list of integers using a lambda function.\n\n    Args:\n        nums (List[int]): A list of integers.\n\n    Returns:\n        List[int]: A list of even integers.\n\n    Raises:\n        TypeError: If the input is not a list of integers.\n    \"\"\"\n    if not all(isinstance(num, int) for num in nums):\n        raise TypeError(\"Input list should only contain integers.\")\n    \n    return list(filter(lambda x: x % 2 == 0, nums))\n\n# Example usage:\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(filter_even_numbers(numbers))  # Output: [2, 4, 6, 8, 10]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpzck33mcj.py\", line 9, in <module>\n    assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\nNameError: name 'filter_evennumbers' is not defined", "passed": false}
{"task_id": 42, "requirement": "Code Standard", "completion": "def find_sum(arr: list) -> int:\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Create a dictionary to keep track of the frequency of each element\n    freq = {}\n    for num in arr:\n        # Check if the element is an integer\n        if not isinstance(num, int):\n            raise TypeError(\"List must contain only integers\")\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Sum up the elements that appear more than once\n    total_sum = 0\n    for num, count in freq.items():\n        if count > 1:\n            total_sum += num * count\n\n    return total_sum\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphlus7f7t.py\", line 21, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Code Standard", "completion": "import re\nfrom typing import Optional\n\ndef text_match(text: str) -> Optional[str]:\n    pattern = r'[_][a-z]+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return \"Not matched!\"\n\n# Test the function\nprint(text_match(\"test_string\"))  # Output: _string\nprint(text_match(\"testString\"))   # Output: Not matched!\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmlncvowe.py\", line 13, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 44, "requirement": "Code Standard", "completion": "def text_match_string(text: str, word: str) -> bool:\n    \"\"\"\n    Check if a string starts with a specific word.\n\n    Args:\n        text (str): The input string to be checked.\n        word (str): The word to check for at the beginning of the string.\n\n    Returns:\n        bool: True if the string starts with the word, False otherwise.\n    \"\"\"\n    if not isinstance(text, str) or not isinstance(word, str):\n        raise TypeError(\"Both 'text' and 'word' must be of type str.\")\n    \n    return text.startswith(word)\n", "result": "failed: File \"/tmp/tmprov3jr4k.py\", line 8\n    try: text_match_string(123); assert False, 'TypeError not raised' except TypeError: pass\n                                                                      ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 45, "requirement": "Code Standard", "completion": "def get_gcd(numbers: list) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of the given list of numbers.\n\n    Args:\n        numbers (list): A list of integers.\n\n    Returns:\n        int: The greatest common divisor of the numbers.\n\n    Raises:\n        ValueError: If the input list is empty.\n    \"\"\"\n    if not numbers:\n        raise ValueError('Input list cannot be empty.')\n\n    def gcd(a: int, b: int) -> int:\n        \"\"\"\n        Calculate the greatest common divisor of two numbers.\n\n        Args:\n            a (int): The first number.\n            b (int): The second number.\n\n        Returns:\n            int: The greatest common divisor of a and b.\n        \"\"\"\n        while b != 0:\n            a, b = b, a % b\n        return a\n\n    result = numbers[0]\n    for num in numbers[1:]:\n        result = gcd(result, num)\n\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphxo94mbo.py\", line 20, in <module>\n    assert cc_visit(inspect.getsource(get_gcd))[0].complexity <=1\nAssertionError", "passed": false}
{"task_id": 46, "requirement": "Code Standard", "completion": "from typing import List\n\ndef test_distinct(numbers: List[int]) -> bool:\n    \"\"\"\n    Check if all numbers in the list are distinct.\n\n    Args:\n        numbers (List[int]): A list of integers.\n\n    Returns:\n        bool: True if all numbers are distinct, False otherwise.\n\n    Raises:\n        TypeError: If the input is not a list or if the list contains non-integer elements.\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(num, int) for num in numbers):\n        raise TypeError(\"List must contain only integers.\")\n    \n    return len(numbers) == len(set(numbers))\n\n# Example usage:\nprint(test_distinct([1, 2, 3, 4, 5]))  # True, all numbers are distinct\nprint(test_distinct([1, 2, 2, 4, 5]))  # False, 2 is repeated\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1sc8veol.py\", line 31, in <module>\n    assert test_distinct.__annotations__ == {'numbers': list, 'return': bool}\nAssertionError", "passed": false}
{"task_id": 48, "requirement": "Code Standard", "completion": "def set_odd_bits(n: int) -> int:\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    \n    # If the input is 0, return 1 as per the edge case requirement\n    if n == 0:\n        return 1\n    \n    # Create a mask with all odd bits set\n    mask = 0b10101010101010101010101010101010\n    \n    # Use the mask to set the odd bits in the input number\n    result = n | mask\n    \n    return result\n\n# Example usage:\nprint(set_odd_bits(10))  # Output: 14\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgfnpkbyw.py\", line 14, in <module>\n    assert odd_bit_set_number(10) == 15\nNameError: name 'odd_bit_set_number' is not defined", "passed": false}
{"task_id": 49, "requirement": "Code Standard", "completion": "def specified_element(two_dimensional_list, index=0):\n    \"\"\"\n    Extract every first or specified element from a given two-dimensional list.\n\n    Args:\n        two_dimensional_list (list): A list of lists.\n        index (int): The index of the element to extract. Default is 0.\n\n    Returns:\n        list: A list of elements from each sublist at the specified index.\n\n    Raises:\n        IndexError: If the specified index is out of range for any sublist.\n    \"\"\"\n    result = []\n    for sublist in two_dimensional_list:\n        if len(sublist) > index:\n            result.append(sublist[index])\n        else:\n            raise IndexError('Index out of range for sublist')\n    return result\n\n# Example usage:\ntry:\n    # Define a two-dimensional list\n    two_dim_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n    # Extract the first element from each row\n    print(specified_element(two_dim_list))  # Output: [1, 4, 7]\n\n    # Extract the third element from each row\n    print(specified_element(two_dim_list, 2))  # Output: [3, 6, 9]\nexcept IndexError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpnomfwwmp.py\", line 25, in <module>\n    assert specified_element([[1, 2], [3], [4, 5, 6]], 1) == [2, 5]\n  File \"/tmp/tmpnomfwwmp.py\", line 7, in specified_element\n    raise IndexError('Index out of range for sublist')\nIndexError: Index out of range for sublist", "passed": false}
{"task_id": 51, "requirement": "Code Standard", "completion": "def check_equilateral(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Check if a triangle is equilateral.\n\n    Parameters:\n    a (int): The length of the first side of the triangle.\n    b (int): The length of the second side of the triangle.\n    c (int): The length of the third side of the triangle.\n\n    Returns:\n    bool: True if the triangle is equilateral, False otherwise.\n    \"\"\"\n    if a <= 0 or b <= 0 or c <= 0:\n        raise ValueError(\"All sides of a triangle must be positive integers.\")\n    \n    if a == b == c:\n        print(\"The triangle is equilateral.\")\n        return True\n    else:\n        print(\"The triangle is not equilateral.\")\n        return False\n\n# Test the function\ncheck_equilateral(3, 3, 3)  # This should print \"The triangle is equilateral.\"\ncheck_equilateral(3, 4, 5)  # This should print \"The triangle is not equilateral.\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgma7pfeu.py\", line 32, in <module>\n    assert cc_visit(inspect.getsource(check_equilateral))[0].complexity ==1\nAssertionError", "passed": false}
{"task_id": 52, "requirement": "Code Standard", "completion": "def parallelogram_area(base: float, height: float) -> float:\n    \"\"\"\n    Calculate the area of a parallelogram given its base and height.\n\n    Args:\n        base (float): The base of the parallelogram.\n        height (float): The height of the parallelogram.\n\n    Returns:\n        float: The area of the parallelogram.\n\n    Raises:\n        TypeError: If the inputs are not numerical.\n    \"\"\"\n    if not (isinstance(base, (int, float)) and isinstance(height, (int, float))):\n        raise TypeError(\"Both base and height must be numerical (int or float).\")\n    \n    return base * height\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp25iynzcl.py\", line 33, in <module>\n    assert cc_visit(inspect.getsource(parallelogram_area))[0].complexity ==1\nAssertionError", "passed": false}
{"task_id": 53, "requirement": "Code Standard", "completion": "def check_equality(s: str) -> str:\n    \"\"\"\n    Check if the first and last characters of a given string are equal.\n\n    :param s: The input string.\n    :type s: str\n    :return: 'Equal' if the first and last characters are the same, 'Not Equal' otherwise.\n    :rtype: str\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError('Input must be a string')\n    \n    return 'Equal' if s and s[0] == s[-1] else 'Not Equal'\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpoaywi5qa.py\", line 15, in <module>\n    assert check_equality('') == 'Equal'\nAssertionError", "passed": false}
{"task_id": 54, "requirement": "Code Standard", "completion": "def counting_sort(arr: list) -> list:\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input should be a list of non-negative integers.\")\n    \n    # Check if the list contains only integers\n    if not all(isinstance(i, int) for i in arr):\n        raise TypeError(\"Input list should contain only non-negative integers.\")\n    \n    # Check if the list contains only non-negative integers\n    if any(i < 0 for i in arr):\n        raise ValueError(\"Input list should contain only non-negative integers.\")\n    \n    # Find the maximum element in the array\n    max_val = max(arr)\n    \n    # Initialize the count array with all zeros\n    count = [0] * (max_val + 1)\n    \n    # Store the count of each element in the count array\n    for num in arr:\n        count[num] += 1\n    \n    # Store the cumulative count\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    \n    # Build the output array\n    output = [0] * len(arr)\n    for num in arr:\n        output[count[num] - 1] = num\n        count[num] -= 1\n    \n    return output\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpbvxr3ppw.py\", line 45, in <module>\n    assert counting_sort([]) == []\n  File \"/tmp/tmpbvxr3ppw.py\", line 12, in counting_sort\n    max_val = max(arr)\nValueError: max() arg is an empty sequence", "passed": false}
{"task_id": 55, "requirement": "Code Standard", "completion": "def tn_gp(a: int, r: int, n: int) -> int:\n    \"\"\"\n    Calculate the nth term of a geometric series.\n\n    Parameters:\n    a (int): The first term of the geometric series.\n    r (int): The common ratio of the geometric series.\n    n (int): The term number to calculate.\n\n    Returns:\n    int: The nth term of the geometric series.\n\n    Raises:\n    ValueError: If the term number (n) is less than 1.\n    \"\"\"\n    if n < 1:\n        raise ValueError('Term number must be greater than 0')\n    \n    # If the common ratio is zero, all terms beyond the first are zero\n    if r == 0:\n        return 0\n    \n    return a * r ** (n - 1)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp548va_a8.py\", line 8, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "requirement": "Code Standard", "completion": "def check(n: int) -> bool:\n    # Check if the input is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    \n    # Convert the number to a string, reverse it, and convert it back to an integer\n    reverse = int(str(n)[::-1])\n\n    # Check if the number is one less than twice its reverse\n    return n == 2 * reverse - 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2h1q0o4q.py\", line 19, in <module>\n    assert check(1) == False\nAssertionError", "passed": false}
{"task_id": 57, "requirement": "Code Standard", "completion": "def find_max_num(digits: list, n: int) -> int:\n    \"\"\"\n    Find the largest number that can be formed with the given digits.\n\n    Args:\n        digits (list): A list of integers representing the digits.\n        n (int): The number of digits to form the number from.\n\n    Returns:\n        int: The largest number that can be formed.\n\n    Raises:\n        ValueError: If the number of digits specified is greater than the length of the list of digits.\n    \"\"\"\n    if n > len(digits):\n        raise ValueError('Number of digits exceeds the length of the list.')\n    \n    if not digits:\n        return 0\n    \n    # Sort the digits in descending order to get the largest number\n    sorted_digits = sorted(digits, reverse=True)\n    \n    # Join the sorted digits to form the number\n    max_num = int(''.join(map(str, sorted_digits)))\n    \n    return max_num\n", "result": "passed", "passed": true}
{"task_id": 58, "requirement": "Code Standard", "completion": "def opposite_signs(a: int, b: int) -> bool:\n    \"\"\"\n    Check if two integers have opposite signs.\n\n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n\n    Returns:\n    bool: True if the integers have opposite signs, False otherwise.\n    \"\"\"\n    return (a > 0) != (b > 0)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmhluuvcq.py\", line 14, in <module>\n    assert False, 'TypeError not raised for float input'\nAssertionError: TypeError not raised for float input", "passed": false}
{"task_id": 59, "requirement": "Code Standard", "completion": "def nth_octagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth octagonal number.\n\n    The nth octagonal number is given by the formula n(4n\u22123)/2.\n\n    :param n: The position of the octagonal number to calculate.\n    :type n: int\n    :return: The nth octagonal number.\n    :rtype: int\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return n * (4 * n - 3) // 2\n\n# Example usage:\ntry:\n    print(nth_octagonal(1))  # Output: 1\n    print(nth_octagonal(2))  # Output: 14\n    print(nth_octagonal(3))  # Output: 35\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpb74ig_v9.py\", line 12, in <module>\n    assert is_octagonal(5) == 65\nNameError: name 'is_octagonal' is not defined", "passed": false}
{"task_id": 60, "requirement": "Code Standard", "completion": "def max_length_subsequence(arr, diff):\n    \"\"\"\n    Find the maximum length of the subsequence with a given difference between adjacent elements.\n\n    :param arr: List of integers.\n    :param diff: Integer representing the difference between adjacent elements.\n    :return: Integer representing the maximum length of the subsequence.\n    :raises TypeError: If the input array is not a list or if the second parameter is not an integer.\n    \"\"\"\n    if not isinstance(arr, list) or not all(isinstance(i, int) for i in arr):\n        raise TypeError(\"The first parameter must be a list of integers.\")\n    if not isinstance(diff, int):\n        raise TypeError(\"The second parameter must be an integer.\")\n\n    if not arr:\n        # Return 0 if the input array is empty\n        return 0\n\n    # Initialize the dynamic programming table\n    dp = [0] * len(arr)\n    max_length = 1\n\n    # Iterate over the array to fill the dynamic programming table\n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] - arr[j] == diff:\n                dp[i] = max(dp[i], dp[j] + 1)\n                max_length = max(max_length, dp[i])\n\n    return max_length\n\n# Example usage:\nprint(max_length_subsequence([1, 2, 3, 4], 1))  # Output: 4\nprint(max_length_subsequence([5, 1, 2, 3, 4], 1))  # Output: 4\nprint(max_length_subsequence([10, 9, 8, 7, 6], -1))  # Output: 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpbffuq_wj.py\", line 23, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nNameError: name 'max_len_sub' is not defined", "passed": false}

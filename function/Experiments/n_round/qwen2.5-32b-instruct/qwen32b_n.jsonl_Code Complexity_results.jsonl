{"task_id": 11, "requirement": "Code Complexity", "completion": "def remove_occ(s: str, ch: str) -> str:\n    \"\"\"\n    Remove the first and last occurrence of the specified character from the string.\n    \n    Parameters:\n    s (str): The input string.\n    ch (str): The character to be removed from the string.\n    \n    Returns:\n    str: The modified string with the first and last occurrence of the specified character removed.\n    \n    Raises:\n    ValueError: If the second parameter is not a single character.\n    \"\"\"\n    if len(ch) != 1:\n        raise ValueError('Second parameter must be a single character.')\n    \n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    \n    if first_occurrence == -1:\n        return s\n    \n    s = s[:first_occurrence] + s[first_occurrence + 1:]\n    \n    if first_occurrence != last_occurrence:\n        s = s[:last_occurrence - 1] + s[last_occurrence:]\n    \n    return s\n\n# Example usage:\nprint(remove_occ(\"hello world\", \"l\"))  # Output: \"heo word\"\nprint(remove_occ(\"banana\", \"a\"))       # Output: \"bnn\"\nprint(remove_occ(\"apple\", \"p\"))        # Output: \"ale\"\nprint(remove_occ(\"test\", \"x\"))         # Output: \"test\" (no 'x' in the string)\n", "result": "passed", "passed": true}
{"task_id": 14, "requirement": "Code Complexity", "completion": "def find_volume(base_area: float, height: float, length: float) -> float:\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    - base_area (float): The area of the triangular base.\n    - height (float): The height of the triangular base.\n    - length (float): The length of the triangular prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n\n    Raises:\n    ValueError: If any of the inputs are non-positive or non-numeric.\n    \"\"\"\n    if not all(isinstance(dimension, (int, float)) and dimension > 0 for dimension in [base_area, height, length]):\n        raise ValueError('All dimensions must be positive numbers.')\n\n    volume = base_area * length\n    return volume\n\n# Example usage:\ntry:\n    volume = find_volume(10.0, 5.0, 3.0)\n    print(f\"The volume of the triangular prism is {volume} cubic units.\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpeckbtqzc.py\", line 12, in <module>\n    assert find_volume(10,8,6) == 240\nAssertionError", "passed": false}
{"task_id": 15, "requirement": "Code Complexity", "completion": "import re\n\ndef split_lowerstring(text: str) -> list:\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Split the string at each lowercase letter using regex\n    # The pattern r'(?=[a-z])' looks for a position right before a lowercase letter\n    segments = re.split(r'(?=[a-z])', text)\n    \n    # Filter out any empty strings from the result\n    segments = [segment for segment in segments if segment]\n    \n    return segments\n\n# Example usage:\nexample_string = \"HelloWorldPython\"\nresult = split_lowerstring(example_string)\nprint(result)  # Output will be ['H', 'ello', 'W', 'orld', 'P', 'ython']\n\n# Test case with no lowercase letters\nno_lowercase_string = \"HELLOWORLD\"\nresult_no_lowercase = split_lowerstring(no_lowercase_string)\nprint(result_no_lowercase)  # Output will be ['HELLOWORLD']\n\n# Test case with invalid input\ntry:\n    invalid_input = 12345\n    result_invalid = split_lowerstring(invalid_input)\nexcept TypeError as e:\n    print(e)  # Output will be \"Input must be a string\"\n", "result": "failed: File \"/tmp/tmp977m3vui.py\", line 29\n    try: split_lowerstring(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 16, "requirement": "Code Complexity", "completion": "import re\n\ndef text_lowercase_underscore(text: str) -> str:\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    if not text:\n        return 'Not matched!'\n    \n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\nexample_text = \"This is a_test_string with some_lowercase_sequences and_more_examples.\"\nresult = text_lowercase_underscore(example_text)\nprint(result)  # Output should be 'Found a match!'\n\nempty_text = \"\"\nresult_empty = text_lowercase_underscore(empty_text)\nprint(result_empty)  # Output should be 'Not matched!'\n\nnon_string_input = 123\ntry:\n    result_non_string = text_lowercase_underscore(non_string_input)\nexcept TypeError as e:\n    print(e)  # Output should be 'Input must be a string'\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7lf9quk0.py\", line 38, in <module>\n    assert cc_visit(inspect.getsource(text_lowercase_underscore))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 17, "requirement": "Code Complexity", "completion": "def square_perimeter(a: int) -> int:\n    \"\"\"\n    Calculate the perimeter of a square given the side length.\n    \n    Parameters:\n    a (int): The length of one side of the square, must be a non-negative integer.\n    \n    Returns:\n    int: The perimeter of the square.\n    \n    Raises:\n    ValueError: If the input is a negative integer.\n    \"\"\"\n    assert a >= 0, \"Side length cannot be negative.\"\n    return 4 * a\n\n# Example usage:\nside_length = 5\nprint(f\"The perimeter of a square with side length {side_length} is {square_perimeter(side_length)}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpx6x1x5c8.py\", line 13, in <module>\n    square_perimeter(-5)\n  File \"/tmp/tmpx6x1x5c8.py\", line 2, in square_perimeter\n    assert a >= 0, \"Side length cannot be negative.\"\nAssertionError: Side length cannot be negative.", "passed": false}
{"task_id": 20, "requirement": "Code Complexity", "completion": "import math\n\ndef is_woodall(x: int) -> bool:\n    \"\"\"\n    Check if the given number is a Woodall number.\n    \n    A Woodall number is defined as n * 2^n - 1 for some integer n.\n    \n    Parameters:\n    x (int): The number to check.\n    \n    Returns:\n    bool: True if the number is a Woodall number, False otherwise.\n    \n    Raises:\n    TypeError: If the input is not an integer.\n    \"\"\"\n    if not isinstance(x, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    # Calculate x + 1\n    target = x + 1\n    \n    # Iterate over possible values of n\n    for n in range(1, int(math.log2(target)) + 1):\n        if n * 2**n == target:\n            return True\n    \n    return False\n\n# Example usage:\nprint(is_woodall(7))   # False, because 7 is not a Woodall number\nprint(is_woodall(23))  # True, because 3*2^3 - 1 = 23\nprint(is_woodall(24))  # False, because 24 is not a Woodall number\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1_ehg93l.py\", line 33, in <module>\n    assert cc_visit(inspect.getsource(is_woodall))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 21, "requirement": "Code Complexity", "completion": "def multiples_of_num(n: int, m: int) -> list:\n    \"\"\"\n    Generates a list of m multiples of n.\n    \n    Parameters:\n    n (int): The base number to find multiples of.\n    m (int): The number of multiples to generate.\n    \n    Returns:\n    list: A list of m multiples of n.\n    \n    Raises:\n    ValueError: If either m or n is negative.\n    \"\"\"\n    assert m >= 0, \"m must be non-negative\"\n    assert n >= 0, \"n must be non-negative\"\n    \n    return [n * i for i in range(1, m + 1)]\n\n# Example usage:\nprint(multiples_of_num(5, 4))  # Output: [5, 10, 15, 20]\n\n# Edge case examples\nprint(multiples_of_num(7, 0))  # Output: []\ntry:\n    print(multiples_of_num(-1, 3))\nexcept AssertionError as e:\n    print(e)  # Output: n must be non-negative\n\ntry:\n    print(multiples_of_num(5, -1))\nexcept AssertionError as e:\n    print(e)  # Output: m must be non-negative\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmptumuxg23.py\", line 17, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 24, "requirement": "Code Complexity", "completion": "def binary_to_decimal(binary: str) -> int:\n    \"\"\"\n    Convert a binary number (given as a string) to its decimal equivalent.\n    \n    Parameters:\n    - binary (str): A string representing a binary number.\n    \n    Returns:\n    - int: The decimal equivalent of the binary number.\n    \n    Raises:\n    - ValueError: If the input is not a valid binary string.\n    \n    Examples:\n    >>> binary_to_decimal('1011')\n    11\n    >>> binary_to_decimal('')\n    0\n    >>> binary_to_decimal('102')\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid binary number\n    \"\"\"\n    try:\n        # Handle empty string case\n        if binary == '':\n            return 0\n        \n        # Convert binary to decimal\n        return int(binary, 2)\n    except ValueError:\n        raise ValueError(\"Invalid binary number\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    binary_number = \"1011\"\n    decimal_number = binary_to_decimal(binary_number)\n    print(f\"The decimal equivalent of binary {binary_number} is {decimal_number}\")\n    \n    # Test with invalid binary string\n    try:\n        invalid_binary_number = \"102\"\n        binary_to_decimal(invalid_binary_number)\n    except ValueError as e:\n        print(e)\n", "result": "failed: File \"/tmp/tmpwlc0m1pq.py\", line 24\n    try: binary_to_decimal('102'); assert False, 'Expected ValueError' except ValueError as e: assert str(e) == 'Invalid binary number'\n                                                                       ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 32, "requirement": "Code Complexity", "completion": "def max_prime_factors(n: int) -> int:\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError('Input must be a positive integer')\n    \n    def is_prime(num: int) -> bool:\n        if num <= 1:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        for i in range(3, int(num**0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n\n    largest_prime = -1\n    candidate = 2\n    while n > 1:\n        if n % candidate == 0 and is_prime(candidate):\n            largest_prime = candidate\n            while n % candidate == 0:\n                n //= candidate\n        candidate += 1 if candidate == 2 else 2  # Increment by 1 if candidate is 2, otherwise by 2\n    \n    return largest_prime\n\n# Example usage:\nprint(max_prime_factors(13195))  # Output should be 29\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwush542a.py\", line 42, in <module>\n    assert cc_visit(inspect.getsource(max_prime_factors))[0].complexity <= 5\nAssertionError", "passed": false}
{"task_id": 33, "requirement": "Code Complexity", "completion": "def decimal_to_binary(N: int) -> str:\n    if not isinstance(N, int) or N < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    return bin(N)[2:]\n\n# Example usage:\nprint(decimal_to_binary(10))  # Output: \"1010\"\nprint(decimal_to_binary(255)) # Output: \"11111111\"\nprint(decimal_to_binary(0))   # Output: \"0\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphndzbuho.py\", line 9, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 35, "requirement": "Code Complexity", "completion": "def find_rect_num(n: int) -> int:\n    \"\"\"\n    Finds the n-th rectangular number.\n\n    Parameters:\n    n (int): The position of the rectangular number in the sequence.\n\n    Returns:\n    int: The n-th rectangular number.\n\n    Raises:\n    ValueError: If the input is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    return n * (n + 1)\n\n# Example usage:\nprint(find_rect_num(5))  # Output will be 30 because 5 * 6 = 30\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvpi5mocu.py\", line 18, in <module>\n    assert cc_visit(inspect.getsource(find_rect_num))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 36, "requirement": "Code Complexity", "completion": "def find_nth_digit(p: int, q: int, N: int) -> int:\n    \"\"\"\n    Finds the nth digit after the decimal point in the result of p / q.\n\n    :param p: The numerator of the fraction.\n    :param q: The denominator of the fraction.\n    :param N: The position of the digit after the decimal point to retrieve.\n    :return: The nth digit after the decimal point as an integer.\n    :raises ValueError: If the denominator is zero.\n    \"\"\"\n    if q == 0:\n        raise ValueError('Denominator cannot be zero')\n\n    # Calculate the result of the division with high precision\n    result = str(p / q)\n\n    # Split the result into integer and fractional parts\n    integer_part, fractional_part = result.split('.')\n\n    # Check if the requested digit is within the fractional part\n    if N <= len(fractional_part):\n        return int(fractional_part[N - 1])\n    else:\n        return 0  # Return 0 if N is beyond the length of the fractional part\n\n# Example usage:\nprint(find_nth_digit(1, 3, 2))  # Should print 3 (for 0.333...)\nprint(find_nth_digit(1, 7, 5))  # Should print 8 (for 0.142857...)\nprint(find_nth_digit(1, 2, 2))  # Should print 0 (for 0.5)\n", "result": "passed", "passed": true}
{"task_id": 38, "requirement": "Code Complexity", "completion": "from typing import List, Union\n\ndef div_even_odd(numbers: List[int]) -> Union[float, int]:\n    first_even = None\n    first_odd = None\n    \n    for num in numbers:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        if num % 2 != 0 and first_odd is None:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is None or first_odd is None:\n        raise ValueError('List must contain at least one even and one odd number.')\n    \n    if first_even == 0:\n        return 0\n    \n    return first_even / first_odd\n\n# Example usage:\nnumbers_list = [7, 3, 4, 8, 9]\nprint(div_even_odd(numbers_list))  # Output: 1.3333333333333333\n", "result": "failed: File \"/tmp/tmpws6zzzwd.py\", line 24\n    try: div_even_odd([2, 4, 6]); assert False; except ValueError as e: assert str(e) == 'List must contain at least one even and one odd number.'\n                                                ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 40, "requirement": "Code Complexity", "completion": "from collections import Counter\nfrom typing import List, Dict\n\ndef freq_element(nums: List[List[int]]) -> Dict[int, int]:\n    # Check if the input is a list of lists\n    if not all(isinstance(sublist, list) for sublist in nums):\n        raise TypeError(\"Input must be a list of lists\")\n    \n    # Flatten the list of lists into a single list\n    flattened_list = [item for sublist in nums for item in sublist]\n    \n    # Use Counter to count the frequency of each element\n    freq_counter = Counter(flattened_list)\n    \n    return dict(freq_counter)\n\n# Example usage:\nlist_of_lists = [[1, 2], [3, 2, 1], [4, 1]]\nresult = freq_element(list_of_lists)\nprint(result)  # Output will be a dictionary with frequencies of each element\n", "result": "failed: File \"/tmp/tmprbnay0_v.py\", line 19\n    try: freq_element('not a list'); assert False; except TypeError: assert True\n                                                   ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 42, "requirement": "Code Complexity", "completion": "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    if len(arr) == 0:\n        return 0\n    \n    element_count = {}\n    repeated_sum = 0\n    \n    for element in arr:\n        if element in element_count:\n            element_count[element] += 1\n            if element_count[element] == 2:\n                repeated_sum += element\n        else:\n            element_count[element] = 1\n    \n    return repeated_sum\n\n# Example usage:\narr = [1, 2, 3, 2, 4, 5, 5]\nprint(find_sum(arr))  # Output should be 7 because 2 + 5 = 7\n\narr = [1, 2, 3]\nprint(find_sum(arr))  # Output should be 0 because there are no repeated elements\n\ntry:\n    print(find_sum(\"not a list\"))\nexcept TypeError as e:\n    print(e)  # Output should be \"Input must be a list\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpe9indeit.py\", line 26, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Code Complexity", "completion": "import re\n\ndef text_match(text: str) -> str:\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    if text == \"\":\n        return \"Not matched!\"\n    \n    # Regular expression pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r\"^[a-z]+_[a-z]+$\"\n    \n    # Check if the pattern matches the entire string\n    if re.fullmatch(pattern, text):\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"\n\n# Example usage:\nprint(text_match(\"abc_def\"))  # Should return \"Matched!\"\nprint(text_match(\"Abc_def\"))  # Should return \"Not matched!\"\nprint(text_match(\"abc_def_ghi\"))  # Should return \"Not matched!\"\nprint(text_match(\"abc\"))       # Should return \"Not matched!\"\nprint(text_match(\"\"))          # Should return \"Not matched!\"\ntry:\n    print(text_match(123))     # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpyc2d7w4h.py\", line 24, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 45, "requirement": "Code Complexity", "completion": "from functools import reduce\nimport math\n\ndef get_gcd(numbers: list) -> int:\n    if not numbers:\n        raise ValueError(\"Input list cannot be empty.\")\n    \n    return reduce(lambda x, y: math.gcd(x, y), numbers)\n\n# Example usage:\nnumbers = [24, 108, 90]\nprint(get_gcd(numbers))  # Output will be 6\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpoky6cjze.py\", line 18, in <module>\n    assert cc_visit(inspect.getsource(get_gcd))[0].complexity <=1\nAssertionError", "passed": false}
{"task_id": 47, "requirement": "Code Complexity", "completion": "def compute_last_digit(a: int, b: int) -> int:\n    \"\"\"\n    Compute the last digit of b! / a!.\n\n    Parameters:\n    a (int): The lower integer for the factorial division.\n    b (int): The higher integer for the factorial division.\n\n    Returns:\n    int: The last digit of the result of b! / a!.\n    \n    Raises:\n    ValueError: If a is greater than b.\n    \"\"\"\n    if a > b:\n        raise ValueError('a should not be greater than b')\n\n    last_digit = 1\n    for i in range(a + 1, b + 1):\n        last_digit = (last_digit * (i % 10)) % 10\n        if last_digit == 0:\n            break\n\n    return last_digit\n\n# Example usage:\nprint(compute_last_digit(3, 5))  # Output should be 0, because 5! / 3! = 20, and the last digit is 0\nprint(compute_last_digit(4, 7))  # Output should be 0, because 7! / 4! = 5*6*7 = 210, and the last digit is 0\nprint(compute_last_digit(5, 5))  # Output should be 1, because 5! / 5! = 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphak3s59y.py\", line 25, in <module>\n    assert cc_visit(inspect.getsource(compute_last_digit))[0].complexity <=3\nAssertionError", "passed": false}
{"task_id": 51, "requirement": "Code Complexity", "completion": "def check_equilateral(a: int, b: int, c: int) -> bool:\n    # Ensure all inputs are positive integers\n    if a <= 0 or b <= 0 or c <= 0:\n        raise ValueError(\"All side lengths must be positive integers.\")\n    \n    # Return True if all sides are equal, False otherwise\n    return a == b == c\n\n# Example usage:\n# result = check_equilateral(5, 5, 5)\n# print(\"The triangle is equilateral.\" if result else \"The triangle is not equilateral.\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpuq0we4ob.py\", line 29, in <module>\n    assert cc_visit(inspect.getsource(check_equilateral))[0].complexity ==1\nAssertionError", "passed": false}
{"task_id": 52, "requirement": "Code Complexity", "completion": "def parallelogram_area(base: float, height: float) -> float:\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram, which is the perpendicular distance from the base to the opposite side.\n\n    Returns:\n    float: The area of the parallelogram.\n\n    Raises:\n    TypeError: If either base or height is not a numerical value.\n    \"\"\"\n    try:\n        # Perform the calculation assuming inputs are valid\n        area = base * height\n        return area\n    except TypeError:\n        # Raise a TypeError if any input is not numerical\n        raise TypeError(\"Both base and height must be numerical values.\")\n\n# Example usage:\n# area = parallelogram_area(5.0, 3.0)\n# print(f\"The area of the parallelogram is {area}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1z90o8ie.py\", line 21, in <module>\n    assert False, 'Expected TypeError'\nAssertionError: Expected TypeError", "passed": false}
{"task_id": 53, "requirement": "Code Complexity", "completion": "def check_equality(s: str) -> str:\n    if not isinstance(s, str):\n        raise TypeError('Input must be a string')\n    \n    # Handling the empty string case\n    equality_check = s[0] == s[-1] if s else True\n    \n    return 'Equal' if equality_check else 'Not Equal'\n\n# Example usage:\nprint(check_equality(\"radar\"))  # Output: 'Equal'\nprint(check_equality(\"python\")) # Output: 'Not Equal'\nprint(check_equality(\"\"))       # Output: 'Equal'\nprint(check_equality(\"a\"))      # Output: 'Equal'\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3mdkomki.py\", line 26, in <module>\n    assert cc_visit(inspect.getsource(check_equality))[0].complexity <=3\nAssertionError", "passed": false}
{"task_id": 56, "requirement": "Code Complexity", "completion": "def check(n: int) -> bool:\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n\n    # Handle negative numbers by converting them to positive\n    n = abs(n)\n\n    # Reverse the number\n    reversed_n = int(str(n)[::-1])\n\n    # Calculate twice the reversed number\n    twice_reversed = 2 * reversed_n\n\n    # Check if the original number is one less than twice the reversed number\n    return n == twice_reversed - 1\n\n# Example usage:\nprint(check(7))   # Output: False\nprint(check(35))  # Output: False\nprint(check(-73)) # Output: False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmptpljdv43.py\", line 26, in <module>\n    assert check(1) == False\nAssertionError", "passed": false}
{"task_id": 58, "requirement": "Code Complexity", "completion": "def opposite_signs(a: int, b: int) -> bool:\n    \"\"\"\n    Check if the two integers a and b have opposite signs.\n\n    Parameters:\n    a (int): First integer.\n    b (int): Second integer.\n\n    Returns:\n    bool: True if a and b have opposite signs, False otherwise.\n\n    Raises:\n    TypeError: If either a or b is not an integer.\n    \"\"\"\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise TypeError(\"Both inputs must be integers\")\n\n    return (a * b) < 0\n\n# Example usage:\nprint(opposite_signs(10, -20))  # Output: True\nprint(opposite_signs(-5, -10))  # Output: False\nprint(opposite_signs(0, 10))    # Output: False\ntry:\n    print(opposite_signs(10, \"20\"))\nexcept TypeError as e:\n    print(e)  # Output: Both inputs must be integers\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphp008u8l.py\", line 31, in <module>\n    assert opposite_signs(0, -1) == True\nAssertionError", "passed": false}

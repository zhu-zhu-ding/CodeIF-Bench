{"task_id": 11, "requirement": "Code Standard", "completion": "def remove_occ(s: str, ch: str) -> str:\n    \"\"\"\n    Remove the first and last occurrence of the specified character from the string.\n\n    Parameters:\n    s (str): The input string.\n    ch (str): The character to be removed from the string.\n\n    Returns:\n    str: The modified string with the first and last occurrence of the specified character removed.\n\n    Raises:\n    ValueError: If the second parameter is not a single character.\n    \"\"\"\n    if len(ch) != 1:\n        raise ValueError('Second parameter must be a single character.')\n\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n\n    # If the character does not exist in the string, return the original string\n    if first_occurrence == -1:\n        return s\n\n    # Construct the new string without the first and last occurrence of the character\n    part1 = s[:first_occurrence] + s[first_occurrence + 1:last_occurrence]\n    part2 = s[last_occurrence + 1:]\n\n    return part1 + part2\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(remove_occ(\"hello world\", \"l\"))  # Output: \"heo word\"\n    print(remove_occ(\"banana\", \"a\"))       # Output: \"bnn\"\n    print(remove_occ(\"apple\", \"p\"))        # Output: \"ale\"\n    print(remove_occ(\"test\", \"x\"))         # Output: \"test\" (no 'x' in the string)\n    try:\n        print(remove_occ(\"test\", \"xy\"))\n    except ValueError as e:\n        print(e)  # Output: Second parameter must be a single character.\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3c4lepq8.py\", line 48, in <module>\n    check_code_style(remove_occ)\n  File \"/tmp/tmp3c4lepq8.py\", line 44, in check_code_style\n    assert result.total_errors == 0, \"Code does not conform to PEP 8 standards.\"\nAssertionError: Code does not conform to PEP 8 standards.", "passed": false}
{"task_id": 12, "requirement": "Code Standard", "completion": "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n    \n    :param matrix: A 2D list representing the matrix.\n    :return: A new matrix sorted in ascending order based on the sum of each row.\n    \n    Raises:\n        TypeError: If the input is not a list of lists or contains non-integer elements.\n    \"\"\"\n    # Check if the input is a list of lists\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise TypeError(\"Input must be a list of lists\")\n    \n    # Check if all elements in the matrix are integers\n    if not all(isinstance(item, int) for row in matrix for item in row):\n        raise TypeError(\"All elements in the matrix must be integers\")\n    \n    # Handle empty matrix\n    if not matrix:\n        return matrix\n    \n    # Extend rows to have equal length, filling missing values with zeros\n    max_length = max(len(row) for row in matrix)\n    extended_matrix = [row + [0] * (max_length - len(row)) for row in matrix]\n    \n    # Sort the matrix based on the sum of each row\n    sorted_matrix = sorted(extended_matrix, key=sum)\n    \n    return sorted_matrix\n\n# Example usage:\nif __name__ == \"__main__\":\n    matrix = [\n        [3, 4, 7],\n        [1, 2, 3],\n        [8, 0, 2]\n    ]\n    print(\"Original Matrix:\")\n    for row in matrix:\n        print(row)\n    \n    sorted_matrix = sort_matrix(matrix)\n    print(\"\\nSorted Matrix:\")\n    for row in sorted_matrix:\n        print(row)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwpvj8j95.py\", line 46, in <module>\n    test_annotations()\n  File \"/tmp/tmpwpvj8j95.py\", line 45, in test_annotations\n    assert hints == {'matrix': 'list[list[int]]', 'return': 'list[list[int]]'}\nAssertionError", "passed": false}
{"task_id": 14, "requirement": "Code Standard", "completion": "def find_volume(base_area: float, height: float, length: float) -> float:\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    - base_area (float): The area of the triangular base.\n    - height (float): The height of the triangular base (not used for volume calculation, kept for consistency).\n    - length (float): The length of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n\n    Raises:\n    ValueError: If any of the dimensions are non-positive or non-numeric.\n    \"\"\"\n    # Check if all inputs are positive numbers\n    if not all(isinstance(x, (int, float)) and x > 0 for x in [base_area, height, length]):\n        raise ValueError('All dimensions must be positive numbers.')\n\n    # Calculate the volume of the prism\n    volume = base_area * length\n    return volume\n\n\n# Example usage:\ntry:\n    volume = find_volume(10.0, 5.0, 7.0)\n    print(f\"The volume of the triangular prism is {volume} cubic units.\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7y8_y6ku.py\", line 14, in <module>\n    assert find_volume(10,8,6) == 240\nAssertionError", "passed": false}
{"task_id": 15, "requirement": "Code Standard", "completion": "import re\n\ndef split_lowerstring(text: str) -> list:\n    \"\"\"\n    Splits a string at each lowercase letter and returns a list of segments.\n    \n    Parameters:\n        text (str): The input string to be split.\n        \n    Returns:\n        list: A list of string segments split at lowercase letters.\n        \n    Raises:\n        TypeError: If the input is not a string.\n    \"\"\"\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Use regex to find all lowercase letters and split the string at these points\n    # The pattern r'(?<=[a-z])' looks for a position right after a lowercase letter\n    segments = re.split(r'(?<=[a-z])', text)\n    \n    # Filter out any empty strings that may result from consecutive lowercase letters\n    return [segment for segment in segments if segment]\n\n# Example usage:\nexample_string = \"HelloWorldPython\"\nresult = split_lowerstring(example_string)\nprint(result)  # Output: ['H', 'ello', 'W', 'orld', 'P', 'ython']\n", "result": "failed: File \"/tmp/tmpndphr310.py\", line 18\n    try: split_lowerstring(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 16, "requirement": "Code Standard", "completion": "import re\n\ndef text_lowercase_underscore(text: str) -> str:\n    \"\"\"\n    Checks if the input string contains sequences of lowercase letters joined with an underscore.\n    \n    Parameters:\n        text (str): The input string to check.\n        \n    Returns:\n        str: 'Found a match!' if there is a match, otherwise 'Not matched!'.\n        \n    Raises:\n        TypeError: If the input is not a string.\n    \"\"\"\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    if not text:\n        return 'Not matched!'\n    \n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    match = re.search(pattern, text)\n    \n    return 'Found a match!' if match else 'Not matched!'\n\n# Example usage:\nexample_text = \"This is a_test_string with some_lowercase_sequences and_more_examples.\"\nresult = text_lowercase_underscore(example_text)\nprint(result)  # Output should be 'Found a match!'\n\nempty_text = \"\"\nresult_empty = text_lowercase_underscore(empty_text)\nprint(result_empty)  # Output should be 'Not matched!'\n\ninvalid_input = 123\ntry:\n    result_invalid = text_lowercase_underscore(invalid_input)\nexcept TypeError as e:\n    print(e)  # Output should be 'Input must be a string'\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpyrd2dz55.py\", line 36, in <module>\n    assert cc_visit(inspect.getsource(text_lowercase_underscore))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 17, "requirement": "Code Standard", "completion": "def square_perimeter(a: int) -> int:\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Parameters:\n    a (int): The length of one side of the square. Must be a non-negative integer.\n\n    Returns:\n    int: The perimeter of the square.\n\n    Raises:\n    ValueError: If the side length is negative.\n    \"\"\"\n    if a < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    return 4 * a\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    side = 5\n    print(f\"The perimeter of a square with side length {side} is {square_perimeter(side)}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppn7cdbdf.py\", line 30, in <module>\n    assert cc_visit(inspect.getsource(square_perimeter))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 18, "requirement": "Code Standard", "completion": "def remove_dirty_chars(source_str: str, dirty_chars: str) -> str:\n    \"\"\"\n    Removes characters from source_str that are present in dirty_chars.\n\n    :param source_str: The original string from which characters will be removed.\n    :param dirty_chars: A string containing characters to be removed from source_str.\n    :return: A new string with the specified characters removed.\n    :raises ValueError: If source_str or dirty_chars contain non-alphabetic characters.\n    :raises TypeError: If either source_str or dirty_chars is not a string.\n    \"\"\"\n    if not isinstance(source_str, str) or not isinstance(dirty_chars, str):\n        raise TypeError('Inputs must be strings.')\n\n    if not source_str.isalpha() or not dirty_chars.isalpha():\n        raise ValueError('Input strings must only contain alphabetic characters.')\n\n    # Create a set of characters to remove for faster lookup\n    dirty_set = set(dirty_chars)\n\n    # Use list comprehension to filter out unwanted characters\n    cleaned_str = ''.join(char for char in source_str if char not in dirty_set)\n\n    return cleaned_str\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    try:\n        source_string = \"hello world\"\n        dirty_characters = \"ld\"\n        cleaned_string = remove_dirty_chars(source_string, dirty_characters)\n        print(cleaned_string)  # Output: \"heo wor\"\n    except (ValueError, TypeError) as e:\n        print(f\"An error occurred: {e}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpv4kouwqw.py\", line 32, in <module>\n    assert remove_dirty_chars('example', '') == 'example', 'Function should return the original string if the second string is empty.'\n  File \"/tmp/tmpv4kouwqw.py\", line 5, in remove_dirty_chars\n    raise ValueError('Input strings must only contain alphabetic characters.')\nValueError: Input strings must only contain alphabetic characters.", "passed": false}
{"task_id": 19, "requirement": "Code Standard", "completion": "def test_duplicate(arraynums: list) -> bool:\n    \"\"\"\n    Check if the given list of integers contains any duplicate elements.\n\n    Parameters:\n    arraynums (list): A list of integers to check for duplicates.\n\n    Returns:\n    bool: True if there are duplicates, False otherwise.\n\n    Raises:\n    TypeError: If the input is not a list.\n    ValueError: If the list contains non-integer elements.\n    \"\"\"\n    if not isinstance(arraynums, list):\n        raise TypeError('Input must be a list')\n\n    seen = set()\n    for num in arraynums:\n        if not isinstance(num, int):\n            raise ValueError('Input must be a list of integers')\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\n\n# Example usage:\ntry:\n    nums = [1, 2, 3, 4, 5, 1]\n    print(test_duplicate(nums))  # Output: True\n\n    nums = [1, 2, 3, 4, 5]\n    print(test_duplicate(nums))  # Output: False\n\n    nums = []\n    print(test_duplicate(nums))  # Output: False\n\n    nums = [1]\n    print(test_duplicate(nums))  # Output: False\n\n    nums = \"not a list\"\n    print(test_duplicate(nums))  # Should raise TypeError\n\n    nums = [1, 2, 'not an int', 4]\n    print(test_duplicate(nums))  # Should raise ValueError\nexcept (TypeError, ValueError) as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpebm7410x.py\", line 40, in <module>\n    test_duplicate(None)\n  File \"/tmp/tmpebm7410x.py\", line 3, in test_duplicate\n    raise TypeError('Input must be a list')\nTypeError: Input must be a list\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpebm7410x.py\", line 43, in <module>\n    assert str(e) == 'Input must be a list of integers'\nAssertionError", "passed": false}
{"task_id": 20, "requirement": "Code Standard", "completion": "def is_woodall(x: int) -> bool:\n    \"\"\"\n    Check if the given number is a Woodall number.\n    \n    A Woodall number is defined as n * 2^n - 1 for some integer n.\n    \n    Parameters:\n    x (int): The number to check.\n    \n    Returns:\n    bool: True if the number is a Woodall number, False otherwise.\n    \n    Raises:\n    TypeError: If the input is not an integer.\n    \"\"\"\n    if not isinstance(x, int):\n        raise TypeError(\"Input must be an integer\")\n\n    # Iterate over possible values of n starting from 1\n    n = 1\n    while True:\n        woodall_number = n * 2**n - 1\n        if woodall_number == x:\n            return True\n        elif woodall_number > x:\n            return False\n        n += 1\n\n# Example usage:\nprint(is_woodall(7))   # False, because 7 is not a Woodall number\nprint(is_woodall(23))  # True, because 3*2^3 - 1 = 23\nprint(is_woodall(24))  # False, because 24 is not a Woodall number\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0xuygf82.py\", line 34, in <module>\n    assert cc_visit(inspect.getsource(is_woodall))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 21, "requirement": "Code Standard", "completion": "def multiples_of_num(n: int, m: int) -> list:\n    \"\"\"\n    Generates a list of m multiples of n.\n\n    Parameters:\n    n (int): The base number to find multiples of.\n    m (int): The number of multiples to generate.\n\n    Returns:\n    list: A list of m multiples of n.\n\n    Raises:\n    ValueError: If either m or n is negative.\n    \"\"\"\n    if m < 0 or n < 0:\n        raise ValueError(\"Both n and m must be non-negative.\")\n    \n    return [n * i for i in range(1, m + 1)]\n\n# Example usage:\nprint(multiples_of_num(5, 4))  # Output: [5, 10, 15, 20]\nprint(multiples_of_num(3, 0))  # Output: []\ntry:\n    print(multiples_of_num(-1, 2))\nexcept ValueError as e:\n    print(e)  # Output: Both n and m must be non-negative.\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpubdkzip5.py\", line 12, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "requirement": "Code Standard", "completion": "from typing import List\n\ndef find_first_duplicate(nums: List[int]) -> int:\n    \"\"\"\n    Finds the first duplicate element in a list of integers.\n    \n    :param nums: List[int] - The list of integers to search for duplicates.\n    :return: int - The first duplicate integer found, or -1 if no duplicates exist or input is invalid.\n    :raises TypeError: If the input is not a list of integers.\n    \"\"\"\n    if not isinstance(nums, list) or not all(isinstance(x, int) for x in nums):\n        raise TypeError(\"Input must be a list of integers.\")\n    \n    if not nums:\n        return -1\n    \n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    \n    return -1\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_array = [2, 5, 1, 2, 3, 5, 1, 2, 4]\n    print(find_first_duplicate(example_array))  # Output should be 2\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplmo2psv8.py\", line 24, in <module>\n    assert find_first_duplicate.__annotations__ == {'nums': list, 'return': int}\nAssertionError", "passed": false}
{"task_id": 23, "requirement": "Code Standard", "completion": "from typing import List\n\ndef maximum_sum(list1: List[List[int]]) -> int:\n    \"\"\"\n    Finds the maximum sum of elements in any sublist within a list of lists.\n\n    :param list1: A list of lists containing integers.\n    :return: An integer representing the maximum sum of elements from any sublist.\n    :raises TypeError: If the input is not a list of lists or if any sublist contains non-integer elements.\n    \"\"\"\n    if not isinstance(list1, list):\n        raise TypeError(\"Input must be a list of lists.\")\n\n    if not list1:  # Check if the list is empty\n        return 0\n\n    max_sum = 0\n    for sublist in list1:\n        if not isinstance(sublist, list):\n            raise TypeError(\"Each element in the list must be a list.\")\n        if not all(isinstance(item, int) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be integers.\")\n        \n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n\n    return max_sum\n\n# Example usage:\nexample_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(maximum_sum(example_list))  # Output will be 24\n", "result": "failed: File \"/tmp/tmpkq6t5a9g.py\", line 24\n    try: maximum_sum([[1, 2], [3, 'a']]); assert False, 'Expected TypeError' except TypeError: pass\n                                                                             ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 24, "requirement": "Code Standard", "completion": "def binary_to_decimal(binary: str) -> int:\n    \"\"\"\n    Convert a binary number (given as a string) to its decimal equivalent.\n    \n    Parameters:\n    - binary (str): A string representing a binary number.\n    \n    Returns:\n    - int: The decimal equivalent of the binary number.\n    \n    Raises:\n    - ValueError: If the input is not a valid binary string.\n    \n    Examples:\n    >>> binary_to_decimal('1011')\n    11\n    >>> binary_to_decimal('')\n    0\n    >>> binary_to_decimal('1021')\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid binary number\n    \"\"\"\n    if not binary:\n        return 0\n    \n    if not all(char in '01' for char in binary):\n        raise ValueError(\"Invalid binary number\")\n    \n    return int(binary, 2)\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    binary_number = \"1011\"\n    try:\n        decimal_number = binary_to_decimal(binary_number)\n        print(f\"The decimal equivalent of binary {binary_number} is {decimal_number}\")\n    except ValueError as e:\n        print(e)\n", "result": "failed: File \"/tmp/tmpbtm3zxks.py\", line 18\n    try: binary_to_decimal('102'); assert False, 'Expected ValueError' except ValueError as e: assert str(e) == 'Invalid binary number'\n                                                                       ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 25, "requirement": "Code Standard", "completion": "from functools import reduce\nfrom operator import mul\nfrom typing import List\n\ndef find_product(arr: List[int]) -> int:\n    \"\"\"\n    Calculates the product of non-repeated elements in a given list of integers.\n\n    Parameters:\n    arr (List[int]): A list of integers.\n\n    Returns:\n    int: The product of non-repeated elements.\n\n    Raises:\n    TypeError: If the input is not a list of integers.\n    \"\"\"\n    if not isinstance(arr, list) or not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"Input must be a list of integers\")\n\n    # Identify unique elements in the array\n    unique_elements = set(arr)\n\n    # Calculate the product of unique elements\n    if not unique_elements:\n        return 1  # Return 1 if the list is empty or contains only duplicates\n\n    # Use reduce to multiply all elements together\n    product = reduce(mul, unique_elements, 1)\n    \n    return product\n\n# Example usage:\narr = [1, 2, 3, 2, 4]\nprint(find_product(arr))  # Output should be 24\n\n# Test with invalid input\ntry:\n    print(find_product([1, 2, '3', 4]))\nexcept TypeError as e:\n    print(e)  # Expected to raise TypeError\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpzl6sjnvr.py\", line 23, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "requirement": "Code Standard", "completion": "from typing import List, Tuple\n\ndef check_k_elements(test_list: List[Tuple], k: int) -> bool:\n    \"\"\"\n    Check if every tuple in the provided list of tuples has exactly k elements.\n    \n    :param test_list: List of tuples to be checked.\n    :param k: The number of elements each tuple should have.\n    :return: True if every tuple has exactly k elements, False otherwise.\n    :raises TypeError: If test_list is not a list of tuples or k is not an integer.\n    \"\"\"\n    if not isinstance(test_list, list) or not all(isinstance(item, tuple) for item in test_list):\n        raise TypeError(\"test_list must be a list of tuples\")\n    if not isinstance(k, int):\n        raise TypeError(\"k must be an integer\")\n    \n    return all(len(tup) == k for tup in test_list)\n\n# Example usage:\nexample_tuples = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nk = 3\nprint(check_k_elements(example_tuples, k))  # Output: True\n\nexample_tuples_with_mismatch = [(1, 2, 3), (4, 5), (7, 8, 9)]\nk = 3\nprint(check_k_elements(example_tuples_with_mismatch, k))  # Output: False\n\nempty_list = []\nk = 0\nprint(check_k_elements(empty_list, k))  # Output: True\n\nnot_a_tuple_list = [1, 2, 3]\nk = 1\ntry:\n    print(check_k_elements(not_a_tuple_list, k))\nexcept TypeError as e:\n    print(e)  # Output: test_list must be a list of tuples\n\ninvalid_k = \"three\"\ntry:\n    print(check_k_elements(example_tuples, invalid_k))\nexcept TypeError as e:\n    print(e)  # Output: k must be an integer\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkdodlk2d.py\", line 29, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "requirement": "Code Standard", "completion": "def remove_digits(strings: list[str]) -> list[str]:\n    \"\"\"\n    Removes all digits from each string in the given list.\n\n    :param strings: List of strings from which digits will be removed.\n    :return: A new list of strings with all digits removed.\n    :raises TypeError: If the input is not a list or any element in the list is not a string.\n    \"\"\"\n    if not isinstance(strings, list):\n        raise TypeError(\"Input must be a list\")\n\n    cleaned_strings = []\n    for item in strings:\n        if not isinstance(item, str):\n            raise TypeError(\"All elements in the list must be strings\")\n        cleaned_strings.append(''.join(char for char in item if not char.isdigit()))\n\n    return cleaned_strings\n\n\n# Example usage:\nexample_list = [\"abc123\", \"def456ghi789\", \"0jkl\"]\ncleaned_list = remove_digits(example_list)\nprint(cleaned_list)  # Output: ['abc', 'defghi', 'jkl']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpk30z8y4c.py\", line 14, in <module>\n    assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\nNameError: name 'remove' is not defined", "passed": false}
{"task_id": 28, "requirement": "Code Standard", "completion": "def binomial_coeff(n: int, k: int) -> int:\n    \"\"\"\n    Calculate the binomial coefficient, also known as \"n choose k\".\n\n    Parameters:\n    n (int): The total number of items.\n    k (int): The number of items to choose.\n\n    Returns:\n    int: The binomial coefficient.\n\n    Raises:\n    ValueError: If either input is negative or if k is greater than n.\n    \"\"\"\n    if n < 0 or k < 0 or k > n:\n        raise ValueError(\"Inputs must be non-negative and k must not be greater than n\")\n\n    # Edge cases\n    if k == 0 or k == n:\n        return 1\n\n    # Optimization: Take advantage of symmetry, C(n, k) == C(n, n-k)\n    k = min(k, n - k)\n\n    # Compute binomial coefficient iteratively to avoid large intermediate factorials\n    coeff = 1\n    for i in range(1, k + 1):\n        coeff *= n - (k - i)\n        coeff //= i\n\n    return coeff\n\n# Example usage:\nprint(binomial_coeff(5, 2))  # Output: 10\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp01kd9rjk.py\", line 41, in <module>\n    check_code_style(binomial_coeff)\n  File \"/tmp/tmp01kd9rjk.py\", line 37, in check_code_style\n    assert result.total_errors == 0, \"Code does not conform to PEP 8 standards.\"\nAssertionError: Code does not conform to PEP 8 standards.", "passed": false}
{"task_id": 29, "requirement": "Code Standard", "completion": "def get_odd_occurrence(arr: list[int], arr_size: int) -> int:\n    \"\"\"\n    Finds the element occurring an odd number of times in the list.\n    \n    Parameters:\n    arr (list[int]): The list of integers to be checked.\n    arr_size (int): The size of the list (though not strictly necessary since len(arr) can be used).\n    \n    Returns:\n    int: The element occurring an odd number of times or None if no such element exists.\n    \n    Raises:\n    TypeError: If the input is not a list of integers.\n    \"\"\"\n    if not isinstance(arr, list) or not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"Input must be a list of integers.\")\n    \n    if arr_size != len(arr):\n        raise ValueError(\"arr_size does not match the actual size of the list.\")\n    \n    # Handle empty list\n    if not arr:\n        return None\n    \n    count_dict = {}\n    \n    # Count occurrences of each element\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Return the first element with an odd count\n    for num, count in count_dict.items():\n        if count % 2 != 0:\n            return num\n    \n    # If no such element is found, return None\n    return None\n\n# Example usage:\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 2, 3, 1, 3]\n    arr_size = len(arr)\n    print(get_odd_occurrence(arr, arr_size))  # Output should be 3\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2j900adk.py\", line 43, in <module>\n    assert get_odd_occurrence([]) is None\nTypeError: get_odd_occurrence() missing 1 required positional argument: 'arr_size'", "passed": false}
{"task_id": 30, "requirement": "Code Standard", "completion": "def count_substring_with_equal_ends(s: str) -> int:\n    \"\"\"\n    Counts all substrings of the given string that start and end with the same character.\n\n    :param s: Input string\n    :return: The number of substrings that start and end with the same character\n    :raises TypeError: If the input is not a string\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n\n    n = len(s)\n    if n == 0:\n        return 0\n\n    # This will store the frequency of each character in the string\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # The total count of such substrings\n    total_count = 0\n\n    # For each character, calculate how many substrings can be formed\n    for count in char_count.values():\n        # If a character appears 'k' times, then there are k * (k + 1) / 2 substrings\n        # that start and end with this character.\n        total_count += count * (count + 1) // 2\n\n    return total_count\n\n\n# Example usage\nif __name__ == \"__main__\":\n    s = \"abcab\"\n    print(count_substring_with_equal_ends(s))  # Output should be 7\n", "result": "failed: File \"/tmp/tmpjt07rpq2.py\", line 30\n    try: count_substring_with_equal_ends(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                                  ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 31, "requirement": "Code Standard", "completion": "import heapq\nfrom collections import Counter\nfrom typing import List\n\ndef func(nums: List[List[int]], k: int) -> List[int]:\n    \"\"\"\n    Returns the top k integers that occur most frequently from given lists of sorted and distinct integers.\n    \n    Args:\n    nums: A list of lists containing sorted and distinct integers.\n    k: An integer representing the number of top frequent elements to return.\n    \n    Returns:\n    A list of integers representing the top k most frequent integers.\n    \n    Raises:\n    ValueError: If k is greater than the total number of distinct integers across all lists.\n    \"\"\"\n    # Flatten the list of lists into a single list\n    combined_list = [item for sublist in nums for item in sublist]\n\n    # Count the frequency of each integer\n    freq_counter = Counter(combined_list)\n\n    # Check if k is greater than the total number of distinct integers\n    if k > len(freq_counter):\n        raise ValueError(\"k cannot be greater than the number of distinct integers\")\n\n    # Use a min-heap to keep track of the top k elements\n    heap = []\n\n    for num, count in freq_counter.items():\n        if len(heap) < k:\n            heapq.heappush(heap, (count, num))\n        else:\n            # If the current count is greater than the smallest count in the heap,\n            # replace the smallest count with the current count\n            if count > heap[0][0]:\n                heapq.heapreplace(heap, (count, num))\n\n    # Extract the numbers from the heap and sort them based on their counts and values\n    result = [num for count, num in sorted(heap, key=lambda x: (-x[0], x[1]))]\n\n    return result\n\n# Example usage:\nnums = [\n    [1, 2, 3],\n    [2, 3, 4],\n    [3, 4, 5]\n]\nk = 2\nprint(func(nums, k))  # Output might be [3, 2] depending on the input\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp33fc3kso.py\", line 33, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "requirement": "Code Standard", "completion": "def max_prime_factors(n: int) -> int:\n    \"\"\"\n    Return the largest prime factor of a given positive integer.\n    \n    Parameters:\n    n (int): A positive integer.\n    \n    Returns:\n    int: The largest prime factor of n.\n    \n    Raises:\n    ValueError: If n is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError('Input must be a positive integer')\n\n    # Handle the smallest prime number separately\n    if n == 2:\n        return 2\n\n    # Remove all factors of 2\n    while n % 2 == 0:\n        n //= 2\n    largest_prime = 2\n\n    # Check for odd factors from 3 onwards\n    factor = 3\n    while factor * factor <= n:\n        while n % factor == 0:\n            largest_prime = factor\n            n //= factor\n        factor += 2\n\n    # If n is a prime number greater than 2\n    if n > 2:\n        largest_prime = n\n\n    return largest_prime\n\n# Example usage:\nprint(max_prime_factors(13195))  # Output should be 29\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpeuhr8gl0.py\", line 40, in <module>\n    assert cc_visit(inspect.getsource(max_prime_factors))[0].complexity <= 5\nAssertionError", "passed": false}
{"task_id": 33, "requirement": "Code Standard", "completion": "def decimal_to_binary(n: int) -> str:\n    \"\"\"\n    Convert a non-negative integer to its binary representation as a string.\n    \n    Parameters:\n    n (int): A non-negative integer to be converted to binary.\n    \n    Returns:\n    str: The binary representation of the input integer.\n    \n    Raises:\n    ValueError: If the input is not a non-negative integer.\n    \"\"\"\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    if n == 0:\n        return \"0\"\n    \n    binary_digits = []\n    \n    while n > 0:\n        remainder = n % 2\n        binary_digits.append(str(remainder))\n        n //= 2\n    \n    binary_digits.reverse()\n    \n    return ''.join(binary_digits)\n\n# Example usage:\nprint(decimal_to_binary(10))  # Output: \"1010\"\nprint(decimal_to_binary(255)) # Output: \"11111111\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2qlmrk6x.py\", line 16, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "requirement": "Code Standard", "completion": "def find_missing(ar: list, N: int) -> int:\n    \"\"\"\n    Finds the missing number in a sorted array of consecutive integers.\n    \n    Parameters:\n    ar (list): A list of sorted integers with exactly one missing number.\n    N (int): The length of the full sequence including the missing number.\n    \n    Returns:\n    int: The missing number in the sequence.\n    \n    Raises:\n    ValueError: If the input list is not sorted.\n    \"\"\"\n    if not all(ar[i] <= ar[i + 1] for i in range(len(ar) - 1)):\n        raise ValueError('Input list must be sorted.')\n\n    low = 0\n    high = len(ar) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        expected_value = ar[0] + mid\n\n        if ar[mid] != expected_value:\n            if mid == 0 or ar[mid - 1] == expected_value - 1:\n                return expected_value\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    raise ValueError('No missing number found in the sequence.')\n\n# Example usage:\nar = [1, 2, 3, 5, 6, 7]\nN = 7\nprint(find_missing(ar, N))  # Output should be 4\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpa05i2sdh.py\", line 27, in <module>\n    assert find_missing([2,3,4,5], 4) == 1\n  File \"/tmp/tmpa05i2sdh.py\", line 15, in find_missing\n    raise ValueError('No missing number found in the sequence.')\nValueError: No missing number found in the sequence.", "passed": false}
{"task_id": 35, "requirement": "Code Standard", "completion": "def find_rect_num(n: int) -> int:\n    \"\"\"\n    Finds the n-th rectangular number.\n\n    Parameters:\n    n (int): The position of the rectangular number in the sequence.\n\n    Returns:\n    int: The n-th rectangular number.\n\n    Raises:\n    ValueError: If the input is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n\n    return n * (n + 1)\n\n# Example usage:\ntry:\n    print(find_rect_num(5))  # Output will be 30 because 5 * 6 = 30\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpz9bo3jwr.py\", line 21, in <module>\n    assert cc_visit(inspect.getsource(find_rect_num))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 36, "requirement": "Code Standard", "completion": "def find_nth_digit(p: int, q: int, n: int) -> int:\n    \"\"\"\n    Finds the nth digit after the decimal point in the result of p / q.\n\n    :param p: The numerator of the fraction.\n    :param q: The denominator of the fraction.\n    :param n: The position of the digit after the decimal point to retrieve.\n    :return: The nth digit after the decimal point as an integer.\n    :raises ValueError: If the denominator is zero.\n    \"\"\"\n    if q == 0:\n        raise ValueError(\"Denominator cannot be zero\")\n\n    # Perform integer division to get the remainder\n    _, remainder = divmod(p, q)\n\n    # Initialize variables\n    digits = []\n    seen_remainders = {}\n\n    # Process the decimal part\n    for i in range(n + 1):  # We go one extra to check for repeats\n        if remainder == 0:\n            break  # Finite decimal, no more digits\n\n        if remainder in seen_remainders:\n            start_repeat = seen_remainders[remainder]\n            repeat_len = len(digits) - start_repeat\n            # If n is within the repeating part\n            if n > start_repeat:\n                return int(digits[start_repeat + (n - start_repeat - 1) % repeat_len])\n            else:\n                break  # n is before the repeating part\n\n        seen_remainders[remainder] = i\n        remainder *= 10\n        quotient, remainder = divmod(remainder, q)\n        digits.append(str(quotient))\n\n    # Check if we have enough digits\n    if n < len(digits):\n        return int(digits[n])\n    else:\n        raise ValueError(f\"The requested digit position {n} is out of bounds for the fraction {p}/{q}\")\n\n# Example usage:\nprint(find_nth_digit(1, 3, 2))  # Should print 3 (for 0.333...)\nprint(find_nth_digit(1, 7, 5))  # Should print 8 (for 0.142857142857...)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmputyabg1q.py\", line 33, in <module>\n    assert find_nth_digit(1,2,1) == 5\n  File \"/tmp/tmputyabg1q.py\", line 29, in find_nth_digit\n    raise ValueError(f\"The requested digit position {n} is out of bounds for the fraction {p}/{q}\")\nValueError: The requested digit position 1 is out of bounds for the fraction 1/2", "passed": false}
{"task_id": 37, "requirement": "Code Standard", "completion": "from typing import List, Union\n\ndef sort_mixed_list(mixed_list: List[Union[int, str]]) -> List[Union[int, str]]:\n    \"\"\"\n    Sorts a mixed list of integers and strings.\n\n    Parameters:\n    - mixed_list (List[Union[int, str]]): A list containing integers and/or strings.\n\n    Returns:\n    - List[Union[int, str]]: A sorted list with integers followed by strings.\n\n    Raises:\n    - TypeError: If the input is not a list or contains elements other than integers or strings.\n    \"\"\"\n    if not isinstance(mixed_list, list):\n        raise TypeError(\"Input must be a list.\")\n\n    integers = []\n    strings = []\n\n    for item in mixed_list:\n        if isinstance(item, int):\n            integers.append(item)\n        elif isinstance(item, str):\n            strings.append(item)\n        else:\n            raise TypeError(\"List must contain only integers and strings.\")\n\n    sorted_integers = sorted(integers)\n    sorted_strings = sorted(strings)\n\n    return sorted_integers + sorted_strings\n\n# Example usage:\nexample_list = [34, \"apple\", 67, \"banana\", 12, \"cherry\"]\nsorted_list = sort_mixed_list(example_list)\nprint(sorted_list)  # Output: [12, 34, 67, 'apple', 'banana', 'cherry']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvmyi46go.py\", line 39, in <module>\n    assert sort_mixed_list.__annotations__ == {'mixed_list': list[Union[int, str]], 'return' : list}\nAssertionError", "passed": false}
{"task_id": 38, "requirement": "Code Standard", "completion": "def div_even_odd(list1: list) -> float:\n    \"\"\"\n    Finds the division of the first even and odd number in a given list.\n\n    Parameters:\n    list1 (list): A list of integers.\n\n    Returns:\n    float: The result of dividing the first even number by the first odd number.\n    \n    Raises:\n    ValueError: If the list does not contain at least one even and one odd number.\n    \"\"\"\n\n    # Initialize variables to store the first even and odd numbers\n    first_even = None\n    first_odd = None\n\n    # Iterate through the list to find the first even and odd numbers\n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n\n        # Break the loop if both even and odd numbers are found\n        if first_even is not None and first_odd is not None:\n            break\n\n    # Check if both even and odd numbers were found\n    if first_even is None or first_odd is None:\n        raise ValueError(\"List must contain at least one even and one odd number.\")\n\n    # Perform the division and return the result\n    if first_even == 0:\n        return 0.0\n\n    return first_even / first_odd\n\n# Example usage:\nnumbers_list = [7, 3, 4, 8, 9]\ntry:\n    print(div_even_odd(numbers_list))  # Output: 1.3333333333333333\nexcept ValueError as e:\n    print(e)\n", "result": "failed: File \"/tmp/tmpkjxb58wv.py\", line 31\n    try: div_even_odd([2, 4, 6]); assert False; except ValueError as e: assert str(e) == 'List must contain at least one even and one odd number.'\n                                                ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 39, "requirement": "Code Standard", "completion": "from collections import Counter\n\ndef rearrange_string(s: str) -> str:\n    \"\"\"\n    Rearranges the characters of a given string so that no two adjacent characters are the same.\n    \n    Args:\n        s (str): The input string consisting only of lowercase letters.\n        \n    Returns:\n        str: A rearranged string where no two adjacent characters are the same, or an empty string if such a rearrangement is not possible.\n        \n    Raises:\n        ValueError: If the input is not a string or contains characters other than lowercase letters.\n    \"\"\"\n    \n    if not isinstance(s, str) or not s.islower() or not s.isalpha():\n        raise ValueError(\"Input must be a non-empty string consisting only of lowercase letters.\")\n    \n    # Count the frequency of each character in the string\n    char_count = Counter(s)\n    \n    # Find the most frequent character\n    max_count = max(char_count.values())\n    \n    # Check if the most frequent character appears more than (length of string + 1) / 2 times\n    if max_count > (len(s) + 1) // 2:\n        return \"\"\n    \n    # Create a list to store the result\n    result = [''] * len(s)\n    index = 0\n    \n    # Sort the characters by their frequency in descending order\n    for char, count in char_count.most_common():\n        for _ in range(count):\n            if index >= len(s):\n                index = 1  # Start filling from the second position if we've reached the end\n            result[index] = char\n            index += 2\n    \n    return ''.join(result)\n\n# Example usage:\nif __name__ == \"__main__\":\n    s = \"aab\"\n    print(rearrange_string(s))  # Possible output: \"aba\"\n\n    s = \"aaab\"\n    print(rearrange_string(s))  # Output: \"\" since it's not possible to rearrange \"aaab\" without having two 'a's adjacent.\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5fskjc6l.py\", line 29, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "requirement": "Code Standard", "completion": "from collections import Counter\nfrom typing import List\n\ndef freq_element(nums: List[List[int]]) -> dict[int, int]:\n    \"\"\"\n    Returns the frequency of elements in a given list of lists.\n\n    :param nums: A list of lists containing integers.\n    :type nums: List[List[int]]\n    :return: A dictionary where keys are the unique elements and values are their frequencies.\n    :rtype: dict[int, int]\n    :raises TypeError: If the input is not a list of lists.\n    \"\"\"\n    if not isinstance(nums, list) or not all(isinstance(sublist, list) for sublist in nums):\n        raise TypeError(\"Input must be a list of lists.\")\n    \n    if not nums:\n        return {}\n    \n    # Flatten the list of lists into a single list\n    flattened_list = [item for sublist in nums for item in sublist]\n    \n    # Use Counter to count the frequency of each element\n    freq_counter = Counter(flattened_list)\n    \n    return dict(freq_counter)\n\n# Example usage:\nlist_of_lists = [[1, 2], [3, 2, 1], [1, 4, 4]]\nresult = freq_element(list_of_lists)\nprint(result)  # Output: {1: 3, 2: 2, 3: 1, 4: 2}\n", "result": "failed: File \"/tmp/tmpxkfxticz.py\", line 20\n    try: freq_element('not a list'); assert False; except TypeError: assert True\n                                                   ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 41, "requirement": "Code Standard", "completion": "from typing import List\n\ndef filter_even_numbers(nums: List[int]) -> List[int]:\n    \"\"\"\n    Filters even numbers from a list of integers.\n\n    Parameters:\n    nums (List[int]): A list of integers.\n\n    Returns:\n    List[int]: A list containing only the even integers from the input list.\n\n    Raises:\n    TypeError: If the input is not a list of integers.\n    \"\"\"\n    if not isinstance(nums, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    if not all(isinstance(x, int) for x in nums):\n        raise TypeError(\"All elements in the list must be integers.\")\n\n    even_numbers = filter(lambda x: x % 2 == 0, nums)\n    return list(even_numbers)\n\n# Example usage:\nnumbers_list = [1, 2, 3, 4, 5, 6]\nfiltered_list = filter_even_numbers(numbers_list)\nprint(filtered_list)  # Output will be [2, 4, 6]\n\n# Testing with invalid inputs\ntry:\n    invalid_input = \"not a list\"\n    print(filter_even_numbers(invalid_input))\nexcept TypeError as e:\n    print(e)  # Output will be \"Input must be a list.\"\n\ntry:\n    mixed_list = [1, 2, 'three', 4, 5, 6]\n    print(filter_even_numbers(mixed_list))\nexcept TypeError as e:\n    print(e)  # Output will be \"All elements in the list must be integers.\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwumcud50.py\", line 24, in <module>\n    assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\nNameError: name 'filter_evennumbers' is not defined", "passed": false}
{"task_id": 42, "requirement": "Code Standard", "completion": "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    \"\"\"\n    Calculate the sum of repeated elements in the array.\n    \n    Parameters:\n        arr (List[int]): The input list of integers.\n        \n    Returns:\n        int: The sum of elements that appear more than once.\n        \n    Raises:\n        TypeError: If the input is not a list.\n    \"\"\"\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n\n    if not arr:\n        return 0\n\n    from collections import Counter\n\n    # Count the occurrences of each element in the array\n    counts = Counter(arr)\n\n    # Sum the elements that appear more than once\n    total_sum = sum(element * count for element, count in counts.items() if count > 1)\n\n    return total_sum\n\n# Example usage:\narr = [1, 2, 3, 2, 4, 5, 5]\nprint(find_sum(arr))  # Output should be 7 because 2 + 5 = 7\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpayn1w2m8.py\", line 16, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Code Standard", "completion": "import re\n\ndef text_match(text: str) -> str:\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    if not text:\n        return \"Not matched!\"\n    \n    pattern = r'^[a-z]+_[a-z]+$'\n    \n    if re.match(pattern, text):\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"\n\n# Example usage:\nprint(text_match(\"abc_def\"))  # Should return \"Matched!\"\nprint(text_match(\"Abc_def\"))  # Should return \"Not matched!\"\nprint(text_match(\"abc_def_ghi\"))  # Should return \"Not matched!\"\nprint(text_match(\"abc\"))       # Should return \"Not matched!\"\nprint(text_match(\"\"))          # Should return \"Not matched!\"\ntry:\n    print(text_match(123))     # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmps9v6u_kb.py\", line 22, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 44, "requirement": "Code Standard", "completion": "import re\n\ndef text_match_string(pattern: str, text: str) -> bool:\n    \"\"\"\n    Checks if the given pattern matches a word at the beginning of the text.\n\n    :param pattern: The regex pattern to match against the beginning of the text.\n    :param text: The string to be searched.\n    :return: True if the pattern matches a word at the beginning of the text, False otherwise.\n    :raises TypeError: If the input is not a string.\n    \"\"\"\n    if not isinstance(pattern, str) or not isinstance(text, str):\n        raise TypeError(\"Both pattern and text must be strings.\")\n\n    # Add word boundary to ensure the pattern matches a complete word\n    full_pattern = r'\\b' + pattern\n\n    # Use re.match to check if the pattern matches at the beginning of the text\n    return bool(re.match(full_pattern, text))\n\n# Example usage:\nprint(text_match_string(r\"hello\", \"hello world\"))  # Should return True\nprint(text_match_string(r\"world\", \"hello world\"))  # Should return False\nprint(text_match_string(r\"abc\", \"\"))               # Should return False\nprint(text_match_string(r\"abc\", \"  abc def\"))      # Should return False due to leading spaces\n", "result": "failed: File \"/tmp/tmpk0cc63_9.py\", line 17\n    try: text_match_string(123); assert False, 'TypeError not raised' except TypeError: pass\n                                                                      ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 45, "requirement": "Code Standard", "completion": "from functools import reduce\nimport math\n\ndef get_gcd(numbers: list) -> int:\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of the elements in the given list.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    int: The GCD of the list elements.\n\n    Raises:\n    ValueError: If the input list is empty.\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    return reduce(lambda x, y: math.gcd(x, y), numbers)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0vtimgua.py\", line 15, in <module>\n    assert cc_visit(inspect.getsource(get_gcd))[0].complexity <=1\nAssertionError", "passed": false}
{"task_id": 46, "requirement": "Code Standard", "completion": "def test_distinct(numbers: list) -> bool:\n    \"\"\"\n    Check if all numbers in the list are distinct.\n    \n    :param numbers: List of integers\n    :return: True if all numbers are distinct, False otherwise\n    :raises TypeError: If input is not a list or contains non-integer elements\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    if not all(isinstance(x, int) for x in numbers):\n        raise TypeError(\"All elements in the list must be integers.\")\n    \n    return len(numbers) == len(set(numbers))\n\n# Example usage:\nprint(test_distinct([1, 2, 3, 4]))  # Expected output: True\nprint(test_distinct([1, 2, 2, 4]))  # Expected output: False\nprint(test_distinct([]))            # Expected output: True\nprint(test_distinct([5]))           # Expected output: True\n", "result": "passed", "passed": true}
{"task_id": 48, "requirement": "Code Standard", "completion": "def set_odd_bits(n: int) -> int:\n    \"\"\"\n    Sets all odd bits of a given integer to 1.\n\n    Parameters:\n    n (int): The input integer.\n\n    Returns:\n    int: The integer with all odd bits set to 1.\n\n    Raises:\n    TypeError: If the input is not an integer.\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n\n    # Special case for 0\n    if n == 0:\n        return 1\n\n    # Initialize mask to 0\n    mask = 0\n\n    # Set all odd bits in the mask\n    i = 0\n    while (1 << (2 * i)) <= n:\n        mask |= (1 << (2 * i))\n        i += 1\n\n    # Apply the mask to the number using bitwise OR\n    return n | mask\n\n# Example usage:\nnumber = 10  # Binary: 1010\ntry:\n    result = set_odd_bits(number)\n    print(f\"Given number: {number} (binary: {bin(number)[2:]})\")\n    print(f\"Result after setting odd bits: {result} (binary: {bin(result)[2:]})\")\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpyyt3kq15.py\", line 24, in <module>\n    assert odd_bit_set_number(10) == 15\nNameError: name 'odd_bit_set_number' is not defined", "passed": false}
{"task_id": 49, "requirement": "Code Standard", "completion": "def specified_element(two_d_list, index=0):\n    \"\"\"\n    Extracts the element at the specified index from each sublist within a two-dimensional list.\n\n    Parameters:\n    two_d_list (list of lists): The two-dimensional list to process.\n    index (int): The index of the element to extract from each sublist. Defaults to 0 (first element).\n\n    Returns:\n    list: A list containing the extracted elements.\n\n    Raises:\n    IndexError: If the provided index is out of range for any sublist.\n    TypeError: If two_d_list is not a list of lists.\n    \"\"\"\n    # Check if the input list is empty\n    if not two_d_list:\n        return []\n\n    # Check if all elements in two_d_list are lists themselves\n    if not all(isinstance(sublist, list) for sublist in two_d_list):\n        raise TypeError(\"two_d_list must be a list of lists\")\n\n    try:\n        return [sublist[index] for sublist in two_d_list]\n    except IndexError:\n        raise IndexError(f\"Provided index {index} is out of range for some sublists.\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp594agdx4.py\", line 9, in specified_element\n    return [sublist[index] for sublist in two_d_list]\n  File \"/tmp/tmp594agdx4.py\", line 9, in <listcomp>\n    return [sublist[index] for sublist in two_d_list]\nIndexError: list index out of range\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmp594agdx4.py\", line 16, in <module>\n    try: specified_element([[1, 2], [3, 4]], 3)\n  File \"/tmp/tmp594agdx4.py\", line 11, in specified_element\n    raise IndexError(f\"Provided index {index} is out of range for some sublists.\")\nIndexError: Provided index 3 is out of range for some sublists.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmp594agdx4.py\", line 17, in <module>\n    except IndexError as e: assert str(e) == 'Index out of range for sublist'\nAssertionError", "passed": false}
{"task_id": 51, "requirement": "Code Standard", "completion": "def check_equilateral(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Check if the triangle with sides a, b, and c is equilateral.\n    \n    Parameters:\n    a (int): Length of the first side.\n    b (int): Length of the second side.\n    c (int): Length of the third side.\n    \n    Returns:\n    bool: True if the triangle is equilateral, False otherwise.\n    \n    Raises:\n    ValueError: If any of the sides are non-positive integers.\n    \"\"\"\n    if a <= 0 or b <= 0 or c <= 0:\n        raise ValueError(\"All sides must be positive integers\")\n    \n    is_equilateral = a == b == c\n    print(\"The triangle is equilateral.\" if is_equilateral else \"The triangle is not equilateral.\")\n    return is_equilateral\n\n# Example usage:\n# print(check_equilateral(5, 5, 5))  # This will print \"The triangle is equilateral.\" and return True\n# print(check_equilateral(5, 6, 5))  # This will print \"The triangle is not equilateral.\" and return False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqkz7h1m2.py\", line 29, in <module>\n    assert cc_visit(inspect.getsource(check_equilateral))[0].complexity ==1\nAssertionError", "passed": false}
{"task_id": 52, "requirement": "Code Standard", "completion": "def parallelogram_area(base: float, height: float) -> float:\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram, which is the perpendicular distance from the base to the opposite side.\n\n    Returns:\n    float: The area of the parallelogram.\n\n    Raises:\n    TypeError: If either base or height is not a numerical value.\n    \"\"\"\n    if not isinstance(base, (int, float)) or not isinstance(height, (int, float)):\n        raise TypeError(\"Both base and height must be numerical values.\")\n    \n    return base * height\n\n# Example usage:\n# area = parallelogram_area(5.0, 3.0)\n# print(f\"The area of the parallelogram is {area}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1fs9xz59.py\", line 36, in <module>\n    assert cc_visit(inspect.getsource(parallelogram_area))[0].complexity ==1\nAssertionError", "passed": false}
{"task_id": 53, "requirement": "Code Standard", "completion": "def check_equality(s: str) -> str:\n    \"\"\"\n    Checks if the first and last characters of a given string are equal.\n\n    Parameters:\n    s (str): The input string to check.\n\n    Returns:\n    str: 'Equal' if the first and last characters are the same, otherwise 'Not Equal'.\n\n    Raises:\n    TypeError: If the input is not a string.\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError('Input must be a string')\n\n    if len(s) == 0:\n        return 'Equal'\n    \n    if s[0] == s[-1]:\n        return 'Equal'\n    else:\n        return 'Not Equal'\n\n# Example usage:\nprint(check_equality(\"radar\"))  # Output: Equal\nprint(check_equality(\"python\")) # Output: Not Equal\nprint(check_equality(\"\"))       # Output: Equal\ntry:\n    print(check_equality(123))  # This will raise a TypeError\nexcept TypeError as e:\n    print(e)                    # Output: Input must be a string\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3agdgcqu.py\", line 32, in <module>\n    assert cc_visit(inspect.getsource(check_equality))[0].complexity <=3\nAssertionError", "passed": false}
{"task_id": 54, "requirement": "Code Standard", "completion": "from typing import List\n\ndef counting_sort(arr: List[int]) -> List[int]:\n    \"\"\"\n    Sorts a list of integers using the counting sort algorithm.\n    \n    Parameters:\n    arr (List[int]): A list of integers to be sorted.\n    \n    Returns:\n    List[int]: A sorted list of integers.\n    \n    Raises:\n    TypeError: If the input is not a list or contains non-integer elements.\n    \"\"\"\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements in the list must be integers.\")\n    \n    if len(arr) == 0:\n        return []\n    \n    min_val = min(arr)\n    max_val = max(arr)\n    \n    if min_val < 0:\n        # Adjust values to handle negative integers\n        arr = [x - min_val for x in arr]\n        max_val -= min_val\n    \n    # Initialize count array with zeros\n    count = [0] * (max_val + 1)\n    \n    # Count each element in the input array\n    for num in arr:\n        count[num] += 1\n    \n    # Modify count array such that each element at each index\n    # stores the sum of previous counts\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    \n    # Output array to store the sorted elements\n    output = [0] * len(arr)\n    \n    # Build the output array\n    for num in reversed(arr):\n        output[count[num] - 1] = num + min_val\n        count[num] -= 1\n    \n    return output\n\n# Example usage:\narr = [4, 2, 2, 8, 3, 3, 1]\nsorted_arr = counting_sort(arr)\nprint(sorted_arr)  # Output: [1, 2, 2, 3, 3, 4, 8]\n\narr_with_negatives = [-4, -2, -2, 0, 3, 3, 1]\nsorted_arr_with_negatives = counting_sort(arr_with_negatives)\nprint(sorted_arr_with_negatives)  # Output: [-4, -2, -2, 0, 1, 3, 3]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_hxa19yr.py\", line 38, in <module>\n    assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\nAssertionError", "passed": false}
{"task_id": 55, "requirement": "Code Standard", "completion": "def tn_gp(a: int, r: int, n: int) -> int:\n    \"\"\"\n    Calculate the n-th term of a geometric series.\n\n    Parameters:\n    a (int): The first term of the geometric series.\n    r (int): The common ratio of the geometric series.\n    n (int): The term number to calculate in the series.\n\n    Returns:\n    int: The value of the n-th term in the geometric series.\n\n    Raises:\n    ValueError: If n is less than 1.\n    \"\"\"\n    if n < 1:\n        raise ValueError('Term number must be greater than 0')\n\n    # Handle the edge case where the common ratio (r) is zero\n    if r == 0 and n > 1:\n        return 0\n\n    # Calculate the n-th term using the formula a_n = a * r^(n-1)\n    nth_term = a * (r ** (n - 1))\n    return nth_term\n\n# Example usage:\n# Find the 5th term of a geometric series with the first term 2 and common ratio 3\nprint(tn_gp(2, 3, 5))  # Output should be 486\n\n# Edge case where the common ratio is zero\nprint(tn_gp(2, 0, 3))  # Output should be 0\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpzaq8bbr7.py\", line 15, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "requirement": "Code Standard", "completion": "def check(n: int) -> bool:\n    \"\"\"\n    Checks if a given number is one less than twice its reverse.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the condition is met, False otherwise.\n\n    Raises:\n        TypeError: If the input is not an integer.\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n\n    # Convert the number to a string to reverse it easily\n    num_str = str(n)\n    # Reverse the string representation of the number\n    reversed_num_str = num_str[::-1]\n    # Convert the reversed string back to an integer\n    reversed_num = int(reversed_num_str)\n    # Calculate twice the reversed number\n    twice_reversed = 2 * reversed_num\n    # Check if the original number is one less than twice the reversed number\n    return n == twice_reversed - 1\n\n# Example usage:\nprint(check(7))   # Output: False\nprint(check(21))  # Output: False (for illustration, actual test case needed)\nprint(check(35))  # Output: False (for illustration, actual test case needed)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpndnwk1vz.py\", line 28, in <module>\n    assert check(1) == False\nAssertionError", "passed": false}
{"task_id": 57, "requirement": "Code Standard", "completion": "from typing import List\n\ndef find_max_num(digits: List[int], n: int) -> int:\n    \"\"\"\n    Find the largest number that can be formed with the given digits.\n\n    Args:\n        digits (List[int]): A list of integers (digits).\n        n (int): The number of digits to use to form the largest number.\n\n    Returns:\n        int: The largest number that can be formed.\n\n    Raises:\n        ValueError: If the number of digits specified exceeds the length of the list.\n    \"\"\"\n    if n > len(digits):\n        raise ValueError('Number of digits exceeds the length of the list.')\n    \n    if not digits:\n        return 0\n    \n    # Sort the digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n    \n    # Take the first n digits to form the largest number\n    max_num_str = ''.join(map(str, sorted_digits[:n]))\n    \n    return int(max_num_str)\n\n# Example usage:\ntry:\n    print(find_max_num([3, 30, 34, 5, 9], 3))  # Output: 953\n    print(find_max_num([1, 2, 3, 4, 5], 5))    # Output: 54321\n    print(find_max_num([], 2))                 # Output: 0\n    print(find_max_num([1, 2, 3, 4, 5], 6))    # Raises ValueError\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp31z73vxq.py\", line 29, in <module>\n    assert find_max_num.__annotations__ == {'digits': list, 'n': int, 'return': int}\nAssertionError", "passed": false}
{"task_id": 58, "requirement": "Code Standard", "completion": "def opposite_signs(a: int, b: int) -> bool:\n    \"\"\"\n    Check if the two integers a and b have opposite signs.\n\n    Parameters:\n    a (int): First integer.\n    b (int): Second integer.\n\n    Returns:\n    bool: True if a and b have opposite signs, False otherwise.\n\n    Raises:\n    TypeError: If either a or b is not an integer.\n    \"\"\"\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise TypeError(\"Both inputs must be integers.\")\n    \n    return (a * b) < 0\n\n\n# Example usage:\nprint(opposite_signs(10, -20))  # Output: True\nprint(opposite_signs(-5, -10))  # Output: False\nprint(opposite_signs(0, 10))    # Output: False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpffdugtnb.py\", line 27, in <module>\n    assert opposite_signs(0, -1) == True\nAssertionError", "passed": false}
{"task_id": 59, "requirement": "Code Standard", "completion": "def is_octagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth octagonal number.\n    \n    Parameters:\n        n (int): The position in the sequence of octagonal numbers.\n        \n    Returns:\n        int: The nth octagonal number.\n        \n    Raises:\n        ValueError: If n is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return n * (3 * n - 2)\n\n# Example usage:\nprint(is_octagonal(1))  # Output: 1\nprint(is_octagonal(2))  # Output: 8\nprint(is_octagonal(3))  # Output: 21\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2n3b1op0.py\", line 13, in <module>\n    is_octagonal(-1)\n  File \"/tmp/tmp2n3b1op0.py\", line 3, in is_octagonal\n    raise ValueError(\"Input must be a positive integer.\")\nValueError: Input must be a positive integer.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmp2n3b1op0.py\", line 15, in <module>\n    assert str(e) == 'Input must be a positive integer'\nAssertionError", "passed": false}
{"task_id": 60, "requirement": "Code Standard", "completion": "from typing import List\n\ndef max_len_sub(arr: List[int], k: int) -> int:\n    \"\"\"\n    Finds the maximum length of a subsequence with the absolute difference \n    between adjacent elements not exceeding k.\n    \n    Parameters:\n    arr (List[int]): The input array.\n    k (int): The maximum allowed absolute difference between adjacent elements.\n    \n    Returns:\n    int: The length of the longest such subsequence.\n    \n    Raises:\n    TypeError: If `arr` is not a list or `k` is not an integer.\n    \"\"\"\n    if not isinstance(arr, list):\n        raise TypeError(\"The first argument must be a list.\")\n    if not isinstance(k, int):\n        raise TypeError(\"The second argument must be an integer.\")\n    \n    if not arr:\n        return 0\n    \n    # Dictionary to store the length of the longest subsequence ending with each element\n    dp = {}\n    max_length = 1\n    \n    for num in arr:\n        # Calculate the length of the longest subsequence ending with num\n        current_max = 1\n        for prev_num, length in dp.items():\n            if abs(num - prev_num) <= k:\n                current_max = max(current_max, length + 1)\n        \n        dp[num] = current_max\n        max_length = max(max_length, current_max)\n    \n    return max_length\n\n# Example usage:\nif __name__ == \"__main__\":\n    arr = [4, 2, 3, 4, 5, 6]\n    k = 1\n    print(max_len_sub(arr, k))  # Output should be 5 because the longest subsequence is [2, 3, 4, 5, 6]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpeaw5zcn1.py\", line 26, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nAssertionError", "passed": false}

{"task_id": 11, "requirement": "Edge Case Handling", "completion": "def remove_occ(s: str, char: str) -> str:\n    \"\"\"\n    Remove the first and last occurrence of the specified character from the string.\n    \n    Parameters:\n    s (str): The input string.\n    char (str): The character to be removed from the string.\n    \n    Returns:\n    str: The modified string with the first and last occurrence of the specified character removed.\n    \n    Raises:\n    ValueError: If the second parameter is not a single character.\n    \"\"\"\n    if len(char) != 1:\n        raise ValueError('Second parameter must be a single character.')\n    \n    if not s or char not in s:\n        return s\n    \n    first_occurrence = s.find(char)\n    last_occurrence = s.rfind(char)\n    \n    # If the character occurs only once, remove just that occurrence\n    if first_occurrence == last_occurrence:\n        return s[:first_occurrence] + s[first_occurrence+1:]\n    \n    # Construct the new string without the first and last occurrence of the character\n    part1 = s[:first_occurrence] + s[first_occurrence+1:last_occurrence]\n    part2 = s[last_occurrence+1:]\n    \n    return part1 + part2\n\n# Example usage:\nprint(remove_occ(\"hello world\", \"l\"))  # Output: \"heo word\"\nprint(remove_occ(\"banana\", \"a\"))       # Output: \"bnn\"\nprint(remove_occ(\"apple\", \"p\"))        # Output: \"ale\"\nprint(remove_occ(\"test\", \"x\"))         # Output: \"test\" (no 'x' in the string)\n", "result": "passed", "passed": true}
{"task_id": 12, "requirement": "Edge Case Handling", "completion": "def sort_matrix(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n    \n    :param matrix: List[List[int]], a 2D list representing the matrix.\n    :return: List[List[int]], the sorted matrix.\n    :raises: TypeError if the input is not a list of lists or if any element is not an integer.\n    \"\"\"\n    # Check if the input is a list of lists\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise TypeError(\"Input must be a list of lists.\")\n    \n    # Handle empty matrix\n    if len(matrix) == 0:\n        return []\n    \n    # Validate that all elements are integers\n    for row in matrix:\n        if not all(isinstance(element, int) for element in row):\n            raise TypeError(\"All elements in the matrix must be integers.\")\n    \n    # Sort the matrix based on the sum of each row\n    sorted_matrix = sorted(matrix, key=sum)\n    return sorted_matrix\n\n# Example usage:\nif __name__ == \"__main__\":\n    matrix = [\n        [3, 4, 7],\n        [1, 2, 3],\n        [8, 0, 2]\n    ]\n    print(\"Original Matrix:\")\n    for row in matrix:\n        print(row)\n    \n    sorted_matrix = sort_matrix(matrix)\n    print(\"\\nSorted Matrix:\")\n    for row in sorted_matrix:\n        print(row)\n    \n    # Test with an empty matrix\n    empty_matrix = []\n    print(\"\\nEmpty Matrix Sorted:\")\n    for row in sort_matrix(empty_matrix):\n        print(row)\n    \n    # Test with invalid input\n    try:\n        invalid_matrix = [[1, 2], [3, \"a\"]]\n        sort_matrix(invalid_matrix)\n    except TypeError as e:\n        print(f\"\\nError: {e}\")\n", "result": "passed", "passed": true}
{"task_id": 13, "requirement": "Edge Case Handling", "completion": "from collections import Counter\n\ndef count_common(word_list):\n    \"\"\"\n    Counts the most common words in a list of strings.\n\n    :param word_list: A list of strings.\n    :return: A list of tuples representing the most common words and their counts.\n    :raises: TypeError if the input is not a list of strings.\n    \"\"\"\n    if not isinstance(word_list, list) or not all(isinstance(item, str) for item in word_list):\n        raise TypeError(\"Input must be a list of strings\")\n\n    # Handle empty list case\n    if not word_list:\n        return []\n\n    # Count the frequency of each word\n    word_counts = Counter(word_list)\n\n    # Return the most common words as a list of tuples (word, count)\n    return word_counts.most_common()\n\n# Example usage:\nexample_list = [\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"]\ncommon_words = count_common(example_list)\nprint(common_words)  # Prints the most common words and their counts\n\n# Test with an empty list\nempty_list = []\ncommon_words_empty = count_common(empty_list)\nprint(common_words_empty)  # Should print []\n\n# Test with invalid input\ntry:\n    invalid_input = [\"apple\", 42, \"banana\"]\n    count_common(invalid_input)\nexcept TypeError as e:\n    print(e)  # Should raise a TypeError\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3ap4m1a4.py\", line 26, in <module>\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nAssertionError", "passed": false}
{"task_id": 14, "requirement": "Edge Case Handling", "completion": "def find_volume(base_area, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    - base_area (float): The area of the triangular base.\n    - height (float): The height of the triangular prism.\n    - length (float): The length of the triangular prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n\n    Raises:\n    ValueError: If any of the inputs are non-positive or non-numeric.\n    \"\"\"\n    # Validate inputs\n    if not (isinstance(base_area, (int, float)) and isinstance(height, (int, float)) and isinstance(length, (int, float))):\n        raise ValueError('All dimensions must be positive numbers.')\n    if base_area <= 0 or height <= 0 or length <= 0:\n        raise ValueError('All dimensions must be positive numbers.')\n\n    # Calculate the volume\n    volume = base_area * height * length\n    return volume\n\n# Example usage:\ntry:\n    # Valid inputs\n    volume = find_volume(5.0, 4.0, 10.0)\n    print(f\"The volume of the triangular prism is {volume} cubic units.\")\n\n    # Edge case: minimum positive value\n    volume = find_volume(0.0001, 0.0001, 0.0001)\n    print(f\"The volume of the triangular prism with very small dimensions is {volume} cubic units.\")\n    \nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgo5jyhwb.py\", line 20, in <module>\n    assert find_volume(10,8,6) == 240\nAssertionError", "passed": false}
{"task_id": 15, "requirement": "Edge Case Handling", "completion": "import re\n\ndef split_lowerstring(input_string):\n    # Check if the input is a string\n    if not isinstance(input_string, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Check if the input string contains any lowercase letters\n    if not any(c.islower() for c in input_string):\n        return []\n    \n    # Use regex to split the string at lowercase letters\n    # The pattern r'(?<=[a-z])' looks for a position right after a lowercase letter\n    return re.split(r'(?<=[a-z])', input_string)\n\n# Example usage:\nexample_string = \"HelloWorldPython\"\nresult = split_lowerstring(example_string)\nprint(result)  # Output will be ['H', 'ello', 'W', 'orld', 'P', 'ython']\n\nexample_string_no_lowercase = \"HELLOWORLDPYTHON\"\nresult = split_lowerstring(example_string_no_lowercase)\nprint(result)  # Output will be []\n\nexample_string_empty = \"\"\nresult = split_lowerstring(example_string_empty)\nprint(result)  # Output will be []\n\ntry:\n    result = split_lowerstring(12345)\nexcept TypeError as e:\n    print(e)  # Output will be \"Input must be a string\"\n", "result": "failed: File \"/tmp/tmp93b3sh5d.py\", line 30\n    try: split_lowerstring(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 16, "requirement": "Edge Case Handling", "completion": "import re\n\ndef text_lowercase_underscore(text):\n    # Check if the input is a string\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Define the pattern to match sequences of lowercase letters joined with underscores\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    \n    # Use re.search to find if there is any match of the pattern in the text\n    match = re.search(pattern, text)\n    \n    # Return 'Found a match!' if there is at least one match, otherwise return 'Not matched!'\n    if match:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\nexample_text1 = \"This is a_test_string with some_lowercase_sequences and_more_examples.\"\nexample_text2 = \"NoUnderscoreHere!\"\nexample_text3 = \"\"\n\nprint(text_lowercase_underscore(example_text1))  # Output: Found a match!\nprint(text_lowercase_underscore(example_text2))  # Output: Not matched!\nprint(text_lowercase_underscore(example_text3))  # Output: Not matched!\n", "result": "passed", "passed": true}
{"task_id": 17, "requirement": "Edge Case Handling", "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Parameters:\n    side_length (int): The length of one side of the square.\n\n    Returns:\n    int: The perimeter of the square.\n\n    Raises:\n    ValueError: If the side length is negative.\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    return 4 * side_length\n\n# Example usage:\nside = 5\nprint(f\"The perimeter of a square with side length {side} is {square_perimeter(side)}\")\n\nside_zero = 0\nprint(f\"The perimeter of a square with side length {side_zero} is {square_perimeter(side_zero)}\")\n", "result": "passed", "passed": true}
{"task_id": 18, "requirement": "Edge Case Handling", "completion": "def remove_dirty_chars(source_str, dirty_chars):\n    \"\"\"\n    Removes characters from source_str that are present in dirty_chars.\n    \n    :param source_str: The original string from which characters will be removed.\n    :param dirty_chars: A string containing characters to be removed from source_str.\n    :return: A new string with the specified characters removed.\n    :raises ValueError: If any of the input strings contain non-alphabetic characters.\n    :raises TypeError: If either of the inputs is not a string.\n    \"\"\"\n    # Check if inputs are strings\n    if not isinstance(source_str, str) or not isinstance(dirty_chars, str):\n        raise TypeError(\"Inputs must be strings.\")\n    \n    # Check if strings contain only alphabetic characters\n    if not source_str.isalpha() or not dirty_chars.isalpha():\n        raise ValueError(\"Input strings must only contain alphabetic characters.\")\n    \n    # If dirty_chars is empty, return the original string\n    if dirty_chars == \"\":\n        return source_str\n    \n    # Create a set of characters to remove for faster lookup\n    dirty_set = set(dirty_chars)\n    \n    # Use list comprehension to filter out unwanted characters\n    cleaned_str = ''.join([char for char in source_str if char not in dirty_set])\n    \n    return cleaned_str\n\n# Example usage:\ntry:\n    source_string = \"hello world\"\n    dirty_characters = \"ld\"\n    cleaned_string = remove_dirty_chars(source_string, dirty_characters)\n    print(cleaned_string)  # Output: \"heo wor\"\n\n    source_string = \"hello world\"\n    dirty_characters = \"\"\n    cleaned_string = remove_dirty_chars(source_string, dirty_characters)\n    print(cleaned_string)  # Output: \"helloworld\"\n\n    source_string = \"hello123\"\n    dirty_characters = \"ld\"\n    cleaned_string = remove_dirty_chars(source_string, dirty_characters)\nexcept ValueError as ve:\n    print(ve)  # Expected output: Input strings must only contain alphabetic characters.\nexcept TypeError as te:\n    print(te)  # Expected output: Inputs must be strings.\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppxkrxpyf.py\", line 45, in <module>\n    assert remove_dirty_chars('example', '') == 'example', 'Function should return the original string if the second string is empty.'\n  File \"/tmp/tmppxkrxpyf.py\", line 7, in remove_dirty_chars\n    raise ValueError(\"Input strings must only contain alphabetic characters.\")\nValueError: Input strings must only contain alphabetic characters.", "passed": false}
{"task_id": 19, "requirement": "Edge Case Handling", "completion": "def test_duplicate(nums):\n    # Check if input is a list\n    if not isinstance(nums, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in nums):\n        raise ValueError(\"Input must be a list of integers\")\n    \n    # Using a set to track seen numbers\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\n# Example usage:\ntry:\n    nums = [1, 2, 3, 4, 5, 1]\n    print(test_duplicate(nums))  # Output: True\n\n    nums = [1, 2, 3, 4, 5]\n    print(test_duplicate(nums))  # Output: False\n\n    nums = []\n    print(test_duplicate(nums))  # Output: False\n\n    nums = [1]\n    print(test_duplicate(nums))  # Output: False\n\n    # This should raise TypeError\n    test_duplicate(\"not a list\")\n\n    # This should raise ValueError\n    test_duplicate([1, 2, \"three\", 4])\nexcept (TypeError, ValueError) as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppvy47ug9.py\", line 43, in <module>\n    test_duplicate(None)\n  File \"/tmp/tmppvy47ug9.py\", line 4, in test_duplicate\n    raise TypeError(\"Input must be a list\")\nTypeError: Input must be a list\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmppvy47ug9.py\", line 46, in <module>\n    assert str(e) == 'Input must be a list of integers'\nAssertionError", "passed": false}
{"task_id": 20, "requirement": "Edge Case Handling", "completion": "def is_woodall(num):\n    \"\"\"\n    Check if the given number is a Woodall number.\n    \n    A Woodall number is defined as n * 2^n - 1 for some integer n.\n    \n    Parameters:\n    num (int): The number to check.\n    \n    Returns:\n    bool: True if the number is a Woodall number, False otherwise.\n    \n    Raises:\n    TypeError: If the input is not an integer.\n    \"\"\"\n    if not isinstance(num, int):\n        raise TypeError(\"Input must be an integer.\")\n    \n    if num < 0:\n        return False\n    \n    n = 1\n    while True:\n        woodall_number = n * 2**n - 1\n        if woodall_number == num:\n            return True\n        elif woodall_number > num:\n            return False\n        n += 1\n\n# Example usage:\nprint(is_woodall(7))   # False, because 7 is not a Woodall number\nprint(is_woodall(23))  # True, because 3*2^3 - 1 = 23\nprint(is_woodall(24))  # False, because 24 is not a Woodall number\nprint(is_woodall(0))   # False, because 0 is not a Woodall number\nprint(is_woodall(-5))  # False, because negative numbers are not Woodall numbers\n", "result": "passed", "passed": true}
{"task_id": 21, "requirement": "Edge Case Handling", "completion": "def multiples_of_num(n, m):\n    \"\"\"\n    Generates a list of m multiples of n.\n    \n    Parameters:\n    n (int): The base number to find multiples of.\n    m (int): The number of multiples to generate.\n    \n    Returns:\n    list: A list of m multiples of n.\n    \n    Raises:\n    ValueError: If either n or m is negative.\n    \"\"\"\n    if n < 0 or m < 0:\n        raise ValueError(\"Both n and m must be non-negative.\")\n    \n    return [n * i for i in range(1, m + 1)]\n\n# Example usage:\nprint(multiples_of_num(5, 4))  # Output: [5, 10, 15, 20]\nprint(multiples_of_num(3, 0))  # Output: []\n# print(multiples_of_num(-1, 5))  # Raises ValueError\n# print(multiples_of_num(5, -1))  # Raises ValueError\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpcnr2gb0n.py\", line 10, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "requirement": "Edge Case Handling", "completion": "def find_first_duplicate(arr):\n    \"\"\"\n    Finds the first duplicate element in an array of integers.\n\n    :param arr: List[int] - The array of integers to search for duplicates.\n    :return: int - The first duplicate integer found, -1 if the list is empty, or None if no duplicates exist.\n    :raises: TypeError - If the input is not a list of integers.\n    \"\"\"\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements in the list must be integers.\")\n    \n    if len(arr) == 0:\n        return -1\n    \n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    \n    return None\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_array = [2, 5, 1, 2, 3, 5, 1, 2, 4]\n    print(find_first_duplicate(example_array))  # Output should be 2\n    \n    empty_array = []\n    print(find_first_duplicate(empty_array))  # Output should be -1\n    \n    invalid_input = [2, \"5\", 1]\n    try:\n        print(find_first_duplicate(invalid_input))\n    except TypeError as e:\n        print(e)  # Output should indicate a TypeError\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmph3eg60dg.py\", line 26, in <module>\n    assert find_first_duplicate([1, 2, 3, 4])==-1\nAssertionError", "passed": false}
{"task_id": 23, "requirement": "Edge Case Handling", "completion": "def maximum_sum(list_of_lists):\n    # Check if the input is a list of lists\n    if not isinstance(list_of_lists, list) or not all(isinstance(sublist, list) for sublist in list_of_lists):\n        raise TypeError(\"Input must be a list of lists.\")\n    \n    # Check if all sublists are empty\n    if all(len(sublist) == 0 for sublist in list_of_lists):\n        return 0\n    \n    # Initialize max_sum to 0\n    max_sum = 0\n    \n    # Iterate over each sublist\n    for sublist in list_of_lists:\n        # Check if sublist contains only integers\n        if not all(isinstance(item, int) for item in sublist):\n            raise TypeError(\"All elements in sublists must be integers.\")\n        \n        # Calculate the sum of the current sublist and update max_sum if needed\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n    \n    return max_sum\n\n# Example usage:\nexample_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(maximum_sum(example_list))  # Output will be 24\n\nempty_list = []\nprint(maximum_sum(empty_list))  # Output will be 0\n\nall_empty_sublists = [[], [], []]\nprint(maximum_sum(all_empty_sublists))  # Output will be 0\n", "result": "failed: File \"/tmp/tmpgri1fhiv.py\", line 31\n    try: maximum_sum([[1, 2], [3, 'a']]); assert False, 'Expected TypeError' except TypeError: pass\n                                                                             ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 24, "requirement": "Edge Case Handling", "completion": "def binary_to_decimal(binary_str):\n    \"\"\"\n    Convert a binary number (given as a string) to its decimal equivalent.\n    \n    Parameters:\n    - binary_str (str): A string representing a binary number.\n    \n    Returns:\n    - int: The decimal equivalent of the binary number.\n    \n    Raises:\n    - ValueError: If the input string contains characters other than '0' or '1'.\n    \n    Examples:\n    >>> binary_to_decimal('1011')\n    11\n    >>> binary_to_decimal('')\n    0\n    >>> binary_to_decimal('1021')\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid binary number\n    \"\"\"\n    # Handle empty string case\n    if binary_str == '':\n        return 0\n    \n    # Check if the string contains only '0' or '1'\n    if not all(char in '01' for char in binary_str):\n        raise ValueError('Invalid binary number')\n    \n    # Convert binary to decimal\n    return int(binary_str, 2)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    test_cases = [\"1011\", \"\", \"1021\", \"11001\"]\n    \n    for test in test_cases:\n        try:\n            decimal_number = binary_to_decimal(test)\n            print(f\"The decimal equivalent of binary {test} is {decimal_number}\")\n        except ValueError as e:\n            print(e)\n", "result": "failed: File \"/tmp/tmp91_xk0i3.py\", line 23\n    try: binary_to_decimal('102'); assert False, 'Expected ValueError' except ValueError as e: assert str(e) == 'Invalid binary number'\n                                                                       ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 25, "requirement": "Edge Case Handling", "completion": "from functools import reduce\nfrom operator import mul\n\ndef find_product(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements in the list must be integers\")\n    \n    # Identify unique elements in the array\n    unique_elements = set(arr)\n    \n    # Calculate the product of unique elements\n    if not unique_elements:\n        return 1  # Return 1 if the set of unique elements is empty\n    \n    # Use reduce to multiply all elements together\n    product = reduce(mul, unique_elements, 1)\n    \n    return product\n\n# Example usage:\narr_empty = []\narr_duplicates = [1, 2, 3, 2, 4]\n\nprint(find_product(arr_empty))       # Output should be 1\nprint(find_product(arr_duplicates))  # Output should be 24\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3ptoji9h.py\", line 23, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "requirement": "Edge Case Handling", "completion": "def check_k_elements(tuples_list, k):\n    \"\"\"\n    Check if every tuple in the provided list of tuples has exactly k elements.\n\n    :param tuples_list: List of tuples to be checked.\n    :param k: The number of elements each tuple should have.\n    :return: True if every tuple has exactly k elements, False otherwise.\n    :raises TypeError: If tuples_list is not a list or k is not an integer,\n                       or if any element of tuples_list is not a tuple.\n    \"\"\"\n    # Type checking for input parameters\n    if not isinstance(tuples_list, list):\n        raise TypeError(\"tuples_list must be a list\")\n    if not isinstance(k, int):\n        raise TypeError(\"k must be an integer\")\n\n    # Check each element in the list to ensure it is a tuple\n    for item in tuples_list:\n        if not isinstance(item, tuple):\n            raise TypeError(\"Each element in tuples_list must be a tuple\")\n\n    # Handle the case where the list is empty\n    if not tuples_list:\n        return True  # An empty list trivially satisfies the condition\n\n    # Iterate over each tuple in the list\n    for tup in tuples_list:\n        if len(tup) != k:\n            return False  # Return False if any tuple does not have exactly k elements\n    return True  # Return True if all tuples have exactly k elements\n\n# Example usage:\nexample_tuples = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nk = 3\nprint(check_k_elements(example_tuples, k))  # Output: True\n\nexample_tuples_with_mismatch = [(1, 2, 3), (4, 5), (7, 8, 9)]\nk = 3\nprint(check_k_elements(example_tuples_with_mismatch, k))  # Output: False\n\nempty_list = []\nk = 3\nprint(check_k_elements(empty_list, k))  # Output: True\n\ntuple_with_zero_elements = [(), (), ()]\nk = 0\nprint(check_k_elements(tuple_with_zero_elements, k))  # Output: True\n\ninvalid_input = \"not a list\"\ntry:\n    print(check_k_elements(invalid_input, k))\nexcept TypeError as e:\n    print(e)  # Output: tuples_list must be a list\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdoh7_lmq.py\", line 37, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "requirement": "Edge Case Handling", "completion": "def remove(strings):\n    \"\"\"\n    Removes all digits from each string in the given list.\n    \n    :param strings: List of strings from which digits will be removed.\n    :return: A new list of strings with all digits removed.\n    :raises TypeError: If the input is not a list or if any element in the list is not a string.\n    \"\"\"\n    if not isinstance(strings, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    cleaned_strings = []\n    for string in strings:\n        if not isinstance(string, str):\n            raise TypeError(\"All elements in the list must be strings.\")\n        cleaned_string = ''.join(char for char in string if not char.isdigit())\n        cleaned_strings.append(cleaned_string)\n    \n    return cleaned_strings\n\n# Example usage:\ntry:\n    example_list = [\"abc123\", \"def456ghi789\", \"0jkl\", \"\"]\n    cleaned_list = remove(example_list)\n    print(cleaned_list)  # Output: ['abc', 'defghi', 'jkl', '']\nexcept TypeError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 28, "requirement": "Edge Case Handling", "completion": "def binomial_coeff(n, k):\n    \"\"\"\n    Calculate the binomial coefficient, also known as \"n choose k\".\n\n    Parameters:\n    n (int): The total number of items.\n    k (int): The number of items to choose.\n\n    Returns:\n    int: The binomial coefficient.\n\n    Raises:\n    ValueError: If n or k are negative, or if k is greater than n.\n    \"\"\"\n    if n < 0 or k < 0:\n        raise ValueError('Inputs must be non-negative.')\n    if k > n:\n        raise ValueError('k must not be greater than n.')\n\n    # Base cases\n    if k == 0 or n == k:\n        return 1\n\n    # Optimization: Take advantage of symmetry, C(n, k) == C(n, n-k)\n    k = min(k, n - k)\n\n    # Compute binomial coefficient iteratively to avoid large intermediate factorials\n    coeff = 1\n    for i in range(1, k + 1):\n        coeff *= n - (k - i)\n        coeff //= i\n\n    return coeff\n\n# Example usage:\ntry:\n    print(binomial_coeff(5, 2))  # Output: 10\n    print(binomial_coeff(5, 5))  # Output: 1\n    print(binomial_coeff(5, 0))  # Output: 1\n    print(binomial_coeff(5, -1)) # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpf10n0l98.py\", line 29, in <module>\n    try: binomial_coeff(-1, 2)\n  File \"/tmp/tmpf10n0l98.py\", line 3, in binomial_coeff\n    raise ValueError('Inputs must be non-negative.')\nValueError: Inputs must be non-negative.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpf10n0l98.py\", line 30, in <module>\n    except ValueError as e: assert str(e) == 'Inputs must be non-negative and k must not be greater than n'\nAssertionError", "passed": false}
{"task_id": 29, "requirement": "Edge Case Handling", "completion": "def get_odd_occurrence(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list of integers\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements in the list must be integers\")\n    \n    # Handle empty list case\n    if len(arr) == 0:\n        return None\n    \n    # Create a dictionary to store counts of each element\n    count_dict = {}\n    \n    # Iterate through the array and update counts in the dictionary\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Find and return the first element with an odd count\n    for num, count in count_dict.items():\n        if count % 2 != 0:\n            return num\n    \n    # If no such element is found, return None\n    return None\n\n# Example usage:\narr1 = [1, 2, 3, 2, 3, 1, 3]\nprint(get_odd_occurrence(arr1))  # Output should be 3\n\narr2 = []\nprint(get_odd_occurrence(arr2))  # Output should be None\n\narr3 = [1, 2, \"3\", 2, 3, 1, 3]\ntry:\n    print(get_odd_occurrence(arr3))\nexcept TypeError as e:\n    print(e)  # Expected to raise a TypeError\n\narr4 = \"not a list\"\ntry:\n    print(get_odd_occurrence(arr4))\nexcept TypeError as e:\n    print(e)  # Expected to raise a TypeError\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppfke6kle.py\", line 40, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "requirement": "Edge Case Handling", "completion": "def count_substring_with_equal_ends(s):\n    \"\"\"\n    Counts all substrings of the given string s that start and end with the same character.\n\n    :param s: Input string\n    :return: The number of substrings that start and end with the same character.\n    :raises: TypeError if the input is not a string.\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n\n    n = len(s)\n    if n == 0:\n        return 0\n\n    # This will store the frequency of each character in the string\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # The total count of such substrings\n    total_count = 0\n\n    # For each character, calculate how many substrings can be formed\n    for count in char_count.values():\n        # If a character appears 'k' times, then there are k*(k+1)/2 substrings\n        # that start and end with this character.\n        total_count += count * (count + 1) // 2\n\n    return total_count\n\n# Example usage\ns = \"abcab\"\nprint(count_substring_with_equal_ends(s))  # Output should be 7\n\nempty_string = \"\"\nprint(count_substring_with_equal_ends(empty_string))  # Output should be 0\n\n# Test with non-string input\ntry:\n    print(count_substring_with_equal_ends(123))\nexcept TypeError as e:\n    print(e)  # Should raise TypeError\n", "result": "failed: File \"/tmp/tmpqzeg8n04.py\", line 36\n    try: count_substring_with_equal_ends(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                                  ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 31, "requirement": "Edge Case Handling", "completion": "import heapq\nfrom collections import Counter\n\ndef func(lists, k):\n    # Combine all lists into one list\n    combined_list = []\n    for lst in lists:\n        combined_list.extend(lst)\n    \n    # Check if all input lists are empty\n    if not combined_list:\n        return []\n\n    # Count the frequency of each element\n    freq_counter = Counter(combined_list)\n\n    # Raise a ValueError if k is greater than the number of distinct integers\n    if k > len(freq_counter):\n        raise ValueError(\"k cannot be greater than the number of distinct integers\")\n    \n    # Use a min-heap to keep track of the top k elements\n    # The heap will store tuples of (-count, number) so that the smallest count is at the top\n    # We negate the count because Python's heapq only supports min-heaps\n    heap = []\n    \n    for num, count in freq_counter.items():\n        if len(heap) < k:\n            heapq.heappush(heap, (count, num))\n        else:\n            # If the current count is greater than the smallest count in the heap,\n            # replace the smallest count with the current count\n            if count > heap[0][0]:\n                heapq.heapreplace(heap, (count, num))\n    \n    # Extract the numbers from the heap and sort them based on their counts and values\n    result = [num for count, num in sorted(heap, reverse=True)]\n    \n    return result\n\n# Example usage:\nlists = [\n    [1, 2, 3],\n    [2, 3, 4],\n    [3, 4, 5]\n]\nk = 2\nprint(func(lists, k))  # Output might be [3, 2] depending on the input\n\n# Test with empty lists\nempty_lists = [[], [], []]\nprint(func(empty_lists, k))  # Output should be []\n\n# Test with invalid k\ntry:\n    print(func(lists, 10))\nexcept ValueError as e:\n    print(e)  # Output: k cannot be greater than the number of distinct integers\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpu2866_g8.py\", line 47, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "requirement": "Edge Case Handling", "completion": "def max_prime_factors(n):\n    # Input validation\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError('Input must be a positive integer')\n\n    # Handle the case where n is 1 or 2\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n\n    # Initialize the largest prime factor\n    largest_prime = -1\n\n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n\n    # Now n must be odd, start checking from 3\n    factor = 3\n    while factor * factor <= n:\n        while n % factor == 0:\n            largest_prime = factor\n            n //= factor\n        factor += 2\n\n    # If n becomes a prime number greater than 2\n    if n > 2:\n        largest_prime = n\n\n    return largest_prime\n\n# Example usage:\nprint(max_prime_factors(13195))  # Output should be 29\nprint(max_prime_factors(2))      # Output should be 2\nprint(max_prime_factors(1))      # Output should be 1\n", "result": "passed", "passed": true}
{"task_id": 33, "requirement": "Edge Case Handling", "completion": "def decimal_to_binary(decimal_number):\n    # Check if the input is a non-negative integer\n    if not isinstance(decimal_number, int) or decimal_number < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    if decimal_number == 0:\n        return \"0\"\n    \n    binary_digits = []\n    \n    while decimal_number > 0:\n        remainder = decimal_number % 2\n        binary_digits.append(str(remainder))\n        decimal_number //= 2\n    \n    # Reverse the list of binary digits to get the correct order\n    binary_digits.reverse()\n    \n    return ''.join(binary_digits)\n\n# Example usage:\nprint(decimal_to_binary(10))  # Output: \"1010\"\nprint(decimal_to_binary(255)) # Output: \"11111111\"\nprint(decimal_to_binary(0))   # Output: \"0\"\n\n# Testing error handling\ntry:\n    print(decimal_to_binary(-1))\nexcept ValueError as e:\n    print(e)  # Output: Input must be a non-negative integer\n\ntry:\n    print(decimal_to_binary(3.14))\nexcept ValueError as e:\n    print(e)  # Output: Input must be a non-negative integer\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1k14ua6e.py\", line 28, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "requirement": "Edge Case Handling", "completion": "def find_missing(arr):\n    \"\"\"\n    Finds the missing number in a sorted array of consecutive integers.\n    \n    :param arr: List[int] - A list of sorted integers with exactly one missing number.\n    :return: int - The missing number in the sequence.\n    :raises ValueError: If the input list is not sorted.\n    \"\"\"\n    if not arr:\n        return None  # Return None if the array is empty\n    \n    # Check if the array is sorted\n    if any(arr[i] > arr[i + 1] for i in range(len(arr) - 1)):\n        raise ValueError('Input list must be sorted.')\n\n    # Handle the edge case where the missing number is the smallest number\n    if arr[0] != 1:\n        return 1\n\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        # Check if the middle element is at its expected position\n        if arr[mid] != mid + arr[0]:\n            # If not, check if the left neighbor is also not at its expected position\n            if mid > 0 and arr[mid - 1] == arr[0] + (mid - 1):\n                return arr[0] + mid  # The missing number is here\n            high = mid - 1  # Missing number must be on the left side\n        else:\n            low = mid + 1  # Missing number must be on the right side\n\n    # In case there is no missing number in the given range (though this should not happen as per the problem statement)\n    return None\n\n# Example usage:\narr = [2, 3, 4, 5, 6]\nprint(find_missing(arr))  # Output should be 1\n\narr = [1, 2, 3, 5, 6, 7]\nprint(find_missing(arr))  # Output should be 4\n\narr = [1, 2, 3, 4, 5]\ntry:\n    print(find_missing([5, 4, 3, 2, 1]))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmponhnbeko.py\", line 34, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "requirement": "Edge Case Handling", "completion": "def find_rect_num(n):\n    \"\"\"\n    Finds the n-th rectangular number.\n    \n    Parameters:\n    n (int): The position of the rectangular number in the sequence.\n    \n    Returns:\n    int: The n-th rectangular number.\n    \n    Raises:\n    ValueError: If n is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    return n * (n + 1)\n\n# Example usage:\ntry:\n    print(find_rect_num(1))  # Should output 2\n    print(find_rect_num(5))  # Should output 30\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 37, "requirement": "Edge Case Handling", "completion": "def sort_mixed_list(mixed_list):\n    # Check if the input is a list\n    if not isinstance(mixed_list, list):\n        raise TypeError(\"Input must be a list\")\n\n    # Handle empty list\n    if not mixed_list:\n        return []\n\n    # Separate the list into integers and strings\n    integers = []\n    strings = []\n    \n    # Validate and categorize elements\n    for item in mixed_list:\n        if isinstance(item, int):\n            integers.append(item)\n        elif isinstance(item, str):\n            strings.append(item)\n        else:\n            raise TypeError(\"List must only contain integers and strings\")\n    \n    # Sort the integers and strings separately\n    sorted_integers = sorted(integers)\n    sorted_strings = sorted(strings)\n    \n    # Combine the sorted lists\n    sorted_mixed_list = sorted_integers + sorted_strings\n    \n    return sorted_mixed_list\n\n# Example usage:\nexample_list = [34, \"apple\", 67, \"banana\", 12, \"cherry\"]\nsorted_list = sort_mixed_list(example_list)\nprint(sorted_list)  # Output: [12, 34, 67, 'apple', 'banana', 'cherry']\n\nempty_list = []\nsorted_empty_list = sort_mixed_list(empty_list)\nprint(sorted_empty_list)  # Output: []\n\ninvalid_list = [34, \"apple\", 67, \"banana\", 12, 3.14]\ntry:\n    sort_mixed_list(invalid_list)\nexcept TypeError as e:\n    print(e)  # Output: List must only contain integers and strings\n", "result": "passed", "passed": true}
{"task_id": 38, "requirement": "Edge Case Handling", "completion": "def div_even_odd(numbers):\n    # Initialize variables to store the first even and odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Iterate through the list to find the first even and odd numbers\n    for num in numbers:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        \n        # Break the loop if both even and odd numbers are found\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Check if both even and odd numbers were found\n    if first_even is None:\n        raise ValueError(\"List must contain at least one even number.\")\n    if first_odd is None:\n        raise ValueError(\"List must contain at least one odd number.\")\n    \n    # Handle the case where the first odd number is zero\n    if first_odd == 0:\n        raise ValueError(\"The first odd number cannot be zero.\")\n    \n    # Perform the division and return the result\n    return first_even / first_odd\n\n# Example usage:\nnumbers_list = [7, 3, 4, 8, 9]\ntry:\n    print(div_even_odd(numbers_list))  # Output: 1.3333333333333333\nexcept ValueError as e:\n    print(e)\n\nnumbers_list_with_zero = [7, 0, 3, 4, 8, 9]\ntry:\n    print(div_even_odd(numbers_list_with_zero))  # Output: 0.0\nexcept ValueError as e:\n    print(e)\n", "result": "failed: File \"/tmp/tmp38w2smac.py\", line 39\n    try: div_even_odd([2, 4, 6]); assert False; except ValueError as e: assert str(e) == 'List must contain at least one even and one odd number.'\n                                                ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 39, "requirement": "Edge Case Handling", "completion": "from collections import Counter\n\ndef rearange_string(s):\n    # Validate the input\n    if not isinstance(s, str) or not s.islower() or not s.isalpha():\n        raise ValueError(\"Input must be a non-empty string consisting only of lowercase letters.\")\n    \n    # Count the frequency of each character in the string\n    char_count = Counter(s)\n    \n    # Find the most frequent character\n    max_count = max(char_count.values())\n    \n    # Check if the most frequent character appears more than (length of string + 1) / 2 times\n    if max_count > (len(s) + 1) // 2:\n        return \"\"\n    \n    # Create a list to store the result\n    result = [''] * len(s)\n    index = 0\n    \n    # Place characters in the result list, starting with the most frequent ones\n    for char, count in char_count.most_common():\n        for _ in range(count):\n            if index >= len(s):\n                index = 1  # Start filling from the second position if we've reached the end\n            result[index] = char\n            index += 2\n    \n    return ''.join(result)\n\n# Example usage:\ntry:\n    s = \"aab\"\n    print(rearange_string(s))  # Possible output: \"aba\"\n\n    s = \"aaab\"\n    print(rearange_string(s))  # Output: \"\" since it's not possible to rearrange \"aaab\" without having two 'a's adjacent.\n\n    s = \"aaa\"\n    print(rearange_string(s))  # Output: \"\" since it's not possible to rearrange \"aaa\" without having two 'a's adjacent.\n\n    s = \"123\"\n    print(rearange_string(s))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9iyj3oh6.py\", line 38, in <module>\n    assert rearange_string(\"abccdd\")==('cdabcd')\nAssertionError", "passed": false}
{"task_id": 40, "requirement": "Edge Case Handling", "completion": "from collections import Counter\n\ndef freq_element(list_of_lists):\n    # Check if the input is a list\n    if not isinstance(list_of_lists, list):\n        raise TypeError(\"Input must be a list of lists\")\n    \n    # Check if the list is empty\n    if not list_of_lists:\n        return {}\n    \n    # Check if all elements in the list are lists\n    if not all(isinstance(sublist, list) for sublist in list_of_lists):\n        raise TypeError(\"All elements in the input must be lists\")\n    \n    # Flatten the list of lists into a single list\n    flattened_list = [item for sublist in list_of_lists for item in sublist]\n    \n    # Use Counter to count the frequency of each element\n    freq_counter = Counter(flattened_list)\n    \n    return dict(freq_counter)\n\n# Example usage:\nlist_of_lists = [['apple', 'banana'], ['banana', 'cherry', 'apple'], ['apple']]\nresult = freq_element(list_of_lists)\nprint(result)  # Output: {'apple': 3, 'banana': 2, 'cherry': 1}\n\nempty_list = []\nresult = freq_element(empty_list)\nprint(result)  # Output: {}\n\ninvalid_input = ['apple', 'banana']\ntry:\n    result = freq_element(invalid_input)\nexcept TypeError as e:\n    print(e)  # Output: All elements in the input must be lists\n", "result": "failed: File \"/tmp/tmpaeg3_o0n.py\", line 32\n    try: freq_element('not a list'); assert False; except TypeError: assert True\n                                                   ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 41, "requirement": "Edge Case Handling", "completion": "def filter_evennumbers(numbers):\n    # Check if the input is a list\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in numbers):\n        raise TypeError(\"All elements in the list must be integers\")\n    \n    # If the list is empty, return an empty list\n    if not numbers:\n        return []\n    \n    # Use filter() with a lambda function to filter even numbers\n    even_numbers = filter(lambda x: x % 2 == 0, numbers)\n    \n    # Convert the filter object to a list before returning\n    return list(even_numbers)\n\n# Example usage:\nnumbers_list = [1, 2, 3, 4, 5, 6]\nfiltered_list = filter_evennumbers(numbers_list)\nprint(filtered_list)  # Output will be [2, 4, 6]\n\nempty_list = []\nfiltered_empty_list = filter_evennumbers(empty_list)\nprint(filtered_empty_list)  # Output will be []\n\ninvalid_input = [1, 2, \"three\"]\ntry:\n    filtered_invalid_list = filter_evennumbers(invalid_input)\nexcept TypeError as e:\n    print(e)  # Output will be \"All elements in the list must be integers\"\n", "result": "passed", "passed": true}
{"task_id": 42, "requirement": "Edge Case Handling", "completion": "def find_sum(arr):\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    from collections import Counter\n    \n    # Handle empty list case\n    if len(arr) == 0:\n        return 0\n    \n    # Count the occurrences of each element in the array\n    counts = Counter(arr)\n    \n    # Sum the elements that appear more than once\n    total_sum = sum(element * count for element, count in counts.items() if count > 1)\n    \n    return total_sum\n\n# Example usage:\narr = [1, 2, 3, 2, 4, 5, 5]\nprint(find_sum(arr))  # Output should be 7 because 2 + 5 = 7\n\narr_empty = []\nprint(find_sum(arr_empty))  # Output should be 0\n\n# Test with non-list input\ntry:\n    print(find_sum(\"not a list\"))\nexcept TypeError as e:\n    print(e)  # Output should be \"Input must be a list\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpv7r5x2_q.py\", line 23, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Edge Case Handling", "completion": "import re\n\ndef text_match(text):\n    # Check if the input is not a string\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Check for empty string\n    if text == \"\":\n        return \"Not matched!\"\n    \n    # Regular expression pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'^[a-z]+_[a-z]+$'\n    \n    # Using re.match to check if the pattern matches the entire string from start (^) to end ($)\n    if re.match(pattern, text):\n        return True\n    else:\n        return \"Not matched!\"\n\n# Example usage:\nprint(text_match(\"abc_def\"))  # Should return True\nprint(text_match(\"Abc_def\"))  # Should return \"Not matched!\"\nprint(text_match(\"abc_def_ghi\"))  # Should return \"Not matched!\"\nprint(text_match(\"abc\"))       # Should return \"Not matched!\"\nprint(text_match(\"\"))          # Should return \"Not matched!\"\ntry:\n    print(text_match(123))     # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp18szxiey.py\", line 26, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 44, "requirement": "Edge Case Handling", "completion": "import re\n\ndef text_match_string(pattern, text):\n    \"\"\"\n    This function checks if the given pattern matches a word at the beginning of the text.\n    \n    :param pattern: The regex pattern to match against the beginning of the text.\n    :param text: The string to be searched.\n    :return: True if the pattern matches a word at the beginning of the text, False otherwise.\n    :raises: TypeError if either pattern or text is not a string.\n    \"\"\"\n    # Check if both inputs are strings\n    if not isinstance(pattern, str) or not isinstance(text, str):\n        raise TypeError(\"Both pattern and text must be strings.\")\n    \n    # Handle edge cases where the text is empty or contains only spaces\n    if not text.strip():\n        return False\n    \n    # Use the ^ symbol in the pattern to ensure it only matches at the start of the string\n    # \\b is used to match a word boundary\n    full_pattern = r'^\\b' + pattern\n    \n    # re.match checks for a match only at the beginning of the string\n    return bool(re.match(full_pattern, text))\n\n# Example usage:\nprint(text_match_string(r\"hello\", \"hello world\"))  # Should return True\nprint(text_match_string(r\"world\", \"hello world\"))  # Should return False\nprint(text_match_string(r\"hello\", \"  hello world\"))  # Should return True\nprint(text_match_string(r\"hello\", \"\"))  # Should return False\nprint(text_match_string(r\"hello\", \"   \"))  # Should return False\n", "result": "failed: File \"/tmp/tmp1e0zijwy.py\", line 23\n    try: text_match_string(123); assert False, 'TypeError not raised' except TypeError: pass\n                                                                      ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 46, "requirement": "Edge Case Handling", "completion": "def test_distinct(numbers):\n    \"\"\"\n    Check if all numbers in the list are distinct.\n    \n    :param numbers: List of integers\n    :return: True if all numbers are distinct, False otherwise\n    :raises TypeError: If the input is not a list or if the list contains non-integer elements\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list\")\n\n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in numbers):\n        raise TypeError(\"All elements in the list must be integers\")\n\n    # Handle edge case of an empty list\n    if len(numbers) <= 1:\n        return True\n\n    # Convert the list into a set to remove duplicates\n    unique_numbers = set(numbers)\n    \n    # Compare the length of the original list with the set\n    return len(numbers) == len(unique_numbers)\n\n# Example usage:\nprint(test_distinct([1, 2, 3, 4]))  # Expected output: True\nprint(test_distinct([1, 2, 2, 4]))  # Expected output: False\nprint(test_distinct([]))            # Expected output: True\nprint(test_distinct([5]))           # Expected output: True\ntry:\n    print(test_distinct(\"not a list\"))\nexcept TypeError as e:\n    print(e)  # Expected output: Input must be a list\ntry:\n    print(test_distinct([1, 2, \"three\"]))\nexcept TypeError as e:\n    print(e)  # Expected output: All elements in the list must be integers\n", "result": "passed", "passed": true}
{"task_id": 47, "requirement": "Edge Case Handling", "completion": "def compute_last_digit(a, b):\n    \"\"\"\n    Compute the last digit of b! / a!.\n    \n    :param a: The lower integer for the factorial division.\n    :param b: The higher integer for the factorial division.\n    :return: The last digit of the result of b! / a!.\n    \"\"\"\n    if a > b:\n        raise ValueError('a should not be greater than b')\n    \n    # If a equals b, the result is 1!\n    if a == b:\n        return 1\n    \n    # Initialize the last digit as 1 (neutral element for multiplication)\n    last_digit = 1\n    \n    # Multiply the last digits from a+1 to b\n    for i in range(a + 1, b + 1):\n        last_digit = (last_digit * (i % 10)) % 10\n        \n        # If at any point the last digit becomes 0, it will remain 0\n        if last_digit == 0:\n            break\n    \n    return last_digit\n\n# Example usage:\nprint(compute_last_digit(3, 5))  # Output should be 0, because 5! / 3! = 20, and the last digit is 0\nprint(compute_last_digit(4, 7))  # Output should be 0, because 7! / 4! = 210, and the last digit is 0\nprint(compute_last_digit(5, 5))  # Output should be 1, because 5! / 5! = 1\ntry:\n    print(compute_last_digit(6, 5))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)  # Output: a should not be greater than b\n", "result": "passed", "passed": true}
{"task_id": 48, "requirement": "Edge Case Handling", "completion": "def odd_bit_set_number(n):\n    # Check if the input is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    # Handle the edge case where the input is 0\n    if n == 0:\n        return 1\n    \n    # Initialize mask to 0\n    mask = 0\n    \n    # Set all odd bits in the mask\n    i = 0\n    while (1 << (2 * i)) <= n:\n        mask |= (1 << (2 * i))\n        i += 1\n    \n    # Apply the mask to the number using bitwise OR\n    return n | mask\n\n# Example usage:\nnumber = 10  # Binary: 1010\nresult = odd_bit_set_number(number)\nprint(f\"Given number: {number} (binary: {bin(number)[2:]})\")\nprint(f\"Result after setting odd bits: {result} (binary: {bin(result)[2:]})\")\n\n# Edge case example\nedge_case_result = odd_bit_set_number(0)\nprint(f\"Edge case result (input 0): {edge_case_result} (binary: {bin(edge_case_result)[2:]})\")\n", "result": "passed", "passed": true}
{"task_id": 49, "requirement": "Edge Case Handling", "completion": "def specified_element(two_d_list, index=0):\n    \"\"\"\n    Extracts the element at the specified index from each sublist within a two-dimensional list,\n    handling cases where sublists have varying lengths.\n\n    Parameters:\n    two_d_list (list of lists): The two-dimensional list to process.\n    index (int): The index of the element to extract from each sublist. Defaults to 0 (first element).\n\n    Returns:\n    list: A list containing the extracted elements.\n\n    Raises:\n    IndexError: If the provided index is out of range for any sublist.\n    TypeError: If two_d_list is not a list of lists.\n    \"\"\"\n\n    # Check if all elements in two_d_list are lists themselves\n    if not all(isinstance(sublist, list) for sublist in two_d_list):\n        raise TypeError(\"two_d_list must be a list of lists\")\n\n    # Extract the specified index element from each sublist if the index is valid\n    result = []\n    for sublist in two_d_list:\n        if len(sublist) > index:\n            result.append(sublist[index])\n        else:\n            raise IndexError(f\"Provided index {index} is out of range for some sublists.\")\n    \n    return result\n\n# Example usage:\nexample_2d_list = [[1, 2, 3], [4, 5], [7, 8, 9]]\nprint(specified_element(example_2d_list))  # Output: [1, 4, 7]\nprint(specified_element(example_2d_list, 1))  # Output: [2, 5, 8]\n\ntry:\n    print(specified_element(example_2d_list, 2))  # Should raise IndexError\nexcept IndexError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphb7hk6k5.py\", line 25, in <module>\n    try: specified_element([[1, 2], [3, 4]], 3)\n  File \"/tmp/tmphb7hk6k5.py\", line 11, in specified_element\n    raise IndexError(f\"Provided index {index} is out of range for some sublists.\")\nIndexError: Provided index 3 is out of range for some sublists.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmphb7hk6k5.py\", line 26, in <module>\n    except IndexError as e: assert str(e) == 'Index out of range for sublist'\nAssertionError", "passed": false}
{"task_id": 50, "requirement": "Edge Case Handling", "completion": "def min_length_list(lists):\n    \"\"\"\n    Finds the list with the minimum length from a collection of lists.\n    \n    :param lists: A collection of lists (e.g., a list of lists, tuple of lists)\n    :return: A tuple containing the length of the shortest list and the list itself\n    :raises ValueError: If the input is not a list of lists\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(lists, list) or not all(isinstance(lst, list) for lst in lists):\n        raise ValueError('Input must be a list of lists.')\n    \n    # Find the list with the minimum length\n    shortest_list = min(lists, key=lambda x: len(x))\n    \n    # Return a tuple with the length of the shortest list and the list itself\n    return (len(shortest_list), shortest_list)\n\n# Example usage:\nlists = [[1, 2, 3], [4, 5], [], [6, 7, 8, 9]]\nprint(min_length_list(lists))  # Output: (0, [])\n\n# Edge case: All lists are of the same length\nlists_same_length = [[1, 2], [3, 4], [5, 6]]\nprint(min_length_list(lists_same_length))  # Output: (2, [1, 2])\n\n# Invalid input\ntry:\n    print(min_length_list(\"not a list\"))\nexcept ValueError as e:\n    print(e)  # Output: Input must be a list of lists.\n", "result": "passed", "passed": true}
{"task_id": 52, "requirement": "Edge Case Handling", "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (int or float): The length of the base of the parallelogram.\n    height (int or float): The height of the parallelogram, which is the perpendicular distance from the base to the opposite side.\n\n    Returns:\n    float: The area of the parallelogram.\n\n    Raises:\n    TypeError: If either base or height is not a numerical value.\n    \"\"\"\n    # Check if the inputs are numerical\n    if not isinstance(base, (int, float)) or not isinstance(height, (int, float)):\n        raise TypeError(\"Both base and height must be numerical values.\")\n\n    # Calculate the area\n    area = base * height\n    return area\n\n# Example usage:\ntry:\n    area = parallelogram_area(5.0, 3.0)\n    print(f\"The area of the parallelogram is {area}\")\n    \n    # Edge case with zero\n    area_zero = parallelogram_area(0, 10.0)\n    print(f\"The area of the parallelogram is {area_zero}\")\nexcept TypeError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 53, "requirement": "Edge Case Handling", "completion": "def check_equality(s):\n    # Check if the input is a string\n    if not isinstance(s, str):\n        raise TypeError('Input must be a string')\n    \n    # Handle empty strings\n    if len(s) == 0:\n        return 'Equal'\n    \n    # Compare the first and last character of the string\n    if s[0] == s[-1]:\n        return 'Equal'\n    else:\n        return 'Not Equal'\n\n# Example usage:\nprint(check_equality(\"radar\"))  # Output: 'Equal'\nprint(check_equality(\"python\")) # Output: 'Not Equal'\nprint(check_equality(\"\"))       # Output: 'Equal'\ntry:\n    print(check_equality(123))  # This will raise a TypeError\nexcept TypeError as e:\n    print(e)                    # Output: Input must be a string\n", "result": "passed", "passed": true}
{"task_id": 54, "requirement": "Edge Case Handling", "completion": "def counting_sort(arr):\n    # Check if input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list of integers.\")\n\n    # Check if list is empty\n    if len(arr) == 0:\n        return []\n\n    # Check if list contains only integers\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"List must contain only integers.\")\n\n    # Find minimum and maximum elements in the array\n    min_element = min(arr)\n    max_element = max(arr)\n\n    # Handle negative integers by shifting the range to non-negative\n    offset = -min_element\n    shifted_arr = [x + offset for x in arr]\n\n    # Initialize count array with zeros\n    count = [0] * (max_element - min_element + 1)\n\n    # Count each element in the input array\n    for num in shifted_arr:\n        count[num] += 1\n\n    # Modify count array such that each element at each index\n    # stores the sum of previous counts\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n\n    # Output array to store the sorted elements\n    output = [0] * len(arr)\n\n    # Build the output array\n    for num in reversed(shifted_arr):\n        output[count[num] - 1] = num - offset\n        count[num] -= 1\n\n    return output\n\n# Example usage:\narr = [4, 2, 2, -8, 3, 3, -1]\nsorted_arr = counting_sort(arr)\nprint(sorted_arr)  # Output: [-8, -1, 2, 2, 3, 3, 4]\n\n# Edge cases\nempty_list = []\nsingle_element = [5]\nnegative_list = [-3, -1, -4]\n\nprint(counting_sort(empty_list))         # Output: []\nprint(counting_sort(single_element))     # Output: [5]\nprint(counting_sort(negative_list))      # Output: [-4, -3, -1]\n", "result": "passed", "passed": true}
{"task_id": 55, "requirement": "Edge Case Handling", "completion": "def tn_gp(a1, r, n):\n    \"\"\"\n    Calculate the n-th term of a geometric series.\n    \n    Parameters:\n    a1 (float): The first term of the geometric series.\n    r (float): The common ratio of the geometric series.\n    n (int): The term number to calculate in the series.\n    \n    Returns:\n    float: The value of the n-th term in the geometric series.\n    \n    Raises:\n    ValueError: If the term number (n) is less than 1.\n    \"\"\"\n    if n < 1:\n        raise ValueError('Term number must be greater than 0')\n    \n    # Handle the special case where the common ratio is zero\n    if r == 0 and n > 1:\n        return 0\n    \n    # Calculate the n-th term using the formula a_n = a1 * r^(n-1)\n    nth_term = a1 * (r ** (n - 1))\n    return nth_term\n\n# Example usage:\n# Find the 5th term of a geometric series with the first term 2 and common ratio 3\nprint(tn_gp(2, 3, 5))  # Output should be 486\n\n# Find the 5th term of a geometric series with the first term 2 and common ratio 0\nprint(tn_gp(2, 0, 5))  # Output should be 0\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5phwepso.py\", line 15, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "requirement": "Edge Case Handling", "completion": "def check(num):\n    # Check if the input is an integer\n    if not isinstance(num, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    # Handle single-digit numbers and zero\n    if num < 10:\n        reversed_num = num\n    else:\n        # Reverse the number\n        reversed_num = int(str(num)[::-1])\n    \n    # Calculate twice the reversed number\n    twice_reversed = 2 * reversed_num\n    \n    # Check if the original number is one less than twice the reversed number\n    return num == twice_reversed - 1\n\n# Example usage:\nprint(check(7))   # Output: False\nprint(check(21))  # Output: False (since 21 is not one less than twice 12)\nprint(check(35))  # Output: False (since 35 is not one less than twice 53)\nprint(check(19))  # Output: True (since 91*2-1=181, and 19 is one less than 181)\nprint(check(0))   # Output: True (since 0 reversed is still 0, and 0 is one less than 0*2+1)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpf659bh99.py\", line 31, in <module>\n    assert check(1) == False\nAssertionError", "passed": false}
{"task_id": 57, "requirement": "Edge Case Handling", "completion": "def find_max_num(digits, num_digits):\n    \"\"\"\n    Given a list of digits and a number of digits, returns the largest number that can be formed using the specified number of digits.\n    \n    :param digits: List[int] - A list of integers (digits from 0 to 9)\n    :param num_digits: int - The number of digits to use in forming the largest number\n    :return: int - The largest number that can be formed with the given digits and number of digits\n    :raises ValueError: If the number of digits specified is greater than the length of the list\n    \"\"\"\n    if len(digits) < num_digits:\n        raise ValueError('Number of digits exceeds the length of the list.')\n    \n    if not digits:\n        return 0\n    \n    # Sort the digits in descending order\n    sorted_digits = sorted(digits, reverse=True)[:num_digits]\n    \n    # Join them together as a string and convert to integer\n    max_num_str = ''.join(map(str, sorted_digits))\n    return int(max_num_str)\n\n# Example usage:\nprint(find_max_num([3, 30, 34, 5, 9], 3))  # Output: 9534\nprint(find_max_num([1, 2, 3, 4, 5], 2))    # Output: 54\nprint(find_max_num([], 2))                 # Output: 0\ntry:\n    print(find_max_num([1, 2, 3], 4))      # Should raise ValueError\nexcept ValueError as e:\n    print(e)                               # Output: Number of digits exceeds the length of the list.\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4t5oswd3.py\", line 14, in <module>\n    print(find_max_num([], 2))                 # Output: 0\n  File \"/tmp/tmp4t5oswd3.py\", line 3, in find_max_num\n    raise ValueError('Number of digits exceeds the length of the list.')\nValueError: Number of digits exceeds the length of the list.", "passed": false}
{"task_id": 58, "requirement": "Edge Case Handling", "completion": "def opposite_signs(a, b):\n    \"\"\"\n    Check if the two integers a and b have opposite signs.\n\n    Parameters:\n    a (int): First integer.\n    b (int): Second integer.\n\n    Returns:\n    bool: True if a and b have opposite signs, False otherwise.\n\n    Raises:\n    TypeError: If either a or b is not an integer.\n    \"\"\"\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise TypeError(\"Both inputs must be integers\")\n\n    # Both zero case\n    if a == 0 or b == 0:\n        return False\n\n    return (a * b) < 0\n\n# Example usage:\nprint(opposite_signs(10, -20))  # Output: True\nprint(opposite_signs(-5, -10))  # Output: False\nprint(opposite_signs(0, 10))    # Output: False\nprint(opposite_signs(-0, 10))   # Output: False\nprint(opposite_signs(10, 20))   # Output: False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkzg69d9o.py\", line 32, in <module>\n    assert opposite_signs(0, -1) == True\nAssertionError", "passed": false}
{"task_id": 59, "requirement": "Edge Case Handling", "completion": "def is_octagonal(n):\n    \"\"\"\n    Calculate the nth octagonal number.\n    \n    Parameters:\n    n (int): The position in the sequence of octagonal numbers.\n    \n    Returns:\n    int: The nth octagonal number.\n    \n    Raises:\n    ValueError: If n is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return n * (3 * n - 2)\n\n# Example usage:\ntry:\n    print(is_octagonal(1))  # Output: 1\n    print(is_octagonal(2))  # Output: 8\n    print(is_octagonal(3))  # Output: 21\n    print(is_octagonal(-1)) # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5pnj1t1p.py\", line 17, in <module>\n    is_octagonal(-1)\n  File \"/tmp/tmp5pnj1t1p.py\", line 3, in is_octagonal\n    raise ValueError(\"Input must be a positive integer.\")\nValueError: Input must be a positive integer.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmp5pnj1t1p.py\", line 19, in <module>\n    assert str(e) == 'Input must be a positive integer'\nAssertionError", "passed": false}
{"task_id": 60, "requirement": "Edge Case Handling", "completion": "def max_len_sub(arr, k):\n    \"\"\"\n    Finds the maximum length of a subsequence with the absolute difference \n    between adjacent elements not exceeding k.\n\n    Parameters:\n    arr (List[int]): The input array.\n    k (int): The maximum allowed absolute difference between adjacent elements.\n\n    Returns:\n    int: The length of the longest such subsequence.\n\n    Raises:\n    TypeError: If arr is not a list or k is not an integer.\n    \"\"\"\n\n    if not isinstance(arr, list):\n        raise TypeError(\"The first argument must be a list.\")\n    if not isinstance(k, int):\n        raise TypeError(\"The second argument must be an integer.\")\n\n    if len(arr) == 0:\n        return 0\n\n    # Dictionary to store the length of the longest subsequence ending with each element\n    dp = {}\n    max_length = 1\n\n    for num in arr:\n        # Calculate the length of the longest subsequence ending with num\n        current_max = 1\n        for prev_num, length in dp.items():\n            if abs(num - prev_num) <= k:\n                current_max = max(current_max, length + 1)\n        \n        dp[num] = current_max\n        max_length = max(max_length, current_max)\n\n    return max_length\n\n# Example usage:\narr = [4, 2, 3, 4, 5, 6]\nk = 1\nprint(max_len_sub(arr, k))  # Output should be 5 because the longest subsequence is [2, 3, 4, 5, 6]\n\n# Test with an empty array\nprint(max_len_sub([], k))  # Output should be 0\n\n# Test with invalid inputs\ntry:\n    print(max_len_sub(\"not a list\", k))\nexcept TypeError as e:\n    print(e)  # Should raise a TypeError\n\ntry:\n    print(max_len_sub(arr, \"not an int\"))\nexcept TypeError as e:\n    print(e)  # Should raise a TypeError\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpt2r0cra2.py\", line 35, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nAssertionError", "passed": false}

{"task_id": 11, "requirement": "Exception Handling", "completion": "def remove_occ(s: str, char: str) -> str:\n    \"\"\"\n    Remove the first and last occurrence of the specified character from the string.\n    \n    Parameters:\n    s (str): The input string.\n    char (str): The character to be removed from the string.\n    \n    Returns:\n    str: The modified string with the first and last occurrence of the specified character removed.\n    \n    Raises:\n    ValueError: If the second parameter is not a single character.\n    \"\"\"\n    if len(char) != 1:\n        raise ValueError('Second parameter must be a single character.')\n    \n    if not s:\n        return s\n    \n    first_occurrence = s.find(char)\n    last_occurrence = s.rfind(char)\n    \n    # If the character does not exist in the string, return the original string\n    if first_occurrence == -1 or last_occurrence == -1:\n        return s\n    \n    # If the first and last occurrences are the same, it means there's only one occurrence\n    if first_occurrence == last_occurrence:\n        return s[:first_occurrence] + s[first_occurrence + 1:]\n    \n    # Construct the new string without the first and last occurrence of the character\n    part1 = s[:first_occurrence] + s[first_occurrence + 1:last_occurrence]\n    part2 = s[last_occurrence + 1:]\n    \n    return part1 + part2\n\n# Example usage:\nprint(remove_occ(\"hello world\", \"l\"))  # Output: \"heo word\"\nprint(remove_occ(\"banana\", \"a\"))       # Output: \"bnn\"\nprint(remove_occ(\"apple\", \"p\"))        # Output: \"ale\"\nprint(remove_occ(\"test\", \"x\"))         # Output: \"test\" (no 'x' in the string)\n\ntry:\n    print(remove_occ(\"hello world\", \"ll\"))\nexcept ValueError as e:\n    print(e)  # Output: Second parameter must be a single character.\n", "result": "passed", "passed": true}
{"task_id": 12, "requirement": "Exception Handling", "completion": "def sort_matrix(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n    \n    :param matrix: List[List[int]], a 2D list representing the matrix.\n    :return: List[List[int]], the sorted matrix.\n    :raises: TypeError if the input is not a list of lists or contains non-integer elements.\n    \"\"\"\n\n    # Check if the input is a list\n    if not isinstance(matrix, list):\n        raise TypeError(\"Input must be a list of lists.\")\n\n    # Check if all elements in the matrix are lists\n    if not all(isinstance(row, list) for row in matrix):\n        raise TypeError(\"All elements of the outer list must be lists.\")\n\n    # Check if all elements in the matrix are integers\n    if not all(all(isinstance(item, int) for item in row) for row in matrix):\n        raise TypeError(\"All elements in the matrix must be integers.\")\n\n    # Sort the matrix based on the sum of each row\n    sorted_matrix = sorted(matrix, key=sum)\n    return sorted_matrix\n\n# Example usage:\nif __name__ == \"__main__\":\n    matrix = [\n        [3, 4, 7],\n        [1, 2, 3],\n        [8, 0, 2]\n    ]\n    print(\"Original Matrix:\")\n    for row in matrix:\n        print(row)\n    \n    try:\n        sorted_matrix = sort_matrix(matrix)\n        print(\"\\nSorted Matrix:\")\n        for row in sorted_matrix:\n            print(row)\n    except TypeError as e:\n        print(f\"Error: {e}\")\n", "result": "passed", "passed": true}
{"task_id": 13, "requirement": "Exception Handling", "completion": "from collections import Counter\n\ndef count_common(words_list):\n    \"\"\"\n    Counts the most common words in a list of strings.\n    \n    :param words_list: A list of strings.\n    :return: A Counter object representing the frequency of each word.\n    :raises: TypeError if the input is not a list of strings.\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(words_list, list):\n        raise TypeError(\"Input must be a list of strings.\")\n    \n    # Check if all elements in the list are strings\n    if not all(isinstance(word, str) for word in words_list):\n        raise TypeError(\"All elements in the list must be strings.\")\n    \n    # Count the frequency of each word\n    word_counts = Counter(words_list)\n    \n    return word_counts\n\n# Example usage:\ntry:\n    example_list = [\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\"]\n    common_words = count_common(example_list)\n    print(common_words.most_common())  # Prints the most common words and their counts\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmproso23wp.py\", line 19, in <module>\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nAssertionError", "passed": false}
{"task_id": 14, "requirement": "Exception Handling", "completion": "def find_volume(base, height_triangle, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n    \n    Parameters:\n    - base (float): The length of the base of the triangular face.\n    - height_triangle (float): The height of the triangular face (perpendicular distance from the base to the opposite vertex).\n    - length (float): The length of the prism (distance between the two triangular faces).\n    \n    Returns:\n    float: The volume of the triangular prism.\n    \n    Raises:\n    ValueError: If any of the inputs are non-positive or non-numeric.\n    \"\"\"\n    # Check if inputs are numeric\n    if not all(isinstance(dimension, (int, float)) for dimension in [base, height_triangle, length]):\n        raise ValueError('All dimensions must be positive numbers.')\n    \n    # Check if inputs are positive\n    if not all(dimension > 0 for dimension in [base, height_triangle, length]):\n        raise ValueError('All dimensions must be positive numbers.')\n    \n    # Calculate the area of the triangular base\n    base_area = 0.5 * base * height_triangle\n    \n    # Calculate the volume of the prism\n    volume = base_area * length\n    \n    return volume\n\n# Example usage:\ntry:\n    volume = find_volume(5, 4, 10)\n    print(f\"The volume of the triangular prism is {volume} cubic units.\")\nexcept ValueError as e:\n    print(e)\n\n# Example with invalid input\ntry:\n    volume = find_volume(-5, 4, 10)\n    print(f\"The volume of the triangular prism is {volume} cubic units.\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7govmyd2.py\", line 28, in <module>\n    assert find_volume(5.5, 3.2, 4.1) == 72.16\nAssertionError", "passed": false}
{"task_id": 15, "requirement": "Exception Handling", "completion": "import re\n\ndef split_lowerstring(input_string):\n    # Check if the input is a string\n    if not isinstance(input_string, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Use regex to find all lowercase letters and split the string at these points\n    # The pattern r'(?<=[a-z])' looks for a position right after a lowercase letter\n    return re.split(r'(?<=[a-z])', input_string)\n\n# Example usage:\ntry:\n    example_string = \"HelloWorldPython\"\n    result = split_lowerstring(example_string)\n    print(result)  # Output: ['H', 'ello', 'W', 'orld', 'P', 'ython']\n\n    # Test with non-string input\n    result = split_lowerstring(12345)\nexcept TypeError as e:\n    print(e)  # Output: Input must be a string\n", "result": "failed: File \"/tmp/tmp6d_fct8e.py\", line 22\n    try: split_lowerstring(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 16, "requirement": "Exception Handling", "completion": "import re\n\ndef text_lowercase_underscore(text):\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Define the pattern to match sequences of lowercase letters joined with underscores\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    \n    # Use re.search to find if there is at least one occurrence of the pattern in the text\n    match = re.search(pattern, text)\n    \n    if match:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\nexample_text1 = \"This is a_test_string with some_lowercase_sequences and_more_examples.\"\nexample_text2 = \"This is a test string without underscore.\"\n\nprint(text_lowercase_underscore(example_text1))  # Output should be 'Found a match!'\nprint(text_lowercase_underscore(example_text2))  # Output should be 'Not matched!'\n\n# Example of incorrect input type\ntry:\n    print(text_lowercase_underscore(12345))\nexcept TypeError as e:\n    print(e)  # Output should be 'Input must be a string'\n", "result": "passed", "passed": true}
{"task_id": 17, "requirement": "Exception Handling", "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Parameters:\n    side_length (int): The length of one side of the square. Must be a non-negative integer.\n\n    Returns:\n    int: The perimeter of the square.\n\n    Raises:\n    ValueError: If side_length is negative or not an integer.\n    \"\"\"\n    if not isinstance(side_length, int):\n        raise ValueError(\"Side length must be an integer.\")\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    \n    return 4 * side_length\n\n# Example usage:\ntry:\n    side = 5\n    print(f\"The perimeter of a square with side length {side} is {square_perimeter(side)}\")\n    \n    side = -3\n    print(f\"The perimeter of a square with side length {side} is {square_perimeter(side)}\")\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 18, "requirement": "Exception Handling", "completion": "def remove_dirty_chars(source_str, dirty_chars):\n    \"\"\"\n    Removes characters from source_str that are present in dirty_chars.\n\n    :param source_str: The original string from which characters will be removed.\n    :param dirty_chars: A string containing characters to be removed from source_str.\n    :return: A new string with the specified characters removed.\n    :raises TypeError: If either source_str or dirty_chars is not a string.\n    :raises ValueError: If either source_str or dirty_chars contains non-alphabetic characters.\n    \"\"\"\n    # Check if inputs are strings\n    if not isinstance(source_str, str) or not isinstance(dirty_chars, str):\n        raise TypeError(\"Both inputs must be strings.\")\n    \n    # Check if strings contain only alphabetic characters\n    if not source_str.isalpha() or not dirty_chars.isalpha():\n        raise ValueError(\"Input strings must only contain alphabetic characters.\")\n    \n    # Create a set of characters to remove for faster lookup\n    dirty_set = set(dirty_chars)\n    \n    # Use list comprehension to filter out unwanted characters\n    cleaned_str = ''.join([char for char in source_str if char not in dirty_set])\n    \n    return cleaned_str\n\n# Example usage:\ntry:\n    source_string = \"helloworld\"\n    dirty_characters = \"ld\"\n    cleaned_string = remove_dirty_chars(source_string, dirty_characters)\n    print(cleaned_string)  # Output: \"heowor\"\nexcept (TypeError, ValueError) as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 19, "requirement": "Exception Handling", "completion": "def test_duplicate(nums):\n    # Check if the input is a list\n    if not isinstance(nums, list):\n        raise ValueError('Input must be a list of integers')\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in nums):\n        raise ValueError('Input must be a list of integers')\n    \n    # Using a set to track seen numbers\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\n# Example usage:\ntry:\n    nums = [1, 2, 3, 4, 5, 1]\n    print(test_duplicate(nums))  # Output: True\n\n    nums = [1, 2, 3, 4, 5]\n    print(test_duplicate(nums))  # Output: False\n\n    nums = \"not a list\"\n    print(test_duplicate(nums))  # Raises ValueError\n\n    nums = [1, 2, 3, \"not an integer\", 5]\n    print(test_duplicate(nums))  # Raises ValueError\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp219xxr2x.py\", line 34, in <module>\n    test_duplicate('12345')\n  File \"/tmp/tmp219xxr2x.py\", line 4, in test_duplicate\n    raise ValueError('Input must be a list of integers')\nValueError: Input must be a list of integers", "passed": false}
{"task_id": 20, "requirement": "Exception Handling", "completion": "def is_woodall(num):\n    \"\"\"\n    Check if the given number is a Woodall number.\n    \n    A Woodall number is defined as n * 2^n - 1 for some integer n.\n    \n    Parameters:\n    num (int): The number to check.\n    \n    Returns:\n    bool: True if the number is a Woodall number, False otherwise.\n    \n    Raises:\n    TypeError: If the input is not an integer.\n    \"\"\"\n    if not isinstance(num, int):\n        raise TypeError(\"Input must be an integer.\")\n    \n    # We will iterate over possible values of n starting from 1\n    n = 1\n    while True:\n        woodall_number = n * 2**n - 1\n        if woodall_number == num:\n            return True\n        elif woodall_number > num:\n            return False\n        n += 1\n\n# Example usage:\nprint(is_woodall(7))   # False, because 7 is not a Woodall number\nprint(is_woodall(23))  # True, because 3*2^3 - 1 = 23\ntry:\n    print(is_woodall(\"not an integer\"))\nexcept TypeError as e:\n    print(e)  # Input must be an integer.\n", "result": "passed", "passed": true}
{"task_id": 21, "requirement": "Exception Handling", "completion": "def multiples_of_num(n, m):\n    \"\"\"\n    Generates a list of m multiples of n.\n    \n    Parameters:\n    n (int): The base number to find multiples of.\n    m (int): The number of multiples to generate.\n    \n    Returns:\n    list: A list of m multiples of n.\n    \n    Raises:\n    ValueError: If either n or m is negative.\n    \"\"\"\n    if n < 0 or m < 0:\n        raise ValueError(\"Both n and m must be non-negative integers.\")\n    \n    return [n * i for i in range(1, m + 1)]\n\n# Example usage:\ntry:\n    print(multiples_of_num(5, 4))  # Output: [5, 10, 15, 20]\n    print(multiples_of_num(-5, 4))  # This will raise ValueError\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpatsl2ho8.py\", line 11, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "requirement": "Exception Handling", "completion": "def find_first_duplicate(arr):\n    \"\"\"\n    Finds the first duplicate element in an array of integers.\n    \n    :param arr: List[int] - The array of integers to search for duplicates.\n    :return: int or None - The first duplicate integer found, or None if no duplicates exist.\n    :raises: TypeError - If the input is not a list of integers.\n    \"\"\"\n    if not isinstance(arr, list) or not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"Input must be a list of integers\")\n\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_array = [2, 5, 1, 2, 3, 5, 1, 2, 4]\n    print(find_first_duplicate(example_array))  # Output should be 2\n    \n    invalid_input = [\"a\", \"b\", \"c\"]\n    try:\n        print(find_first_duplicate(invalid_input))\n    except TypeError as e:\n        print(e)  # This should catch the TypeError and print the error message\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9_cty_ls.py\", line 20, in <module>\n    assert find_first_duplicate([1, 2, 3, 4])==-1\nAssertionError", "passed": false}
{"task_id": 23, "requirement": "Exception Handling", "completion": "def maximum_sum(list_of_lists):\n    # Check if the input is a list\n    if not isinstance(list_of_lists, list):\n        raise TypeError(\"Input must be a list of lists\")\n    \n    max_sum = None\n    for sublist in list_of_lists:\n        # Check if each element in the list is a list\n        if not isinstance(sublist, list):\n            raise TypeError(\"Each element of the input list must be a list\")\n\n        # Check if each element in the sublist is an integer\n        if not all(isinstance(item, int) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be integers\")\n\n        current_sum = sum(sublist)\n        if max_sum is None or current_sum > max_sum:\n            max_sum = current_sum\n\n    if max_sum is None:\n        raise ValueError(\"List of lists is empty or contains no valid sublists\")\n\n    return max_sum\n\n# Example usage:\nexample_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(maximum_sum(example_list))  # Output will be 24\n\n# Examples of invalid inputs\ntry:\n    invalid_input_1 = [1, 2, 3]\n    print(maximum_sum(invalid_input_1))\nexcept TypeError as e:\n    print(e)  # Should raise TypeError\n\ntry:\n    invalid_input_2 = [[1, 2, 'a'], [3, 4, 5]]\n    print(maximum_sum(invalid_input_2))\nexcept TypeError as e:\n    print(e)  # Should raise TypeError\n", "result": "failed: File \"/tmp/tmpgj3k8ljw.py\", line 37\n    try: maximum_sum([[1, 2], [3, 'a']]); assert False, 'Expected TypeError' except TypeError: pass\n                                                                             ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 24, "requirement": "Exception Handling", "completion": "def binary_to_decimal(binary_str):\n    \"\"\"\n    Convert a binary number (given as a string) to its decimal equivalent.\n    \n    Parameters:\n    - binary_str (str): A string representing a binary number.\n    \n    Returns:\n    - int: The decimal equivalent of the binary number.\n    \n    Raises:\n    - ValueError: If the input string is not a valid binary number.\n    \n    Example:\n    >>> binary_to_decimal('1011')\n    11\n    \"\"\"\n    # Check if the input string is a valid binary number\n    if not all(char in '01' for char in binary_str):\n        raise ValueError('Invalid binary number')\n    \n    return int(binary_str, 2)\n\n# Example usage:\nif __name__ == \"__main__\":\n    try:\n        binary_number = \"1011\"\n        decimal_number = binary_to_decimal(binary_number)\n        print(f\"The decimal equivalent of binary {binary_number} is {decimal_number}\")\n        \n        invalid_binary_number = \"1021\"\n        decimal_number = binary_to_decimal(invalid_binary_number)\n    except ValueError as e:\n        print(e)\n", "result": "failed: File \"/tmp/tmpfla8y7xw.py\", line 19\n    try: binary_to_decimal('102'); assert False, 'Expected ValueError' except ValueError as e: assert str(e) == 'Invalid binary number'\n                                                                       ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 25, "requirement": "Exception Handling", "completion": "from functools import reduce\nfrom operator import mul\n\ndef find_product(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements in the list must be integers\")\n    \n    # Identify unique elements in the array\n    unique_elements = set(arr)\n    \n    # Calculate the product of unique elements\n    if not unique_elements:\n        return 0  # If there are no elements, return 0\n    \n    # Use reduce to multiply all elements together\n    product = reduce(mul, unique_elements, 1)\n    \n    return product\n\n# Example usage:\narr = [1, 2, 3, 2, 4]\nprint(find_product(arr))  # Output should be 24\n\n# Test with invalid inputs\ntry:\n    print(find_product(\"not a list\"))\nexcept TypeError as e:\n    print(e)  # Should raise TypeError\n\ntry:\n    print(find_product([1, 2, \"3\", 4]))\nexcept TypeError as e:\n    print(e)  # Should raise TypeError\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppmg3lwev.py\", line 30, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "requirement": "Exception Handling", "completion": "def check_k_elements(tuples_list, k):\n    \"\"\"\n    Check if every tuple in the provided list of tuples has exactly k elements.\n\n    :param tuples_list: List of tuples to be checked.\n    :param k: The number of elements each tuple should have.\n    :return: True if every tuple has exactly k elements, False otherwise.\n    :raises TypeError: If tuples_list is not a list of tuples or if k is not an integer.\n    \"\"\"\n    # Check if tuples_list is not a list\n    if not isinstance(tuples_list, list):\n        raise TypeError(\"The first argument must be a list.\")\n    \n    # Check if k is not an integer\n    if not isinstance(k, int):\n        raise TypeError(\"The second argument must be an integer.\")\n    \n    # Check if each element in tuples_list is a tuple\n    for item in tuples_list:\n        if not isinstance(item, tuple):\n            raise TypeError(\"All elements in the list must be tuples.\")\n    \n    # Iterate over each tuple in the list\n    for tup in tuples_list:\n        # Check if the current tuple does not have exactly k elements\n        if len(tup) != k:\n            return False  # Return False as soon as we find a mismatch\n    return True  # Return True if all tuples have exactly k elements\n\n# Example usage:\nexample_tuples = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nk = 3\nprint(check_k_elements(example_tuples, k))  # Output: True\n\nexample_tuples_with_mismatch = [(1, 2, 3), (4, 5), (7, 8, 9)]\nk = 3\nprint(check_k_elements(example_tuples_with_mismatch, k))  # Output: False\n\ntry:\n    invalid_input = \"not a list\"\n    print(check_k_elements(invalid_input, k))\nexcept TypeError as e:\n    print(e)  # Output: The first argument must be a list.\n\ntry:\n    invalid_k = \"not an integer\"\n    print(check_k_elements(example_tuples, invalid_k))\nexcept TypeError as e:\n    print(e)  # Output: The second argument must be an integer.\n\ntry:\n    mixed_list = [(1, 2, 3), [4, 5, 6], (7, 8, 9)]\n    print(check_k_elements(mixed_list, k))\nexcept TypeError as e:\n    print(e)  # Output: All elements in the list must be tuples.\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpr3q44izk.py\", line 40, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "requirement": "Exception Handling", "completion": "def remove(strings):\n    \"\"\"\n    Removes all digits from each string in the given list.\n    \n    :param strings: List of strings from which digits will be removed.\n    :return: A new list of strings with all digits removed.\n    :raises TypeError: If the input is not a list or any element in the list is not a string.\n    \"\"\"\n    if not isinstance(strings, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    cleaned_strings = []\n    for string in strings:\n        if not isinstance(string, str):\n            raise TypeError(\"All elements in the list must be strings.\")\n        cleaned_strings.append(''.join(char for char in string if not char.isdigit()))\n    \n    return cleaned_strings\n\n# Example usage:\nexample_list = [\"abc123\", \"def456ghi789\", \"0jkl\"]\ntry:\n    cleaned_list = remove(example_list)\n    print(cleaned_list)  # Output: ['abc', 'defghi', 'jkl']\nexcept TypeError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 28, "requirement": "Exception Handling", "completion": "def binomial_coeff(n, k):\n    \"\"\"\n    Calculate the binomial coefficient, also known as \"n choose k\".\n    \n    Parameters:\n    n (int): The total number of items.\n    k (int): The number of items to choose.\n    \n    Returns:\n    int: The binomial coefficient.\n    \n    Raises:\n    ValueError: If either input is negative or if k is greater than n.\n    \"\"\"\n    if n < 0 or k < 0:\n        raise ValueError(\"Inputs must be non-negative\")\n    if k > n:\n        raise ValueError(\"k must not be greater than n\")\n    \n    if k == 0 or k == n:\n        return 1\n\n    # Optimization: Take advantage of symmetry, C(n, k) == C(n, n-k)\n    k = min(k, n - k)\n\n    # Compute binomial coefficient iteratively to avoid large intermediate factorials\n    coeff = 1\n    for i in range(1, k + 1):\n        coeff *= n - (k - i)\n        coeff //= i\n\n    return coeff\n\n# Example usage:\ntry:\n    print(binomial_coeff(5, 2))  # Output: 10\n    print(binomial_coeff(-1, 2))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjmenf3z0.py\", line 26, in <module>\n    try: binomial_coeff(-1, 2)\n  File \"/tmp/tmpjmenf3z0.py\", line 3, in binomial_coeff\n    raise ValueError(\"Inputs must be non-negative\")\nValueError: Inputs must be non-negative\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpjmenf3z0.py\", line 27, in <module>\n    except ValueError as e: assert str(e) == 'Inputs must be non-negative and k must not be greater than n'\nAssertionError", "passed": false}
{"task_id": 29, "requirement": "Exception Handling", "completion": "def get_odd_occurrence(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(item, int) for item in arr):\n        raise TypeError(\"All elements in the list must be integers\")\n    \n    # Create a dictionary to store counts of each element\n    count_dict = {}\n    \n    # Iterate through the array and update counts in the dictionary\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Find and return the first element with an odd count\n    for num, count in count_dict.items():\n        if count % 2 != 0:\n            return num\n    \n    # If no such element is found, return None\n    return None\n\n# Example usage:\narr = [1, 2, 3, 2, 3, 1, 3]\nprint(get_odd_occurrence(arr))  # Output should be 3\n\n# Test cases for error handling\ntry:\n    print(get_odd_occurrence(\"not a list\"))\nexcept TypeError as e:\n    print(e)  # Expected output: Input must be a list\n\ntry:\n    print(get_odd_occurrence([1, 2, \"three\", 2, 3, 1, 3]))\nexcept TypeError as e:\n    print(e)  # Expected output: All elements in the list must be integers\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwy1u2zwr.py\", line 34, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "requirement": "Exception Handling", "completion": "def count_substring_with_equal_ends(s):\n    \"\"\"\n    Counts all substrings of the given string s that start and end with the same character.\n\n    :param s: Input string\n    :return: The number of substrings that start and end with the same character.\n    :raises TypeError: If the input is not a string.\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n\n    n = len(s)\n    # This will store the frequency of each character in the string\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # The total count of such substrings\n    total_count = 0\n\n    # For each character, calculate how many substrings can be formed\n    for count in char_count.values():\n        # If a character appears 'k' times, then there are k*(k+1)/2 substrings\n        # that start and end with this character.\n        total_count += count * (count + 1) // 2\n\n    return total_count\n\n# Example usage\ntry:\n    s = \"abcab\"\n    print(count_substring_with_equal_ends(s))  # Output should be 7\nexcept TypeError as e:\n    print(e)\n\ntry:\n    print(count_substring_with_equal_ends(123))  # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "failed: File \"/tmp/tmp94m6o85r.py\", line 34\n    try: count_substring_with_equal_ends(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                                  ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 31, "requirement": "Exception Handling", "completion": "import heapq\nfrom collections import Counter\n\ndef func(lists, k):\n    # Combine all lists into one list\n    combined_list = []\n    for lst in lists:\n        combined_list.extend(lst)\n    \n    # Count the frequency of each element\n    freq_counter = Counter(combined_list)\n    \n    # Check if k is greater than the number of distinct integers\n    if k > len(freq_counter):\n        raise ValueError(\"k cannot be greater than the number of distinct integers\")\n    \n    # Use a min-heap to keep track of the top k elements\n    # The heap will store tuples of (-count, number) so that the smallest count is at the top\n    # We negate the count because Python's heapq only supports min-heaps\n    heap = []\n    \n    for num, count in freq_counter.items():\n        if len(heap) < k:\n            heapq.heappush(heap, (count, num))\n        else:\n            # If the current count is greater than the smallest count in the heap,\n            # replace the smallest count with the current count\n            if count > heap[0][0]:\n                heapq.heapreplace(heap, (count, num))\n    \n    # Extract the numbers from the heap and sort them based on their counts and values\n    result = [num for count, num in sorted(heap, reverse=True)]\n    \n    return result\n\n# Example usage:\nlists = [\n    [1, 2, 3],\n    [2, 3, 4],\n    [3, 4, 5]\n]\nk = 2\ntry:\n    print(func(lists, k))  # Output might be [3, 2] depending on the input\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp519jg01v.py\", line 39, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "requirement": "Exception Handling", "completion": "def max_prime_factors(n):\n    # Check if the input is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError('Input must be a positive integer')\n    \n    # Initialize the largest prime factor\n    largest_prime = -1\n    \n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n\n    # Now n must be odd, start checking from 3\n    factor = 3\n    while factor * factor <= n:\n        while n % factor == 0:\n            largest_prime = factor\n            n //= factor\n        factor += 2\n\n    # If n becomes a prime number greater than 2\n    if n > 2:\n        largest_prime = n\n\n    return largest_prime\n\n# Example usage:\ntry:\n    print(max_prime_factors(13195))  # Output should be 29\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 33, "requirement": "Exception Handling", "completion": "def decimal_to_binary(decimal_number):\n    # Check if the input is a non-negative integer\n    if not isinstance(decimal_number, int) or decimal_number < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    if decimal_number == 0:\n        return \"0\"\n    \n    binary_digits = []\n    \n    while decimal_number > 0:\n        remainder = decimal_number % 2\n        binary_digits.append(str(remainder))\n        decimal_number //= 2\n    \n    # The binary digits are in reverse order now, so we need to reverse them.\n    binary_digits.reverse()\n    \n    return ''.join(binary_digits)\n\n# Example usage:\nprint(decimal_to_binary(10))  # Output: \"1010\"\nprint(decimal_to_binary(255)) # Output: \"11111111\"\n\n# Test with invalid inputs\ntry:\n    print(decimal_to_binary(-5))\nexcept ValueError as e:\n    print(e)  # Output: Input must be a non-negative integer\n\ntry:\n    print(decimal_to_binary(3.14))\nexcept ValueError as e:\n    print(e)  # Output: Input must be a non-negative integer\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp389yg2ul.py\", line 27, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "requirement": "Exception Handling", "completion": "def find_missing(arr):\n    \"\"\"\n    Finds the missing number in a sorted array of consecutive integers.\n    \n    :param arr: List[int] - A list of sorted integers with exactly one missing number.\n    :return: int - The missing number in the sequence.\n    :raises ValueError: If the input list is not sorted.\n    \"\"\"\n    if not arr:\n        return None  # Return None if the array is empty\n    \n    # Check if the array is sorted\n    if arr != sorted(arr):\n        raise ValueError('Input list must be sorted.')\n    \n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        # Check if the middle element is at its expected position\n        if arr[mid] != mid + arr[0]:\n            # If not, check if the left neighbor is also not at its expected position\n            if mid > 0 and arr[mid-1] == arr[0] + (mid - 1):\n                return arr[0] + mid  # The missing number is here\n            high = mid - 1  # Missing number must be on the left side\n        else:\n            low = mid + 1  # Missing number must be on the right side\n\n    # In case there is no missing number in the given range (though this should not happen as per the problem statement)\n    return None\n\n# Example usage:\narr = [1, 2, 3, 5, 6, 7]\nprint(find_missing(arr))  # Output should be 4\n\n# Example usage with an unsorted array\ntry:\n    arr_unsorted = [1, 3, 2, 5, 6, 7]\n    print(find_missing(arr_unsorted))\nexcept ValueError as e:\n    print(e)  # Should print 'Input list must be sorted.'\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmptys94kgw.py\", line 30, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "requirement": "Exception Handling", "completion": "def find_rect_num(n):\n    \"\"\"\n    Finds the n-th rectangular number.\n    \n    Parameters:\n    n (int): The position of the rectangular number in the sequence.\n    \n    Returns:\n    int: The n-th rectangular number.\n    \n    Raises:\n    ValueError: If the input is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return n * (n + 1)\n\n# Example usage:\ntry:\n    print(find_rect_num(5))  # Output will be 30 because 5 * 6 = 30\n    print(find_rect_num(-3)) # This will raise a ValueError\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 36, "requirement": "Exception Handling", "completion": "def find_nth_digit(numerator, denominator, n):\n    \"\"\"\n    Finds the nth digit after the decimal point in the result of numerator / denominator.\n\n    :param numerator: The numerator of the fraction.\n    :param denominator: The denominator of the fraction.\n    :param n: The position of the digit after the decimal point to retrieve.\n    :return: The nth digit after the decimal point as an integer, or None if the position exceeds the precision.\n    :raises ValueError: If the denominator is zero.\n    \"\"\"\n    if denominator == 0:\n        raise ValueError('Denominator cannot be zero')\n\n    # Perform integer division to get the whole number part and the remainder\n    _, remainder = divmod(numerator, denominator)\n\n    # Initialize variables\n    digits = []\n    seen_remainders = {}\n\n    # Process the decimal part\n    for i in range(n + 1):  # We go one extra to check for repeats\n        if remainder == 0:\n            break  # Finite decimal, no more digits\n\n        if remainder in seen_remainders:\n            start_repeat = seen_remainders[remainder]\n            repeat_len = len(digits) - start_repeat\n            # If n is within the repeating part\n            if n >= start_repeat:\n                return int(digits[start_repeat + (n - start_repeat) % repeat_len])\n            else:\n                break  # n is before the repeating part\n\n        seen_remainders[remainder] = i\n        remainder *= 10\n        quotient, remainder = divmod(remainder, denominator)\n        digits.append(str(quotient))\n\n    # Check if we have enough digits\n    if n < len(digits):\n        return int(digits[n])\n    else:\n        return None  # Not enough digits or beyond the repeating sequence\n\n# Example usage:\ntry:\n    print(find_nth_digit(1, 3, 2))  # Should print 3 (for 0.333...)\n    print(find_nth_digit(1, 7, 5))  # Should print 8 (for 0.142857142857...)\n    print(find_nth_digit(1, 0, 1))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmprza5wbfj.py\", line 37, in <module>\n    assert find_nth_digit(1,2,1) == 5\nAssertionError", "passed": false}
{"task_id": 37, "requirement": "Exception Handling", "completion": "def sort_mixed_list(mixed_list):\n    # Check if the input is a list\n    if not isinstance(mixed_list, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if all elements are either integers or strings\n    for item in mixed_list:\n        if not isinstance(item, int) and not isinstance(item, str):\n            raise TypeError(\"List elements must be either integers or strings\")\n    \n    # Separate the list into integers and strings\n    integers = [item for item in mixed_list if isinstance(item, int)]\n    strings = [item for item in mixed_list if isinstance(item, str)]\n    \n    # Sort the integers and strings separately\n    sorted_integers = sorted(integers)\n    sorted_strings = sorted(strings)\n    \n    # Combine the sorted lists\n    sorted_mixed_list = sorted_integers + sorted_strings\n    \n    return sorted_mixed_list\n\n# Example usage:\ntry:\n    example_list = [34, \"apple\", 67, \"banana\", 12, \"cherry\"]\n    sorted_list = sort_mixed_list(example_list)\n    print(sorted_list)  # Output: [12, 34, 67, 'apple', 'banana', 'cherry']\n\n    invalid_list = [34, \"apple\", 67, True]\n    invalid_sorted_list = sort_mixed_list(invalid_list)  # This will raise a TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 38, "requirement": "Exception Handling", "completion": "def div_even_odd(numbers):\n    # Initialize variables to store the first even and odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Iterate through the list to find the first even and odd numbers\n    for num in numbers:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        \n        # Break the loop if both even and odd numbers are found\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Raise ValueError if either even or odd number is not found\n    if first_even is None:\n        raise ValueError(\"List must contain at least one even number.\")\n    if first_odd is None:\n        raise ValueError(\"List must contain at least one odd number.\")\n\n    # Perform the division and return the result\n    try:\n        result = first_even / first_odd\n    except ZeroDivisionError:\n        raise ValueError(\"Cannot divide by zero.\")\n    \n    return result\n\n# Example usage:\nnumbers_list = [7, 3, 4, 8, 9]\n\ntry:\n    print(div_even_odd(numbers_list))  # Output: 1.3333333333333333\nexcept ValueError as e:\n    print(e)\n", "result": "failed: File \"/tmp/tmps96j2njr.py\", line 35\n    try: div_even_odd([2, 4, 6]); assert False; except ValueError as e: assert str(e) == 'List must contain at least one even and one odd number.'\n                                                ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 39, "requirement": "Exception Handling", "completion": "from collections import Counter\n\ndef rearange_string(s):\n    # Validate input\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string.\")\n    if not s.islower() or not s.isalpha():\n        raise ValueError(\"String must contain only lowercase letters.\")\n    \n    # Count the frequency of each character in the string\n    char_count = Counter(s)\n    \n    # Find the most frequent character\n    max_count = max(char_count.values())\n    \n    # Check if the most frequent character appears more than (length of string + 1) / 2 times\n    if max_count > (len(s) + 1) // 2:\n        return \"\"\n    \n    # Create a list to store the result\n    result = [''] * len(s)\n    index = 0\n    \n    # Sort the characters by their frequency in descending order\n    for char, count in char_count.most_common():\n        for _ in range(count):\n            if index >= len(s):\n                index = 1  # Start filling from the second position if we've reached the end\n            result[index] = char\n            index += 2\n    \n    return ''.join(result)\n\n# Example usage:\ntry:\n    s = \"aab\"\n    print(rearange_string(s))  # Possible output: \"aba\"\n\n    s = \"aaab\"\n    print(rearange_string(s))  # Output: \"\" since it's not possible to rearrange \"aaab\" without having two 'a's adjacent.\n\n    s = \"AaBb\"\n    print(rearange_string(s))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgq7wwgqb.py\", line 38, in <module>\n    assert rearange_string(\"abccdd\")==('cdabcd')\nAssertionError", "passed": false}
{"task_id": 40, "requirement": "Exception Handling", "completion": "from collections import Counter\n\ndef freq_element(list_of_lists):\n    # Check if the input is a list\n    if not isinstance(list_of_lists, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Check if all elements in the list are lists\n    if not all(isinstance(sublist, list) for sublist in list_of_lists):\n        raise TypeError(\"All elements in the input must be lists.\")\n    \n    # Flatten the list of lists into a single list\n    flattened_list = [item for sublist in list_of_lists for item in sublist]\n    \n    # Use Counter to count the frequency of each element\n    freq_counter = Counter(flattened_list)\n    \n    return freq_counter\n\n# Example usage:\ntry:\n    list_of_lists = [['apple', 'banana'], ['banana', 'cherry', 'apple'], ['apple']]\n    result = freq_element(list_of_lists)\n    print(result)  # Output will be a Counter object with frequencies of each element\nexcept TypeError as e:\n    print(e)\n", "result": "failed: File \"/tmp/tmp_ke5iutm.py\", line 24\n    try: freq_element('not a list'); assert False; except TypeError: assert True\n                                                   ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 41, "requirement": "Exception Handling", "completion": "def filter_evennumbers(numbers):\n    # Check if the input is a list\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in numbers):\n        raise TypeError(\"All elements in the list must be integers.\")\n    \n    # Use filter() with a lambda function to filter even numbers\n    even_numbers = filter(lambda x: x % 2 == 0, numbers)\n    \n    # Convert the filter object to a list before returning\n    return list(even_numbers)\n\n# Example usage:\nnumbers_list = [1, 2, 3, 4, 5, 6]\ntry:\n    filtered_list = filter_evennumbers(numbers_list)\n    print(filtered_list)  # Output will be [2, 4, 6]\nexcept TypeError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 42, "requirement": "Exception Handling", "completion": "def find_sum(arr):\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    from collections import Counter\n    \n    # Count the occurrences of each element in the array\n    counts = Counter(arr)\n    \n    # Sum the elements that appear more than once\n    total_sum = sum(element for element, count in counts.items() if count > 1)\n    \n    return total_sum\n\n# Example usage:\ntry:\n    arr = [1, 2, 3, 2, 4, 5, 5]\n    print(find_sum(arr))  # Output should be 7 because 2 + 5 = 7\n    \n    invalid_input = \"not a list\"\n    print(find_sum(invalid_input))  # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpw3c7dsyp.py\", line 18, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Exception Handling", "completion": "import re\n\ndef text_match(text):\n    # Check if the input is a string\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Regular expression pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'^[a-z]+_[a-z]+$'\n    \n    # Using re.match to check if the pattern matches the entire string from start (^) to end ($)\n    if re.match(pattern, text):\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"\n\n# Example usage:\nprint(text_match(\"abc_def\"))  # Should return \"Matched!\"\nprint(text_match(\"Abc_def\"))  # Should return \"Not matched!\"\nprint(text_match(\"abc_def_ghi\"))  # Should return \"Not matched!\"\nprint(text_match(\"abc\"))       # Should return \"Not matched!\"\ntry:\n    print(text_match(123))     # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7dxu6o0s.py\", line 22, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 44, "requirement": "Exception Handling", "completion": "import re\n\ndef text_match_string(pattern, text):\n    \"\"\"\n    This function checks if the given pattern matches a word at the beginning of the text.\n    \n    :param pattern: The regex pattern to match against the beginning of the text.\n    :param text: The string to be searched.\n    :return: True if the pattern matches a word at the beginning of the text, False otherwise.\n    :raises TypeError: If either pattern or text is not a string.\n    \"\"\"\n    # Check if both pattern and text are strings\n    if not isinstance(pattern, str) or not isinstance(text, str):\n        raise TypeError(\"Both pattern and text must be strings\")\n    \n    # Use the ^ symbol in the pattern to ensure it only matches at the start of the string\n    # \\b is used to match a word boundary\n    full_pattern = r'^\\b' + re.escape(pattern) + r'\\b'\n    \n    # re.match checks for a match only at the beginning of the string\n    return bool(re.match(full_pattern, text))\n\n# Example usage:\ntry:\n    print(text_match_string(\"hello\", \"hello world\"))  # Should return True\n    print(text_match_string(\"world\", \"hello world\"))  # Should return False\n    print(text_match_string(\"hello\", 123))            # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "failed: File \"/tmp/tmpolgvkw5r.py\", line 21\n    try: text_match_string(123); assert False, 'TypeError not raised' except TypeError: pass\n                                                                      ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 45, "requirement": "Exception Handling", "completion": "from functools import reduce\nimport math\n\ndef get_gcd(arr):\n    if not arr:\n        raise ValueError('Input list cannot be empty.')\n    \n    return reduce(lambda x, y: math.gcd(x, y), arr)\n\n# Example usage:\nnumbers = [24, 108, 90]\nprint(get_gcd(numbers))  # Output will be 6\n\n# Test with an empty list\ntry:\n    print(get_gcd([]))\nexcept ValueError as e:\n    print(e)  # This will print 'Input list cannot be empty.'\n", "result": "passed", "passed": true}
{"task_id": 46, "requirement": "Exception Handling", "completion": "def test_distinct(numbers):\n    \"\"\"\n    Check if all numbers in the list are distinct.\n    \n    :param numbers: List of integers\n    :return: True if all numbers are distinct, False otherwise\n    :raises TypeError: If the input is not a list or contains non-integer elements\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list\")\n    \n    if not all(isinstance(x, int) for x in numbers):\n        raise TypeError(\"All elements in the list must be integers\")\n    \n    # Convert the list into a set to remove duplicates\n    unique_numbers = set(numbers)\n    \n    # Compare the length of the original list with the set\n    return len(numbers) == len(unique_numbers)\n\n# Example usage:\ntry:\n    print(test_distinct([1, 2, 3, 4]))  # Expected output: True\n    print(test_distinct([1, 2, 2, 4]))  # Expected output: False\n    print(test_distinct([1, 2, \"3\", 4]))  # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n\ntry:\n    print(test_distinct(\"not a list\"))  # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 47, "requirement": "Exception Handling", "completion": "def compute_last_digit(a, b):\n    \"\"\"\n    Compute the last digit of b! / a!.\n    \n    :param a: The lower integer for the factorial division.\n    :param b: The higher integer for the factorial division.\n    :return: The last digit of the result of b! / a!.\n    :raises ValueError: If a is greater than b.\n    \"\"\"\n    if a > b:\n        raise ValueError('a should not be greater than b')\n    \n    # Initialize the last digit as 1 (neutral element for multiplication)\n    last_digit = 1\n    \n    # Multiply the last digits from a+1 to b\n    for i in range(a + 1, b + 1):\n        last_digit = (last_digit * (i % 10)) % 10\n        \n        # If at any point the last digit becomes 0, it will remain 0\n        if last_digit == 0:\n            break\n    \n    return last_digit\n\n# Example usage:\ntry:\n    print(compute_last_digit(3, 5))  # Output should be 0, because 5! / 3! = 20, and the last digit is 0\n    print(compute_last_digit(4, 7))  # Output should be 0, because 7! / 4! = 5*6*7 = 210, and the last digit is 0\n    print(compute_last_digit(5, 3))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 48, "requirement": "Exception Handling", "completion": "def odd_bit_set_number(n):\n    # Check if the input is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    \n    # Initialize mask to 0\n    mask = 0\n    \n    # Set all odd bits in the mask\n    i = 0\n    while (1 << (2 * i)) <= n:\n        mask |= (1 << (2 * i))\n        i += 1\n    \n    # Apply the mask to the number using bitwise OR\n    return n | mask\n\n# Example usage:\ntry:\n    number = 10  # Binary: 1010\n    result = odd_bit_set_number(number)\n    print(f\"Given number: {number} (binary: {bin(number)[2:]})\")\n    print(f\"Result after setting odd bits: {result} (binary: {bin(result)[2:]})\")\nexcept TypeError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 49, "requirement": "Exception Handling", "completion": "def specified_element(two_d_list, index=0):\n    \"\"\"\n    Extracts the element at the specified index from each sublist within a two-dimensional list.\n\n    Parameters:\n    two_d_list (list of lists): The two-dimensional list to process.\n    index (int): The index of the element to extract from each sublist. Defaults to 0 (first element).\n\n    Returns:\n    list: A list containing the extracted elements.\n\n    Raises:\n    IndexError: If the provided index is out of range for any sublist.\n    TypeError: If two_d_list is not a list of lists.\n    \"\"\"\n\n    # Check if all elements in two_d_list are lists themselves\n    if not all(isinstance(sublist, list) for sublist in two_d_list):\n        raise TypeError(\"two_d_list must be a list of lists\")\n\n    result = []\n    for sublist in two_d_list:\n        if len(sublist) <= index:\n            raise IndexError(f\"Index out of range for sublist {sublist}\")\n        result.append(sublist[index])\n    \n    return result\n\n# Example usage:\nexample_2d_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(specified_element(example_2d_list))  # Output: [1, 4, 7]\nprint(specified_element(example_2d_list, 1))  # Output: [2, 5, 8]\n\n# This will raise an IndexError\ntry:\n    print(specified_element(example_2d_list, 3))\nexcept IndexError as e:\n    print(e)  # Output: Index out of range for sublist [1, 2, 3]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplqp24_ni.py\", line 24, in <module>\n    try: specified_element([[1, 2], [3, 4]], 3)\n  File \"/tmp/tmplqp24_ni.py\", line 8, in specified_element\n    raise IndexError(f\"Index out of range for sublist {sublist}\")\nIndexError: Index out of range for sublist [1, 2]\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmplqp24_ni.py\", line 25, in <module>\n    except IndexError as e: assert str(e) == 'Index out of range for sublist'\nAssertionError", "passed": false}
{"task_id": 50, "requirement": "Exception Handling", "completion": "def min_length_list(lists):\n    # Check if the input is a list\n    if not isinstance(lists, list):\n        raise ValueError('Input must be a list of lists.')\n    \n    # Check if all elements in the list are lists\n    if not all(isinstance(lst, list) for lst in lists):\n        raise ValueError('Input must be a list of lists.')\n    \n    # Find the list with the minimum length\n    shortest_list = min(lists, key=lambda x: len(x))\n    \n    # Return a tuple with the length of the shortest list and the list itself\n    return (len(shortest_list), shortest_list)\n\n# Example usage:\ntry:\n    lists = [[1, 2, 3], [4, 5], [], [6, 7, 8, 9]]\n    result = min_length_list(lists)\n    print(result)  # Output will be (0, [])\n    \n    # Test with invalid inputs\n    invalid_lists = [[1, 2, 3], \"not a list\", [6, 7, 8, 9]]\n    result = min_length_list(invalid_lists)\nexcept ValueError as e:\n    print(e)  # Output will be 'Input must be a list of lists.'\n", "result": "passed", "passed": true}
{"task_id": 51, "requirement": "Exception Handling", "completion": "def check_equilateral(side1, side2, side3):\n    # Validate inputs\n    if side1 <= 0 or side2 <= 0 or side3 <= 0:\n        raise ValueError(\"All sides must be positive integers.\")\n    \n    # Check if all sides are equal\n    if side1 == side2 == side3:\n        print(\"The triangle is equilateral.\")\n    else:\n        print(\"The triangle is not equilateral.\")\n\n# Example usage:\n# check_equilateral(5, 5, 5)  # This will print \"The triangle is equilateral.\"\n# check_equilateral(5, 6, 5)  # This will print \"The triangle is not equilateral.\"\n# check_equilateral(-1, 5, 5) # This will raise ValueError\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpx31v8exm.py\", line 14, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "requirement": "Exception Handling", "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram, which is the perpendicular distance from the base to the opposite side.\n\n    Returns:\n    float: The area of the parallelogram.\n\n    Raises:\n    TypeError: If either base or height is not a numerical value.\n    \"\"\"\n    # Check if base and height are numerical values\n    if not (isinstance(base, (int, float)) and isinstance(height, (int, float))):\n        raise TypeError(\"Both base and height must be numerical values.\")\n    \n    # Ensure base and height are positive\n    if base <= 0 or height <= 0:\n        raise ValueError(\"Both base and height must be positive numbers.\")\n    \n    return base * height\n\n# Example usage:\ntry:\n    area = parallelogram_area(5.0, 3.0)\n    print(f\"The area of the parallelogram is {area}\")\nexcept TypeError as e:\n    print(e)\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9jy41fw7.py\", line 21, in <module>\n    assert parallelogram_area(0, 10) == 0\n  File \"/tmp/tmp9jy41fw7.py\", line 7, in parallelogram_area\n    raise ValueError(\"Both base and height must be positive numbers.\")\nValueError: Both base and height must be positive numbers.", "passed": false}
{"task_id": 53, "requirement": "Exception Handling", "completion": "def check_equality(s):\n    # Check if the input is a string\n    if not isinstance(s, str):\n        raise TypeError('Input must be a string')\n    \n    # Check if the string is empty or has only one character\n    if len(s) == 0:\n        return 'Equal'\n    elif len(s) == 1:\n        return 'Equal'\n    \n    # Compare the first and last character of the string\n    if s[0] == s[-1]:\n        return 'Equal'\n    else:\n        return 'Not Equal'\n\n# Example usage:\nprint(check_equality(\"radar\"))  # Output: 'Equal'\nprint(check_equality(\"python\")) # Output: 'Not Equal'\ntry:\n    print(check_equality(12345))  # This will raise TypeError\nexcept TypeError as e:\n    print(e)  # Expected output: 'Input must be a string'\n", "result": "passed", "passed": true}
{"task_id": 54, "requirement": "Exception Handling", "completion": "def counting_sort(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n\n    # Check if the list contains only non-negative integers\n    if not all(isinstance(x, int) and x >= 0 for x in arr):\n        raise TypeError(\"List must contain only non-negative integers\")\n\n    if len(arr) == 0:\n        return []\n\n    # Find the maximum element in the array\n    max_element = max(arr)\n    \n    # Initialize count array with zeros\n    count = [0] * (max_element + 1)\n\n    # Count each element in the input array\n    for num in arr:\n        count[num] += 1\n\n    # Modify count array such that each element at each index\n    # stores the sum of previous counts\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n\n    # Output array to store the sorted elements\n    output = [0] * len(arr)\n\n    # Build the output array\n    for num in reversed(arr):\n        output[count[num] - 1] = num\n        count[num] -= 1\n\n    return output\n\n# Example usage:\ntry:\n    arr = [4, 2, 2, 8, 3, 3, 1]\n    sorted_arr = counting_sort(arr)\n    print(sorted_arr)  # Output: [1, 2, 2, 3, 3, 4, 8]\nexcept TypeError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 55, "requirement": "Exception Handling", "completion": "def tn_gp(a1, r, n):\n    \"\"\"\n    Calculate the n-th term of a geometric series.\n    \n    Parameters:\n    a1 (float): The first term of the geometric series.\n    r (float): The common ratio of the geometric series.\n    n (int): The term number to calculate in the series.\n    \n    Returns:\n    float: The value of the n-th term in the geometric series.\n    \n    Raises:\n    ValueError: If the term number n is less than 1.\n    \"\"\"\n    if n < 1:\n        raise ValueError('Term number must be greater than 0')\n    \n    # Calculate the n-th term using the formula a_n = a1 * r^(n-1)\n    nth_term = a1 * (r ** (n - 1))\n    return nth_term\n\n# Example usage:\n# Find the 5th term of a geometric series with the first term 2 and common ratio 3\nprint(tn_gp(2, 3, 5))  # Output should be 486\n\n# This should raise a ValueError\ntry:\n    print(tn_gp(2, 3, 0))\nexcept ValueError as e:\n    print(e)  # Expected output: Term number must be greater than 0\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmprlr9jqto.py\", line 15, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "requirement": "Exception Handling", "completion": "def check(num):\n    # Check if the input is an integer\n    if not isinstance(num, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    # Convert the number to a string to reverse it easily\n    num_str = str(num)\n    # Reverse the string representation of the number\n    reversed_num_str = num_str[::-1]\n    # Convert the reversed string back to an integer\n    reversed_num = int(reversed_num_str)\n    # Calculate twice the reversed number\n    twice_reversed = 2 * reversed_num\n    # Check if the original number is one less than twice the reversed number\n    return num == twice_reversed - 1\n\n# Example usage:\ntry:\n    print(check(7))   # Output: False\n    print(check(21))  # Output: False\n    print(check(35))  # Output: False\n    print(check('a')) # This should raise a TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 57, "requirement": "Exception Handling", "completion": "def find_max_num(digits, num_digits):\n    \"\"\"\n    Given a list of digits and a number of digits to use, returns the largest number that can be formed using those digits.\n    \n    :param digits: List[int] - A list of integers (digits from 0 to 9)\n    :param num_digits: int - The number of digits to use to form the largest number\n    :return: int - The largest number that can be formed with the given digits\n    :raises ValueError: If the number of digits exceeds the length of the list\n    \"\"\"\n    if num_digits > len(digits):\n        raise ValueError('Number of digits exceeds the length of the list.')\n    \n    # Sort the digits in descending order and take the first num_digits\n    sorted_digits = sorted(digits, reverse=True)[:num_digits]\n    \n    # Join them together as a string and convert to integer\n    max_num_str = ''.join(map(str, sorted_digits))\n    return int(max_num_str)\n\n# Example usage:\ntry:\n    print(find_max_num([3, 30, 34, 5, 9], 3))  # Output: 953\n    print(find_max_num([1, 2, 3, 4, 5], 5))    # Output: 54321\n    print(find_max_num([1, 2, 3], 4))          # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 58, "requirement": "Exception Handling", "completion": "def opposite_signs(a, b):\n    \"\"\"\n    Check if the two integers a and b have opposite signs.\n\n    Parameters:\n    a (int): First integer.\n    b (int): Second integer.\n\n    Returns:\n    bool: True if a and b have opposite signs, False otherwise.\n\n    Raises:\n    TypeError: If either a or b is not an integer.\n    \"\"\"\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise TypeError(\"Both inputs must be integers.\")\n    \n    return (a * b) < 0\n\n# Example usage:\ntry:\n    print(opposite_signs(10, -20))  # Output: True\n    print(opposite_signs(-5, -10))  # Output: False\n    print(opposite_signs(0, 10))    # Output: False\n    print(opposite_signs(10, \"20\")) # This will raise a TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 59, "requirement": "Exception Handling", "completion": "def is_octagonal(n):\n    \"\"\"\n    Calculate the nth octagonal number.\n    \n    Parameters:\n    n (int): The position in the sequence of octagonal numbers.\n    \n    Returns:\n    int: The nth octagonal number.\n    \n    Raises:\n    ValueError: If n is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return n * (3 * n - 2)\n\n# Example usage:\ntry:\n    print(is_octagonal(1))  # Output: 1\n    print(is_octagonal(2))  # Output: 8\n    print(is_octagonal(3))  # Output: 21\n    print(is_octagonal(-1))  # This will raise a ValueError\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpy9shvi_7.py\", line 17, in <module>\n    is_octagonal(-1)\n  File \"/tmp/tmpy9shvi_7.py\", line 3, in is_octagonal\n    raise ValueError(\"Input must be a positive integer.\")\nValueError: Input must be a positive integer.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpy9shvi_7.py\", line 19, in <module>\n    assert str(e) == 'Input must be a positive integer'\nAssertionError", "passed": false}
{"task_id": 60, "requirement": "Exception Handling", "completion": "def max_len_sub(arr, k):\n    \"\"\"\n    Finds the maximum length of a subsequence with the absolute difference \n    between adjacent elements not exceeding k.\n    \n    Parameters:\n    arr (List[int]): The input array.\n    k (int): The maximum allowed absolute difference between adjacent elements.\n    \n    Returns:\n    int: The length of the longest such subsequence.\n    \n    Raises:\n    TypeError: If arr is not a list or if k is not an integer.\n    \"\"\"\n    if not isinstance(arr, list):\n        raise TypeError(\"The first argument must be a list.\")\n    if not isinstance(k, int):\n        raise TypeError(\"The second argument must be an integer.\")\n    \n    if not arr:\n        return 0\n    \n    # Dictionary to store the length of the longest subsequence ending with each element\n    dp = {}\n    max_length = 1\n    \n    for num in arr:\n        # Calculate the length of the longest subsequence ending with num\n        current_max = 1\n        for prev_num, length in dp.items():\n            if abs(num - prev_num) <= k:\n                current_max = max(current_max, length + 1)\n        \n        dp[num] = current_max\n        max_length = max(max_length, current_max)\n    \n    return max_length\n\n# Example usage:\narr = [4, 2, 3, 4, 5, 6]\nk = 1\nprint(max_len_sub(arr, k))  # Output should be 5 because the longest subsequence is [2, 3, 4, 5, 6]\n\n# Test with invalid inputs\ntry:\n    print(max_len_sub((4, 2, 3, 4, 5, 6), 1))\nexcept TypeError as e:\n    print(e)\n\ntry:\n    print(max_len_sub([4, 2, 3, 4, 5, 6], \"1\"))\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp143rn2gr.py\", line 33, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nAssertionError", "passed": false}

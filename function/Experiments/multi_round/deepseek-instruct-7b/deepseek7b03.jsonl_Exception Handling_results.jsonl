{"task_id": 11, "requirement": "Exception Handling", "completion": "def remove_occ(s, char):\n    # Check if the second parameter is a single character\n    if len(char) != 1:\n        raise ValueError('Second parameter must be a single character.')\n    \n    first_index = s.find(char)\n    last_index = s.rfind(char)\n    \n    if first_index != -1 and last_index != -1:\n        s = s[:first_index] + s[first_index+1:]\n        s = s[:last_index] + s[last_index+1:]\n    \n    return s\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpf9ul7qyp.py\", line 11, in <module>\n    assert remove_occ(\"hello\",\"l\") == \"heo\"\nAssertionError", "passed": false}
{"task_id": 12, "requirement": "Exception Handling", "completion": "def sort_matrix(matrix):\n    # Check if the input is a list of lists\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise TypeError(\"Input should be a list of lists\")\n    \n    # Check if all elements in the matrix are integers\n    if not all(isinstance(num, int) for row in matrix for num in row):\n        raise TypeError(\"All elements in the matrix should be integers\")\n    \n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n    \n    # Sort the matrix based on the row sums\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    \n    return sorted_matrix\n", "result": "passed", "passed": true}
{"task_id": 13, "requirement": "Exception Handling", "completion": "from collections import Counter\n\ndef count_common(word_list):\n    # Check if the input is a list\n    if not isinstance(word_list, list):\n        raise TypeError(\"Input should be a list of strings\")\n    \n    # Check if all elements in the list are strings\n    if not all(isinstance(word, str) for word in word_list):\n        raise TypeError(\"All elements in the list should be strings\")\n    \n    # Count the occurrences of each word\n    word_counts = Counter(word_list)\n    \n    # Find the maximum count\n    max_count = max(word_counts.values())\n    \n    # Find the most common words\n    common_words = {word: count for word, count in word_counts.items() if count == max_count}\n    \n    return common_words\n\n# Example usage:\nword_list = ['apple', 'banana', 'cherry', 'apple', 'banana', 'cherry', 'date', 'apple']\nprint(count_common(word_list))  # Output: {'apple': 3, 'cherry': 2, 'banana': 2, 'date': 1}\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5p4jrdaf.py\", line 19, in <module>\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nAssertionError", "passed": false}
{"task_id": 14, "requirement": "Exception Handling", "completion": "def find_volume(base_area, height_prism):\n    # Check if both inputs are positive numbers\n    if base_area <= 0 or height_prism <= 0:\n        raise ValueError('All dimensions must be positive numbers.')\n    # Check if both inputs are numeric\n    if not isinstance(base_area, (int, float)) or not isinstance(height_prism, (int, float)):\n        raise ValueError('All dimensions must be positive numbers.')\n    # Calculate and return the volume\n    return base_area * height_prism\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppcxkgy7t.py\", line 10, in <module>\n    assert find_volume(10,8,6) == 240\nTypeError: find_volume() takes 2 positional arguments but 3 were given", "passed": false}
{"task_id": 15, "requirement": "Exception Handling", "completion": "def split_lowerstring(s):\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    return [word for word in s.split() if word[0].islower()]\n\n# Example usage:\ns = \"Hello World this IS a tEst\"\nprint(split_lowerstring(s))  # Output: ['this', 'a', 'tEst']\n\n# Testing with a non-string input\ntry:\n    split_lowerstring(123)\nexcept TypeError as e:\n    print(e)  # Output: Input must be a string\n", "result": "failed: File \"/tmp/tmpwbak3fyh.py\", line 16\n    try: split_lowerstring(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 16, "requirement": "Exception Handling", "completion": "import re\n\ndef text_lowercase_underscore(text):\n    # Check if the input is a string\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # The regular expression pattern r'\\b[a-z]+\\_[a-z]+\\b' matches sequences of \n    # one or more lowercase letters followed by an underscore, followed by \n    # one or more lowercase letters, where the sequence is a word boundary.\n    pattern = r'\\b[a-z]+\\_[a-z]+\\b'\n    matches = re.findall(pattern, text)\n    return matches\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpd64pghj3.py\", line 12, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "requirement": "Exception Handling", "completion": "def square_perimeter(side_length):\n    \"\"\"\n    This function calculates the perimeter of a square.\n\n    :param side_length: length of one side of the square\n    :return: perimeter of the square\n    :raises ValueError: if the side_length is negative\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative\")\n    return 4 * side_length\n", "result": "passed", "passed": true}
{"task_id": 18, "requirement": "Exception Handling", "completion": "def remove_dirty_chars(s1, s2):\n    # Check if both inputs are strings\n    if not isinstance(s1, str) or not isinstance(s2, str):\n        raise TypeError(\"Both inputs must be strings\")\n    \n    # Remove characters from s1 that are in s2\n    return ''.join(c for c in s1 if c not in s2)\n", "result": "passed", "passed": true}
{"task_id": 19, "requirement": "Exception Handling", "completion": "def test_duplicate(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise ValueError('Input must be a list of integers')\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(i, int) for i in arr):\n        raise ValueError('Input must be a list of integers')\n    \n    # Check for duplicates\n    if len(arr) == len(set(arr)):\n        return False\n    else:\n        return True\n\n# Example usage:\ntry:\n    print(test_duplicate([1, 2, 3, 4, 5]))  # prints: False\n    print(test_duplicate([1, 2, 3, 4, 5, 5]))  # prints: True\n    print(test_duplicate(\"not a list\"))  # Raises ValueError: Input must be a list of integers\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpaacqodwn.py\", line 24, in <module>\n    test_duplicate(None)\n  File \"/tmp/tmpaacqodwn.py\", line 4, in test_duplicate\n    raise ValueError('Input must be a list of integers')\nValueError: Input must be a list of integers", "passed": false}
{"task_id": 20, "requirement": "Exception Handling", "completion": "def is_woodall(n):\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    if n < 0:\n        return False\n    i = 0\n    while True:\n        woodall_num = i * 2**i - 1\n        if woodall_num == n:\n            return True\n        if woodall_num > n:\n            return False\n        i += 1\n", "result": "passed", "passed": true}
{"task_id": 21, "requirement": "Exception Handling", "completion": "def multiples_of_num(n, m):\n    if n < 0 or m < 0:\n        raise ValueError(\"Both 'n' and 'm' must be non-negative integers.\")\n    \n    multiples = [n * i for i in range(1, m + 1)]\n    return multiples\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0fflsd76.py\", line 6, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "requirement": "Exception Handling", "completion": "def find_first_duplicate(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input should be a list\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(item, int) for item in arr):\n        raise TypeError(\"List should only contain integers\")\n    \n    num_dict = {}\n    for num in arr:\n        if num in num_dict:\n            return num\n        else:\n            num_dict[num] = 1\n    return None\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphs_rvk2y.py\", line 16, in <module>\n    assert find_first_duplicate([1, 2, 3, 4])==-1\nAssertionError", "passed": false}
{"task_id": 23, "requirement": "Exception Handling", "completion": "def maximum_sum(list_of_lists):\n    # Check if the input is a list\n    if not isinstance(list_of_lists, list):\n        raise TypeError(\"Input should be a list of lists\")\n    \n    # Check if all elements in the list are lists\n    if not all(isinstance(inner_list, list) for inner_list in list_of_lists):\n        raise TypeError(\"All elements in the input list should be lists\")\n    \n    # Check if all elements in the sublists are integers\n    if not all(all(isinstance(num, int) for num in inner_list) for inner_list in list_of_lists):\n        raise TypeError(\"All elements in the sublists should be integers\")\n    \n    # Calculate the maximum sum\n    return max(sum(inner_list) for inner_list in list_of_lists)\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]\nprint(maximum_sum(list_of_lists))  # Output: 39\n\n# Testing with non-integer elements\nnon_integer_list = [[1, 2, 3], [4, '5', 6], [10, 11, 12], [7, 8, 9]]\ntry:\n    print(maximum_sum(non_integer_list))\nexcept TypeError as e:\n    print(e)  # Output: All elements in the sublists should be integers\n\n# Testing with a non-list input\nnon_list_input = [1, 2, 3, 4]\ntry:\n    print(maximum_sum(non_list_input))\nexcept TypeError as e:\n    print(e)  # Output: Input should be a list of lists\n", "result": "failed: File \"/tmp/tmp_76qy1yj.py\", line 31\n    try: maximum_sum([[1, 2], [3, 'a']]); assert False, 'Expected TypeError' except TypeError: pass\n                                                                             ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 24, "requirement": "Exception Handling", "completion": "def binary_to_decimal(binary):\n    # Check if the input is a valid binary string\n    if not isinstance(binary, str) or not all(digit in '01' for digit in binary):\n        raise ValueError('Invalid binary number')\n\n    binary = binary[::-1]  # Reverse the binary string to start from the least significant bit\n    decimal = 0\n\n    for i in range(len(binary)):\n        if binary[i] == '1':\n            decimal += pow(2, i)\n\n    return decimal\n\n# Example usage:\ntry:\n    print(binary_to_decimal('1010'))  # Should print 10\n    print(binary_to_decimal('1101'))  # Should print 13\n    print(binary_to_decimal('2010'))  # Should raise ValueError: Invalid binary number\nexcept ValueError as e:\n    print(e)\n", "result": "failed: File \"/tmp/tmp9qscjjin.py\", line 21\n    try: binary_to_decimal('102'); assert False, 'Expected ValueError' except ValueError as e: assert str(e) == 'Invalid binary number'\n                                                                       ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 25, "requirement": "Exception Handling", "completion": "def find_product(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input should be a list\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(item, int) for item in arr):\n        raise TypeError(\"List should only contain integers\")\n\n    # Create a dictionary to store the frequency of each element\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Initialize the product to 1\n    product = 1\n\n    # Multiply the product by each non-repeated element\n    for num, count in freq.items():\n        if count == 1:\n            product *= num\n\n    return product\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmptzvizojs.py\", line 22, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "requirement": "Exception Handling", "completion": "def check_k_elements(tuple_list, k):\n    # Check if tuple_list is a list\n    if not isinstance(tuple_list, list):\n        raise TypeError(\"The first argument must be a list of tuples.\")\n    \n    # Check if k is an integer\n    if not isinstance(k, int):\n        raise TypeError(\"The second argument must be an integer.\")\n    \n    # Check if all tuples have k elements\n    for t in tuple_list:\n        # Check if t is a tuple\n        if not isinstance(t, tuple):\n            raise TypeError(\"The list must contain only tuples.\")\n        \n        if len(t) != k:\n            return False\n    return True\n\n# Example usage:\ntuple_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nprint(check_k_elements(tuple_list, 3))  # prints: True\n\ntuple_list = [(1, 2, 3), (4, 5), (7, 8, 9)]\nprint(check_k_elements(tuple_list, 3))  # prints: False\n\n# Testing error cases\ntry:\n    print(check_k_elements(\"not a list\", 3))  # Raises TypeError\nexcept TypeError as e:\n    print(e)\n\ntry:\n    print(check_k_elements([(1, 2), (3, 4, 5)], \"not an integer\"))  # Raises TypeError\nexcept TypeError as e:\n    print(e)\n\ntry:\n    print(check_k_elements([1, 2, 3], 3))  # Raises TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpq7b2wvm_.py\", line 34, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "requirement": "Exception Handling", "completion": "def remove(lst):\n    # Check if the input is a list\n    if not isinstance(lst, list):\n        raise TypeError(\"Input should be a list\")\n    \n    # Check if all elements in the list are strings\n    if not all(isinstance(item, str) for item in lst):\n        raise TypeError(\"All elements in the list should be strings\")\n    \n    # Remove digits from each string in the list\n    return [''.join([i for i in s if not i.isdigit()]) for s in lst]\n", "result": "passed", "passed": true}
{"task_id": 28, "requirement": "Exception Handling", "completion": "import math\n\ndef binomial_coeff(n, k):\n    # Check if n and k are non-negative\n    if n < 0 or k < 0:\n        raise ValueError(\"Inputs must be non-negative\")\n    # Check if k is not greater than n\n    if k > n:\n        raise ValueError(\"k must not be greater than n\")\n    \n    # Calculate the binomial coefficient using the formula\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n\n# Example usage:\ntry:\n    print(binomial_coeff(5, 2))  # Should print 10\n    print(binomial_coeff(-3, 2))  # Should raise ValueError\n    print(binomial_coeff(3, 4))   # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpl92q5qsx.py\", line 21, in <module>\n    try: binomial_coeff(-1, 2)\n  File \"/tmp/tmpl92q5qsx.py\", line 5, in binomial_coeff\n    raise ValueError(\"Inputs must be non-negative\")\nValueError: Inputs must be non-negative\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpl92q5qsx.py\", line 22, in <module>\n    except ValueError as e: assert str(e) == 'Inputs must be non-negative and k must not be greater than n'\nAssertionError", "passed": false}
{"task_id": 29, "requirement": "Exception Handling", "completion": "def get_odd_occurrence(lst):\n    # Check if the input is a list\n    if not isinstance(lst, list):\n        raise TypeError(\"Input should be a list of integers\")\n\n    # Check if all elements in the list are integers\n    if not all(isinstance(item, int) for item in lst):\n        raise TypeError(\"Input should be a list of integers\")\n\n    # Create a dictionary to count occurrences\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Find the element with an odd count\n    for num, count in count_dict.items():\n        if count % 2 != 0:\n            return num\n\n    # If no element is found, return None\n    return None\n\n# Example usage:\ntry:\n    print(get_odd_occurrence([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]))  # Output: 1\n    print(get_odd_occurrence(\"not a list\"))  # Raises TypeError\n    print(get_odd_occurrence([1, 2, 2, \"three\", 3, 3, 4, 4, 4, 4]))  # Raises TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpk2r3h4e6.py\", line 28, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "requirement": "Exception Handling", "completion": "def count_substring_with_equal_ends(s):\n    # Check if the input is a string\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if s[i] == s[j]:\n                count += 1\n    return count\n\n# Example usage:\ntry:\n    print(count_substring_with_equal_ends(\"abcab\"))  # Output: 2\nexcept TypeError as e:\n    print(e)\n", "result": "failed: File \"/tmp/tmp4dasa5kn.py\", line 19\n    try: count_substring_with_equal_ends(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                                  ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 31, "requirement": "Exception Handling", "completion": "import heapq\n\ndef func(nums, k):\n    # Check if k is greater than the number of distinct integers\n    if k > len(set(nums)):\n        raise ValueError('k cannot be greater than the number of distinct integers')\n\n    # Create a dictionary to store the frequency of each number\n    freq = {}\n    for num in nums:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Use a heap to find the k most frequent numbers\n    heap = []\n    for num, count in freq.items():\n        if len(heap) < k:\n            heapq.heappush(heap, (count, num))\n        else:\n            if count > heap[0][0]:\n                heapq.heapreplace(heap, (count, num))\n\n    # Return the k most frequent numbers\n    return [num for _, num in heap]\n\n# Example usage:\nnums = [1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5]\nk = 3\ntry:\n    print(func(nums, k))  # Output: [5, 3, 4]\nexcept ValueError as e:\n    print(e)\n\n# Test with k greater than the number of distinct integers\nk = 10\nnums = [1, 2, 3, 4, 5]\ntry:\n    print(func(nums, k))\nexcept ValueError as e:\n    print(e)  # Output: k cannot be greater than the number of distinct integers\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5khecqgx.py\", line 37, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n  File \"/tmp/tmp5khecqgx.py\", line 4, in func\n    if k > len(set(nums)):\nTypeError: unhashable type: 'list'", "passed": false}
{"task_id": 32, "requirement": "Exception Handling", "completion": "def max_prime_factors(n):\n    # Check if the input is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n# Example usage:\ntry:\n    print(max_prime_factors(10))  # Output: 5\n    print(max_prime_factors(17))  # Output: 17\n    print(max_prime_factors(315))  # Output: 7\n    print(max_prime_factors(-10))  # Raises ValueError: Input must be a positive integer\n    print(max_prime_factors(0))   # Raises ValueError: Input must be a positive integer\n    print(max_prime_factors(3.14)) # Raises ValueError: Input must be a positive integer\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 33, "requirement": "Exception Handling", "completion": "def decimal_to_binary(n):\n    # Check if the input is a non-negative integer\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    # Convert the decimal number to binary\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    \n    return binary\n\n# Test the function with valid input\nprint(decimal_to_binary(10))  # Output: 1010\n\n# Test the function with invalid input\ntry:\n    print(decimal_to_binary(-5))  # Raises ValueError: Input must be a non-negative integer\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(decimal_to_binary(10.5))  # Raises ValueError: Input must be a non-negative integer\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpbetpoc2t.py\", line 22, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "requirement": "Exception Handling", "completion": "def find_missing(arr):\n    # Check if the list is sorted\n    if arr != sorted(arr):\n        raise ValueError('Input list must be sorted.')\n\n    # Binary search to find the missing number\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        # If the current element is not equal to its index + 1,\n        # then the missing number is to the left of mid\n        if arr[mid] != mid + 1 and (mid == 0 or arr[mid - 1] == mid):\n            return mid + 1\n        # If the current element is equal to its index + 1,\n        # then the missing number is to the right of mid\n        elif arr[mid] == mid + 1:\n            left = mid + 1\n        # If the current element is greater than its index + 1,\n        # then the missing number is before mid\n        else:\n            right = mid - 1\n    # If no missing number is found, return -1\n    return -1\n\n# Example usage:\ntry:\n    print(find_missing([1, 2, 3, 4, 6, 7, 8]))  # Output: 5\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(find_missing([1, 3, 4, 5]))  # Output: 2\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(find_missing([1, 2, 3, 4, 5]))  # Output: -1\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(find_missing([2, 1]))  # Output: Raises ValueError: Input list must be sorted.\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkyfwkgxa.py\", line 40, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "requirement": "Exception Handling", "completion": "def find_rect_num(n):\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n\n    # Initialize the count of rectangular numbers\n    count = 0\n\n    # Iterate over all possible pairs of positive integers\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            # If the product i*j is equal to n, increment the count\n            if i * j == n:\n                count += 1\n\n    return count\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp97yu0jwk.py\", line 13, in <module>\n    assert find_rect_num(4) == 20\nAssertionError", "passed": false}
{"task_id": 36, "requirement": "Exception Handling", "completion": "def find_nth_digit(numerator, denominator, n):\n    # Check if the denominator is zero\n    if denominator == 0:\n        raise ValueError(\"Denominator cannot be zero\")\n\n    # Convert the numbers to strings\n    numerator_str = str(numerator)\n    denominator_str = str(denominator)\n\n    # Concatenate the two numbers\n    fraction_str = numerator_str + denominator_str\n\n    # Check if n is a valid index\n    if n < len(fraction_str):\n        # Return the nth digit\n        return fraction_str[n]\n    else:\n        # Return None if n is out of range\n        return None\n\n# Example usage:\ntry:\n    print(find_nth_digit(123, 0, 2))  # Raises ValueError: Denominator cannot be zero\nexcept ValueError as e:\n    print(e)\n\nprint(find_nth_digit(123, 456, 2))  # Output: '2'\nprint(find_nth_digit(123, 456, 10))  # Output: None\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpuk0zudmr.py\", line 24, in <module>\n    assert find_nth_digit(1,2,1) == 5\nAssertionError", "passed": false}
{"task_id": 37, "requirement": "Exception Handling", "completion": "def sort_mixed_list(lst):\n    # Check if the input is a list\n    if not isinstance(lst, list):\n        raise TypeError(\"Input should be a list\")\n    \n    # Check if all elements in the list are either integers or strings\n    for item in lst:\n        if not isinstance(item, (int, str)):\n            raise TypeError(\"List should only contain integers and strings\")\n    \n    # Separate and sort integers and strings\n    int_lst = sorted([i for i in lst if isinstance(i, int)])\n    str_lst = sorted([i for i in lst if isinstance(i, str)])\n    \n    # Combine and return the sorted list\n    return int_lst + str_lst\n\n# Test the function with valid input\nprint(sort_mixed_list([3, 'a', 1, 'b', 2, 'c', 'd', 4]))\n\n# Test the function with invalid input\ntry:\n    print(sort_mixed_list(123))  # This should raise a TypeError\nexcept TypeError as e:\n    print(e)\n\ntry:\n    print(sort_mixed_list([3, 'a', 1, 'b', 2, 'c', 'd', 4, None]))  # This should raise a TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 38, "requirement": "Exception Handling", "completion": "def div_even_odd(lst):\n    even = None\n    odd = None\n    for i in lst:\n        if i % 2 == 0 and even is None:\n            even = i\n        elif i % 2 != 0 and odd is None:\n            odd = i\n        if even is not None and odd is not None:\n            break\n    if even is None or odd is None:\n        raise ValueError('List must contain at least one even and one odd number.')\n    else:\n        return odd / even\n\n# Example usage:\ntry:\n    result = div_even_odd([1, 3, 5, 7, 9])\n    print(result)\nexcept ValueError as e:\n    print(e)\n", "result": "failed: File \"/tmp/tmpig5wnc3f.py\", line 24\n    try: div_even_odd([2, 4, 6]); assert False; except ValueError as e: assert str(e) == 'List must contain at least one even and one odd number.'\n                                                ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 39, "requirement": "Exception Handling", "completion": "from collections import Counter\nimport re\n\ndef rearrange_string(s):\n    # Check if the input is a string\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string\")\n    \n    # Check if the string contains only lowercase letters\n    if not re.match(\"^[a-z]*$\", s):\n        raise ValueError(\"String must contain only lowercase letters\")\n    \n    # Count the frequency of each character\n    freq = Counter(s)\n    \n    # Check if the frequency of each character is even\n    for char, count in freq.items():\n        if count % 2 != 0:\n            return False\n    \n    return True\n\n# Example usage:\ntry:\n    print(rearrange_string(\"aabbcc\"))  # Should return True\n    print(rearrange_string(\"aabbccd\")) # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgl3eczm2.py\", line 23, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "requirement": "Exception Handling", "completion": "from collections import Counter\n\ndef freq_element(lst):\n    # Check if the input is a list of lists\n    if not isinstance(lst, list) or not all(isinstance(i, list) for i in lst):\n        raise TypeError(\"Input should be a list of lists\")\n    \n    # Flatten the list of lists\n    flat_list = [item for sublist in lst for item in sublist]\n    # Use Counter to get the frequency of each element\n    freq = Counter(flat_list)\n    return freq\n", "result": "failed: File \"/tmp/tmpufgbsn4s.py\", line 14\n    try: freq_element('not a list'); assert False; except TypeError: assert True\n                                                   ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 41, "requirement": "Exception Handling", "completion": "def filter_evennumbers(numbers):\n    # Check if the input is a list\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input should be a list of integers.\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(num, int) for num in numbers):\n        raise TypeError(\"All elements in the list should be integers.\")\n    \n    # Use the filter function with a lambda to filter even numbers\n    return list(filter(lambda x: x % 2 == 0, numbers))\n\n# Example usage:\ntry:\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(filter_evennumbers(numbers))  # Output: [2, 4, 6, 8, 10]\n    \n    # Testing with non-list input\n    print(filter_evennumbers(\"not a list\"))  # Raises TypeError\n    \n    # Testing with a list that contains non-integer elements\n    print(filter_evennumbers([1, 2, \"three\", 4]))  # Raises TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 42, "requirement": "Exception Handling", "completion": "def find_sum(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n\n    # Create a dictionary to keep track of the frequency of each element\n    freq = {}\n    for num in arr:\n        # Check if the element is an integer\n        if not isinstance(num, int):\n            raise TypeError(\"List must contain only integers\")\n\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Sum up the elements that appear more than once\n    sum_repeated = 0\n    for num, count in freq.items():\n        if count > 1:\n            sum_repeated += num * count\n\n    return sum_repeated\n\n# Example usage:\ntry:\n    print(find_sum([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]))  # Should print 12\n    print(find_sum(\"not a list\"))  # Should raise TypeError\n    print(find_sum([1, 2, \"two\", 3, 3, 3, 4, 4, 4, 4]))  # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpj78wkxto.py\", line 28, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Exception Handling", "completion": "import re\n\ndef text_match(text):\n    # Check if the input is a string\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n\n    pattern = '[_][a-z]+'\n    match = re.search(pattern, text)\n\n    if match:\n        return match.group()\n    else:\n        return \"No match found\"\n\n# Test the function with valid and invalid inputs\nprint(text_match(\"test_string\"))  # Output: _string\nprint(text_match(\"testString\"))   # Output: No match found\nprint(text_match(12345))          # Output: Raises TypeError: Input must be a string\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpe5rjc6p3.py\", line 15, in <module>\n    print(text_match(12345))          # Output: Raises TypeError: Input must be a string\n  File \"/tmp/tmpe5rjc6p3.py\", line 5, in text_match\n    raise TypeError(\"Input must be a string\")\nTypeError: Input must be a string", "passed": false}
{"task_id": 44, "requirement": "Exception Handling", "completion": "def text_match_string(text, word):\n    # Check if both text and word are strings\n    if not isinstance(text, str) or not isinstance(word, str):\n        raise TypeError(\"Both text and word must be of type str\")\n    \n    # Check if text starts with the word\n    if text.startswith(word):\n        return True\n    else:\n        return False\n", "result": "failed: File \"/tmp/tmpdd2qp7so.py\", line 13\n    try: text_match_string(123); assert False, 'TypeError not raised' except TypeError: pass\n                                                                      ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 45, "requirement": "Exception Handling", "completion": "def get_gcd(arr):\n    if not arr:\n        raise ValueError('Input list cannot be empty.')\n\n    def gcd(a, b):\n        while b != 0:\n            a, b = b, a % b\n        return a\n\n    result = arr[0]\n\n    for num in arr[1:]:\n        result = gcd(result, num)\n\n    return result\n\n# Example usage:\ntry:\n    print(get_gcd([8, 12, 20]))  # Output: 4\n    print(get_gcd([]))  # Raises ValueError: Input list cannot be empty.\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 46, "requirement": "Exception Handling", "completion": "def test_distinct(lst):\n    # Check if the input is a list\n    if not isinstance(lst, list):\n        raise TypeError(\"Input should be a list of integers\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(item, int) for item in lst):\n        raise TypeError(\"List should only contain integers\")\n    \n    # Check if all numbers are distinct\n    return len(lst) == len(set(lst))\n\n# Example usage:\nprint(test_distinct([1, 2, 3, 4, 5]))  # True, all numbers are distinct\nprint(test_distinct([1, 2, 2, 4, 5]))  # False, 2 is repeated\n\n# Test with non-list input\ntry:\n    print(test_distinct(\"1, 2, 3, 4, 5\"))  # Raises TypeError\nexcept TypeError as e:\n    print(e)\n\n# Test with list containing non-integer elements\ntry:\n    print(test_distinct([1, 2, \"3\", 4, 5]))  # Raises TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 47, "requirement": "Exception Handling", "completion": "def compute_last_digit(a, b):\n    if a > b:\n        raise ValueError('a should not be greater than b')\n\n    # Calculate the factorial of b\n    factorial_b = 1\n    for i in range(1, b + 1):\n        factorial_b *= i\n\n    # Calculate the factorial of a\n    factorial_a = 1\n    for i in range(1, a + 1):\n        factorial_a *= i\n\n    # Find the last digit of the division\n    last_digit = (factorial_a % 10) * pow(factorial_b, -1, 10)\n    return last_digit % 10\n\n# Test the function with valid inputs\nprint(compute_last_digit(5, 7))  # Output: 5\n\n# Test the function with invalid input\ntry:\n    print(compute_last_digit(8, 7))  # This should raise an error\nexcept ValueError as e:\n    print(e)  # Output: a should not be greater than b\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpquqcswt0.py\", line 16, in <module>\n    print(compute_last_digit(5, 7))  # Output: 5\n  File \"/tmp/tmpquqcswt0.py\", line 13, in compute_last_digit\n    last_digit = (factorial_a % 10) * pow(factorial_b, -1, 10)\nValueError: base is not invertible for the given modulus", "passed": false}
{"task_id": 48, "requirement": "Exception Handling", "completion": "def odd_bit_set_number(n):\n    # Check if the input is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    # Initialize the result to 0\n    result = 0\n    \n    # Iterate over each bit position\n    for i in range(31):  # Assuming 32-bit integer\n        # If the bit position is odd and the bit is 0 in the input\n        if i % 2 != 0 and (n & (1 << i)) == 0:\n            # Set the bit in the result to 1\n            result |= (1 << i)\n    \n    return result\n\n# Example usage:\ntry:\n    print(odd_bit_set_number(10))  # Should print 14\n    print(odd_bit_set_number('10'))  # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpzdef9q2v.py\", line 20, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "requirement": "Exception Handling", "completion": "def specified_element(two_dim_list, position=0):\n    # Check if the position is within the range for all sublists\n    if not all(len(sublist) > position for sublist in two_dim_list):\n        raise IndexError('Index out of range for sublist')\n    \n    # Extract the specified element from each sublist\n    return [sublist[position] for sublist in two_dim_list]\n\n# Example usage:\ntry:\n    two_dim_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(specified_element(two_dim_list, 2))  # Output: [3, 6, 9]\n    \n    # This will raise an IndexError because the position is out of range for the first sublist\n    print(specified_element(two_dim_list, 5))\nexcept IndexError as e:\n    print(e)  # Output: Index out of range for sublist\n", "result": "passed", "passed": true}
{"task_id": 50, "requirement": "Exception Handling", "completion": "def min_length_list(lst):\n    # Check if the input is a list of lists\n    if not all(isinstance(i, list) for i in lst):\n        raise ValueError('Input must be a list of lists.')\n    \n    # Use a lambda function to find the list with the minimum length\n    return min(lst, key=lambda x: len(x))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkad17bcy.py\", line 7, in <module>\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nAssertionError", "passed": false}
{"task_id": 51, "requirement": "Exception Handling", "completion": "def check_equilateral(a, b, c):\n    # Check if any of the sides are non-positive integers\n    if a <= 0 or b <= 0 or c <= 0:\n        raise ValueError(\"All sides of a triangle must be positive numbers.\")\n    \n    # Check if the sides can form a triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        raise ValueError(\"The given sides do not form a valid triangle.\")\n    \n    # Check if the triangle is equilateral\n    if a == b == c:\n        print(\"The triangle is equilateral.\")\n    else:\n        print(\"The triangle is not equilateral.\")\n\n# Test the function with valid inputs\ncheck_equilateral(3, 3, 3)  # This should print \"The triangle is equilateral.\"\ncheck_equilateral(5, 5, 5)  # This should print \"The triangle is equilateral.\"\n\n# Test the function with invalid inputs\ntry:\n    check_equilateral(0, 1, 1)  # This should raise a ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    check_equilateral(-1, 2, 2)  # This should raise a ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    check_equilateral(1, 2, 3)  # This should raise a ValueError\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpbhqxnqc4.py\", line 29, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "requirement": "Exception Handling", "completion": "def parallelogram_area(base, height):\n    if not (isinstance(base, (int, float)) and isinstance(height, (int, float))):\n        raise TypeError(\"Both base and height must be numerical (int or float)\")\n    return base * height\n\n# Example usage:\ntry:\n    print(parallelogram_area(5, 10))  # Output: 50\n    print(parallelogram_area(3.5, 7.2))  # Output: 25.2\n    print(parallelogram_area(\"five\", 10))  # Raises TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 53, "requirement": "Exception Handling", "completion": "def check_equality(input_string):\n    # Check if the input is a string\n    if not isinstance(input_string, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Check if the first and last characters are equal\n    return input_string[0] == input_string[-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpu38yhiup.py\", line 7, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 54, "requirement": "Exception Handling", "completion": "def counting_sort(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input should be a list\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(i, int) for i in arr):\n        raise TypeError(\"All elements in the list should be integers\")\n    \n    # Find the maximum element in the array\n    max_val = max(arr)\n    \n    # Initialize the count array with all zeros\n    count = [0] * (max_val + 1)\n    \n    # Store the count of each element in the count array\n    for num in arr:\n        count[num] += 1\n    \n    # Store the cumulative count\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    \n    # Build the output array\n    output = [0] * len(arr)\n    for num in arr:\n        output[count[num] - 1] = num\n        count[num] -= 1\n    \n    return output\n", "result": "passed", "passed": true}
{"task_id": 55, "requirement": "Exception Handling", "completion": "def tn_gp(a, r, n):\n    \"\"\"\n    This function calculates the nth term of a geometric series.\n    a: first term of the series\n    r: common ratio of the series\n    n: term number to calculate\n    \"\"\"\n    if n < 1:\n        raise ValueError('Term number must be greater than 0')\n    return a * r ** (n - 1)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp61pdkz47.py\", line 5, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "requirement": "Exception Handling", "completion": "def check(n):\n    # Check if the input is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n\n    # Convert the number to a string, reverse it, and convert it back to an integer\n    reverse = int(str(n)[::-1])\n\n    # Check if the number is one less than twice its reverse\n    return n == 2 * reverse - 1\n\n# Example usage:\ntry:\n    print(check(123))  # Should return True\n    print(check(124))  # Should return False\n    print(check(\"123\"))  # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 57, "requirement": "Exception Handling", "completion": "def find_max_num(digits, num_digits):\n    if num_digits > len(digits):\n        raise ValueError('Number of digits exceeds the length of the list.')\n    \n    # Sort the digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n    \n    # Join the sorted digits to form the largest number\n    largest_num = int(''.join(map(str, sorted_digits[:num_digits])))\n    \n    return largest_num\n\n# Example usage:\ntry:\n    print(find_max_num([1, 2, 3, 4, 5], 3))  # Output: 543\n    print(find_max_num([9, 8, 7, 6, 5], 4))  # Output: 9876\n    print(find_max_num([5, 5, 5, 5, 5], 5))  # Output: 55555\n    print(find_max_num([1, 2, 3], 5))        # Raises ValueError\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 58, "requirement": "Exception Handling", "completion": "def opposite_signs(num1, num2):\n    # Check if both inputs are integers\n    if not all(isinstance(i, int) for i in (num1, num2)):\n        raise TypeError(\"Both inputs must be integers\")\n    \n    # Check if the numbers have opposite signs\n    return (num1 > 0) != (num2 > 0)\n", "result": "passed", "passed": true}
{"task_id": 59, "requirement": "Exception Handling", "completion": "def is_octagonal(n):\n    # Check if the input is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    # Calculate the nth octagonal number\n    return n * (2 * n - 1)\n\n# Example usage:\ntry:\n    print(is_octagonal(1))  # Output: 1\n    print(is_octagonal(2))  # Output: 5\n    print(is_octagonal(3))  # Output: 14\n    print(is_octagonal(0))  # Raises ValueError: Input must be a positive integer\n    print(is_octagonal(-5)) # Raises ValueError: Input must be a positive integer\n    print(is_octagonal(2.5)) # Raises ValueError: Input must be a positive integer\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvcb96gwm.py\", line 17, in <module>\n    assert is_octagonal(5) == 65\nAssertionError", "passed": false}
{"task_id": 60, "requirement": "Exception Handling", "completion": "def max_len_sub(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"The input array must be a list.\")\n    # Check if the list is not empty\n    if not arr:\n        raise ValueError(\"The input array cannot be empty.\")\n    # Check if all elements in the list are integers\n    if not all(isinstance(item, int) for item in arr):\n        raise TypeError(\"All elements in the input array must be integers.\")\n    \n    n = len(arr)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] >= arr[j] and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    return max(dp)\n\n# Example usage:\nprint(max_len_sub([1, 2, 3, 4]))  # Output: 4\nprint(max_len_sub([5, 1, 2, 3, 4]))  # Output: 4\nprint(max_len_sub([10, 9, 8, 7, 6]))  # Output: 1\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0w1kwnuj.py\", line 22, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}

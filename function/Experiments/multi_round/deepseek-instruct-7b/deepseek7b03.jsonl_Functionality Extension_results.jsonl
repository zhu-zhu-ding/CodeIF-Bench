{"task_id": 11, "requirement": "Functionality Extension", "completion": "def remove_occ(s, char, all=False):\n    if all:\n        # Remove all occurrences of the character\n        return s.replace(char, '')\n    else:\n        # Remove first and last occurrence of the character\n        first_index = s.find(char)\n        last_index = s.rfind(char)\n        \n        if first_index != -1 and last_index != -1:\n            s = s[:first_index] + s[first_index+1:]\n            s = s[:last_index] + s[last_index+1:]\n        \n        return s\n", "result": "passed", "passed": true}
{"task_id": 12, "requirement": "Functionality Extension", "completion": "def sort_matrix(matrix):\n    # Find the maximum length of a row to pad shorter rows\n    max_length = max(len(row) for row in matrix)\n    \n    # Pad each row to the maximum length with zeros\n    padded_matrix = [[0] * max_length for _ in range(len(matrix))]\n    for i, row in enumerate(matrix):\n        padded_matrix[i][:len(row)] = row\n    \n    # Calculate the sum of each row after padding\n    row_sums = [sum(row) for row in padded_matrix]\n    \n    # Sort the matrix based on the row sums\n    sorted_matrix = sorted(padded_matrix, key=lambda row: sum(row))\n    \n    return sorted_matrix\n\n# Example usage:\nmatrix = [[1, 2, 3], [4, 5], [7, 8, 9]]\nsorted_matrix = sort_matrix(matrix)\nprint(sorted_matrix)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpsag79mj8.py\", line 17, in <module>\n    assert sort_matrix([[1, 2, 3], [4, 5], [6]]) == [[6], [4, 5], [1, 2, 3]]\nAssertionError", "passed": false}
{"task_id": 13, "requirement": "Functionality Extension", "completion": "from collections import Counter\n\ndef count_common(word_dict, top_n=1):\n    # Count the frequency of each word\n    word_counts = Counter(word_dict)\n    \n    # Get the top_n most common words\n    common_words = word_counts.most_common(top_n)\n    \n    # Return the words and their counts as a list of tuples\n    return common_words\n\n# Example usage:\nword_dict = {'apple': 5, 'banana': 3, 'cherry': 5, 'date': 1, 'apple': 7, 'banana': 2}\n\n# Get the most common word\nprint(count_common(word_dict))  # Output: [('apple', 7)]\n\n# Get the top 2 most common words\nprint(count_common(word_dict, top_n=2))  # Output: [('apple', 7), ('banana', 3)]\n", "result": "passed", "passed": true}
{"task_id": 14, "requirement": "Functionality Extension", "completion": "def find_volume(dimensions):\n    if isinstance(dimensions, (list, tuple)) and len(dimensions) == 3:\n        base_area, height, length = dimensions\n        return base_area * height * length\n    else:\n        raise ValueError(\"Input must be a list or tuple of three elements.\")\n\n# Example usage:\ntry:\n    volume = find_volume([10, 20, 30])  # base area, height, length\n    print(f\"The volume of the triangular prism is {volume} cubic units.\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp73dram2g.py\", line 13, in <module>\n    assert find_volume([10, 8, 6]) == 240\nAssertionError", "passed": false}
{"task_id": 15, "requirement": "Functionality Extension", "completion": "def split_lowerstring(s, include_lower=False):\n    words = s.split()\n    lower_segments = []\n    current_segment = ''\n\n    for word in words:\n        if word[0].islower():\n            if include_lower and current_segment:\n                lower_segments.append(current_segment)\n                current_segment = ''\n            lower_segments.append(word)\n        else:\n            if current_segment:\n                current_segment += ' '\n            current_segment += word\n\n    if include_lower and current_segment:\n        lower_segments.append(current_segment)\n\n    return lower_segments\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpm2_n649c.py\", line 18, in <module>\n    assert split_lowerstring('AbCd', include_lower=True) == ['Ab', 'Cd']\nAssertionError", "passed": false}
{"task_id": 16, "requirement": "Functionality Extension", "completion": "import re\n\ndef text_lowercase_underscore(text):\n    # The regular expression pattern r'\\b[a-z]+_[a-z]+\\b' matches sequences of \n    # one or more lowercase letters followed by an underscore, followed by \n    # one or more lowercase letters, where the sequence is a word boundary.\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    matches = re.findall(pattern, text)\n    \n    # Check if there is at least one match\n    if matches:\n        return 'Found a match!'\n    else:\n        return 'No match found.'\n\n# Example usage:\ntext = \"This is a test_string with some lowercase_letters and an underscore.\"\nprint(text_lowercase_underscore(text))  # Should print 'Found a match!'\n\ntext = \"This is a test_string with some uppercase_letters and an underscore.\"\nprint(text_lowercase_underscore(text))  # Should print 'No match found.'\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqw_8upo9.py\", line 18, in <module>\n    assert text_lowercase_underscore('abc_def_ghi') == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 17, "requirement": "Functionality Extension", "completion": "def square_perimeter(side_length):\n    \"\"\"\n    This function calculates the perimeter of a square, rounding the side length to the nearest integer.\n\n    :param side_length: length of one side of the square (can be a floating-point number)\n    :return: perimeter of the square\n    \"\"\"\n    # Round the side length to the nearest integer\n    rounded_side_length = round(side_length)\n    # Calculate the perimeter using the rounded side length\n    return 4 * rounded_side_length\n\n# Example usage:\nprint(square_perimeter(5.3))  # Output: 21\nprint(square_perimeter(2.5))  # Output: 10\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_63ezevw.py\", line 9, in <module>\n    assert square_perimeter(4.5) == 20\nAssertionError", "passed": false}
{"task_id": 18, "requirement": "Functionality Extension", "completion": "def remove_dirty_chars(s1, s2):\n    # Convert both strings to lowercase\n    s1_lower = s1.lower()\n    s2_lower = s2.lower()\n    \n    # Use a generator expression to filter out characters from s1 that are in s2\n    return ''.join(c for c in s1_lower if c not in s2_lower)\n\n# Example usage:\ns1 = \"Hello, World!\"\ns2 = \"lowrd\"\nprint(remove_dirty_chars(s1, s2))  # Outputs: \"Helo, He!\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3gacadc2.py\", line 11, in <module>\n    assert remove_dirty_chars('HelloWorld', 'hELLO') == 'World', 'Function should handle case-insensitive character removal.'\nAssertionError: Function should handle case-insensitive character removal.", "passed": false}
{"task_id": 19, "requirement": "Functionality Extension", "completion": "def test_duplicate(arr):\n    # Create a dictionary to count occurrences\n    count_dict = {}\n    duplicates = []\n\n    # Count occurrences\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n            if count_dict[num] == 2:  # If it's a duplicate, add to the list\n                duplicates.append(num)\n        else:\n            count_dict[num] = 1\n\n    return duplicates\n\n# Example usage:\nprint(test_duplicate([1, 2, 3, 4, 5]))  # prints: []\nprint(test_duplicate([1, 2, 3, 4, 5, 5]))  # prints: [5]\nprint(test_duplicate([1, 2, 3, 4, 5, 5, 6, 6]))  # prints: [5, 6]\n", "result": "passed", "passed": true}
{"task_id": 20, "requirement": "Functionality Extension", "completion": "def is_woodall(n):\n    if n < 0:\n        return False, []\n    \n    woodall_numbers = []\n    i = 0\n    while True:\n        woodall_num = i * 2**i - 1\n        if woodall_num > n:\n            break\n        woodall_numbers.append(woodall_num)\n        i += 1\n    \n    return n in woodall_numbers, woodall_numbers\n\n# Example usage:\nis_woodall_num, woodall_list = is_woodall(100)\nprint(f\"Is 100 a Woodall number? {is_woodall_num}\")\nprint(f\"List of Woodall numbers up to 100: {woodall_list}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvweknfpf.py\", line 17, in <module>\n    assert is_woodall(10) == [1, 7]\nAssertionError", "passed": false}
{"task_id": 21, "requirement": "Functionality Extension", "completion": "def multiples_of_num(n, m):\n    multiples = []\n    for i in range(1, m+1):\n        multiples.append(n * i)\n    return multiples\n\n# Example usage:\nprint(multiples_of_num(7.5, 5))  # Output: [7.5, 15.0, 22.5, 30.0, 37.5]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppbmd4630.py\", line 8, in <module>\n    assert multiples_of_num(3, 2.5) == [2.5, 5.0, 7.5]\n  File \"/tmp/tmppbmd4630.py\", line 3, in multiples_of_num\n    for i in range(1, m+1):\nTypeError: 'float' object cannot be interpreted as an integer", "passed": false}
{"task_id": 22, "requirement": "Functionality Extension", "completion": "def find_first_duplicate(arr):\n    duplicates = []\n    seen = set()\n    for num in arr:\n        if num in seen:\n            if num not in duplicates:\n                duplicates.append(num)\n        else:\n            seen.add(num)\n    return duplicates\n\n# Example usage:\nprint(find_first_duplicate([1, 2, 3, 4, 2]))  # Output: [2]\nprint(find_first_duplicate([1, 2, 3, 4, 5]))  # Output: []\nprint(find_first_duplicate([1, 2, 2, 3, 4]))  # Output: [2]\nprint(find_first_duplicate([1, 1, 2, 3, 4]))  # Output: [1]\n", "result": "passed", "passed": true}
{"task_id": 23, "requirement": "Functionality Extension", "completion": "def maximum_sum(list_of_lists):\n    return max(sum(inner_list) for inner_list in list_of_lists)\n", "result": "passed", "passed": true}
{"task_id": 24, "requirement": "Functionality Extension", "completion": "def binary_to_decimal(binary):\n    binary = str(binary)  # Ensure the input is a string\n    decimal = 0\n    for digit in binary:\n        if digit == '1':\n            decimal = decimal * 2 + 1\n        elif digit == '0':\n            decimal = decimal * 2\n        else:\n            raise ValueError(\"Invalid binary number. Only 0s and 1s are allowed.\")\n    return decimal\n\n# Example usage:\nprint(binary_to_decimal('001010'))  # Output: 10\n", "result": "passed", "passed": true}
{"task_id": 25, "requirement": "Functionality Extension", "completion": "def find_product(arr):\n    # Create a dictionary to store the frequency of each element\n    freq = {}\n    negatives = 0  # To keep track of the number of negative numbers\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n        # Count the number of negative numbers\n        if num < 0:\n            negatives += 1\n\n    # Initialize the product to 1\n    product = 1\n\n    # Multiply the product by each non-repeated element\n    for num, count in freq.items():\n        if count == 1:\n            product *= num\n\n    # If there's an odd number of negative numbers, the product will be negative\n    if negatives % 2 != 0:\n        product *= -1\n\n    return product\n\n# Test cases\nprint(find_product([1, 2, 3, 2, 1]))  # Should return 3\nprint(find_product([-1, -2, -3, -2, -1]))  # Should return -3\nprint(find_product([-1, -2, -3, -2, -1, 4, 5, 6, 7, 8, 9, 10]))  # Should return 210\nprint(find_product([-1, -2, -3, -2, -1, -4, -5, -6, -7, -8, -9, -10]))  # Should return -210\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp806fu59c.py\", line 28, in <module>\n    assert find_product([-1, -2, 3, 3], 4) == 2\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "requirement": "Functionality Extension", "completion": "def check_k_elements(tuple_list, k):\n    count = 0\n    for t in tuple_list:\n        if len(t) == k:\n            count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": 27, "requirement": "Functionality Extension", "completion": "def remove(lst, chars_to_remove=''):\n    # Create a set of characters to remove for faster lookup\n    chars_to_remove_set = set(chars_to_remove)\n    # Use list comprehension to remove specified characters and digits\n    return [''.join(c for c in s if c.isalnum() or c not in chars_to_remove_set) for s in lst]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvnj08oox.py\", line 6, in <module>\n    assert remove_extended(['abcd123', '456defg'], 'abcdef') == ['d', 'g']\nNameError: name 'remove_extended' is not defined", "passed": false}
{"task_id": 28, "requirement": "Functionality Extension", "completion": "def binomial_coeff(n, k, memo={}):\n    # Base cases\n    if k == 0 or n == k:\n        return 1\n    # Check if result is already memoized\n    if (n, k) in memo:\n        return memo[(n, k)]\n    # Calculate and memoize the result\n    result = binomial_coeff(n - 1, k - 1, memo) + binomial_coeff(n - 1, k, memo)\n    memo[(n, k)] = result\n    return result\n\n# Example usage:\nprint(binomial_coeff(5, 2))  # Output: 10\n", "result": "passed", "passed": true}
{"task_id": 29, "requirement": "Functionality Extension", "completion": "def get_odd_occurrence(arr: list, arr_size: int) -> int:\n    # Create a set to store the elements with an odd count\n    result = set()\n\n    # Iterate over the array\n    for num in arr:\n        # If the number is in the set, remove it\n        if num in result:\n            result.remove(num)\n        # If the number is not in the set, add it\n        else:\n            result.add(num)\n\n    # The set should now contain the elements with an odd count\n    # If there are multiple such elements, they will all be in the set\n    return list(result)\n\n# Example usage:\nprint(get_odd_occurrence([1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 10))  # Output: [1, 3]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpagcmqckt.py\", line 17, in <module>\n    assert get_odd_occurrence([1, 2, 3, 1, 2, 3, 1, 3]) == [1, 3]\nTypeError: get_odd_occurrence() missing 1 required positional argument: 'arr_size'", "passed": false}
{"task_id": 30, "requirement": "Functionality Extension", "completion": "def count_substring_with_equal_ends(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if s[i].isalpha() and s[j].isalpha() and s[i] == s[j]:\n                count += 1\n    return count\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplkea70x_.py\", line 8, in <module>\n    assert count_substring_with_equal_ends('a b a') == 4\nAssertionError", "passed": false}
{"task_id": 31, "requirement": "Functionality Extension", "completion": "import heapq\n\ndef func(nums, k):\n    # Handle the case where k is zero\n    if k == 0:\n        return []\n\n    # Create a dictionary to store the frequency of each number\n    freq = {}\n    for num in nums:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Use a heap to find the k most frequent numbers\n    heap = []\n    for num, count in freq.items():\n        if len(heap) < k:\n            heapq.heappush(heap, (count, num))\n        else:\n            if count > heap[0][0]:\n                heapq.heapreplace(heap, (count, num))\n\n    # Return the k most frequent numbers\n    return [num for _, num in heap]\n\n# Example usage:\nnums = [1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5]\nk = 3\nprint(func(nums, k))  # Output: [5, 3, 4]\n\n# Test case with k = 0\nk = 0\nprint(func(nums, k))  # Output: []\n", "result": "passed", "passed": true}
{"task_id": 32, "requirement": "Functionality Extension", "completion": "def max_prime_factors(n, return_all=False):\n    factors = []\n    # Divide n by 2 until n becomes odd\n    while n % 2 == 0:\n        factors.append(2)\n        n = n / 2\n\n    # n must be odd at this point, so we can skip one element (Note i = i +2)\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n / i\n\n    # This condition is to handle the case when n is a prime number greater than 2\n    if n > 2:\n        factors.append(n)\n\n    if return_all:\n        return factors\n    else:\n        return max(factors)\n\n# Example usage:\nprint(max_prime_factors(10))  # Output: 5\nprint(max_prime_factors(17))  # Output: 17\nprint(max_prime_factors(315))  # Output: 7\nprint(max_prime_factors(315, return_all=True))  # Output: [3, 3, 5, 7]\n", "result": "passed", "passed": true}
{"task_id": 33, "requirement": "Functionality Extension", "completion": "def decimal_to_binary(decimal_list):\n    binary_list = []\n    for decimal_num in decimal_list:\n        binary_num = bin(decimal_num).replace(\"0b\", \"\")\n        binary_list.append(binary_num)\n    return binary_list\n\n# Test the function\nprint(decimal_to_binary([10, 20, 30]))  # Output: ['1010', '10100', '11110']\n", "result": "passed", "passed": true}
{"task_id": 34, "requirement": "Functionality Extension", "completion": "def find_missing(arr):\n    # Find the first missing number\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] != mid + 1:\n            if mid == 0 or arr[mid - 1] == mid:\n                first_missing = mid + 1\n                break\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    # If the first missing number is not found, return -1\n    if 'first_missing' not in locals():\n        return -1\n\n    # Calculate the last missing number\n    last_missing = first_missing + (arr[-1] - len(arr))\n\n    # Generate the list of missing numbers\n    return list(range(first_missing, last_missing + 1))\n\n# Example usage:\nprint(find_missing([1, 2, 3, 4, 6, 7, 8]))  # Output: [5, 9]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp06zc1yhy.py\", line 22, in <module>\n    assert find_missing([1,3,6], 3) == [2, 4, 5]\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "requirement": "Functionality Extension", "completion": "def find_rect_num(n):\n    if isinstance(n, int) and n > 0:\n        return n * (n + 1) * (n + 2) // 2\n    elif isinstance(n, list):\n        return [find_rect_num(i) for i in n if i > 0]\n    else:\n        raise ValueError(\"Input must be a positive integer or a list of positive integers.\")\n\n# Test the function\nprint(find_rect_num(5))  # Output: 35\nprint(find_rect_num([1, 2, 3, 4, 5]))  # Output: [1, 6, 10, 15, 35]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_c5t6o20.py\", line 11, in <module>\n    assert find_rect_num([1, 2, 3]) == [2, 6, 12]\nAssertionError", "passed": false}
{"task_id": 36, "requirement": "Functionality Extension", "completion": "def find_nth_digit(num1, num2, n):\n    # Convert the numbers to strings\n    num1_str = str(abs(num1))  # Take the absolute value of the numerator\n    num2_str = str(abs(num2))  # Take the absolute value of the denominator\n\n    # Concatenate the two numbers\n    fraction_str = num1_str + num2_str\n\n    # Check if n is a valid index\n    if n < len(fraction_str):\n        # Return the nth digit\n        return fraction_str[n]\n    else:\n        # Return None if n is out of range\n        return None\n\n# Example usage:\nprint(find_nth_digit(-123, 456, 2))  # Output: '2' (the 2nd digit in the fraction of |-123| and |456| is '2')\nprint(find_nth_digit(-123, -456, 10))  # Output: None (there is no 10th digit in the fraction of |-123| and |-456|)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp66ivk1rm.py\", line 17, in <module>\n    assert find_nth_digit(-1, 2, 1) == 5\nAssertionError", "passed": false}
{"task_id": 37, "requirement": "Functionality Extension", "completion": "def sort_mixed_list(lst, reverse_strings=False):\n    # Separate integers and strings\n    int_lst = sorted([i for i in lst if isinstance(i, int)])\n    str_lst = sorted([i for i in lst if isinstance(i, str)],\n                     key=lambda s: s[::-1] if reverse_strings else s)\n    # Combine and return the sorted list\n    return int_lst + str_lst\n\n# Test the function with reverse_strings set to True\nprint(sort_mixed_list([3, 'a', 1, 'b', 2, 'c', 'd', 4], reverse_strings=True))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0g3qwvfh.py\", line 10, in <module>\n    assert sort_mixed_list([3, 'banana', 2, 'apple', 1, 'cherry'], reverse_strings=True) == [1, 2, 3, 'cherry', 'banana', 'apple']\nAssertionError", "passed": false}
{"task_id": 38, "requirement": "Functionality Extension", "completion": "def div_even_odd(lst):\n    even = None\n    odd = None\n    for i in lst:\n        if i % 2 == 0 and even is None:\n            even = i\n        elif i % 2 != 0 and odd is None:\n            odd = i\n        if even is not None and odd is not None:\n            break\n    if even is None or odd is None:\n        return \"List does not contain both even and odd numbers\"\n    else:\n        # Perform division with absolute values and handle sign\n        result = abs(odd) / abs(even)\n        if (odd < 0 and even > 0) or (odd > 0 and even < 0):\n            result = -result\n        return result\n\n# Example usage:\nprint(div_even_odd([-4, -3, 2, 1]))  # Output: -1.5\nprint(div_even_odd([-4, 6, 2, -1]))  # Output: -0.5\nprint(div_even_odd([4, 3, 2, 1]))    # Output: 1.5\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqn28_z3m.py\", line 23, in <module>\n    assert div_even_odd([-2, 3, 4, 5]) == -2 / 3\nAssertionError", "passed": false}
{"task_id": 39, "requirement": "Functionality Extension", "completion": "from collections import Counter\nfrom itertools import permutations\n\ndef rearrange_string(s):\n    # Check if the length of the string is even\n    if len(s) % 2 != 0:\n        return \"The string must be even length to satisfy the condition.\"\n\n    # Count the frequency of each character\n    freq = Counter(s)\n    \n    # Check if the frequency of each character is even\n    for char, count in freq.items():\n        if count % 2 != 0:\n            return \"The string cannot be rearranged with all different adjacent characters.\"\n\n    # Find the characters with an odd frequency\n    odd_freq_chars = [char for char, count in freq.items() if count % 2 != 0]\n    \n    # If there's more than one character with an odd frequency, it's not possible\n    if len(odd_freq_chars) > 1:\n        return \"The string cannot be rearranged with all different adjacent characters.\"\n\n    # Generate all permutations of the even-frequency characters\n    even_chars = [char * (freq[char] // 2) for char in freq if freq[char] % 2 == 0]\n    perms = [''.join(p) for p in permutations(even_chars)]\n\n    # If there's an odd frequency character, add it to the middle of each permutation\n    if odd_freq_chars:\n        odd_char = odd_freq_chars[0]\n        perms = [p[:len(p)//2] + odd_char + p[len(p)//2:] for p in perms]\n\n    return perms\n\n# Example usage:\nprint(rearrange_string(\"aabbcc\"))  # Should return all possible arrangements\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmph4ez2o3l.py\", line 28, in <module>\n    assert set(rearange_string('aabb')) == {'abab', 'baba'}\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "requirement": "Functionality Extension", "completion": "from collections import Counter\n\ndef freq_element(lst):\n    # Flatten the list of lists recursively\n    flat_list = flatten(lst)\n    # Use Counter to get the frequency of each integer\n    freq = Counter(flat_list)\n    return freq\n\ndef flatten(lst):\n    flat_list = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_list.extend(flatten(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n\n# Example usage:\nlst = [[1, 2, [3, 4]], [2, [3, 4, 5]], [3, [4, 5, 6]]]\nprint(freq_element(lst))  # Output: Counter({3: 3, 2: 2, 1: 1, 4: 2, 5: 1, 6: 1})\n", "result": "passed", "passed": true}
{"task_id": 41, "requirement": "Functionality Extension", "completion": "def filter_evennumbers(numbers):\n    # Filter out non-integer values\n    numbers = [num for num in numbers if isinstance(num, int)]\n    # Use the filter function with a lambda to get even numbers\n    return list(filter(lambda x: x % 2 == 0, numbers))\n", "result": "passed", "passed": true}
{"task_id": 42, "requirement": "Functionality Extension", "completion": "def find_sum(arr):\n    # Create a dictionary to keep track of the frequency of each element\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Sum up the elements that appear more than once\n    sum_repeated = 0\n    for num, count in freq.items():\n        if count > 1:\n            sum_repeated += num * count\n\n    return sum_repeated\n\n# Example usage:\nprint(find_sum([1, 2, 2, 3, 3, 3, -1, -1, 4, 4, 4, 4]))  # Output should be 12\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpghvjcqa3.py\", line 17, in <module>\n    assert find_sum([-1, -2, -3, -1, -1], 5) == -2\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Functionality Extension", "completion": "import re\n\ndef text_match(text):\n    # The pattern now looks for one or more underscores followed by a sequence of lowercase letters\n    pattern = '[_]+[a-z]+'\n    if re.search(pattern, text):\n        # If a match is found, return the matched sequence\n        return re.search(pattern, text).group()\n    else:\n        # If no match is found, return \"No match found\"\n        return \"No match found\"\n\n# Test the function\nprint(text_match(\"test_string\"))  # Output: _string\nprint(text_match(\"test__string\"))  # Output: __string\nprint(text_match(\"testString\"))   # Output: No match found\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkan42a99.py\", line 15, in <module>\n    assert text_match('abc_def_ghi') == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 45, "requirement": "Functionality Extension", "completion": "def get_gcd(arr):\n    def gcd(a, b):\n        while b != 0:\n            a, b = b, a % b\n        return a\n\n    # Filter out zero values from the array\n    non_zero_arr = [num for num in arr if num != 0]\n\n    # If all elements are zero, return 0\n    if not non_zero_arr:\n        return 0\n\n    # Calculate the GCD of the non-zero elements\n    result = non_zero_arr[0]\n    for num in non_zero_arr[1:]:\n        result = gcd(result, num)\n\n    return result\n\n# Example usage:\nprint(get_gcd([8, 12, 20, 0]))  # Output: 4\nprint(get_gcd([0, 0, 0]))       # Output: 0\nprint(get_gcd([3, 0, 9]))       # Output: 3\n", "result": "passed", "passed": true}
{"task_id": 46, "requirement": "Functionality Extension", "completion": "def test_distinct(lst, decimal_places=6):\n    # Round the numbers to the specified number of decimal places\n    rounded_lst = [round(num, decimal_places) for num in lst]\n    # Check if all numbers are distinct\n    return len(rounded_lst) == len(set(rounded_lst))\n\n# Example usage:\nprint(test_distinct([1.0, 2.0, 3.0, 4.0, 5.0]))  # True, all numbers are distinct\nprint(test_distinct([1.0, 2.0, 2.0, 4.0, 5.0]))  # False, 2.0 is repeated\nprint(test_distinct([1.123456789, 2.123456789, 3.123456789]))  # True, all numbers are distinct\nprint(test_distinct([1.123456789, 2.123456789, 2.123456789]))  # False, 2.123456789 is repeated\n", "result": "passed", "passed": true}
{"task_id": 47, "requirement": "Functionality Extension", "completion": "def compute_last_digit(a, b):\n    # If a or b is zero, the result is 1\n    if a == 0 or b == 0:\n        return 1\n\n    # Calculate the factorial of a and b\n    factorial_a = 1\n    for i in range(1, a + 1):\n        factorial_a *= i\n\n    factorial_b = 1\n    for i in range(1, b + 1):\n        factorial_b *= i\n\n    # Find the last digit of the division\n    last_digit = (factorial_a % 10) * pow(factorial_b, -1, 10)\n    return last_digit % 10\n\n# Test the function with zero and non-zero values\nprint(compute_last_digit(0, 7))  # Output: 1\nprint(compute_last_digit(5, 0))  # Output: 1\nprint(compute_last_digit(5, 7))  # Output: 5\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpleeooa8j.py\", line 18, in <module>\n    print(compute_last_digit(5, 7))  # Output: 5\n  File \"/tmp/tmpleeooa8j.py\", line 13, in compute_last_digit\n    last_digit = (factorial_a % 10) * pow(factorial_b, -1, 10)\nValueError: base is not invertible for the given modulus", "passed": false}
{"task_id": 48, "requirement": "Functionality Extension", "completion": "def odd_bit_set_number(n):\n    # Convert the absolute value of the number to binary and reverse it\n    binary = bin(abs(n))[2:][::-1]\n    # Iterate over the binary string\n    for i in range(len(binary)):\n        # If the bit is 0 and its position is odd, set it to 1\n        if i % 2 != 0 and binary[i] == '0':\n            binary = binary[:i] + '1' + binary[i+1:]\n    # Convert the binary string back to a number\n    result = int(binary[::-1], 2)\n    # If the original number was negative, negate the result\n    if n < 0:\n        result = -result\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5rbckk_j.py\", line 15, in <module>\n    assert odd_bit_set_number(-10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "requirement": "Functionality Extension", "completion": "def specified_element(two_dim_list, position=0):\n    return [row[position] if len(row) > abs(position) - 1 else None for row in two_dim_list]\n", "result": "passed", "passed": true}
{"task_id": 51, "requirement": "Functionality Extension", "completion": "def check_triangle_type(a, b, c):\n    # Check for equilateral triangle\n    if a == b == c:\n        return \"equilateral\"\n    # Check for isosceles triangle\n    elif a == b or a == c or b == c:\n        return \"isosceles\"\n    # If neither condition is met, it's a scalene triangle\n    else:\n        return \"scalene\"\n\n# Test the function\nprint(check_triangle_type(3, 3, 3))  # This should print \"equilateral\"\nprint(check_triangle_type(3, 4, 3))  # This should print \"isosceles\"\nprint(check_triangle_type(3, 4, 5))  # This should print \"scalene\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6znb3q5o.py\", line 15, in <module>\n    assert check_equilateral(5, 5, 3) == 'isosceles'\nNameError: name 'check_equilateral' is not defined", "passed": false}
{"task_id": 52, "requirement": "Functionality Extension", "completion": "def parallelogram_area(parallelograms):\n    areas = []\n    for base, height in parallelograms:\n        area = base * height\n        areas.append(area)\n    return areas\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5ddnd84d.py\", line 7, in <module>\n    assert parallelogram_area_list([(10, 20), (15, 20), (8, 9)]) == [200, 300, 72]\nNameError: name 'parallelogram_area_list' is not defined", "passed": false}
{"task_id": 53, "requirement": "Functionality Extension", "completion": "def check_equality(input_string):\n    # Convert the first and last characters to lowercase\n    first_char = input_string[0].lower()\n    last_char = input_string[-1].lower()\n    \n    # Check if the first and last characters are the same\n    return first_char == last_char\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpug2stk26.py\", line 7, in <module>\n    assert check_equality('Abca') == 'Equal'\nAssertionError", "passed": false}
{"task_id": 54, "requirement": "Functionality Extension", "completion": "def counting_sort(arr):\n    # Find the minimum and maximum element in the array\n    min_val = min(arr)\n    max_val = max(arr)\n    \n    # Initialize the count array with all zeros\n    count_size = max_val - min_val + 1\n    count = [0] * count_size\n    \n    # Store the count of each element in the count array\n    for num in arr:\n        count[num - min_val] += 1\n    \n    # Store the cumulative count\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    \n    # Build the output array\n    output = [0] * len(arr)\n    for num in reversed(arr):  # Reverse the order to maintain stability\n        output[count[num - min_val] - 1] = num\n        count[num - min_val] -= 1\n    \n    return output\n\n# Example usage:\narr = [4, -2, 2, 0, 3, -1, -2, 4, -3, 1]\nsorted_arr = counting_sort(arr)\nprint(sorted_arr)\n", "result": "passed", "passed": true}
{"task_id": 55, "requirement": "Functionality Extension", "completion": "def tn_gp(a, r, n):\n    \"\"\"\n    This function calculates the nth term of a geometric series.\n    a: first term of the series (float)\n    r: common ratio of the series (float)\n    n: term number to calculate (integer)\n    Returns: nth term of the series (float)\n    \"\"\"\n    return a * r ** (n - 1)\n\n# Example usage:\nprint(tn_gp(2.5, 1.5, 4))  # Output: 3.375\n", "result": "passed", "passed": true}
{"task_id": 56, "requirement": "Functionality Extension", "completion": "def check(n):\n    # Convert the number to a string, reverse it, and convert it back to an integer\n    # If the number is negative, the reversed string will also be negative\n    reverse = -int(str(abs(n))[::-1]) if n < 0 else int(str(n)[::-1])\n\n    # Check if the number is one less than twice its reverse\n    return n == 2 * reverse - 1\n\n# Test cases\nprint(check(123))  # True\nprint(check(-123)) # False\nprint(check(124))  # False\nprint(check(-124)) # True\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdyxku1kj.py\", line 13, in <module>\n    assert check(-37) == True\nAssertionError", "passed": false}
{"task_id": 57, "requirement": "Functionality Extension", "completion": "def find_max_num(digits):\n    # Convert the list of digits to strings, sort them in reverse order,\n    # and then join them into a single string.\n    # The key function in sorted() ensures that when digits are equal,\n    # the one with fewer occurrences is placed first.\n    sorted_digits = sorted(map(str, digits), key=lambda x: (x, digits.count(int(x))), reverse=True)\n    return int(''.join(sorted_digits))\n\n# Example usage:\nprint(find_max_num([1, 2, 3]))  # Output: 321\nprint(find_max_num([5, 5, 5]))  # Output: 555\nprint(find_max_num([9, 8, 7, 6]))  # Output: 9876\nprint(find_max_num([3, 30, 34, 5, 9]))  # Output: 9534330\nprint(find_max_num([1, 1, 1, 1, 3]))  # Output: 31111\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppoy_g2bf.py\", line 14, in <module>\n    assert find_max_num([1, 1, 2, 2], 4) == 2211\nTypeError: find_max_num() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 58, "requirement": "Functionality Extension", "completion": "def opposite_signs(num_pairs):\n    return [((num1 > 0) != (num2 > 0)) for num1, num2 in num_pairs]\n\n# Example usage:\npairs = [(1, -1), (-1, -1), (1, 1), (0, -1), (-1, 0), (0, 0)]\nprint(opposite_signs(pairs))  # Output: [True, False, False, True, True, False]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7ixl2evl.py\", line 6, in <module>\n    assert opposite_signs_list([(1, -2), (3, 2), (-10, -10)]) == [True, False, False]\nNameError: name 'opposite_signs_list' is not defined", "passed": false}
{"task_id": 59, "requirement": "Functionality Extension", "completion": "def is_octagonal(n):\n    if isinstance(n, list):\n        return [i * (4 * i - 3) // 2 for i in n]\n    else:\n        return n * (4 * n - 3) // 2\n\n# Example usage:\nprint(is_octagonal([1, 2, 3]))  # Output: [1, 14, 35]\nprint(is_octagonal(5))         # Output: 55\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmn9q9s_c.py\", line 9, in <module>\n    assert is_octagonal([1, 2, 3]) == [1, 8, 21]\nAssertionError", "passed": false}
{"task_id": 60, "requirement": "Functionality Extension", "completion": "def max_len_sub(arr):\n    n = len(arr)\n    # dp[i] will store the length of the longest subsequence ending at arr[i]\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            # Check if the difference is non-increasing\n            if arr[i] >= arr[j] and arr[i] - arr[i-1] >= arr[j] - arr[j-1]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\n# Example usage:\nprint(max_len_sub([1, 3, 2, 5, 4]))  # Output: 3\nprint(max_len_sub([5, 4, 3, 2, 1]))  # Output: 1\nprint(max_len_sub([1, 3, 5, 7, 9]))  # Output: 5\nprint(max_len_sub([9, 7, 5, 3, 1]))  # Output: 1\nprint(max_len_sub([1, 2, 3, 2, 1]))  # Output: 3\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6454kv9_.py\", line 17, in <module>\n    assert max_len_sub([10, 7, 4, 1, -2], -3) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}

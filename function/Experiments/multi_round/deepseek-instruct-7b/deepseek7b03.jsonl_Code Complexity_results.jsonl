{"task_id": 11, "requirement": "Code Complexity", "completion": "def remove_occ(s, char):\n    # Find the first and last occurrence of the character\n    first_index = s.find(char)\n    last_index = s.rfind(char)\n    \n    # Check if the character is found at least once\n    if first_index != -1 and last_index != -1:\n        # Remove the first occurrence\n        s = s[:first_index] + s[first_index+1:]\n        # Remove the last occurrence\n        s = s[:last_index] + s[last_index+1:]\n    \n    return s\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpsuzq0vm_.py\", line 12, in <module>\n    assert remove_occ(\"hello\",\"l\") == \"heo\"\nAssertionError", "passed": false}
{"task_id": 14, "requirement": "Code Complexity", "completion": "def find_volume(base_area, height_prism):\n    return (base_area * height_prism) / 2\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpyq7xo89q.py\", line 3, in <module>\n    assert find_volume(10,8,6) == 240\nTypeError: find_volume() takes 2 positional arguments but 3 were given", "passed": false}
{"task_id": 15, "requirement": "Code Complexity", "completion": "def split_lowerstring(s):\n    result = []\n    current_word = ''\n    for char in s:\n        if char.islower():\n            if current_word:\n                result.append(current_word)\n                current_word = ''\n            result.append(char)\n        else:\n            current_word += char\n    if current_word:\n        result.append(current_word)\n    return result\n\n# Example usage:\ns = \"Hello World thisISaTest\"\nprint(split_lowerstring(s))  # Output: ['Hello', 'World', 'this', 'a', 'Test']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpu3nbj8or.py\", line 18, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "requirement": "Code Complexity", "completion": "import re\n\ndef text_lowercase_underscore(text):\n    # The regular expression pattern r'[a-z]+_[a-z]+' matches sequences of \n    # one or more lowercase letters followed by an underscore, followed by \n    # one or more lowercase letters.\n    pattern = r'[a-z]+_[a-z]+'\n    matches = re.findall(pattern, text)\n    return matches\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpige2mk7i.py\", line 9, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "requirement": "Code Complexity", "completion": "def square_perimeter(side_length):\n    \"\"\"\n    This function calculates the perimeter of a square.\n\n    :param side_length: length of one side of the square\n    :return: perimeter of the square\n    \"\"\"\n    return 4 * side_length\n", "result": "passed", "passed": true}
{"task_id": 20, "requirement": "Code Complexity", "completion": "import math\n\ndef is_woodall(n):\n    if n < 0:\n        return False\n    # Check if n is a Woodall number\n    x = (math.sqrt(1 + 8*n) + 1) / 2\n    return x == int(x) and 2**int(x) - 1 == n\n\n# Example usage:\nprint(is_woodall(15))  # Should return True, because 15 is a Woodall number (3*2^3 - 1)\nprint(is_woodall(1023))  # Should return True, because 1023 is a Woodall number (11*2^11 - 1)\nprint(is_woodall(1024))  # Should return False, because 1024 is not a Woodall number\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdivkczv_.py\", line 12, in <module>\n    assert is_woodall(383) == True\nAssertionError", "passed": false}
{"task_id": 21, "requirement": "Code Complexity", "completion": "def multiples_of_num(n, m):\n    return [n * i for i in range(1, m+1)]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpv4lqjkas.py\", line 3, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 24, "requirement": "Code Complexity", "completion": "def binary_to_decimal(binary):\n    binary = str(binary)\n    decimal = 0\n    for digit in binary:\n        decimal = decimal * 2 + int(digit)\n    return decimal\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpuojh34i7.py\", line 12, in <module>\n    assert cc_visit(inspect.getsource(binary_to_decimal))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 32, "requirement": "Code Complexity", "completion": "def largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\ndef max_prime_factors(n):\n    if n < 2:\n        return None\n    return largest_prime_factor(n)\n\n# Example usage:\nprint(max_prime_factors(10))  # Output: 5\nprint(max_prime_factors(17))  # Output: 17\nprint(max_prime_factors(315))  # Output: 7\n", "result": "passed", "passed": true}
{"task_id": 33, "requirement": "Code Complexity", "completion": "def decimal_to_binary(n):\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n\n# Test the function\nprint(decimal_to_binary(10))  # Output: 1010\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpk78pgit_.py\", line 9, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 35, "requirement": "Code Complexity", "completion": "def is_triangular(n):\n    i = 1\n    while n > 0:\n        n -= i\n        i += 1\n    return n == 0\n\ndef find_rect_num(n):\n    i = 1\n    count = 0\n    while count < n:\n        if is_triangular(i * (i + 1) // 2 * (i * (i + 1) // 2 + 1) // 2):\n            count += 1\n        i += 1\n    return (i - 2) * (i - 1) // 2 * (i * (i - 1) // 2 + 1) // 2\n\nprint(find_rect_num(10))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpl566njm3.py\", line 16, in <module>\n    assert find_rect_num(4) == 20\nAssertionError", "passed": false}
{"task_id": 36, "requirement": "Code Complexity", "completion": "def find_nth_digit(num1, num2, n):\n    # Check if the inputs are valid numbers\n    if not (isinstance(num1, (int, float)) and isinstance(num2, (int, float))):\n        raise ValueError(\"Both num1 and num2 must be numbers\")\n\n    # Check if n is a non-negative integer\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n\n    # Convert the numbers to strings\n    num1_str = str(num1)\n    num2_str = str(num2)\n\n    # Concatenate the two numbers\n    fraction_str = num1_str + num2_str\n\n    # Check if n is within the length of the fraction string\n    if n < len(fraction_str):\n        # Return the nth digit\n        return fraction_str[n]\n    else:\n        # Return None if n is out of range\n        return None\n\n# Example usage:\ntry:\n    print(find_nth_digit(123, 456, 2))  # Output: '3'\n    print(find_nth_digit(123, 456, 10))  # Output: None\n    print(find_nth_digit(\"123\", \"456\", 2))  # Raises ValueError\n    print(find_nth_digit(123, \"456\", 2))  # Raises ValueError\n    print(find_nth_digit(123, 456, -2))  # Raises ValueError\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpm7i5j4t5.py\", line 29, in <module>\n    assert find_nth_digit(1,2,1) == 5\nAssertionError", "passed": false}
{"task_id": 38, "requirement": "Code Complexity", "completion": "def div_even_odd(lst):\n    even = None\n    odd = None\n    for num in lst:\n        if even is None and num % 2 == 0:\n            even = num\n        if odd is None and num % 2 != 0:\n            odd = num\n        if even is not None and odd is not None:\n            return odd / even  # Return the division result directly\n    return \"List does not contain both even and odd numbers\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpt7po4z_8.py\", line 12, in <module>\n    assert div_even_odd([1,3,5,7,4,1,6,8])==4\nAssertionError", "passed": false}
{"task_id": 40, "requirement": "Code Complexity", "completion": "from collections import Counter\n\ndef freq_element(lst):\n    return Counter([item for sublist in lst for item in sublist])\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplo9ty47f.py\", line 9, in <module>\n    assert cc_visit(inspect.getsource(freq_element))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 42, "requirement": "Code Complexity", "completion": "def find_sum(arr):\n    seen = set()\n    sum_repeated = 0\n\n    for num in arr:\n        if num in seen:\n            sum_repeated += num\n        else:\n            seen.add(num)\n\n    return sum_repeated\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkmtog0xi.py\", line 10, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Code Complexity", "completion": "import re\n\ndef text_match(text):\n    pattern = '[_][a-z]+'\n    return re.search(pattern, text).group(0) if re.search(pattern, text) else None\n\n# Test the function\nprint(text_match(\"test_string\"))  # Output: _string\nprint(text_match(\"testString\"))   # Output: None\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjvf6xbpf.py\", line 8, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 45, "requirement": "Code Complexity", "completion": "def get_gcd(arr):\n    if len(arr) == 0:\n        raise ValueError(\"Array must not be empty\")\n\n    gcd_value = arr[0]\n\n    for num in arr[1:]:\n        while gcd_value != num:\n            if gcd_value > num:\n                gcd_value -= num\n            else:\n                num -= gcd_value\n\n    return gcd_value\n\n# Example usage:\nprint(get_gcd([8, 12, 20]))  # Output: 4\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpaih3gkb7.py\", line 19, in <module>\n    assert cc_visit(inspect.getsource(get_gcd))[0].complexity <=1\nAssertionError", "passed": false}
{"task_id": 47, "requirement": "Code Complexity", "completion": "def compute_last_digit(a, b):\n    # The last digit of a factorial is determined by the last digits of the numbers\n    # that are multiplied together. We only need to consider the last digits of a\n    # and b when calculating the factorial.\n\n    # The last digit of a factorial of a number is the same as the number itself\n    # if the number is 0, 1, 5, or 6, otherwise it's 0.\n    last_digit_a = a % 10\n    last_digit_b = b % 10\n\n    # The last digit of a factorial divided by the factorial of another number\n    # is the same as the last digit of a divided by the last digit of b.\n    return (last_digit_a * pow(last_digit_b, -1, 10)) % 10\n\n# Test the function\nprint(compute_last_digit(5, 7))  # Output: 5\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpiq5hlo6m.py\", line 14, in <module>\n    assert compute_last_digit(2,4) == 2\n  File \"/tmp/tmpiq5hlo6m.py\", line 11, in compute_last_digit\n    return (last_digit_a * pow(last_digit_b, -1, 10)) % 10\nValueError: base is not invertible for the given modulus", "passed": false}
{"task_id": 51, "requirement": "Code Complexity", "completion": "def check_equilateral(a, b, c):\n    return a == b == c\n\n# Test the function\nresult = check_equilateral(3, 3, 3)\nprint(\"The triangle is equilateral.\" if result else \"The triangle is not equilateral.\")\n\nresult = check_equilateral(3, 4, 5)\nprint(\"The triangle is equilateral.\" if result else \"The triangle is not equilateral.\")\n", "result": "passed", "passed": true}
{"task_id": 52, "requirement": "Code Complexity", "completion": "def parallelogram_area(base, height):\n    return base * height\n", "result": "passed", "passed": true}
{"task_id": 53, "requirement": "Code Complexity", "completion": "def check_equality(input_string):\n    return input_string[0] == input_string[-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2l8hpz5e.py\", line 3, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 56, "requirement": "Code Complexity", "completion": "def check(n):\n    # Initialize the reverse number\n    reverse = 0\n    # Copy the original number to work with\n    num = n\n\n    # Build the reverse number\n    while num > 0:\n        digit = num % 10\n        reverse = reverse * 10 + digit\n        num //= 10\n\n    # Check if the number is one less than twice its reverse\n    return n == 2 * reverse - 1\n\n# Example usage:\nprint(check(123))  # Should return True\nprint(check(124))  # Should return False\n", "result": "passed", "passed": true}
{"task_id": 58, "requirement": "Code Complexity", "completion": "def opposite_signs(num1, num2):\n    return num1 * num2 < 0\n", "result": "passed", "passed": true}

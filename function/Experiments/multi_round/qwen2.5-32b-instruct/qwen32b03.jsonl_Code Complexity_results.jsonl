{"task_id": 11, "requirement": "Code Complexity", "completion": "def remove_occ(s: str, char: str) -> str:\n    \"\"\"\n    Remove the first and last occurrence of the specified character from the string.\n    \n    Parameters:\n    s (str): The input string.\n    char (str): The character to be removed from the string.\n    \n    Returns:\n    str: The modified string with the first and last occurrence of the specified character removed.\n    \"\"\"\n    if not s or len(char) != 1:\n        return s\n    \n    first_occurrence = s.find(char)\n    last_occurrence = s.rfind(char)\n    \n    if first_occurrence == -1 or last_occurrence == -1 or first_occurrence == last_occurrence:\n        return s\n    \n    # Remove first occurrence\n    s = s[:first_occurrence] + s[first_occurrence+1:]\n    \n    # Remove last occurrence, adjusting for the fact that the string has been shortened\n    last_occurrence_adjusted = s.rfind(char)\n    s = s[:last_occurrence_adjusted] + s[last_occurrence_adjusted+1:]\n    \n    return s\n\n# Example usage:\nprint(remove_occ(\"hello world\", \"l\"))  # Output: \"heo word\"\nprint(remove_occ(\"banana\", \"a\"))       # Output: \"bnn\"\nprint(remove_occ(\"apple\", \"p\"))        # Output: \"ale\"\nprint(remove_occ(\"test\", \"x\"))         # Output: \"test\" (no 'x' in the string)\n", "result": "passed", "passed": true}
{"task_id": 14, "requirement": "Code Complexity", "completion": "def find_volume(base, height_triangle, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    - base (float): The length of the base of the triangular face.\n    - height_triangle (float): The height of the triangular face (perpendicular distance from the base to the opposite vertex).\n    - length (float): The length of the prism (distance between the two triangular faces).\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    # Calculate the area of the triangular base\n    base_area = 0.5 * base * height_triangle\n    \n    # Calculate the volume of the prism\n    volume = base_area * length\n    \n    return volume\n\n# Example usage:\n# This will calculate the volume of a triangular prism with a base of 5 units,\n# a height of the triangular face of 4 units, and a length of the prism of 10 units.\nvolume = find_volume(5, 4, 10)\nprint(f\"The volume of the triangular prism is {volume} cubic units.\")\n", "result": "passed", "passed": true}
{"task_id": 15, "requirement": "Code Complexity", "completion": "import re\n\ndef split_lowerstring(input_string):\n    # Split the string at lowercase letters using regex\n    # The pattern r'(?=[a-z])' matches the position before each lowercase letter\n    return re.split(r'(?=[a-z])', input_string)\n\n# Example usage:\nexample_string = \"HelloWorldPython\"\nresult = split_lowerstring(example_string)\nprint(result)  # Output will be ['H', 'e', 'l', 'l', 'o', 'W', 'o', 'r', 'l', 'd', 'P', 'y', 't', 'h', 'o', 'n']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpks_2xwxc.py\", line 10, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "requirement": "Code Complexity", "completion": "import re\n\ndef text_lowercase_underscore(text):\n    # Define the pattern to match sequences of lowercase letters joined with underscores\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    \n    # Use re.findall to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    return matches\n\n# Example usage:\nexample_text = \"This is a_test_string with some_lowercase_sequences and_more_examples.\"\nresult = text_lowercase_underscore(example_text)\nprint(result)  # Output should be ['a_test_string', 'some_lowercase_sequences', 'and_more_examples']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2ham4vwm.py\", line 12, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "requirement": "Code Complexity", "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n    \n    Parameters:\n    side_length (float): The length of one side of the square.\n    \n    Returns:\n    float: The perimeter of the square.\n    \"\"\"\n    return 4 * side_length\n\n# Example usage:\nside = 5\nprint(f\"The perimeter of a square with side length {side} is {square_perimeter(side)}\")\n", "result": "passed", "passed": true}
{"task_id": 20, "requirement": "Code Complexity", "completion": "import math\n\ndef is_woodall(num):\n    \"\"\"\n    Check if the given number is a Woodall number.\n    \n    A Woodall number is defined as n * 2^n - 1 for some integer n.\n    \n    Parameters:\n    num (int): The number to check.\n    \n    Returns:\n    bool: True if the number is a Woodall number, False otherwise.\n    \"\"\"\n    # Calculate x + 1\n    x_plus_1 = num + 1\n    \n    # Calculate the potential value of n\n    n = math.log2(x_plus_1)\n    \n    # Check if n is an integer and satisfies the Woodall number condition\n    if n.is_integer():\n        n = int(n)\n        return num == n * 2**n - 1\n    else:\n        return False\n\n# Example usage:\nprint(is_woodall(7))   # False, because 7 is not a Woodall number\nprint(is_woodall(23))  # True, because 3*2^3 - 1 = 23\nprint(is_woodall(24))  # False, because 24 is not a Woodall number\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpsq4v0_5j.py\", line 17, in <module>\n    assert is_woodall(383) == True\nAssertionError", "passed": false}
{"task_id": 21, "requirement": "Code Complexity", "completion": "def multiples_of_num(n, m):\n    \"\"\"\n    Generates a list of m multiples of n.\n    \n    Parameters:\n    n (int): The base number to find multiples of.\n    m (int): The number of multiples to generate.\n    \n    Returns:\n    list: A list of m multiples of n.\n    \"\"\"\n    return [i * n for i in range(1, m + 1)]\n\n# Example usage:\nprint(multiples_of_num(5, 4))  # Output: [5, 10, 15, 20]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpzev1lz7r.py\", line 5, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 24, "requirement": "Code Complexity", "completion": "def binary_to_decimal(binary_str):\n    \"\"\"\n    Convert a binary number (given as a string) to its decimal equivalent.\n    \n    Parameters:\n    - binary_str (str): A string representing a binary number.\n    \n    Returns:\n    - int: The decimal equivalent of the binary number.\n    \n    Example:\n    >>> binary_to_decimal('1011')\n    11\n    \"\"\"\n    return int(binary_str, 2)\n\n# Example usage:\nif __name__ == \"__main__\":\n    binary_number = \"1011\"\n    decimal_number = binary_to_decimal(binary_number)\n    print(f\"The decimal equivalent of binary {binary_number} is {decimal_number}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7p2e1gcu.py\", line 8, in <module>\n    assert binary_to_decimal(100) == 4\n  File \"/tmp/tmp7p2e1gcu.py\", line 2, in binary_to_decimal\n    return int(binary_str, 2)\nTypeError: int() can't convert non-string with explicit base", "passed": false}
{"task_id": 32, "requirement": "Code Complexity", "completion": "def max_prime_factors(n):\n    if n < 2:\n        return None\n\n    largest_prime = -1\n\n    # Remove all factors of 2\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n\n    # Check for odd factors starting from 3\n    factor = 3\n    while factor * factor <= n:\n        if n % factor == 0:\n            largest_prime = factor\n            n //= factor\n        else:\n            factor += 2\n\n    # If n is a prime number greater than 2\n    if n > 2:\n        largest_prime = n\n\n    return largest_prime\n\n# Example usage:\nprint(max_prime_factors(13195))  # Output should be 29\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmu71bqpw.py\", line 28, in <module>\n    assert cc_visit(inspect.getsource(max_prime_factors))[0].complexity <= 5\nAssertionError", "passed": false}
{"task_id": 33, "requirement": "Code Complexity", "completion": "def decimal_to_binary(decimal_number):\n    return bin(decimal_number)[2:]\n\n# Example usage:\nprint(decimal_to_binary(10))  # Output: \"1010\"\nprint(decimal_to_binary(255)) # Output: \"11111111\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2ezohmfy.py\", line 6, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 35, "requirement": "Code Complexity", "completion": "def find_rect_num(n):\n    \"\"\"\n    Finds the n-th rectangular number.\n\n    Parameters:\n    n (int): The position of the rectangular number in the sequence.\n\n    Returns:\n    int: The n-th rectangular number.\n    \"\"\"\n    return n * (n + 1)\n\n# Example usage:\nprint(find_rect_num(5))  # Output will be 30 because 5 * 6 = 30\n", "result": "passed", "passed": true}
{"task_id": 36, "requirement": "Code Complexity", "completion": "def find_nth_digit(numerator, denominator, n):\n    \"\"\"\n    Finds the nth digit after the decimal point in the result of numerator / denominator.\n    \n    :param numerator: The numerator of the fraction.\n    :param denominator: The denominator of the fraction.\n    :param n: The position of the digit after the decimal point to retrieve.\n    :return: The nth digit after the decimal point as an integer, or None if the position exceeds the precision.\n    \"\"\"\n    # Perform the division\n    quotient = numerator / denominator\n    \n    # Convert the quotient to a string and split at the decimal point\n    decimal_part = str(quotient).split('.')[1]\n    \n    # If the decimal part has fewer than n digits, return None\n    if n >= len(decimal_part):\n        return None\n    \n    # Return the nth digit\n    return int(decimal_part[n])\n\n# Example usage:\nprint(find_nth_digit(1, 3, 2))  # Should print 3 (for 0.333...)\nprint(find_nth_digit(1, 7, 5))  # Should print 7 (for 0.142857142857...)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpc2en4sct.py\", line 14, in <module>\n    assert find_nth_digit(1,2,1) == 5\nAssertionError", "passed": false}
{"task_id": 38, "requirement": "Code Complexity", "completion": "def div_even_odd(numbers):\n    first_even = next((num for num in numbers if num % 2 == 0), None)\n    first_odd = next((num for num in numbers if num % 2 != 0), None)\n    \n    if first_even is None:\n        return \"No even number found in the list.\"\n    if first_odd is None:\n        return \"No odd number found in the list.\"\n    \n    return first_even / first_odd\n\n# Example usage:\nnumbers_list = [7, 3, 4, 8, 9]\nprint(div_even_odd(numbers_list))  # Output: 1.3333333333333333\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpfliqfd2q.py\", line 17, in <module>\n    assert cc_visit(inspect.getsource(div_even_odd))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 40, "requirement": "Code Complexity", "completion": "from collections import Counter\n\ndef freq_element(list_of_lists):\n    # Flatten the list of lists and count the frequency of each element\n    return Counter(item for sublist in list_of_lists for item in sublist)\n\n# Example usage:\nlist_of_lists = [['apple', 'banana'], ['banana', 'cherry', 'apple'], ['apple']]\nresult = freq_element(list_of_lists)\nprint(result)  # Output will be a Counter object with frequencies of each element\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwi5i5_bt.py\", line 14, in <module>\n    assert cc_visit(inspect.getsource(freq_element))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 42, "requirement": "Code Complexity", "completion": "def find_sum(arr):\n    from collections import defaultdict\n    \n    # Dictionary to store the count of each element\n    counts = defaultdict(int)\n    \n    # First pass: count occurrences of each element\n    for element in arr:\n        counts[element] += 1\n    \n    # Second pass: sum elements that appear more than once\n    total_sum = sum(element for element in arr if counts[element] > 1)\n    \n    return total_sum\n\n# Example usage:\narr = [1, 2, 3, 2, 4, 5, 5]\nprint(find_sum(arr))  # Output should be 7 because 2 + 5 = 7\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpyzsphp5f.py\", line 14, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Code Complexity", "completion": "import re\n\ndef text_match(text):\n    # Regular expression pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'^[a-z]+_[a-z]+$'\n    \n    # Directly return the boolean result of the match\n    return bool(re.match(pattern, text))\n\n# Example usage:\nprint(text_match(\"abc_def\"))  # Should return True\nprint(text_match(\"Abc_def\"))  # Should return False because it starts with an uppercase letter\nprint(text_match(\"abc_def_ghi\"))  # Should return False because there are more than one underscore\nprint(text_match(\"abc\"))       # Should return False because there is no underscore\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5m5gzlvi.py\", line 12, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 45, "requirement": "Code Complexity", "completion": "from functools import reduce\nimport math\n\ndef get_gcd(arr):\n    if not arr:\n        return 0  # Return 0 or any other value that indicates an error for an empty array\n    \n    return reduce(lambda x, y: math.gcd(x, y), arr)\n\n# Example usage:\nnumbers = [24, 108, 90]\nprint(get_gcd(numbers))  # Output will be 6\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpm18fpfxx.py\", line 15, in <module>\n    assert cc_visit(inspect.getsource(get_gcd))[0].complexity <=1\nAssertionError", "passed": false}
{"task_id": 47, "requirement": "Code Complexity", "completion": "def compute_last_digit(a, b):\n    \"\"\"\n    Compute the last digit of b! / a!.\n    \n    :param a: The lower integer for the factorial division.\n    :param b: The higher integer for the factorial division.\n    :return: The last digit of the result of b! / a!.\n    \"\"\"\n    last_digit = 1\n    for i in range(a + 1, b + 1):\n        last_digit = (last_digit * (i % 10)) % 10\n        if last_digit == 0:\n            return 0\n    return last_digit\n\n# Example usage:\nprint(compute_last_digit(3, 5))  # Output should be 0, because 5! / 3! = 20, and the last digit is 0\nprint(compute_last_digit(4, 7))  # Output should be 0, because 7! / 4! = 5*6*7 = 210, and the last digit is 0\n", "result": "passed", "passed": true}
{"task_id": 51, "requirement": "Code Complexity", "completion": "def check_equilateral(side1, side2, side3):\n    # Using a single expression to determine if the triangle is equilateral\n    is_equilateral = side1 == side2 == side3\n    print(\"The triangle is equilateral.\" if is_equilateral else \"The triangle is not equilateral.\")\n\n# Example usage:\n# check_equilateral(5, 5, 5)  # This will print \"The triangle is equilateral.\"\n# check_equilateral(5, 6, 5)  # This will print \"The triangle is not equilateral.\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7x__p681.py\", line 8, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "requirement": "Code Complexity", "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram, which is the perpendicular distance from the base to the opposite side.\n\n    Returns:\n    float: The area of the parallelogram.\n    \"\"\"\n    return base * height\n\n# Example usage:\n# area = parallelogram_area(5.0, 3.0)\n# print(f\"The area of the parallelogram is {area}\")\n", "result": "passed", "passed": true}
{"task_id": 53, "requirement": "Code Complexity", "completion": "def check_equality(s):\n    return len(s) <= 1 or s[0] == s[-1]\n\n# Example usage:\nprint(check_equality(\"radar\"))  # Output: True\nprint(check_equality(\"python\")) # Output: False\nprint(check_equality(\"\"))       # Output: True\nprint(check_equality(\"a\"))      # Output: True\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpbmgwhkc_.py\", line 8, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 56, "requirement": "Code Complexity", "completion": "def check(num):\n    # Convert the number to a string to reverse it\n    num_str = str(num)\n    # Reverse the string representation of the number\n    reversed_num_str = num_str[::-1]\n    # Convert the reversed string back to an integer\n    reversed_num = int(reversed_num_str)\n    # Calculate twice the reversed number\n    twice_reversed = 2 * reversed_num\n    # Return the result of the comparison\n    return num == twice_reversed - 1\n\n# Example usage:\nprint(check(7))   # Output: False\nprint(check(35))  # Output: False\nprint(check(47))  # Output: True (since 74*2-1=147, and 47 is indeed 1 less than 48)\n", "result": "passed", "passed": true}
{"task_id": 58, "requirement": "Code Complexity", "completion": "def opposite_signs(a, b):\n    \"\"\"\n    Check if the two integers a and b have opposite signs.\n\n    Parameters:\n    a (int): First integer.\n    b (int): Second integer.\n\n    Returns:\n    bool: True if a and b have opposite signs, False otherwise.\n    \"\"\"\n    return (a ^ b) < 0\n\n# Example usage:\nprint(opposite_signs(10, -20))  # Output: True\nprint(opposite_signs(-5, -10))  # Output: False\nprint(opposite_signs(0, 10))    # Output: False\n", "result": "passed", "passed": true}

{"task_id": 14, "requirement": "Input-Output Conditions", "completion": "def find_volume(base_area, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism given the base area, height, and length.\n\n    Parameters:\n    - base_area (float): The area of the triangular base.\n    - height (float): The height of the triangular base (perpendicular distance from the base to the opposite vertex).\n    - length (float): The length of the prism (distance between the two triangular faces).\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    if base_area <= 0 or height <= 0 or length <= 0:\n        raise ValueError(\"All input values must be positive numbers.\")\n\n    # Calculate the volume of the prism\n    volume = base_area * length\n    \n    return volume\n\n# Example usage:\n# This will calculate the volume of a triangular prism with a base area of 10 square units,\n# a height of the triangular face of 4 units, and a length of the prism of 10 units.\ntry:\n    volume = find_volume(10, 4, 10)\n    print(f\"The volume of the triangular prism is {volume} cubic units.\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjt2z8aya.py\", line 15, in <module>\n    assert find_volume(10,8,6) == 240\nAssertionError", "passed": false}
{"task_id": 15, "requirement": "Input-Output Conditions", "completion": "import re\n\ndef split_lowerstring(input_string):\n    # Use regex to split the string at each lowercase letter\n    # The pattern '[a-z]' matches any lowercase letter\n    # We use re.findall to get all non-empty segments including those at the start or end\n    segments = re.findall(r'[A-Z]*[a-z]+|[A-Z]+|.', input_string)\n    # Filter out any empty strings that might result from the split\n    return [segment for segment in segments if segment]\n\n# Example usage:\nexample_string = \"HelloWorldPython\"\nresult = split_lowerstring(example_string)\nprint(result)  # Output: ['H', 'ello', 'W', 'orld', 'P', 'ython']\n\nexample_string2 = \"DataScienceIsFun\"\nresult2 = split_lowerstring(example_string2)\nprint(result2)  # Output: ['D', 'ata', 'S', 'cience', 'I', 's', 'F', 'un']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp10g0gw_j.py\", line 16, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "requirement": "Input-Output Conditions", "completion": "import re\n\ndef text_lowercase_underscore(text):\n    # Define the pattern to match sequences of lowercase letters joined with underscores\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    \n    # Use re.search to check if there is at least one match in the text\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\nexample_text = \"This is a_test_string with some_lowercase_sequences and_more_examples.\"\nresult = text_lowercase_underscore(example_text)\nprint(result)  # Output should be 'Found a match!'\n\nexample_text2 = \"This is TEST_STRING without lowercase_with_underscores.\"\nresult2 = text_lowercase_underscore(example_text2)\nprint(result2)  # Output should be 'Not matched!'\n", "result": "passed", "passed": true}
{"task_id": 17, "requirement": "Input-Output Conditions", "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n    \n    Parameters:\n    side_length (int): The length of one side of the square. Must be a non-negative integer.\n    \n    Returns:\n    int: The perimeter of the square.\n    \n    Raises:\n    TypeError: If the input is not an integer.\n    ValueError: If the input is a negative integer.\n    \"\"\"\n    if not isinstance(side_length, int):\n        raise TypeError(\"Side length must be an integer.\")\n    if side_length < 0:\n        raise ValueError(\"Side length must be a non-negative integer.\")\n    \n    return 4 * side_length\n\n# Example usage:\nside = 5\nprint(f\"The perimeter of a square with side length {side} is {square_perimeter(side)}\")\n", "result": "passed", "passed": true}
{"task_id": 18, "requirement": "Input-Output Conditions", "completion": "import re\n\ndef remove_dirty_chars(source_str, dirty_chars):\n    \"\"\"\n    Removes characters from source_str that are present in dirty_chars.\n    \n    :param source_str: The original string from which characters will be removed.\n    :param dirty_chars: A string containing characters to be removed from source_str.\n    :return: A new string with the specified characters removed.\n    :raises ValueError: If either source_str or dirty_chars contains non-alphabetic characters.\n    \"\"\"\n    # Check if both strings contain only alphabetic characters\n    if not (source_str.isalpha() and dirty_chars.isalpha()):\n        raise ValueError('Input strings must only contain alphabetic characters.')\n    \n    # Create a set of characters to remove for faster lookup\n    dirty_set = set(dirty_chars)\n    \n    # Use list comprehension to filter out unwanted characters\n    cleaned_str = ''.join([char for char in source_str if char not in dirty_set])\n    \n    return cleaned_str\n\n# Example usage:\ntry:\n    source_string = \"helloworld\"\n    dirty_characters = \"ld\"\n    cleaned_string = remove_dirty_chars(source_string, dirty_characters)\n    print(cleaned_string)  # Output: \"heoorw\"\n    \n    # This will raise an error\n    invalid_source_string = \"hello123\"\n    invalid_dirty_characters = \"ld\"\n    remove_dirty_chars(invalid_source_string, invalid_dirty_characters)\nexcept ValueError as e:\n    print(e)  # Output: Input strings must only contain alphabetic characters.\n", "result": "passed", "passed": true}
{"task_id": 19, "requirement": "Input-Output Conditions", "completion": "def test_duplicate(nums):\n    if not isinstance(nums, list):\n        raise TypeError(\"Input must be a list of integers\")\n    \n    seen = set()\n    for num in nums:\n        if not isinstance(num, int):\n            raise TypeError(\"All elements in the list must be integers\")\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\n# Example usage:\ntry:\n    nums = [1, 2, 3, 4, 5, 1]\n    print(test_duplicate(nums))  # Output: True\n\n    nums = [1, 2, 3, 4, 5]\n    print(test_duplicate(nums))  # Output: False\n\n    nums = [1, 2, \"3\", 4, 5]\n    print(test_duplicate(nums))  # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 20, "requirement": "Input-Output Conditions", "completion": "def is_woodall(num):\n    \"\"\"\n    Check if the given number is a Woodall number.\n    \n    A Woodall number is defined as n * 2^n - 1 for some integer n.\n    \n    Parameters:\n    num (int): The number to check.\n    \n    Returns:\n    bool: True if the number is a Woodall number, False otherwise.\n    \"\"\"\n    # Iterate over possible values of n starting from 1\n    n = 1\n    while True:\n        woodall_number = n * 2**n - 1\n        if woodall_number == num:\n            return True\n        elif woodall_number > num:\n            return False\n        n += 1\n\n# Example usage:\nprint(is_woodall(7))   # False, because 7 is not a Woodall number\nprint(is_woodall(23))  # True, because 3 * 2^3 - 1 = 23\nprint(is_woodall(24))  # False, because 24 is not a Woodall number\n", "result": "passed", "passed": true}
{"task_id": 23, "requirement": "Input-Output Conditions", "completion": "def maximum_sum(list_of_lists):\n    \"\"\"\n    This function takes a list of lists containing integers and returns the maximum sum of elements\n    from any sublist.\n\n    :param list_of_lists: List of lists containing integers\n    :return: Integer representing the maximum sum of elements from any sublist\n    \"\"\"\n    if not list_of_lists:\n        return 0  # Return 0 if the input list is empty\n\n    max_sum = float('-inf')  # Initialize max_sum to negative infinity\n\n    for sublist in list_of_lists:\n        sublist_sum = sum(sublist)  # Calculate the sum of the current sublist\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum  # Update max_sum if the current sublist sum is greater\n\n    return max_sum\n\n# Example usage:\nexample_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(maximum_sum(example_list))  # Output will be 24\n", "result": "passed", "passed": true}
{"task_id": 25, "requirement": "Input-Output Conditions", "completion": "from functools import reduce\nfrom operator import mul\n\ndef find_product(arr):\n    # Identify unique elements in the array using a set\n    element_count = {}\n    for element in arr:\n        if element in element_count:\n            element_count[element] += 1\n        else:\n            element_count[element] = 1\n    \n    # Filter out elements that appear more than once\n    unique_elements = [element for element, count in element_count.items() if count == 1]\n    \n    # Calculate the product of unique elements\n    if not unique_elements:\n        return 0  # If there are no unique elements, return 0\n    \n    # Use reduce to multiply all elements together\n    product = reduce(mul, unique_elements, 1)\n    \n    return product\n\n# Example usage:\narr = [1, 2, 3, 2, 4]\nprint(find_product(arr))  # Output should be 12 because 1 * 3 * 4 = 12\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmptsh3q4gn.py\", line 22, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "requirement": "Input-Output Conditions", "completion": "def check_k_elements(tuples_list, k):\n    \"\"\"\n    Check if every tuple in the provided list of tuples has exactly k elements.\n\n    :param tuples_list: List of tuples to be checked.\n    :param k: The number of elements each tuple should have.\n    :return: True if every tuple has exactly k elements, False otherwise.\n    \"\"\"\n    # Use a generator expression to check each tuple's length\n    return all(len(tup) == k for tup in tuples_list)\n\n# Example usage:\nexample_tuples = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nk = 3\nprint(check_k_elements(example_tuples, k))  # Output: True\n\nexample_tuples_with_mismatch = [(1, 2, 3), (4, 5), (7, 8, 9)]\nk = 3\nprint(check_k_elements(example_tuples_with_mismatch, k))  # Output: False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpu5gw3o94.py\", line 11, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 28, "requirement": "Input-Output Conditions", "completion": "def binomial_coeff(n, k):\n    \"\"\"\n    Calculate the binomial coefficient, also known as \"n choose k\".\n    \n    Parameters:\n    n (int): The total number of items.\n    k (int): The number of items to choose.\n    \n    Returns:\n    int: The binomial coefficient.\n    \n    Raises:\n    ValueError: If n or k are not non-negative integers.\n    \"\"\"\n    if not isinstance(n, int) or not isinstance(k, int) or n < 0 or k < 0:\n        raise ValueError(\"Both n and k must be non-negative integers\")\n\n    if k < 0 or k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n\n    # Optimization: Take advantage of symmetry, C(n, k) == C(n, n-k)\n    k = min(k, n - k)\n\n    # Compute binomial coefficient iteratively to avoid large intermediate factorials\n    coeff = 1\n    for i in range(1, k + 1):\n        coeff *= n - (k - i)\n        coeff //= i\n\n    return coeff\n\n# Example usage:\nprint(binomial_coeff(5, 2))  # Output: 10\nprint(binomial_coeff(6, 3))  # Output: 20\nprint(binomial_coeff(10, 5)) # Output: 252\n", "result": "passed", "passed": true}
{"task_id": 30, "requirement": "Input-Output Conditions", "completion": "def count_substring_with_equal_ends(s):\n    \"\"\"\n    Counts all substrings of the given string s that start and end with the same character.\n\n    :param s: Input string\n    :return: The number of substrings that start and end with the same character.\n    \"\"\"\n    n = len(s)\n    count = 0\n    \n    # Iterate over all possible substrings\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n    \n    return count\n\n# Example usage\ns = \"abcab\"\nprint(count_substring_with_equal_ends(s))  # Output should be 7\n", "result": "passed", "passed": true}
{"task_id": 32, "requirement": "Input-Output Conditions", "completion": "def max_prime_factors(n):\n    # Edge case: if n is less than 2, return None or raise an error\n    if n < 2:\n        raise ValueError(\"Input must be a positive integer greater than 1.\")\n    \n    # Initialize the largest prime factor\n    largest_prime = -1\n    \n    # Remove all factors of 2\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n\n    # Check for odd factors starting from 3\n    factor = 3\n    while factor * factor <= n:\n        while n % factor == 0:\n            largest_prime = factor\n            n //= factor\n        factor += 2\n\n    # If n is a prime number greater than 2\n    if n > 2:\n        largest_prime = n\n\n    return largest_prime\n\n# Example usage:\nprint(max_prime_factors(13195))  # Output should be 29\nprint(max_prime_factors(600851475143))  # Output should be 6857\n", "result": "passed", "passed": true}
{"task_id": 35, "requirement": "Input-Output Conditions", "completion": "def find_rect_num(n):\n    \"\"\"\n    Finds the n-th rectangular number.\n\n    Parameters:\n    n (int): The position of the rectangular number in the sequence.\n\n    Returns:\n    int: The n-th rectangular number.\n    \"\"\"\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return n * (n + 1)\n\n# Example usage:\nprint(find_rect_num(5))  # Output will be 30 because 5 * 6 = 30\n", "result": "passed", "passed": true}
{"task_id": 36, "requirement": "Input-Output Conditions", "completion": "def find_nth_digit(numerator, denominator, n):\n    \"\"\"\n    Finds the nth digit after the decimal point in the result of numerator / denominator.\n    \n    :param numerator: The numerator of the fraction.\n    :param denominator: The denominator of the fraction.\n    :param n: The position of the digit after the decimal point to retrieve.\n    :return: The nth digit after the decimal point as an integer.\n    \"\"\"\n    if denominator == 0:\n        raise ValueError(\"Denominator cannot be zero.\")\n    \n    # Integer division to get the whole number part and the remainder\n    whole_part, remainder = divmod(numerator, denominator)\n    \n    # Initialize variables\n    digits = []\n    seen_remainders = {}\n    \n    # Process the decimal part\n    for i in range(n + 1):  # We go one extra to check for repeats\n        if remainder == 0:\n            break  # Finite decimal, no more digits\n        \n        if remainder in seen_remainders:\n            start_repeat = seen_remainders[remainder]\n            repeat_len = len(digits) - start_repeat\n            # If n is within the repeating part\n            if n > start_repeat:\n                return int(digits[start_repeat + (n - start_repeat - 1) % repeat_len])\n            else:\n                break  # n is before the repeating part\n        \n        seen_remainders[remainder] = i\n        remainder *= 10\n        quotient, remainder = divmod(remainder, denominator)\n        digits.append(str(quotient))\n    \n    # Check if we have enough digits\n    if n < len(digits):\n        return int(digits[n])\n    else:\n        return None  # Not enough digits or beyond the repeating sequence\n\n# Example usage:\nprint(find_nth_digit(1, 3, 2))  # Should print 3 (for 0.333...)\nprint(find_nth_digit(1, 7, 5))  # Should print 8 (for 0.142857142857...)\nprint(find_nth_digit(1, 2, 2))  # Should print None since there is no second decimal place\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjufk7d5s.py\", line 34, in <module>\n    assert find_nth_digit(1,2,1) == 5\nAssertionError", "passed": false}
{"task_id": 38, "requirement": "Input-Output Conditions", "completion": "def div_even_odd(numbers):\n    # Initialize variables to store the first even and odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Iterate through the list to find the first even and odd numbers\n    for num in numbers:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        \n        # Break the loop if both even and odd numbers are found\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Check if both even and odd numbers were found\n    if first_even is None:\n        raise ValueError(\"No even number found in the list.\")\n    if first_odd is None:\n        raise ValueError(\"No odd number found in the list.\")\n    \n    # Perform the division and return the result\n    try:\n        result = first_even / first_odd\n        return result\n    except ZeroDivisionError:\n        raise ValueError(\"Cannot divide by zero.\")\n\n# Example usage:\nnumbers_list = [7, 3, 4, 8, 9]\nprint(div_even_odd(numbers_list))  # Output: 1.3333333333333333\n\n# Test with a list without an even number\ntry:\n    print(div_even_odd([5, 7, 9]))\nexcept ValueError as e:\n    print(e)  # Output: No even number found in the list.\n\n# Test with a list without an odd number\ntry:\n    print(div_even_odd([2, 4, 6]))\nexcept ValueError as e:\n    print(e)  # Output: No odd number found in the list.\n", "result": "passed", "passed": true}
{"task_id": 39, "requirement": "Input-Output Conditions", "completion": "from collections import Counter\n\ndef rearrange_string(s):\n    # Ensure the input meets the requirements\n    if not s.islower() or not s.isalpha() or not s:\n        raise ValueError(\"Input must be a non-empty string consisting only of lowercase letters\")\n\n    # Count the frequency of each character in the string\n    char_count = Counter(s)\n    \n    # Find the most frequent character\n    max_count = max(char_count.values())\n    \n    # Check if the most frequent character appears more than (length of string + 1) / 2 times\n    if max_count > (len(s) + 1) // 2:\n        return \"\"\n    \n    # Create a list to store the result\n    result = [''] * len(s)\n    index = 0\n    \n    # Sort the characters by their frequency in descending order\n    for char, count in char_count.most_common():\n        for _ in range(count):\n            if index >= len(s):\n                index = 1  # Start filling from the second position if we've reached the end\n            result[index] = char\n            index += 2\n    \n    return ''.join(result)\n\n# Example usage:\ns = \"aab\"\nprint(rearrange_string(s))  # Possible output: \"aba\"\n\ns = \"aaab\"\nprint(rearrange_string(s))  # Output: \"\" since it's not possible to rearrange \"aaab\" without having two 'a's adjacent.\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqmq4dze0.py\", line 29, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 42, "requirement": "Input-Output Conditions", "completion": "from collections import Counter\n\ndef find_sum(arr):\n    # Count the occurrences of each element in the array\n    counts = Counter(arr)\n    \n    # Sum the elements that appear more than once\n    total_sum = sum(element * count for element, count in counts.items() if count > 1)\n    \n    return total_sum\n\n# Example usage:\narr1 = [1, 2, 3, 2, 4, 5, 5]\nprint(find_sum(arr1))  # Output should be 7 because 2 + 5 = 7\n\narr2 = [1, 2, 3, 4, 5]\nprint(find_sum(arr2))  # Output should be 0 because there are no repeated elements\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmprnhkbnnk.py\", line 13, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Input-Output Conditions", "completion": "import re\n\ndef text_match(text):\n    # Regular expression pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'^[a-z]+_[a-z]+$'\n    \n    # Using re.match to check if the pattern matches the entire string from start (^) to end ($)\n    if re.match(pattern, text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\nprint(text_match(\"abc_def\"))  # Should return 'Matched!'\nprint(text_match(\"Abc_def\"))  # Should return 'Not matched!'\nprint(text_match(\"abc_def_ghi\"))  # Should return 'Not matched!'\nprint(text_match(\"abc\"))       # Should return 'Not matched!'\nprint(text_match(\"abc_defGhi\"))  # Should return 'Not matched!'\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6oiz0p_7.py\", line 16, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 46, "requirement": "Input-Output Conditions", "completion": "def test_distinct(numbers):\n    \"\"\"\n    Check if all numbers in the list are distinct.\n    \n    :param numbers: List of integers\n    :return: True if all numbers are distinct, False otherwise\n    \"\"\"\n    # Convert the list into a set to remove duplicates\n    unique_numbers = set(numbers)\n    \n    # Compare the length of the original list with the set\n    return len(numbers) == len(unique_numbers)\n\n# Example usage:\nprint(test_distinct([1, 2, 3, 4]))  # Expected output: True\nprint(test_distinct([1, 2, 2, 4]))  # Expected output: False\nprint(test_distinct([5, 7, 8, 9, 10]))  # Expected output: True\nprint(test_distinct([5, 5, 6, 7, 8]))  # Expected output: False\n", "result": "passed", "passed": true}
{"task_id": 48, "requirement": "Input-Output Conditions", "completion": "def odd_bit_set_number(n):\n    # Initialize mask to 0\n    mask = 0\n    \n    # Set all odd bits in the mask\n    i = 0\n    while (1 << (2 * i)) <= n:\n        mask |= (1 << (2 * i))\n        i += 1\n    \n    # Apply the mask to the number using bitwise OR\n    return n | mask\n\n# Example usage:\nnumber = 10  # Binary: 1010\nresult = odd_bit_set_number(number)\nprint(f\"Given number: {number} (binary: {bin(number)[2:]})\")\nprint(f\"Result after setting odd bits: {result} (binary: {bin(result)[2:]})\")\n", "result": "passed", "passed": true}
{"task_id": 49, "requirement": "Input-Output Conditions", "completion": "def specified_element(two_d_list, index=0):\n    \"\"\"\n    Extracts elements at the specified index from each sublist within a two-dimensional list.\n\n    Parameters:\n    two_d_list (list of lists): The two-dimensional list to process.\n    index (int): The index of the element to extract from each sublist. Defaults to 0 (first element).\n\n    Returns:\n    list: A list containing the extracted elements.\n\n    Raises:\n    IndexError: If the provided index is out of range for any sublist.\n    TypeError: If two_d_list is not a list of lists.\n    \"\"\"\n\n    # Check if the input list is empty\n    if not two_d_list:\n        return []\n\n    # Check if all elements in two_d_list are lists themselves\n    if not all(isinstance(sublist, list) for sublist in two_d_list):\n        raise TypeError(\"two_d_list must be a list of lists\")\n\n    # Extract the specified index element from each sublist\n    try:\n        return [sublist[index] for sublist in two_d_list]\n    except IndexError as e:\n        raise IndexError(f\"Provided index {index} is out of range for some sublists.\") from e\n\n# Example usage:\nexample_2d_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nempty_list = []\n\nprint(specified_element(example_2d_list))  # Output: [1, 4, 7]\nprint(specified_element(example_2d_list, 1))  # Output: [2, 5, 8]\nprint(specified_element(empty_list))  # Output: []\n", "result": "passed", "passed": true}
{"task_id": 50, "requirement": "Input-Output Conditions", "completion": "def min_length_list(lists):\n    \"\"\"\n    Finds the list with the minimum length from a collection of lists and returns\n    a tuple containing the length of the shortest list and the list itself.\n    \n    :param lists: A collection of lists (e.g., a list of lists, tuple of lists)\n    :return: A tuple (length_of_shortest_list, shortest_list)\n    \"\"\"\n    if not lists:\n        raise ValueError(\"Input list must not be empty\")\n    \n    shortest_list = min(lists, key=lambda x: len(x))\n    return (len(shortest_list), shortest_list)\n\n# Example usage:\nlists = [[1, 2, 3], [4, 5], [], [6, 7, 8, 9]]\nresult = min_length_list(lists)\nprint(result)  # Output will be (0, []) since it has the minimum length\n", "result": "passed", "passed": true}
{"task_id": 52, "requirement": "Input-Output Conditions", "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram. Must be a positive number.\n    height (float): The height of the parallelogram, which is the perpendicular distance from the base to the opposite side. Must be a positive number.\n\n    Returns:\n    float: The area of the parallelogram.\n\n    Raises:\n    ValueError: If either base or height is not positive.\n    \"\"\"\n    if base <= 0 or height <= 0:\n        raise ValueError(\"Both base and height must be positive numbers.\")\n    \n    return base * height\n\n# Example usage:\ntry:\n    area = parallelogram_area(5.0, 3.0)\n    print(f\"The area of the parallelogram is {area}\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6z67fz1b.py\", line 15, in <module>\n    assert parallelogram_area(0, 10) == 0\n  File \"/tmp/tmp6z67fz1b.py\", line 3, in parallelogram_area\n    raise ValueError(\"Both base and height must be positive numbers.\")\nValueError: Both base and height must be positive numbers.", "passed": false}
{"task_id": 53, "requirement": "Input-Output Conditions", "completion": "def check_equality(s):\n    # Ensure the input is a string\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string\")\n    \n    # Handle strings with less than two characters\n    if len(s) < 2:\n        return 'Equal'\n    \n    # Compare the first and last character of the string\n    if s[0] == s[-1]:\n        return 'Equal'\n    else:\n        return 'Not Equal'\n\n# Example usage:\nprint(check_equality(\"radar\"))  # Output: Equal\nprint(check_equality(\"python\")) # Output: Not Equal\nprint(check_equality(\"a\"))      # Output: Equal\nprint(check_equality(\"\"))       # Output: Equal\n", "result": "passed", "passed": true}
{"task_id": 54, "requirement": "Input-Output Conditions", "completion": "def counting_sort(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n\n    # Check if the list is empty\n    if len(arr) == 0:\n        return []\n\n    # Check if all elements are non-negative integers\n    if not all(isinstance(x, int) and x >= 0 for x in arr):\n        raise ValueError(\"All elements in the list must be non-negative integers\")\n\n    # Find the maximum element in the array\n    max_element = max(arr)\n    \n    # Initialize count array with zeros\n    count = [0] * (max_element + 1)\n\n    # Count each element in the input array\n    for num in arr:\n        count[num] += 1\n\n    # Modify count array such that each element at each index\n    # stores the sum of previous counts\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n\n    # Output array to store the sorted elements\n    output = [0] * len(arr)\n\n    # Build the output array\n    for num in reversed(arr):\n        output[count[num] - 1] = num\n        count[num] -= 1\n\n    return output\n\n# Example usage:\narr = [4, 2, 2, 8, 3, 3, 1]\nsorted_arr = counting_sort(arr)\nprint(sorted_arr)  # Output: [1, 2, 2, 3, 3, 4, 8]\n\n# Test cases to check input validation\ntry:\n    invalid_input1 = [4, 2, -2, 8, 3, 3, 1]\n    counting_sort(invalid_input1)\nexcept ValueError as e:\n    print(e)  # Expected: All elements in the list must be non-negative integers\n\ntry:\n    invalid_input2 = \"not a list\"\n    counting_sort(invalid_input2)\nexcept TypeError as e:\n    print(e)  # Expected: Input must be a list\n", "result": "passed", "passed": true}
{"task_id": 57, "requirement": "Input-Output Conditions", "completion": "def find_max_num(digits, num_digits):\n    \"\"\"\n    Given a list of digits and an integer representing the number of digits,\n    returns the largest number that can be formed using exactly that many digits.\n\n    :param digits: List[int] - A list of integers (digits from 0 to 9)\n    :param num_digits: int - Number of digits to use to form the largest number\n    :return: int - The largest number that can be formed with the given digits\n    \"\"\"\n    # Ensure the number of digits requested does not exceed the available digits\n    if num_digits > len(digits):\n        raise ValueError(\"Number of digits requested exceeds the length of the digits list\")\n    \n    # Sort the digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n    \n    # Take the first `num_digits` digits from the sorted list\n    selected_digits = sorted_digits[:num_digits]\n    \n    # Join them together as a string and convert to integer\n    max_num_str = ''.join(map(str, selected_digits))\n    return int(max_num_str)\n\n# Example usage:\nprint(find_max_num([3, 30, 34, 5, 9], 3))  # Output: 953\nprint(find_max_num([1, 2, 3, 4, 5], 2))     # Output: 54\n", "result": "passed", "passed": true}
{"task_id": 58, "requirement": "Input-Output Conditions", "completion": "def opposite_signs(a, b):\n    \"\"\"\n    Check if the two integers a and b have opposite signs.\n\n    Parameters:\n    a (int): First integer.\n    b (int): Second integer.\n\n    Returns:\n    bool: True if a and b have opposite signs, False otherwise.\n    \n    Raises:\n    TypeError: If either a or b is not an integer.\n    \"\"\"\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise TypeError(\"Both inputs must be integers.\")\n    \n    return (a * b) < 0\n\n# Example usage:\ntry:\n    print(opposite_signs(10, -20))  # Output: True\n    print(opposite_signs(-5, -10))  # Output: False\n    print(opposite_signs(0, 10))    # Output: False\n    print(opposite_signs(10, \"20\")) # This will raise a TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 60, "requirement": "Input-Output Conditions", "completion": "def max_len_sub(arr, k):\n    \"\"\"\n    Finds the maximum length of a subsequence where the absolute difference \n    between adjacent elements does not exceed k.\n    \n    Parameters:\n    arr (List[int]): The input array.\n    k (int): The maximum allowed absolute difference between adjacent elements.\n    \n    Returns:\n    int: The length of the longest such subsequence.\n    \"\"\"\n    if not arr:\n        return 0\n    \n    # Dictionary to store the length of the longest subsequence ending with each element\n    dp = {}\n    max_length = 1\n    \n    for num in arr:\n        # Calculate the length of the longest subsequence ending with num\n        current_max = 1\n        for prev_num, length in dp.items():\n            if abs(num - prev_num) <= k:\n                current_max = max(current_max, length + 1)\n        \n        dp[num] = current_max\n        max_length = max(max_length, current_max)\n    \n    return max_length\n\n# Example usage:\narr = [4, 2, 3, 4, 5, 6]\nk = 1\nprint(max_len_sub(arr, k))  # Output should be 5 because the longest subsequence is [2, 3, 4, 5, 6]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmv2dxuh3.py\", line 20, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nAssertionError", "passed": false}

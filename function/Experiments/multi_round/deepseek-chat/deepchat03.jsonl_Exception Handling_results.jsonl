{"task_id": 11, "requirement": "Exception Handling", "completion": "def remove_occ(s, char):\n    # Check if the second parameter is a single character\n    if not isinstance(char, str) or len(char) != 1:\n        raise ValueError(\"Second parameter must be a single character.\")\n    \n    # Find the index of the first occurrence\n    first_index = s.find(char)\n    \n    # Find the index of the last occurrence\n    last_index = s.rfind(char)\n    \n    # If the character is not found, return the original string\n    if first_index == -1 or last_index == -1:\n        return s\n    \n    # Remove the first occurrence\n    s = s[:first_index] + s[first_index+1:]\n    \n    # Since we removed the first occurrence, the last occurrence index might have shifted\n    # So we need to find the last occurrence again\n    last_index = s.rfind(char)\n    \n    # Remove the last occurrence\n    s = s[:last_index] + s[last_index+1:]\n    \n    return s\n\n# Example usage:\ntry:\n    input_string = \"banana\"\n    character = \"a\"\n    result = remove_occ(input_string, character)\n    print(result)  # Output: \"bnna\"\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 12, "requirement": "Exception Handling", "completion": "def sort_matrix(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n    Raises a TypeError if the input is not a list of lists or if any element in the matrix is not an integer.\n\n    :param matrix: List of lists (the matrix to be sorted)\n    :return: List of lists (the sorted matrix)\n    :raises: TypeError if the input is invalid\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(matrix, list):\n        raise TypeError(\"Input must be a list of lists.\")\n\n    # Check if each element in the matrix is a list\n    for row in matrix:\n        if not isinstance(row, list):\n            raise TypeError(\"Input must be a list of lists.\")\n\n        # Check if all elements in the row are integers\n        for element in row:\n            if not isinstance(element, int):\n                raise TypeError(\"All elements in the matrix must be integers.\")\n\n    # Calculate the sum of each row and store it along with the row\n    rows_with_sum = [(sum(row), row) for row in matrix]\n\n    # Sort the rows based on the sum\n    rows_with_sum.sort(key=lambda x: x[0])\n\n    # Extract the sorted rows\n    sorted_matrix = [row for (_, row) in rows_with_sum]\n\n    return sorted_matrix\n\n\n# Example usage:\ntry:\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9],\n        [1, 1, 1]\n    ]\n\n    sorted_matrix = sort_matrix(matrix)\n    print(\"Sorted Matrix:\")\n    for row in sorted_matrix:\n        print(row)\n\nexcept TypeError as e:\n    print(f\"Error: {e}\")\n", "result": "passed", "passed": true}
{"task_id": 13, "requirement": "Exception Handling", "completion": "from collections import Counter\n\ndef count_common(words, top_n=10):\n    \"\"\"\n    Count the most common words in a list of strings.\n\n    Parameters:\n    words (list): A list of strings.\n    top_n (int): The number of most common words to return. Default is 10.\n\n    Returns:\n    list: A list of tuples containing the most common words and their counts.\n\n    Raises:\n    TypeError: If the input is not a list of strings.\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(words, list):\n        raise TypeError(\"Input must be a list of strings.\")\n    \n    # Check if all elements in the list are strings\n    if not all(isinstance(word, str) for word in words):\n        raise TypeError(\"All elements in the list must be strings.\")\n    \n    # Use Counter to count the occurrences of each word\n    counter = Counter(words)\n    \n    # Get the top_n most common words\n    most_common = counter.most_common(top_n)\n    \n    return most_common\n\n# Example usage:\nwords = [\n    'python', 'programming', 'code', 'data', 'science',\n    'machine', 'learning', 'algorithm', 'function', 'variable',\n    'loop', 'list', 'python', 'code', 'data', 'python'\n]\n\nmost_common_words = count_common(words, top_n=5)\nprint(most_common_words)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpm2536ymk.py\", line 31, in <module>\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nAssertionError", "passed": false}
{"task_id": 14, "requirement": "Exception Handling", "completion": "def find_volume(base_triangle, height_triangle, height_prism):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base_triangle (float): The base length of the triangular base.\n    height_triangle (float): The height of the triangular base.\n    height_prism (float): The height (or length) of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n\n    Raises:\n    ValueError: If any of the inputs are non-positive or non-numeric.\n    \"\"\"\n    # Check if all inputs are numeric and positive\n    if not (isinstance(base_triangle, (int, float)) and base_triangle > 0):\n        raise ValueError(\"All dimensions must be positive numbers.\")\n    if not (isinstance(height_triangle, (int, float)) and height_triangle > 0):\n        raise ValueError(\"All dimensions must be positive numbers.\")\n    if not (isinstance(height_prism, (int, float)) and height_prism > 0):\n        raise ValueError(\"All dimensions must be positive numbers.\")\n\n    # Calculate the area of the triangular base\n    base_area = 0.5 * base_triangle * height_triangle\n\n    # Calculate the volume of the prism\n    volume = base_area * height_prism\n\n    return volume\n\n# Example usage:\ntry:\n    base_triangle = 5.0  # base of the triangle\n    height_triangle = 4.0  # height of the triangle\n    height_prism = 10.0  # height of the prism\n\n    volume = find_volume(base_triangle, height_triangle, height_prism)\n    print(f\"The volume of the triangular prism is: {volume}\")\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 15, "requirement": "Exception Handling", "completion": "import re\n\ndef split_lowerstring(s):\n    # Check if the input is a string\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string.\")\n    \n    # Use regular expression to split the string at lowercase letters\n    return re.split('[a-z]', s)\n\n# Example usage:\ntry:\n    input_string = \"HelloWorldPython\"\n    result = split_lowerstring(input_string)\n    print(result)  # Output: ['H', 'W', 'P']\nexcept TypeError as e:\n    print(e)\n\ntry:\n    input_not_string = 12345\n    result = split_lowerstring(input_not_string)\n    print(result)\nexcept TypeError as e:\n    print(e)  # Output: Input must be a string.\n", "result": "failed: File \"/tmp/tmpim48d6u7.py\", line 29\n    try: split_lowerstring(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 16, "requirement": "Exception Handling", "completion": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Find sequences of lowercase letters joined with an underscore.\n\n    :param text: The input string to search for sequences.\n    :return: A list of all matching sequences.\n    :raises TypeError: If the input is not a string.\n    \"\"\"\n    # Check if the input is a string\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string.\")\n    \n    # Regular expression pattern to match lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    \n    # Find all matches in the input text\n    matches = re.findall(pattern, text)\n    \n    return matches\n\n# Example usage:\ntry:\n    text = \"hello_world this_is_a_test example_123 another_example\"\n    matches = text_lowercase_underscore(text)\n    print(matches)  # Output: ['hello_world', 'this_is_a_test', 'another_example']\nexcept TypeError as e:\n    print(e)\n\n# Example with invalid input\ntry:\n    invalid_input = 12345\n    matches = text_lowercase_underscore(invalid_input)\n    print(matches)\nexcept TypeError as e:\n    print(e)  # Output: Input must be a string.\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpy4yxy9bn.py\", line 33, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "requirement": "Exception Handling", "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Parameters:\n    side_length (float or int): The length of one side of the square.\n\n    Returns:\n    float or int: The perimeter of the square.\n\n    Raises:\n    ValueError: If the side_length is negative.\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    return 4 * side_length\n\n# Example usage:\n# try:\n#     side = -5\n#     perimeter = square_perimeter(side)\n#     print(f\"The perimeter of the square with side length {side} is {perimeter}.\")\n# except ValueError as e:\n#     print(e)\n", "result": "passed", "passed": true}
{"task_id": 18, "requirement": "Exception Handling", "completion": "def remove_dirty_chars(string, dirty_chars):\n    # Input validation: Ensure both inputs are strings\n    if not isinstance(string, str) or not isinstance(dirty_chars, str):\n        raise TypeError(\"Both inputs must be strings.\")\n    \n    # Create a set of characters to remove for faster lookup\n    dirty_set = set(dirty_chars)\n    \n    # Use a list comprehension to filter out the dirty characters\n    cleaned_string = ''.join([char for char in string if char not in dirty_set])\n    \n    return cleaned_string\n\n# Example usage:\ntry:\n    string = \"hello world\"\n    dirty_chars = \"lo\"\n    result = remove_dirty_chars(string, dirty_chars)\n    print(result)  # Output: \"he wrd\"\nexcept TypeError as e:\n    print(e)\n\n# Example with invalid input:\ntry:\n    string = \"hello world\"\n    dirty_chars = 123  # Not a string\n    result = remove_dirty_chars(string, dirty_chars)\n    print(result)\nexcept TypeError as e:\n    print(e)  # Output: \"Both inputs must be strings.\"\n", "result": "passed", "passed": true}
{"task_id": 19, "requirement": "Exception Handling", "completion": "def test_duplicate(arr):\n    \"\"\"\n    Check if the given array contains any duplicate elements.\n\n    Parameters:\n    arr (list of int): The array of integers to check.\n\n    Returns:\n    bool: True if there are duplicates, False otherwise.\n\n    Raises:\n    ValueError: If the input is not a list or contains non-integer elements.\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise ValueError(\"Input must be a list of integers\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(num, int) for num in arr):\n        raise ValueError(\"Input must be a list of integers\")\n    \n    # Use a set to store unique elements\n    unique_elements = set()\n    \n    for num in arr:\n        if num in unique_elements:\n            return True\n        unique_elements.add(num)\n    \n    return False\n\n# Example usage:\nif __name__ == \"__main__\":\n    try:\n        array1 = [1, 2, 3, 4, 5]\n        array2 = [1, 2, 3, 4, 2]\n        array3 = [1, 2, \"three\", 4]  # Invalid input\n        array4 = \"not a list\"        # Invalid input\n        \n        print(test_duplicate(array1))  # Output: False\n        print(test_duplicate(array2))  # Output: True\n        print(test_duplicate(array3))  # Raises ValueError\n        print(test_duplicate(array4))  # Raises ValueError\n    except ValueError as e:\n        print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp19bjubjf.py\", line 40, in <module>\n    test_duplicate(None)\n  File \"/tmp/tmp19bjubjf.py\", line 5, in test_duplicate\n    raise ValueError(\"Input must be a list of integers\")\nValueError: Input must be a list of integers", "passed": false}
{"task_id": 20, "requirement": "Exception Handling", "completion": "def is_woodall(num):\n    # Check if the input is an integer\n    if not isinstance(num, int):\n        raise TypeError(\"Input must be an integer.\")\n    \n    # Woodall numbers are positive integers\n    if num < 1:\n        return False\n    \n    n = 1\n    while True:\n        woodall = n * (2 ** n) - 1\n        if woodall == num:\n            return True\n        if woodall > num:\n            return False\n        n += 1\n\n# Example usage:\nprint(is_woodall(1))    # True, because 1 * 2^1 - 1 = 1\nprint(is_woodall(7))    # True, because 2 * 2^2 - 1 = 7\nprint(is_woodall(23))   # True, because 3 * 2^3 - 1 = 23\nprint(is_woodall(10))   # False, 10 is not a Woodall number\n\n# Testing TypeError\ntry:\n    print(is_woodall(3.5))  # Raises TypeError\nexcept TypeError as e:\n    print(e)  # Output: Input must be an integer.\n", "result": "passed", "passed": true}
{"task_id": 21, "requirement": "Exception Handling", "completion": "def multiples_of_num(n, m):\n    \"\"\"\n    Find m number of multiples of n.\n\n    Parameters:\n    n (int): The number whose multiples are to be found.\n    m (int): The number of multiples to find.\n\n    Returns:\n    list: A list containing the first m multiples of n.\n\n    Raises:\n    ValueError: If either n or m is negative.\n    \"\"\"\n    if n < 0 or m < 0:\n        raise ValueError(\"Both n and m must be non-negative integers.\")\n    return [n * i for i in range(1, m + 1)]\n\n# Example usage:\ntry:\n    n = 5\n    m = 10\n    result = multiples_of_num(n, m)\n    print(f\"The first {m} multiples of {n} are: {result}\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpaofhuu9l.py\", line 16, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "requirement": "Exception Handling", "completion": "def find_first_duplicate(arr):\n    # Input validation: Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Input validation: Check if all elements in the list are integers\n    if not all(isinstance(num, int) for num in arr):\n        raise TypeError(\"All elements in the list must be integers.\")\n    \n    # Create a set to keep track of seen elements\n    seen = set()\n    \n    # Iterate through the array\n    for num in arr:\n        # If the number is already in the set, it's a duplicate\n        if num in seen:\n            return num\n        # Otherwise, add it to the set\n        seen.add(num)\n    \n    # If no duplicates are found, return None\n    return None\n\n# Example usage:\ntry:\n    arr = [3, 5, 2, 5, 3, 7]\n    result = find_first_duplicate(arr)\n    print(\"First duplicate:\", result)  # Output: First duplicate: 5\nexcept TypeError as e:\n    print(e)\n\n# Example with invalid input\ntry:\n    invalid_arr = [3, 5, \"2\", 5, 3, 7]  # Contains a non-integer\n    result = find_first_duplicate(invalid_arr)\n    print(\"First duplicate:\", result)\nexcept TypeError as e:\n    print(e)  # Output: All elements in the list must be integers.\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpp8fxmcmg.py\", line 41, in <module>\n    assert find_first_duplicate([1, 2, 3, 4])==-1\nAssertionError", "passed": false}
{"task_id": 23, "requirement": "Exception Handling", "completion": "def maximum_sum(list_of_lists):\n    \"\"\"\n    Find the maximum sum of elements of any sublist in a list of lists.\n\n    :param list_of_lists: List of lists containing integers.\n    :return: The maximum sum of elements of any sublist.\n    :raises TypeError: If the input is not a list of lists or if any sublist contains non-integer elements.\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(list_of_lists, list):\n        raise TypeError(\"Input must be a list of lists.\")\n\n    # Check if all elements in the list are lists\n    if not all(isinstance(sublist, list) for sublist in list_of_lists):\n        raise TypeError(\"All elements in the input list must be lists.\")\n\n    # Check if all elements in each sublist are integers\n    for sublist in list_of_lists:\n        if not all(isinstance(element, int) for element in sublist):\n            raise TypeError(\"All elements in the sublists must be integers.\")\n\n    # If the list of lists is empty, return 0\n    if not list_of_lists:\n        return 0\n\n    # Initialize max_sum with negative infinity\n    max_sum = float('-inf')\n\n    # Iterate through each sublist and calculate its sum\n    for sublist in list_of_lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum\n\n# Example usage:\ntry:\n    lists = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [10, -2, 1],\n        [7, 8, 9]\n    ]\n    print(maximum_sum(lists))  # Output: 24 (since [7, 8, 9] has the maximum sum)\nexcept TypeError as e:\n    print(e)\n", "result": "failed: File \"/tmp/tmpajcne3cr.py\", line 46\n    try: maximum_sum([[1, 2], [3, 'a']]); assert False, 'Expected TypeError' except TypeError: pass\n                                                                             ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 24, "requirement": "Exception Handling", "completion": "def binary_to_decimal(binary_str):\n    \"\"\"\n    Convert a binary string to its decimal equivalent.\n\n    :param binary_str: A string representing a binary number (e.g., '1010')\n    :return: The decimal equivalent of the binary number\n    :raises ValueError: If the input is not a valid binary string\n    \"\"\"\n    # Check if the input is a valid binary string\n    if not all(bit in ('0', '1') for bit in binary_str):\n        raise ValueError(\"Invalid binary number\")\n\n    decimal = 0\n    length = len(binary_str)\n\n    # Convert binary to decimal\n    for i, bit in enumerate(binary_str):\n        decimal += int(bit) * (2 ** (length - i - 1))\n\n    return decimal\n\n# Example usage:\ntry:\n    binary_number = \"1010\"\n    decimal_number = binary_to_decimal(binary_number)\n    print(f\"The decimal equivalent of binary {binary_number} is {decimal_number}\")\nexcept ValueError as e:\n    print(e)\n\ntry:\n    invalid_binary_number = \"1020\"\n    decimal_number = binary_to_decimal(invalid_binary_number)\n    print(f\"The decimal equivalent of binary {invalid_binary_number} is {decimal_number}\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: File \"/tmp/tmptkqh9ho1.py\", line 34\n    try: binary_to_decimal('102'); assert False, 'Expected ValueError' except ValueError as e: assert str(e) == 'Invalid binary number'\n                                                                       ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 25, "requirement": "Exception Handling", "completion": "from collections import Counter\n\ndef find_product(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(element, int) for element in arr):\n        raise TypeError(\"All elements in the list must be integers.\")\n    \n    # Count the occurrences of each element in the array\n    element_counts = Counter(arr)\n    \n    # Filter out elements that appear more than once\n    non_repeated_elements = [element for element, count in element_counts.items() if count == 1]\n    \n    # Calculate the product of non-repeated elements\n    product = 1\n    for element in non_repeated_elements:\n        product *= element\n    \n    return product\n\n# Example usage:\ntry:\n    arr = [1, 2, 3, 4, 2, 3, 5]\n    result = find_product(arr)\n    print(\"Product of non-repeated elements:\", result)\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmprpzrbk8x.py\", line 33, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "requirement": "Exception Handling", "completion": "def check_k_elements(tuple_list, k):\n    \"\"\"\n    Check if all tuples in the given list have exactly k elements.\n\n    :param tuple_list: List of tuples to be checked.\n    :param k: The expected number of elements in each tuple.\n    :return: True if all tuples have exactly k elements, False otherwise.\n    :raises TypeError: If the input is not a list of tuples or if k is not an integer.\n    \"\"\"\n    # Validate input types\n    if not isinstance(tuple_list, list):\n        raise TypeError(\"Input must be a list of tuples.\")\n    if not all(isinstance(t, tuple) for t in tuple_list):\n        raise TypeError(\"All elements in the list must be tuples.\")\n    if not isinstance(k, int):\n        raise TypeError(\"k must be an integer.\")\n\n    # Check if all tuples have exactly k elements\n    return all(len(t) == k for t in tuple_list)\n\n# Example usage:\ntry:\n    tuple_list = [(1, 2), (3, 4), (5, 6)]\n    k = 2\n    print(check_k_elements(tuple_list, k))  # Output: True\n\n    tuple_list = [(1, 2, 3), (4, 5), (6, 7)]\n    k = 2\n    print(check_k_elements(tuple_list, k))  # Output: False\n\n    # Invalid input examples\n    # tuple_list = [(1, 2), [3, 4], (5, 6)]  # Raises TypeError\n    # k = 2\n    # print(check_k_elements(tuple_list, k))\n\n    # tuple_list = [(1, 2), (3, 4), (5, 6)]\n    # k = 2.5  # Raises TypeError\n    # print(check_k_elements(tuple_list, k))\n\nexcept TypeError as e:\n    print(f\"Error: {e}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpexn4n0ca.py\", line 36, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "requirement": "Exception Handling", "completion": "def remove(lst):\n    \"\"\"\n    Removes all digits from each string in a list of strings.\n\n    :param lst: List of strings from which digits need to be removed.\n    :return: List of strings with all digits removed.\n    :raises TypeError: If the input is not a list or if any element in the list is not a string.\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list.\")\n\n    # Check if all elements in the list are strings\n    if not all(isinstance(s, str) for s in lst):\n        raise TypeError(\"All elements in the list must be strings.\")\n\n    # Use a list comprehension to remove digits from each string\n    return [s.translate(str.maketrans('', '', '0123456789')) for s in lst]\n\n# Example usage:\ntry:\n    input_list = [\"abc123\", \"4def56\", \"ghi789\", \"jkl0\"]\n    output_list = remove(input_list)\n    print(output_list)  # Output: ['abc', 'def', 'ghi', 'jkl']\nexcept TypeError as e:\n    print(f\"Error: {e}\")\n", "result": "passed", "passed": true}
{"task_id": 28, "requirement": "Exception Handling", "completion": "import math\n\ndef binomial_coeff(n, k):\n    \"\"\"\n    Calculate the binomial coefficient C(n, k), which is the number of ways to choose k elements from a set of n elements.\n\n    Parameters:\n    n (int): Total number of elements.\n    k (int): Number of elements to choose.\n\n    Returns:\n    int: The binomial coefficient C(n, k).\n\n    Raises:\n    ValueError: If either input is negative or if k is greater than n.\n    \"\"\"\n    if n < 0 or k < 0:\n        raise ValueError(\"Inputs must be non-negative and k must not be greater than n\")\n    if k > n:\n        raise ValueError(\"Inputs must be non-negative and k must not be greater than n\")\n    \n    return math.comb(n, k)\n\n# Example usage:\ntry:\n    n = 5\n    k = 2\n    print(f\"C({n}, {k}) = {binomial_coeff(n, k)}\")\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 29, "requirement": "Exception Handling", "completion": "def get_odd_occurrence(arr):\n    \"\"\"\n    Finds the element that occurs an odd number of times in the given list.\n\n    :param arr: List of integers\n    :return: The element that occurs an odd number of times\n    :raises TypeError: If the input is not a list of integers\n    \"\"\"\n    # Input validation: Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Input validation: Check if all elements in the list are integers\n    if not all(isinstance(num, int) for num in arr):\n        raise TypeError(\"All elements in the list must be integers.\")\n    \n    # Initialize a dictionary to store the count of each element\n    count_dict = {}\n    \n    # Count the occurrences of each element in the list\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Find the element with an odd count\n    for key, value in count_dict.items():\n        if value % 2 != 0:\n            return key\n    \n    # If no element occurs an odd number of times, return None\n    return None\n\n# Example usage:\ntry:\n    arr = [1, 2, 3, 2, 3, 1, 3]\n    result = get_odd_occurrence(arr)\n    print(f\"The element occurring an odd number of times is: {result}\")\nexcept TypeError as e:\n    print(f\"Error: {e}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp964awwzw.py\", line 37, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "requirement": "Exception Handling", "completion": "def count_substring_with_equal_ends(s):\n    # Input validation: Check if the input is a string\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string.\")\n    \n    count = 0\n    n = len(s)\n    \n    # Iterate over all possible substrings\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substring = s[i:j]\n            if substring[0] == substring[-1]:\n                count += 1\n                \n    return count\n\n# Example usage:\ntry:\n    input_string = \"abcab\"\n    result = count_substring_with_equal_ends(input_string)\n    print(f\"Number of substrings with equal ends: {result}\")\nexcept TypeError as e:\n    print(e)\n", "result": "failed: File \"/tmp/tmpy6l7fma6.py\", line 29\n    try: count_substring_with_equal_ends(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                                  ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 31, "requirement": "Exception Handling", "completion": "import heapq\nfrom collections import defaultdict\n\ndef func(lists, k):\n    # Step 1: Count the frequency of each integer across all lists\n    frequency_map = defaultdict(int)\n    for lst in lists:\n        for num in lst:\n            frequency_map[num] += 1\n    \n    # Step 2: Check if k is greater than the number of distinct integers\n    distinct_integers = len(frequency_map)\n    if k > distinct_integers:\n        raise ValueError(\"k cannot be greater than the number of distinct integers\")\n    \n    # Step 3: Use a min-heap to keep track of the top k frequent integers\n    min_heap = []\n    for num, freq in frequency_map.items():\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, (freq, num))\n        else:\n            if freq > min_heap[0][0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, (freq, num))\n    \n    # Step 4: Extract the top k frequent integers from the heap\n    top_k = [heapq.heappop(min_heap)[1] for _ in range(len(min_heap))]\n    \n    # Step 5: Return the result in descending order of frequency\n    return top_k[::-1]\n\n# Example usage:\nlists = [\n    [1, 2, 3],\n    [2, 3, 4],\n    [3, 4, 5],\n    [1, 3, 5]\n]\nk = 2\nprint(func(lists, k))  # Output: [3, 1]\n\n# Example with k greater than the number of distinct integers\ntry:\n    k = 10\n    print(func(lists, k))  # Raises ValueError\nexcept ValueError as e:\n    print(e)  # Output: k cannot be greater than the number of distinct integers\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpga0xttif.py\", line 49, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "requirement": "Exception Handling", "completion": "def max_prime_factors(n):\n    # Input validation\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    # Initialize the largest prime factor\n    largest_prime = -1\n    \n    # Divide out all factors of 2\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n    \n    # Check for odd factors from 3 to sqrt(n)\n    i = 3\n    while i * i <= n:\n        while n % i == 0:\n            largest_prime = i\n            n //= i\n        i += 2\n    \n    # If n is still greater than 2, then n itself is prime\n    if n > 2:\n        largest_prime = n\n    \n    return largest_prime\n\n# Example usage:\ntry:\n    number = 13195\n    print(f\"The largest prime factor of {number} is: {max_prime_factors(number)}\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1h_le368.py\", line 39, in <module>\n    max_prime_factors(-10)\n  File \"/tmp/tmp1h_le368.py\", line 4, in max_prime_factors\n    raise ValueError(\"Input must be a positive integer.\")\nValueError: Input must be a positive integer.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmp1h_le368.py\", line 41, in <module>\n    assert str(e) == 'Input must be a positive integer'\nAssertionError", "passed": false}
{"task_id": 33, "requirement": "Exception Handling", "completion": "def decimal_to_binary(decimal_num):\n    # Check if the input is a non-negative integer\n    if not isinstance(decimal_num, int) or decimal_num < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    if decimal_num == 0:\n        return \"0\"\n    \n    binary_num = \"\"\n    while decimal_num > 0:\n        remainder = decimal_num % 2\n        binary_num = str(remainder) + binary_num\n        decimal_num = decimal_num // 2\n    \n    return binary_num\n\n# Example usage:\ntry:\n    decimal_number = 13\n    binary_number = decimal_to_binary(decimal_number)\n    print(f\"The binary representation of {decimal_number} is {binary_number}\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpnlalcses.py\", line 25, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "requirement": "Exception Handling", "completion": "def find_missing(arr):\n    # Check if the input list is sorted\n    if arr != sorted(arr):\n        raise ValueError(\"Input list must be sorted.\")\n    \n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # If the middle element is not equal to its index + the first element,\n        # then the missing number is on the left side.\n        if arr[mid] != mid + arr[0]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    \n    # The missing number is the value at the left index + the first element\n    return left + arr[0]\n\n# Example usage:\ntry:\n    arr = [1, 2, 3, 4, 6, 7, 8]\n    print(find_missing(arr))  # Output: 5\n\n    arr_unsorted = [1, 3, 2, 4, 6, 7, 8]\n    print(find_missing(arr_unsorted))  # Raises ValueError\nexcept ValueError as e:\n    print(e)  # Output: Input list must be sorted.\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3ft9cuw9.py\", line 31, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "requirement": "Exception Handling", "completion": "def find_rect_num(n):\n    \"\"\"\n    Calculate the n-th rectangular number.\n\n    Parameters:\n    n (int): The position of the rectangular number to find.\n\n    Returns:\n    int: The n-th rectangular number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return n * (n + 1)\n\n# Example usage:\nif __name__ == \"__main__\":\n    try:\n        n = 5\n        result = find_rect_num(n)\n        print(f\"The {n}-th rectangular number is: {result}\")\n    except ValueError as e:\n        print(e)\n", "result": "passed", "passed": true}
{"task_id": 36, "requirement": "Exception Handling", "completion": "def find_nth_digit(numerator, denominator, n):\n    # Check if the denominator is zero\n    if denominator == 0:\n        raise ValueError(\"Denominator cannot be zero.\")\n    \n    # Check if the fraction is proper\n    if numerator >= denominator:\n        return \"Error: The fraction is not proper.\"\n    \n    # Calculate the decimal representation\n    decimal = numerator / denominator\n    \n    # Convert the decimal part to a string\n    decimal_str = str(decimal).split('.')[1]\n    \n    # Check if n is within the range of the decimal digits\n    if n > len(decimal_str):\n        return \"Error: n is out of range.\"\n    \n    # Return the nth digit\n    return int(decimal_str[n-1])\n\n# Example usage:\ntry:\n    numerator = 1\n    denominator = 7\n    n = 3\n    print(find_nth_digit(numerator, denominator, n))  # Output: 4\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpfh3m5f00.py\", line 36, in <module>\n    find_nth_digit(1, 0, 1)\n  File \"/tmp/tmpfh3m5f00.py\", line 4, in find_nth_digit\n    raise ValueError(\"Denominator cannot be zero.\")\nValueError: Denominator cannot be zero.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpfh3m5f00.py\", line 38, in <module>\n    assert str(e) == 'Denominator cannot be zero'\nAssertionError", "passed": false}
{"task_id": 37, "requirement": "Exception Handling", "completion": "def sort_mixed_list(mixed_list):\n    # Check if the input is a list\n    if not isinstance(mixed_list, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Check if all elements are either integers or strings\n    for item in mixed_list:\n        if not isinstance(item, (int, str)):\n            raise TypeError(\"List elements must be either integers or strings.\")\n    \n    # Separate integers and strings\n    integers = [x for x in mixed_list if isinstance(x, int)]\n    strings = [x for x in mixed_list if isinstance(x, str)]\n    \n    # Sort integers and strings separately\n    integers.sort()\n    strings.sort()\n    \n    # Combine the sorted integers and strings\n    sorted_list = integers + strings\n    \n    return sorted_list\n\n# Example usage:\ntry:\n    mixed_list = [3, 'apple', 1, 'banana', 2, 'cherry']\n    sorted_list = sort_mixed_list(mixed_list)\n    print(sorted_list)  # Output: [1, 2, 3, 'apple', 'banana', 'cherry']\nexcept TypeError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 38, "requirement": "Exception Handling", "completion": "def div_even_odd(numbers):\n    first_even = None\n    first_odd = None\n    \n    for num in numbers:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is None or first_odd is None:\n        raise ValueError(\"List must contain at least one even and one odd number.\")\n    \n    return first_even / first_odd\n\n# Example usage:\ntry:\n    numbers = [1, 3, 5, 7, 8, 10]\n    result = div_even_odd(numbers)\n    print(result)  # Output: 8.0 (since 8 / 1 = 8.0)\nexcept ValueError as e:\n    print(e)\n\ntry:\n    numbers = [2, 4, 6, 8]  # No odd numbers\n    result = div_even_odd(numbers)\n    print(result)\nexcept ValueError as e:\n    print(e)  # Output: List must contain at least one even and one odd number.\n\ntry:\n    numbers = [1, 3, 5, 7]  # No even numbers\n    result = div_even_odd(numbers)\n    print(result)\nexcept ValueError as e:\n    print(e)  # Output: List must contain at least one even and one odd number.\n", "result": "failed: File \"/tmp/tmp074zf2lb.py\", line 43\n    try: div_even_odd([2, 4, 6]); assert False; except ValueError as e: assert str(e) == 'List must contain at least one even and one odd number.'\n                                                ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 39, "requirement": "Exception Handling", "completion": "from collections import Counter\n\ndef rearrange_string(s: str) -> bool:\n    # Validate input: must be a string and contain only lowercase letters\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string.\")\n    \n    if not s.islower():\n        raise ValueError(\"Input must contain only lowercase letters.\")\n    \n    # Count the frequency of each character in the string\n    char_counts = Counter(s)\n    \n    # Find the maximum frequency\n    max_count = max(char_counts.values())\n    \n    # Check if the maximum frequency is more than (len(s) + 1) // 2\n    if max_count > (len(s) + 1) // 2:\n        return False\n    else:\n        return True\n\n# Example usage:\ntry:\n    print(rearrange_string(\"aabb\"))  # Output: True\n    print(rearrange_string(\"aaab\"))  # Output: False\n    print(rearrange_string(\"Aabb\"))  # Raises ValueError\n    print(rearrange_string(12345))   # Raises ValueError\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvk5vreby.py\", line 32, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "requirement": "Exception Handling", "completion": "from collections import Counter\n\ndef freq_element(list_of_lists):\n    # Check if the input is a list of lists\n    if not isinstance(list_of_lists, list) or not all(isinstance(sublist, list) for sublist in list_of_lists):\n        raise TypeError(\"Input must be a list of lists.\")\n    \n    # Flatten the list of lists into a single list\n    flattened_list = [item for sublist in list_of_lists for item in sublist]\n    \n    # Use Counter to get the frequency of each element\n    frequency = Counter(flattened_list)\n    \n    return frequency\n\n# Example usage:\ntry:\n    list_of_lists = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\n    result = freq_element(list_of_lists)\n    print(result)\nexcept TypeError as e:\n    print(e)\n", "result": "failed: File \"/tmp/tmp23zh47qe.py\", line 27\n    try: freq_element('not a list'); assert False; except TypeError: assert True\n                                                   ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 41, "requirement": "Exception Handling", "completion": "def filter_evennumbers(numbers):\n    \"\"\"\n    Filters even numbers from the given list using a lambda function.\n\n    :param numbers: List of integers\n    :return: List of even integers\n    :raises TypeError: If the input is not a list of integers\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n\n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in numbers):\n        raise TypeError(\"All elements in the list must be integers.\")\n\n    # Filter even numbers using a lambda function\n    return list(filter(lambda x: x % 2 == 0, numbers))\n\n# Example usage:\ntry:\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    even_numbers = filter_evennumbers(numbers)\n    print(even_numbers)  # Output: [2, 4, 6, 8, 10]\nexcept TypeError as e:\n    print(e)\n\n# Example with invalid input\ntry:\n    invalid_input = [1, 2, \"three\", 4]\n    even_numbers = filter_evennumbers(invalid_input)\n    print(even_numbers)\nexcept TypeError as e:\n    print(e)  # Output: All elements in the list must be integers.\n", "result": "passed", "passed": true}
{"task_id": 42, "requirement": "Exception Handling", "completion": "from collections import Counter\n\ndef find_sum(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Count the occurrences of each element in the array\n    element_counts = Counter(arr)\n    \n    # Sum the elements that appear more than once\n    sum_repeated = sum(element for element, count in element_counts.items() if count > 1)\n    \n    return sum_repeated\n\n# Example usage:\ntry:\n    arr = [1, 2, 3, 4, 2, 3, 5, 6, 7, 7]\n    result = find_sum(arr)\n    print(\"Sum of repeated elements:\", result)\nexcept TypeError as e:\n    print(e)\n\n# Example with invalid input\ntry:\n    invalid_input = \"not a list\"\n    result = find_sum(invalid_input)\n    print(\"Sum of repeated elements:\", result)\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwn8rig91.py\", line 32, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Exception Handling", "completion": "import re\n\ndef text_match(text):\n    # Check if the input is a string\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string.\")\n    \n    # Define the regex pattern to match sequences of lowercase letters joined by an underscore\n    pattern = r'[a-z]+_[a-z]+'\n    \n    # Search for the pattern in the input text\n    matches = re.findall(pattern, text)\n    \n    return matches\n\n# Example usage:\ntry:\n    text = \"hello_world this_is_a_test example_text not_a_match CamelCase\"\n    matches = text_match(text)\n    print(matches)  # Output: ['hello_world', 'this_is_a_test', 'example_text']\n    \n    # Test with non-string input\n    non_string_input = 12345\n    matches = text_match(non_string_input)  # This will raise a TypeError\nexcept TypeError as e:\n    print(e)  # Output: Input must be a string.\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpsmvz3b6b.py\", line 28, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 44, "requirement": "Exception Handling", "completion": "import re\n\ndef text_match_string(word, text):\n    \"\"\"\n    Check if the given word appears at the beginning of the text.\n\n    Parameters:\n    word (str): The word to search for at the beginning of the text.\n    text (str): The text in which to search for the word.\n\n    Returns:\n    bool: True if the word is found at the beginning of the text, False otherwise.\n\n    Raises:\n    TypeError: If either `word` or `text` is not a string.\n    \"\"\"\n    # Validate input types\n    if not isinstance(word, str):\n        raise TypeError(\"The 'word' argument must be a string.\")\n    if not isinstance(text, str):\n        raise TypeError(\"The 'text' argument must be a string.\")\n\n    # Create a regular expression pattern that matches the word at the beginning of the string\n    pattern = r'^' + re.escape(word)\n    \n    # Search for the pattern in the text\n    match = re.search(pattern, text)\n    \n    # Return True if a match is found, otherwise False\n    return bool(match)\n\n# Example usage:\ntry:\n    print(text_match_string(\"hello\", \"hello world\"))  # Output: True\n    print(text_match_string(\"hello\", \"world hello\"))  # Output: False\n    print(text_match_string(123, \"hello world\"))      # Raises TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "failed: File \"/tmp/tmp2nzem5o9.py\", line 31\n    try: text_match_string(123); assert False, 'TypeError not raised' except TypeError: pass\n                                                                      ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 45, "requirement": "Exception Handling", "completion": "from math import gcd\nfrom functools import reduce\n\ndef get_gcd(arr):\n    \"\"\"\n    Compute the greatest common divisor (GCD) of an array of integers.\n\n    :param arr: List of integers\n    :return: GCD of the array elements\n    :raises ValueError: If the input list is empty\n    \"\"\"\n    if not arr:\n        raise ValueError(\"Input list cannot be empty.\")\n    \n    # Use reduce to apply the gcd function across the array\n    return reduce(gcd, arr)\n\n# Example usage:\ntry:\n    array = [24, 36, 48, 60]\n    result = get_gcd(array)\n    print(f\"The GCD of {array} is {result}\")\nexcept ValueError as e:\n    print(e)\n\ntry:\n    empty_array = []\n    result = get_gcd(empty_array)\n    print(f\"The GCD of {empty_array} is {result}\")\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 46, "requirement": "Exception Handling", "completion": "def test_distinct(numbers):\n    \"\"\"\n    Determine whether all the numbers in the list are distinct.\n\n    :param numbers: List of integers\n    :return: True if all numbers are distinct, False otherwise\n    :raises TypeError: If the input is not a list or if the list contains non-integer elements\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n\n    # Check if all elements in the list are integers\n    if not all(isinstance(num, int) for num in numbers):\n        raise TypeError(\"All elements in the list must be integers.\")\n\n    # Convert the list to a set to remove duplicates\n    unique_numbers = set(numbers)\n\n    # Compare the length of the set to the length of the original list\n    return len(unique_numbers) == len(numbers)\n\n# Example usage:\nif __name__ == \"__main__\":\n    try:\n        print(test_distinct([1, 2, 3, 4, 5]))  # Output: True\n        print(test_distinct([1, 2, 2, 3, 4]))  # Output: False\n        print(test_distinct([10, 20, 30, 40, 50]))  # Output: True\n        print(test_distinct([10, 20, 30, 40, 10]))  # Output: False\n        print(test_distinct([1, 2, 3.5, 4]))  # Raises TypeError\n        print(test_distinct(\"not a list\"))  # Raises TypeError\n    except TypeError as e:\n        print(f\"Error: {e}\")\n", "result": "passed", "passed": true}
{"task_id": 47, "requirement": "Exception Handling", "completion": "def compute_last_digit(a: int, b: int) -> int:\n    if a > b:\n        raise ValueError(\"a should not be greater than b\")\n    elif a == b:\n        return 1\n    else:\n        # Compute the product (a+1) * (a+2) * ... * b modulo 10\n        result = 1\n        for i in range(a + 1, b + 1):\n            result = (result * i) % 10\n            if result == 0:\n                break  # If result is 0, it will remain 0\n        return result\n\n# Example usage:\ntry:\n    print(compute_last_digit(5, 3))  # Output: 2 (since 5! / 3! = 20, last digit is 0)\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(compute_last_digit(7, 7))  # Output: 1 (since 7! / 7! = 1, last digit is 1)\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(compute_last_digit(4, 5))  # Output: 4 (since 5! / 4! = 5, last digit is 5)\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(compute_last_digit(6, 5))  # Raises ValueError: a should not be greater than b\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 48, "requirement": "Exception Handling", "completion": "def odd_bit_set_number(n):\n    # Check if the input is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    \n    # Create a mask with all odd bits set to 1\n    # The mask will be 0xAA...AA in hexadecimal, which is 10101010...1010 in binary\n    # For example, for 8 bits, the mask is 0xAA (10101010)\n    # We can generate the mask by shifting 1 to the left and ORing it with itself\n    mask = 0\n    bit = 1\n    while bit <= n:\n        mask |= bit\n        bit <<= 2  # Move to the next odd bit\n    \n    # Set all odd bits of n by ORing it with the mask\n    result = n | mask\n    return result\n\n# Example usage:\ntry:\n    number = 0b10101010  # Binary: 10101010\n    result = odd_bit_set_number(number)\n    print(bin(result))  # Output: 0b10101010 (since all odd bits are already set)\n\n    number = 0b00000000  # Binary: 00000000\n    result = odd_bit_set_number(number)\n    print(bin(result))  # Output: 0b10101010 (all odd bits are set)\n\n    # Test with non-integer input\n    number = \"not an integer\"\n    result = odd_bit_set_number(number)\nexcept TypeError as e:\n    print(e)  # Output: Input must be an integer.\n", "result": "passed", "passed": true}
{"task_id": 49, "requirement": "Exception Handling", "completion": "def specified_element(two_d_list, index=0):\n    \"\"\"\n    Extracts every first or specified element from a given two-dimensional list.\n\n    Args:\n        two_d_list (list of lists): The input two-dimensional list.\n        index (int): The index of the element to extract from each sublist. Default is 0.\n\n    Returns:\n        list: A list containing the specified element from each sublist.\n\n    Raises:\n        IndexError: If the specified index is out of range for any sublist.\n    \"\"\"\n    result = []\n    for sublist in two_d_list:\n        if index >= len(sublist) or index < -len(sublist):\n            raise IndexError(\"Index out of range for sublist\")\n        result.append(sublist[index])\n    return result\n", "result": "passed", "passed": true}
{"task_id": 50, "requirement": "Exception Handling", "completion": "def min_length_list(lists):\n    \"\"\"\n    Finds the list with the minimum length from a given list of lists.\n\n    :param lists: List of lists\n    :return: The list with the minimum length\n    :raises ValueError: If the input is not a list of lists\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(lists, list):\n        raise ValueError(\"Input must be a list of lists.\")\n    \n    # Check if all elements in the list are lists\n    if not all(isinstance(item, list) for item in lists):\n        raise ValueError(\"Input must be a list of lists.\")\n    \n    # If the list is empty, raise an error\n    if not lists:\n        raise ValueError(\"Input list is empty.\")\n    \n    # Find and return the list with the minimum length\n    return min(lists, key=lambda x: len(x))\n\n# Example usage:\ntry:\n    lists = [[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]\n    result = min_length_list(lists)\n    print(result)  # Output: [6]\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpzqvaocdw.py\", line 26, in <module>\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nAssertionError", "passed": false}
{"task_id": 51, "requirement": "Exception Handling", "completion": "def check_equilateral(side1, side2, side3):\n    \"\"\"\n    Check if a triangle is equilateral.\n\n    Parameters:\n    side1 (int): Length of the first side of the triangle.\n    side2 (int): Length of the second side of the triangle.\n    side3 (int): Length of the third side of the triangle.\n\n    Returns:\n    None: Prints whether the triangle is equilateral or not.\n\n    Raises:\n    ValueError: If any of the inputs are non-positive integers.\n    \"\"\"\n    # Check if all inputs are positive integers\n    if not (isinstance(side1, int) and isinstance(side2, int) and isinstance(side3, int)):\n        raise ValueError(\"All sides must be integers.\")\n    if side1 <= 0 or side2 <= 0 or side3 <= 0:\n        raise ValueError(\"All sides must be positive integers.\")\n\n    # Check if the triangle is equilateral\n    if side1 == side2 == side3:\n        print(\"The triangle is equilateral.\")\n    else:\n        print(\"The triangle is not equilateral.\")\n\n# Example usage:\ntry:\n    check_equilateral(5, 5, 5)  # Output: The triangle is equilateral.\nexcept ValueError as e:\n    print(e)\n\ntry:\n    check_equilateral(5, 4, 5)  # Output: The triangle is not equilateral.\nexcept ValueError as e:\n    print(e)\n\ntry:\n    check_equilateral(-1, 5, 5)  # Raises ValueError: All sides must be positive integers.\nexcept ValueError as e:\n    print(e)\n\ntry:\n    check_equilateral(5.5, 5, 5)  # Raises ValueError: All sides must be integers.\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpp6mlilnp.py\", line 36, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "requirement": "Exception Handling", "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float or int): The length of the base of the parallelogram.\n    height (float or int): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram.\n\n    Raises:\n    TypeError: If either `base` or `height` is not a numerical value (int or float).\n    \"\"\"\n    if not isinstance(base, (int, float)):\n        raise TypeError(\"The base must be a numerical value (int or float).\")\n    if not isinstance(height, (int, float)):\n        raise TypeError(\"The height must be a numerical value (int or float).\")\n    \n    return base * height\n\n# Example usage:\ntry:\n    base = 5.0\n    height = 3.0\n    area = parallelogram_area(base, height)\n    print(f\"The area of the parallelogram is: {area}\")\nexcept TypeError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 53, "requirement": "Exception Handling", "completion": "def check_equality(s):\n    # Check if the input is a string\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Check if the string is empty\n    if not s:\n        return False\n    \n    # Compare the first and last characters\n    return s[0] == s[-1]\n\n# Example usage:\ntry:\n    print(check_equality(\"hello\"))  # Output: False\n    print(check_equality(\"racecar\"))  # Output: True\n    print(check_equality(\"a\"))  # Output: True\n    print(check_equality(\"\"))  # Output: False\n    print(check_equality(123))  # Raises TypeError\nexcept TypeError as e:\n    print(e)  # Output: Input must be a string\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3648lniw.py\", line 23, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 54, "requirement": "Exception Handling", "completion": "def counting_sort(arr):\n    # Input validation\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    for num in arr:\n        if not isinstance(num, int):\n            raise TypeError(\"All elements in the list must be integers.\")\n    \n    # If the array is empty, return it as is\n    if not arr:\n        return arr\n    \n    # Find the maximum and minimum elements in the array\n    max_val = max(arr)\n    min_val = min(arr)\n    \n    # Create a count array to store the count of each unique element\n    count = [0] * (max_val - min_val + 1)\n    \n    # Store the count of each element in the count array\n    for num in arr:\n        count[num - min_val] += 1\n    \n    # Modify the count array such that each element at each index\n    # stores the sum of previous counts\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    \n    # Create an output array to store the sorted elements\n    output = [0] * len(arr)\n    \n    # Build the output array by placing elements in their correct position\n    for num in reversed(arr):\n        output[count[num - min_val] - 1] = num\n        count[num - min_val] -= 1\n    \n    # Copy the sorted elements back to the original array\n    for i in range(len(arr)):\n        arr[i] = output[i]\n    \n    return arr\n\n# Example usage:\ntry:\n    arr = [4, 2, 2, 8, 3, 3, 1]\n    sorted_arr = counting_sort(arr)\n    print(\"Sorted array:\", sorted_arr)\nexcept TypeError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 55, "requirement": "Exception Handling", "completion": "def tn_gp(a1, r, n):\n    \"\"\"\n    Calculate the t-nth term of a geometric series.\n\n    Parameters:\n    a1 (float): The first term of the geometric series.\n    r (float): The common ratio of the geometric series.\n    n (int): The term number to find.\n\n    Returns:\n    float: The t-nth term of the geometric series.\n\n    Raises:\n    ValueError: If the term number 'n' is less than 1.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Term number must be greater than 0\")\n    \n    return a1 * (r ** (n - 1))\n\n# Example usage:\ntry:\n    a1 = 2  # First term\n    r = 3   # Common ratio\n    n = 4   # Term number\n\n    result = tn_gp(a1, r, n)\n    print(f\"The {n}-th term of the geometric series is: {result}\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0vpr5no_.py\", line 19, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "requirement": "Exception Handling", "completion": "def check(n):\n    # Check if the input is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    \n    # Reverse the number\n    reversed_n = int(str(n)[::-1])\n    \n    # Check if the number is one less than twice its reverse\n    return n == 2 * reversed_n - 1\n\n# Example usage:\ntry:\n    number = 21\n    if check(number):\n        print(f\"{number} is one less than twice its reverse.\")\n    else:\n        print(f\"{number} is not one less than twice its reverse.\")\nexcept TypeError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 57, "requirement": "Exception Handling", "completion": "def find_max_num(digits, num_digits):\n    # Check if the number of digits requested exceeds the length of the list\n    if num_digits > len(digits):\n        raise ValueError(\"Number of digits exceeds the length of the list.\")\n    \n    # Convert each digit to a string to facilitate sorting\n    str_digits = [str(d) for d in digits]\n    \n    # Sort the digits in descending order to form the largest number\n    str_digits.sort(reverse=True)\n    \n    # Select the first 'num_digits' digits\n    selected_digits = str_digits[:num_digits]\n    \n    # Join the selected digits into a single string and convert it to an integer\n    max_num = int(''.join(selected_digits))\n    \n    return max_num\n\n# Example usage:\ndigits = [1, 2, 3, 4]\nnum_digits = 3\nprint(find_max_num(digits, num_digits))  # Output: 432\n\ndigits = [9, 8, 7, 6]\nnum_digits = 4\nprint(find_max_num(digits, num_digits))  # Output: 9876\n\ndigits = [5, 5, 5, 5]\nnum_digits = 2\nprint(find_max_num(digits, num_digits))  # Output: 55\n\n# Example with error\ntry:\n    digits = [1, 2, 3]\n    num_digits = 5\n    print(find_max_num(digits, num_digits))\nexcept ValueError as e:\n    print(e)  # Output: Number of digits exceeds the length of the list.\n", "result": "passed", "passed": true}
{"task_id": 58, "requirement": "Exception Handling", "completion": "def opposite_signs(x, y):\n    \"\"\"\n    Check if two integers have opposite signs.\n\n    Parameters:\n    x (int): The first integer.\n    y (int): The second integer.\n\n    Returns:\n    bool: True if the integers have opposite signs, False otherwise.\n\n    Raises:\n    TypeError: If either x or y is not an integer.\n    \"\"\"\n    if not isinstance(x, int) or not isinstance(y, int):\n        raise TypeError(\"Both inputs must be integers.\")\n    return (x < 0) != (y < 0)\n\n# Example usage:\ntry:\n    print(opposite_signs(5, -3))  # Output: True\n    print(opposite_signs(-4, -7))  # Output: False\n    print(opposite_signs(10, 20))  # Output: False\n    print(opposite_signs(5, \"not an integer\"))  # Raises TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 59, "requirement": "Exception Handling", "completion": "def is_octagonal(n):\n    \"\"\"\n    Calculate the nth octagonal number.\n\n    Parameters:\n    n (int): The position of the octagonal number to calculate.\n\n    Returns:\n    int: The nth octagonal number.\n\n    Raises:\n    ValueError: If the input is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return n * (3 * n - 2)\n\n# Example usage:\nif __name__ == \"__main__\":\n    try:\n        n = 5\n        print(f\"The {n}th octagonal number is: {is_octagonal(n)}\")\n        \n        # Test invalid inputs\n        # print(is_octagonal(0))  # Raises ValueError\n        # print(is_octagonal(-3)) # Raises ValueError\n        # print(is_octagonal(2.5))# Raises ValueError\n    except ValueError as e:\n        print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5ex9_aap.py\", line 25, in <module>\n    is_octagonal(-1)\n  File \"/tmp/tmp5ex9_aap.py\", line 4, in is_octagonal\n    raise ValueError(\"Input must be a positive integer.\")\nValueError: Input must be a positive integer.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmp5ex9_aap.py\", line 27, in <module>\n    assert str(e) == 'Input must be a positive integer'\nAssertionError", "passed": false}
{"task_id": 60, "requirement": "Exception Handling", "completion": "def max_len_sub(arr, diff=1):\n    # Input validation\n    if not isinstance(arr, list):\n        raise TypeError(\"Input array must be a list.\")\n    if not isinstance(diff, int):\n        raise TypeError(\"The difference parameter must be an integer.\")\n    \n    if not arr:\n        return 0\n    \n    # Dictionary to store the length of the longest subsequence ending with a particular value\n    dp = {}\n    max_length = 1\n    \n    for num in arr:\n        # Initialize the length of the subsequence ending with num as 1\n        dp[num] = 1\n        \n        # Check if num - diff exists in the dictionary\n        if num - diff in dp:\n            dp[num] = max(dp[num], dp[num - diff] + 1)\n        \n        # Check if num + diff exists in the dictionary\n        if num + diff in dp:\n            dp[num] = max(dp[num], dp[num + diff] + 1)\n        \n        # Update the maximum length found so far\n        max_length = max(max_length, dp[num])\n    \n    return max_length\n\n# Example usage:\ntry:\n    arr = [1, 2, 3, 4, 5, 3, 2]\n    print(max_len_sub(arr))  # Output: 5 (Subsequence: [1, 2, 3, 4, 5])\n    \n    arr = [10, 9, 4, 5, 4, 8, 6]\n    print(max_len_sub(arr))  # Output: 3 (Subsequence: [4, 5, 4] or [9, 8, 6])\n    \n    # Test invalid input\n    print(max_len_sub(\"not a list\"))  # Raises TypeError\nexcept TypeError as e:\n    print(e)\n\ntry:\n    print(max_len_sub([1, 2, 3], \"not an integer\"))  # Raises TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp09fhskij.py\", line 50, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nAssertionError", "passed": false}

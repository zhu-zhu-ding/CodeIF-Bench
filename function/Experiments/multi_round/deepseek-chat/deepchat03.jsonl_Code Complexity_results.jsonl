{"task_id": 11, "requirement": "Code Complexity", "completion": "def remove_occ(s, char):\n    # Find the index of the first occurrence\n    first_index = s.find(char)\n    \n    # Find the index of the last occurrence\n    last_index = s.rfind(char)\n    \n    # If the character is not found, return the original string\n    if first_index == -1 or last_index == -1:\n        return s\n    \n    # Remove the first occurrence\n    s = s[:first_index] + s[first_index+1:]\n    \n    # Adjust the last index if it was after the first occurrence\n    if last_index > first_index:\n        last_index -= 1\n    \n    # Remove the last occurrence\n    s = s[:last_index] + s[last_index+1:]\n    \n    return s\n\n# Example usage:\ninput_string = \"banana\"\ncharacter = \"a\"\nresult = remove_occ(input_string, character)\nprint(result)  # Output: \"bnna\"\n", "result": "passed", "passed": true}
{"task_id": 14, "requirement": "Code Complexity", "completion": "def find_volume(base_triangle, height_triangle, height_prism):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base_triangle (float): The base length of the triangular base.\n    height_triangle (float): The height of the triangular base.\n    height_prism (float): The height (or length) of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    # Calculate the volume directly without any branching\n    return 0.5 * base_triangle * height_triangle * height_prism\n\n# Example usage:\nbase_triangle = 5.0  # base of the triangle\nheight_triangle = 4.0  # height of the triangle\nheight_prism = 10.0  # height of the prism\n\nvolume = find_volume(base_triangle, height_triangle, height_prism)\nprint(f\"The volume of the triangular prism is: {volume}\")\n", "result": "passed", "passed": true}
{"task_id": 15, "requirement": "Code Complexity", "completion": "import re\n\ndef split_lowerstring(s):\n    # Use re.split to split the string at lowercase letters\n    # The pattern [a-z] matches any lowercase letter\n    # The function has a cyclomatic complexity of 1 because there is no branching or looping\n    return re.split('[a-z]', s)\n\n# Example usage:\ninput_string = \"HelloWorldPython\"\nresult = split_lowerstring(input_string)\nprint(result)  # Output: ['H', 'W', 'P']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp87juzlw4.py\", line 14, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "requirement": "Code Complexity", "completion": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Find sequences of lowercase letters joined with an underscore.\n\n    :param text: The input string to search for sequences.\n    :return: A list of all matching sequences.\n    \"\"\"\n    # Regular expression pattern to match lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    \n    # Find all matches in the input text\n    return re.findall(pattern, text)\n\n# Example usage:\ntext = \"hello_world this_is_a_test example_123 another_example\"\nmatches = text_lowercase_underscore(text)\nprint(matches)  # Output: ['hello_world', 'this_is_a_test', 'another_example']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp__bqze6n.py\", line 16, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "requirement": "Code Complexity", "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Parameters:\n    side_length (float or int): The length of one side of the square.\n\n    Returns:\n    float or int: The perimeter of the square.\n    \"\"\"\n    return 4 * side_length\n", "result": "passed", "passed": true}
{"task_id": 20, "requirement": "Code Complexity", "completion": "import math\n\ndef is_woodall(num):\n    if num < 1:\n        return False\n    \n    # Solve for n in the equation n * 2^n - 1 = num\n    # Rearrange to: n * 2^n = num + 1\n    target = num + 1\n    \n    # Use logarithms to approximate n\n    if target <= 0:\n        return False\n    \n    # Approximate n using logarithms\n    n_approx = math.log2(target)\n    \n    # Check if n_approx is close to an integer\n    n = round(n_approx)\n    \n    # Verify if n * 2^n - 1 equals the given number\n    return n * (2 ** n) - 1 == num\n\n# Example usage:\nprint(is_woodall(1))    # True, because 1 * 2^1 - 1 = 1\nprint(is_woodall(7))    # True, because 2 * 2^2 - 1 = 7\nprint(is_woodall(23))   # True, because 3 * 2^3 - 1 = 23\nprint(is_woodall(10))   # False, 10 is not a Woodall number\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_2dwhuzs.py\", line 30, in <module>\n    assert is_woodall(383) == True\nAssertionError", "passed": false}
{"task_id": 21, "requirement": "Code Complexity", "completion": "def multiples_of_num(n, m):\n    \"\"\"\n    Find m number of multiples of n.\n\n    Parameters:\n    n (int): The number whose multiples are to be found.\n    m (int): The number of multiples to find.\n\n    Returns:\n    list: A list containing the first m multiples of n.\n    \"\"\"\n    return list(map(lambda i: n * i, range(1, m + 1)))\n\n# Example usage:\nn = 5\nm = 10\nresult = multiples_of_num(n, m)\nprint(f\"The first {m} multiples of {n} are: {result}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpaose1szd.py\", line 11, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 24, "requirement": "Code Complexity", "completion": "def binary_to_decimal(binary_str):\n    \"\"\"\n    Convert a binary string to its decimal equivalent.\n\n    :param binary_str: A string representing a binary number (e.g., '1010')\n    :return: The decimal equivalent of the binary number\n    :raises ValueError: If the input string contains characters other than '0' or '1'\n    \"\"\"\n    try:\n        # Use Python's built-in int() function with base 2 for conversion\n        return int(binary_str, 2)\n    except ValueError:\n        raise ValueError(\"Invalid binary string. It should contain only '0's and '1's.\")\n\n# Example usage:\nbinary_number = \"1010\"\ndecimal_number = binary_to_decimal(binary_number)\nprint(f\"The decimal equivalent of binary {binary_number} is {decimal_number}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8epem_88.py\", line 14, in <module>\n    assert binary_to_decimal(100) == 4\n  File \"/tmp/tmp8epem_88.py\", line 5, in binary_to_decimal\n    return int(binary_str, 2)\nTypeError: int() can't convert non-string with explicit base", "passed": false}
{"task_id": 32, "requirement": "Code Complexity", "completion": "def max_prime_factors(n):\n    largest_prime = -1\n\n    # Remove all factors of 2\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n\n    # Check odd factors from 3 to sqrt(n)\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            largest_prime = i\n            n //= i\n        else:\n            i += 2\n\n    # If n is still greater than 2, it's a prime number\n    if n > 2:\n        largest_prime = n\n\n    return largest_prime\n", "result": "passed", "passed": true}
{"task_id": 33, "requirement": "Code Complexity", "completion": "def decimal_to_binary(decimal_num):\n    return bin(decimal_num)[2:]\n\n# Example usage:\ndecimal_number = 13\nbinary_number = decimal_to_binary(decimal_number)\nprint(f\"The binary representation of {decimal_number} is {binary_number}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpphqrgj98.py\", line 9, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 35, "requirement": "Code Complexity", "completion": "def find_rect_num(n):\n    \"\"\"\n    Calculate the n-th rectangular number.\n\n    Parameters:\n    n (int): The position of the rectangular number to find.\n\n    Returns:\n    int: The n-th rectangular number.\n    \"\"\"\n    return n * (n + 1)\n\n# Example usage:\nif __name__ == \"__main__\":\n    n = 5\n    result = find_rect_num(n)\n    print(f\"The {n}-th rectangular number is: {result}\")\n", "result": "passed", "passed": true}
{"task_id": 36, "requirement": "Code Complexity", "completion": "def find_nth_digit(numerator, denominator, n):\n    # Ensure the fraction is proper\n    if numerator >= denominator:\n        return \"Error: The fraction is not proper.\"\n    \n    # Calculate the decimal representation\n    decimal = numerator / denominator\n    \n    # Convert the decimal part to a string\n    decimal_str = str(decimal).split('.')[1]\n    \n    # Check if n is within the range of the decimal digits\n    if n > len(decimal_str):\n        return \"Error: n is out of range.\"\n    \n    # Return the nth digit\n    return int(decimal_str[n - 1])\n\n# Example usage:\nnumerator = 1\ndenominator = 7\nn = 3\nprint(find_nth_digit(numerator, denominator, n))  # Output: 4\n", "result": "passed", "passed": true}
{"task_id": 38, "requirement": "Code Complexity", "completion": "def div_even_odd(numbers):\n    first_even = next((num for num in numbers if num % 2 == 0), None)\n    first_odd = next((num for num in numbers if num % 2 != 0), None)\n    \n    if first_even is not None and first_odd is not None:\n        return first_even / first_odd\n    return None\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7s4ik3mh.py\", line 14, in <module>\n    assert cc_visit(inspect.getsource(div_even_odd))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 40, "requirement": "Code Complexity", "completion": "from collections import Counter\nfrom itertools import chain\n\ndef freq_element(list_of_lists):\n    # Flatten the list of lists using itertools.chain\n    flattened_list = list(chain.from_iterable(list_of_lists))\n    \n    # Use Counter to get the frequency of each element\n    frequency = Counter(flattened_list)\n    \n    return frequency\n", "result": "passed", "passed": true}
{"task_id": 42, "requirement": "Code Complexity", "completion": "def find_sum(arr):\n    # Use a dictionary to count occurrences of each element\n    element_counts = {}\n    for element in arr:\n        if element in element_counts:\n            element_counts[element] += 1\n        else:\n            element_counts[element] = 1\n    \n    # Sum elements that appear more than once\n    sum_repeated = 0\n    for element, count in element_counts.items():\n        if count > 1:\n            sum_repeated += element\n    \n    return sum_repeated\n\n# Example usage:\narr = [1, 2, 3, 4, 2, 3, 5, 6, 7, 7]\nresult = find_sum(arr)\nprint(\"Sum of repeated elements:\", result)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpu0x601ma.py\", line 23, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Code Complexity", "completion": "import re\n\ndef text_match(text):\n    # Use re.findall to directly return all matches of the pattern\n    return re.findall(r'[a-z]+_[a-z]+', text)\n\n# Example usage:\ntext = \"hello_world this_is_a_test example_text not_a_match CamelCase\"\nmatches = text_match(text)\nprint(matches)  # Output: ['hello_world', 'this_is_a_test', 'example_text']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpj5jdgcvj.py\", line 12, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 45, "requirement": "Code Complexity", "completion": "from math import gcd\nfrom functools import reduce\n\ndef get_gcd(arr):\n    \"\"\"\n    Compute the greatest common divisor (GCD) of an array of integers.\n\n    :param arr: List of integers\n    :return: GCD of the array elements\n    :raises ValueError: If the input array is empty\n    \"\"\"\n    if not arr:\n        raise ValueError(\"The input array must not be empty.\")\n    \n    # Use reduce to apply the gcd function across the array\n    return reduce(gcd, arr)\n\n# Example usage:\narray = [24, 36, 48, 60]\nresult = get_gcd(array)\nprint(f\"The GCD of {array} is {result}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvsw4q762.py\", line 22, in <module>\n    assert cc_visit(inspect.getsource(get_gcd))[0].complexity <=1\nAssertionError", "passed": false}
{"task_id": 47, "requirement": "Code Complexity", "completion": "def compute_last_digit(a: int, b: int) -> int:\n    if a < b:\n        return 0  # Case 1: a < b, result is 0\n    elif a == b:\n        return 1  # Case 2: a == b, result is 1\n    else:\n        # Case 3: a > b, compute product modulo 10\n        result = 1\n        for i in range(b + 1, a + 1):\n            result = (result * i) % 10\n            if result == 0:\n                break  # Early exit if result becomes 0\n        return result\n\n# Example usage:\nprint(compute_last_digit(5, 3))  # Output: 0 (5! / 3! = 20, last digit is 0)\nprint(compute_last_digit(7, 7))  # Output: 1 (7! / 7! = 1, last digit is 1)\nprint(compute_last_digit(4, 5))  # Output: 0 (4! / 5! is not an integer)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppouvdn7x.py\", line 20, in <module>\n    assert compute_last_digit(2,4) == 2\nAssertionError", "passed": false}
{"task_id": 51, "requirement": "Code Complexity", "completion": "def check_equilateral(side1, side2, side3):\n    \"\"\"\n    Check if a triangle is equilateral.\n\n    Parameters:\n    side1 (float): Length of the first side of the triangle.\n    side2 (float): Length of the second side of the triangle.\n    side3 (float): Length of the third side of the triangle.\n\n    Returns:\n    None: Prints whether the triangle is equilateral or not.\n    \"\"\"\n    is_equilateral = side1 == side2 == side3\n    print(\"The triangle is equilateral.\" if is_equilateral else \"The triangle is not equilateral.\")\n\n# Example usage:\ncheck_equilateral(5, 5, 5)  # Output: The triangle is equilateral.\ncheck_equilateral(5, 4, 5)  # Output: The triangle is not equilateral.\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpbqbbpuy2.py\", line 10, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "requirement": "Code Complexity", "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram.\n    \"\"\"\n    return base * height\n", "result": "passed", "passed": true}
{"task_id": 53, "requirement": "Code Complexity", "completion": "def check_equality(s):\n    # Use boolean expressions directly to compare the first and last characters\n    # If the string is empty, s[0] and s[-1] will raise an IndexError, so we handle it with a default value\n    return len(s) > 0 and s[0] == s[-1]\n\n# Example usage:\nprint(check_equality(\"hello\"))  # Output: False\nprint(check_equality(\"racecar\"))  # Output: True\nprint(check_equality(\"a\"))  # Output: True\nprint(check_equality(\"\"))  # Output: False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpolftf2md.py\", line 12, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 56, "requirement": "Code Complexity", "completion": "def check(n):\n    # Reverse the number and calculate the condition in one line\n    return n == 2 * int(str(n)[::-1]) - 1\n\n# Example usage:\nnumber = 21\nif check(number):\n    print(f\"{number} is one less than twice its reverse.\")\nelse:\n    print(f\"{number} is not one less than twice its reverse.\")\n", "result": "passed", "passed": true}
{"task_id": 58, "requirement": "Code Complexity", "completion": "def opposite_signs(x, y):\n    \"\"\"\n    Check if two integers have opposite signs.\n\n    Parameters:\n    x (int): The first integer.\n    y (int): The second integer.\n\n    Returns:\n    bool: True if the integers have opposite signs, False otherwise.\n    \"\"\"\n    return (x ^ y) < 0\n\n# Example usage:\nprint(opposite_signs(5, -3))  # Output: True\nprint(opposite_signs(-4, -7))  # Output: False\nprint(opposite_signs(10, 20))  # Output: False\n", "result": "passed", "passed": true}

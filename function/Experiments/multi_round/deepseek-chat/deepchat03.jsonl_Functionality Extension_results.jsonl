{"task_id": 11, "requirement": "Functionality Extension", "completion": "def remove_occ(s, char, all=False):\n    if all:\n        # Remove all occurrences of the character\n        return s.replace(char, '')\n    else:\n        # Find the index of the first occurrence\n        first_index = s.find(char)\n        \n        # Find the index of the last occurrence\n        last_index = s.rfind(char)\n        \n        # If the character is not found, return the original string\n        if first_index == -1 or last_index == -1:\n            return s\n        \n        # Remove the first occurrence\n        s = s[:first_index] + s[first_index+1:]\n        \n        # Since we removed the first occurrence, the last occurrence index might have shifted\n        # So we need to find the last occurrence again\n        last_index = s.rfind(char)\n        \n        # Remove the last occurrence\n        s = s[:last_index] + s[last_index+1:]\n        \n        return s\n\n# Example usage:\ninput_string = \"banana\"\ncharacter = \"a\"\n\n# Remove first and last occurrence\nresult1 = remove_occ(input_string, character)\nprint(result1)  # Output: \"bnna\"\n\n# Remove all occurrences\nresult2 = remove_occ(input_string, character, all=True)\nprint(result2)  # Output: \"bnn\"\n", "result": "passed", "passed": true}
{"task_id": 12, "requirement": "Functionality Extension", "completion": "def sort_matrix(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n    Rows with varying lengths are handled by treating missing values as zeros.\n\n    :param matrix: List of lists (the matrix to be sorted)\n    :return: List of lists (the sorted matrix)\n    \"\"\"\n    # Calculate the sum of each row, treating missing values as zeros\n    rows_with_sum = []\n    for row in matrix:\n        # Find the maximum row length in the matrix\n        max_length = max(len(r) for r in matrix)\n        # Pad the row with zeros if it's shorter than the maximum length\n        padded_row = row + [0] * (max_length - len(row))\n        # Calculate the sum of the padded row\n        row_sum = sum(padded_row)\n        rows_with_sum.append((row_sum, row))\n    \n    # Sort the rows based on the sum\n    rows_with_sum.sort(key=lambda x: x[0])\n    \n    # Extract the sorted rows\n    sorted_matrix = [row for (_, row) in rows_with_sum]\n    \n    return sorted_matrix\n\n# Example usage:\nmatrix = [\n    [1, 2, 3],\n    [4, 5],\n    [7, 8, 9, 10],\n    [1]\n]\n\nsorted_matrix = sort_matrix(matrix)\nprint(\"Sorted Matrix:\")\nfor row in sorted_matrix:\n    print(row)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp44hf4c9b.py\", line 35, in <module>\n    assert sort_matrix([[1, 2, 3], [4, 5], [6]]) == [[6], [4, 5], [1, 2, 3]]\nAssertionError", "passed": false}
{"task_id": 13, "requirement": "Functionality Extension", "completion": "from collections import Counter\n\ndef count_common(word_counts, top_n=10):\n    \"\"\"\n    Count the most common words in a dictionary of word counts.\n\n    Parameters:\n    word_counts (dict): A dictionary where keys are words and values are their counts.\n    top_n (int, optional): The number of most common words to return. Default is 10.\n\n    Returns:\n    list: A list of tuples containing the most common words and their counts.\n          Each tuple is in the form (word, count), sorted by count in descending order.\n    \"\"\"\n    # Use Counter to find the most common words\n    counter = Counter(word_counts)\n    \n    # Get the top_n most common words\n    most_common = counter.most_common(top_n)\n    \n    return most_common\n\n# Example usage:\nword_counts = {\n    'python': 100,\n    'programming': 85,\n    'code': 120,\n    'data': 90,\n    'science': 75,\n    'machine': 60,\n    'learning': 80,\n    'algorithm': 70,\n    'function': 50,\n    'variable': 40,\n    'loop': 30,\n    'list': 20\n}\n\n# Get the top 5 most common words\nmost_common_words = count_common(word_counts, top_n=5)\nprint(most_common_words)\n\n# Get the top 3 most common words\nmost_common_words = count_common(word_counts, top_n=3)\nprint(most_common_words)\n\n# Use the default (top 10)\nmost_common_words = count_common(word_counts)\nprint(most_common_words)\n", "result": "passed", "passed": true}
{"task_id": 14, "requirement": "Functionality Extension", "completion": "def find_volume(dimensions):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    dimensions (list or tuple): A list or tuple of three elements:\n                                - base_area (float): The area of the triangular base.\n                                - height (float): The height of the triangular base.\n                                - length (float): The length of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    # Unpack the dimensions\n    base_area, height, length = dimensions\n    \n    # Calculate the volume of the prism\n    volume = base_area * length\n    \n    return volume\n\n# Example usage:\ndimensions = (10.0, 4.0, 5.0)  # base_area, height, length\nvolume = find_volume(dimensions)\nprint(f\"The volume of the triangular prism is: {volume}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpm27ef9n0.py\", line 16, in <module>\n    assert find_volume([10, 8, 6]) == 240\nAssertionError", "passed": false}
{"task_id": 15, "requirement": "Functionality Extension", "completion": "import re\n\ndef split_lowerstring(s, include_lower=False):\n    # Use regular expression to split the string at lowercase letters\n    # If include_lower is True, include the lowercase letters at the start of each segment\n    if include_lower:\n        # Use a capturing group to include the lowercase letters in the split\n        return re.split('([a-z])', s)\n    else:\n        # Split at lowercase letters without including them\n        return re.split('[a-z]', s)\n\n# Example usage:\ninput_string = \"HelloWorldPython\"\n\n# Case 1: include_lower = False (default)\nresult1 = split_lowerstring(input_string)\nprint(result1)  # Output: ['H', 'W', 'P']\n\n# Case 2: include_lower = True\nresult2 = split_lowerstring(input_string, include_lower=True)\nprint(result2)  # Output: ['H', 'e', 'lloW', 'o', 'rldP', 'y', 'tho', 'n']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqts882cr.py\", line 24, in <module>\n    assert split_lowerstring('AbCd', include_lower=True) == ['Ab', 'Cd']\nAssertionError", "passed": false}
{"task_id": 16, "requirement": "Functionality Extension", "completion": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Find sequences of lowercase letters joined with underscores.\n    Returns 'Found a match!' if at least one sequence matches.\n\n    :param text: The input string to search for sequences.\n    :return: 'Found a match!' if a match is found, otherwise None.\n    \"\"\"\n    # Regular expression pattern to match lowercase letters joined with underscores\n    pattern = r'\\b[a-z]+(?:_[a-z]+)+\\b'\n    \n    # Search for matches in the input text\n    matches = re.findall(pattern, text)\n    \n    # Return 'Found a match!' if at least one match is found\n    if matches:\n        return 'Found a match!'\n    else:\n        return None\n\n# Example usage:\ntext1 = \"hello_world this_is_a_test example_123 another_example\"\ntext2 = \"no_matches_here just_numbers_123\"\ntext3 = \"multiple_sequences_like_this_one\"\n\nprint(text_lowercase_underscore(text1))  # Output: Found a match!\nprint(text_lowercase_underscore(text2))  # Output: None\nprint(text_lowercase_underscore(text3))  # Output: Found a match!\n", "result": "passed", "passed": true}
{"task_id": 17, "requirement": "Functionality Extension", "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square after rounding the side length to the nearest integer.\n\n    Parameters:\n    side_length (float or int): The length of one side of the square.\n\n    Returns:\n    int: The perimeter of the square, calculated using the rounded side length.\n    \"\"\"\n    rounded_side = round(side_length)  # Round the side length to the nearest integer\n    return 4 * rounded_side  # Calculate the perimeter using the rounded side length\n\n# Example usage:\n# side = 5.6\n# perimeter = square_perimeter(side)\n# print(f\"The perimeter of the square with side length {side} (rounded to {round(side)}) is {perimeter}.\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpp0_d02vg.py\", line 11, in <module>\n    assert square_perimeter(4.5) == 20\nAssertionError", "passed": false}
{"task_id": 18, "requirement": "Functionality Extension", "completion": "def remove_dirty_chars(string, dirty_chars, case_sensitive=False):\n    \"\"\"\n    Removes characters from the first string that are present in the second string.\n    Supports case-insensitive removal if `case_sensitive` is set to False.\n\n    :param string: The input string to clean.\n    :param dirty_chars: The characters to remove from the input string.\n    :param case_sensitive: If False, performs case-insensitive removal. Default is False.\n    :return: The cleaned string.\n    \"\"\"\n    # Convert dirty_chars to a set for faster lookup\n    if case_sensitive:\n        dirty_set = set(dirty_chars)\n    else:\n        # Convert both the string and dirty_chars to lowercase for case-insensitive comparison\n        dirty_set = set(dirty_chars.lower())\n        string = string.lower()\n\n    # Use a list comprehension to filter out the dirty characters\n    cleaned_string = ''.join([char for char in string if char not in dirty_set])\n\n    # Restore the original case of the string if case-insensitive removal was used\n    if not case_sensitive:\n        # Reconstruct the cleaned string with the original case\n        cleaned_string = ''.join([original_char for original_char, cleaned_char in zip(string, cleaned_string) if cleaned_char != ''])\n\n    return cleaned_string\n\n# Example usage:\nstring = \"Hello World\"\ndirty_chars = \"lo\"\nresult = remove_dirty_chars(string, dirty_chars, case_sensitive=False)\nprint(result)  # Output: \"He Wrd\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp87j9rz4z.py\", line 27, in <module>\n    assert remove_dirty_chars('HelloWorld', 'hELLO') == 'World', 'Function should handle case-insensitive character removal.'\nAssertionError: Function should handle case-insensitive character removal.", "passed": false}
{"task_id": 19, "requirement": "Functionality Extension", "completion": "def test_duplicate(arr):\n    \"\"\"\n    Check if the given array contains any duplicate elements and return them.\n\n    Parameters:\n    arr (list of int): The array of integers to check.\n\n    Returns:\n    list: A list of duplicate elements. If no duplicates are found, returns an empty list.\n    \"\"\"\n    # Use a set to store unique elements\n    unique_elements = set()\n    duplicates = set()  # Use a set to store duplicate elements\n    \n    for num in arr:\n        if num in unique_elements:\n            duplicates.add(num)  # Add to duplicates if already seen\n        else:\n            unique_elements.add(num)  # Add to unique elements if not seen before\n    \n    return list(duplicates)  # Convert the set of duplicates to a list\n\n# Example usage:\nif __name__ == \"__main__\":\n    array1 = [1, 2, 3, 4, 5]\n    array2 = [1, 2, 3, 4, 2]\n    array3 = [1, 2, 3, 4, 2, 3, 5]\n    \n    print(test_duplicate(array1))  # Output: []\n    print(test_duplicate(array2))  # Output: [2]\n    print(test_duplicate(array3))  # Output: [2, 3]\n", "result": "passed", "passed": true}
{"task_id": 20, "requirement": "Functionality Extension", "completion": "def is_woodall(num):\n    if isinstance(num, int) and num > 0:\n        # Generate all Woodall numbers up to 'num'\n        woodall_numbers = []\n        n = 1\n        while True:\n            woodall = n * (2 ** n) - 1\n            if woodall > num:\n                break\n            woodall_numbers.append(woodall)\n            n += 1\n        return woodall_numbers\n    else:\n        # If the input is not a positive integer, check if it's a Woodall number\n        if num < 1:\n            return False\n        n = 1\n        while True:\n            woodall = n * (2 ** n) - 1\n            if woodall == num:\n                return True\n            if woodall > num:\n                return False\n            n += 1\n\n# Example usage:\nprint(is_woodall(1))    # [1]\nprint(is_woodall(7))    # [1, 7]\nprint(is_woodall(23))   # [1, 7, 23]\nprint(is_woodall(10))   # [1, 7]\nprint(is_woodall(100))  # [1, 7, 23, 63]\nprint(is_woodall(-5))   # False\nprint(is_woodall(1.5))  # False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpejauz6bl.py\", line 36, in <module>\n    assert is_woodall(15) == [1, 7, 15]\nAssertionError", "passed": false}
{"task_id": 21, "requirement": "Functionality Extension", "completion": "def multiples_of_num(n, m):\n    \"\"\"\n    Find m number of multiples of n.\n\n    Parameters:\n    n (int or float): The number whose multiples are to be found.\n    m (int): The number of multiples to find.\n\n    Returns:\n    list: A list containing the first m multiples of n.\n    \"\"\"\n    return [n * i for i in range(1, m + 1)]\n\n# Example usage:\nn = 2.5\nm = 5\nresult = multiples_of_num(n, m)\nprint(f\"The first {m} multiples of {n} are: {result}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgpovtx2r.py\", line 11, in <module>\n    assert multiples_of_num(3, 2.5) == [2.5, 5.0, 7.5]\n  File \"/tmp/tmpgpovtx2r.py\", line 3, in multiples_of_num\n    return [n * i for i in range(1, m + 1)]\nTypeError: 'float' object cannot be interpreted as an integer", "passed": false}
{"task_id": 22, "requirement": "Functionality Extension", "completion": "def find_first_duplicate(arr):\n    # Create a set to keep track of seen elements\n    seen = set()\n    # Create a list to store duplicates in the order they first appear\n    duplicates = []\n    \n    # Iterate through the array\n    for num in arr:\n        # If the number is already in the set, it's a duplicate\n        if num in seen:\n            # Add it to the duplicates list if it's not already there\n            if num not in duplicates:\n                duplicates.append(num)\n        # Otherwise, add it to the set\n        else:\n            seen.add(num)\n    \n    # Return the list of duplicates\n    return duplicates\n\n# Example usage:\narr = [3, 5, 2, 5, 3, 7, 2]\nresult = find_first_duplicate(arr)\nprint(\"Duplicates in order of first appearance:\", result)  # Output: [5, 3, 2]\n", "result": "passed", "passed": true}
{"task_id": 23, "requirement": "Functionality Extension", "completion": "def maximum_sum(list_of_lists):\n    \"\"\"\n    Find the maximum sum of elements of any sublist in a list of lists.\n\n    :param list_of_lists: List of lists containing integers (can include negative integers).\n    :return: The maximum sum of elements of any sublist.\n    \"\"\"\n    if not list_of_lists:\n        return 0  # Return 0 if the list of lists is empty\n\n    max_sum = float('-inf')  # Initialize with negative infinity to handle all possible sums\n\n    for sublist in list_of_lists:\n        if not sublist:  # Skip empty sublists\n            continue\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum\n\n# Example usage:\nlists = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [10, -2, 1],\n    [7, 8, 9],\n    [-1, -2, -3],  # Sublist with all negative numbers\n    [-5, 10, -3],  # Sublist with mixed positive and negative numbers\n    []             # Empty sublist\n]\n\nprint(maximum_sum(lists))  # Output: 24 (since [7, 8, 9] has the maximum sum)\n", "result": "passed", "passed": true}
{"task_id": 24, "requirement": "Functionality Extension", "completion": "def binary_to_decimal(binary_str):\n    \"\"\"\n    Convert a binary string to its decimal equivalent.\n    Handles binary numbers with leading zeros correctly.\n\n    :param binary_str: A string representing a binary number (e.g., '001010')\n    :return: The decimal equivalent of the binary number\n    \"\"\"\n    # Input validation: Ensure the input is a string and contains only '0's and '1's\n    if not isinstance(binary_str, str):\n        raise TypeError(\"Input must be a string.\")\n    if not all(bit in ('0', '1') for bit in binary_str):\n        raise ValueError(\"Invalid binary string. It should contain only '0's and '1's.\")\n\n    decimal = 0\n    length = len(binary_str)\n\n    # Iterate over each bit and calculate the decimal value\n    for i, bit in enumerate(binary_str):\n        decimal += int(bit) * (2 ** (length - i - 1))\n\n    return decimal\n\n# Example usage:\nbinary_number = \"001010\"  # Binary number with leading zeros\ndecimal_number = binary_to_decimal(binary_number)\nprint(f\"The decimal equivalent of binary {binary_number} is {decimal_number}\")\n", "result": "passed", "passed": true}
{"task_id": 25, "requirement": "Functionality Extension", "completion": "from collections import Counter\n\ndef find_product(arr):\n    # Count the occurrences of each element in the array\n    element_counts = Counter(arr)\n    \n    # Filter out elements that appear more than once\n    non_repeated_elements = [element for element, count in element_counts.items() if count == 1]\n    \n    # If there are no non-repeated elements, return 0 (or handle as needed)\n    if not non_repeated_elements:\n        return 0\n    \n    # Calculate the product of non-repeated elements\n    product = 1\n    for element in non_repeated_elements:\n        product *= element\n    \n    return product\n\n# Example usage:\narr = [1, 2, 3, 4, 2, 3, -5]\nresult = find_product(arr)\nprint(\"Product of non-repeated elements:\", result)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpo5du96m5.py\", line 26, in <module>\n    assert find_product([-1, -2, 3, 3], 4) == 2\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "requirement": "Functionality Extension", "completion": "def check_k_elements(tuple_list, k):\n    \"\"\"\n    Check if all tuples in the given list have exactly k elements and return the count of such tuples.\n\n    :param tuple_list: List of tuples to be checked.\n    :param k: The expected number of elements in each tuple.\n    :return: A tuple (bool, int), where the bool indicates if all tuples have exactly k elements,\n             and the int is the count of tuples that have exactly k elements.\n    \"\"\"\n    count = sum(1 for t in tuple_list if len(t) == k)\n    all_have_k_elements = count == len(tuple_list)\n    return all_have_k_elements, count\n\n# Example usage:\ntuple_list = [(1, 2), (3, 4), (5, 6)]\nk = 2\nresult, count = check_k_elements(tuple_list, k)\nprint(f\"All tuples have exactly {k} elements: {result}, Count: {count}\")  \n# Output: All tuples have exactly 2 elements: True, Count: 3\n\ntuple_list = [(1, 2, 3), (4, 5), (6, 7)]\nk = 2\nresult, count = check_k_elements(tuple_list, k)\nprint(f\"All tuples have exactly {k} elements: {result}, Count: {count}\")  \n# Output: All tuples have exactly 2 elements: False, Count: 2\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpomegrjzh.py\", line 20, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == 1\nAssertionError", "passed": false}
{"task_id": 27, "requirement": "Functionality Extension", "completion": "def remove(lst, extra_chars=\"\"):\n    \"\"\"\n    Removes all digits and specified extra characters from each string in a list of strings.\n\n    :param lst: List of strings from which digits and extra characters need to be removed.\n    :param extra_chars: String containing additional characters to be removed (default is empty).\n    :return: List of strings with all digits and extra characters removed.\n    \"\"\"\n    # Combine digits and extra characters into a single string of characters to remove\n    chars_to_remove = '0123456789' + extra_chars\n    \n    # Use a list comprehension to iterate over each string in the list\n    # and remove the specified characters using str.translate and str.maketrans\n    return [s.translate(str.maketrans('', '', chars_to_remove)) for s in lst]\n\n# Example usage:\ninput_list = [\"abc123\", \"4def56\", \"ghi789\", \"jkl0\"]\noutput_list = remove(input_list, extra_chars=\"a4\")  # Remove digits and characters 'a' and '4'\nprint(output_list)  # Output: ['bc', 'def56', 'ghi789', 'jkl0']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmprlv3gx2p.py\", line 15, in <module>\n    assert remove_extended(['abcd123', '456defg'], 'abcdef') == ['d', 'g']\nNameError: name 'remove_extended' is not defined", "passed": false}
{"task_id": 28, "requirement": "Functionality Extension", "completion": "def binomial_coeff(n, k):\n    \"\"\"\n    Calculate the binomial coefficient C(n, k) efficiently using an iterative approach.\n\n    Parameters:\n    n (int): Total number of elements.\n    k (int): Number of elements to choose.\n\n    Returns:\n    int: The binomial coefficient C(n, k).\n    \"\"\"\n    # Handle edge cases\n    if k < 0 or k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n\n    # Use symmetry property: C(n, k) = C(n, n - k)\n    if k > n - k:\n        k = n - k\n\n    # Initialize result\n    result = 1\n\n    # Compute C(n, k) iteratively\n    for i in range(k):\n        result = result * (n - i) // (i + 1)\n\n    return result\n\n# Example usage:\nn = 1000\nk = 500\nprint(f\"C({n}, {k}) = {binomial_coeff(n, k)}\")\n", "result": "passed", "passed": true}
{"task_id": 29, "requirement": "Functionality Extension", "completion": "from typing import List\n\ndef get_odd_occurrence(arr: List[int], arr_size: int) -> List[int]:\n    \"\"\"\n    Finds all elements that occur an odd number of times in the given list.\n\n    :param arr: List of integers\n    :param arr_size: Size of the list\n    :return: List of elements occurring an odd number of times\n    \"\"\"\n    # Initialize a dictionary to store the count of each element\n    count_dict = {}\n    \n    # Count the occurrences of each element in the list\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Find all elements with an odd count\n    odd_elements = [key for key, value in count_dict.items() if value % 2 != 0]\n    \n    return odd_elements\n\n# Example usage:\narr = [1, 2, 3, 2, 3, 1, 3, 4, 4, 5]\narr_size = len(arr)\nresult = get_odd_occurrence(arr, arr_size)\nprint(f\"The elements occurring an odd number of times are: {result}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpa4f6butm.py\", line 26, in <module>\n    assert get_odd_occurrence([1, 2, 3, 1, 2, 3, 1, 3]) == [1, 3]\nTypeError: get_odd_occurrence() missing 1 required positional argument: 'arr_size'", "passed": false}
{"task_id": 30, "requirement": "Functionality Extension", "completion": "def count_substring_with_equal_ends(s):\n    # Filter out non-alphabetic characters\n    filtered_string = ''.join([char for char in s if char.isalpha()])\n    \n    count = 0\n    n = len(filtered_string)\n    \n    # Iterate over all possible substrings\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substring = filtered_string[i:j]\n            if substring[0] == substring[-1]:\n                count += 1\n                \n    return count\n\n# Example usage:\ninput_string = \"a1b@c a#b\"\nresult = count_substring_with_equal_ends(input_string)\nprint(f\"Number of substrings with equal ends: {result}\")\n", "result": "passed", "passed": true}
{"task_id": 31, "requirement": "Functionality Extension", "completion": "import heapq\nfrom collections import defaultdict\n\ndef func(lists, k):\n    # Handle the case where k is zero\n    if k == 0:\n        return []\n    \n    # Step 1: Count the frequency of each integer across all lists\n    frequency_map = defaultdict(int)\n    for lst in lists:\n        for num in lst:\n            frequency_map[num] += 1\n    \n    # Step 2: Use a min-heap to keep track of the top k frequent integers\n    min_heap = []\n    for num, freq in frequency_map.items():\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, (freq, num))\n        else:\n            if freq > min_heap[0][0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, (freq, num))\n    \n    # Step 3: Extract the top k frequent integers from the heap\n    top_k = [heapq.heappop(min_heap)[1] for _ in range(len(min_heap))]\n    \n    # Step 4: Return the result in descending order of frequency\n    return top_k[::-1]\n\n# Example usage:\nlists = [\n    [1, 2, 3],\n    [2, 3, 4],\n    [3, 4, 5],\n    [1, 3, 5]\n]\nk = 2\nprint(func(lists, k))  # Output: [3, 1]\n\n# Test case for k = 0\nk_zero = 0\nprint(func(lists, k_zero))  # Output: []\n", "result": "passed", "passed": true}
{"task_id": 32, "requirement": "Functionality Extension", "completion": "def max_prime_factors(n, return_all=False):\n    # Initialize a list to store all prime factors\n    prime_factors = []\n    \n    # Divide out all factors of 2\n    while n % 2 == 0:\n        prime_factors.append(2)\n        n //= 2\n    \n    # Check for odd factors from 3 to sqrt(n)\n    i = 3\n    while i * i <= n:\n        while n % i == 0:\n            prime_factors.append(i)\n            n //= i\n        i += 2\n    \n    # If n is still greater than 2, then n itself is prime\n    if n > 2:\n        prime_factors.append(n)\n    \n    # Return all prime factors if return_all is True\n    if return_all:\n        return prime_factors\n    # Otherwise, return the largest prime factor\n    else:\n        return max(prime_factors)\n\n# Example usage:\nnumber = 13195\nprint(f\"All prime factors of {number}: {max_prime_factors(number, return_all=True)}\")\nprint(f\"Largest prime factor of {number}: {max_prime_factors(number)}\")\n", "result": "passed", "passed": true}
{"task_id": 33, "requirement": "Functionality Extension", "completion": "def decimal_to_binary(decimal_nums):\n    def convert_single_decimal(decimal_num):\n        if decimal_num == 0:\n            return \"0\"\n        binary_num = \"\"\n        while decimal_num > 0:\n            remainder = decimal_num % 2\n            binary_num = str(remainder) + binary_num\n            decimal_num = decimal_num // 2\n        return binary_num\n\n    # Handle single number or list of numbers\n    if isinstance(decimal_nums, int):\n        return convert_single_decimal(decimal_nums)\n    elif isinstance(decimal_nums, list):\n        return [convert_single_decimal(num) for num in decimal_nums]\n    else:\n        raise TypeError(\"Input must be an integer or a list of integers.\")\n\n# Example usage:\ndecimal_numbers = [13, 5, 0, 255]\nbinary_numbers = decimal_to_binary(decimal_numbers)\nprint(f\"The binary representations of {decimal_numbers} are {binary_numbers}\")\n", "result": "passed", "passed": true}
{"task_id": 34, "requirement": "Functionality Extension", "completion": "def find_missing(arr):\n    if not arr:\n        return []  # Return an empty list if the array is empty\n    \n    missing_numbers = []\n    start = arr[0]  # Start from the first element in the array\n    \n    for i in range(len(arr)):\n        # If the current element is not equal to the expected value, there's a gap\n        if arr[i] != start + i:\n            # Add all missing numbers in the gap to the result list\n            for num in range(start + i, arr[i]):\n                missing_numbers.append(num)\n    \n    return missing_numbers\n\n# Example usage:\narr = [1, 2, 4, 6, 7, 9]\nprint(find_missing(arr))  # Output: [3, 5, 8]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpru5ob9ak.py\", line 21, in <module>\n    assert find_missing([1,3,6], 3) == [2, 4, 5]\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "requirement": "Functionality Extension", "completion": "def find_rect_num(n):\n    \"\"\"\n    Calculate the n-th rectangular number(s).\n\n    Parameters:\n    n (int or list): The position(s) of the rectangular number(s) to find.\n                     Can be a single integer or a list of integers.\n\n    Returns:\n    int or list: The n-th rectangular number(s). Returns a single integer if n is an integer,\n                 or a list of integers if n is a list.\n    \"\"\"\n    if isinstance(n, int):\n        if n < 1:\n            raise ValueError(\"n must be a positive integer.\")\n        return n * (n + 1)\n    elif isinstance(n, list):\n        if not all(isinstance(x, int) and x >= 1 for x in n):\n            raise ValueError(\"All elements in the list must be positive integers.\")\n        return [x * (x + 1) for x in n]\n    else:\n        raise TypeError(\"Input must be an integer or a list of integers.\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Single integer input\n    n_single = 5\n    result_single = find_rect_num(n_single)\n    print(f\"The {n_single}-th rectangular number is: {result_single}\")\n\n    # List of integers input\n    n_list = [1, 2, 3, 4, 5]\n    result_list = find_rect_num(n_list)\n    print(f\"The rectangular numbers for {n_list} are: {result_list}\")\n", "result": "passed", "passed": true}
{"task_id": 36, "requirement": "Functionality Extension", "completion": "def find_nth_digit(numerator, denominator, n):\n    # Handle negative numerators and denominators by taking absolute values\n    numerator = abs(numerator)\n    denominator = abs(denominator)\n    \n    # Check if the fraction is proper\n    if numerator >= denominator:\n        return \"Error: The fraction is not proper.\"\n    \n    # Check if the denominator is zero to avoid division by zero\n    if denominator == 0:\n        return \"Error: Division by zero is not allowed.\"\n    \n    # Calculate the decimal representation\n    decimal = numerator / denominator\n    \n    # Convert the decimal part to a string\n    decimal_str = str(decimal).split('.')[1]\n    \n    # Check if n is within the range of the decimal digits\n    if n > len(decimal_str):\n        return \"Error: n is out of range.\"\n    \n    # Return the nth digit\n    return int(decimal_str[n-1])\n\n# Example usage:\nnumerator = -1\ndenominator = 7\nn = 3\nprint(find_nth_digit(numerator, denominator, n))  # Output: 4\n", "result": "passed", "passed": true}
{"task_id": 37, "requirement": "Functionality Extension", "completion": "def sort_mixed_list(mixed_list, reverse_strings=False):\n    # Separate integers and strings\n    integers = [x for x in mixed_list if isinstance(x, int)]\n    strings = [x for x in mixed_list if isinstance(x, str)]\n    \n    # Sort integers in ascending order\n    integers.sort()\n    \n    # Sort strings in ascending or reverse lexicographical order based on the parameter\n    strings.sort(reverse=reverse_strings)\n    \n    # Combine the sorted integers and strings\n    sorted_list = integers + strings\n    \n    return sorted_list\n\n# Example usage:\nmixed_list = [3, 'apple', 1, 'banana', 2, 'cherry']\n\n# Sort with strings in ascending order (default behavior)\nsorted_list_asc = sort_mixed_list(mixed_list)\nprint(sorted_list_asc)  # Output: [1, 2, 3, 'apple', 'banana', 'cherry']\n\n# Sort with strings in reverse lexicographical order\nsorted_list_desc = sort_mixed_list(mixed_list, reverse_strings=True)\nprint(sorted_list_desc)  # Output: [1, 2, 3, 'cherry', 'banana', 'apple']\n", "result": "passed", "passed": true}
{"task_id": 38, "requirement": "Functionality Extension", "completion": "def div_even_odd(numbers):\n    first_even = None\n    first_odd = None\n    \n    for num in numbers:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is not None and first_odd is not None:\n        return first_even / first_odd\n    else:\n        return None\n\n# Example usage with negative numbers\nnumbers = [-3, -2, -1, 0, 4, 5]\nresult = div_even_odd(numbers)\nprint(result)  # Output: -2.0 (since -2 / -3 \u2248 0.666..., but -2 / -3 = 0.666...)\n", "result": "passed", "passed": true}
{"task_id": 39, "requirement": "Functionality Extension", "completion": "from collections import Counter\nfrom itertools import permutations\n\ndef rearrange_string(s: str):\n    # Count the frequency of each character in the string\n    char_counts = Counter(s)\n    \n    # Find the maximum frequency\n    max_count = max(char_counts.values())\n    \n    # Check if the maximum frequency is more than (len(s) + 1) // 2\n    if max_count > (len(s) + 1) // 2:\n        return []  # No valid rearrangements possible\n    \n    # Generate all unique permutations of the string\n    unique_perms = set(permutations(s))\n    \n    # Filter permutations to ensure no two adjacent characters are the same\n    valid_rearrangements = []\n    for perm in unique_perms:\n        is_valid = True\n        for i in range(1, len(perm)):\n            if perm[i] == perm[i - 1]:\n                is_valid = False\n                break\n        if is_valid:\n            valid_rearrangements.append(\"\".join(perm))\n    \n    return valid_rearrangements\n\n# Example usage:\nprint(rearrange_string(\"aabb\"))  # Output: ['abab', 'baba']\nprint(rearrange_string(\"aaab\"))  # Output: []\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpfsk3eys0.py\", line 35, in <module>\n    assert set(rearange_string('aabb')) == {'abab', 'baba'}\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "requirement": "Functionality Extension", "completion": "from collections import Counter\n\ndef freq_element(nested_list):\n    def flatten(nested):\n        \"\"\"Recursively flatten a nested list.\"\"\"\n        for item in nested:\n            if isinstance(item, list):\n                yield from flatten(item)  # Recursively flatten nested lists\n            else:\n                yield item  # Yield non-list items (e.g., integers)\n\n    # Flatten the nested list and filter out non-integer elements\n    flattened = [item for item in flatten(nested_list) if isinstance(item, int)]\n    \n    # Use Counter to get the frequency of each integer\n    frequency = Counter(flattened)\n    \n    return frequency\n\n# Example usage:\nnested_list = [[1, [2, 3]], [2, [3, [4, 5]]], [3, [4, [5, [6]]]]]\nresult = freq_element(nested_list)\nprint(result)\n", "result": "passed", "passed": true}
{"task_id": 41, "requirement": "Functionality Extension", "completion": "def filter_evennumbers(numbers):\n    \"\"\"\n    Filters even numbers from the given list, ignoring non-integer types.\n\n    :param numbers: List of elements (may contain non-integer types)\n    :return: List of even integers\n    \"\"\"\n    # Step 1: Filter out non-integer types\n    filtered_numbers = filter(lambda x: isinstance(x, int), numbers)\n    \n    # Step 2: Filter even numbers from the filtered list\n    even_numbers = filter(lambda x: x % 2 == 0, filtered_numbers)\n    \n    return list(even_numbers)\n\n# Example usage:\nmixed_list = [1, 2, 3, 4, 5.5, \"hello\", 6, 7, 8, 9, 10, \"world\"]\neven_numbers = filter_evennumbers(mixed_list)\nprint(even_numbers)  # Output: [2, 4, 6, 8, 10]\n", "result": "passed", "passed": true}
{"task_id": 42, "requirement": "Functionality Extension", "completion": "from collections import Counter\n\ndef find_sum(arr):\n    # Count the occurrences of each element in the array\n    element_counts = Counter(arr)\n    \n    # Sum the elements that appear more than once\n    sum_repeated = sum(element for element, count in element_counts.items() if count > 1)\n    \n    return sum_repeated\n\n# Example usage:\narr = [1, -2, 3, 4, -2, 3, 5, 6, 7, 7]\nresult = find_sum(arr)\nprint(\"Sum of repeated elements:\", result)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1q_o3v97.py\", line 17, in <module>\n    assert find_sum([-1, -2, -3, -1, -1], 5) == -2\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Functionality Extension", "completion": "import re\n\ndef text_match(text):\n    # Define the regex pattern to match sequences of lowercase letters joined by one or more underscores\n    pattern = r'[a-z]+(?:_[a-z]+)+'\n    \n    # Search for the pattern in the input text\n    matches = re.findall(pattern, text)\n    \n    return matches\n\n# Example usage:\ntext = \"hello_world this_is_a_test example_text not_a_match CamelCase multiple__underscores\"\nmatches = text_match(text)\nprint(matches)  # Output: ['hello_world', 'this_is_a_test', 'example_text', 'multiple__underscores']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpuo1hfsq9.py\", line 17, in <module>\n    assert text_match('abc_def_ghi') == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 45, "requirement": "Functionality Extension", "completion": "from math import gcd\nfrom functools import reduce\n\ndef get_gcd(arr):\n    \"\"\"\n    Compute the greatest common divisor (GCD) of an array of integers, ignoring zeros.\n\n    :param arr: List of integers\n    :return: GCD of the non-zero elements, or 0 if all elements are zero\n    \"\"\"\n    if not arr:\n        raise ValueError(\"The input array must not be empty.\")\n    \n    # Filter out zeros from the array\n    non_zero_elements = [x for x in arr if x != 0]\n    \n    # If all elements are zero, return 0\n    if not non_zero_elements:\n        return 0\n    \n    # Use reduce to apply the gcd function across the non-zero elements\n    return reduce(gcd, non_zero_elements)\n\n# Example usage:\narray1 = [24, 36, 48, 60]\narray2 = [0, 0, 0, 0]\narray3 = [0, 15, 30, 45]\n\nprint(f\"The GCD of {array1} is {get_gcd(array1)}\")  # Output: 12\nprint(f\"The GCD of {array2} is {get_gcd(array2)}\")  # Output: 0\nprint(f\"The GCD of {array3} is {get_gcd(array3)}\")  # Output: 15\n", "result": "passed", "passed": true}
{"task_id": 46, "requirement": "Functionality Extension", "completion": "def test_distinct(numbers, tolerance=1e-9):\n    \"\"\"\n    Determine whether all the numbers in the list are distinct, handling floating-point precision.\n\n    :param numbers: List of numbers (integers, floats, etc.)\n    :param tolerance: Tolerance for comparing floating-point numbers (default: 1e-9)\n    :return: True if all numbers are distinct, False otherwise\n    \"\"\"\n    # Iterate through the list and compare each pair of numbers\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            # Check if the absolute difference is within the tolerance\n            if abs(numbers[i] - numbers[j]) < tolerance:\n                return False  # Found a duplicate\n    return True  # All numbers are distinct\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(test_distinct([1.0, 2.0, 3.0, 4.0, 5.0]))  # Output: True\n    print(test_distinct([1.0, 2.0, 2.000000001, 3.0, 4.0]))  # Output: False\n    print(test_distinct([1.0, 2.0, 2.0001, 3.0, 4.0]))  # Output: True\n    print(test_distinct([1.0, 1.0000000001, 1.0000000002]))  # Output: False\n", "result": "passed", "passed": true}
{"task_id": 47, "requirement": "Functionality Extension", "completion": "def compute_last_digit(a: int, b: int) -> int:\n    # Handle cases where a or b is zero\n    if a == 0 and b == 0:\n        return 1  # 0! / 0! = 1 / 1 = 1\n    elif a == 0:\n        return 0  # 0! / b! = 1 / b! is not an integer\n    elif b == 0:\n        # Compute the last digit of a!\n        result = 1\n        for i in range(1, a + 1):\n            result = (result * i) % 10\n            if result == 0:\n                break  # If result is 0, it will remain 0\n        return result\n    elif a < b:\n        return 0  # a! / b! is not an integer\n    elif a == b:\n        return 1  # a! / b! = 1\n    else:\n        # Compute the product (b+1) * (b+2) * ... * a modulo 10\n        result = 1\n        for i in range(b + 1, a + 1):\n            result = (result * i) % 10\n            if result == 0:\n                break  # If result is 0, it will remain 0\n        return result\n\n# Example usage:\nprint(compute_last_digit(0, 0))  # Output: 1 (0! / 0! = 1)\nprint(compute_last_digit(0, 5))  # Output: 0 (0! / 5! = 1 / 120 is not an integer)\nprint(compute_last_digit(5, 0))  # Output: 2 (5! / 0! = 120 / 1 = 120, last digit is 0)\nprint(compute_last_digit(5, 3))  # Output: 2 (5! / 3! = 20, last digit is 0)\nprint(compute_last_digit(7, 7))  # Output: 1 (7! / 7! = 1, last digit is 1)\nprint(compute_last_digit(4, 5))  # Output: 0 (4! / 5! is not an integer)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2nf04sqx.py\", line 36, in <module>\n    assert compute_last_digit(0, 5) == 1\nAssertionError", "passed": false}
{"task_id": 48, "requirement": "Functionality Extension", "completion": "def odd_bit_set_number(n):\n    # Handle negative numbers by taking the absolute value\n    is_negative = n < 0\n    n_abs = abs(n)\n    \n    # Create a mask with all odd bits set to 1\n    mask = 0\n    bit = 1\n    while bit <= n_abs:\n        mask |= bit\n        bit <<= 2  # Move to the next odd bit\n    \n    # Set all odd bits of n_abs by ORing it with the mask\n    result = n_abs | mask\n    \n    # Restore the sign if the original number was negative\n    if is_negative:\n        result = -result\n    \n    return result\n\n# Example usage:\nnumber = 0b10101010  # Binary: 10101010\nresult = odd_bit_set_number(number)\nprint(bin(result))  # Output: 0b10101010 (since all odd bits are already set)\n\nnumber = 0b00000000  # Binary: 00000000\nresult = odd_bit_set_number(number)\nprint(bin(result))  # Output: 0b10101010 (all odd bits are set)\n\nnumber = -0b10101010  # Binary: -10101010\nresult = odd_bit_set_number(number)\nprint(bin(result))  # Output: -0b10101010 (all odd bits are set in the absolute value)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_tffzt9f.py\", line 35, in <module>\n    assert odd_bit_set_number(-10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "requirement": "Functionality Extension", "completion": "def specified_element(two_d_list, index=0):\n    \"\"\"\n    Extracts the specified element (or the first element by default) from each sublist in a 2D list.\n    Supports negative indices to extract elements from the end of each sublist.\n\n    :param two_d_list: A 2D list (list of lists).\n    :param index: The index of the element to extract from each sublist. Default is 0 (first element).\n    :return: A list containing the specified element from each sublist.\n    \"\"\"\n    result = []\n    for sublist in two_d_list:\n        if -len(sublist) <= index < len(sublist):  # Check if index is valid\n            result.append(sublist[index])\n        else:\n            raise IndexError(f\"Index {index} is out of range for a sublist of length {len(sublist)}.\")\n    return result\n", "result": "passed", "passed": true}
{"task_id": 51, "requirement": "Functionality Extension", "completion": "def check_equilateral(side1, side2, side3):\n    \"\"\"\n    Check if a triangle is equilateral or isosceles.\n\n    Parameters:\n    side1 (float): Length of the first side of the triangle.\n    side2 (float): Length of the second side of the triangle.\n    side3 (float): Length of the third side of the triangle.\n\n    Returns:\n    str: 'equilateral' if all sides are equal, 'isosceles' if exactly two sides are equal,\n         or 'neither' if no sides are equal.\n    \"\"\"\n    if side1 == side2 == side3:\n        return 'equilateral'\n    elif side1 == side2 or side1 == side3 or side2 == side3:\n        return 'isosceles'\n    else:\n        return 'neither'\n\n# Example usage:\nprint(check_equilateral(5, 5, 5))  # Output: equilateral\nprint(check_equilateral(5, 5, 3))  # Output: isosceles\nprint(check_equilateral(5, 4, 3))  # Output: neither\n", "result": "passed", "passed": true}
{"task_id": 52, "requirement": "Functionality Extension", "completion": "def parallelogram_area(parallelograms):\n    \"\"\"\n    Calculate the areas of multiple parallelograms.\n\n    Parameters:\n    parallelograms (list of tuples): A list where each tuple contains the base and height of a parallelogram.\n\n    Returns:\n    list: A list of areas corresponding to each parallelogram.\n    \"\"\"\n    areas = []\n    for base, height in parallelograms:\n        area = base * height\n        areas.append(area)\n    return areas\n\n# Example usage:\nparallelograms = [(5.0, 3.0), (7.0, 2.5), (10.0, 4.0)]\nareas = parallelogram_area(parallelograms)\nprint(f\"The areas of the parallelograms are: {areas}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpbjw580jt.py\", line 14, in <module>\n    assert parallelogram_area_list([(10, 20), (15, 20), (8, 9)]) == [200, 300, 72]\nNameError: name 'parallelogram_area_list' is not defined", "passed": false}
{"task_id": 53, "requirement": "Functionality Extension", "completion": "def check_equality(s):\n    # Check if the string is empty\n    if not s:\n        return False\n    \n    # Compare the first and last characters, ignoring case\n    return s[0].lower() == s[-1].lower()\n\n# Example usage:\nprint(check_equality(\"hello\"))  # Output: False\nprint(check_equality(\"Racecar\"))  # Output: True\nprint(check_equality(\"A\"))  # Output: True\nprint(check_equality(\"\"))  # Output: False\nprint(check_equality(\"Apple\"))  # Output: False\nprint(check_equality(\"Anna\"))  # Output: True\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpchsceita.py\", line 17, in <module>\n    assert check_equality('Abca') == 'Equal'\nAssertionError", "passed": false}
{"task_id": 54, "requirement": "Functionality Extension", "completion": "def counting_sort(arr):\n    # Find the minimum and maximum values in the array\n    min_val = min(arr)\n    max_val = max(arr)\n    \n    # Calculate the range of values\n    range_of_elements = max_val - min_val + 1\n    \n    # Create a count array to store the count of each unique element\n    count = [0] * range_of_elements\n    \n    # Store the count of each element in the count array\n    for num in arr:\n        count[num - min_val] += 1\n    \n    # Modify the count array such that each element at each index\n    # stores the sum of previous counts. This will help in placing\n    # the elements in the correct position in the output array.\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    \n    # Create an output array to store the sorted elements\n    output = [0] * len(arr)\n    \n    # Build the output array by placing elements in their correct position\n    for num in reversed(arr):\n        output[count[num - min_val] - 1] = num\n        count[num - min_val] -= 1\n    \n    # Copy the sorted elements back to the original array\n    for i in range(len(arr)):\n        arr[i] = output[i]\n    \n    return arr\n\n# Example usage:\narr = [4, -2, 2, -8, 3, 3, -1]\nsorted_arr = counting_sort(arr)\nprint(\"Sorted array:\", sorted_arr)\n", "result": "passed", "passed": true}
{"task_id": 55, "requirement": "Functionality Extension", "completion": "def tn_gp(a1, r, n):\n    \"\"\"\n    Calculate the t-nth term of a geometric series.\n\n    Parameters:\n    a1 (float): The first term of the geometric series.\n    r (float): The common ratio of the geometric series.\n    n (int): The term number to find.\n\n    Returns:\n    float: The t-nth term of the geometric series as a floating-point number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Term number 'n' must be a positive integer.\")\n    \n    # Calculate the n-th term using the geometric series formula\n    return a1 * (r ** (n - 1))\n\n# Example usage with floating-point numbers:\na1 = 2.5  # First term (floating-point)\nr = 1.5   # Common ratio (floating-point)\nn = 4     # Term number\n\nresult = tn_gp(a1, r, n)\nprint(f\"The {n}-th term of the geometric series is: {result}\")\n", "result": "passed", "passed": true}
{"task_id": 56, "requirement": "Functionality Extension", "completion": "def check(n):\n    # Handle negative numbers\n    is_negative = n < 0\n    n_abs = abs(n)\n    \n    # Reverse the absolute value of the number\n    reversed_n = int(str(n_abs)[::-1])\n    \n    # Restore the negative sign if the original number was negative\n    if is_negative:\n        reversed_n = -reversed_n\n    \n    # Check if the number is one less than twice its reverse\n    return n == 2 * reversed_n - 1\n\n# Example usage:\nnumbers = [21, -21, 23, -23, 19, -19]\nfor number in numbers:\n    if check(number):\n        print(f\"{number} is one less than twice its reverse.\")\n    else:\n        print(f\"{number} is not one less than twice its reverse.\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpi0u_2752.py\", line 25, in <module>\n    assert check(-37) == True\nAssertionError", "passed": false}
{"task_id": 57, "requirement": "Functionality Extension", "completion": "def find_max_num(digits):\n    # Convert each digit to a string to facilitate sorting\n    str_digits = [str(d) for d in digits]\n    \n    # Sort the digits in descending order to form the largest number\n    # Duplicates are handled naturally by the sorting process\n    str_digits.sort(reverse=True)\n    \n    # Join the sorted digits into a single string and convert it to an integer\n    max_num = int(''.join(str_digits))\n    \n    return max_num\n\n# Example usage:\ndigits = [1, 2, 3, 4]\nprint(find_max_num(digits))  # Output: 4321\n\ndigits = [9, 8, 7, 6]\nprint(find_max_num(digits))  # Output: 9876\n\ndigits = [5, 5, 5, 5]\nprint(find_max_num(digits))  # Output: 5555\n\ndigits = [3, 3, 4, 4, 9, 9]\nprint(find_max_num(digits))  # Output: 994433\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpywsojk0s.py\", line 27, in <module>\n    assert find_max_num([1, 1, 2, 2], 4) == 2211\nTypeError: find_max_num() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 58, "requirement": "Functionality Extension", "completion": "def opposite_signs(pairs):\n    \"\"\"\n    Check if each pair of integers in the list has opposite signs.\n\n    Parameters:\n    pairs (list of tuples): A list of integer pairs, where each pair is a tuple (x, y).\n\n    Returns:\n    list of bool: A list of boolean values indicating whether each pair has opposite signs.\n    \"\"\"\n    return [(x < 0) != (y < 0) for x, y in pairs]\n\n# Example usage:\npairs = [(5, -3), (-4, -7), (10, 20), (-1, 1), (0, 0)]\nresult = opposite_signs(pairs)\nprint(result)  # Output: [True, False, False, True, False]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3f1szpzn.py\", line 10, in <module>\n    assert opposite_signs_list([(1, -2), (3, 2), (-10, -10)]) == [True, False, False]\nNameError: name 'opposite_signs_list' is not defined", "passed": false}
{"task_id": 59, "requirement": "Functionality Extension", "completion": "def is_octagonal(n):\n    \"\"\"\n    Calculate the nth octagonal number or a list of the first n octagonal numbers.\n\n    Parameters:\n    n (int or list): If n is an integer, return the nth octagonal number.\n                     If n is a list, return a list of the first len(n) octagonal numbers.\n\n    Returns:\n    int or list: The nth octagonal number or a list of the first len(n) octagonal numbers.\n    \"\"\"\n    def calculate_octagonal(k):\n        \"\"\"Helper function to calculate the kth octagonal number.\"\"\"\n        if not isinstance(k, int) or k < 1:\n            raise ValueError(\"Input must be a positive integer\")\n        return k * (3 * k - 2)\n\n    if isinstance(n, int):\n        return calculate_octagonal(n)\n    elif isinstance(n, list):\n        if not all(isinstance(i, int) and i >= 1 for i in n):\n            raise ValueError(\"All elements in the list must be positive integers\")\n        return [calculate_octagonal(i) for i in range(1, len(n) + 1)]\n    else:\n        raise TypeError(\"Input must be an integer or a list of integers\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Single integer input\n    n = 5\n    print(f\"The {n}th octagonal number is: {is_octagonal(n)}\")\n\n    # List input\n    n_list = [1, 2, 3, 4, 5]\n    print(f\"The first {len(n_list)} octagonal numbers are: {is_octagonal(n_list)}\")\n", "result": "passed", "passed": true}
{"task_id": 60, "requirement": "Functionality Extension", "completion": "def max_len_sub(arr):\n    if not arr:\n        return 0\n    \n    # Dictionary to store the length of the longest subsequence ending with a particular value\n    dp = {}\n    max_length = 1\n    \n    for num in arr:\n        # Initialize the length of the subsequence ending with num as 1\n        dp[num] = 1\n        \n        # Check for all possible differences\n        # Here, we consider any difference, not just +1 or -1\n        for diff in dp:\n            if diff != num:\n                # Update the length of the subsequence ending with num\n                dp[num] = max(dp[num], dp.get(diff, 0) + 1)\n        \n        # Update the maximum length found so far\n        max_length = max(max_length, dp[num])\n    \n    return max_length\n\n# Example usage:\narr = [1, 2, 3, 4, 5, 3, 2]\nprint(max_len_sub(arr))  # Output: 5 (Subsequence: [1, 2, 3, 4, 5])\n\narr = [10, 9, 4, 5, 4, 8, 6]\nprint(max_len_sub(arr))  # Output: 3 (Subsequence: [4, 5, 4] or [9, 8, 6])\n\narr = [1, 5, 2, 3, 4, 7, 6]\nprint(max_len_sub(arr))  # Output: 5 (Subsequence: [1, 2, 3, 4, 7] or [1, 2, 3, 4, 6])\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpz0jqoikf.py\", line 35, in <module>\n    assert max_len_sub([10, 7, 4, 1, -2], -3) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}

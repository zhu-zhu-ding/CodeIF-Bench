{"task_id": 14, "requirement": "Input-Output Conditions", "completion": "def find_volume(base_area, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base_area (float or int): The area of the triangular base.\n    height (float or int): The height of the triangular prism.\n    length (float or int): The length of the triangular prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    # Ensure inputs are positive\n    if base_area <= 0 or height <= 0 or length <= 0:\n        raise ValueError(\"All inputs must be positive numbers.\")\n    \n    # Calculate the volume\n    volume = base_area * height * length\n    \n    return volume\n\n# Example usage:\nbase_area = 10.0  # area of the triangular base\nheight = 5.0      # height of the prism\nlength = 8.0      # length of the prism\n\nvolume = find_volume(base_area, height, length)\nprint(f\"The volume of the triangular prism is: {volume}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplcehbz5f.py\", line 20, in <module>\n    assert find_volume(10,8,6) == 240\nAssertionError", "passed": false}
{"task_id": 15, "requirement": "Input-Output Conditions", "completion": "import re\n\ndef split_lowerstring(s):\n    # Use regular expression to split the string at lowercase letters\n    # The pattern (?<=[a-z]) matches the position right after a lowercase letter\n    # The re.split function splits the string at each match\n    return re.split('(?<=[a-z])', s)\n\n# Example usage:\ninput_string = \"HelloWorldPython\"\nresult = split_lowerstring(input_string)\nprint(result)  # Output: ['Hello', 'World', 'Python']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4nzslbov.py\", line 14, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "requirement": "Input-Output Conditions", "completion": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Find sequences of lowercase letters joined with an underscore.\n\n    :param text: The input string to search for sequences.\n    :return: 'Found a match!' if a match is found, otherwise 'Not matched!'.\n    \"\"\"\n    # Regular expression pattern to match lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    \n    # Search for the pattern in the input text\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\ntext1 = \"hello_world this_is_a_test example_123 another_example\"\ntext2 = \"no_match_here 123_abc UPPER_CASE\"\n\nprint(text_lowercase_underscore(text1))  # Output: 'Found a match!'\nprint(text_lowercase_underscore(text2))  # Output: 'Not matched!'\n", "result": "passed", "passed": true}
{"task_id": 17, "requirement": "Input-Output Conditions", "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Parameters:\n    side_length (int): The length of one side of the square. Must be a non-negative integer.\n\n    Returns:\n    int: The perimeter of the square as a non-negative integer.\n\n    Raises:\n    ValueError: If the input is not a non-negative integer.\n    \"\"\"\n    if not isinstance(side_length, int) or side_length < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    return 4 * side_length\n\n# Example usage:\n# side = 5\n# perimeter = square_perimeter(side)\n# print(f\"The perimeter of the square with side length {side} is {perimeter}.\")\n", "result": "passed", "passed": true}
{"task_id": 18, "requirement": "Input-Output Conditions", "completion": "def remove_dirty_chars(string, dirty_chars):\n    # Check if both inputs contain only alphabetic characters\n    if not (string.isalpha() and dirty_chars.isalpha()):\n        raise ValueError(\"Input strings must only contain alphabetic characters.\")\n    \n    # Assertion to ensure the inputs are valid (optional, but can be used for debugging)\n    assert string.isalpha() and dirty_chars.isalpha(), \"Input strings must only contain alphabetic characters.\"\n    \n    # Create a set of characters to remove for faster lookup\n    dirty_set = set(dirty_chars)\n    \n    # Use a list comprehension to filter out the dirty characters\n    cleaned_string = ''.join([char for char in string if char not in dirty_set])\n    \n    return cleaned_string\n\n# Example usage:\ntry:\n    string = \"hello world\"\n    dirty_chars = \"lo\"\n    result = remove_dirty_chars(string, dirty_chars)\n    print(result)  # Output: \"he wrd\"\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 19, "requirement": "Input-Output Conditions", "completion": "def test_duplicate(arr):\n    \"\"\"\n    Check if the given array contains any duplicate elements.\n\n    Parameters:\n    arr (list of int): The array of integers to check.\n\n    Returns:\n    bool: True if there are duplicates, False otherwise.\n\n    Raises:\n    TypeError: If the input is not a list.\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list of integers.\")\n    \n    # Use a set to store unique elements\n    unique_elements = set()\n    \n    for num in arr:\n        # Check if the element is an integer\n        if not isinstance(num, int):\n            raise TypeError(\"All elements in the list must be integers.\")\n        \n        if num in unique_elements:\n            return True\n        unique_elements.add(num)\n    \n    return False\n\n# Example usage:\nif __name__ == \"__main__\":\n    try:\n        array1 = [1, 2, 3, 4, 5]\n        array2 = [1, 2, 3, 4, 2]\n        array3 = \"not a list\"\n        array4 = [1, 2, \"three\", 4]\n        \n        print(test_duplicate(array1))  # Output: False\n        print(test_duplicate(array2))  # Output: True\n        print(test_duplicate(array3))  # Raises TypeError\n        print(test_duplicate(array4))  # Raises TypeError\n    except TypeError as e:\n        print(f\"Error: {e}\")\n", "result": "passed", "passed": true}
{"task_id": 20, "requirement": "Input-Output Conditions", "completion": "def is_woodall(num):\n    # Woodall numbers are positive integers, so return False for non-positive inputs\n    if not isinstance(num, int) or num < 1:\n        return False\n    \n    n = 1\n    while True:\n        woodall = n * (2 ** n) - 1\n        if woodall == num:\n            return True\n        if woodall > num:\n            return False\n        n += 1\n\n# Example usage:\nprint(is_woodall(1))    # True, because 1 * 2^1 - 1 = 1\nprint(is_woodall(7))    # True, because 2 * 2^2 - 1 = 7\nprint(is_woodall(23))   # True, because 3 * 2^3 - 1 = 23\nprint(is_woodall(10))   # False, 10 is not a Woodall number\nprint(is_woodall(0))    # False, 0 is not a Woodall number\nprint(is_woodall(-5))   # False, negative numbers are not Woodall numbers\n", "result": "passed", "passed": true}
{"task_id": 23, "requirement": "Input-Output Conditions", "completion": "def maximum_sum(list_of_lists):\n    \"\"\"\n    Find the maximum sum of elements of any sublist in a list of lists.\n\n    :param list_of_lists: List of lists containing integers.\n    :return: An integer representing the maximum sum of elements from any sublist.\n    \"\"\"\n    if not list_of_lists:\n        return 0  # Return 0 if the list of lists is empty\n\n    # Calculate the sum of each sublist and find the maximum sum\n    max_sum = max(sum(sublist) for sublist in list_of_lists)\n\n    return max_sum\n\n# Example usage:\nlists = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [10, -2, 1],\n    [7, 8, 9]\n]\n\nprint(maximum_sum(lists))  # Output: 24 (since [7, 8, 9] has the maximum sum)\n", "result": "passed", "passed": true}
{"task_id": 25, "requirement": "Input-Output Conditions", "completion": "def find_product(arr):\n    # Create a dictionary to count occurrences of each element\n    element_counts = {}\n    for num in arr:\n        if num in element_counts:\n            element_counts[num] += 1\n        else:\n            element_counts[num] = 1\n    \n    # Filter out elements that appear more than once\n    non_repeated_elements = [num for num, count in element_counts.items() if count == 1]\n    \n    # Calculate the product of non-repeated elements\n    product = 1\n    for num in non_repeated_elements:\n        product *= num\n    \n    return product\n\n# Example usage:\narr = [1, 2, 3, 4, 2, 3, 5]\nresult = find_product(arr)\nprint(\"Product of non-repeated elements:\", result)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpo3w708ag.py\", line 25, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "requirement": "Input-Output Conditions", "completion": "def check_k_elements(tuple_list, k):\n    \"\"\"\n    Check if all tuples in the given list have exactly k elements.\n\n    :param tuple_list: List of tuples to be checked.\n    :param k: The expected number of elements in each tuple.\n    :return: True if all tuples have exactly k elements, False otherwise.\n    \"\"\"\n    # Check if all tuples in the list have length equal to k\n    return all(len(t) == k for t in tuple_list)\n\n# Example usage:\ntuple_list = [(1, 2), (3, 4), (5, 6)]\nk = 2\nprint(check_k_elements(tuple_list, k))  # Output: True\n\ntuple_list = [(1, 2, 3), (4, 5), (6, 7)]\nk = 2\nprint(check_k_elements(tuple_list, k))  # Output: False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpahnvhrw6.py\", line 15, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 28, "requirement": "Input-Output Conditions", "completion": "def binomial_coeff(n, k):\n    \"\"\"\n    Calculate the binomial coefficient C(n, k), which is the number of ways to choose k elements from a set of n elements.\n\n    Parameters:\n    n (int): Total number of elements (non-negative integer).\n    k (int): Number of elements to choose (non-negative integer).\n\n    Returns:\n    int: The binomial coefficient C(n, k).\n    \"\"\"\n    # Handle edge cases\n    if k < 0 or k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n\n    # Simplify the calculation by using the smaller of k and n - k\n    if k > n - k:\n        k = n - k\n\n    # Compute the binomial coefficient iteratively\n    result = 1\n    for i in range(k):\n        result = result * (n - i) // (i + 1)\n\n    return result\n\n# Example usage:\nn = 5\nk = 2\nprint(f\"C({n}, {k}) = {binomial_coeff(n, k)}\")\n", "result": "passed", "passed": true}
{"task_id": 30, "requirement": "Input-Output Conditions", "completion": "def count_substring_with_equal_ends(s):\n    count = 0\n    n = len(s)\n    \n    # Iterate over all possible substrings\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substring = s[i:j]\n            if substring[0] == substring[-1]:\n                count += 1\n                \n    return count\n", "result": "passed", "passed": true}
{"task_id": 32, "requirement": "Input-Output Conditions", "completion": "def max_prime_factors(n):\n    # Ensure the input is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    # Initialize the largest prime factor\n    largest_prime = -1\n    \n    # Divide out all factors of 2\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n    \n    # Check for odd factors from 3 to sqrt(n)\n    i = 3\n    while i * i <= n:\n        while n % i == 0:\n            largest_prime = i\n            n //= i\n        i += 2\n    \n    # If n is still greater than 2, then n itself is prime\n    if n > 2:\n        largest_prime = n\n    \n    return largest_prime\n\n# Example usage:\nnumber = 13195\nprint(f\"The largest prime factor of {number} is: {max_prime_factors(number)}\")\n", "result": "passed", "passed": true}
{"task_id": 35, "requirement": "Input-Output Conditions", "completion": "def find_rect_num(n):\n    \"\"\"\n    Calculate the n-th rectangular number.\n\n    Parameters:\n    n (int): The position of the rectangular number to find.\n\n    Returns:\n    int: The n-th rectangular number.\n    \"\"\"\n    return n * (n + 1)\n\n# Example usage:\nif __name__ == \"__main__\":\n    n = 5\n    result = find_rect_num(n)\n    print(f\"The {n}-th rectangular number is: {result}\")\n", "result": "passed", "passed": true}
{"task_id": 36, "requirement": "Input-Output Conditions", "completion": "def find_nth_digit(numerator, denominator, n):\n    # Check if the fraction is proper\n    if numerator >= denominator:\n        return -1  # Return -1 if the fraction is not proper\n    \n    # Calculate the decimal representation\n    decimal = numerator / denominator\n    \n    # Convert the decimal part to a string\n    decimal_str = str(decimal).split('.')[1]\n    \n    # Check if n is within the range of the decimal digits\n    if n > len(decimal_str):\n        return -1  # Return -1 if n is out of range\n    \n    # Return the nth digit as an integer\n    return int(decimal_str[n-1])\n\n# Example usage:\nnumerator = 1\ndenominator = 7\nn = 3\nprint(find_nth_digit(numerator, denominator, n))  # Output: 4\n", "result": "passed", "passed": true}
{"task_id": 38, "requirement": "Input-Output Conditions", "completion": "def div_even_odd(numbers):\n    first_even = None\n    first_odd = None\n    \n    for num in numbers:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is not None and first_odd is not None:\n        return first_even / first_odd\n    else:\n        return None\n\n# Example usage:\nnumbers = [1, 3, 5, 7, 8, 10]\nresult = div_even_odd(numbers)\nprint(result)  # Output: 8.0 (since 8 / 1 = 8.0)\n\n# Edge case: No even number\nnumbers = [1, 3, 5, 7]\nresult = div_even_odd(numbers)\nprint(result)  # Output: None\n\n# Edge case: No odd number\nnumbers = [2, 4, 6, 8]\nresult = div_even_odd(numbers)\nprint(result)  # Output: None\n\n# Edge case: Empty list\nnumbers = []\nresult = div_even_odd(numbers)\nprint(result)  # Output: None\n", "result": "passed", "passed": true}
{"task_id": 39, "requirement": "Input-Output Conditions", "completion": "from collections import Counter\nimport heapq\n\ndef rearrange_string(s: str) -> str:\n    # Count the frequency of each character in the string\n    char_counts = Counter(s)\n    \n    # Use a max-heap to store characters based on their frequency\n    max_heap = [(-count, char) for char, count in char_counts.items()]\n    heapq.heapify(max_heap)\n    \n    # Initialize the result and the previous character\n    result = []\n    prev_count, prev_char = 0, ''\n    \n    while max_heap:\n        # Pop the most frequent character (excluding the previous one)\n        count, char = heapq.heappop(max_heap)\n        \n        # Append the character to the result\n        result.append(char)\n        \n        # Push the previous character back into the heap if its count is still positive\n        if prev_count < 0:\n            heapq.heappush(max_heap, (prev_count, prev_char))\n        \n        # Update the previous character and its count\n        prev_count, prev_char = count + 1, char\n    \n    # If the result length matches the input string, return the rearranged string\n    if len(result) == len(s):\n        return ''.join(result)\n    else:\n        return \"\"\n\n# Example usage:\nprint(rearrange_string(\"aabb\"))  # Output: \"abab\" or \"baba\"\nprint(rearrange_string(\"aaab\"))  # Output: \"\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwswjfojd.py\", line 40, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 42, "requirement": "Input-Output Conditions", "completion": "from collections import Counter\n\ndef find_sum(arr):\n    # Count the occurrences of each element in the array\n    element_counts = Counter(arr)\n    \n    # Sum the elements that appear more than once\n    sum_repeated = sum(element for element, count in element_counts.items() if count > 1)\n    \n    return sum_repeated\n\n# Example usage with no repeated elements\narr = [1, 2, 3, 4, 5]\nresult = find_sum(arr)\nprint(\"Sum of repeated elements:\", result)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3oeiuts4.py\", line 17, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Input-Output Conditions", "completion": "import re\n\ndef text_match(text):\n    # Define the regex pattern to match sequences of lowercase letters joined by an underscore\n    pattern = r'[a-z]+_[a-z]+'\n    \n    # Search for the pattern in the input text\n    matches = re.findall(pattern, text)\n    \n    # If matches are found, return them; otherwise, return 'Not matched!'\n    if matches:\n        return matches\n    else:\n        return 'Not matched!'\n\n# Example usage:\ntext1 = \"hello_world this_is_a_test example_text\"\ntext2 = \"no_match_here CamelCase 123_abc\"\ntext3 = \"just_text_without_underscores\"\n\nprint(text_match(text1))  # Output: ['hello_world', 'this_is_a_test', 'example_text']\nprint(text_match(text2))  # Output: Not matched!\nprint(text_match(text3))  # Output: Not matched!\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpbif85ac0.py\", line 25, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 46, "requirement": "Input-Output Conditions", "completion": "def test_distinct(numbers):\n    \"\"\"\n    Determine whether all the numbers in the list are distinct.\n\n    :param numbers: List of integers\n    :return: True if all numbers are distinct, False otherwise\n    \"\"\"\n    # Use a set to check for duplicates\n    unique_numbers = set(numbers)\n    \n    # If the length of the set is equal to the length of the list, all numbers are distinct\n    return len(unique_numbers) == len(numbers)\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(test_distinct([1, 2, 3, 4, 5]))  # Output: True\n    print(test_distinct([1, 2, 2, 3, 4]))  # Output: False\n    print(test_distinct([10, 20, 30, 40, 50]))  # Output: True\n    print(test_distinct([10, 20, 30, 40, 10]))  # Output: False\n", "result": "passed", "passed": true}
{"task_id": 48, "requirement": "Input-Output Conditions", "completion": "def odd_bit_set_number(n):\n    \"\"\"\n    Sets all odd bits of the given integer `n` and returns the result.\n\n    :param n: Input integer\n    :return: Integer with all odd bits set\n    \"\"\"\n    # Create a mask with all odd bits set to 1\n    # The mask is 0xAA...AA in hexadecimal, which corresponds to 10101010...1010 in binary\n    # For example, for 8 bits, the mask is 0xAA (10101010)\n    # We can generate the mask by shifting 1 to the left and ORing it with itself\n    mask = 0\n    bit = 1\n    while bit <= n:\n        mask |= bit\n        bit <<= 2  # Move to the next odd bit\n    \n    # Set all odd bits of n by ORing it with the mask\n    result = n | mask\n    return result\n\n# Example usage:\nprint(odd_bit_set_number(0b10101010))  # Output: 170 (0b10101010, all odd bits already set)\nprint(odd_bit_set_number(0b00000000))  # Output: 170 (0b10101010, all odd bits set)\nprint(odd_bit_set_number(0b11111111))  # Output: 255 (0b11111111, all bits already set)\nprint(odd_bit_set_number(0b01010101))  # Output: 255 (0b11111111, all odd bits set)\n", "result": "passed", "passed": true}
{"task_id": 49, "requirement": "Input-Output Conditions", "completion": "def specified_element(two_d_list, index):\n    \"\"\"\n    Extracts the specified element from each sublist in a two-dimensional list.\n\n    Parameters:\n    two_d_list (list of lists): The input two-dimensional list.\n    index (int): The index of the element to extract from each sublist.\n\n    Returns:\n    list: A list of elements from each sublist at the specified index.\n          Returns an empty list if the input list is empty.\n    \"\"\"\n    if not two_d_list:\n        return []\n    \n    return [sublist[index] for sublist in two_d_list if len(sublist) > index]\n\n# Example usage:\ntwo_d_list = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n\n# Extract the first element (index 0) from each sublist\nprint(specified_element(two_d_list, 0))  # Output: [1, 4, 7]\n\n# Extract the second element (index 1) from each sublist\nprint(specified_element(two_d_list, 1))  # Output: [2, 5, 8]\n\n# Extract the third element (index 2) from each sublist\nprint(specified_element(two_d_list, 2))  # Output: [3, 6, 9]\n\n# Handle empty input list\nprint(specified_element([], 0))  # Output: []\n", "result": "passed", "passed": true}
{"task_id": 50, "requirement": "Input-Output Conditions", "completion": "def min_length_list(lists):\n    \"\"\"\n    Finds the list with the minimum length from a given list of lists.\n\n    :param lists: List of lists\n    :return: A tuple containing the length of the shortest list and the list itself\n    \"\"\"\n    shortest_list = min(lists, key=lambda x: len(x))\n    return (len(shortest_list), shortest_list)\n\n# Example usage:\nlists = [[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]\nresult = min_length_list(lists)\nprint(result)  # Output: (1, [6])\n", "result": "passed", "passed": true}
{"task_id": 52, "requirement": "Input-Output Conditions", "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float or int): The length of the base of the parallelogram. Must be positive.\n    height (float or int): The height of the parallelogram. Must be positive.\n\n    Returns:\n    float: The area of the parallelogram.\n\n    Raises:\n    ValueError: If either base or height is not a positive number.\n    \"\"\"\n    # Check if base and height are positive numbers\n    if not (isinstance(base, (int, float)) and isinstance(height, (int, float))):\n        raise ValueError(\"Base and height must be numerical values.\")\n    if base <= 0 or height <= 0:\n        raise ValueError(\"Base and height must be positive numbers.\")\n    \n    # Calculate and return the area\n    return base * height\n\n# Example usage:\ntry:\n    base = 5.0\n    height = 3.0\n    area = parallelogram_area(base, height)\n    print(f\"The area of the parallelogram is: {area}\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpf9nzw49u.py\", line 25, in <module>\n    assert parallelogram_area(0, 10) == 0\n  File \"/tmp/tmpf9nzw49u.py\", line 7, in parallelogram_area\n    raise ValueError(\"Base and height must be positive numbers.\")\nValueError: Base and height must be positive numbers.", "passed": false}
{"task_id": 53, "requirement": "Input-Output Conditions", "completion": "def check_equality(s):\n    # Ensure the input is a string\n    if not isinstance(s, str):\n        return \"Input must be a string.\"\n    \n    # Check if the string is empty\n    if not s:\n        return \"Not Equal\"\n    \n    # Compare the first and last characters\n    if s[0] == s[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n\n# Example usage:\nprint(check_equality(\"hello\"))       # Output: Not Equal\nprint(check_equality(\"racecar\"))     # Output: Equal\nprint(check_equality(\"a\"))           # Output: Equal\nprint(check_equality(\"\"))            # Output: Not Equal\nprint(check_equality(123))           # Output: Input must be a string.\nprint(check_equality([\"hello\"]))     # Output: Input must be a string.\n", "result": "passed", "passed": true}
{"task_id": 54, "requirement": "Input-Output Conditions", "completion": "def counting_sort(arr):\n    # Input validation: Ensure the input is a list of non-negative integers\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(num, int) and num >= 0 for num in arr):\n        raise ValueError(\"All elements in the list must be non-negative integers.\")\n    \n    # If the list is empty or has only one element, it is already sorted\n    if len(arr) <= 1:\n        return arr.copy()  # Return a copy to avoid modifying the original list\n    \n    # Find the maximum element in the array to determine the range\n    max_val = max(arr)\n    \n    # Create a count array to store the count of each unique element\n    count = [0] * (max_val + 1)\n    \n    # Store the count of each element in the count array\n    for num in arr:\n        count[num] += 1\n    \n    # Modify the count array such that each element at each index\n    # stores the sum of previous counts. This will help in placing\n    # the elements in the correct position in the output array.\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    \n    # Create an output array to store the sorted elements\n    output = [0] * len(arr)\n    \n    # Build the output array by placing elements in their correct position\n    for num in reversed(arr):\n        output[count[num] - 1] = num\n        count[num] -= 1\n    \n    return output\n\n# Example usage:\narr = [4, 2, 2, 8, 3, 3, 1]\nsorted_arr = counting_sort(arr)\nprint(\"Sorted array:\", sorted_arr)\n", "result": "passed", "passed": true}
{"task_id": 57, "requirement": "Input-Output Conditions", "completion": "def find_max_num(digits, num_digits):\n    # Ensure the number of digits requested is valid\n    if num_digits > len(digits) or num_digits < 0:\n        raise ValueError(\"Invalid number of digits requested.\")\n    \n    # Sort the digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n    \n    # Select the first 'num_digits' digits\n    selected_digits = sorted_digits[:num_digits]\n    \n    # Combine the selected digits into a single number\n    max_num = int(''.join(map(str, selected_digits)))\n    \n    return max_num\n\n# Example usage:\ndigits = [1, 2, 3, 4]\nnum_digits = 3\nprint(find_max_num(digits, num_digits))  # Output: 432\n\ndigits = [9, 8, 7, 6]\nnum_digits = 2\nprint(find_max_num(digits, num_digits))  # Output: 98\n\ndigits = [5, 5, 5, 5]\nnum_digits = 4\nprint(find_max_num(digits, num_digits))  # Output: 5555\n", "result": "passed", "passed": true}
{"task_id": 58, "requirement": "Input-Output Conditions", "completion": "def opposite_signs(x, y):\n    \"\"\"\n    Check if two integers have opposite signs.\n\n    Parameters:\n    x (int): The first integer.\n    y (int): The second integer.\n\n    Returns:\n    bool: True if the integers have opposite signs, False otherwise.\n\n    Raises:\n    TypeError: If either x or y is not an integer.\n    \"\"\"\n    if not isinstance(x, int) or not isinstance(y, int):\n        raise TypeError(\"Both inputs must be integers.\")\n    return (x < 0) != (y < 0)\n\n# Example usage:\ntry:\n    print(opposite_signs(5, -3))  # Output: True\n    print(opposite_signs(-4, -7))  # Output: False\n    print(opposite_signs(10, 20))  # Output: False\n    print(opposite_signs(5, 3.5))  # Raises TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 60, "requirement": "Input-Output Conditions", "completion": "def max_len_sub(arr, max_diff):\n    if not arr:\n        return 0\n    \n    # Dictionary to store the length of the longest subsequence ending with a particular value\n    dp = {}\n    max_length = 1\n    \n    for num in arr:\n        # Initialize the length of the subsequence ending with num as 1\n        dp[num] = 1\n        \n        # Check all possible previous values within the allowed difference\n        for i in range(1, max_diff + 1):\n            # Check if num - i exists in the dictionary\n            if num - i in dp:\n                dp[num] = max(dp[num], dp[num - i] + 1)\n            # Check if num + i exists in the dictionary\n            if num + i in dp:\n                dp[num] = max(dp[num], dp[num + i] + 1)\n        \n        # Update the maximum length found so far\n        max_length = max(max_length, dp[num])\n    \n    return max_length\n\n# Example usage:\narr = [1, 2, 3, 4, 5, 3, 2]\nmax_diff = 1\nprint(max_len_sub(arr, max_diff))  # Output: 5 (Subsequence: [1, 2, 3, 4, 5])\n\narr = [10, 9, 4, 5, 4, 8, 6]\nmax_diff = 1\nprint(max_len_sub(arr, max_diff))  # Output: 3 (Subsequence: [4, 5, 4] or [9, 8, 6])\n\narr = [1, 5, 2, 6, 3, 7, 4]\nmax_diff = 2\nprint(max_len_sub(arr, max_diff))  # Output: 4 (Subsequence: [1, 2, 3, 4] or [5, 6, 7, 4])\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwm7zmjba.py\", line 40, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nAssertionError", "passed": false}

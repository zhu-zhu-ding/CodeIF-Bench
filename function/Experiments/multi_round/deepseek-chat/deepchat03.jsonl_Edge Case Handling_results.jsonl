{"task_id": 11, "requirement": "Edge Case Handling", "completion": "def remove_occ(s, char):\n    # Check if the character exists in the string\n    if char not in s:\n        return s  # Return the original string if the character is not found\n    \n    # Find the index of the first occurrence\n    first_index = s.find(char)\n    \n    # Find the index of the last occurrence\n    last_index = s.rfind(char)\n    \n    # Remove the first occurrence\n    s = s[:first_index] + s[first_index+1:]\n    \n    # Since we removed the first occurrence, the last occurrence index might have shifted\n    # So we need to find the last occurrence again\n    last_index = s.rfind(char)\n    \n    # Remove the last occurrence\n    s = s[:last_index] + s[last_index+1:]\n    \n    return s\n\n# Example usage:\ninput_string = \"banana\"\ncharacter = \"a\"\nresult = remove_occ(input_string, character)\nprint(result)  # Output: \"bnna\"\n\n# Example where the character does not exist\ninput_string = \"hello\"\ncharacter = \"z\"\nresult = remove_occ(input_string, character)\nprint(result)  # Output: \"hello\"\n", "result": "passed", "passed": true}
{"task_id": 12, "requirement": "Edge Case Handling", "completion": "def sort_matrix(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n    If the matrix is empty, returns an empty matrix.\n\n    :param matrix: List of lists (the matrix to be sorted)\n    :return: List of lists (the sorted matrix or an empty matrix if input is empty)\n    \"\"\"\n    # Handle empty matrix case\n    if not matrix:\n        return []\n\n    # Calculate the sum of each row and store it along with the row\n    rows_with_sum = [(sum(row), row) for row in matrix]\n    \n    # Sort the rows based on the sum\n    rows_with_sum.sort(key=lambda x: x[0])\n    \n    # Extract the sorted rows\n    sorted_matrix = [row for (_, row) in rows_with_sum]\n    \n    return sorted_matrix\n\n# Example usage:\nmatrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n    [1, 1, 1]\n]\n\nempty_matrix = []\n\nsorted_matrix = sort_matrix(matrix)\nsorted_empty_matrix = sort_matrix(empty_matrix)\n\nprint(\"Sorted Matrix:\")\nfor row in sorted_matrix:\n    print(row)\n\nprint(\"\\nSorted Empty Matrix:\")\nfor row in sorted_empty_matrix:\n    print(row)\n", "result": "passed", "passed": true}
{"task_id": 13, "requirement": "Edge Case Handling", "completion": "from collections import Counter\n\ndef count_common(word_counts, top_n=10):\n    \"\"\"\n    Count the most common words in a dictionary of word counts.\n\n    Parameters:\n    word_counts (dict): A dictionary where keys are words and values are their counts.\n    top_n (int): The number of most common words to return. Default is 10.\n\n    Returns:\n    list: A list of tuples containing the most common words and their counts.\n          Returns an empty list if the input dictionary is empty.\n    \"\"\"\n    # Handle empty dictionary input\n    if not word_counts:\n        return []\n    \n    # Use Counter to find the most common words\n    counter = Counter(word_counts)\n    \n    # Get the top_n most common words\n    most_common = counter.most_common(top_n)\n    \n    return most_common\n\n# Example usage:\nword_counts = {\n    'python': 100,\n    'programming': 85,\n    'code': 120,\n    'data': 90,\n    'science': 75,\n    'machine': 60,\n    'learning': 80,\n    'algorithm': 70,\n    'function': 50,\n    'variable': 40,\n    'loop': 30,\n    'list': 20\n}\n\n# Test with a non-empty dictionary\nmost_common_words = count_common(word_counts, top_n=5)\nprint(most_common_words)  # Output: [('code', 120), ('python', 100), ('data', 90), ('programming', 85), ('learning', 80)]\n\n# Test with an empty dictionary\nempty_word_counts = {}\nmost_common_words_empty = count_common(empty_word_counts)\nprint(most_common_words_empty)  # Output: []\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7ffvbd3b.py\", line 42, in <module>\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nAssertionError", "passed": false}
{"task_id": 14, "requirement": "Edge Case Handling", "completion": "def find_volume(base_triangle, height_triangle, height_prism):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base_triangle (float): The base length of the triangular base. Must be positive.\n    height_triangle (float): The height of the triangular base. Must be positive.\n    height_prism (float): The height (or length) of the prism. Must be positive.\n\n    Returns:\n    float: The volume of the triangular prism.\n    Raises:\n    ValueError: If any of the input dimensions are non-positive.\n    \"\"\"\n    # Validate input dimensions\n    if base_triangle <= 0 or height_triangle <= 0 or height_prism <= 0:\n        raise ValueError(\"All dimensions must be positive.\")\n    \n    # Calculate the area of the triangular base\n    base_area = 0.5 * base_triangle * height_triangle\n    \n    # Calculate the volume of the prism\n    volume = base_area * height_prism\n    \n    return volume\n\n# Example usage:\ntry:\n    # Edge case: very small but positive dimensions\n    base_triangle = 0.0001  # base of the triangle\n    height_triangle = 0.0001  # height of the triangle\n    height_prism = 0.0001  # height of the prism\n\n    volume = find_volume(base_triangle, height_triangle, height_prism)\n    print(f\"The volume of the triangular prism is: {volume}\")\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 15, "requirement": "Edge Case Handling", "completion": "import re\n\ndef split_lowerstring(s):\n    # Check if the string contains any lowercase letters\n    if not re.search('[a-z]', s):\n        return []\n    \n    # Split the string at lowercase letters\n    return re.split('[a-z]', s)\n\n# Example usage:\nprint(split_lowerstring(\"HELLOWORLD\"))  # Output: []\nprint(split_lowerstring(\"HelloWorldPython\"))  # Output: ['H', 'W', 'P']\nprint(split_lowerstring(\"123ABC456\"))  # Output: []\nprint(split_lowerstring(\"aBcDeFg\"))  # Output: ['', 'B', 'D', 'F', '']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpiygxypyz.py\", line 17, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "requirement": "Edge Case Handling", "completion": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Find sequences of lowercase letters joined with an underscore.\n    If the input string is empty, return 'Not matched!'.\n\n    :param text: The input string to search for sequences.\n    :return: A list of all matching sequences or 'Not matched!' if the input is empty.\n    \"\"\"\n    if not text:\n        return 'Not matched!'\n    \n    # Regular expression pattern to match lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    \n    # Find all matches in the input text\n    matches = re.findall(pattern, text)\n    \n    return matches if matches else 'Not matched!'\n\n# Example usage:\ntext1 = \"hello_world this_is_a_test example_123 another_example\"\ntext2 = \"\"\ntext3 = \"no_matches_here\"\n\nprint(text_lowercase_underscore(text1))  # Output: ['hello_world', 'this_is_a_test', 'another_example']\nprint(text_lowercase_underscore(text2))  # Output: Not matched!\nprint(text_lowercase_underscore(text3))  # Output: Not matched!\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmdala14w.py\", line 25, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "requirement": "Edge Case Handling", "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Parameters:\n    side_length (float or int): The length of one side of the square.\n\n    Returns:\n    float or int: The perimeter of the square. Returns 0 if side_length is 0.\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    return 4 * side_length\n\n# Example usage:\n# side = 0\n# perimeter = square_perimeter(side)\n# print(f\"The perimeter of the square with side length {side} is {perimeter}.\")\n", "result": "passed", "passed": true}
{"task_id": 18, "requirement": "Edge Case Handling", "completion": "def remove_dirty_chars(string, dirty_chars):\n    # If the second string is empty, return the original string\n    if not dirty_chars:\n        return string\n    \n    # Create a set of characters to remove for faster lookup\n    dirty_set = set(dirty_chars)\n    \n    # Use a list comprehension to filter out the dirty characters\n    cleaned_string = ''.join([char for char in string if char not in dirty_set])\n    \n    return cleaned_string\n\n# Example usage:\nstring = \"hello world\"\ndirty_chars = \"lo\"\nresult = remove_dirty_chars(string, dirty_chars)\nprint(result)  # Output: \"he wrd\"\n\n# Test case with empty dirty_chars\nstring2 = \"hello world\"\ndirty_chars2 = \"\"\nresult2 = remove_dirty_chars(string2, dirty_chars2)\nprint(result2)  # Output: \"hello world\"\n", "result": "passed", "passed": true}
{"task_id": 19, "requirement": "Edge Case Handling", "completion": "def test_duplicate(arr):\n    \"\"\"\n    Check if the given array contains any duplicate elements.\n\n    Parameters:\n    arr (list of int): The array of integers to check.\n\n    Returns:\n    bool: True if there are duplicates, False otherwise.\n    \"\"\"\n    # Handle edge cases: empty list or list with one element\n    if len(arr) <= 1:\n        return False\n    \n    # Use a set to store unique elements\n    unique_elements = set()\n    \n    for num in arr:\n        if num in unique_elements:\n            return True\n        unique_elements.add(num)\n    \n    return False\n\n# Example usage:\nif __name__ == \"__main__\":\n    array1 = [1, 2, 3, 4, 5]  # No duplicates\n    array2 = [1, 2, 3, 4, 2]  # Contains duplicates\n    array3 = []               # Empty list\n    array4 = [42]             # Single element\n    \n    print(test_duplicate(array1))  # Output: False\n    print(test_duplicate(array2))  # Output: True\n    print(test_duplicate(array3))  # Output: False\n    print(test_duplicate(array4))  # Output: False\n", "result": "passed", "passed": true}
{"task_id": 20, "requirement": "Edge Case Handling", "completion": "def is_woodall(num):\n    # Edge case: If the number is less than 1, it cannot be a Woodall number\n    if num < 1:\n        return False\n    \n    # Edge case: If the number is zero, it cannot be a Woodall number\n    if num == 0:\n        return False\n    \n    n = 1\n    while True:\n        woodall = n * (2 ** n) - 1\n        if woodall == num:\n            return True\n        if woodall > num:\n            return False\n        n += 1\n\n        # Prevent infinite loops for very large numbers\n        # If n exceeds a reasonable limit (e.g., 1000), stop checking\n        if n > 1000:\n            return False\n\n# Example usage:\nprint(is_woodall(1))       # True, because 1 * 2^1 - 1 = 1\nprint(is_woodall(7))       # True, because 2 * 2^2 - 1 = 7\nprint(is_woodall(23))      # True, because 3 * 2^3 - 1 = 23\nprint(is_woodall(10))      # False, 10 is not a Woodall number\nprint(is_woodall(0))       # False, 0 is not a Woodall number\nprint(is_woodall(2**100))  # False, very large number (not a Woodall number)\n", "result": "passed", "passed": true}
{"task_id": 21, "requirement": "Edge Case Handling", "completion": "def multiples_of_num(n, m):\n    \"\"\"\n    Find m number of multiples of n.\n\n    Parameters:\n    n (int): The number whose multiples are to be found.\n    m (int): The number of multiples to find.\n\n    Returns:\n    list: A list containing the first m multiples of n. If m is zero, returns an empty list.\n    \"\"\"\n    if m == 0:\n        return []\n    return [n * i for i in range(1, m + 1)]\n\n# Example usage:\nn = 5\nm = 10\nresult = multiples_of_num(n, m)\nprint(f\"The first {m} multiples of {n} are: {result}\")\n\n# Edge case: m is zero\nn = 7\nm = 0\nresult = multiples_of_num(n, m)\nprint(f\"The first {m} multiples of {n} are: {result}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvv_dxjlg.py\", line 19, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "requirement": "Edge Case Handling", "completion": "def find_first_duplicate(arr):\n    # Handle empty list case\n    if not arr:\n        return -1\n    \n    # Create a set to keep track of seen elements\n    seen = set()\n    \n    # Iterate through the array\n    for num in arr:\n        # If the number is already in the set, it's a duplicate\n        if num in seen:\n            return num\n        # Otherwise, add it to the set\n        seen.add(num)\n    \n    # If no duplicates are found, return -1\n    return -1\n\n# Example usage:\narr = [3, 5, 2, 5, 3, 7]\nresult = find_first_duplicate(arr)\nprint(\"First duplicate:\", result)  # Output: First duplicate: 5\n\n# Test with an empty list\nempty_arr = []\nresult = find_first_duplicate(empty_arr)\nprint(\"First duplicate:\", result)  # Output: First duplicate: -1\n", "result": "passed", "passed": true}
{"task_id": 23, "requirement": "Edge Case Handling", "completion": "def maximum_sum(list_of_lists):\n    \"\"\"\n    Find the maximum sum of elements of any sublist in a list of lists.\n    Returns 0 if the input list is empty or if all sublists are empty.\n\n    :param list_of_lists: List of lists containing integers.\n    :return: The maximum sum of elements of any sublist, or 0 if the input is empty or all sublists are empty.\n    \"\"\"\n    if not list_of_lists:  # Check if the input list is empty\n        return 0\n\n    max_sum = 0  # Initialize max_sum to 0\n    all_empty = True  # Assume all sublists are empty initially\n\n    for sublist in list_of_lists:\n        if sublist:  # Check if the sublist is not empty\n            all_empty = False  # At least one sublist is not empty\n            current_sum = sum(sublist)\n            if current_sum > max_sum:\n                max_sum = current_sum\n\n    return max_sum if not all_empty else 0  # Return 0 if all sublists are empty\n\n# Example usage:\nlists = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [10, -2, 1],\n    [7, 8, 9]\n]\n\nempty_lists = [\n    [],\n    [],\n    []\n]\n\nprint(maximum_sum(lists))  # Output: 24 (since [7, 8, 9] has the maximum sum)\nprint(maximum_sum(empty_lists))  # Output: 0 (all sublists are empty)\nprint(maximum_sum([]))  # Output: 0 (input list is empty)\n", "result": "passed", "passed": true}
{"task_id": 24, "requirement": "Edge Case Handling", "completion": "def binary_to_decimal(binary_str):\n    \"\"\"\n    Convert a binary string to its decimal equivalent.\n\n    :param binary_str: A string representing a binary number (e.g., '1010')\n    :return: The decimal equivalent of the binary number. Returns 0 if the input is an empty string.\n    \"\"\"\n    if not binary_str:\n        return 0  # Handle empty string edge case\n\n    decimal = 0\n    length = len(binary_str)\n    \n    for i, bit in enumerate(binary_str):\n        if bit not in ('0', '1'):\n            raise ValueError(\"Invalid binary string. It should contain only '0's and '1's.\")\n        decimal += int(bit) * (2 ** (length - i - 1))\n    \n    return decimal\n\n# Example usage:\nbinary_number = \"1010\"\ndecimal_number = binary_to_decimal(binary_number)\nprint(f\"The decimal equivalent of binary {binary_number} is {decimal_number}\")\n\n# Edge case: Empty string\nempty_binary = \"\"\ndecimal_number = binary_to_decimal(empty_binary)\nprint(f\"The decimal equivalent of binary '{empty_binary}' is {decimal_number}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmprsx_ppu3.py\", line 26, in <module>\n    assert binary_to_decimal(100) == 4\n  File \"/tmp/tmprsx_ppu3.py\", line 7, in binary_to_decimal\n    length = len(binary_str)\nTypeError: object of type 'int' has no len()", "passed": false}
{"task_id": 25, "requirement": "Edge Case Handling", "completion": "from collections import Counter\n\ndef find_product(arr):\n    # If the input list is empty, return 1\n    if not arr:\n        return 1\n    \n    # Count the occurrences of each element in the array\n    element_counts = Counter(arr)\n    \n    # Filter out elements that appear more than once\n    non_repeated_elements = [element for element, count in element_counts.items() if count == 1]\n    \n    # If there are no non-repeated elements, return 1\n    if not non_repeated_elements:\n        return 1\n    \n    # Calculate the product of non-repeated elements\n    product = 1\n    for element in non_repeated_elements:\n        product *= element\n    \n    return product\n\n# Example usage:\narr = [1, 2, 3, 4, 2, 3, 5]\nresult = find_product(arr)\nprint(\"Product of non-repeated elements:\", result)\n\n# Test with an empty list\nempty_arr = []\nresult_empty = find_product(empty_arr)\nprint(\"Product of non-repeated elements in an empty list:\", result_empty)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1i5eoqfz.py\", line 35, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "requirement": "Edge Case Handling", "completion": "def check_k_elements(tuple_list, k):\n    \"\"\"\n    Check if all tuples in the given list have exactly k elements.\n    Handles edge cases such as an empty list or tuples with zero elements.\n\n    :param tuple_list: List of tuples to be checked.\n    :param k: The expected number of elements in each tuple.\n    :return: True if all tuples have exactly k elements, False otherwise.\n             Returns True for an empty list (no tuples to check).\n    \"\"\"\n    if not tuple_list:\n        # If the list is empty, return True (no tuples to check)\n        return True\n    return all(len(t) == k for t in tuple_list)\n\n# Example usage:\n# Test case 1: All tuples have exactly k elements\ntuple_list = [(1, 2), (3, 4), (5, 6)]\nk = 2\nprint(check_k_elements(tuple_list, k))  # Output: True\n\n# Test case 2: One tuple does not have exactly k elements\ntuple_list = [(1, 2, 3), (4, 5), (6, 7)]\nk = 2\nprint(check_k_elements(tuple_list, k))  # Output: False\n\n# Test case 3: Empty list\ntuple_list = []\nk = 2\nprint(check_k_elements(tuple_list, k))  # Output: True\n\n# Test case 4: Tuples with zero elements\ntuple_list = [(), (), ()]\nk = 0\nprint(check_k_elements(tuple_list, k))  # Output: True\n\n# Test case 5: Tuples with zero elements, but k is not zero\ntuple_list = [(), (), ()]\nk = 1\nprint(check_k_elements(tuple_list, k))  # Output: False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6putwatm.py\", line 34, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "requirement": "Edge Case Handling", "completion": "def remove(lst):\n    \"\"\"\n    Removes all digits from each string in a list of strings.\n    Handles edge cases such as an empty list or strings with no digits.\n\n    :param lst: List of strings from which digits need to be removed.\n    :return: List of strings with all digits removed.\n    \"\"\"\n    if not lst:  # Handle empty list\n        return lst\n\n    # Use a list comprehension to iterate over each string in the list\n    # and remove digits using the str.translate method with str.maketrans.\n    return [s.translate(str.maketrans('', '', '0123456789')) for s in lst]\n\n# Example usage:\ninput_list = [\"abc123\", \"4def56\", \"ghi789\", \"jkl0\", \"\", \"no_digits_here\"]\noutput_list = remove(input_list)\nprint(output_list)  # Output: ['abc', 'def', 'ghi', 'jkl', '', 'no_digits_here']\n", "result": "passed", "passed": true}
{"task_id": 28, "requirement": "Edge Case Handling", "completion": "import math\n\ndef binomial_coeff(n, k):\n    \"\"\"\n    Calculate the binomial coefficient C(n, k) which is the number of ways to choose k elements from a set of n elements.\n\n    Parameters:\n    n (int): Total number of elements.\n    k (int): Number of elements to choose.\n\n    Returns:\n    int: The binomial coefficient C(n, k).\n    \"\"\"\n    if k < 0 or k > n:\n        return 0\n    if n == 0:\n        return 1 if k == 0 else 0\n    return math.comb(n, k)\n\n# Example usage:\nprint(f\"C(0, 0) = {binomial_coeff(0, 0)}\")  # Output: 1\nprint(f\"C(0, 1) = {binomial_coeff(0, 1)}\")  # Output: 0\nprint(f\"C(5, 0) = {binomial_coeff(5, 0)}\")  # Output: 1\nprint(f\"C(5, 5) = {binomial_coeff(5, 5)}\")  # Output: 1\nprint(f\"C(5, 2) = {binomial_coeff(5, 2)}\")  # Output: 10\n", "result": "passed", "passed": true}
{"task_id": 29, "requirement": "Edge Case Handling", "completion": "def get_odd_occurrence(arr):\n    \"\"\"\n    Finds the element that occurs an odd number of times in the given list.\n    If the list is empty, returns None.\n\n    :param arr: List of elements\n    :return: The element that occurs an odd number of times, or None if the list is empty\n    \"\"\"\n    # Handle empty list case\n    if not arr:\n        return None\n    \n    # Initialize a dictionary to store the count of each element\n    count_dict = {}\n    \n    # Count the occurrences of each element in the list\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Find the element with an odd count\n    for key, value in count_dict.items():\n        if value % 2 != 0:\n            return key\n    \n    # If no element occurs an odd number of times, return None\n    return None\n\n# Example usage:\narr = [1, 2, 3, 2, 3, 1, 3]\nresult = get_odd_occurrence(arr)\nprint(f\"The element occurring an odd number of times is: {result}\")\n\n# Test with an empty list\nempty_arr = []\nresult_empty = get_odd_occurrence(empty_arr)\nprint(f\"Result for empty list: {result_empty}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp114x5y94.py\", line 35, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "requirement": "Edge Case Handling", "completion": "def count_substring_with_equal_ends(s):\n    if not s:  # Check if the string is empty\n        return 0\n    \n    count = 0\n    n = len(s)\n    \n    # Iterate over all possible substrings\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substring = s[i:j]\n            if substring[0] == substring[-1]:\n                count += 1\n                \n    return count\n\n# Example usage:\ninput_string = \"\"\nresult = count_substring_with_equal_ends(input_string)\nprint(f\"Number of substrings with equal ends: {result}\")  # Output: 0\n", "result": "passed", "passed": true}
{"task_id": 31, "requirement": "Edge Case Handling", "completion": "import heapq\nfrom collections import defaultdict\n\ndef func(lists, k):\n    # Step 0: Check if all input lists are empty\n    if all(len(lst) == 0 for lst in lists):\n        return []\n    \n    # Step 1: Count the frequency of each integer across all lists\n    frequency_map = defaultdict(int)\n    for lst in lists:\n        for num in lst:\n            frequency_map[num] += 1\n    \n    # Step 2: Use a min-heap to keep track of the top k frequent integers\n    min_heap = []\n    for num, freq in frequency_map.items():\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, (freq, num))\n        else:\n            if freq > min_heap[0][0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, (freq, num))\n    \n    # Step 3: Extract the top k frequent integers from the heap\n    top_k = [heapq.heappop(min_heap)[1] for _ in range(len(min_heap))]\n    \n    # Step 4: Return the result in descending order of frequency\n    return top_k[::-1]\n\n# Example usage:\nlists = [\n    [1, 2, 3],\n    [2, 3, 4],\n    [3, 4, 5],\n    [1, 3, 5]\n]\nk = 2\nprint(func(lists, k))  # Output: [3, 1]\n\n# Test case where all lists are empty\nempty_lists = [\n    [],\n    [],\n    []\n]\nprint(func(empty_lists, k))  # Output: []\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8asxvbvl.py\", line 49, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "requirement": "Edge Case Handling", "completion": "number = 2\nprint(f\"The largest prime factor of {number} is: {max_prime_factors(number)}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_tje9cou.py\", line 2, in <module>\n    print(f\"The largest prime factor of {number} is: {max_prime_factors(number)}\")\nNameError: name 'max_prime_factors' is not defined", "passed": false}
{"task_id": 33, "requirement": "Edge Case Handling", "completion": "def decimal_to_binary(decimal_num):\n    # Handle the edge case where the input is zero\n    if decimal_num == 0:\n        return \"0\"\n    \n    binary_num = \"\"\n    while decimal_num > 0:\n        remainder = decimal_num % 2\n        binary_num = str(remainder) + binary_num\n        decimal_num = decimal_num // 2\n    \n    return binary_num\n\n# Example usage:\ndecimal_number = 0\nbinary_number = decimal_to_binary(decimal_number)\nprint(f\"The binary representation of {decimal_number} is {binary_number}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpg0hx786b.py\", line 19, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "requirement": "Edge Case Handling", "completion": "def find_missing(arr):\n    # Handle edge case: empty array\n    if not arr:\n        return None\n    \n    # Handle edge case: missing number is the smallest\n    if arr[0] != 1:\n        return 1\n    \n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # If the middle element is not equal to its index + 1,\n        # then the missing number is on the left side.\n        if arr[mid] != mid + 1:\n            right = mid - 1\n        else:\n            left = mid + 1\n    \n    # The missing number is the value at the left index + 1\n    return left + 1\n\n# Example usage:\narr1 = [1, 2, 3, 4, 6, 7, 8]  # Missing 5\narr2 = [2, 3, 4, 5, 6, 7, 8]  # Missing 1 (smallest number)\narr3 = [1, 2, 3, 4, 5, 6, 7]  # No missing number (returns None)\narr4 = []  # Empty array (returns None)\n\nprint(find_missing(arr1))  # Output: 5\nprint(find_missing(arr2))  # Output: 1\nprint(find_missing(arr3))  # Output: None\nprint(find_missing(arr4))  # Output: None\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3m8e14eu.py\", line 36, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "requirement": "Edge Case Handling", "completion": "def find_rect_num(n):\n    \"\"\"\n    Calculate the n-th rectangular number.\n\n    Parameters:\n    n (int): The position of the rectangular number to find.\n\n    Returns:\n    int: The n-th rectangular number.\n    \"\"\"\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    return n * (n + 1)\n\n# Test case for n = 1\nif __name__ == \"__main__\":\n    n = 1\n    result = find_rect_num(n)\n    print(f\"The {n}-th rectangular number is: {result}\")\n", "result": "passed", "passed": true}
{"task_id": 36, "requirement": "Edge Case Handling", "completion": "def find_nth_digit(numerator, denominator, n):\n    # Handle the case where the numerator is zero\n    if numerator == 0:\n        return 0\n    \n    # Check if the fraction is proper\n    if numerator >= denominator:\n        return \"Error: The fraction is not proper.\"\n    \n    # Calculate the decimal representation\n    decimal = numerator / denominator\n    \n    # Convert the decimal part to a string\n    decimal_str = str(decimal).split('.')[1]\n    \n    # Check if n is within the range of the decimal digits\n    if n > len(decimal_str):\n        return \"Error: n is out of range.\"\n    \n    # Return the nth digit\n    return int(decimal_str[n-1])\n\n# Example usage:\nnumerator = 0\ndenominator = 7\nn = 3\nprint(find_nth_digit(numerator, denominator, n))  # Output: 0\n", "result": "passed", "passed": true}
{"task_id": 37, "requirement": "Edge Case Handling", "completion": "def sort_mixed_list(mixed_list):\n    # Handle empty list\n    if not mixed_list:\n        return []\n    \n    # Separate integers and strings\n    integers = [x for x in mixed_list if isinstance(x, int)]\n    strings = [x for x in mixed_list if isinstance(x, str)]\n    \n    # Sort integers and strings separately\n    integers.sort()\n    strings.sort()\n    \n    # Combine the sorted integers and strings\n    sorted_list = integers + strings\n    \n    return sorted_list\n\n# Example usage:\nmixed_list = [3, 'apple', 1, 'banana', 2, 'cherry']\nsorted_list = sort_mixed_list(mixed_list)\nprint(sorted_list)  # Output: [1, 2, 3, 'apple', 'banana', 'cherry']\n\n# Test with an empty list\nempty_list = []\nsorted_empty_list = sort_mixed_list(empty_list)\nprint(sorted_empty_list)  # Output: []\n", "result": "passed", "passed": true}
{"task_id": 38, "requirement": "Edge Case Handling", "completion": "def div_even_odd(numbers):\n    first_even = None\n    first_odd = None\n    \n    for num in numbers:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Handle cases where the first even number is zero\n    if first_even == 0:\n        return 0\n    \n    # Handle cases where the first odd number is zero (division by zero)\n    if first_odd == 0:\n        return None\n    \n    # If both first_even and first_odd are found and valid, perform the division\n    if first_even is not None and first_odd is not None:\n        return first_even / first_odd\n    else:\n        return None\n\n# Example usage:\nnumbers = [0, 3, 5, 7, 8, 10]\nresult = div_even_odd(numbers)\nprint(result)  # Output: 0.0 (since 0 / 3 = 0.0)\n\nnumbers = [1, 0, 5, 7, 8, 10]\nresult = div_even_odd(numbers)\nprint(result)  # Output: None (division by zero is invalid)\n\nnumbers = [2, 4, 6, 8]\nresult = div_even_odd(numbers)\nprint(result)  # Output: None (no odd number found)\n\nnumbers = [1, 3, 5, 7]\nresult = div_even_odd(numbers)\nprint(result)  # Output: None (no even number found)\n", "result": "passed", "passed": true}
{"task_id": 39, "requirement": "Edge Case Handling", "completion": "from collections import Counter\n\ndef rearrange_string(s: str) -> str:\n    # Count the frequency of each character in the string\n    char_counts = Counter(s)\n    \n    # Find the maximum frequency\n    max_count = max(char_counts.values())\n    \n    # Check if the maximum frequency is more than (len(s) + 1) // 2\n    if max_count > (len(s) + 1) // 2:\n        return \"\"  # Return empty string if rearrangement is not possible\n    \n    # If rearrangement is possible, rearrange the string\n    # Create a list of characters sorted by frequency\n    sorted_chars = sorted(char_counts.keys(), key=lambda x: -char_counts[x])\n    \n    # Initialize a list to hold the rearranged characters\n    rearranged = [None] * len(s)\n    \n    # Fill the rearranged list with characters, ensuring no two adjacent characters are the same\n    index = 0\n    for char in sorted_chars:\n        count = char_counts[char]\n        for _ in range(count):\n            if index >= len(s):\n                index = 1  # Start filling odd indices if even indices are filled\n            rearranged[index] = char\n            index += 2\n    \n    # Convert the list back to a string\n    return ''.join(rearranged)\n\n# Example usage:\nprint(rearrange_string(\"aabb\"))  # Output: \"abab\" or \"baba\"\nprint(rearrange_string(\"aaab\"))  # Output: \"\"\nprint(rearrange_string(\"aaa\"))   # Output: \"\"\nprint(rearrange_string(\"abc\"))   # Output: \"abc\" or any valid rearrangement\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6wdxvsiu.py\", line 40, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "requirement": "Edge Case Handling", "completion": "from collections import Counter\n\ndef freq_element(list_of_lists):\n    # Check if the input is an empty list\n    if not list_of_lists:\n        return {}\n    \n    # Flatten the list of lists into a single list\n    flattened_list = [item for sublist in list_of_lists for item in sublist]\n    \n    # Use Counter to get the frequency of each element\n    frequency = Counter(flattened_list)\n    \n    # Convert Counter to a regular dictionary (optional, but ensures consistency)\n    return dict(frequency)\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\nresult = freq_element(list_of_lists)\nprint(result)  # Output: {1: 1, 2: 2, 3: 3, 4: 2, 5: 1}\n\nempty_list = []\nresult_empty = freq_element(empty_list)\nprint(result_empty)  # Output: {}\n", "result": "passed", "passed": true}
{"task_id": 41, "requirement": "Edge Case Handling", "completion": "def filter_evennumbers(numbers):\n    \"\"\"\n    Filters even numbers from the given list using a lambda function.\n    Returns an empty list if the input list is empty.\n\n    :param numbers: List of integers\n    :return: List of even integers, or an empty list if the input is empty\n    \"\"\"\n    if not numbers:  # Check if the input list is empty\n        return []\n    return list(filter(lambda x: x % 2 == 0, numbers))\n\n# Example usage:\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven_numbers = filter_evennumbers(numbers)\nprint(even_numbers)  # Output: [2, 4, 6, 8, 10]\n\nempty_list = []\nresult = filter_evennumbers(empty_list)\nprint(result)  # Output: []\n", "result": "passed", "passed": true}
{"task_id": 42, "requirement": "Edge Case Handling", "completion": "from collections import Counter\n\ndef find_sum(arr):\n    # Handle empty array case\n    if not arr:\n        return 0\n    \n    # Count the occurrences of each element in the array\n    element_counts = Counter(arr)\n    \n    # Sum the elements that appear more than once\n    sum_repeated = sum(element for element, count in element_counts.items() if count > 1)\n    \n    return sum_repeated\n\n# Example usage:\narr1 = [1, 2, 3, 4, 2, 3, 5, 6, 7, 7]\narr2 = []  # Empty array\narr3 = [1, 2, 3]  # No repeated elements\n\nprint(\"Sum of repeated elements in arr1:\", find_sum(arr1))  # Output: 12\nprint(\"Sum of repeated elements in arr2:\", find_sum(arr2))  # Output: 0\nprint(\"Sum of repeated elements in arr3:\", find_sum(arr3))  # Output: 0\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp65jjky0d.py\", line 25, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Edge Case Handling", "completion": "import re\n\ndef text_match(text):\n    # Check if the input string is empty\n    if not text:\n        return 'Not matched!'\n    \n    # Define the regex pattern to match sequences of lowercase letters joined by an underscore\n    pattern = r'[a-z]+_[a-z]+'\n    \n    # Search for the pattern in the input text\n    matches = re.findall(pattern, text)\n    \n    # Return the matches if found, otherwise return 'Not matched!'\n    return matches if matches else 'Not matched!'\n\n# Example usage:\nprint(text_match(\"hello_world this_is_a_test\"))  # Output: ['hello_world', 'this_is_a_test']\nprint(text_match(\"\"))                            # Output: Not matched!\nprint(text_match(\"NoMatchHere\"))                 # Output: Not matched!\nprint(text_match(\"example_text\"))                # Output: ['example_text']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjf2c3wh3.py\", line 23, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 44, "requirement": "Edge Case Handling", "completion": "import re\n\ndef text_match_string(word, text):\n    \"\"\"\n    Check if the given word appears at the beginning of the text.\n\n    Parameters:\n    word (str): The word to search for at the beginning of the text.\n    text (str): The text in which to search for the word.\n\n    Returns:\n    bool: True if the word is found at the beginning of the text, False otherwise.\n    \"\"\"\n    # Handle edge case: if the word is an empty string\n    if not word:\n        return not text.strip()  # Return True only if the text is also empty or contains only spaces\n\n    # Create a regular expression pattern that matches the word at the beginning of the string\n    pattern = r'^' + re.escape(word)\n    \n    # Search for the pattern in the text\n    match = re.search(pattern, text)\n    \n    # Return True if a match is found, otherwise False\n    return bool(match)\n\n# Example usage:\nprint(text_match_string(\"hello\", \"hello world\"))  # Output: True\nprint(text_match_string(\"hello\", \"world hello\"))  # Output: False\nprint(text_match_string(\"\", \"\"))                 # Output: True (both word and text are empty)\nprint(text_match_string(\"\", \"   \"))              # Output: True (word is empty, text contains only spaces)\nprint(text_match_string(\"hello\", \"\"))            # Output: False (text is empty)\nprint(text_match_string(\"hello\", \"   \"))         # Output: False (text contains only spaces)\nprint(text_match_string(\"\", \"hello\"))            # Output: False (word is empty, text is not empty)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpnminzzwi.py\", line 27, in <module>\n    assert text_match_string(\" python\")==('Not matched!')\nTypeError: text_match_string() missing 1 required positional argument: 'text'", "passed": false}
{"task_id": 46, "requirement": "Edge Case Handling", "completion": "def test_distinct(numbers):\n    \"\"\"\n    Determine whether all the numbers in the list are distinct.\n\n    :param numbers: List of numbers (integers, floats, etc.)\n    :return: True if all numbers are distinct or the list is empty/has a single element, False otherwise\n    \"\"\"\n    # Handle edge cases: empty list or single element\n    if len(numbers) <= 1:\n        return True\n    \n    # Convert the list to a set to remove duplicates\n    unique_numbers = set(numbers)\n    \n    # Compare the length of the set to the length of the original list\n    return len(unique_numbers) == len(numbers)\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(test_distinct([]))  # Output: True (empty list)\n    print(test_distinct([42]))  # Output: True (single element)\n    print(test_distinct([1, 2, 3, 4, 5]))  # Output: True (all distinct)\n    print(test_distinct([1, 2, 2, 3, 4]))  # Output: False (duplicates exist)\n    print(test_distinct([10, 20, 30, 40, 50]))  # Output: True (all distinct)\n    print(test_distinct([10, 20, 30, 40, 10]))  # Output: False (duplicates exist)\n", "result": "passed", "passed": true}
{"task_id": 47, "requirement": "Edge Case Handling", "completion": "def compute_last_digit(a: int, b: int) -> int:\n    if a < b:\n        return 0  # a! / b! is not an integer\n    elif a == b:\n        return 1  # a! / b! = 1\n    else:\n        # Compute the product (b+1) * (b+2) * ... * a modulo 10\n        result = 1\n        for i in range(b + 1, a + 1):\n            result = (result * i) % 10\n            if result == 0:\n                break  # If result is 0, it will remain 0\n        return result\n\n# Example usage:\nprint(compute_last_digit(5, 3))  # Output: 0 (since 5! / 3! = 20, last digit is 0)\nprint(compute_last_digit(7, 7))  # Output: 1 (since 7! / 7! = 1, last digit is 1)\nprint(compute_last_digit(4, 5))  # Output: 0 (since 4! / 5! is not an integer)\nprint(compute_last_digit(10, 5))  # Output: 2 (since 10! / 5! = 30240, last digit is 0)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpih29obg3.py\", line 21, in <module>\n    assert compute_last_digit(2,4) == 2\nAssertionError", "passed": false}
{"task_id": 48, "requirement": "Edge Case Handling", "completion": "def odd_bit_set_number(n):\n    # Handle the edge case where n is 0\n    if n == 0:\n        return 1\n    \n    # Create a mask with all odd bits set to 1\n    # The mask will be 0xAA...AA in hexadecimal, which is 10101010...1010 in binary\n    # For example, for 8 bits, the mask is 0xAA (10101010)\n    # We can generate the mask by shifting 1 to the left and ORing it with itself\n    mask = 0\n    bit = 1\n    while bit <= n:\n        mask |= bit\n        bit <<= 2  # Move to the next odd bit\n    \n    # Set all odd bits of n by ORing it with the mask\n    result = n | mask\n    return result\n\n# Example usage:\nprint(odd_bit_set_number(0))        # Output: 1 (binary: 0b1)\nprint(odd_bit_set_number(0b101010)) # Output: 63 (binary: 0b111111)\nprint(odd_bit_set_number(0b111111)) # Output: 63 (binary: 0b111111)\nprint(odd_bit_set_number(0b000000)) # Output: 21 (binary: 0b10101)\n", "result": "passed", "passed": true}
{"task_id": 49, "requirement": "Edge Case Handling", "completion": "def specified_element(two_d_list, index=0):\n    \"\"\"\n    Extracts every first or specified element from a given two-dimensional list.\n\n    Args:\n        two_d_list (list of lists): The input two-dimensional list.\n        index (int, optional): The index of the element to extract from each sublist. Defaults to 0.\n\n    Returns:\n        list: A list containing the specified elements from each sublist where the index is valid.\n    \"\"\"\n    result = []\n    for sublist in two_d_list:\n        if len(sublist) > index:  # Check if the index is valid for the current sublist\n            result.append(sublist[index])\n    return result\n", "result": "passed", "passed": true}
{"task_id": 50, "requirement": "Edge Case Handling", "completion": "def min_length_list(lists):\n    \"\"\"\n    Finds the list with the minimum length from a given list of lists.\n    If all lists have the same length, returns the first list.\n\n    :param lists: List of lists\n    :return: The list with the minimum length (or the first list if all have the same length)\n    \"\"\"\n    if not lists:\n        return None  # Handle empty input case\n\n    # Use min with a lambda function to find the list with the minimum length\n    return min(lists, key=lambda x: len(x))\n\n# Example usage:\nlists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]  # All lists have the same length\nresult = min_length_list(lists)\nprint(result)  # Output: [1, 2, 3] (the first list)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgq2a8p1h.py\", line 14, in <module>\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nAssertionError", "passed": false}
{"task_id": 51, "requirement": "Edge Case Handling", "completion": "def check_equilateral(side1, side2, side3):\n    \"\"\"\n    Check if a triangle is equilateral.\n\n    Parameters:\n    side1 (float): Length of the first side of the triangle.\n    side2 (float): Length of the second side of the triangle.\n    side3 (float): Length of the third side of the triangle.\n\n    Returns:\n    bool: True if the triangle is equilateral, False otherwise.\n    \"\"\"\n    # Check if all sides are zero\n    if side1 == 0 and side2 == 0 and side3 == 0:\n        return False\n    # Check if all sides are equal and greater than zero\n    if side1 == side2 == side3 and side1 > 0:\n        return True\n    return False\n\n# Example usage:\nprint(check_equilateral(5, 5, 5))  # Output: True\nprint(check_equilateral(5, 4, 5))  # Output: False\nprint(check_equilateral(0, 0, 0))  # Output: False\n", "result": "passed", "passed": true}
{"task_id": 52, "requirement": "Edge Case Handling", "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram. Returns 0 if base or height is zero.\n    \"\"\"\n    if base == 0 or height == 0:\n        return 0\n    return base * height\n\n# Example usage:\nbase = 5.0\nheight = 3.0\narea = parallelogram_area(base, height)\nprint(f\"The area of the parallelogram is: {area}\")\n\n# Edge case examples\nbase_zero = 0.0\nheight_zero = 0.0\narea_zero_base = parallelogram_area(base_zero, height)\narea_zero_height = parallelogram_area(base, height_zero)\narea_both_zero = parallelogram_area(base_zero, height_zero)\n\nprint(f\"Area when base is zero: {area_zero_base}\")\nprint(f\"Area when height is zero: {area_zero_height}\")\nprint(f\"Area when both base and height are zero: {area_both_zero}\")\n", "result": "passed", "passed": true}
{"task_id": 53, "requirement": "Edge Case Handling", "completion": "def check_equality(s):\n    # Check if the string is empty\n    if not s:\n        return 'Equal'\n    \n    # Compare the first and last characters\n    if s[0] == s[-1]:\n        return 'Equal'\n    else:\n        return 'Not Equal'\n\n# Example usage:\nprint(check_equality(\"hello\"))  # Output: Not Equal\nprint(check_equality(\"racecar\"))  # Output: Equal\nprint(check_equality(\"a\"))  # Output: Equal\nprint(check_equality(\"\"))  # Output: Equal\n", "result": "passed", "passed": true}
{"task_id": 54, "requirement": "Edge Case Handling", "completion": "def counting_sort(arr):\n    # Handle edge cases: empty list or list with a single element\n    if len(arr) <= 1:\n        return arr\n    \n    # Find the maximum and minimum elements in the array to determine the range\n    max_val = max(arr)\n    min_val = min(arr)\n    \n    # Create a count array to store the count of each unique element\n    count = [0] * (max_val - min_val + 1)\n    \n    # Store the count of each element in the count array\n    for num in arr:\n        count[num - min_val] += 1\n    \n    # Modify the count array such that each element at each index\n    # stores the sum of previous counts. This will help in placing\n    # the elements in the correct position in the output array.\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    \n    # Create an output array to store the sorted elements\n    output = [0] * len(arr)\n    \n    # Build the output array by placing elements in their correct position\n    for num in reversed(arr):\n        output[count[num - min_val] - 1] = num\n        count[num - min_val] -= 1\n    \n    # Copy the sorted elements back to the original array\n    for i in range(len(arr)):\n        arr[i] = output[i]\n    \n    return arr\n\n# Example usage:\narr1 = [4, 2, 2, 8, 3, 3, 1]\narr2 = []\narr3 = [42]\n\nprint(\"Sorted array 1:\", counting_sort(arr1))  # Output: [1, 2, 2, 3, 3, 4, 8]\nprint(\"Sorted array 2:\", counting_sort(arr2))  # Output: []\nprint(\"Sorted array 3:\", counting_sort(arr3))  # Output: [42]\n", "result": "passed", "passed": true}
{"task_id": 55, "requirement": "Edge Case Handling", "completion": "def tn_gp(a1, r, n):\n    \"\"\"\n    Calculate the t-nth term of a geometric series.\n\n    Parameters:\n    a1 (float): The first term of the geometric series.\n    r (float): The common ratio of the geometric series.\n    n (int): The term number to find.\n\n    Returns:\n    float: The t-nth term of the geometric series.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Term number 'n' must be a positive integer.\")\n    \n    if r == 0:\n        if n == 1:\n            return a1  # First term is always a1\n        else:\n            return 0   # All terms beyond the first are zero\n    \n    return a1 * (r ** (n - 1))\n\n# Example usage:\na1 = 2  # First term\nr = 0   # Common ratio\nn = 4   # Term number\n\nresult = tn_gp(a1, r, n)\nprint(f\"The {n}-th term of the geometric series is: {result}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8f17g9j5.py\", line 22, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "requirement": "Edge Case Handling", "completion": "def check(n):\n    # Handle edge case for zero\n    if n == 0:\n        return True  # 0 is one less than twice its reverse (0 == 2*0 - 1)\n\n    # Reverse the number\n    reversed_n = int(str(n)[::-1])\n    \n    # Check if the number is one less than twice its reverse\n    return n == 2 * reversed_n - 1\n\n# Example usage:\nnumbers = [0, 1, 9, 10, 21, 23, 19, 123, 12321]\nfor number in numbers:\n    if check(number):\n        print(f\"{number} is one less than twice its reverse.\")\n    else:\n        print(f\"{number} is not one less than twice its reverse.\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpu_oj6sui.py\", line 23, in <module>\n    assert check(0) == False\nAssertionError", "passed": false}
{"task_id": 57, "requirement": "Edge Case Handling", "completion": "def find_max_num(digits):\n    # Handle the edge case where the list is empty\n    if not digits:\n        return 0\n    \n    # Convert each digit to a string to facilitate sorting\n    str_digits = [str(d) for d in digits]\n    \n    # Sort the digits in descending order to form the largest number\n    str_digits.sort(reverse=True)\n    \n    # Join the sorted digits into a single string and convert it to an integer\n    max_num = int(''.join(str_digits))\n    \n    return max_num\n\n# Example usage:\ndigits = [1, 2, 3, 4]\nprint(find_max_num(digits))  # Output: 4321\n\ndigits = [9, 8, 7, 6]\nprint(find_max_num(digits))  # Output: 9876\n\ndigits = [5, 5, 5, 5]\nprint(find_max_num(digits))  # Output: 5555\n\ndigits = []\nprint(find_max_num(digits))  # Output: 0\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgztb6gjn.py\", line 30, in <module>\n    assert find_max_num([1,2,3],3) == 321\nTypeError: find_max_num() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 58, "requirement": "Edge Case Handling", "completion": "def opposite_signs(x, y):\n    \"\"\"\n    Check if two integers have opposite signs.\n\n    Parameters:\n    x (int): The first integer.\n    y (int): The second integer.\n\n    Returns:\n    bool: True if the integers have opposite signs, False otherwise.\n    \"\"\"\n    return (x < 0 and y >= 0) or (x >= 0 and y < 0)\n\n# Example usage:\nprint(opposite_signs(5, -3))    # Output: True\nprint(opposite_signs(-4, -7))   # Output: False\nprint(opposite_signs(10, 20))   # Output: False\nprint(opposite_signs(0, 5))     # Output: False (0 is considered non-negative)\nprint(opposite_signs(0, -5))    # Output: True (0 is considered non-negative)\nprint(opposite_signs(0, 0))     # Output: False (both are zero)\nprint(opposite_signs(2147483647, -2147483648))  # Output: True (large integers)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjni0hoh1.py\", line 18, in <module>\n    assert opposite_signs(0, 1) == True\nAssertionError", "passed": false}
{"task_id": 59, "requirement": "Edge Case Handling", "completion": "def is_octagonal(n):\n    \"\"\"\n    Calculate the nth octagonal number.\n\n    Parameters:\n    n (int): The position of the octagonal number to calculate.\n\n    Returns:\n    int: The nth octagonal number.\n    \"\"\"\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return n * (3 * n - 2)\n\n# Example usage:\nif __name__ == \"__main__\":\n    n = 1\n    print(f\"The {n}th octagonal number is: {is_octagonal(n)}\")\n", "result": "passed", "passed": true}
{"task_id": 60, "requirement": "Edge Case Handling", "completion": "def max_len_sub(arr):\n    # If the input array is empty, return 0\n    if not arr:\n        return 0\n    \n    # Dictionary to store the length of the longest subsequence ending with a particular value\n    dp = {}\n    max_length = 1  # Initialize the maximum length to 1 (minimum possible subsequence length)\n    \n    for num in arr:\n        # Initialize the length of the subsequence ending with num as 1\n        dp[num] = 1\n        \n        # Check if num - 1 exists in the dictionary\n        if num - 1 in dp:\n            dp[num] = max(dp[num], dp[num - 1] + 1)\n        \n        # Check if num + 1 exists in the dictionary\n        if num + 1 in dp:\n            dp[num] = max(dp[num], dp[num + 1] + 1)\n        \n        # Update the maximum length found so far\n        max_length = max(max_length, dp[num])\n    \n    return max_length\n\n# Example usage:\narr = [1, 2, 3, 4, 5, 3, 2]\nprint(max_len_sub(arr))  # Output: 5 (Subsequence: [1, 2, 3, 4, 5])\n\narr = [10, 9, 4, 5, 4, 8, 6]\nprint(max_len_sub(arr))  # Output: 3 (Subsequence: [4, 5, 4] or [9, 8, 6])\n\narr = []\nprint(max_len_sub(arr))  # Output: 0 (Empty array, no subsequences possible)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2bjnlb7t.py\", line 37, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}

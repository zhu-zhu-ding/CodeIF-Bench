{"task_id": 11, "requirement": "Annotation Coverage", "completion": "def remove_occ(s: str, ch: str) -> str:\n    \"\"\"\n    Removes the first and last occurrence of the character `ch` from the string `s`.\n\n    Args:\n        s (str): The input string.\n        ch (str): The character to remove.\n\n    Returns:\n        str: The modified string with the first and last occurrence of `ch` removed.\n    \"\"\"\n    # Find the index of the first occurrence\n    first_index = s.find(ch)\n    \n    # Find the index of the last occurrence\n    last_index = s.rfind(ch)\n    \n    # If the character is not found, return the original string\n    if first_index == -1 or last_index == -1:\n        return s\n    \n    # Remove the first occurrence\n    s = s[:first_index] + s[first_index+1:]\n    \n    # Since we removed the first occurrence, the last occurrence index might have shifted\n    # So we need to find the last occurrence again\n    last_index = s.rfind(ch)\n    \n    # Remove the last occurrence\n    s = s[:last_index] + s[last_index+1:]\n    \n    return s\n\n# Example usage:\ninput_string = \"banana\"\ncharacter = \"a\"\nresult = remove_occ(input_string, character)\nprint(result)  # Output: \"bnna\"\n", "result": "passed", "passed": true}
{"task_id": 12, "requirement": "Annotation Coverage", "completion": "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n\n    :param matrix: A 2D list of integers (the matrix to be sorted).\n    :return: A 2D list of integers (the sorted matrix).\n    \"\"\"\n    # Calculate the sum of each row and store it along with the row\n    rows_with_sum = [(sum(row), row) for row in matrix]\n    \n    # Sort the rows based on the sum\n    rows_with_sum.sort(key=lambda x: x[0])\n    \n    # Extract the sorted rows\n    sorted_matrix = [row for (_, row) in rows_with_sum]\n    \n    return sorted_matrix\n\n# Example usage:\nmatrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n    [1, 1, 1]\n]\n\nsorted_matrix = sort_matrix(matrix)\nprint(\"Sorted Matrix:\")\nfor row in sorted_matrix:\n    print(row)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpbyabgr2h.py\", line 36, in <module>\n    test_annotations()\n  File \"/tmp/tmpbyabgr2h.py\", line 35, in test_annotations\n    assert hints == {'matrix': 'list[list[int]]', 'return': 'list[list[int]]'}\nAssertionError", "passed": false}
{"task_id": 13, "requirement": "Annotation Coverage", "completion": "from collections import Counter\nfrom typing import List, Tuple\n\ndef count_common(words: List[str], top_n: int = 10) -> List[Tuple[str, int]]:\n    \"\"\"\n    Count the most common words in a list of words.\n\n    Parameters:\n    words (List[str]): A list of words.\n    top_n (int): The number of most common words to return. Default is 10.\n\n    Returns:\n    List[Tuple[str, int]]: A list of tuples containing the most common words and their counts.\n    \"\"\"\n    # Use Counter to count the occurrences of each word\n    counter = Counter(words)\n    \n    # Get the top_n most common words\n    most_common = counter.most_common(top_n)\n    \n    return most_common\n\n# Example usage:\nwords = [\n    'python', 'programming', 'code', 'data', 'science',\n    'machine', 'learning', 'algorithm', 'function', 'variable',\n    'loop', 'list', 'python', 'code', 'data', 'python', 'code'\n]\n\nmost_common_words = count_common(words, top_n=5)\nprint(most_common_words)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgkx91av7.py\", line 24, in <module>\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nAssertionError", "passed": false}
{"task_id": 14, "requirement": "Annotation Coverage", "completion": "def find_volume(base_area: float, height: float, length: float) -> float:\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base_area (float): The area of the triangular base.\n    height (float): The height of the triangular base.\n    length (float): The length (or height) of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    # Calculate the volume of the prism\n    volume = base_area * length\n    return volume\n\n# Example usage:\nbase_area = 10.0  # area of the triangular base\nheight = 4.0  # height of the triangular base (not used in calculation)\nlength = 5.0  # length of the prism\n\nvolume = find_volume(base_area, height, length)\nprint(f\"The volume of the triangular prism is: {volume}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpf3uadye9.py\", line 15, in <module>\n    assert find_volume(10,8,6) == 240\nAssertionError", "passed": false}
{"task_id": 15, "requirement": "Annotation Coverage", "completion": "import re\nfrom typing import List\n\ndef split_lowerstring(text: str) -> List[str]:\n    \"\"\"\n    Splits a string at lowercase letters and returns a list of substrings.\n\n    Args:\n        text (str): The input string to be split.\n\n    Returns:\n        List[str]: A list of substrings resulting from splitting the input string at lowercase letters.\n    \"\"\"\n    # Use regular expression to split the string at lowercase letters\n    return re.split('[a-z]', text)\n\n# Example usage:\ninput_string = \"HelloWorldPython\"\nresult = split_lowerstring(input_string)\nprint(result)  # Output: ['H', 'W', 'P']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpf1kwmk3i.py\", line 14, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "requirement": "Annotation Coverage", "completion": "import re\nfrom typing import Optional\n\ndef text_lowercase_underscore(text: str) -> str:\n    \"\"\"\n    Find the first sequence of lowercase letters joined with an underscore.\n\n    :param text: The input string to search for sequences.\n    :return: The first matching sequence as a string, or an empty string if no match is found.\n    \"\"\"\n    # Regular expression pattern to match lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    \n    # Search for the first match in the input text\n    match = re.search(pattern, text)\n    \n    # Return the matched sequence if found, otherwise return an empty string\n    return match.group(0) if match else \"\"\n\n# Example usage:\ntext = \"hello_world this_is_a_test example_123 another_example\"\nresult = text_lowercase_underscore(text)\nprint(result)  # Output: 'hello_world'\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpbh3i6doo.py\", line 20, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "requirement": "Annotation Coverage", "completion": "def square_perimeter(a: int) -> int:\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Parameters:\n    a (int): The length of one side of the square.\n\n    Returns:\n    int: The perimeter of the square.\n    \"\"\"\n    return 4 * a\n\n# Example usage:\n# side = 5\n# perimeter = square_perimeter(side)\n# print(f\"The perimeter of the square with side length {side} is {perimeter}.\")\n", "result": "passed", "passed": true}
{"task_id": 18, "requirement": "Annotation Coverage", "completion": "def remove_dirty_chars(string: str, second_string: str) -> str:\n    # Create a set of characters to remove for faster lookup\n    dirty_set = set(second_string)\n    \n    # Use a list comprehension to filter out the dirty characters\n    cleaned_string = ''.join([char for char in string if char not in dirty_set])\n    \n    return cleaned_string\n\n# Example usage:\nstring = \"hello world\"\ndirty_chars = \"lo\"\nresult = remove_dirty_chars(string, dirty_chars)\nprint(result)  # Output: \"he wrd\"\n", "result": "passed", "passed": true}
{"task_id": 19, "requirement": "Annotation Coverage", "completion": "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    \"\"\"\n    Check if the given array contains any duplicate elements.\n\n    Parameters:\n    arraynums (List[int]): The array of integers to check.\n\n    Returns:\n    bool: True if there are duplicates, False otherwise.\n    \"\"\"\n    # Use a set to store unique elements\n    unique_elements = set()\n    \n    for num in arraynums:\n        if num in unique_elements:\n            return True\n        unique_elements.add(num)\n    \n    return False\n\n# Example usage:\nif __name__ == \"__main__\":\n    array1 = [1, 2, 3, 4, 5]\n    array2 = [1, 2, 3, 4, 2]\n    \n    print(test_duplicate(array1))  # Output: False\n    print(test_duplicate(array2))  # Output: True\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpw7u88pxa.py\", line 26, in <module>\n    assert test_duplicate.__annotations__ == {'arraynums': list, 'return': bool}\nAssertionError", "passed": false}
{"task_id": 20, "requirement": "Annotation Coverage", "completion": "def is_woodall(x: int) -> bool:\n    if x < 1:\n        return False\n    \n    n = 1\n    while True:\n        woodall = n * (2 ** n) - 1\n        if woodall == x:\n            return True\n        if woodall > x:\n            return False\n        n += 1\n\n# Example usage:\nprint(is_woodall(1))    # True, because 1 * 2^1 - 1 = 1\nprint(is_woodall(7))    # True, because 2 * 2^2 - 1 = 7\nprint(is_woodall(23))   # True, because 3 * 2^3 - 1 = 23\nprint(is_woodall(10))   # False, 10 is not a Woodall number\n", "result": "passed", "passed": true}
{"task_id": 21, "requirement": "Annotation Coverage", "completion": "def multiples_of_num(n: int, m: int) -> list:\n    \"\"\"\n    Find m number of multiples of n.\n\n    Parameters:\n    n (int): The number whose multiples are to be found.\n    m (int): The number of multiples to find.\n\n    Returns:\n    list: A list containing the first m multiples of n.\n    \"\"\"\n    return [n * i for i in range(1, m + 1)]\n\n# Example usage:\nn = 5\nm = 10\nresult = multiples_of_num(n, m)\nprint(f\"The first {m} multiples of {n} are: {result}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_3phudad.py\", line 11, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "requirement": "Annotation Coverage", "completion": "from typing import List, Optional\n\ndef find_first_duplicate(nums: List[int]) -> Optional[int]:\n    # Create a set to keep track of seen elements\n    seen = set()\n    \n    # Iterate through the array\n    for num in nums:\n        # If the number is already in the set, it's a duplicate\n        if num in seen:\n            return num\n        # Otherwise, add it to the set\n        seen.add(num)\n    \n    # If no duplicates are found, return None\n    return None\n\n# Example usage:\narr = [3, 5, 2, 5, 3, 7]\nresult = find_first_duplicate(arr)\nprint(\"First duplicate:\", result)  # Output: First duplicate: 5\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpb0ile3ca.py\", line 24, in <module>\n    assert find_first_duplicate([1, 2, 3, 4])==-1\nAssertionError", "passed": false}
{"task_id": 23, "requirement": "Annotation Coverage", "completion": "from typing import List\n\ndef maximum_sum(list1: List[List[int]]) -> int:\n    \"\"\"\n    Find the maximum sum of elements of any sublist in a list of lists.\n\n    :param list1: List of lists containing integers.\n    :return: The maximum sum of elements of any sublist.\n    \"\"\"\n    if not list1:\n        return 0  # Return 0 if the list of lists is empty\n\n    max_sum = float('-inf')  # Initialize with negative infinity to handle all possible sums\n\n    for sublist in list1:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum\n\n# Example usage:\nlists = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [10, -2, 1],\n    [7, 8, 9]\n]\n\nprint(maximum_sum(lists))  # Output: 24 (since [7, 8, 9] has the maximum sum)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8j37r4ti.py\", line 30, in <module>\n    assert maximum_sum.__annotations__ == {'list1': 'list[list[int]]', 'return': 'int'}\nAssertionError", "passed": false}
{"task_id": 24, "requirement": "Annotation Coverage", "completion": "def binary_to_decimal(binary: str) -> int:\n    \"\"\"\n    Convert a binary string to its decimal equivalent.\n\n    :param binary: A string representing a binary number (e.g., '1010')\n    :return: The decimal equivalent of the binary number as an integer\n    \"\"\"\n    decimal = 0\n    length = len(binary)\n    \n    for i, bit in enumerate(binary):\n        if bit not in ('0', '1'):\n            raise ValueError(\"Invalid binary string. It should contain only '0's and '1's.\")\n        decimal += int(bit) * (2 ** (length - i - 1))\n    \n    return decimal\n\n# Example usage:\nbinary_number = \"1010\"\ndecimal_number = binary_to_decimal(binary_number)\nprint(f\"The decimal equivalent of binary {binary_number} is {decimal_number}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpblvdw_kj.py\", line 18, in <module>\n    assert binary_to_decimal(100) == 4\n  File \"/tmp/tmpblvdw_kj.py\", line 4, in binary_to_decimal\n    length = len(binary)\nTypeError: object of type 'int' has no len()", "passed": false}
{"task_id": 25, "requirement": "Annotation Coverage", "completion": "from collections import Counter\nfrom typing import List\n\ndef find_product(arr: List[int], n: int) -> int:\n    # Count the occurrences of each element in the array\n    element_counts = Counter(arr)\n    \n    # Filter out elements that appear more than once\n    non_repeated_elements = [element for element, count in element_counts.items() if count == 1]\n    \n    # Calculate the product of non-repeated elements\n    product = 1\n    for element in non_repeated_elements:\n        product *= element\n    \n    return product\n\n# Example usage:\narr = [1, 2, 3, 4, 2, 3, 5]\nn = len(arr)\nresult = find_product(arr, n)\nprint(\"Product of non-repeated elements:\", result)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpb7sv7bz0.py\", line 27, in <module>\n    assert find_product.__annotations__ == {'arr': list, 'n': int, 'return': int}\nAssertionError", "passed": false}
{"task_id": 26, "requirement": "Annotation Coverage", "completion": "from typing import List, Tuple\n\ndef check_k_elements(test_list: List[Tuple], K: int) -> bool:\n    \"\"\"\n    Check if all tuples in the given list have exactly K elements.\n\n    :param test_list: List of tuples to be checked.\n    :param K: The expected number of elements in each tuple.\n    :return: True if all tuples have exactly K elements, False otherwise.\n    \"\"\"\n    return all(len(t) == K for t in test_list)\n\n# Example usage:\ntuple_list = [(1, 2), (3, 4), (5, 6)]\nk = 2\nprint(check_k_elements(tuple_list, k))  # Output: True\n\ntuple_list = [(1, 2, 3), (4, 5), (6, 7)]\nk = 2\nprint(check_k_elements(tuple_list, k))  # Output: False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2fr4jvy2.py\", line 16, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "requirement": "Annotation Coverage", "completion": "def remove(lst: list[str]) -> list[str]:\n    \"\"\"\n    Removes all digits from each string in a list of strings.\n\n    :param lst: List of strings from which digits need to be removed.\n    :return: List of strings with all digits removed.\n    \"\"\"\n    # Use a list comprehension to iterate over each string in the list\n    # and remove digits using the str.translate method with str.maketrans.\n    return [s.translate(str.maketrans('', '', '0123456789')) for s in lst]\n\n# Example usage:\ninput_list = [\"abc123\", \"4def56\", \"ghi789\", \"jkl0\"]\noutput_list = remove(input_list)\nprint(output_list)  # Output: ['abc', 'def', 'ghi', 'jkl']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpzie1tx48.py\", line 15, in <module>\n    assert remove.__annotations__ == {'list': list[str], 'return': list[str]}\nAssertionError", "passed": false}
{"task_id": 28, "requirement": "Annotation Coverage", "completion": "import math\n\ndef binomial_coeff(n: int, k: int) -> int:\n    \"\"\"\n    Calculate the binomial coefficient C(n, k) which is the number of ways to choose k elements from a set of n elements.\n\n    Parameters:\n    n (int): Total number of elements.\n    k (int): Number of elements to choose.\n\n    Returns:\n    int: The binomial coefficient C(n, k).\n    \"\"\"\n    if k < 0 or k > n:\n        return 0\n    return math.comb(n, k)\n\n# Example usage:\nn = 5\nk = 2\nprint(f\"C({n}, {k}) = {binomial_coeff(n, k)}\")\n", "result": "passed", "passed": true}
{"task_id": 29, "requirement": "Annotation Coverage", "completion": "from typing import List\n\ndef get_odd_occurrence(arr: List[int], arr_size: int) -> int:\n    \"\"\"\n    Finds the element that occurs an odd number of times in the given list.\n\n    :param arr: List of integers\n    :param arr_size: Size of the list\n    :return: The element that occurs an odd number of times\n    \"\"\"\n    # Initialize a dictionary to store the count of each element\n    count_dict = {}\n    \n    # Count the occurrences of each element in the list\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Find the element with an odd count\n    for key, value in count_dict.items():\n        if value % 2 != 0:\n            return key\n    \n    # If no element occurs an odd number of times, return -1 (assuming -1 is not a valid element in the list)\n    return -1\n\n# Example usage:\narr = [1, 2, 3, 2, 3, 1, 3]\narr_size = len(arr)\nresult = get_odd_occurrence(arr, arr_size)\nprint(f\"The element occurring an odd number of times is: {result}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9pufcdri.py\", line 32, in <module>\n    assert get_odd_occurrence.__annotations__ == {'arr': list, 'arr_size': int, 'return': int}\nAssertionError", "passed": false}
{"task_id": 30, "requirement": "Annotation Coverage", "completion": "def count_substring_with_equal_ends(s: str) -> int:\n    count = 0\n    n = len(s)\n    \n    # Iterate over all possible substrings\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substring = s[i:j]\n            if substring[0] == substring[-1]:\n                count += 1\n                \n    return count\n\n# Example usage:\ninput_string = \"abcab\"\nresult = count_substring_with_equal_ends(input_string)\nprint(f\"Number of substrings with equal ends: {result}\")\n", "result": "passed", "passed": true}
{"task_id": 31, "requirement": "Annotation Coverage", "completion": "import heapq\nfrom collections import defaultdict\nfrom typing import List\n\ndef func(nums: List[List[int]], k: int) -> List[int]:\n    # Step 1: Count the frequency of each integer across all lists\n    frequency_map = defaultdict(int)\n    for lst in nums:\n        for num in lst:\n            frequency_map[num] += 1\n    \n    # Step 2: Use a min-heap to keep track of the top k frequent integers\n    min_heap = []\n    for num, freq in frequency_map.items():\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, (freq, num))\n        else:\n            if freq > min_heap[0][0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, (freq, num))\n    \n    # Step 3: Extract the top k frequent integers from the heap\n    top_k = [heapq.heappop(min_heap)[1] for _ in range(len(min_heap))]\n    \n    # Step 4: Return the result in descending order of frequency\n    return top_k[::-1]\n\n# Example usage:\nlists = [\n    [1, 2, 3],\n    [2, 3, 4],\n    [3, 4, 5],\n    [1, 3, 5]\n]\nk = 2\nprint(func(lists, k))  # Output: [3, 1]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkz5wy8o9.py\", line 38, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "requirement": "Annotation Coverage", "completion": "def max_prime_factors(n: int) -> int:\n    # Initialize the largest prime factor\n    largest_prime: int = -1\n    \n    # Divide out all factors of 2\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n    \n    # Check for odd factors from 3 to sqrt(n)\n    i: int = 3\n    while i * i <= n:\n        while n % i == 0:\n            largest_prime = i\n            n //= i\n        i += 2\n    \n    # If n is still greater than 2, then n itself is prime\n    if n > 2:\n        largest_prime = n\n    \n    return largest_prime\n\n# Example usage:\nnumber: int = 13195\nprint(f\"The largest prime factor of {number} is: {max_prime_factors(number)}\")\n", "result": "passed", "passed": true}
{"task_id": 33, "requirement": "Annotation Coverage", "completion": "def decimal_to_binary(N: int) -> str:\n    \"\"\"\n    Convert a decimal number to its binary representation.\n\n    Parameters:\n    N (int): The decimal number to convert.\n\n    Returns:\n    str: The binary representation of the decimal number as a string.\n    \"\"\"\n    if N == 0:\n        return \"0\"\n    \n    binary_num = \"\"\n    while N > 0:\n        remainder = N % 2\n        binary_num = str(remainder) + binary_num\n        N = N // 2\n    \n    return binary_num\n\n# Example usage:\ndecimal_number = 13\nbinary_number = decimal_to_binary(decimal_number)\nprint(f\"The binary representation of {decimal_number} is {binary_number}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjhqhp2i3.py\", line 19, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "requirement": "Annotation Coverage", "completion": "from typing import List\n\ndef find_missing(ar: List[int], N: int) -> int:\n    left, right = 0, len(ar) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # If the middle element is not equal to its index + the first element,\n        # then the missing number is on the left side.\n        if ar[mid] != mid + ar[0]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    \n    # The missing number is the value at the left index + the first element\n    return left + ar[0]\n\n# Example usage:\narr = [1, 2, 3, 4, 6, 7, 8]\nN = 8  # The expected maximum number in the sequence\nprint(find_missing(arr, N))  # Output: 5\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp48e9ywy1.py\", line 27, in <module>\n    assert find_missing.__annotations__ == {'ar': list, 'N': int, 'return': int}\nAssertionError", "passed": false}
{"task_id": 35, "requirement": "Annotation Coverage", "completion": "def find_rect_num(n: int) -> int:\n    \"\"\"\n    Calculate the n-th rectangular number.\n\n    Parameters:\n    n (int): The position of the rectangular number to find.\n\n    Returns:\n    int: The n-th rectangular number.\n    \"\"\"\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    return n * (n + 1)\n\n# Example usage:\nif __name__ == \"__main__\":\n    n = 5\n    result = find_rect_num(n)\n    print(f\"The {n}-th rectangular number is: {result}\")\n", "result": "passed", "passed": true}
{"task_id": 36, "requirement": "Annotation Coverage", "completion": "def find_nth_digit(p: int, q: int, N: int) -> int:\n    \"\"\"\n    Find the Nth digit in the proper fraction p/q.\n\n    Args:\n        p (int): The numerator of the fraction.\n        q (int): The denominator of the fraction.\n        N (int): The position of the digit to find in the fractional part.\n\n    Returns:\n        int: The Nth digit in the fractional part of p/q.\n\n    Raises:\n        ValueError: If the fraction is not proper (p >= q) or if N is out of range.\n    \"\"\"\n    # Check if the fraction is proper\n    if p >= q:\n        raise ValueError(\"The fraction is not proper (p must be less than q).\")\n    \n    # Calculate the decimal representation\n    decimal = p / q\n    \n    # Convert the decimal part to a string\n    decimal_str = str(decimal).split('.')[1]\n    \n    # Check if N is within the range of the decimal digits\n    if N > len(decimal_str):\n        raise ValueError(\"N is out of range for the fractional part.\")\n    \n    # Return the Nth digit (0-based index in the string is N-1)\n    return int(decimal_str[N - 1])\n\n# Example usage:\ntry:\n    p = 1\n    q = 7\n    N = 3\n    print(find_nth_digit(p, q, N))  # Output: 4\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 37, "requirement": "Annotation Coverage", "completion": "from typing import List, Union\n\ndef sort_mixed_list(mixed_list: List[Union[int, str]]) -> List[Union[int, str]]:\n    # Separate integers and strings\n    integers = [x for x in mixed_list if isinstance(x, int)]\n    strings = [x for x in mixed_list if isinstance(x, str)]\n    \n    # Sort integers and strings separately\n    integers.sort()\n    strings.sort()\n    \n    # Combine the sorted integers and strings\n    sorted_list = integers + strings\n    \n    return sorted_list\n\n# Example usage:\nmixed_list = [3, 'apple', 1, 'banana', 2, 'cherry']\nsorted_list = sort_mixed_list(mixed_list)\nprint(sorted_list)  # Output: [1, 2, 3, 'apple', 'banana', 'cherry']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1v22b8ky.py\", line 26, in <module>\n    assert sort_mixed_list.__annotations__ == {'mixed_list': list[Union[int, str]], 'return' : list}\nAssertionError", "passed": false}
{"task_id": 38, "requirement": "Annotation Coverage", "completion": "from typing import Union\n\ndef div_even_odd(list1: list[int]) -> Union[int, float, None]:\n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is not None and first_odd is not None:\n        return first_even / first_odd\n    else:\n        return None\n\n# Example usage:\nnumbers = [1, 3, 5, 7, 8, 10]\nresult = div_even_odd(numbers)\nprint(result)  # Output: 8.0 (since 8 / 1 = 8.0)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpq9owzsms.py\", line 28, in <module>\n    assert div_even_odd.__annotations__ == {'list1': list, 'return': (int, float)}\nAssertionError", "passed": false}
{"task_id": 39, "requirement": "Annotation Coverage", "completion": "from collections import Counter\n\ndef rearrange_string(S: str) -> str:\n    \"\"\"\n    Write a function to check if the letters of a given string can be rearranged\n    so that two characters that are adjacent to each other are different.\n\n    Args:\n        S (str): The input string to be rearranged.\n\n    Returns:\n        str: A rearranged string where no two adjacent characters are the same,\n             or an empty string if it's not possible to rearrange the string.\n    \"\"\"\n    # Count the frequency of each character in the string\n    char_counts = Counter(S)\n    \n    # Find the maximum frequency\n    max_count = max(char_counts.values())\n    \n    # Check if the maximum frequency is more than (len(S) + 1) // 2\n    if max_count > (len(S) + 1) // 2:\n        return \"\"  # Return an empty string if rearrangement is not possible\n    \n    # Rearrange the string\n    result = []\n    while char_counts:\n        # Get the most frequent character\n        most_common_char = max(char_counts, key=char_counts.get)\n        result.append(most_common_char)\n        char_counts[most_common_char] -= 1\n        \n        # Remove the character from the counter if its count reaches zero\n        if char_counts[most_common_char] == 0:\n            del char_counts[most_common_char]\n    \n    return ''.join(result)\n\n# Example usage:\nprint(rearrange_string(\"aabb\"))  # Output: \"abab\" or \"baba\"\nprint(rearrange_string(\"aaab\"))  # Output: \"\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwf6ekwk1.py\", line 33, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "requirement": "Annotation Coverage", "completion": "from collections import Counter\nfrom typing import List, Dict\n\ndef freq_element(nums: List[List[int]]) -> Dict[int, int]:\n    # Flatten the list of lists into a single list\n    flattened_list = [item for sublist in nums for item in sublist]\n    \n    # Use Counter to get the frequency of each element\n    frequency = Counter(flattened_list)\n    \n    # Convert Counter to a dictionary to match the return type annotation\n    return dict(frequency)\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\nresult = freq_element(list_of_lists)\nprint(result)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvnyddzdt.py\", line 22, in <module>\n    assert freq_element.__annotations__ == {'nums': 'list[list[int]]', 'return': 'dict[int, int]'}\nAssertionError", "passed": false}
{"task_id": 41, "requirement": "Annotation Coverage", "completion": "from typing import List\n\ndef filter_evennumbers(nums: List[int]) -> List[int]:\n    \"\"\"\n    Filters even numbers from the given list using a lambda function.\n\n    :param nums: List of integers\n    :return: List of even integers\n    \"\"\"\n    return list(filter(lambda x: x % 2 == 0, nums))\n\n# Example usage:\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven_numbers = filter_evennumbers(numbers)\nprint(even_numbers)  # Output: [2, 4, 6, 8, 10]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpajk1c6vn.py\", line 15, in <module>\n    assert filter_evennumbers.__annotations__ == {'nums': list, 'return': list}\nAssertionError", "passed": false}
{"task_id": 42, "requirement": "Annotation Coverage", "completion": "from collections import Counter\n\ndef find_sum(arr: list, n: int) -> int:\n    \"\"\"\n    Find the sum of repeated elements in a given array.\n\n    Parameters:\n    arr (list): The input list of elements.\n    n (int): The length of the input list.\n\n    Returns:\n    int: The sum of repeated elements in the array.\n    \"\"\"\n    # Count the occurrences of each element in the array\n    element_counts = Counter(arr)\n    \n    # Sum the elements that appear more than once\n    sum_repeated = sum(element for element, count in element_counts.items() if count > 1)\n    \n    return sum_repeated\n\n# Example usage:\narr = [1, 2, 3, 4, 2, 3, 5, 6, 7, 7]\nn = len(arr)  # Length of the array\nresult = find_sum(arr, n)\nprint(\"Sum of repeated elements:\", result)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_tjcyo2s.py\", line 19, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nAssertionError", "passed": false}
{"task_id": 43, "requirement": "Annotation Coverage", "completion": "import re\nfrom typing import List\n\ndef text_match(text: str) -> str:\n    # Define the regex pattern to match sequences of lowercase letters joined by an underscore\n    pattern = r'[a-z]+_[a-z]+'\n    \n    # Search for the pattern in the input text\n    matches: List[str] = re.findall(pattern, text)\n    \n    # Convert the list of matches to a string representation\n    return str(matches)\n\n# Example usage:\ntext = \"hello_world this_is_a_test example_text not_a_match CamelCase\"\nresult = text_match(text)\nprint(result)  # Output: \"['hello_world', 'this_is_a_test', 'example_text']\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8vh6r_y4.py\", line 19, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 44, "requirement": "Annotation Coverage", "completion": "import re\nfrom typing import Optional\n\ndef text_match_string(text: str, word: str) -> str:\n    \"\"\"\n    Check if the given word appears at the beginning of the text.\n\n    Parameters:\n    text (str): The text in which to search for the word.\n    word (str): The word to search for at the beginning of the text.\n\n    Returns:\n    str: \"Found a match!\" if the word is found at the beginning of the text,\n         \"No match.\" otherwise.\n    \"\"\"\n    # Create a regular expression pattern that matches the word at the beginning of the string\n    pattern = r'^' + re.escape(word)\n    \n    # Search for the pattern in the text\n    match = re.search(pattern, text)\n    \n    # Return the appropriate string based on whether a match is found\n    return \"Found a match!\" if match else \"No match.\"\n\n# Example usage:\nprint(text_match_string(\"hello world\", \"hello\"))  # Output: Found a match!\nprint(text_match_string(\"world hello\", \"hello\"))  # Output: No match.\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmsmm4v4a.py\", line 19, in <module>\n    assert text_match_string(\" python\")==('Not matched!')\nTypeError: text_match_string() missing 1 required positional argument: 'word'", "passed": false}
{"task_id": 45, "requirement": "Annotation Coverage", "completion": "from math import gcd\nfrom functools import reduce\nfrom typing import List\n\ndef get_gcd(numbers: List[int]) -> int:\n    \"\"\"\n    Compute the greatest common divisor (GCD) of a list of integers.\n\n    :param numbers: List of integers\n    :return: GCD of the list elements\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"The input list must not be empty.\")\n    \n    # Use reduce to apply the gcd function across the list\n    return reduce(gcd, numbers)\n\n# Example usage:\narray = [24, 36, 48, 60]\nresult = get_gcd(array)\nprint(f\"The GCD of {array} is {result}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp75mtk04f.py\", line 21, in <module>\n    assert get_gcd.__annotations__ == {'numbers': list, 'return': int}\nAssertionError", "passed": false}
{"task_id": 46, "requirement": "Annotation Coverage", "completion": "def test_distinct(numbers: list) -> bool:\n    \"\"\"\n    Determine whether all the numbers in the list are distinct.\n\n    :param numbers: List of numbers (integers, floats, etc.)\n    :return: True if all numbers are distinct, False otherwise\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    unique_numbers = set(numbers)\n    \n    # Compare the length of the set to the length of the original list\n    return len(unique_numbers) == len(numbers)\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(test_distinct([1, 2, 3, 4, 5]))  # Output: True\n    print(test_distinct([1, 2, 2, 3, 4]))  # Output: False\n    print(test_distinct([10, 20, 30, 40, 50]))  # Output: True\n    print(test_distinct([10, 20, 30, 40, 10]))  # Output: False\n", "result": "passed", "passed": true}
{"task_id": 47, "requirement": "Annotation Coverage", "completion": "def compute_last_digit(a: int, b: int) -> int:\n    \"\"\"\n    Compute the last digit of (a! / b!).\n\n    Parameters:\n    a (int): The numerator factorial.\n    b (int): The denominator factorial.\n\n    Returns:\n    int: The last digit of (a! / b!).\n    \"\"\"\n    if a < b:\n        return 0\n    elif a == b:\n        return 1\n    else:\n        # Compute the product (b+1) * (b+2) * ... * a modulo 10\n        result = 1\n        for i in range(b + 1, a + 1):\n            result = (result * i) % 10\n            if result == 0:\n                break  # If result is 0, it will remain 0\n        return result\n\n# Example usage:\nprint(compute_last_digit(5, 3))  # Output: 2 (since 5! / 3! = 20, last digit is 0)\nprint(compute_last_digit(7, 7))  # Output: 1 (since 7! / 7! = 1, last digit is 1)\nprint(compute_last_digit(4, 5))  # Output: 0 (since 4! / 5! is not an integer)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpm41w8z59.py\", line 21, in <module>\n    assert compute_last_digit(2,4) == 2\nAssertionError", "passed": false}
{"task_id": 48, "requirement": "Annotation Coverage", "completion": "def odd_bit_set_number(n: int) -> int:\n    # Create a mask with all odd bits set to 1\n    # The mask will be 0xAA...AA in hexadecimal, which is 10101010...1010 in binary\n    # For example, for 8 bits, the mask is 0xAA (10101010)\n    # We can generate the mask by shifting 1 to the left and ORing it with itself\n    mask = 0\n    bit = 1\n    while bit <= n:\n        mask |= bit\n        bit <<= 2  # Move to the next odd bit\n    \n    # Set all odd bits of n by ORing it with the mask\n    result = n | mask\n    return result\n\n# Example usage:\nnumber = 0b10101010  # Binary: 10101010\nresult = odd_bit_set_number(number)\nprint(bin(result))  # Output: 0b10101010 (since all odd bits are already set)\n\nnumber = 0b00000000  # Binary: 00000000\nresult = odd_bit_set_number(number)\nprint(bin(result))  # Output: 0b10101010 (all odd bits are set)\n", "result": "passed", "passed": true}
{"task_id": 50, "requirement": "Annotation Coverage", "completion": "from typing import List, Tuple\n\ndef min_length_list(lists: List[List]) -> Tuple[int, List]:\n    \"\"\"\n    Finds the list with the minimum length from a given list of lists.\n\n    :param lists: List of lists\n    :return: A tuple containing the length of the shortest list and the list itself\n    \"\"\"\n    min_list = min(lists, key=lambda x: len(x))\n    return len(min_list), min_list\n\n# Example usage:\nlists = [[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]\nresult = min_length_list(lists)\nprint(result)  # Output: (1, [6])\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpyj88o3_m.py\", line 16, in <module>\n    assert min_length_list.__annotations__ == {'lists': 'list[list]', 'return': 'tuple[int, list]'}\nAssertionError", "passed": false}
{"task_id": 51, "requirement": "Annotation Coverage", "completion": "def check_equilateral(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Check if a triangle is equilateral.\n\n    Parameters:\n    a (int): Length of the first side of the triangle.\n    b (int): Length of the second side of the triangle.\n    c (int): Length of the third side of the triangle.\n\n    Returns:\n    bool: True if the triangle is equilateral, False otherwise.\n    \"\"\"\n    return a == b == c\n\n# Example usage:\nprint(check_equilateral(5, 5, 5))  # Output: True\nprint(check_equilateral(5, 4, 5))  # Output: False\n", "result": "passed", "passed": true}
{"task_id": 52, "requirement": "Annotation Coverage", "completion": "def parallelogram_area(base: float, height: float) -> float:\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram.\n    \"\"\"\n    return base * height\n\n# Example usage:\nbase = 5.0\nheight = 3.0\narea = parallelogram_area(base, height)\nprint(f\"The area of the parallelogram is: {area}\")\n", "result": "passed", "passed": true}
{"task_id": 53, "requirement": "Annotation Coverage", "completion": "def check_equality(s: str) -> str:\n    \"\"\"\n    Check whether the first and last characters of a given string are equal.\n\n    Args:\n        s (str): The input string to check.\n\n    Returns:\n        str: \"True\" if the first and last characters are equal, \"False\" otherwise.\n    \"\"\"\n    # Check if the string is empty\n    if not s:\n        return \"False\"\n    \n    # Compare the first and last characters\n    return \"True\" if s[0] == s[-1] else \"False\"\n\n# Example usage:\nprint(check_equality(\"hello\"))  # Output: \"False\"\nprint(check_equality(\"racecar\"))  # Output: \"True\"\nprint(check_equality(\"a\"))  # Output: \"True\"\nprint(check_equality(\"\"))  # Output: \"False\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpy0v8ongz.py\", line 16, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 54, "requirement": "Annotation Coverage", "completion": "from typing import List\n\ndef counting_sort(arr: List[int]) -> List[int]:\n    # Find the maximum and minimum elements in the array to determine the range\n    max_val = max(arr)\n    min_val = min(arr)\n    \n    # Create a count array to store the count of each unique element\n    count = [0] * (max_val - min_val + 1)\n    \n    # Store the count of each element in the count array\n    for num in arr:\n        count[num - min_val] += 1\n    \n    # Modify the count array such that each element at each index\n    # stores the sum of previous counts. This will help in placing\n    # the elements in the correct position in the output array.\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    \n    # Create an output array to store the sorted elements\n    output = [0] * len(arr)\n    \n    # Build the output array by placing elements in their correct position\n    for num in reversed(arr):\n        output[count[num - min_val] - 1] = num\n        count[num - min_val] -= 1\n    \n    # Copy the sorted elements back to the original array\n    for i in range(len(arr)):\n        arr[i] = output[i]\n    \n    return arr\n\n# Example usage:\narr = [4, 2, 2, 8, 3, 3, 1]\nsorted_arr = counting_sort(arr)\nprint(\"Sorted array:\", sorted_arr)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6cgps26q.py\", line 47, in <module>\n    test_annotations()\n  File \"/tmp/tmp6cgps26q.py\", line 46, in test_annotations\n    assert hints == {'arr': list, 'return': list}\nAssertionError", "passed": false}
{"task_id": 55, "requirement": "Annotation Coverage", "completion": "def tn_gp(a: int, r: int, n: int) -> int:\n    \"\"\"\n    Calculate the t-nth term of a geometric series.\n\n    Parameters:\n    a (int): The first term of the geometric series.\n    r (int): The common ratio of the geometric series.\n    n (int): The term number to find.\n\n    Returns:\n    int: The t-nth term of the geometric series.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Term number 'n' must be a positive integer.\")\n    \n    return a * (r ** (n - 1))\n\n# Example usage:\na = 2  # First term\nr = 3  # Common ratio\nn = 4  # Term number\n\nresult = tn_gp(a, r, n)\nprint(f\"The {n}-th term of the geometric series is: {result}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5cfco73p.py\", line 16, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "requirement": "Annotation Coverage", "completion": "def check(n: int) -> bool:\n    # Reverse the number\n    reversed_n = int(str(n)[::-1])\n    \n    # Check if the number is one less than twice its reverse\n    return n == 2 * reversed_n - 1\n\n# Example usage:\nnumber = 21\nif check(number):\n    print(f\"{number} is one less than twice its reverse.\")\nelse:\n    print(f\"{number} is not one less than twice its reverse.\")\n", "result": "passed", "passed": true}
{"task_id": 57, "requirement": "Annotation Coverage", "completion": "from typing import List\n\ndef find_max_num(digits: List[int]) -> int:\n    # Convert each digit to a string to facilitate sorting\n    str_digits = [str(d) for d in digits]\n    \n    # Sort the digits in descending order to form the largest number\n    str_digits.sort(reverse=True)\n    \n    # Join the sorted digits into a single string and convert it to an integer\n    max_num = int(''.join(str_digits))\n    \n    return max_num\n\n# Example usage:\ndigits = [1, 2, 3, 4]\nprint(find_max_num(digits))  # Output: 4321\n\ndigits = [9, 8, 7, 6]\nprint(find_max_num(digits))  # Output: 9876\n\ndigits = [5, 5, 5, 5]\nprint(find_max_num(digits))  # Output: 5555\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpb0h5jg9v.py\", line 25, in <module>\n    assert find_max_num([1,2,3],3) == 321\nTypeError: find_max_num() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 58, "requirement": "Annotation Coverage", "completion": "def opposite_signs(a: int, b: int) -> bool:\n    \"\"\"\n    Check if two integers have opposite signs.\n\n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n\n    Returns:\n    bool: True if the integers have opposite signs, False otherwise.\n    \"\"\"\n    return (a < 0) != (b < 0)\n\n# Example usage:\nprint(opposite_signs(5, -3))  # Output: True\nprint(opposite_signs(-4, -7))  # Output: False\nprint(opposite_signs(10, 20))  # Output: False\n", "result": "passed", "passed": true}
{"task_id": 59, "requirement": "Annotation Coverage", "completion": "def is_octagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth octagonal number.\n\n    Parameters:\n    n (int): The position of the octagonal number to calculate.\n\n    Returns:\n    int: The nth octagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return n * (3 * n - 2)\n\n# Example usage:\nif __name__ == \"__main__\":\n    n = 5\n    print(f\"The {n}th octagonal number is: {is_octagonal(n)}\")\n", "result": "passed", "passed": true}
{"task_id": 60, "requirement": "Annotation Coverage", "completion": "from typing import List\n\ndef max_len_sub(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    \n    # Dictionary to store the length of the longest subsequence ending with a particular value\n    dp = {}\n    max_length = 1\n    \n    for num in arr:\n        # Initialize the length of the subsequence ending with num as 1\n        dp[num] = 1\n        \n        # Check if num - 1 exists in the dictionary\n        if num - 1 in dp:\n            dp[num] = max(dp[num], dp[num - 1] + 1)\n        \n        # Check if num + 1 exists in the dictionary\n        if num + 1 in dp:\n            dp[num] = max(dp[num], dp[num + 1] + 1)\n        \n        # Update the maximum length found so far\n        max_length = max(max_length, dp[num])\n    \n    return max_length\n\n# Example usage:\narr = [1, 2, 3, 4, 5, 3, 2]\nprint(max_len_sub(arr))  # Output: 5 (Subsequence: [1, 2, 3, 4, 5])\n\narr = [10, 9, 4, 5, 4, 8, 6]\nprint(max_len_sub(arr))  # Output: 3 (Subsequence: [4, 5, 4] or [9, 8, 6])\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmph2xs4g19.py\", line 35, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}

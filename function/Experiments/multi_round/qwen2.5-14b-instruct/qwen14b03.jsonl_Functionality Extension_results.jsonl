{"task_id": 11, "requirement": "Functionality Extension", "completion": "def remove_occ(s, char, all=False):\n    \"\"\"\n    Removes the first and last occurrences of a given character from the string,\n    or all occurrences if the 'all' parameter is set to True.\n\n    :param s: The original string.\n    :param char: The character to be removed.\n    :param all: A boolean flag indicating whether all occurrences of the character should be removed.\n    :return: A new string with the specified occurrences of the character removed.\n    \"\"\"\n    if len(char) != 1:\n        raise ValueError(\"The character must be a single character.\")\n    \n    if all:\n        # Remove all occurrences of the character\n        new_string = s.replace(char, '')\n    else:\n        # Find the indices of the first and last occurrences of the character\n        try:\n            first_occurrence = s.index(char)\n            last_occurrence = s.rindex(char)\n        except ValueError:\n            # If the character is not found, return the original string\n            return s\n        \n        # Construct the new string without the first and last occurrences\n        new_string = s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]\n    \n    return new_string\n\n# Example usage\nif __name__ == \"__main__\":\n    test_string = \"hello world\"\n    char_to_remove = \"l\"\n    \n    print(remove_occ(test_string, char_to_remove))  # Output: \"heo word\"\n    print(remove_occ(test_string, char_to_remove, all=True))  # Output: \"heo word\" (with all 'l' removed)\n", "result": "passed", "passed": true}
{"task_id": 12, "requirement": "Functionality Extension", "completion": "def sort_matrix(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order based on the sum of its rows.\n    Treats missing values as zeros for rows of varying lengths.\n    \n    Parameters:\n    - matrix (list of lists): The matrix to be sorted.\n    \n    Returns:\n    - list of lists: The sorted matrix.\n    \"\"\"\n    # Calculate the sum of each row, treating missing values as zeros\n    summed_rows = [(sum(row), row) for row in matrix]\n    \n    # Sort the list of tuples based on the sum\n    sorted_summed_rows = sorted(summed_rows)\n\n    # Extract the rows from the sorted list of tuples\n    sorted_matrix = [row for _, row in sorted_summed_rows]\n\n    return sorted_matrix\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_matrix = [\n        [3, 4, 5],\n        [1, 2],\n        [6, 7, 8, 9],\n        [0]\n    ]\n    print(\"Original Matrix:\")\n    for row in example_matrix:\n        print(row)\n    \n    sorted_matrix = sort_matrix(example_matrix)\n    print(\"\\nSorted Matrix:\")\n    for row in sorted_matrix:\n        print(row)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5nohut57.py\", line 24, in <module>\n    assert sort_matrix([[1, 2, 3], [4, 5], [6]]) == [[6], [4, 5], [1, 2, 3]]\nAssertionError", "passed": false}
{"task_id": 13, "requirement": "Functionality Extension", "completion": "def count_common(word_counts, top_n=None):\n    \"\"\"\n    This function takes a dictionary of word counts and returns the top N most common words along with their counts.\n    If top_n is not specified, it returns all words with the highest count.\n    \n    :param word_counts: A dictionary where keys are words (str) and values are their counts (int).\n    :param top_n: An integer specifying the number of top frequent words to return (optional).\n    :return: A tuple of two lists, where the first list contains the most common words and the second list contains their counts.\n    \"\"\"\n    if not word_counts:\n        return ([], [])\n\n    # Find the maximum count in the dictionary\n    max_count = max(word_counts.values())\n    \n    # Find all words that have the maximum count\n    most_common_words = [word for word, count in word_counts.items() if count == max_count]\n    most_common_counts = [max_count] * len(most_common_words)\n    \n    # If top_n is specified, sort words by count and return top_n words\n    if top_n is not None:\n        # Sort the words by frequency (descending) and then alphabetically\n        sorted_word_counts = sorted(word_counts.items(), key=lambda x: (-x[1], x[0]))\n        \n        # Take the top_n words\n        top_words = [word for word, _ in sorted_word_counts[:top_n]]\n        top_counts = [count for _, count in sorted_word_counts[:top_n]]\n        \n        return (top_words, top_counts)\n    \n    return (most_common_words, most_common_counts)\n\n# Example usage:\nword_counts_example = {'apple': 4, 'banana': 3, 'cherry': 4, 'date': 2, 'elderberry': 5, 'fig': 3}\nprint(count_common(word_counts_example, top_n=3))  # Returns top 3 most common words\nprint(count_common(word_counts_example))  # Returns all words with the highest count\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_scctknz.py\", line 22, in <module>\n    assert count_common(['apple', 'banana', 'apple', 'orange', 'banana', 'banana'], 2) == [('banana', 3), ('apple', 2)]\n  File \"/tmp/tmp_scctknz.py\", line 5, in count_common\n    max_count = max(word_counts.values())\nAttributeError: 'list' object has no attribute 'values'", "passed": false}
{"task_id": 14, "requirement": "Functionality Extension", "completion": "def find_volume(dimensions):\n    \"\"\"\n    Calculate the volume of a triangular prism given its dimensions.\n\n    Parameters:\n    - dimensions (list or tuple): A list or tuple of three elements representing:\n      [base, height_of_triangle, length_of_prism].\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    base, height_triangle, length_prism = dimensions\n    \n    # Calculate the area of the triangular base\n    base_area = 0.5 * base * height_triangle\n    \n    # Calculate the volume of the triangular prism\n    volume = base_area * length_prism\n    \n    return volume\n\n# Example usage:\n# Find the volume of a triangular prism with a base of 4 units,\n# height of the triangle of 3 units, and length of the prism of 10 units.\ndimensions = [4, 3, 10]  # This could also be a tuple (4, 3, 10)\nvolume = find_volume(dimensions)\nprint(f\"The volume of the triangular prism is {volume} cubic units.\")\n", "result": "passed", "passed": true}
{"task_id": 15, "requirement": "Functionality Extension", "completion": "import re\n\ndef split_lowerstring(input_string, include_lower=False):\n    # Find all positions where a lowercase letter is followed by any character,\n    # excluding the case where it's followed by another lowercase letter.\n    # This will give us the points where we should split.\n    pattern = r'(?<=[a-z])(?![a-z])'\n    \n    # Split the string using the found patterns\n    split_points = [match.start() for match in re.finditer(pattern, input_string)]\n    \n    # Split the string into segments based on the split points\n    split_strings = []\n    start = 0\n    for point in split_points:\n        split_strings.append(input_string[start:point+1])\n        start = point + 1\n    \n    # Add the last segment\n    split_strings.append(input_string[start:])\n    \n    # If include_lower is True, merge the first character of each segment (except the first one)\n    # with the previous segment\n    if include_lower:\n        new_split_strings = [split_strings[0]]  # Start with the first element unchanged\n        for i in range(1, len(split_strings)):\n            if split_strings[i] and split_strings[i][0].isupper():\n                new_split_strings[-1] += split_strings[i][0]\n                new_split_strings.append(split_strings[i][1:])\n            else:\n                new_split_strings.append(split_strings[i])\n        split_strings = new_split_strings\n    \n    return split_strings\n\n# Example usage:\nexample_string = \"aBcDeFgHiJkLmNoPqRsTuVwXyZ\"\nprint(split_lowerstring(example_string))  # Without include_lower\nprint(split_lowerstring(example_string, include_lower=True))  # With include_lower\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpbhwssg0c.py\", line 33, in <module>\n    assert split_lowerstring('AbCd', include_lower=True) == ['Ab', 'Cd']\nAssertionError", "passed": false}
{"task_id": 16, "requirement": "Functionality Extension", "completion": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Finds sequences of lowercase letters separated by underscores in the given text.\n    \n    :param text: A string containing the text to search within.\n    :return: 'Found a match!' if at least one sequence matches, otherwise None.\n    \"\"\"\n    # Define the regex pattern for finding sequences of lowercase letters separated by underscores\n    pattern = r\"[a-z]+(?:_[a-z]+)*\"\n    \n    # Search for the pattern in the text\n    match = re.search(pattern, text)\n    \n    # Return 'Found a match!' if a match is found, otherwise return None\n    return 'Found a match!' if match else None\n\n# Example usage:\nexample_text = \"This_is_an_example_text_with_lower_case_words_and_this_one_is_special\"\nprint(text_lowercase_underscore(example_text))  # Output: 'Found a match!'\n\nexample_text_no_match = \"ThisIsAnExampleWithoutUnderscores\"\nprint(text_lowercase_underscore(example_text_no_match))  # Output: None\n", "result": "passed", "passed": true}
{"task_id": 17, "requirement": "Functionality Extension", "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square after rounding the side length to the nearest integer.\n    \n    :param side_length: The length of one side of the square (can be a float).\n    :return: The perimeter of the square.\n    \"\"\"\n    # Round the side length to the nearest integer\n    rounded_side_length = round(side_length)\n    # Calculate the perimeter of the square\n    return 4 * rounded_side_length\n\n# Example usage:\nperimeter = square_perimeter(5.6)\nprint(\"The perimeter of the square is:\", perimeter)\n\nperimeter = square_perimeter(3.2)\nprint(\"The perimeter of the square is:\", perimeter)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmps9c60mc4.py\", line 11, in <module>\n    assert square_perimeter(4.5) == 20\nAssertionError", "passed": false}
{"task_id": 18, "requirement": "Functionality Extension", "completion": "def remove_dirty_chars(main_string, chars_to_remove):\n    \"\"\"\n    Removes characters from main_string that are present in chars_to_remove in a case-insensitive manner.\n    \n    Parameters:\n    - main_string (str): The original string from which characters will be removed.\n    - chars_to_remove (str): The string containing characters to be removed from main_string.\n    \n    Returns:\n    - str: The modified string after removing specified characters in a case-insensitive manner.\n    \"\"\"\n    # Convert both strings to lower case for case-insensitive comparison\n    main_string_lower = main_string.lower()\n    chars_to_remove_set = set(chars_to_remove.lower())\n    \n    # Use a generator expression to filter out unwanted characters while maintaining original case\n    filtered_string = ''.join(\n        char for char in main_string \n        if char.lower() not in chars_to_remove_set\n    )\n    \n    return filtered_string\n\n# Example usage:\noriginal_str = \"Hello, World!\"\nchars_to_remove = \"Helo\"\ncleaned_str = remove_dirty_chars(original_str, chars_to_remove)\nprint(cleaned_str)  # Output should be \", Wr!\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxxzprg06.py\", line 16, in <module>\n    assert remove_dirty_chars('HelloWorld', 'hELLO') == 'World', 'Function should handle case-insensitive character removal.'\nAssertionError: Function should handle case-insensitive character removal.", "passed": false}
{"task_id": 19, "requirement": "Functionality Extension", "completion": "def test_duplicate(arr):\n    \"\"\"\n    Find and return a list of duplicate elements in the given list of integers.\n    \n    :param arr: List of integers\n    :return: A list of duplicate elements, or an empty list if no duplicates are found\n    \"\"\"\n    seen = set()\n    duplicates = set()\n    \n    for number in arr:\n        if number in seen:\n            duplicates.add(number)\n        else:\n            seen.add(number)\n    \n    # Convert the set of duplicates to a list before returning\n    return list(duplicates)\n\n# Example usage:\nexample_list = [1, 2, 3, 4, 5, 2, 6, 7, 2]\nprint(test_duplicate(example_list))  # Output: [2]\n\nanother_example_list = [10, 22, 33, 44, 55]\nprint(test_duplicate(another_example_list))  # Output: []\n", "result": "passed", "passed": true}
{"task_id": 20, "requirement": "Functionality Extension", "completion": "def find_woodall_numbers_up_to(num):\n    \"\"\"\n    Find all Woodall numbers up to the given number.\n    \n    A Woodall number is of the form n * 2^n - 1 for some positive integer n.\n    \n    :param num: Integer up to which to find Woodall numbers\n    :return: List of all Woodall numbers up to num\n    \"\"\"\n    woodall_numbers = []\n    n = 1\n    # Generate Woodall numbers until they exceed the input number\n    while True:\n        woodall_num = n * 2**n - 1\n        if woodall_num > num:\n            break\n        woodall_numbers.append(woodall_num)\n        n += 1\n    return woodall_numbers\n\n# Example usage:\nprint(find_woodall_numbers_up_to(100))  # Output: [7, 23, 63, 159]\nprint(find_woodall_numbers_up_to(20))   # Output: [7, 23]\nprint(find_woodall_numbers_up_to(64))   # Output: [7, 23, 63]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpl17_h0qk.py\", line 16, in <module>\n    assert is_woodall(10) == [1, 7]\nNameError: name 'is_woodall' is not defined", "passed": false}
{"task_id": 21, "requirement": "Functionality Extension", "completion": "def multiples_of_num(m, n):\n    \"\"\"\n    Generates the first m multiples of the number n.\n\n    Parameters:\n    m (int): The number of multiples to generate.\n    n (float or int): The base number to find multiples of.\n\n    Returns:\n    list: A list containing the first m multiples of n.\n    \"\"\"\n    return [i * n for i in range(1, m + 1)]\n\n# Example usage with an integer n:\nm = 5\nn = 3\nprint(multiples_of_num(m, n))  # Output: [3, 6, 9, 12, 15]\n\n# Example usage with a float n:\nm = 5\nn = 3.5\nprint(multiples_of_num(m, n))  # Output: [3.5, 7.0, 10.5, 14.0, 17.5]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7iul6a36.py\", line 12, in <module>\n    assert multiples_of_num(4, 1.1) == [1.1, 2.2, 3.3, 4.4]\nAssertionError", "passed": false}
{"task_id": 22, "requirement": "Functionality Extension", "completion": "def find_all_duplicates(nums):\n    seen = set()\n    duplicates = []\n    \n    for num in nums:\n        if num in seen and num not in duplicates:\n            duplicates.append(num)\n        else:\n            seen.add(num)\n    \n    return duplicates\n\n# Example usage:\narray = [2, 5, 1, 2, 3, 5, 1, 2, 4]\nprint(find_all_duplicates(array))  # Output will be [2, 5, 1]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6g3sbhfj.py\", line 13, in <module>\n    assert find_first_duplicate([1, 2, 3, 2, 4, 5, 4]) == [2, 4]\nNameError: name 'find_first_duplicate' is not defined", "passed": false}
{"task_id": 23, "requirement": "Functionality Extension", "completion": "def maximum_sum(list_of_lists):\n    \"\"\"\n    Finds the maximum sum of elements among all sublists in a given list of lists.\n    \n    Parameters:\n    - list_of_lists (list of lists): A list containing multiple sublists of integers.\n    \n    Returns:\n    - int: The maximum sum of elements found in any of the sublists.\n    \"\"\"\n    # Initialize max_sum to negative infinity to handle cases where all numbers could be negative\n    max_sum = float('-inf')\n    \n    # Iterate over each sublist in the list of lists\n    for sublist in list_of_lists:\n        # Calculate the sum of the current sublist\n        current_sum = sum(sublist)\n        # Update max_sum if the current sum is greater than max_sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n            \n    # Return the maximum sum found\n    return max_sum\n\n# Example usage\nexample_list_of_lists = [[-1, -2, -3], [4, 5, 6], [-7, -8, 9], [0]]\nprint(maximum_sum(example_list_of_lists))  # Output should be 15 (from the sublist [4, 5, 6])\n", "result": "passed", "passed": true}
{"task_id": 24, "requirement": "Functionality Extension", "completion": "def binary_to_decimal(binary_str):\n    \"\"\"\n    Convert a binary number (as a string) to its decimal equivalent.\n    \n    :param binary_str: A string representing a binary number.\n    :return: The decimal equivalent of the binary number.\n    \"\"\"\n    # Check if the input string contains only '0' or '1'\n    if not all(char in '01' for char in binary_str):\n        raise ValueError(\"Input contains non-binary digits.\")\n    \n    decimal_value = 0\n    # Reverse iterate over the binary string\n    for index, digit in enumerate(reversed(binary_str)):\n        # Calculate the decimal value\n        decimal_value += int(digit) * (2 ** index)\n    return decimal_value\n\n# Example usage:\nprint(binary_to_decimal('001011'))  # Output should be 11\nprint(binary_to_decimal('1011'))    # Output should be 11\n", "result": "passed", "passed": true}
{"task_id": 25, "requirement": "Functionality Extension", "completion": "from collections import Counter\n\ndef find_product(arr):\n    # Count the frequency of each element in the array\n    freq = Counter(arr)\n    \n    # Initialize the product variable\n    product = 1\n    \n    # Iterate through the unique elements and their frequencies\n    for element, count in freq.items():\n        # Check if the element is non-repeated\n        if count == 1:\n            # Multiply the non-repeated element into the product\n            product *= element\n    \n    # Return the computed product\n    return product\n\n# Example usage:\narr = [2, -3, 4, -5, 6, -3, 4]\nprint(find_product(arr))  # Output should be 2 * -5 * 6 = -60\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4wqcpafj.py\", line 18, in <module>\n    assert find_product([-1, -2, 3, 3], 4) == 2\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "requirement": "Functionality Extension", "completion": "def count_k_element_tuples(tuples_list, k_elements):\n    \"\"\"\n    Counts how many tuples in the list contain exactly the specified k elements.\n    \n    :param tuples_list: List of tuples to be checked.\n    :param k_elements: A collection (list or set) of elements to look for within each tuple.\n    :return: The count of tuples that contain exactly the specified k elements.\n    \"\"\"\n    k_set = set(k_elements)\n    count = 0\n    \n    for tup in tuples_list:\n        # Check if the tuple contains exactly all elements in k_set and has no extra elements\n        if k_set == set(tup):\n            count += 1\n    \n    return count\n\n# Example usage:\ntuples_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9, 10), (1, 2, 3, 4), (2, 3, 1)]\nk_elements = [1, 2, 3]\nprint(count_k_element_tuples(tuples_list, k_elements))  # Output: 3\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp72yy28m_.py\", line 13, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == 1\nNameError: name 'check_k_elements' is not defined", "passed": false}
{"task_id": 27, "requirement": "Functionality Extension", "completion": "import re\n\ndef remove_characters(strings, chars_to_remove=None):\n    \"\"\"\n    Removes specified characters (including digits if not specified) from each string in the provided list of strings.\n    \n    :param strings: List of strings from which characters are to be removed\n    :param chars_to_remove: A string containing characters to be removed (optional, defaults to None)\n    :return: A new list of strings with specified characters removed\n    \"\"\"\n    # Default pattern to match digits if no specific characters are provided\n    pattern = r'\\d'\n    \n    # If chars_to_remove is provided, extend the pattern to include those characters\n    if chars_to_remove:\n        escaped_chars = re.escape(chars_to_remove)  # Escape special regex characters in chars_to_remove\n        pattern += f'[{escaped_chars}]'\n    \n    # Use a list comprehension to apply the pattern to each string in the list\n    return [re.sub(pattern, '', s) for s in strings]\n\n# Example usage:\nexample_list = [\"abc123!\", \"456def$\", \"7890@\", \"!@#$%^\"]\ncleaned_list = remove_characters(example_list, chars_to_remove=\"!@$%^\")\nprint(cleaned_list)  # Output should be ['abc', 'def', '7890', '']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp33w3doew.py\", line 15, in <module>\n    assert remove_extended(['abcd123', '456defg'], 'abcdef') == ['d', 'g']\nNameError: name 'remove_extended' is not defined", "passed": false}
{"task_id": 28, "requirement": "Functionality Extension", "completion": "def binomial_coeff(n, k):\n    \"\"\"\n    Calculate the binomial coefficient (n choose k) using dynamic programming with memoization.\n\n    Parameters:\n    n (int): The total number of items.\n    k (int): The number of items to choose.\n\n    Returns:\n    int: The binomial coefficient C(n, k).\n    \"\"\"\n    # Create a 2D list to store computed values\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    \n    # Base cases: C(n, 0) = 1 and C(i, i) = 1 for all i\n    for i in range(n + 1):\n        dp[i][0] = 1\n    for j in range(min(k + 1, n + 1)):\n        dp[j][j] = 1\n    \n    # Fill the DP table\n    for i in range(1, n + 1):\n        for j in range(1, min(k + 1, i + 1)):\n            dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1]\n    \n    return dp[n][k]\n\n# Example usage:\nprint(binomial_coeff(5, 2))  # Output: 10\nprint(binomial_coeff(10, 3)) # Output: 120\nprint(binomial_coeff(40, 20)) # Output: 137846528820\n", "result": "passed", "passed": true}
{"task_id": 29, "requirement": "Functionality Extension", "completion": "from typing import List\n\ndef get_odd_occurrence(arr: List[int]) -> List[int]:\n    # Dictionary to store the count of each element\n    count_dict = {}\n    \n    # Count the occurrences of each element\n    for element in arr:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n    \n    # Find and return the elements with an odd occurrence\n    result = []\n    for element, count in count_dict.items():\n        if count % 2 != 0:\n            result.append(element)\n    \n    return result\n\n# Example usage:\narr = [1, 2, 3, 2, 3, 1, 3, 7, 7, 9, 9]\nprint(get_odd_occurrence(arr))  # Output should be [3]\n", "result": "passed", "passed": true}
{"task_id": 30, "requirement": "Functionality Extension", "completion": "from collections import Counter\n\ndef count_substring_with_equal_ends_optimized(s):\n    \"\"\"\n    Counts all substrings starting and ending with the same alphabetic character,\n    ignoring non-alphabetic characters.\n    \n    :param s: Input string\n    :return: Number of substrings starting and ending with the same alphabetic character\n    \"\"\"\n    # Filter out non-alphabetic characters\n    filtered_string = ''.join(filter(str.isalpha, s))\n    \n    # Count the frequency of each alphabetic character\n    char_count = Counter(filtered_string)\n    \n    # Calculate the count of substrings for each character\n    count = sum((freq * (freq + 1)) // 2 for freq in char_count.values())\n    \n    return count\n\n# Example usage:\nprint(count_substring_with_equal_ends_optimized(\"a!b#c$a\"))  # Output will depend on the input string\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6nz4szfm.py\", line 12, in <module>\n    assert count_substring_with_equal_ends('a b a') == 4\nNameError: name 'count_substring_with_equal_ends' is not defined", "passed": false}
{"task_id": 31, "requirement": "Functionality Extension", "completion": "import heapq\nfrom collections import defaultdict\n\ndef func(lists, k):\n    # Check if k is zero and return an empty list immediately\n    if k == 0:\n        return []\n\n    # Dictionary to count occurrences of each integer\n    count = defaultdict(int)\n    \n    # Count the occurrence of each integer in the lists\n    for lst in lists:\n        for num in set(lst):  # Using set to ensure distinct elements\n            count[num] += 1\n    \n    # Min-heap to keep track of top k elements based on their frequencies\n    heap = []\n    \n    # Push elements into the heap if its size is less than k or if the current element's frequency is greater than the smallest frequency in the heap\n    for num, freq in count.items():\n        if len(heap) < k:\n            heapq.heappush(heap, (freq, num))\n        elif freq > heap[0][0]:\n            # Replace the root of the heap if the current element's frequency is higher\n            heapq.heapreplace(heap, (freq, num))\n    \n    # Extract the top k elements from the heap\n    result = [num for _, num in heap]\n    \n    return result\n\n# Example usage:\nlists = [\n    [1, 4, 5, 8],\n    [4, 5, 6, 7],\n    [1, 3, 4, 6],\n    [2, 4, 6, 8]\n]\n\nk = 2\nprint(func(lists, k))  # Output should be the top 2 most frequent integers\n\nk = 0\nprint(func(lists, k))  # Should return an empty list\n", "result": "passed", "passed": true}
{"task_id": 32, "requirement": "Functionality Extension", "completion": "def max_prime_factors(n, return_all=False):\n    if n < 2:\n        return [] if return_all else None  # No prime factors for numbers less than 2\n    \n    prime_factors = []\n    \n    # Remove all factors of 2\n    while n % 2 == 0:\n        prime_factors.append(2)\n        n //= 2\n    \n    # Check for odd factors from 3 onwards\n    factor = 3\n    while factor * factor <= n:\n        while n % factor == 0:\n            prime_factors.append(factor)\n            n //= factor\n        factor += 2\n    \n    # If n is a prime number greater than 2\n    if n > 2:\n        prime_factors.append(n)\n    \n    if return_all:\n        return prime_factors\n    else:\n        return prime_factors[-1] if prime_factors else None\n\n# Example usage:\nprint(max_prime_factors(13195))  # Output: 29\nprint(max_prime_factors(2048))   # Output: 2\n\nprint(max_prime_factors(13195, return_all=True))  # Output: [5, 7, 13, 29]\nprint(max_prime_factors(2048, return_all=True))   # Output: [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n", "result": "passed", "passed": true}
{"task_id": 33, "requirement": "Functionality Extension", "completion": "def decimal_to_binary(decimal_numbers):\n    \"\"\"\n    Convert a list of decimal numbers to their binary representations.\n    \n    Parameters:\n    - decimal_numbers (list[int]): A list of decimal numbers to be converted.\n    \n    Returns:\n    - list[str]: A list of binary representations of the decimal numbers.\n    \"\"\"\n    if not all(isinstance(num, int) for num in decimal_numbers):\n        raise ValueError(\"All elements in the input list must be integers.\")\n    \n    binary_list = []\n    for decimal_number in decimal_numbers:\n        if decimal_number < 0:\n            binary_list.append('-' + decimal_to_binary(-decimal_number))\n        else:\n            binary_digits = []\n            while decimal_number > 0:\n                binary_digits.append(str(decimal_number % 2))\n                decimal_number //= 2\n            \n            # Handle the case where the number is 0\n            if not binary_digits:\n                binary_list.append('0')\n            else:\n                binary_list.append(''.join(reversed(binary_digits)))\n    \n    return binary_list\n\n# Example usage:\nprint(decimal_to_binary([10, 255, -2]))  # Output: ['1010', '11111111', '-10']\nprint(decimal_to_binary([-1, 0, 5, 42])) # Output: ['-1', '0', '101', '101010']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwrqewrjy.py\", line 20, in <module>\n    print(decimal_to_binary([10, 255, -2]))  # Output: ['1010', '11111111', '-10']\n  File \"/tmp/tmpwrqewrjy.py\", line 7, in decimal_to_binary\n    binary_list.append('-' + decimal_to_binary(-decimal_number))\n  File \"/tmp/tmpwrqewrjy.py\", line 2, in decimal_to_binary\n    if not all(isinstance(num, int) for num in decimal_numbers):\nTypeError: 'int' object is not iterable", "passed": false}
{"task_id": 34, "requirement": "Functionality Extension", "completion": "def find_missing(arr):\n    \"\"\"\n    Finds all missing numbers in a sorted array of integers in arithmetic progression.\n    \n    Parameters:\n    arr (list): A sorted list of integers in arithmetic progression with one or more missing numbers.\n    \n    Returns:\n    list: A list of missing numbers in the array.\n    \"\"\"\n    if not arr:\n        return []\n    \n    n = len(arr)\n    total_diff = arr[-1] - arr[0]\n    expected_diff = total_diff // (n - 1 + len(range((total_diff // (n - 1))))) if n > 1 else 0\n    \n    missing_numbers = []\n    expected_value = arr[0]\n    \n    for value in arr:\n        while expected_value < value:\n            missing_numbers.append(expected_value)\n            expected_value += expected_diff\n        expected_value = value + expected_diff\n    \n    # Check if any missing numbers beyond the last element\n    while expected_value <= arr[-1] + expected_diff:\n        missing_numbers.append(expected_value)\n        expected_value += expected_diff\n    \n    return missing_numbers\n\n# Example usage:\narr_example = [0, 1, 2, 4, 5, 7, 8, 9]\nprint(find_missing(arr_example))  # Output should be [3, 6]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpoag2ctbw.py\", line 22, in <module>\n    assert find_missing([1,3,6], 3) == [2, 4, 5]\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "requirement": "Functionality Extension", "completion": "def find_rect_num(numbers):\n    \"\"\"\n    Calculate the list of n-th rectangular numbers for a given list of integers.\n    \n    :param numbers: A list of integers representing the positions in the sequence of rectangular numbers.\n    :return: A list of the corresponding rectangular numbers.\n    \"\"\"\n    return [n * (n + 1) for n in numbers]\n\n# Example usage:\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4, 5]  # List of integers\n    result = find_rect_num(numbers)\n    print(f\"The rectangular numbers for the list {numbers} are: {result}\")\n", "result": "passed", "passed": true}
{"task_id": 36, "requirement": "Functionality Extension", "completion": "def find_nth_digit(dividend, divisor, n):\n    # Ensure that we work with positive values for simplicity\n    dividend = abs(dividend)\n    divisor = abs(divisor)\n    \n    # Perform the integer division to get the initial part of the result\n    quotient = dividend // divisor\n    \n    # Get the remainder for the decimal part calculation\n    remainder = dividend % divisor\n    \n    # Initialize an empty string to hold the decimal part digits\n    decimal_digits = \"\"\n    \n    # Loop to generate the decimal part until we have enough digits or reach a repeating cycle\n    seen_remainders = {}\n    i = 0\n    while remainder != 0 and len(decimal_digits) < n + 10:  # Add some buffer to ensure we have enough digits\n        if remainder in seen_remainders:\n            break  # Repeating cycle detected\n        \n        seen_remainders[remainder] = i\n        remainder *= 10\n        new_digit = remainder // divisor\n        decimal_digits += str(new_digit)\n        remainder %= divisor\n        i += 1\n    \n    # If we didn't generate enough digits, the division was exact or repetitive\n    if len(decimal_digits) == 0:\n        return -1  # Or any other indicator that the digit couldn't be found\n    \n    # Extract the nth digit from the decimal part\n    if n <= len(decimal_digits):\n        nth_digit = int(decimal_digits[n-1])\n    else:\n        nth_digit = -1  # nth digit does not exist beyond the length of decimal_digits\n    \n    return nth_digit\n\n# Example usage:\nprint(find_nth_digit(-1, 2, 3))  # Should print 4 because |-1| / 2 = 0.500... and the 3rd digit is 0\nprint(find_nth_digit(2, -3, 5))  # Should print 6 because |2| / |3| = 0.666... and the 5th digit is 6\nprint(find_nth_digit(-7, -3, 4))  # Should print 3 because |-7| / |-3| = 2.333... and the 4th digit is 3\n", "result": "passed", "passed": true}
{"task_id": 37, "requirement": "Functionality Extension", "completion": "def sort_mixed_list(mixed_list, reverse_strings=False):\n    # Separate integers and strings\n    integers = []\n    strings = []\n    \n    for item in mixed_list:\n        if isinstance(item, int):\n            integers.append(item)\n        elif isinstance(item, str):\n            strings.append(item)\n        else:\n            raise ValueError(\"The list must contain only integers and strings.\")\n    \n    # Sort each list\n    integers.sort()\n    if reverse_strings:\n        strings.sort(reverse=True)\n    else:\n        strings.sort()\n    \n    # Concatenate the sorted lists\n    sorted_list = integers + strings\n    \n    return sorted_list\n\n# Example usage:\nmixed_list = [5, \"banana\", 3, \"apple\", 7, \"cherry\"]\nsorted_list = sort_mixed_list(mixed_list)\nprint(sorted_list)  # Output: [3, 5, 7, 'apple', 'banana', 'cherry']\n\nsorted_list_reverse = sort_mixed_list(mixed_list, reverse_strings=True)\nprint(sorted_list_reverse)  # Output: [3, 5, 7, 'z', 'y', 'x'] if the strings were 'z', 'y', 'x'\n", "result": "passed", "passed": true}
{"task_id": 38, "requirement": "Functionality Extension", "completion": "def div_even_odd(numbers):\n    \"\"\"\n    Divides the first even number by the first odd number in the given list.\n    \n    :param numbers: List of integers.\n    :return: The division result of the first even number by the first odd number.\n             Returns None if there's no even or odd number in the list.\n    \"\"\"\n    first_even = None\n    first_odd = None\n    \n    for num in numbers:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        elif first_odd is None and num % 2 != 0:\n            first_odd = num\n        \n        # Once both first even and first odd are found, break the loop\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Check if both first even and first odd were found\n    if first_even is None or first_odd is None:\n        return None\n    \n    # Perform the division\n    try:\n        result = first_even / first_odd\n    except ZeroDivisionError:\n        # Handle the case where the first odd number is zero\n        return None\n    \n    return result\n\n# Example usage:\nprint(div_even_odd([-5, -3, -2, -8]))  # Output should be 1.6666666666666667 (-2/-1.25)\nprint(div_even_odd([2, 4, 6]))         # Output should be None (no odd number)\nprint(div_even_odd([1, 3, 5]))         # Output should be None (no even number)\nprint(div_even_odd([-2, 3, 7, -4]))    # Output should be -0.8 (-2/2.5)\n", "result": "passed", "passed": true}
{"task_id": 39, "requirement": "Functionality Extension", "completion": "from collections import Counter\n\ndef generate_permutations(current, remaining, result, char_count):\n    # Base case: if there are no characters left, add the current permutation to the result\n    if not remaining:\n        result.append(''.join(current))\n        return\n    \n    # Try to place each character in the available positions\n    for char in char_count:\n        if char_count[char] > 0:\n            # Check if placing this character would violate the adjacency rule\n            if len(current) > 0 and current[-1] == char:\n                continue\n            \n            # Place the character and decrease its count\n            current.append(char)\n            char_count[char] -= 1\n            \n            # Recurse with the updated lists\n            generate_permutations(current, remaining, result, char_count)\n            \n            # Backtrack: remove the character and restore its count\n            current.pop()\n            char_count[char] += 1\n\ndef rearrange_string(s):\n    # Count the frequency of each character\n    char_count = Counter(s)\n    \n    # List to store all valid permutations\n    result = []\n    \n    # Start generating permutations\n    generate_permutations([], s, result, char_count)\n    \n    # Return the unique valid permutations\n    return list(set(result))\n\n# Example usage:\nprint(rearrange_string(\"aab\"))  # Output: ['aba', 'baa']\nprint(rearrange_string(\"aaab\")) # Output: [] since no valid rearrangement is possible\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0s3w2vmn.py\", line 33, in <module>\n    assert set(rearange_string('aabb')) == {'abab', 'baba'}\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "requirement": "Functionality Extension", "completion": "from collections import Counter\nfrom itertools import chain\n\ndef flatten(nested_list):\n    \"\"\"Recursively flattens a nested list.\"\"\"\n    for item in nested_list:\n        if isinstance(item, list):\n            yield from flatten(item)\n        else:\n            yield item\n\ndef freq_element(nested_list):\n    \"\"\"Counts the frequency of each integer in a nested list of arbitrary depth.\"\"\"\n    # Flatten the nested list\n    flattened_list = list(flatten(nested_list))\n    \n    # Count the frequency of each element in the flattened list\n    freq_counter = Counter(flattened_list)\n    \n    return freq_counter\n\n# Example usage:\nnested_list = [\n    [1, 2, [3, 4], 5],\n    [6, [7, [8, 9]], 10],\n    [1, 2, 3]\n]\n\nprint(freq_element(nested_list))\n", "result": "passed", "passed": true}
{"task_id": 41, "requirement": "Functionality Extension", "completion": "def filter_evennumbers(numbers):\n    # Filter out only integers from the input list\n    integers_only = filter(lambda x: isinstance(x, int), numbers)\n    \n    # Further filter to keep only even numbers\n    even_numbers = filter(lambda x: x % 2 == 0, integers_only)\n    \n    # Convert the filter object to a list before returning\n    return list(even_numbers)\n\n# Example usage:\nexample_list = [1, \"two\", 3.5, 4, 5, 6, \"seven\"]\nprint(filter_evennumbers(example_list))  # Output: [4, 6]\n", "result": "passed", "passed": true}
{"task_id": 42, "requirement": "Functionality Extension", "completion": "def find_sum(arr):\n    \"\"\"\n    Finds the sum of all repeated elements in a given list.\n    \n    Parameters:\n    arr (list): A list of integers.\n    \n    Returns:\n    int: The sum of all repeated elements in the list.\n    \"\"\"\n    # Dictionary to store the count of each element\n    element_count = {}\n    \n    # Iterate through the list to populate the dictionary with counts\n    for element in arr:\n        if element in element_count:\n            element_count[element] += 1\n        else:\n            element_count[element] = 1\n    \n    # Calculate the sum of elements that appear more than once\n    repeated_sum = sum(element * (count - 1) for element, count in element_count.items() if count > 1)\n    \n    return repeated_sum\n\n# Example usage:\nexample_list = [1, 2, 3, 2, 3, 4, 5, 3, -1, -2, -1]\nprint(find_sum(example_list))  # Output should be 8 because 2 appears twice (2*(2-1)=2), 3 appears three times (3*(3-1)=6), and -1 appears twice (-1*(2-1)=-1), thus 2 + 6 - 1 = 7\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpas2ik6ti.py\", line 16, in <module>\n    assert find_sum([-1, -2, -3, -1, -1], 5) == -2\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Functionality Extension", "completion": "import re\n\ndef text_match(text):\n    # Define the regex pattern to match sequences of lowercase letters joined with one or more underscores\n    pattern = r'\\b[a-z]+(_[a-z]+)*\\b'\n    \n    # Find all occurrences of the pattern in the provided text\n    matches = re.findall(pattern, text)\n    \n    return matches\n\n# Example usage:\nsample_text = \"this_is_a_sample_text_with_multiple_matches_like_this_one_and_another_example\"\nprint(text_match(sample_text))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpo7eskfxs.py\", line 11, in <module>\n    assert text_match('abc_def_ghi') == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 45, "requirement": "Functionality Extension", "completion": "from math import gcd\n\ndef get_gcd(numbers):\n    \"\"\"\n    Find the greatest common divisor (GCD) of all non-zero elements in the given list of integers.\n    \n    :param numbers: List[int] - A list of integers that may include zeros.\n    :return: int - The GCD of all non-zero elements in the list, or 0 if all elements are zero.\n    \"\"\"\n    # Filter out zero elements from the list\n    filtered_numbers = [num for num in numbers if num != 0]\n    \n    # Check if there are any non-zero elements left\n    if not filtered_numbers:\n        return 0\n    \n    # Initialize gcd_result with the first non-zero element\n    gcd_result = filtered_numbers[0]\n    \n    # Iterate through the remaining non-zero elements\n    for num in filtered_numbers[1:]:\n        gcd_result = gcd(gcd_result, num)\n        \n    return gcd_result\n\n# Example usage:\nnumbers_with_zeros = [8, 12, 0, 24, 0]\nprint(\"The GCD of\", numbers_with_zeros, \"is:\", get_gcd(numbers_with_zeros))\n", "result": "passed", "passed": true}
{"task_id": 46, "requirement": "Functionality Extension", "completion": "def test_distinct(numbers):\n    \"\"\"\n    Determine if all numbers in the list are distinct.\n\n    Args:\n    - numbers: A list of integers or floats.\n\n    Returns:\n    - True if all numbers are distinct, False otherwise.\n    \"\"\"\n    return len(numbers) == len(set(numbers))\n\n# Example usage:\nprint(test_distinct([1, 2, 3, 4]))          # Should print True\nprint(test_distinct([1.0, 2.0, 3.0, 4.0]))  # Should print True\nprint(test_distinct([1, 2, 2, 3]))          # Should print False\nprint(test_distinct([1.0, 2.0, 2.0, 3.0]))  # Should print False\n", "result": "passed", "passed": true}
{"task_id": 47, "requirement": "Functionality Extension", "completion": "def last_non_zero_digit(n):\n    if n == 0 or n == 1:\n        return 1  # Factorial of 0 or 1 is 1, so the last non-zero digit is 1\n    \n    # For larger n, we remove factors of 10 and take modulo 10\n    last_digit = 1\n    for i in range(2, n + 1):\n        while i % 5 == 0:\n            i //= 5\n        last_digit = (last_digit * (i % 10)) % 10\n    \n    # Adjust for powers of 2 left over\n    power_of_two = 0\n    for i in range(2, n + 1):\n        while i % 2 == 0:\n            i //= 2\n            power_of_two += 1\n    \n    # Adjust based on the number of factors of 5 and 2\n    if power_of_two > n // 5 + n // 25 + n // 125:\n        last_digit *= 6\n    elif power_of_two > n // 5 + n // 25:\n        last_digit *= 4\n    else:\n        last_digit *= 2\n    \n    return last_digit % 10\n\ndef compute_last_digit(a, b):\n    if a == 0 or b == 0:\n        return 1  # Factorial of 0 is 1, so the last digit is 1\n    \n    if a > b:\n        return 0  # If a > b, the result would be a fraction, hence no last digit in integer context\n    \n    last_digit_a = last_non_zero_digit(a)\n    last_digit_b = last_non_zero_digit(b)\n    \n    # Calculate the last digit of the division\n    if last_digit_b != 0:\n        result = (last_digit_a * pow(last_digit_b, -1, 10)) % 10\n    else:\n        result = 0  # Division by zero case, though theoretically shouldn't happen\n    \n    return result\n\n# Example usage:\nprint(compute_last_digit(0, 5))  # Should return 1\nprint(compute_last_digit(3, 5))  # Example output\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8zzygwb8.py\", line 39, in <module>\n    print(compute_last_digit(3, 5))  # Example output\n  File \"/tmp/tmp8zzygwb8.py\", line 33, in compute_last_digit\n    result = (last_digit_a * pow(last_digit_b, -1, 10)) % 10\nValueError: base is not invertible for the given modulus", "passed": false}
{"task_id": 48, "requirement": "Functionality Extension", "completion": "def odd_bit_set_number(n):\n    \"\"\"\n    Set all odd bits of the given integer n to 1, handling negative numbers by working on their absolute value.\n    \n    Args:\n    - n (int): The input integer whose odd bits are to be set.\n    \n    Returns:\n    - int: The modified integer with all odd bits set to 1, preserving the original sign.\n    \"\"\"\n    # Work with the absolute value of n\n    abs_n = abs(n)\n    \n    # Determine the number of bits in the binary representation of abs_n\n    num_bits = abs_n.bit_length()\n    \n    # Create a mask where all odd bits are set to 1\n    mask = 0\n    for i in range(num_bits):\n        if i % 2 == 1:\n            mask |= (1 << i)\n    \n    # Set the odd bits of abs_n using the mask\n    result = abs_n | mask\n    \n    # Preserve the original sign of n\n    if n < 0:\n        return -result\n    else:\n        return result\n\n# Example usage:\nprint(bin(odd_bit_set_number(10)))  # Output should be: 0b1110\nprint(bin(odd_bit_set_number(-10)))  # Output should be: -0b1110 or similar representation depending on system\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpii3jpptf.py\", line 21, in <module>\n    assert odd_bit_set_number(-10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "requirement": "Functionality Extension", "completion": "def specified_element(two_dim_list, index):\n    \"\"\"\n    Extracts the element at the specified index (including negative indices) from each sub-list of a two-dimensional list.\n    \n    :param two_dim_list: A two-dimensional list (list of lists)\n    :param index: The index of the element to extract from each sub-list; can be negative\n    :return: A list containing the extracted elements\n    \"\"\"\n    # Initialize an empty list to store the extracted elements\n    extracted_elements = []\n    \n    # Iterate through each sub-list in the two-dimensional list\n    for sublist in two_dim_list:\n        # Calculate the effective index taking negative indices into account\n        effective_index = index\n        if effective_index < 0:\n            effective_index += len(sublist)\n        \n        # Check if the effective index is within the bounds of the current sub-list\n        if 0 <= effective_index < len(sublist):\n            # Append the element at the specified index to the extracted_elements list\n            extracted_elements.append(sublist[effective_index])\n        else:\n            # Optionally handle the case where the index is out of bounds\n            print(f\"Effective Index {effective_index} is out of bounds for sublist {sublist}\")\n    \n    return extracted_elements\n\n# Example usage:\ntwo_dim_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nindex = -1  # We want to extract the last element (-1) from each sublist\nprint(specified_element(two_dim_list, index))  # Output: [3, 6, 9]\n\nindex = -2  # We want to extract the second-to-last element (-2) from each sublist\nprint(specified_element(two_dim_list, index))  # Output: [2, 5, 8]\n", "result": "passed", "passed": true}
{"task_id": 51, "requirement": "Functionality Extension", "completion": "def check_triangle_type(a, b, c):\n    \"\"\"\n    Check if a triangle with sides a, b, and c is equilateral, isosceles, or neither.\n\n    Parameters:\n    a (float): Length of the first side of the triangle.\n    b (float): Length of the second side of the triangle.\n    c (float): Length of the third side of the triangle.\n\n    Returns:\n    None: Prints the type of triangle based on the input sides.\n    \"\"\"\n    if a == b == c:\n        print(\"The triangle is equilateral.\")\n    elif a == b or b == c or a == c:\n        print(\"The triangle is isosceles.\")\n    else:\n        print(\"The triangle is neither equilateral nor isosceles.\")\n\n# Example usage:\ncheck_triangle_type(5, 5, 5)  # This should print \"The triangle is equilateral.\"\ncheck_triangle_type(5, 4, 4)  # This should print \"The triangle is isosceles.\"\ncheck_triangle_type(5, 4, 3)  # This should print \"The triangle is neither equilateral nor isosceles.\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphmcgi7fo.py\", line 12, in <module>\n    assert check_equilateral(5, 5, 3) == 'isosceles'\nNameError: name 'check_equilateral' is not defined", "passed": false}
{"task_id": 52, "requirement": "Functionality Extension", "completion": "def parallelogram_areas(parallelograms):\n    \"\"\"\n    Calculate the areas of multiple parallelograms given as a list of tuples.\n    \n    Each tuple in the list contains the base and height of a parallelogram.\n    \n    Parameters:\n    parallelograms (list of tuples): A list where each tuple contains the base and height of a parallelogram.\n    \n    Returns:\n    list of floats: A list containing the areas of the parallelograms.\n    \"\"\"\n    areas = []\n    for base, height in parallelograms:\n        area = base * height\n        areas.append(area)\n    return areas\n\n# Example usage:\nparallelograms = [(5.0, 3.0), (4.0, 6.0), (7.0, 2.0)]\nareas = parallelogram_areas(parallelograms)\nprint(f\"The areas of the parallelograms are {areas}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0ozwm7bx.py\", line 11, in <module>\n    assert parallelogram_area_list([(10, 20), (15, 20), (8, 9)]) == [200, 300, 72]\nNameError: name 'parallelogram_area_list' is not defined", "passed": false}
{"task_id": 53, "requirement": "Functionality Extension", "completion": "def check_equality(s):\n    \"\"\"\n    Check if the first and last characters of the string s are equal, ignoring case sensitivity.\n\n    :param s: Input string\n    :return: True if the first and last characters are equal (case-insensitive), False otherwise\n    \"\"\"\n    # Check if the string is empty or has only one character\n    if len(s) <= 1:\n        return True\n    \n    # Convert both the first and last characters to lowercase for case-insensitive comparison\n    return s[0].lower() == s[-1].lower()\n\n# Example usage:\nprint(check_equality(\"radar\"))  # Should print True\nprint(check_equality(\"Hello\"))  # Should print True because 'H' and 'o' are case-insensitive matches\nprint(check_equality(\"Python\")) # Should print False\nprint(check_equality(\"A\"))      # Should print True\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp57i0o5rs.py\", line 12, in <module>\n    assert check_equality('Abca') == 'Equal'\nAssertionError", "passed": false}
{"task_id": 54, "requirement": "Functionality Extension", "completion": "def counting_sort(arr):\n    if not arr:\n        return arr\n    \n    # Find the maximum and minimum values in the array\n    max_val = max(arr)\n    min_val = min(arr)\n    \n    # The range of the numbers\n    range_of_numbers = max_val - min_val + 1\n    \n    # Shift all elements so that the minimum becomes zero\n    shifted_arr = [num - min_val for num in arr]\n    \n    # Initialize count array with zeros\n    count_arr = [0] * range_of_numbers\n    \n    # Store the count of each element in count_arr\n    for num in shifted_arr:\n        count_arr[num] += 1\n    \n    # Modify count_arr such that each element at each index\n    # stores the sum of previous counts\n    for i in range(1, len(count_arr)):\n        count_arr[i] += count_arr[i - 1]\n    \n    # Output array that will have sorted arr\n    output_arr = [0] * len(arr)\n    \n    # Build the output array\n    for num in reversed(shifted_arr):\n        output_arr[count_arr[num] - 1] = num + min_val\n        count_arr[num] -= 1\n    \n    return output_arr\n\n# Example usage:\narr = [4, -2, 2, -8, 3, -3, 1]\nsorted_arr = counting_sort(arr)\nprint(\"Sorted array:\", sorted_arr)\n", "result": "passed", "passed": true}
{"task_id": 55, "requirement": "Functionality Extension", "completion": "def tn_gp(a, r, n):\n    \"\"\"\n    Calculate the n-th term of a geometric progression.\n\n    Parameters:\n    a (float): The first term of the geometric sequence.\n    r (float): The common ratio of the geometric sequence.\n    n (int): The term number to calculate.\n\n    Returns:\n    float: The value of the n-th term.\n    \"\"\"\n    # Ensure the terms are treated as floating point numbers\n    return float(a) * (float(r) ** (n - 1))\n\n# Example usage:\na = 2.0  # First term (floating point)\nr = 3.5  # Common ratio (floating point)\nn = 4    # Term number to find (integer)\n\nresult = tn_gp(a, r, n)\nprint(f\"The {n}-th term of the geometric series with first term {a} and common ratio {r} is: {result}\")\n", "result": "passed", "passed": true}
{"task_id": 56, "requirement": "Functionality Extension", "completion": "def reverse_number(n):\n    \"\"\"Helper function to reverse the digits of a number while preserving the sign.\"\"\"\n    if n < 0:\n        return -int(str(-n)[::-1])\n    else:\n        return int(str(n)[::-1])\n\ndef check(number):\n    \"\"\"\n    Function to check if a given number is one less than twice its reverse.\n    \n    Parameters:\n    - number: An integer\n    \n    Returns:\n    - True if the number is one less than twice its reverse, False otherwise.\n    \"\"\"\n    reversed_num = reverse_number(number)\n    doubled_reversed = 2 * reversed_num\n    one_less_than_twice_reverse = doubled_reversed - 1\n    \n    return number == one_less_than_twice_reverse\n\n# Example usage:\nprint(check(47))       # Should return True because 2*74 - 1 = 147\nprint(check(-47))      # Should return False because reversing -47 gives -74, and 2*(-74) - 1 != -47\nprint(check(83))       # Should return False\nprint(check(-83))      # Should return False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp68wr5rci.py\", line 18, in <module>\n    assert check(-37) == True\nAssertionError", "passed": false}
{"task_id": 57, "requirement": "Functionality Extension", "completion": "def find_max_num(digits):\n    # Convert all digits to strings\n    str_digits = [str(digit) for digit in digits]\n    \n    # Sort the digits in descending order using a custom key (the string itself)\n    str_digits.sort(reverse=True, key=lambda x: x*6)  # Multiply string to handle duplicates\n    \n    # Join the sorted digits to form the largest number\n    max_num_str = ''.join(str_digits)\n    \n    # Convert the result back to an integer if needed\n    max_num = int(max_num_str)\n    \n    return max_num\n\n# Example usage:\ndigits = [5, 3, 7, 9, 0, 0, 3]\nprint(find_max_num(digits))  # Output will be 9753300\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxs6pxex_.py\", line 14, in <module>\n    assert find_max_num([1, 1, 2, 2], 4) == 2211\nTypeError: find_max_num() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 58, "requirement": "Functionality Extension", "completion": "def opposite_signs(pairs):\n    \"\"\"\n    Check if each pair of integers in a list has opposite signs.\n\n    Args:\n    pairs (list of tuples): A list where each element is a tuple containing two integers.\n\n    Returns:\n    list of bool: A list of boolean values indicating whether each pair has opposite signs.\n    \"\"\"\n    return [(a > 0) != (b > 0) for a, b in pairs]\n\n# Example usage:\npairs = [(1, -2), (-1, -2), (3, 4), (-5, 6)]\nresult = opposite_signs(pairs)\nprint(result)  # Should print [True, False, False, True]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7b4wsc0e.py\", line 7, in <module>\n    assert opposite_signs_list([(1, -2), (3, 2), (-10, -10)]) == [True, False, False]\nNameError: name 'opposite_signs_list' is not defined", "passed": false}
{"task_id": 59, "requirement": "Functionality Extension", "completion": "def nth_octagonal_number(n):\n    return n * (3 * n - 2)\n\ndef octagonal_numbers_list(n_list):\n    result = []\n    for n in n_list:\n        octagonal_nums = [nth_octagonal_number(i) for i in range(1, n + 1)]\n        result.append(octagonal_nums)\n    return result\n\n# Example usage:\nn_list = [5, 3, 7]\nprint(octagonal_numbers_list(n_list))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpl3v7u0tt.py\", line 12, in <module>\n    assert is_octagonal([1, 2, 3]) == [1, 8, 21]\nNameError: name 'is_octagonal' is not defined", "passed": false}
{"task_id": 60, "requirement": "Functionality Extension", "completion": "def max_len_sub(arr):\n    if not arr:\n        return 0\n    \n    n = len(arr)\n    max_length = 1  # At least one element can form a subsequence of length 1\n    \n    for i in range(n):\n        current_length = 1\n        for j in range(i + 1, n):\n            if abs(arr[j] - arr[i]) == 1:  # Check difference of 1 or -1\n                current_length += 1\n                i = j  # Move i to j to continue the sequence from the new end\n            else:\n                break  # If the condition fails, break and start checking from i+1\n        max_length = max(max_length, current_length)\n    \n    return max_length\n\n# Example usage:\narr = [1, 2, 3, 4, 3, 2, 1, 0, -1, -2]\nprint(max_len_sub(arr))  # Output should be the length of the longest subsequence with the required property\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpj5pwmch2.py\", line 19, in <module>\n    assert max_len_sub([10, 7, 4, 1, -2], -3) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}

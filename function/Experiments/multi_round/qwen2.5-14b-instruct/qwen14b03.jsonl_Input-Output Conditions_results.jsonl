{"task_id": 14, "requirement": "Input-Output Conditions", "completion": "def find_volume(base_area, height, length_prism):\n    \"\"\"\n    Calculate the volume of a triangular prism given its base area, height, and length.\n    \n    Parameters:\n    - base_area (float): The area of the triangular base.\n    - height (float): The height of the triangular base.\n    - length_prism (float): The length of the prism.\n    \n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    # Ensure all inputs are positive\n    if base_area <= 0 or height <= 0 or length_prism <= 0:\n        raise ValueError(\"All input dimensions must be positive numbers.\")\n    \n    # Calculate the volume of the triangular prism\n    volume = base_area * length_prism\n    \n    return volume\n\n# Example usage:\n# Find the volume of a triangular prism with a base area of 6 square units,\n# height of the triangular base of 3 units, and length of the prism of 5 units.\nvolume = find_volume(6, 3, 5)\nprint(f\"The volume of the triangular prism is {volume} cubic units.\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphn331krj.py\", line 13, in <module>\n    assert find_volume(10,8,6) == 240\nAssertionError", "passed": false}
{"task_id": 15, "requirement": "Input-Output Conditions", "completion": "import re\n\ndef split_lowerstring(input_string):\n    # Define a regex pattern to capture splits at lowercase letters\n    pattern = r'([a-z])(?=[A-Z])'  # Matches lowercase letters followed by uppercase letters\n    \n    # Insert a delimiter between lowercase and uppercase letters\n    modified_string = re.sub(pattern, r'\\1-', input_string)\n    \n    # Split the modified string using the delimiter\n    split_strings = modified_string.split('-')\n    \n    # In case the string starts with a lowercase letter, add the first part separately\n    if input_string and input_string[0].islower():\n        split_strings = [input_string[:input_string.find('-')]] + split_strings\n    \n    # Return the list of split strings\n    return split_strings\n\n# Example usage:\nexample_string = \"startMiddleEnd\"\nprint(split_lowerstring(example_string))  # Expected output: ['start', 'Middle', 'End']\n\nexample_string = \"abcDefGhi\"\nprint(split_lowerstring(example_string))  # Expected output: ['abc', 'Def', 'Ghi']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpz1fm0vkw.py\", line 19, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "requirement": "Input-Output Conditions", "completion": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Checks if there are any sequences of lowercase letters joined with an underscore in the given text.\n\n    :param text: A string containing the text to search within.\n    :return: A string indicating whether a match was found or not.\n    \"\"\"\n    # Define the regex pattern for finding sequences of lowercase letters joined with an underscore\n    pattern = r\"[a-z]+_[a-z]+\"\n    \n    # Use re.findall to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Check if matches were found and return the appropriate message\n    if matches:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\nexample_text = \"This_is_an_example_text_with_lower_case_words_and_this_one_is_special\"\nprint(text_lowercase_underscore(example_text))  # Output: Found a match!\n\nno_match_text = \"THIS_IS_AN_ALL_CAPS_TEXT_WITHOUT_UNDERSCORE\"\nprint(text_lowercase_underscore(no_match_text))  # Output: Not matched!\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpp8dt1irj.py\", line 19, in <module>\n    assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')\nAssertionError", "passed": false}
{"task_id": 17, "requirement": "Input-Output Conditions", "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n    \n    :param side_length: The length of one side of the square. Must be a non-negative integer.\n    :return: The perimeter of the square if input is valid; otherwise, returns None.\n    \"\"\"\n    # Check if the input is an integer\n    if not isinstance(side_length, int):\n        return None\n    \n    # Check if the input is non-negative\n    if side_length < 0:\n        return None\n    \n    # Calculate the perimeter\n    perimeter = 4 * side_length\n    return perimeter\n\n# Example usage:\nperimeter = square_perimeter(5)\nprint(\"The perimeter of the square is:\", perimeter)\n\n# Testing with invalid inputs\ninvalid_perimeter = square_perimeter(-3)\nprint(\"Invalid input test (negative number):\", invalid_perimeter)\n\ninvalid_perimeter = square_perimeter(3.5)\nprint(\"Invalid input test (float number):\", invalid_perimeter)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpnu3_rsrl.py\", line 29, in <module>\n    assert False, 'Expected ValueError for negative input'\nAssertionError: Expected ValueError for negative input", "passed": false}
{"task_id": 18, "requirement": "Input-Output Conditions", "completion": "def remove_dirty_chars(main_string, chars_to_remove):\n    \"\"\"\n    Removes characters from main_string that are present in chars_to_remove.\n    \n    Parameters:\n    - main_string (str): The original string from which characters will be removed.\n    - chars_to_remove (str): The string containing characters to be removed from main_string.\n    \n    Returns:\n    - str: The modified string after removing specified characters.\n    \n    Raises:\n    - ValueError: If either input string contains non-alphabetic characters.\n    \"\"\"\n    # Check if both strings contain only alphabetic characters\n    if not (main_string.isalpha() and chars_to_remove.isalpha()):\n        raise ValueError('Input strings must only contain alphabetic characters.')\n    \n    # Create a set of characters to remove for faster lookup\n    chars_set = set(chars_to_remove)\n    \n    # Use a generator expression to filter out unwanted characters\n    filtered_string = ''.join(char for char in main_string if char not in chars_set)\n    \n    return filtered_string\n\n# Example usage:\ntry:\n    original_str = \"HelloWorld\"\n    chars_to_remove = \"Helo\"\n    cleaned_str = remove_dirty_chars(original_str, chars_to_remove)\n    print(cleaned_str)  # Output should be \"Wrld\"\nexcept ValueError as e:\n    print(e)\n\n# Example with invalid input:\ntry:\n    original_str = \"Hello, World!\"\n    chars_to_remove = \"Helo\"\n    cleaned_str = remove_dirty_chars(original_str, chars_to_remove)\nexcept ValueError as e:\n    print(e)  # Should print \"Input strings must only contain alphabetic characters.\"\n", "result": "passed", "passed": true}
{"task_id": 19, "requirement": "Input-Output Conditions", "completion": "def test_duplicate(arr):\n    \"\"\"\n    Check if the given list contains any duplicate elements.\n\n    :param arr: List of integers\n    :return: True if there are duplicates, False otherwise\n    \"\"\"\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n\n    seen = set()\n    for number in arr:\n        if not isinstance(number, int):\n            raise TypeError(\"All elements in the list must be integers\")\n        if number in seen:\n            return True\n        seen.add(number)\n    return False\n\n# Example usage:\ntry:\n    print(test_duplicate([1, 2, 3, 4, 5, 2]))  # Output: True\n    print(test_duplicate([10, 22, 33, 44, 55]))  # Output: False\nexcept TypeError as e:\n    print(e)\n\n# Testing with invalid inputs:\ntry:\n    print(test_duplicate(\"not a list\"))  # This will raise a TypeError\nexcept TypeError as e:\n    print(e)\n\ntry:\n    print(test_duplicate([1, \"a\", 3]))  # This will raise a TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 20, "requirement": "Input-Output Conditions", "completion": "def is_woodall(num):\n    \"\"\"\n    Check if the given number is a Woodall number.\n    \n    A Woodall number is of the form n * 2^n - 1 for some positive integer n.\n    \n    :param num: Integer to check\n    :return: True if num is a Woodall number, False otherwise\n    \"\"\"\n    n = 1\n    while True:\n        woodall_num = n * 2**n - 1\n        if woodall_num > num:\n            return False\n        if woodall_num == num:\n            return True\n        n += 1\n\n# Example usage:\nprint(is_woodall(7))   # True, because 7 is 1*2^1-1\nprint(is_woodall(23))  # True, because 23 is 2*2^2-1\nprint(is_woodall(63))  # True, because 63 is 3*2^3-1\nprint(is_woodall(10))  # False\n", "result": "passed", "passed": true}
{"task_id": 23, "requirement": "Input-Output Conditions", "completion": "def maximum_sum(list_of_lists):\n    \"\"\"\n    Finds the maximum sum of elements among all sublists in a given list of lists.\n    \n    Parameters:\n    - list_of_lists (list of lists): A list containing multiple sublists of integers.\n    \n    Returns:\n    - int: The maximum sum of elements found in any of the sublists.\n    \"\"\"\n    max_sum = float('-inf')  # Initialize with negative infinity\n    \n    for sublist in list_of_lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            \n    return max_sum\n\n# Example usage:\nexample_list_of_lists = [[1, 2, 3], [4, 5, 6], [-7, -8, 9], [0]]\nprint(maximum_sum(example_list_of_lists))  # Output should be 15 (from the sublist [4, 5, 6])\n", "result": "passed", "passed": true}
{"task_id": 25, "requirement": "Input-Output Conditions", "completion": "from collections import Counter\n\ndef find_product(arr):\n    # Count the frequency of each element in the array\n    freq = Counter(arr)\n    \n    # Calculate the product of non-repeated elements\n    product = 1\n    for element, count in freq.items():\n        if count == 1:\n            product *= element\n    \n    return product\n\n# Example usage:\narr = [2, 3, 4, 5, 6, 3, 4]\nprint(find_product(arr))  # Output should be 2 * 5 * 6 = 60\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpekln_g3h.py\", line 14, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "requirement": "Input-Output Conditions", "completion": "def check_k_elements(tuples_list, k):\n    \"\"\"\n    Checks if all tuples in the list contain exactly k elements.\n\n    :param tuples_list: List of tuples to be checked.\n    :param k: The exact number of elements that each tuple must contain.\n    :return: True if all tuples contain exactly k elements, False otherwise.\n    \"\"\"\n    for tup in tuples_list:\n        if len(tup) != k:\n            return False\n    return True\n\n# Example usage:\ntuples_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nk = 3\nprint(check_k_elements(tuples_list, k))  # Output: True\n\ntuples_list = [(1, 2), (4, 5, 6), (7, 8, 9)]\nk = 3\nprint(check_k_elements(tuples_list, k))  # Output: False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpv9e2an00.py\", line 13, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 28, "requirement": "Input-Output Conditions", "completion": "def binomial_coeff(n, k):\n    \"\"\"\n    Calculate the binomial coefficient (n choose k).\n\n    Parameters:\n    n (int): The total number of items.\n    k (int): The number of items to choose.\n\n    Returns:\n    int: The binomial coefficient C(n, k).\n    \n    Raises:\n    ValueError: If n or k are negative, or if k is greater than n.\n    \"\"\"\n    if not isinstance(n, int) or not isinstance(k, int) or n < 0 or k < 0:\n        raise ValueError(\"Both n and k must be non-negative integers.\")\n    if k > n:\n        raise ValueError(\"k cannot be greater than n.\")\n    \n    # Optimization for k > n/2\n    if k > n - k:\n        k = n - k\n    \n    res = 1\n    for i in range(k):\n        res *= (n - i)\n        res //= (i + 1)\n    return res\n\n# Example usage:\nprint(binomial_coeff(5, 2))  # Output: 10\nprint(binomial_coeff(10, 3)) # Output: 120\n", "result": "passed", "passed": true}
{"task_id": 30, "requirement": "Input-Output Conditions", "completion": "from collections import Counter\n\ndef count_substring_with_equal_ends(s):\n    \"\"\"\n    Counts all substrings starting and ending with the same character.\n    \n    :param s: Input string\n    :return: Number of substrings starting and ending with the same character\n    \"\"\"\n    # Count the frequency of each character in the string\n    char_count = Counter(s)\n    \n    # Calculate the total number of valid substrings\n    count = sum((freq * (freq + 1)) // 2 for freq in char_count.values())\n    \n    return count\n\n# Example usage:\nprint(count_substring_with_equal_ends(\"abcab\"))  # Output depends on the input string\n", "result": "passed", "passed": true}
{"task_id": 32, "requirement": "Input-Output Conditions", "completion": "def max_prime_factors(n):\n    # Ensure the input is a positive integer\n    if not isinstance(n, int) or n < 2:\n        raise ValueError(\"Input must be a positive integer greater than 1\")\n    \n    max_prime = -1\n    \n    # Remove all factors of 2\n    while n % 2 == 0:\n        max_prime = 2\n        n //= 2\n    \n    # Check for odd factors from 3 onwards\n    factor = 3\n    while factor * factor <= n:\n        while n % factor == 0:\n            max_prime = factor\n            n //= factor\n        factor += 2\n    \n    # If n is a prime number greater than 2\n    if n > 2:\n        max_prime = n\n    \n    return max_prime\n\n# Example usage:\nprint(max_prime_factors(13195))  # Output: 29\nprint(max_prime_factors(2048))   # Output: 2\n", "result": "passed", "passed": true}
{"task_id": 35, "requirement": "Input-Output Conditions", "completion": "def find_rect_num(n):\n    \"\"\"\n    Calculate the n-th rectangular number.\n    \n    :param n: An integer representing the position in the sequence of rectangular numbers.\n    :return: The n-th rectangular number.\n    \"\"\"\n    return n * (n + 1)\n", "result": "passed", "passed": true}
{"task_id": 36, "requirement": "Input-Output Conditions", "completion": "def find_nth_digit(dividend, divisor, n):\n    # Perform the integer division to get the whole part of the result\n    quotient = dividend // divisor\n    # Get the remainder for the decimal part calculation\n    remainder = dividend % divisor\n    \n    # String to hold the decimal part digits\n    decimal_part = \"\"\n    \n    # Dictionary to detect repeating cycles\n    seen_remainders = {}\n    \n    # Loop to generate the decimal part until we find the nth digit or detect a repeating cycle\n    while len(decimal_part) < n and remainder != 0 and remainder not in seen_remainders:\n        # Store the current position and remainder\n        seen_remainders[remainder] = len(decimal_part)\n        \n        # Multiply the remainder by 10 and perform the division\n        remainder *= 10\n        digit = remainder // divisor\n        decimal_part += str(digit)\n        \n        # Update the remainder\n        remainder %= divisor\n    \n    # If we detected a repeating cycle or ran out of space, return -1\n    if remainder in seen_remainders:\n        return -1  # Indicate a repeating cycle or insufficient digits\n    \n    # If we don't have enough digits, return -1\n    if len(decimal_part) < n:\n        return -1\n    \n    # Extract the nth digit from the decimal part\n    nth_digit = int(decimal_part[n - 1])\n    \n    return nth_digit\n\n# Example usage:\nprint(find_nth_digit(1, 2, 3))  # Should print 0 because 1/2 = 0.500... and the 3rd digit is 0\nprint(find_nth_digit(2, 3, 5))  # Should print 6 because 2/3 = 0.666... and the 5th digit is 6\nprint(find_nth_digit(1, 7, 10)) # Should print 7 because 1/7 = 0.1428571428... and the 10th digit is 7\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpj2a1frqn.py\", line 35, in <module>\n    assert find_nth_digit(5,6,5) == 3\nAssertionError", "passed": false}
{"task_id": 38, "requirement": "Input-Output Conditions", "completion": "def div_even_odd(numbers):\n    \"\"\"\n    Divides the first even number by the first odd number in the given list.\n    \n    :param numbers: List of integers.\n    :return: A float or integer representing the division of the first even number by the first odd number.\n             Returns None if there's no even or odd number in the list.\n    \"\"\"\n    first_even = None\n    first_odd = None\n    \n    for num in numbers:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        elif first_odd is None and num % 2 != 0:\n            first_odd = num\n        \n        # Once both first even and first odd are found, break the loop\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Check if both first even and first odd were found\n    if first_even is None or first_odd is None:\n        return None\n    \n    # Perform the division\n    try:\n        result = first_even / first_odd\n    except ZeroDivisionError:\n        # Handle the case where the first odd number is zero\n        return None\n    \n    # Ensure the result is returned as a float if needed\n    return float(result)\n\n# Example usage:\nprint(div_even_odd([5, 3, 2, 8]))  # Output should be 2.0 (2/1)\nprint(div_even_odd([2, 4, 6]))     # Output should be None (no odd number)\nprint(div_even_odd([1, 3, 5]))     # Output should be None (no even number)\nprint(div_even_odd([2, 10, 3, 7, 4]))  # Output should be 2.0 (2/1)\n", "result": "passed", "passed": true}
{"task_id": 39, "requirement": "Input-Output Conditions", "completion": "import heapq\nfrom collections import Counter\n\ndef rearrange_string(s):\n    # Step 1: Count the frequency of each character\n    char_count = Counter(s)\n    \n    # Step 2: Create a max heap based on character frequencies\n    max_heap = [(-count, char) for char, count in char_count.items()]\n    heapq.heapify(max_heap)\n    \n    # List to store the result characters\n    result = []\n    \n    # Used to store the last character added to the result and its remaining count\n    prev_char = None\n    prev_count = 0\n    \n    while max_heap:\n        # Get the most frequent character (with highest negative count)\n        count, char = heapq.heappop(max_heap)\n        \n        # If the last character has remaining count, push it back to the heap\n        if prev_count < 0:\n            heapq.heappush(max_heap, (prev_count, prev_char))\n        \n        # Add the current character to the result\n        result.append(char)\n        \n        # Update the previous character and its count\n        prev_char = char\n        prev_count = count + 1\n    \n    # Convert the result list into a string\n    result_str = ''.join(result)\n    \n    # Check if the result string meets the condition that no two adjacent characters are the same\n    if any(result_str[i] == result_str[i+1] for i in range(len(result_str)-1)):\n        return \"\"\n    \n    return result_str\n\n# Example usage:\nprint(rearrange_string(\"aab\"))  # Output: \"aba\" or \"bca\", etc.\nprint(rearrange_string(\"aaab\")) # Output: \"\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmput12qsvb.py\", line 34, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 42, "requirement": "Input-Output Conditions", "completion": "def find_sum(arr):\n    \"\"\"\n    Finds the sum of all repeated elements in a given list.\n    \n    Parameters:\n    arr (list): A list of integers.\n    \n    Returns:\n    int: The sum of all repeated elements in the list. Returns 0 if there are no repeated elements.\n    \"\"\"\n    # Dictionary to store the count of each element\n    element_count = {}\n    \n    # Iterate through the list to populate the dictionary with counts\n    for element in arr:\n        if element in element_count:\n            element_count[element] += 1\n        else:\n            element_count[element] = 1\n    \n    # Calculate the sum of elements that appear more than once\n    repeated_sum = sum(element * (count - 1) for element, count in element_count.items() if count > 1)\n    \n    return repeated_sum\n\n# Example usage:\nexample_list = [1, 2, 3, 2, 3, 4, 5, 3]\nprint(find_sum(example_list))  # Output will be 8 because 2 appears twice (2*1=2) and 3 appears three times (3*2=6), total is 2+6=8\n\nno_repeated_elements = [1, 2, 3, 4, 5]\nprint(find_sum(no_repeated_elements))  # Should output 0 as there are no repeated elements\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpcdqy2xww.py\", line 18, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Input-Output Conditions", "completion": "import re\n\ndef text_match(text):\n    # Define the regex pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    \n    # Find all occurrences of the pattern in the provided text\n    matches = re.findall(pattern, text)\n    \n    # Check if there are any matches, and return 'Not matched!' if not\n    if not matches:\n        return 'Not matched!'\n    \n    return matches\n\n# Example usage:\nsample_text = \"this_is_a_sample_text with_multiple_matches_like_this_one_and_another_example\"\nprint(text_match(sample_text))  # ['this_is_a', 'matches_like_this', 'another_example']\n\nno_match_text = \"Just some random text without_underscores\"\nprint(text_match(no_match_text))  # Not matched!\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdqu4lim7.py\", line 16, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 46, "requirement": "Input-Output Conditions", "completion": "def test_distinct(numbers):\n    \"\"\"\n    Determine if all numbers in the list are distinct.\n\n    Args:\n    - numbers: A list of integers.\n\n    Returns:\n    - True if all numbers are distinct, False otherwise.\n    \"\"\"\n    # Convert the list to a set to remove duplicates and compare lengths\n    return len(numbers) == len(set(numbers))\n\n# Example usage:\nprint(test_distinct([1, 2, 3, 4]))  # Should print True\nprint(test_distinct([1, 2, 2, 3]))  # Should print False\nprint(test_distinct([5, 9, 8, 7, 6]))  # Should print True\nprint(test_distinct([10, 10, 11, 12]))  # Should print False\n", "result": "passed", "passed": true}
{"task_id": 48, "requirement": "Input-Output Conditions", "completion": "def odd_bit_set_number(n):\n    \"\"\"\n    Set all odd bits of the given integer n to 1.\n    \n    Args:\n    - n (int): The input integer whose odd bits are to be set.\n    \n    Returns:\n    - int: The modified integer with all odd bits set to 1.\n    \"\"\"\n    # Calculate the mask to set all odd bits to 1\n    mask = 0\n    bit_position = 1\n    while bit_position <= n.bit_length():\n        mask |= (1 << (bit_position - 1))\n        bit_position += 2\n    \n    # Set the odd bits of n using the mask\n    result = n | mask\n    \n    return result\n\n# Example usage:\nprint(bin(odd_bit_set_number(10)))  # Example input: 10 (binary: 1010)\n", "result": "passed", "passed": true}
{"task_id": 49, "requirement": "Input-Output Conditions", "completion": "def specified_element(two_dim_list, index):\n    \"\"\"\n    Extracts the element at the specified index from each sub-list of a two-dimensional list.\n    \n    :param two_dim_list: A two-dimensional list (list of lists)\n    :param index: The index of the element to extract from each sub-list\n    :return: A list containing the extracted elements\n    \"\"\"\n    # Initialize an empty list to store the extracted elements\n    extracted_elements = []\n    \n    # Check if the input is an empty list\n    if not two_dim_list:\n        return extracted_elements\n    \n    # Iterate through each sub-list in the two-dimensional list\n    for sublist in two_dim_list:\n        # Check if the index is within the bounds of the current sub-list\n        if 0 <= index < len(sublist):\n            # Append the element at the specified index to the extracted_elements list\n            extracted_elements.append(sublist[index])\n    \n    return extracted_elements\n\n# Example usage:\ntwo_dim_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nindex = 1  # We want to extract the second element (index 1) from each sublist\nprint(specified_element(two_dim_list, index))  # Output: [2, 5, 8]\n\nempty_list = []\nprint(specified_element(empty_list, 0))  # Output: []\n", "result": "passed", "passed": true}
{"task_id": 50, "requirement": "Input-Output Conditions", "completion": "def min_length_list(lists):\n    # Find the list with the minimum length using a lambda function as the key\n    shortest_list = min(lists, key=lambda x: len(x))\n    # Return a tuple containing the length of the shortest list and the list itself\n    return (len(shortest_list), shortest_list)\n\n# Example usage:\nlists = [[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]\nprint(min_length_list(lists))  # Output: (1, [6])\n", "result": "passed", "passed": true}
{"task_id": 52, "requirement": "Input-Output Conditions", "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n    \n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram, measured perpendicularly from the base.\n    \n    Returns:\n    float: The area of the parallelogram.\n    \n    Raises:\n    ValueError: If either base or height is not a positive number.\n    \"\"\"\n    # Check if inputs are positive numbers\n    if base <= 0 or height <= 0:\n        raise ValueError(\"Base and height must be positive numbers.\")\n    \n    # Calculate the area\n    return base * height\n\n# Example usage:\ntry:\n    base = 5.0\n    height = 3.0\n    area = parallelogram_area(base, height)\n    print(f\"The area of the parallelogram with base {base} and height {height} is {area}\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_e743oav.py\", line 19, in <module>\n    assert parallelogram_area(0, 10) == 0\n  File \"/tmp/tmp_e743oav.py\", line 4, in parallelogram_area\n    raise ValueError(\"Base and height must be positive numbers.\")\nValueError: Base and height must be positive numbers.", "passed": false}
{"task_id": 53, "requirement": "Input-Output Conditions", "completion": "def check_equality(s):\n    \"\"\"\n    Check if the first and last characters of the string s are equal.\n\n    :param s: Input string\n    :return: 'Equal' if the first and last characters are the same, 'Not Equal' otherwise\n    \"\"\"\n    # Check if the string is empty or has only one character\n    if len(s) <= 1:\n        return 'Equal'\n    \n    # Compare the first and last character\n    if s[0] == s[-1]:\n        return 'Equal'\n    else:\n        return 'Not Equal'\n\n# Example usage:\nprint(check_equality(\"radar\"))  # Should print 'Equal'\nprint(check_equality(\"hello\"))  # Should print 'Not Equal'\nprint(check_equality(\"a\"))      # Should print 'Equal'\nprint(check_equality(\"\"))       # Should print 'Equal' because the string is empty\n", "result": "passed", "passed": true}
{"task_id": 54, "requirement": "Input-Output Conditions", "completion": "def counting_sort(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise ValueError(\"Input must be a list.\")\n    \n    # Check if the list is empty\n    if not arr:\n        return []\n    \n    # Validate that all elements are non-negative integers\n    for num in arr:\n        if not isinstance(num, int) or num < 0:\n            raise ValueError(\"All elements in the list must be non-negative integers.\")\n    \n    # Find the maximum value in the array\n    max_val = max(arr)\n    \n    # Initialize count array with zeros\n    count_arr = [0] * (max_val + 1)\n    \n    # Store the count of each element in count_arr\n    for num in arr:\n        count_arr[num] += 1\n    \n    # Modify count_arr such that each element at each index\n    # stores the sum of previous counts\n    for i in range(1, len(count_arr)):\n        count_arr[i] += count_arr[i - 1]\n    \n    # Output array that will have sorted arr\n    output_arr = [0] * len(arr)\n    \n    # Build the output array\n    for num in reversed(arr):\n        output_arr[count_arr[num] - 1] = num\n        count_arr[num] -= 1\n    \n    return output_arr\n\n# Example usage:\narr = [4, 2, 2, 8, 3, 3, 1]\nsorted_arr = counting_sort(arr)\nprint(\"Sorted array:\", sorted_arr)\n", "result": "passed", "passed": true}
{"task_id": 57, "requirement": "Input-Output Conditions", "completion": "def find_max_num(digits, length=None):\n    # If length is not specified, use the entire list\n    if length is None:\n        length = len(digits)\n    \n    # Ensure length does not exceed the number of available digits\n    if length > len(digits):\n        raise ValueError(\"Length exceeds the number of available digits.\")\n    \n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n    \n    # Take the first 'length' digits to form the largest number\n    max_num_str = ''.join(map(str, digits[:length]))\n    \n    # Convert the result back to an integer\n    max_num = int(max_num_str)\n    \n    return max_num\n\n# Example usage:\ndigits = [5, 3, 7, 9, 0]\nprint(find_max_num(digits))  # Output will be 97530 (using all digits)\nprint(find_max_num(digits, 3))  # Output will be 975 (using three digits)\n", "result": "passed", "passed": true}
{"task_id": 58, "requirement": "Input-Output Conditions", "completion": "def opposite_signs(a, b):\n    \"\"\"\n    Check if two integers have opposite signs.\n\n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n\n    Returns:\n    bool: True if the integers have opposite signs, False otherwise.\n\n    Raises:\n    TypeError: If either input is not an integer.\n    \"\"\"\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise TypeError(\"Both inputs must be integers.\")\n    \n    return (a > 0) != (b > 0)\n\n# Example usage:\ntry:\n    print(opposite_signs(1, -2))  # Should print True\n    print(opposite_signs(-1, -2)) # Should print False\n    print(opposite_signs(1, 2))   # Should print False\n    print(opposite_signs(-1, 2))  # Should print True\n    print(opposite_signs('1', 2)) # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 60, "requirement": "Input-Output Conditions", "completion": "def max_len_sub(arr, diff=1):\n    if not arr:\n        return 0\n    \n    n = len(arr)\n    dp = [1] * n  # dp[i] stores the length of the longest valid subsequence ending at index i\n    \n    # Fill dp array\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == diff:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)\n\n# Example usage:\narr = [1, 2, 3, 4, 5, 3, 2, 1]\nprint(max_len_sub(arr))  # Expected output: 3 (subsequence could be [1, 2, 1] or similar)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp62ngt0dx.py\", line 15, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nAssertionError", "passed": false}

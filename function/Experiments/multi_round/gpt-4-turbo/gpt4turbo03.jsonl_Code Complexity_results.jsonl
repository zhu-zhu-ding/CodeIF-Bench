{"task_id": 11, "requirement": "Code Complexity", "completion": "def remove_occ(s, char):\n    # Find the index of the first and last occurrence of the character\n    first_occurrence = s.find(char)\n    last_occurrence = s.rfind(char)\n    \n    # Remove the first and last occurrence if they exist\n    if first_occurrence != -1:\n        s = s[:first_occurrence] + s[first_occurrence + 1:]\n        # Update last_occurrence index after removing the first occurrence\n        last_occurrence = last_occurrence - 1 if last_occurrence > first_occurrence else last_occurrence\n    \n    if last_occurrence != -1:\n        s = s[:last_occurrence] + s[last_occurrence + 1:]\n    \n    return s\n\n# Example usage:\nresult = remove_occ(\"hello world\", \"l\")\nprint(result)  # Output: \"heo world\"\n", "result": "passed", "passed": true}
{"task_id": 14, "requirement": "Code Complexity", "completion": "def find_volume(base_area, height):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base_area (float): The area of the triangular base of the prism.\n    height (float): The height of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    # Volume of a triangular prism is given by the formula: V = base_area * height\n    volume = base_area * height\n    return volume\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpm1sdm79f.py\", line 5, in <module>\n    assert find_volume(10,8,6) == 240\nTypeError: find_volume() takes 2 positional arguments but 3 were given", "passed": false}
{"task_id": 15, "requirement": "Code Complexity", "completion": "import re\n\ndef split_lowerstring(input_string):\n    # Use regular expression to split the string at lowercase letters and include them in the result\n    return re.split(r'(?=[a-z])', input_string)\n\n# Example usage\ninput_string = \"HelloWorld\"\nprint(split_lowerstring(input_string))  # Output: ['H', 'e', 'llo', 'W', 'o', 'rld']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp92p94hev.py\", line 8, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "requirement": "Code Complexity", "completion": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'\\b[a-z]+(?:_[a-z]+)+\\b'\n    matches = re.findall(pattern, text)\n    return matches\n\n# Example usage:\ntext = \"This is an example_text with multiple_words and some single_words.\"\nresult = text_lowercase_underscore(text)\nprint(result)  # Output: ['example_text', 'multiple_words', 'single_words']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp69bfbz9w.py\", line 10, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "requirement": "Code Complexity", "completion": "def square_perimeter(side_length):\n    return 4 * side_length\n", "result": "passed", "passed": true}
{"task_id": 20, "requirement": "Code Complexity", "completion": "def is_woodall(num):\n    # Precomputed Woodall numbers up to a certain n (e.g., n=10)\n    woodall_numbers = [1, 7, 23, 63, 159, 383, 895, 2047, 4607, 10239, 22527]\n    return num in woodall_numbers\n\n# Example usage:\nprint(is_woodall(7))   # True\nprint(is_woodall(15))  # False\nprint(is_woodall(31))  # True\nprint(is_woodall(63))  # True\nprint(is_woodall(100)) # False\n", "result": "passed", "passed": true}
{"task_id": 21, "requirement": "Code Complexity", "completion": "def multiples_of_num(n, m):\n    return [n * i for i in range(1, m + 1)]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5z3l7cpc.py\", line 3, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 24, "requirement": "Code Complexity", "completion": "def binary_to_decimal(binary):\n    return int(binary, 2)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7xpkf6hy.py\", line 3, in <module>\n    assert binary_to_decimal(100) == 4\n  File \"/tmp/tmp7xpkf6hy.py\", line 2, in binary_to_decimal\n    return int(binary, 2)\nTypeError: int() can't convert non-string with explicit base", "passed": false}
{"task_id": 32, "requirement": "Code Complexity", "completion": "def remove_smallest_prime_factor(n, prime):\n    while n % prime == 0:\n        n //= prime\n    return n\n\ndef max_prime_factors(n):\n    # Remove factors of 2\n    n = remove_smallest_prime_factor(n, 2)\n    max_prime = 2 if n == 1 else -1\n    \n    # Check for odd factors from 3 to sqrt(n)\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            n = remove_smallest_prime_factor(n, i)\n            max_prime = i\n    \n    # If remaining n is a prime number greater than 2\n    if n > 2:\n        max_prime = n\n    \n    return max_prime\n\n# Example usage\nnumber = 315\nprint(f\"The largest prime factor of {number} is {max_prime_factors(number)}\")\n", "result": "passed", "passed": true}
{"task_id": 33, "requirement": "Code Complexity", "completion": "def decimal_to_binary(decimal):\n    return bin(decimal)[2:]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0qdigpsy.py\", line 3, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 35, "requirement": "Code Complexity", "completion": "def find_rect_num(n):\n    return n * (n + 1)\n\n# Example usage:\nn = 5\nresult = find_rect_num(n)\nprint(f\"The {n}-th rectangular number is: {result}\")\n", "result": "passed", "passed": true}
{"task_id": 36, "requirement": "Code Complexity", "completion": "def find_nth_digit(numerator, denominator, n):\n    if denominator == 0:\n        raise ValueError(\"Denominator cannot be zero\")\n    \n    remainder = numerator % denominator\n    for _ in range(n):\n        remainder = (remainder * 10) % denominator\n    return (remainder * 10) // denominator\n\n# Example usage:\nnumerator = 1\ndenominator = 7\nn = 5\nprint(f\"The {n}th digit in the decimal representation of {numerator}/{denominator} is {find_nth_digit(numerator, denominator, n)}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplrlakwmq.py\", line 13, in <module>\n    assert find_nth_digit(1,2,1) == 5\nAssertionError", "passed": false}
{"task_id": 38, "requirement": "Code Complexity", "completion": "def div_even_odd(numbers):\n    even = None\n    odd = None\n    \n    # Loop through the list to find the first even and odd numbers\n    for num in numbers:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 != 0 and odd is None:\n            odd = num\n        \n        # If both even and odd numbers are found, no need to continue\n        if even is not None and odd is not None:\n            break\n    \n    # Perform the division if both even and odd numbers were found\n    if even is not None and odd is not None:\n        return even / odd\n    else:\n        return \"List must contain at least one even and one odd number.\"\n\n# Example usage:\nnumbers = [1, 3, 5, 8, 10]\nresult = div_even_odd(numbers)\nprint(result)  # Output: 8.0\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplt336cbm.py\", line 27, in <module>\n    assert cc_visit(inspect.getsource(div_even_odd))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 40, "requirement": "Code Complexity", "completion": "from collections import Counter\nfrom itertools import chain\n\ndef freq_element(list_of_lists):\n    # Flatten the list of lists and count the frequency of each element in one line\n    return Counter(chain.from_iterable(list_of_lists))\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\nresult = freq_element(list_of_lists)\nprint(result)  # Output: Counter({3: 3, 2: 2, 4: 2, 1: 1, 5: 1})\n", "result": "passed", "passed": true}
{"task_id": 42, "requirement": "Code Complexity", "completion": "from collections import Counter\n\ndef find_sum(arr):\n    # Count the frequency of each element using Counter\n    frequency = Counter(arr)\n    \n    # Calculate the sum of elements that appear more than once\n    sum_repeated = sum(num * count for num, count in frequency.items() if count > 1)\n    \n    return sum_repeated\n\n# Example usage:\narr = [1, 2, 3, 2, 3, 4, 5, 3]\nresult = find_sum(arr)\nprint(\"Sum of repeated elements:\", result)  # Output: 13 (2*2 + 3*3)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp99fcmrop.py\", line 12, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Code Complexity", "completion": "import re\n\ndef text_match(text):\n    pattern = r'\\b[a-z]+(?:_[a-z]+)+\\b'\n    matches = re.findall(pattern, text)\n    return matches\n\n# Example usage:\ntext = \"Here are some examples: first_example, second_example, another_one\"\nresult = text_match(text)\nprint(result)  # Output: ['first_example', 'second_example', 'another_one']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvgv1xljz.py\", line 10, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 45, "requirement": "Code Complexity", "completion": "from functools import reduce\nimport math\n\ndef get_gcd(arr):\n    return reduce(math.gcd, arr)\n\n# Example usage:\narr = [24, 36, 48]\nresult = get_gcd(arr)\nprint(f\"The GCD of the array elements {arr} is {result}\")\n", "result": "passed", "passed": true}
{"task_id": 47, "requirement": "Code Complexity", "completion": "def compute_last_digit(a, b):\n    result = 1\n    for i in range(a + 1, b + 1):\n        result = (result * i) % 10  # Compute the last digit on-the-fly to prevent overflow\n    \n    return result\n\n# Example usage:\nprint(compute_last_digit(3, 5))  # Output: 0 (since 5! // 3! = 20 and last digit of 20 is 0)\nprint(compute_last_digit(4, 10)) # Output: 0 (since 10! // 4! = 151200 and last digit of 151200 is 0)\n", "result": "passed", "passed": true}
{"task_id": 51, "requirement": "Code Complexity", "completion": "def check_equilateral(side1, side2, side3):\n    print(\"The triangle is equilateral.\" if side1 == side2 == side3 else \"The triangle is not equilateral.\")\n\n# Example usage:\ncheck_equilateral(5, 5, 5)  # Output: The triangle is equilateral.\ncheck_equilateral(3, 4, 5)  # Output: The triangle is not equilateral.\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdy1pw55v.py\", line 6, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "requirement": "Code Complexity", "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram.\n    \"\"\"\n    area = base * height\n    return area\n", "result": "passed", "passed": true}
{"task_id": 53, "requirement": "Code Complexity", "completion": "def check_equality(s):\n    return len(s) > 0 and s[0] == s[-1]\n\n# Example usage:\nresult = check_equality(\"hello\")\nprint(result)  # Output: False\n\nresult = check_equality(\"radar\")\nprint(result)  # Output: True\n\nresult = check_equality(\"\")\nprint(result)  # Output: False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpud5g5tes.py\", line 10, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 56, "requirement": "Code Complexity", "completion": "def check(number):\n    return number == 2 * int(str(number)[::-1]) - 1\n\n# Example usage:\nnumber = 17\nresult = check(number)\nprint(f\"Is {number} one less than twice its reverse? {result}\")\n", "result": "passed", "passed": true}
{"task_id": 58, "requirement": "Code Complexity", "completion": "def opposite_signs(x, y):\n    return (x ^ y) < 0\n\n# Example usage:\nnum1 = -5\nnum2 = 10\nprint(opposite_signs(num1, num2))  # Output: True\n\nnum1 = 15\nnum2 = 20\nprint(opposite_signs(num1, num2))  # Output: False\n", "result": "passed", "passed": true}

{"task_id": 11, "requirement": "Exception Handling", "completion": "def remove_occ(s, char):\n    # Check if the second parameter is a single character\n    if len(char) != 1:\n        raise ValueError('Second parameter must be a single character.')\n    \n    # Find the index of the first occurrence of the character\n    first_occurrence = s.find(char)\n    if first_occurrence == -1:\n        # If the character is not found, return the original string\n        return s\n    \n    # Remove the first occurrence of the character\n    s = s[:first_occurrence] + s[first_occurrence + 1:]\n    \n    # Find the index of the last occurrence of the character\n    last_occurrence = s.rfind(char)\n    if last_occurrence == -1:\n        # If the character is not found after removing the first occurrence, return the modified string\n        return s\n    \n    # Remove the last occurrence of the character\n    s = s[:last_occurrence] + s[last_occurrence + 1:]\n    \n    return s\n\n# Example usage:\ntry:\n    result = remove_occ(\"hello world\", \"l\")\n    print(result)  # Output: \"heo world\"\n    result = remove_occ(\"hello world\", \"ll\")\nexcept ValueError as e:\n    print(e)  # Output: \"Second parameter must be a single character.\"\n", "result": "passed", "passed": true}
{"task_id": 12, "requirement": "Exception Handling", "completion": "def sort_matrix(matrix):\n    # Check if the input is a list of lists\n    if not all(isinstance(row, list) for row in matrix):\n        raise TypeError(\"Input should be a list of lists.\")\n    \n    # Check if all elements in the matrix are integers\n    for row in matrix:\n        if not all(isinstance(element, int) for element in row):\n            raise TypeError(\"All elements in the matrix must be integers.\")\n    \n    # Calculate the sum of each row and store it along with the row index in a list of tuples\n    row_sums_with_index = [(sum(row), index) for index, row in enumerate(matrix)]\n    \n    # Sort the list of tuples by the sum (first element of the tuple)\n    row_sums_with_index.sort()\n    \n    # Create a new matrix sorted by the row sums\n    sorted_matrix = [matrix[index] for _, index in row_sums_with_index]\n    \n    return sorted_matrix\n\n# Example usage:\ntry:\n    matrix = [\n        [3, 2, 1],\n        [1, 2, 3],\n        [6, 5, 4]\n    ]\n    sorted_matrix = sort_matrix(matrix)\n    for row in sorted_matrix:\n        print(row)\nexcept TypeError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 13, "requirement": "Exception Handling", "completion": "def count_common(words):\n    # Check if the input is a list of strings\n    if not isinstance(words, list) or not all(isinstance(word, str) for word in words):\n        raise TypeError(\"Input must be a list of strings\")\n    \n    # Create a dictionary to count occurrences of each word\n    word_dict = {}\n    for word in words:\n        if word in word_dict:\n            word_dict[word] += 1\n        else:\n            word_dict[word] = 1\n    \n    # Find the maximum count in the dictionary\n    max_count = max(word_dict.values())\n    \n    # Create a list to store the most common words\n    common_words = []\n    \n    # Iterate through the dictionary to find words with the maximum count\n    for word, count in word_dict.items():\n        if count == max_count:\n            common_words.append((word, count))\n    \n    return common_words\n\n# Example usage:\nwords_list = ['hello', 'world', 'python', 'world', 'python', 'hello']\nmost_common_words = count_common(words_list)\nprint(most_common_words)  # Output: [('world', 2), ('python', 2)]\n\n# Example of TypeError:\ntry:\n    invalid_input = \"not a list of strings\"\n    count_common(invalid_input)\nexcept TypeError as e:\n    print(e)  # Output: Input must be a list of strings\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppsq0oqyj.py\", line 31, in <module>\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nAssertionError", "passed": false}
{"task_id": 14, "requirement": "Exception Handling", "completion": "def find_volume(base_area, height):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base_area (float): The area of the triangular base of the prism.\n    height (float): The height of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n\n    Raises:\n    ValueError: If any of the inputs are non-positive or non-numeric.\n    \"\"\"\n    # Check if inputs are numeric and positive\n    if not (isinstance(base_area, (int, float)) and base_area > 0):\n        raise ValueError(\"All dimensions must be positive numbers.\")\n    if not (isinstance(height, (int, float)) and height > 0):\n        raise ValueError(\"All dimensions must be positive numbers.\")\n    \n    # Calculate the volume\n    volume = base_area * height\n    return volume\n\n# Example usage:\ntry:\n    base_area = 10.5  # Example base area\n    height = 20.0     # Example height\n    volume = find_volume(base_area, height)\n    print(\"The volume of the triangular prism is:\", volume)\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9jxd1f7w.py\", line 18, in <module>\n    assert find_volume(10,8,6) == 240\nTypeError: find_volume() takes 2 positional arguments but 3 were given", "passed": false}
{"task_id": 15, "requirement": "Exception Handling", "completion": "import re\n\ndef split_lowerstring(input_string):\n    # Check if the input is a string\n    if not isinstance(input_string, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Use regular expression to split the string at lowercase letters\n    result = re.split(r'([a-z])', input_string)\n    \n    # Filter out empty strings from the result\n    result = [s for s in result if s]\n    \n    return result\n\n# Example usage\ninput_string = \"HelloWorld\"\nprint(split_lowerstring(input_string))  # Output: ['H', 'e', 'llo', 'W', 'o', 'rld']\n\n# Example of TypeError\ntry:\n    print(split_lowerstring(123))  # This will raise a TypeError\nexcept TypeError as e:\n    print(e)  # Output: Input must be a string\n", "result": "failed: File \"/tmp/tmpm4o1rfzj.py\", line 22\n    try: split_lowerstring(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 16, "requirement": "Exception Handling", "completion": "import re\n\ndef text_lowercase_underscore(text):\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    pattern = r'\\b[a-z]+(?:_[a-z]+)+\\b'\n    matches = re.findall(pattern, text)\n    return matches\n\n# Example usage:\ntry:\n    text = \"This is an example_text with multiple_words and some single_words.\"\n    result = text_lowercase_underscore(text)\n    print(result)  # Output: ['example_text', 'multiple_words', 'single_words']\n    \n    non_string_input = 12345\n    result = text_lowercase_underscore(non_string_input)\nexcept TypeError as e:\n    print(e)  # Output: Input must be a string\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6z506ndr.py\", line 17, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "requirement": "Exception Handling", "completion": "def square_perimeter(side_length):\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative\")\n    return 4 * side_length", "result": "passed", "passed": true}
{"task_id": 18, "requirement": "Exception Handling", "completion": "def remove_dirty_chars(s1, s2):\n    # Check if both inputs are strings\n    if not isinstance(s1, str) or not isinstance(s2, str):\n        raise TypeError(\"Both inputs must be strings\")\n    \n    # Create a set of characters from the second string\n    dirty_chars = set(s2)\n    \n    # Use a list comprehension to filter out characters from the first string that are in the dirty_chars set\n    filtered_chars = [char for char in s1 if char not in dirty_chars]\n    \n    # Join the filtered characters to form the cleaned string\n    cleaned_string = ''.join(filtered_chars)\n    \n    return cleaned_string\n\n# Example usage:\ntry:\n    s1 = \"hello world\"\n    s2 = \"aeiou\"\n    result = remove_dirty_chars(s1, s2)\n    print(result)  # Output: \"hll wrld\"\nexcept TypeError as e:\n    print(e)\n\n# Example of incorrect usage:\ntry:\n    s1 = 123\n    s2 = \"aeiou\"\n    result = remove_dirty_chars(s1, s2)\nexcept TypeError as e:\n    print(e)  # Output: Both inputs must be strings\n", "result": "passed", "passed": true}
{"task_id": 19, "requirement": "Exception Handling", "completion": "def test_duplicate(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise ValueError('Input must be a list of integers')\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise ValueError('Input must be a list of integers')\n    \n    # Create an empty set to store unique elements\n    seen = set()\n    \n    # Iterate through each element in the array\n    for num in arr:\n        # Check if the element is already in the set\n        if num in seen:\n            # If it is, return True indicating a duplicate is found\n            return True\n        # Add the element to the set\n        seen.add(num)\n    \n    # If no duplicates are found, return False\n    return False\n\n# Example usage:\ntry:\n    arr = [1, 2, 3, 4, 5, 1]\n    print(test_duplicate(arr))  # Output: True\n\n    arr = [1, 2, 3, 4, 5]\n    print(test_duplicate(arr))  # Output: False\n\n    arr = \"not a list\"\n    print(test_duplicate(arr))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    arr = [1, 2, 'three', 4]\n    print(test_duplicate(arr))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplwye4qcs.py\", line 39, in <module>\n    test_duplicate(None)\n  File \"/tmp/tmplwye4qcs.py\", line 4, in test_duplicate\n    raise ValueError('Input must be a list of integers')\nValueError: Input must be a list of integers", "passed": false}
{"task_id": 20, "requirement": "Exception Handling", "completion": "def is_woodall(num):\n    if not isinstance(num, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    n = 1\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number == num:\n            return True\n        elif woodall_number > num:\n            return False\n        n += 1\n\n# Example usage:\nprint(is_woodall(7))  # True, because 7 is 2*2^2 - 1\ntry:\n    print(is_woodall(15.5))  # This will raise a TypeError\nexcept TypeError as e:\n    print(e)\n\nprint(is_woodall(31)) # True, because 31 is 3*2^3 - 1\n", "result": "passed", "passed": true}
{"task_id": 21, "requirement": "Exception Handling", "completion": "def multiples_of_num(n, m):\n    # Check if either n or m is negative\n    if n < 0 or m < 0:\n        raise ValueError(\"Both n and m must be non-negative integers.\")\n    \n    # Create an empty list to store the multiples\n    multiples = []\n    \n    # Loop to find and append the first m multiples of n\n    for i in range(1, m+1):\n        multiples.append(n * i)\n    \n    return multiples\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_v4b60k7.py\", line 11, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "requirement": "Exception Handling", "completion": "def find_first_duplicate(arr):\n    if not isinstance(arr, list) or not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"Input must be a list of integers\")\n    \n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None  # Return None if no duplicate is found\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxe0biwya.py\", line 11, in <module>\n    assert find_first_duplicate([1, 2, 3, 4])==-1\nAssertionError", "passed": false}
{"task_id": 23, "requirement": "Exception Handling", "completion": "def maximum_sum(list_of_lists):\n    # Check if the input is a list\n    if not isinstance(list_of_lists, list):\n        raise TypeError(\"Input must be a list of lists\")\n    \n    # Initialize a variable to store the maximum sum\n    max_sum = float('-inf')\n    \n    # Iterate through each list in the list of lists\n    for lst in list_of_lists:\n        # Check if the current element is a list\n        if not isinstance(lst, list):\n            raise TypeError(\"Input must be a list of lists\")\n        \n        # Check if all elements in the sublist are integers\n        if not all(isinstance(x, int) for x in lst):\n            raise TypeError(\"All elements in sublists must be integers\")\n        \n        # Calculate the sum of the current list\n        current_sum = sum(lst)\n        \n        # Update max_sum if the current sum is greater than the previous max_sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [4, 5, 6], [10, 11, -2]]\nprint(maximum_sum(list_of_lists))  # Output: 19\n\n# Example of input validation:\ntry:\n    print(maximum_sum([[1, 2, 'a'], [4, 5, 6]]))  # Should raise TypeError\nexcept TypeError as e:\n    print(e)  # Output: All elements in sublists must be integers\n\ntry:\n    print(maximum_sum(\"not a list\"))  # Should raise TypeError\nexcept TypeError as e:\n    print(e)  # Output: Input must be a list of lists\n", "result": "failed: File \"/tmp/tmpta3k3kwh.py\", line 36\n    try: maximum_sum([[1, 2], [3, 'a']]); assert False, 'Expected TypeError' except TypeError: pass\n                                                                             ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 24, "requirement": "Exception Handling", "completion": "def binary_to_decimal(binary):\n    # Check if the input is a valid binary string\n    if not all(char in '01' for char in binary):\n        raise ValueError('Invalid binary number')\n    \n    # Initialize the decimal value to 0\n    decimal = 0\n    \n    # Reverse the binary string to process from least significant bit to most significant bit\n    binary = binary[::-1]\n    \n    # Iterate through each bit in the binary string\n    for i, bit in enumerate(binary):\n        # Convert the bit to an integer and multiply by 2 raised to the power of its position\n        decimal += int(bit) * (2 ** i)\n    \n    return decimal\n", "result": "failed: File \"/tmp/tmpoq4o_yv7.py\", line 17\n    try: binary_to_decimal('102'); assert False, 'Expected ValueError' except ValueError as e: assert str(e) == 'Invalid binary number'\n                                                                       ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 25, "requirement": "Exception Handling", "completion": "def find_product(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(num, int) for num in arr):\n        raise TypeError(\"All elements in the list must be integers\")\n    \n    # Create a dictionary to store the frequency of each element\n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    \n    # Calculate the product of non-repeated elements\n    product = 1\n    for num, count in frequency.items():\n        if count == 1:\n            product *= num\n    \n    return product\n\n# Example usage\ntry:\n    arr = [1, 2, 3, 2, 4, 5, 5]\n    result = find_product(arr)\n    print(result)  # Output: 12 (1 * 3 * 4)\n    \n    arr = [1, 2, 'a', 2, 4, 5, 5]\n    result = find_product(arr)  # This will raise a TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_a43o9wc.py\", line 30, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "requirement": "Exception Handling", "completion": "def check_k_elements(tuple_list, k):\n    # Check if the first argument is a list\n    if not isinstance(tuple_list, list):\n        raise TypeError(\"The first argument must be a list.\")\n    \n    # Check if the second argument is an integer\n    if not isinstance(k, int):\n        raise TypeError(\"The second argument must be an integer.\")\n    \n    # Check if all elements in the list are tuples\n    for element in tuple_list:\n        if not isinstance(element, tuple):\n            raise TypeError(\"All elements in the list must be tuples.\")\n    \n    # Iterate through each tuple in the list\n    for tup in tuple_list:\n        # Check if the length of the tuple is not equal to k\n        if len(tup) != k:\n            return False\n    # If all tuples have k elements, return True\n    return True\n\n# Example usage:\ntry:\n    sample_tuples = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n    k = 3\n    result = check_k_elements(sample_tuples, k)\n    print(\"All tuples have\", k, \"elements:\", result)  # Output: All tuples have 3 elements: True\n\n    sample_tuples2 = [(1, 2), (3, 4, 5), (6,)]\n    k2 = 2\n    result2 = check_k_elements(sample_tuples2, k2)\n    print(\"All tuples have\", k2, \"elements:\", result2)  # Output: All tuples have 2 elements: False\n\n    # Test with incorrect types\n    sample_tuples3 = \"[1, 2, 3]\"  # Not a list\n    k3 = 3\n    result3 = check_k_elements(sample_tuples3, k3)\nexcept TypeError as e:\n    print(e)  # Output: The first argument must be a list.\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8df7mna_.py\", line 35, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "requirement": "Exception Handling", "completion": "def remove(list_of_strings):\n    # Check if the input is a list\n    if not isinstance(list_of_strings, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Create an empty list to store the modified strings\n    modified_strings = []\n    \n    # Iterate through each string in the list\n    for string in list_of_strings:\n        # Check if the element is a string\n        if not isinstance(string, str):\n            raise TypeError(\"All elements in the list must be strings\")\n        \n        # Use a list comprehension to filter out digits from the string\n        filtered_string = ''.join([char for char in string if not char.isdigit()])\n        # Append the filtered string to the modified_strings list\n        modified_strings.append(filtered_string)\n    \n    # Return the list of modified strings\n    return modified_strings\n", "result": "passed", "passed": true}
{"task_id": 28, "requirement": "Exception Handling", "completion": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef binomial_coeff(n, k):\n    # Input validation\n    if n < 0 or k < 0:\n        raise ValueError(\"Inputs must be non-negative and k must not be greater than n\")\n    if k > n:\n        raise ValueError(\"Inputs must be non-negative and k must not be greater than n\")\n    \n    if k == 0 or k == n:\n        return 1\n    k = min(k, n - k)  # Take advantage of symmetry\n    c = 1\n    for i in range(k):\n        c = c * (n - i) // (i + 1)\n    return c\n\n# Example usage:\ntry:\n    n = 5\n    k = 2\n    print(f\"Binomial Coefficient C({n}, {k}) is {binomial_coeff(n, k)}\")\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 29, "requirement": "Exception Handling", "completion": "def get_odd_occurrence(arr):\n    # Check if input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements in the list must be integers\")\n    \n    # Initialize result\n    result = 0\n    \n    # Traverse the array\n    for element in arr:\n        # XOR each element in the array\n        result = result ^ element\n    \n    return result\n\n# Example usage\ntry:\n    arr = [1, 2, 3, 2, 3, 1, 3]\n    print(get_odd_occurrence(arr))  # Output: 3\nexcept TypeError as e:\n    print(e)\n\n# Example with incorrect input type\ntry:\n    arr = [1, 2, '3', 2, 3, 1, 3]\n    print(get_odd_occurrence(arr))\nexcept TypeError as e:\n    print(e)  # Output: All elements in the list must be integers\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpigv_1gib.py\", line 27, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "requirement": "Exception Handling", "completion": "def count_substring_with_equal_ends(s):\n    \"\"\"\n    Count all substrings of the input string that start and end with the same character.\n    Raises TypeError if the input is not a string.\n\n    :param s: str - The input string\n    :return: int - The count of substrings with equal start and end characters\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    \n    count = 0\n    n = len(s)\n    \n    # Iterate over each character in the string\n    for i in range(n):\n        # Check substrings starting from the current character\n        for j in range(i, n):\n            # If the start and end characters of the substring are the same, increment the count\n            if s[i] == s[j]:\n                count += 1\n    \n    return count\n\n# Example usage:\ntry:\n    input_string = \"abcab\"\n    result = count_substring_with_equal_ends(input_string)\n    print(f\"Number of substrings starting and ending with the same character: {result}\")\n    \n    # Test with non-string input\n    non_string_input = 12345\n    result = count_substring_with_equal_ends(non_string_input)\nexcept TypeError as e:\n    print(e)\n", "result": "failed: File \"/tmp/tmpeb0rmpw0.py\", line 27\n    try: count_substring_with_equal_ends(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                                  ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 31, "requirement": "Exception Handling", "completion": "import heapq\nfrom collections import defaultdict\n\ndef func(lists, k):\n    # Create a dictionary to count the frequency of each integer\n    frequency = defaultdict(int)\n    \n    # Count the frequency of each integer in all lists\n    for lst in lists:\n        for num in lst:\n            frequency[num] += 1\n    \n    # Check if k is greater than the number of distinct integers\n    if k > len(frequency):\n        raise ValueError(\"k cannot be greater than the number of distinct integers\")\n    \n    # Use a heap to find the top k integers with the highest frequency\n    # We use a min-heap, so we store negative frequencies to simulate a max-heap\n    heap = []\n    for num, freq in frequency.items():\n        heapq.heappush(heap, (-freq, num))\n        if len(heap) > k:\n            heapq.heappop(heap)\n    \n    # Extract the top k integers from the heap\n    top_k = []\n    while heap:\n        freq, num = heapq.heappop(heap)\n        top_k.append(num)\n    \n    # Since we want the result in descending order of frequency, reverse the list\n    return top_k[::-1]\n\n# Example usage:\nlists = [[1, 3, 5], [1, 2, 4], [1, 2, 3]]\nk = 2\nprint(func(lists, k))  # Output: [1, 2]\n\n# Example that raises an error:\ntry:\n    print(func(lists, 10))\nexcept ValueError as e:\n    print(e)  # Output: k cannot be greater than the number of distinct integers\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpx2749_qe.py\", line 36, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "requirement": "Exception Handling", "completion": "def max_prime_factors(n):\n    # Validate the input\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    # Initialize the maximum prime factor variable\n    max_prime = -1\n    \n    # Check for number of 2s that divide n\n    while n % 2 == 0:\n        max_prime = 2\n        n >>= 1  # equivalent to n //= 2\n    \n    # n must be odd at this point, thus skip even numbers and iterate only for odd integers\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n // i\n    \n    # This condition is to check if n is a prime number greater than 2\n    if n > 2:\n        max_prime = n\n    \n    return int(max_prime)\n\n# Example usage\ntry:\n    number = 315\n    print(f\"The largest prime factor of {number} is {max_prime_factors(number)}\")\nexcept ValueError as e:\n    print(e)\n\n# Example of handling incorrect input\ntry:\n    invalid_input = -10\n    print(f\"The largest prime factor of {invalid_input} is {max_prime_factors(invalid_input)}\")\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 33, "requirement": "Exception Handling", "completion": "def decimal_to_binary(decimal):\n    if not isinstance(decimal, int) or decimal < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    if decimal == 0:\n        return \"0\"\n    \n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    \n    return binary\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmprrxtu_65.py\", line 11, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "requirement": "Exception Handling", "completion": "def find_missing(arr):\n    # Check if the input list is sorted\n    if any(arr[i] > arr[i + 1] for i in range(len(arr) - 1)):\n        raise ValueError(\"Input list must be sorted.\")\n    \n    # Initialize left and right pointers\n    left, right = 0, len(arr) - 1\n    \n    # Binary search for the missing number\n    while left <= right:\n        mid = (left + right) // 2\n        \n        # Check if the missing number is in the left half\n        if arr[mid] != mid + arr[0]:\n            if mid == 0 or arr[mid - 1] == mid - 1 + arr[0]:\n                return mid + arr[0]\n            right = mid - 1\n        else:\n            left = mid + 1\n    \n    # If no missing number found, return -1\n    return -1\n\n# Example usage:\ntry:\n    arr = [1, 3, 4, 5, 6, 7, 8]\n    missing_number = find_missing(arr)\n    print(\"The missing number is:\", missing_number)\nexcept ValueError as e:\n    print(e)\n\ntry:\n    arr = [1, 3, 2, 4, 5, 6, 7, 8]  # Unsorted list\n    missing_number = find_missing(arr)\n    print(\"The missing number is:\", missing_number)\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpnbfvfyaz.py\", line 32, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "requirement": "Exception Handling", "completion": "def find_rect_num(n):\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    return n * (n + 1)\n\n# Example usage:\ntry:\n    n = 5\n    result = find_rect_num(n)\n    print(f\"The {n}-th rectangular number is: {result}\")\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 36, "requirement": "Exception Handling", "completion": "def find_nth_digit(numerator, denominator, n):\n    # Check if the denominator is zero\n    if denominator == 0:\n        raise ValueError(\"Denominator cannot be zero\")\n    \n    # Initialize the remainder\n    remainder = numerator % denominator\n    \n    # Loop to find the nth digit\n    for i in range(n):\n        # Multiply the remainder by 10\n        remainder *= 10\n        # Get the digit\n        digit = remainder // denominator\n        # Update the remainder\n        remainder = remainder % denominator\n    \n    return digit\n\n# Example usage:\nnumerator = 1\ndenominator = 7\nn = 5\ntry:\n    print(f\"The {n}th digit in the decimal representation of {numerator}/{denominator} is {find_nth_digit(numerator, denominator, n)}\")\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 37, "requirement": "Exception Handling", "completion": "def sort_mixed_list(mixed_list):\n    # Check if the input is a list\n    if not isinstance(mixed_list, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Separate integers and strings into two different lists\n    int_list = []\n    str_list = []\n    \n    for item in mixed_list:\n        if isinstance(item, int):\n            int_list.append(item)\n        elif isinstance(item, str):\n            str_list.append(item)\n        else:\n            raise TypeError(\"List elements must be either integers or strings\")\n    \n    # Sort the integer list and string list\n    int_list.sort()\n    str_list.sort()\n    \n    # Combine the sorted lists\n    sorted_list = int_list + str_list\n    \n    return sorted_list\n\n# Example usage:\nmixed_list = [3, \"apple\", 1, \"banana\", 2, \"cherry\"]\nsorted_list = sort_mixed_list(mixed_list)\nprint(sorted_list)  # Output: [1, 2, 3, 'apple', 'banana', 'cherry']\n\n# This will raise a TypeError:\ninvalid_list = [3, \"apple\", 1.5, \"banana\", 2, \"cherry\"]\n# sorted_list = sort_mixed_list(invalid_list)  # Uncomment to test TypeError\n", "result": "passed", "passed": true}
{"task_id": 38, "requirement": "Exception Handling", "completion": "def div_even_odd(numbers):\n    even = None\n    odd = None\n    \n    # Loop through the list to find the first even and odd numbers\n    for num in numbers:\n        if num % 2 == 0 and even is None:\n            even = num\n        if num % 2 != 0 and odd is None:\n            odd = num\n        \n        # If both even and odd numbers are found, break the loop\n        if even is not None and odd is not None:\n            break\n    \n    # Check if both even and odd numbers were found\n    if even is None or odd is None:\n        raise ValueError(\"List must contain at least one even and one odd number.\")\n    \n    # Perform the division\n    return even / odd\n\n# Example usage:\nnumbers = [1, 3, 5, 8, 10]\ntry:\n    result = div_even_odd(numbers)\n    print(result)  # Output: 8.0\nexcept ValueError as e:\n    print(e)\n\n# Example with error:\nnumbers = [2, 4, 6, 8, 10]\ntry:\n    result = div_even_odd(numbers)\n    print(result)\nexcept ValueError as e:\n    print(e)  # Output: List must contain at least one even and one odd number.\n", "result": "failed: File \"/tmp/tmppeg6sse0.py\", line 35\n    try: div_even_odd([2, 4, 6]); assert False; except ValueError as e: assert str(e) == 'List must contain at least one even and one odd number.'\n                                                ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 39, "requirement": "Exception Handling", "completion": "from collections import Counter\nimport heapq\n\ndef rearrange_string(s):\n    # Validate input\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string.\")\n    if not s.islower() or not s.isalpha():\n        raise ValueError(\"Input string must contain only lowercase letters.\")\n    \n    # Count the frequency of each character\n    char_count = Counter(s)\n    # Create a max heap based on the frequency of characters\n    max_heap = [(-freq, char) for char, freq in char_count.items()]\n    heapq.heapify(max_heap)\n    \n    prev_char = None\n    prev_freq = 0\n    result = []\n    \n    while max_heap:\n        freq, char = heapq.heappop(max_heap)\n        # Append the current character to the result\n        result.append(char)\n        \n        # If there is a previous character with non-zero frequency, push it back to the heap\n        if prev_char and prev_freq < 0:\n            heapq.heappush(max_heap, (prev_freq, prev_char))\n        \n        # Update the previous character and its frequency\n        prev_char = char\n        prev_freq = freq + 1  # Decrease the frequency since we used one occurrence of this character\n    \n    # If the length of the result matches the length of the input string, it means we successfully rearranged it\n    if len(result) == len(s):\n        return ''.join(result)\n    else:\n        return \"Not possible to rearrange\"\n\n# Example usage:\ntry:\n    print(rearrange_string(\"aab\"))\n    print(rearrange_string(\"aaab\"))\n    print(rearrange_string(\"AAB\"))  # This should raise an error\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpr2t7quud.py\", line 39, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "requirement": "Exception Handling", "completion": "from collections import Counter\n\ndef freq_element(list_of_lists):\n    # Check if the input is a list\n    if not isinstance(list_of_lists, list):\n        raise TypeError(\"Input must be a list of lists\")\n    \n    # Check if each element in the list is also a list\n    for sublist in list_of_lists:\n        if not isinstance(sublist, list):\n            raise TypeError(\"Input must be a list of lists\")\n    \n    # Flatten the list of lists into a single list\n    flat_list = [item for sublist in list_of_lists for item in sublist]\n    \n    # Use Counter to count the frequency of each element\n    frequency = Counter(flat_list)\n    \n    return frequency\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\nresult = freq_element(list_of_lists)\nprint(result)  # Output: Counter({3: 3, 2: 2, 4: 2, 1: 1, 5: 1})\n\n# Example of TypeError:\ntry:\n    invalid_input = [1, 2, 3]\n    result = freq_element(invalid_input)\nexcept TypeError as e:\n    print(e)  # Output: Input must be a list of lists\n", "result": "failed: File \"/tmp/tmpaquiwqyj.py\", line 28\n    try: freq_element('not a list'); assert False; except TypeError: assert True\n                                                   ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 41, "requirement": "Exception Handling", "completion": "def filter_evennumbers(numbers):\n    # Check if input is a list\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in numbers):\n        raise TypeError(\"All elements in the list must be integers\")\n    \n    # Filter even numbers using a lambda function\n    even_numbers = list(filter(lambda x: x % 2 == 0, numbers))\n    return even_numbers\n\n# Example usage:\ntry:\n    numbers_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    result = filter_evennumbers(numbers_list)\n    print(result)  # Output: [2, 4, 6, 8, 10]\n    \n    # This will raise an error\n    invalid_input = [1, 2, '3', 4]\n    result = filter_evennumbers(invalid_input)\nexcept TypeError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 42, "requirement": "Exception Handling", "completion": "def find_sum(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Create a dictionary to store the frequency of each element\n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    \n    # Calculate the sum of elements that appear more than once\n    sum_repeated = 0\n    for num, count in frequency.items():\n        if count > 1:\n            sum_repeated += num * count\n    \n    return sum_repeated\n\n# Example usage:\ntry:\n    arr = [1, 2, 3, 2, 3, 4, 5, 3]\n    result = find_sum(arr)\n    print(\"Sum of repeated elements:\", result)  # Output: 13 (2*2 + 3*3)\nexcept TypeError as e:\n    print(e)\n\n# Example of incorrect input type:\ntry:\n    not_a_list = \"not a list\"\n    result = find_sum(not_a_list)\nexcept TypeError as e:\n    print(e)  # Output: Input must be a list\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1wgxd1iz.py\", line 31, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Exception Handling", "completion": "import re\n\ndef text_match(text):\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    pattern = r'\\b[a-z]+(?:_[a-z]+)+\\b'\n    matches = re.findall(pattern, text)\n    return matches\n\n# Example usage:\ntry:\n    text = \"Here are some examples: first_example, second_example, another_one\"\n    result = text_match(text)\n    print(result)  # Output: ['first_example', 'second_example', 'another_one']\n    \n    non_string_input = 12345\n    result = text_match(non_string_input)\nexcept TypeError as e:\n    print(e)  # Output: Input must be a string\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpuoofqki3.py\", line 17, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 44, "requirement": "Exception Handling", "completion": "import re\n\ndef text_match_string(text, word):\n    if not isinstance(text, str) or not isinstance(word, str):\n        raise TypeError(\"Both text and word must be strings\")\n    \n    pattern = r'^' + re.escape(word) + r'\\b'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n\n# Example usage:\ntry:\n    text = \"hello world\"\n    word = \"hello\"\n    result = text_match_string(text, word)\n    print(result)  # Output: True\n\n    text = \"world hello\"\n    result = text_match_string(text, word)\n    print(result)  # Output: False\n\n    text = 123  # This will raise an error\n    word = \"hello\"\n    result = text_match_string(text, word)\nexcept TypeError as e:\n    print(e)  # Output: Both text and word must be strings\n", "result": "failed: File \"/tmp/tmp1253so5v.py\", line 27\n    try: text_match_string(123); assert False, 'TypeError not raised' except TypeError: pass\n                                                                      ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 45, "requirement": "Exception Handling", "completion": "from functools import reduce\nimport math\n\ndef get_gcd(arr):\n    if not arr:\n        raise ValueError('Input list cannot be empty.')\n    \n    def gcd(x, y):\n        while y != 0:\n            (x, y) = (y, x % y)\n        return x\n    \n    return reduce(gcd, arr)\n\n# Example usage:\ntry:\n    arr = []\n    result = get_gcd(arr)\n    print(f\"The GCD of the array elements {arr} is {result}\")\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 46, "requirement": "Exception Handling", "completion": "def test_distinct(numbers):\n    \"\"\"\n    Check if all numbers in the list are distinct and raise TypeError if the input is not a list or contains non-integer elements.\n\n    Args:\n    numbers (list): A list of numbers.\n\n    Returns:\n    bool: True if all numbers are distinct, False otherwise.\n\n    Raises:\n    TypeError: If the input is not a list or contains non-integer elements.\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    for number in numbers:\n        if not isinstance(number, int):\n            raise TypeError(\"All elements in the list must be integers.\")\n    \n    return len(numbers) == len(set(numbers))\n\n# Example usage:\nnumbers = [1, 2, 3, 4, 5]\nprint(test_distinct(numbers))  # Output: True\n\nnumbers = [1, 2, 3, 3, 4]\nprint(test_distinct(numbers))  # Output: False\n\n# This will raise a TypeError\ntest_distinct(\"not a list\")\n\n# This will also raise a TypeError\ntest_distinct([1, 2, 'three', 4])\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwgixw5v5.py\", line 14, in <module>\n    test_distinct(\"not a list\")\n  File \"/tmp/tmpwgixw5v5.py\", line 3, in test_distinct\n    raise TypeError(\"Input must be a list.\")\nTypeError: Input must be a list.", "passed": false}
{"task_id": 47, "requirement": "Exception Handling", "completion": "def compute_last_digit(a, b):\n    if a > b:\n        raise ValueError(\"a should not be greater than b\")\n    \n    # Calculate factorial(b) // factorial(a)\n    result = 1\n    for i in range(a + 1, b + 1):\n        result *= i\n    \n    # Get the last digit\n    last_digit = result % 10\n    return last_digit\n\n# Example usage:\nprint(compute_last_digit(3, 5))  # Output: 0 (since 5! // 3! = 20 and last digit of 20 is 0)\nprint(compute_last_digit(4, 10)) # Output: 0 (since 10! // 4! = 151200 and last digit of 151200 is 0)\n\n# This will raise an error\ntry:\n    print(compute_last_digit(6, 4))\nexcept ValueError as e:\n    print(e)  # Output: a should not be greater than b\n", "result": "passed", "passed": true}
{"task_id": 48, "requirement": "Exception Handling", "completion": "def odd_bit_set_number(num):\n    # Check if the input is an integer\n    if not isinstance(num, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    # Initialize a mask with all odd bits set to 1\n    mask = 0xAAAAAAAA\n    \n    # Set all odd bits of the given number using bitwise OR operation\n    result = num | mask\n    \n    return result\n\n# Example usage\ntry:\n    number = 10  # Binary representation: 1010\n    result = odd_bit_set_number(number)\n    print(f\"Original number: {number}, Binary: {bin(number)}\")\n    print(f\"Number with odd bits set: {result}, Binary: {bin(result)}\")\nexcept TypeError as e:\n    print(e)\n\n# Example with incorrect input type\ntry:\n    number = \"10\"\n    result = odd_bit_set_number(number)\nexcept TypeError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvqnn3rcp.py\", line 24, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "requirement": "Exception Handling", "completion": "def specified_element(matrix, index=0):\n    \"\"\"\n    Extracts the specified element from each sub-list in a two-dimensional list.\n    \n    :param matrix: A two-dimensional list (list of lists)\n    :param index: The index of the element to extract from each sub-list (default is 0)\n    :return: A list containing the extracted elements\n    :raises IndexError: If the specified index is out of range for any sublist\n    \"\"\"\n    # Check if the matrix is empty\n    if not matrix:\n        return []\n    \n    # Initialize an empty list to store the extracted elements\n    extracted_elements = []\n    \n    # Iterate through each sub-list in the matrix\n    for sublist in matrix:\n        # Check if the sublist is long enough to have the specified index\n        if len(sublist) > index:\n            # Append the element at the specified index to the extracted_elements list\n            extracted_elements.append(sublist[index])\n        else:\n            # Raise an IndexError if the sublist is too short\n            raise IndexError('Index out of range for sublist')\n    \n    return extracted_elements\n\n# Example usage:\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(specified_element(matrix))  # Output: [1, 4, 7]\nprint(specified_element(matrix, 1))  # Output: [2, 5, 8]\nprint(specified_element(matrix, 2))  # Output: [3, 6, 9]\n\n# This will raise an IndexError because the second sublist does not have an index 3\ntry:\n    print(specified_element(matrix, 3))\nexcept IndexError as e:\n    print(e)  # Output: Index out of range for sublist\n", "result": "passed", "passed": true}
{"task_id": 50, "requirement": "Exception Handling", "completion": "def min_length_list(list_of_lists):\n    # Check if the input is a list\n    if not isinstance(list_of_lists, list):\n        raise ValueError(\"Input must be a list of lists.\")\n    \n    # Check if all elements in the list are also lists\n    if not all(isinstance(sublist, list) for sublist in list_of_lists):\n        raise ValueError(\"Input must be a list of lists.\")\n    \n    # If the list of lists is empty, return None\n    if not list_of_lists:\n        return None\n    \n    # Find and return the list with the minimum length\n    return min(list_of_lists, key=lambda x: len(x))\n\n# Example usage:\ntry:\n    lists = [[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]\n    shortest_list = min_length_list(lists)\n    print(\"The list with the minimum length is:\", shortest_list)\n    \n    # Test with incorrect input\n    incorrect_input = \"not a list of lists\"\n    result = min_length_list(incorrect_input)\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpsljr1fnn.py\", line 23, in <module>\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nAssertionError", "passed": false}
{"task_id": 51, "requirement": "Exception Handling", "completion": "def check_equilateral(side1, side2, side3):\n    # Check if all inputs are positive integers\n    if side1 <= 0 or side2 <= 0 or side3 <= 0:\n        raise ValueError(\"All sides must be positive integers.\")\n    \n    if side1 == side2 == side3:\n        print(\"The triangle is equilateral.\")\n    else:\n        print(\"The triangle is not equilateral.\")\n\n# Example usage:\ncheck_equilateral(5, 5, 5)  # Output: The triangle is equilateral.\ntry:\n    check_equilateral(3, -4, 5)  # This will raise an error\nexcept ValueError as e:\n    print(e)  # Output: All sides must be positive integers.\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkp4_045u.py\", line 15, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "requirement": "Exception Handling", "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float or int): The length of the base of the parallelogram.\n    height (float or int): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram.\n\n    Raises:\n    TypeError: If either base or height is not a numerical value.\n    \"\"\"\n    if not (isinstance(base, (int, float)) and isinstance(height, (int, float))):\n        raise TypeError(\"Both base and height must be numerical values.\")\n    \n    area = base * height\n    return area\n", "result": "passed", "passed": true}
{"task_id": 53, "requirement": "Exception Handling", "completion": "def check_equality(s):\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    if len(s) < 1:\n        return False\n    return s[0] == s[-1]\n\n# Example usage:\ntry:\n    result = check_equality(\"hello\")\n    print(result)  # Output: False\n\n    result = check_equality(\"radar\")\n    print(result)  # Output: True\n\n    result = check_equality(123)  # This will raise an error\nexcept TypeError as e:\n    print(e)  # Output: Input must be a string\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0l6l2j7c.py\", line 16, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 54, "requirement": "Exception Handling", "completion": "def counting_sort(arr):\n    # Check if input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements in the list must be integers\")\n    \n    # Handle empty array case\n    if len(arr) == 0:\n        return arr\n    \n    # Find the maximum element in the array\n    max_val = max(arr)\n    \n    # Initialize the count array with zeros\n    count = [0] * (max_val + 1)\n    \n    # Store the count of each element in the count array\n    for num in arr:\n        count[num] += 1\n    \n    # Modify the count array by adding the previous counts\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    \n    # Create an output array to store the sorted elements\n    output = [0] * len(arr)\n    \n    # Build the output array using the count array\n    for num in reversed(arr):\n        output[count[num] - 1] = num\n        count[num] -= 1\n    \n    # Copy the sorted elements back to the original array\n    for i in range(len(arr)):\n        arr[i] = output[i]\n\n    return arr\n\n# Example usage:\ntry:\n    arr = [4, 2, 2, 8, 3, 3, 1]\n    sorted_arr = counting_sort(arr)\n    print(sorted_arr)\n    \n    # Test with invalid input\n    invalid_input = [4, 2, 'a', 8]\n    counting_sort(invalid_input)\nexcept TypeError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 55, "requirement": "Exception Handling", "completion": "def tn_gp(a, r, t):\n    \"\"\"\n    Calculate the t-nth term of a geometric series.\n    \n    Parameters:\n        a (float): The first term of the geometric series.\n        r (float): The common ratio of the geometric series.\n        t (int): The term number to find.\n        \n    Raises:\n        ValueError: If the term number t is less than 1.\n        \n    Returns:\n        float: The t-nth term of the geometric series.\n    \"\"\"\n    if t < 1:\n        raise ValueError(\"Term number must be greater than 0\")\n    \n    return a * (r ** (t - 1))\n\n# Example usage:\nfirst_term = 2\ncommon_ratio = 3\nterm_number = 4\n\ntry:\n    result = tn_gp(first_term, common_ratio, term_number)\n    print(f\"The {term_number}-th term of the geometric series is: {result}\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpm20iob_1.py\", line 14, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "requirement": "Exception Handling", "completion": "def check(number):\n    # Check if the input is an integer\n    if not isinstance(number, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    # Convert the number to a string to reverse it\n    reversed_number_str = str(number)[::-1]\n    \n    # Convert the reversed string back to an integer\n    reversed_number = int(reversed_number_str)\n    \n    # Calculate twice the reversed number\n    twice_reversed = 2 * reversed_number\n    \n    # Check if the given number is one less than twice its reverse\n    return number == twice_reversed - 1\n\n# Example usage:\ntry:\n    number = 17\n    result = check(number)\n    print(f\"Is {number} one less than twice its reverse? {result}\")\nexcept TypeError as e:\n    print(e)\n\n# Example to test TypeError:\ntry:\n    invalid_input = \"17\"\n    result = check(invalid_input)\n    print(f\"Is {invalid_input} one less than twice its reverse? {result}\")\nexcept TypeError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 57, "requirement": "Exception Handling", "completion": "def find_max_num(digits, num_digits):\n    # Check if the number of digits specified is greater than the length of the list\n    if num_digits > len(digits):\n        raise ValueError('Number of digits exceeds the length of the list.')\n    \n    # Convert each integer in the list to a string\n    str_digits = [str(digit) for digit in digits]\n    \n    # Sort the string digits in descending order\n    sorted_digits = sorted(str_digits, reverse=True)\n    \n    # Join the sorted digits into a single string\n    max_num_str = ''.join(sorted_digits[:num_digits])\n    \n    # Convert the string back to an integer\n    max_num = int(max_num_str)\n    \n    return max_num\n\n# Example usage:\ndigits = [3, 1, 4, 1, 5, 9]\ntry:\n    result = find_max_num(digits, 6)\n    print(\"The largest number that can be formed is:\", result)\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 58, "requirement": "Exception Handling", "completion": "def opposite_signs(x, y):\n    if not isinstance(x, int) or not isinstance(y, int):\n        raise TypeError(\"Both inputs must be integers\")\n    return (x < 0 and y > 0) or (x > 0 and y < 0)\n\n# Example usage:\ntry:\n    num1 = -5\n    num2 = 10\n    print(opposite_signs(num1, num2))  # Output: True\n\n    num1 = 15\n    num2 = 20\n    print(opposite_signs(num1, num2))  # Output: False\n\n    num1 = \"15\"\n    num2 = -20\n    print(opposite_signs(num1, num2))  # This will raise a TypeError\nexcept TypeError as e:\n    print(e)  # Output: Both inputs must be integers\n", "result": "passed", "passed": true}
{"task_id": 59, "requirement": "Exception Handling", "completion": "def is_octagonal(n):\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"Input should be a positive integer\")\n    return n * (3 * n - 2)\n\n# Example usage:\ntry:\n    nth_octagonal = is_octagonal(5)\n    print(f\"The 5th octagonal number is: {nth_octagonal}\")\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxdcs8mll.py\", line 15, in <module>\n    is_octagonal(-1)\n  File \"/tmp/tmpxdcs8mll.py\", line 3, in is_octagonal\n    raise ValueError(\"Input should be a positive integer\")\nValueError: Input should be a positive integer\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpxdcs8mll.py\", line 17, in <module>\n    assert str(e) == 'Input must be a positive integer'\nAssertionError", "passed": false}
{"task_id": 60, "requirement": "Exception Handling", "completion": "def max_len_sub(arr, diff):\n    # Check if the input types are correct\n    if not isinstance(arr, list):\n        raise TypeError(\"The first parameter must be a list.\")\n    if not isinstance(diff, int):\n        raise TypeError(\"The second parameter must be an integer.\")\n    \n    if not arr:\n        return 0\n    \n    # Dictionary to store the length of subsequence ending with each element\n    subseq_length = {}\n    \n    # Initialize the dictionary with 1 for each element\n    for num in arr:\n        subseq_length[num] = 1\n    \n    # Iterate through the array to build the subsequence lengths\n    for num in arr:\n        # Check if there's a subsequence ending with num-diff\n        if num - diff in subseq_length:\n            subseq_length[num] = max(subseq_length[num], subseq_length[num - diff] + 1)\n        # Check if there's a subsequence ending with num+diff\n        if num + diff in subseq_length:\n            subseq_length[num + diff] = max(subseq_length[num + diff], subseq_length[num] + 1)\n    \n    # The maximum length of subsequence with specified difference between adjacent elements\n    return max(subseq_length.values())\n\n# Example usage\narr = [1, 2, 3, 4, 5, 3, 2, 1]\ndiff = 1\nprint(max_len_sub(arr, diff))  # Output: 5 (subsequence: [1, 2, 3, 2, 1])\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp920pijs2.py\", line 28, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nAssertionError", "passed": false}

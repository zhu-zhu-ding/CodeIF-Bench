{"task_id": 11, "requirement": "Edge Case Handling", "completion": "def remove_occ(string, char):\n    \"\"\"\n    Remove first and last occurrence of a given character from the string.\n    Returns original string if character is not found.\n    \n    Args:\n        string (str): Input string\n        char (str): Character to remove\n        \n    Returns:\n        str: Modified string with first and last occurrence of char removed\n    \"\"\"\n    # Handle empty string or character\n    if not string or not char:\n        return string\n    \n    # Find first and last occurrence\n    first = string.find(char)\n    \n    # If character not found, return original string\n    if first == -1:\n        return string\n        \n    last = string.rfind(char)\n    \n    # If only one occurrence, remove it\n    if first == last:\n        return string[:first] + string[first + 1:]\n    \n    # Remove both first and last occurrences\n    return string[:first] + string[first + 1:last] + string[last + 1:]\n", "result": "passed", "passed": true}
{"task_id": 12, "requirement": "Edge Case Handling", "completion": "def sort_matrix(matrix):\n    # Handle empty matrix case\n    if not matrix:\n        return []\n        \n    # Sort matrix rows based on their sums\n    return sorted(matrix, key=sum)\n", "result": "passed", "passed": true}
{"task_id": 13, "requirement": "Edge Case Handling", "completion": "from collections import Counter\n\ndef count_common(text_dict, n=5):\n    \"\"\"\n    Count the most common words across all values in a dictionary.\n    \n    Args:\n        text_dict (dict): Dictionary containing text values\n        n (int): Number of most common words to return (default=5)\n    \n    Returns:\n        list: List of tuples containing (word, count) pairs, or empty list if input is empty\n    \"\"\"\n    # Handle empty dictionary\n    if not text_dict:\n        return []\n        \n    # Rest of the function remains the same\n    all_text = ' '.join(str(value) for value in text_dict.values())\n    words = all_text.lower().split()\n    word_counts = Counter(words)\n    return word_counts.most_common(n)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwq2d96aq.py\", line 11, in <module>\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n  File \"/tmp/tmpwq2d96aq.py\", line 7, in count_common\n    all_text = ' '.join(str(value) for value in text_dict.values())\nAttributeError: 'list' object has no attribute 'values'", "passed": false}
{"task_id": 14, "requirement": "Edge Case Handling", "completion": "def find_volume(base, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n    \n    Args:\n        base (float): The base length of the triangle\n        height (float): The height of the triangle\n        length (float): The length (depth) of the prism\n    \n    Returns:\n        float: The volume of the triangular prism\n        \n    Raises:\n        ValueError: If any dimension is less than or equal to 0\n    \"\"\"\n    # Validate that all dimensions are positive\n    if not all(dim > 0 for dim in (base, height, length)):\n        raise ValueError(\"All dimensions must be positive values\")\n    \n    # Handle very small (but valid) dimensions with high precision\n    triangle_area = 0.5 * base * height\n    volume = triangle_area * length\n    \n    # Round to 6 decimal places to handle floating point precision\n    return round(volume, 6)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpfx02d4za.py\", line 13, in <module>\n    assert find_volume(0.0001, 0.0001, 0.0001) == 5e-13\nAssertionError", "passed": false}
{"task_id": 15, "requirement": "Edge Case Handling", "completion": "def split_lowerstring(text):\n    # Return empty list if no lowercase letters exist\n    if not any(char.islower() for char in text):\n        return []\n    \n    result = []\n    current_word = \"\"\n    \n    for char in text:\n        if char.islower():\n            if current_word:\n                result.append(current_word)\n            current_word = char\n        else:\n            current_word += char\n    \n    # Append the last word if it exists\n    if current_word:\n        result.append(current_word)\n    \n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgp550e3p.py\", line 18, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "requirement": "Edge Case Handling", "completion": "import re\n\ndef text_lowercase_underscore(text):\n    if not text:  # Check if text is empty\n        return \"Not matched!\"\n    \n    pattern = r'[a-z]+(?:_[a-z]+)*'\n    matches = re.findall(pattern, text)\n    return matches if matches else \"Not matched!\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7rw7aq7h.py\", line 8, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "requirement": "Edge Case Handling", "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n    \n    Args:\n        side_length (float): Length of one side of the square\n        \n    Returns:\n        float: Perimeter of the square\n        \n    Raises:\n        ValueError: If side length is negative\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative\")\n    \n    # Zero is a valid input and will result in a perimeter of 0\n    perimeter = 4 * side_length\n    return perimeter\n", "result": "passed", "passed": true}
{"task_id": 18, "requirement": "Edge Case Handling", "completion": "def remove_dirty_chars(string1: str, string2: str) -> str:\n    # Return original string if string2 is empty\n    if not string2:\n        return string1\n        \n    # Convert string2 to a set for O(1) lookup\n    chars_to_remove = set(string2)\n    \n    # Use list comprehension to keep only characters not in chars_to_remove\n    return ''.join(char for char in string1 if char not in chars_to_remove)\n", "result": "passed", "passed": true}
{"task_id": 19, "requirement": "Edge Case Handling", "completion": "def test_duplicate(arr):\n    \"\"\"\n    Check if an array contains any duplicate elements.\n    \n    Args:\n        arr (list): List of integers to check\n        \n    Returns:\n        bool: True if duplicates exist, False otherwise\n        \n    Edge cases:\n        - Empty list returns False (no duplicates)\n        - Single element list returns False (no duplicates)\n    \"\"\"\n    # Handle edge cases\n    if len(arr) <= 1:\n        return False\n        \n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    \n    return False\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases including edge cases\n    arr1 = []                    # Empty list\n    arr2 = [1]                   # Single element\n    arr3 = [1, 2, 3, 4, 5]      # No duplicates\n    arr4 = [1, 2, 3, 2, 5]      # Has duplicates\n    \n    print(f\"Empty array has duplicates: {test_duplicate(arr1)}\")           # False\n    print(f\"Single element array has duplicates: {test_duplicate(arr2)}\")  # False\n    print(f\"Array {arr3} has duplicates: {test_duplicate(arr3)}\")         # False\n    print(f\"Array {arr4} has duplicates: {test_duplicate(arr4)}\")         # True\n", "result": "passed", "passed": true}
{"task_id": 20, "requirement": "Edge Case Handling", "completion": "def is_woodall(num):\n    \"\"\"\n    Check if a given number is a Woodall number.\n    A Woodall number follows the formula: n \u00d7 2^n - 1, where n is a natural number.\n    \n    Args:\n        num (int): The number to check\n        \n    Returns:\n        bool: True if the number is a Woodall number, False otherwise\n        \n    Raises:\n        TypeError: If input is not an integer\n    \"\"\"\n    # Type checking\n    if not isinstance(num, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    # Handle edge cases\n    if num < 1:  # Woodall numbers are always positive\n        return False\n    \n    n = 1\n    while True:\n        try:\n            # Use pow() for more efficient power calculation\n            woodall = n * pow(2, n) - 1\n            \n            if woodall == num:\n                return True\n            if woodall > num:\n                return False\n            \n            # Prevent integer overflow\n            if woodall < 0:  # Integer overflow occurred\n                return False\n                \n            n += 1\n            \n            # Add reasonable limit to prevent infinite loops with very large numbers\n            if n > 1000:  # Practical limit for most use cases\n                return False\n                \n        except OverflowError:  # Handle potential overflow in calculation\n            return False\n", "result": "passed", "passed": true}
{"task_id": 21, "requirement": "Edge Case Handling", "completion": "def multiples_of_num(n, m):\n    \"\"\"\n    Find m multiples of number n.\n    \n    Args:\n        n (int): The number to find multiples of\n        m (int): The number of multiples to find\n    \n    Returns:\n        list: A list containing m multiples of n, or empty list if m is 0\n    \"\"\"\n    if m <= 0:\n        return []\n    return [n * i for i in range(1, m + 1)]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplsk96_cf.py\", line 5, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "requirement": "Edge Case Handling", "completion": "def find_first_duplicate(arr):\n    # Handle empty list case\n    if not arr:\n        return -1\n        \n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1  # Return -1 if no duplicates found\n", "result": "passed", "passed": true}
{"task_id": 23, "requirement": "Edge Case Handling", "completion": "def maximum_sum(list_of_lists):\n    if not list_of_lists:  # Check if input list is empty\n        return 0\n    \n    # Filter out empty sublists and check if any non-empty sublists remain\n    non_empty_lists = [sublist for sublist in list_of_lists if sublist]\n    if not non_empty_lists:  # If all sublists were empty\n        return 0\n    \n    return max(sum(sublist) for sublist in non_empty_lists)\n", "result": "passed", "passed": true}
{"task_id": 24, "requirement": "Edge Case Handling", "completion": "def binary_to_decimal(binary):\n    # Handle empty string case\n    if binary == \"\":\n        return 0\n        \n    try:\n        # Convert string to integer using base 2\n        decimal = int(str(binary), 2)\n        return decimal\n    except ValueError:\n        return \"Invalid binary number\"\n", "result": "passed", "passed": true}
{"task_id": 25, "requirement": "Edge Case Handling", "completion": "def find_product(arr):\n    # Return 1 if array is empty\n    if not arr:\n        return 1\n    \n    # Convert array to set to remove duplicates\n    unique_elements = set(arr)\n    \n    # Calculate product of unique elements\n    product = 1\n    for num in unique_elements:\n        product *= num\n        \n    return product\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpnlpp5elp.py\", line 12, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "requirement": "Edge Case Handling", "completion": "def check_k_elements(tuple_list, k):\n    # Handle invalid inputs\n    if k < 0:\n        return False\n    if k == 0:\n        return len(tuple_list) == 0\n    if not tuple_list:\n        return k == 0\n    \n    # Convert tuple list elements into a flat set for efficient lookup\n    elements = set()\n    for tup in tuple_list:\n        if not tup:  # Handle empty tuples\n            continue\n        elements.update(tup)\n    \n    # Check if all numbers from 0 to k-1 are present\n    required_elements = set(range(k))\n    return elements == required_elements\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3nuoii3c.py\", line 18, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "requirement": "Edge Case Handling", "completion": "def remove(string_list):\n    # Handle empty list\n    if not string_list:\n        return []\n    \n    # Process each string, handling empty strings and strings with no digits\n    return [''.join(char for char in s if not char.isdigit()) for s in string_list]\n", "result": "passed", "passed": true}
{"task_id": 28, "requirement": "Edge Case Handling", "completion": "def binomial_coeff(n: int, k: int) -> int:\n    \"\"\"\n    Calculate the binomial coefficient C(n,k) - number of ways to choose k items from n items.\n    \n    Args:\n        n (int): Total number of items\n        k (int): Number of items to choose\n        \n    Returns:\n        int: The binomial coefficient value\n        \n    Raises:\n        ValueError: If n < 0 or k < 0 or k > n\n    \"\"\"\n    # Input validation\n    if n < 0 or k < 0:\n        raise ValueError(\"Both n and k must be non-negative\")\n    if k > n:\n        raise ValueError(\"k cannot be greater than n\")\n        \n    # Edge cases\n    if k == 0 or k == n:\n        return 1\n    if n == 0:\n        return 0\n    \n    # Optimize by using the smaller value of k or n-k\n    k = min(k, n - k)\n    \n    # Calculate using multiplicative formula\n    result = 1\n    for i in range(k):\n        result *= (n - i)\n        result //= (i + 1)\n    \n    return result\n", "result": "passed", "passed": true}
{"task_id": 29, "requirement": "Edge Case Handling", "completion": "def get_odd_occurrence(arr):\n    # Handle empty list case\n    if not arr:\n        return None\n    \n    result = 0\n    for element in arr:\n        result ^= element\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpn317sfk8.py\", line 9, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "requirement": "Edge Case Handling", "completion": "def count_substring_with_equal_ends(s):\n    if not s:  # This line handles empty string input\n        return 0\n        \n    n = len(s)\n    count = 0\n    \n    # Consider each possible substring\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n                \n    return count\n\n# Test empty string case\nprint(count_substring_with_equal_ends(\"\"))  # Output: 0\n\n# Test other cases\nprint(count_substring_with_equal_ends(\"abcab\"))  # Output: 7\nprint(count_substring_with_equal_ends(\"aba\"))    # Output: 4\n", "result": "passed", "passed": true}
{"task_id": 31, "requirement": "Edge Case Handling", "completion": "from heapq import heappush, heappop\nfrom collections import Counter\n\ndef func(nums, k):\n    # Check if input list is empty\n    if not nums:\n        return []\n    \n    # Rest of the function remains the same\n    freq_counter = Counter(nums)\n    heap = []\n    \n    for num, freq in freq_counter.items():\n        heappush(heap, (freq, num))\n        if len(heap) > k:\n            heappop(heap)\n    \n    result = []\n    while heap:\n        freq, num = heappop(heap)\n        result.append(num)\n    \n    return result[::-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmps2_4y804.py\", line 19, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n  File \"/tmp/tmps2_4y804.py\", line 8, in func\n    freq_counter = Counter(nums)\n  File \"/home/liminxiao/miniconda3/envs/DevEval/lib/python3.9/collections/__init__.py\", line 593, in __init__\n    self.update(iterable, **kwds)\n  File \"/home/liminxiao/miniconda3/envs/DevEval/lib/python3.9/collections/__init__.py\", line 679, in update\n    _count_elements(self, iterable)\nTypeError: unhashable type: 'list'", "passed": false}
{"task_id": 32, "requirement": "Edge Case Handling", "completion": "def max_prime_factors(n):\n    # Handle invalid input\n    if n < 2:\n        return None\n    \n    # If n is 2, it's prime itself\n    if n == 2:\n        return 2\n        \n    largest_prime = -1\n    \n    # Handle division by 2 separately\n    while n % 2 == 0:\n        largest_prime = 2\n        n = n // 2\n    \n    # Check odd numbers up to sqrt(n)\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            largest_prime = i\n            n = n // i\n    \n    # If n is still greater than 2, it's prime itself\n    if n > 2:\n        largest_prime = n\n    \n    return largest_prime\n", "result": "passed", "passed": true}
{"task_id": 33, "requirement": "Edge Case Handling", "completion": "def decimal_to_binary(decimal_num):\n    # Handle zero case explicitly\n    if decimal_num == 0:\n        return \"0\"\n    \n    binary = \"\"\n    decimal_num = abs(decimal_num)  # Handle negative numbers\n    \n    while decimal_num > 0:\n        binary = str(decimal_num % 2) + binary\n        decimal_num //= 2\n    \n    return binary\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7m01rs2o.py\", line 11, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "requirement": "Edge Case Handling", "completion": "def find_missing(arr):\n    if not arr:\n        return None\n        \n    # Find the expected start of sequence\n    expected_start = min(arr[0], arr[0] - 1)\n    \n    # Find expected end of sequence\n    expected_end = arr[-1]\n    \n    # Calculate expected length of sequence\n    expected_length = expected_end - expected_start + 1\n    \n    # If array length equals expected length, no number is missing\n    if len(arr) == expected_length:\n        return None\n    \n    # Create set from array for O(1) lookup\n    num_set = set(arr)\n    \n    # Check each number in range\n    for num in range(expected_start, expected_end + 1):\n        if num not in num_set:\n            return num\n            \n    return None\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp861tb356.py\", line 20, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "requirement": "Edge Case Handling", "completion": "def find_rect_num(n):\n    \"\"\"\n    Find the n-th rectangular number.\n    \n    Args:\n        n (int): The position of the rectangular number to find (n > 0)\n    \n    Returns:\n        int: The n-th rectangular number\n        \n    Example:\n        >>> find_rect_num(1)\n        2\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return n * (n + 1)\n", "result": "passed", "passed": true}
{"task_id": 36, "requirement": "Edge Case Handling", "completion": "def find_nth_digit(numerator, denominator, n):\n    # Handle zero numerator case\n    if numerator == 0:\n        return \"0\"\n    \n    if denominator == 0:\n        raise ValueError(\"Denominator cannot be zero\")\n    \n    # Rest of the function remains the same...\n    if numerator * denominator < 0:\n        return \"-\" + find_nth_digit(abs(numerator), abs(denominator), n)\n    \n    numerator = abs(numerator)\n    denominator = abs(denominator)\n    \n    quotient = numerator // denominator\n    remainder = numerator % denominator\n    \n    if n == 0:\n        return str(quotient)[-1]\n    \n    decimal_digits = \"\"\n    remainders = {}\n    position = 0\n    \n    while remainder != 0 and position < n + 1:\n        if remainder in remainders:\n            break\n            \n        remainders[remainder] = position\n        remainder *= 10\n        decimal_digits += str(remainder // denominator)\n        remainder %= denominator\n        position += 1\n    \n    if n <= len(decimal_digits):\n        return decimal_digits[n-1]\n    else:\n        return \"0\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpttu3kj8x.py\", line 31, in <module>\n    assert find_nth_digit(1,2,1) == 5\nAssertionError", "passed": false}
{"task_id": 37, "requirement": "Edge Case Handling", "completion": "def sort_mixed_list(mixed_list):\n    # Handle empty list case\n    if not mixed_list:\n        return []\n    \n    # Separate integers and strings\n    integers = [x for x in mixed_list if isinstance(x, int)]\n    strings = [x for x in mixed_list if isinstance(x, str)]\n    \n    # Sort each list separately\n    integers.sort()\n    strings.sort()\n    \n    # Return combined sorted list\n    return integers + strings\n", "result": "passed", "passed": true}
{"task_id": 38, "requirement": "Edge Case Handling", "completion": "def div_even_odd(numbers):\n    # Initialize variables to store first even and odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Find first even and odd numbers\n    for num in numbers:\n        # Find first even number (including zero)\n        if first_even is None and num % 2 == 0:\n            first_even = num\n            # If first even number is 0, return 0 immediately\n            if first_even == 0:\n                return 0\n                \n        # Find first non-zero odd number\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n            \n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Check if both even and odd numbers were found\n    if first_even is None or first_odd is None:\n        return \"Cannot perform division: missing even or odd number\"\n    \n    # Perform division and return result\n    return first_even / first_odd\n", "result": "passed", "passed": true}
{"task_id": 39, "requirement": "Edge Case Handling", "completion": "from collections import Counter\nimport heapq\n\ndef rearrange_string(s: str) -> str:\n    # Handle edge cases\n    if not s:\n        return \"\"\n    \n    # Count frequency of each character\n    char_count = Counter(s)\n    \n    # Check if any character appears more than (n+1)/2 times\n    # If so, it's impossible to rearrange without adjacency\n    max_count = max(char_count.values())\n    if max_count > (len(s) + 1) // 2:\n        return \"\"\n    \n    # Create a max heap (using negative counts since heapq is min heap)\n    max_heap = [(-count, char) for char, count in char_count.items()]\n    heapq.heapify(max_heap)\n    \n    result = []\n    \n    # Keep track of the previous character and its count\n    prev_count, prev_char = 0, ''\n    \n    while max_heap:\n        # Get the character with highest frequency\n        count, char = heapq.heappop(max_heap)\n        result.append(char)\n        \n        # If we had a previous character waiting, add it back to heap\n        if prev_count < 0:\n            heapq.heappush(max_heap, (prev_count, prev_char))\n            \n        # Update previous character info\n        prev_count, prev_char = count + 1, char\n        \n    return ''.join(result)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4bvtpdd2.py\", line 30, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "requirement": "Edge Case Handling", "completion": "from collections import Counter\nfrom itertools import chain\n\ndef freq_element(list_of_lists):\n    # Return empty dictionary if input list is empty\n    if not list_of_lists:\n        return {}\n    \n    # Flatten the list of lists and count elements using Counter\n    flat_list = list(chain.from_iterable(list_of_lists))\n    frequency = Counter(flat_list)\n    return dict(frequency)\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    test_list = [[1, 2, 3], [4, 2, 3], [1, 2]]\n    print(freq_element(test_list))  # Output: {1: 2, 2: 3, 3: 2, 4: 1}\n    \n    # Empty list test case\n    empty_list = []\n    print(freq_element(empty_list))  # Output: {}\n", "result": "passed", "passed": true}
{"task_id": 41, "requirement": "Edge Case Handling", "completion": "def filter_evennumbers(numbers):\n    if not numbers:  # Check if the input list is empty\n        return []\n    return list(filter(lambda x: x % 2 == 0, numbers))\n", "result": "passed", "passed": true}
{"task_id": 42, "requirement": "Edge Case Handling", "completion": "def find_sum(arr):\n    # Handle empty array case\n    if not arr:\n        return 0\n        \n    # Create a dictionary to store element frequencies\n    freq = {}\n    \n    # Count frequency of each element\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    \n    # Calculate sum of repeated elements\n    repeated_sum = sum(num for num, count in freq.items() if count > 1)\n    \n    return repeated_sum\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_ppibq3a.py\", line 13, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Edge Case Handling", "completion": "import re\n\ndef text_match(text):\n    if not text:  # Check for empty string\n        return \"Not matched!\"\n    \n    pattern = r'^[a-z]+_[a-z]+$'\n    if re.search(pattern, text):\n        return True\n    return False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpw0rr26nj.py\", line 9, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 44, "requirement": "Edge Case Handling", "completion": "import re\n\ndef text_match_string(text):\n    \"\"\"\n    Check if the string starts with a word character sequence.\n    Handles edge cases like empty strings and strings with only whitespace.\n    \n    Args:\n        text (str): The input string to check\n        \n    Returns:\n        bool: True if string starts with a word, False otherwise\n    \"\"\"\n    # Handle None, empty string, or whitespace-only string\n    if not text or not isinstance(text, str) or text.strip() == \"\":\n        return False\n        \n    pattern = '^[A-Za-z]+' \n    return bool(re.search(pattern, text))\n\n# Test cases including edge cases\ntest_cases = [\n    \"Hello World\",     # True\n    \"123 Hello\",       # False\n    \" Hello\",          # False\n    \"\",               # False\n    \" \",              # False\n    None,             # False\n    \"Python3\",        # True\n    \"\\tWord\",         # False\n    \"\\nWord\"          # False\n]\n\n# Run tests\nfor test in test_cases:\n    try:\n        result = text_match_string(test)\n        print(f\"Input: {repr(test)} -> {result}\")\n    except Exception as e:\n        print(f\"Input: {repr(test)} -> Error: {str(e)}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkh1t7kie.py\", line 27, in <module>\n    assert text_match_string(\" python\")==('Not matched!')\nAssertionError", "passed": false}
{"task_id": 46, "requirement": "Edge Case Handling", "completion": "def test_distinct(numbers):\n    \"\"\"\n    Check if all numbers in the given sequence are distinct.\n    \n    Args:\n        numbers: An iterable of numbers\n        \n    Returns:\n        bool: True if all numbers are distinct, False otherwise\n        \n    Examples:\n        >>> test_distinct([1, 2, 3])\n        True\n        >>> test_distinct([1, 2, 2])\n        False\n        >>> test_distinct([])  # Empty list case\n        True\n        >>> test_distinct([42])  # Single element case\n        True\n    \"\"\"\n    # Handle edge cases explicitly\n    if not numbers:  # Empty list\n        return True\n    if len(numbers) == 1:  # Single element\n        return True\n        \n    # Check for distinct numbers using set comparison\n    return len(set(numbers)) == len(numbers)\n", "result": "passed", "passed": true}
{"task_id": 47, "requirement": "Edge Case Handling", "completion": "def compute_last_digit(a, b):\n    # Edge cases\n    if a > b:\n        return 0\n    if a == b:\n        return 1\n    \n    result = 1\n    # We only need to multiply numbers from (a+1) to b\n    # And we only care about the last digit at each step\n    for i in range(a + 1, b + 1):\n        result = (result * (i % 10)) % 10\n        \n    return result\n", "result": "passed", "passed": true}
{"task_id": 48, "requirement": "Edge Case Handling", "completion": "def odd_bit_set_number(n):\n    # Handle edge case where input is 0\n    if n == 0:\n        return 1\n        \n    # Create a mask with all odd bits set (1,3,5,7...)\n    # In binary: ...1010101\n    mask = 0xAAAAAAAA\n    \n    # Perform OR operation to set all odd bits\n    result = n | mask\n    \n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmph7w517iv.py\", line 11, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "requirement": "Edge Case Handling", "completion": "def specified_element(matrix, position=0):\n    \"\"\"\n    Extract elements from a specified position in each sublist of a 2D list.\n    Only extracts elements where the position exists in the sublist.\n    \n    Args:\n        matrix (list): A 2D list with possibly varying length sublists\n        position (int, optional): Position of element to extract (defaults to 0)\n    \n    Returns:\n        list: Elements from the specified position of each sublist where available\n    \"\"\"\n    result = []\n    for sublist in matrix:\n        if sublist and len(sublist) > position:  # Only extract if position exists\n            result.append(sublist[position])\n    return result\n", "result": "passed", "passed": true}
{"task_id": 50, "requirement": "Edge Case Handling", "completion": "def min_length_list(lists):\n    return min(lists, key=lambda x: len(x))\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test case 1: Lists with different lengths\n    test_lists1 = [[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]\n    result1 = min_length_list(test_lists1)\n    print(\"Test 1 - Different lengths:\")\n    print(f\"Lists: {test_lists1}\")\n    print(f\"List with minimum length: {result1}\")\n    \n    # Test case 2: Lists with same length\n    test_lists2 = [[1, 2], [3, 4], [5, 6], [7, 8]]\n    result2 = min_length_list(test_lists2)\n    print(\"\\nTest 2 - Same lengths:\")\n    print(f\"Lists: {test_lists2}\")\n    print(f\"First list with minimum length: {result2}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2v9hdcqg.py\", line 17, in <module>\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nAssertionError", "passed": false}
{"task_id": 51, "requirement": "Edge Case Handling", "completion": "def check_equilateral(side1, side2, side3):\n    # Check if all sides are zero\n    if side1 == 0 and side2 == 0 and side3 == 0:\n        return False\n    \n    # Check if all sides are equal and non-zero\n    return side1 == side2 == side3 and side1 > 0\n\n# Example usage\nprint(check_equilateral(5, 5, 5))    # True\nprint(check_equilateral(5, 4, 5))    # False\nprint(check_equilateral(0, 0, 0))    # False\n", "result": "passed", "passed": true}
{"task_id": 52, "requirement": "Edge Case Handling", "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n    \n    Args:\n        base (float): The length of the base of the parallelogram\n        height (float): The perpendicular height of the parallelogram\n        \n    Returns:\n        float: The area of the parallelogram\n        Returns 0 if either base or height is 0\n    \"\"\"\n    if base < 0 or height < 0:\n        raise ValueError(\"Base and height must be non-negative numbers\")\n    \n    area = base * height\n    return area\n", "result": "passed", "passed": true}
{"task_id": 53, "requirement": "Edge Case Handling", "completion": "def check_equality(text):\n    if not text:  # Check if string is empty\n        return \"Equal\"\n    \n    # Compare first and last characters\n    return \"Equal\" if text[0].lower() == text[-1].lower() else \"Not Equal\"\n", "result": "passed", "passed": true}
{"task_id": 54, "requirement": "Edge Case Handling", "completion": "def counting_sort(arr):\n    # Handle edge cases\n    if not arr:  # Empty list\n        return []\n    \n    if len(arr) == 1:  # Single element\n        return arr\n    \n    # Find the range of input array\n    max_val = max(arr)\n    min_val = min(arr)\n    range_of_elements = max_val - min_val + 1\n    \n    # Create a counting array to store count of each unique object\n    count = [0] * range_of_elements\n    \n    # Store count of each object\n    for num in arr:\n        count[num - min_val] += 1\n    \n    # Modify count array such that each element at each index \n    # stores actual position of each object\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    \n    # Create an output array\n    output = [0] * len(arr)\n    \n    # Build the output array\n    for i in range(len(arr) - 1, -1, -1):\n        output[count[arr[i] - min_val] - 1] = arr[i]\n        count[arr[i] - min_val] -= 1\n    \n    # Copy the output array to arr\n    for i in range(len(arr)):\n        arr[i] = output[i]\n    \n    return arr\n", "result": "passed", "passed": true}
{"task_id": 55, "requirement": "Edge Case Handling", "completion": "def tn_gp(a, r, n):\n    \"\"\"\n    Calculate the nth term of a geometric progression.\n    \n    Parameters:\n        a (float): First term of the geometric progression\n        r (float): Common ratio\n        n (int): Position of the term to find\n    \n    Returns:\n        float: The nth term of the geometric progression\n        If r = 0, returns 'a' for n=1 and 0 for all other values of n\n    \"\"\"\n    if r == 0:\n        return a if n == 1 else 0\n    return a * (r ** (n - 1))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9it749rf.py\", line 5, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "requirement": "Edge Case Handling", "completion": "def check(num):\n    # Handle negative numbers\n    if num < 0:\n        return False\n        \n    # Convert number to string to easily reverse it\n    num_str = str(num)\n    # Reverse the string and convert back to integer\n    reverse_num = int(num_str[::-1])\n    \n    # Check if number is one less than twice its reverse\n    return num == (2 * reverse_num - 1)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpm9920a9z.py\", line 15, in <module>\n    assert check(1) == False\nAssertionError", "passed": false}
{"task_id": 57, "requirement": "Edge Case Handling", "completion": "def find_max_num(digits):\n    # Handle empty list edge case\n    if not digits:\n        return 0\n        \n    # Convert digits to strings and sort in descending order\n    digits_str = [str(d) for d in digits]\n    digits_str.sort(reverse=True)\n    \n    # Join the sorted digits to form the largest number\n    return int(''.join(digits_str))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpbfxij9zd.py\", line 10, in <module>\n    assert find_max_num([1,2,3],3) == 321\nTypeError: find_max_num() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 58, "requirement": "Edge Case Handling", "completion": "def opposite_signs(num1: int, num2: int) -> bool:\n    \"\"\"\n    Check if two integers have opposite signs.\n    \n    Args:\n        num1 (int): First integer\n        num2 (int): Second integer\n        \n    Returns:\n        bool: True if numbers have opposite signs, False otherwise.\n              Returns False if either number is zero.\n    \"\"\"\n    # Handle zero cases explicitly\n    if num1 == 0 or num2 == 0:\n        return False\n    \n    # Use sign comparison to handle large integers\n    # and avoid potential overflow issues\n    return (num1 > 0 and num2 < 0) or (num1 < 0 and num2 > 0)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp79g2i1_c.py\", line 11, in <module>\n    assert opposite_signs(0, -1) == True\nAssertionError", "passed": false}
{"task_id": 59, "requirement": "Edge Case Handling", "completion": "def is_octagonal(n):\n    \"\"\"\n    Calculate the nth octagonal number.\n    \n    Args:\n        n (int): The position of the octagonal number to calculate (must be positive)\n    \n    Returns:\n        int: The nth octagonal number\n    \n    Raises:\n        ValueError: If n is less than or equal to 0\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return n * (3 * n - 2)\n", "result": "passed", "passed": true}
{"task_id": 60, "requirement": "Edge Case Handling", "completion": "def max_len_sub(arr):\n    if not arr:  # If array is empty, return 0\n        return 0\n    if len(arr) < 2:  # If array has only one element\n        return 1\n    \n    n = len(arr)\n    dp = [1] * n\n    max_length = 1\n    \n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n        max_length = max(max_length, dp[i])\n    \n    return max_length\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmph2gkvq60.py\", line 15, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}

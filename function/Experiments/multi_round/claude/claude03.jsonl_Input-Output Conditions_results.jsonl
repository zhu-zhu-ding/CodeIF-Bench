{"task_id": 14, "requirement": "Input-Output Conditions", "completion": "def find_volume(base, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n    \n    Args:\n        base (int or float): The base length of the triangle (must be positive)\n        height (int or float): The height of the triangle (must be positive)\n        length (int or float): The length of the prism (must be positive)\n    \n    Returns:\n        float: The volume of the triangular prism\n        \n    Raises:\n        TypeError: If inputs are not numbers\n        ValueError: If inputs are not positive\n    \"\"\"\n    # Check if inputs are numbers (int or float)\n    if not all(isinstance(x, (int, float)) for x in [base, height, length]):\n        raise TypeError(\"All inputs must be numerical values\")\n    \n    # Check if all inputs are positive\n    if not all(x > 0 for x in [base, height, length]):\n        raise ValueError(\"All inputs must be positive numbers\")\n    \n    # Calculate the area of the triangle base\n    triangle_area = 0.5 * base * height\n    \n    # Calculate the volume by multiplying base area with length\n    volume = triangle_area * length\n    \n    return volume\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpeamzd0np.py\", line 16, in <module>\n    assert find_volume(5.5, 3.2, 4.1) == 72.16\nAssertionError", "passed": false}
{"task_id": 15, "requirement": "Input-Output Conditions", "completion": "def split_lowerstring(text):\n    if not text:  # Handle empty string case\n        return []\n        \n    result = []\n    current_word = text[0]\n    \n    for char in text[1:]:\n        if char.islower():\n            result.append(current_word)\n            current_word = char\n        else:\n            current_word += char\n            \n    result.append(current_word)  # Add the last segment\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphngeuz48.py\", line 14, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "requirement": "Input-Output Conditions", "completion": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z]+(?:_[a-z]+)*$'\n    if re.match(pattern, text):\n        return 'Found a match!'\n    return 'Not matched!'\n", "result": "passed", "passed": true}
{"task_id": 17, "requirement": "Input-Output Conditions", "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n    \n    Args:\n        side_length (int): Length of one side of the square (must be non-negative integer)\n        \n    Returns:\n        int: Perimeter of the square\n        \n    Raises:\n        TypeError: If input is not an integer\n        ValueError: If input is negative\n    \"\"\"\n    # Check if input is an integer\n    if not isinstance(side_length, int):\n        raise TypeError(\"Side length must be an integer\")\n    \n    # Check if input is non-negative\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative\")\n    \n    perimeter = 4 * side_length\n    return perimeter\n", "result": "passed", "passed": true}
{"task_id": 18, "requirement": "Input-Output Conditions", "completion": "def remove_dirty_chars(string1: str, string2: str) -> str:\n    # Check if both strings contain only alphabetic characters\n    if not (string1.isalpha() and string2.isalpha()):\n        raise ValueError('Input strings must only contain alphabetic characters')\n    \n    # Convert string2 to a set for O(1) lookup\n    chars_to_remove = set(string2)\n    \n    # Use list comprehension to keep only characters not in chars_to_remove\n    return ''.join(char for char in string1 if char not in chars_to_remove)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqfh7cwg3.py\", line 13, in <module>\n    try: remove_dirty_chars('hell0', 'world')\n  File \"/tmp/tmpqfh7cwg3.py\", line 4, in remove_dirty_chars\n    raise ValueError('Input strings must only contain alphabetic characters')\nValueError: Input strings must only contain alphabetic characters\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpqfh7cwg3.py\", line 14, in <module>\n    except ValueError as e: assert str(e) == 'Input strings must only contain alphabetic characters.'\nAssertionError", "passed": false}
{"task_id": 19, "requirement": "Input-Output Conditions", "completion": "def test_duplicate(arr):\n    \"\"\"\n    Check if a list contains any duplicate elements.\n    \n    Args:\n        arr (list): List of integers to check\n        \n    Returns:\n        bool: True if duplicates exist, False otherwise\n        \n    Raises:\n        TypeError: If input is not a list\n    \"\"\"\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    seen = set()\n    \n    for num in arr:\n        if not isinstance(num, int):\n            raise TypeError(\"All elements must be integers\")\n        if num in seen:\n            return True\n        seen.add(num)\n    \n    return False\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    test_cases = [\n        [1, 2, 3, 4, 5],      # No duplicates\n        [1, 2, 3, 2, 5],      # Has duplicates\n        [10, 20, 30, 30, 40]  # Has duplicates\n    ]\n    \n    for arr in test_cases:\n        print(f\"Array {arr} has duplicates: {test_duplicate(arr)}\")\n    \n    # Error cases\n    try:\n        test_duplicate(\"not a list\")  # Should raise TypeError\n    except TypeError as e:\n        print(f\"Error: {e}\")\n        \n    try:\n        test_duplicate([1, 2, \"3\", 4])  # Should raise TypeError\n    except TypeError as e:\n        print(f\"Error: {e}\")\n", "result": "passed", "passed": true}
{"task_id": 20, "requirement": "Input-Output Conditions", "completion": "def is_woodall(num):\n    \"\"\"\n    Check if a given number is a Woodall number.\n    A Woodall number follows the formula: n \u00d7 2^n - 1, where n is a natural number.\n    \n    Args:\n        num (int): The number to check\n        \n    Returns:\n        bool: True if the number is a Woodall number, False otherwise\n    \"\"\"\n    if num < 1:\n        return False\n    \n    n = 1\n    while True:\n        woodall = n * (2 ** n) - 1\n        if woodall == num:\n            return True\n        if woodall > num:\n            return False\n        n += 1\n\n# Test cases to verify requirements\nprint(is_woodall(7))     # True\nprint(is_woodall(23))    # True\nprint(is_woodall(10))    # False\nprint(is_woodall(-5))    # False\nprint(type(is_woodall(7))) # <class 'bool'> - confirms boolean return type\n", "result": "passed", "passed": true}
{"task_id": 23, "requirement": "Input-Output Conditions", "completion": "def maximum_sum(list_of_lists: list[list[int]]) -> int:\n    # Validate input\n    if not isinstance(list_of_lists, list):\n        raise TypeError(\"Input must be a list of lists\")\n    \n    if not list_of_lists:\n        return 0\n    \n    # Validate that all elements are lists containing integers\n    for sublist in list_of_lists:\n        if not isinstance(sublist, list):\n            raise TypeError(\"All elements must be lists\")\n        if not all(isinstance(x, int) for x in sublist):\n            raise TypeError(\"All elements in sublists must be integers\")\n    \n    return max(sum(sublist) for sublist in list_of_lists)\n", "result": "passed", "passed": true}
{"task_id": 25, "requirement": "Input-Output Conditions", "completion": "def find_product(numbers: list[int]) -> int:\n    # Input validation\n    if not numbers:\n        raise ValueError(\"Input list cannot be empty\")\n    if not all(isinstance(x, int) for x in numbers):\n        raise TypeError(\"All elements must be integers\")\n    \n    # Convert array to set to remove duplicates\n    unique_elements = set(numbers)\n    \n    # Calculate product of unique elements\n    product = 1\n    for num in unique_elements:\n        product *= num\n        \n    return product\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpnktp9hs_.py\", line 14, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "requirement": "Input-Output Conditions", "completion": "def check_k_elements(tuple_list, k):\n    # Check if all tuples have exactly k elements\n    return all(len(tup) == k for tup in tuple_list)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmop65g1p.py\", line 4, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 28, "requirement": "Input-Output Conditions", "completion": "def binomial_coeff(n: int, k: int) -> int:\n    \"\"\"\n    Calculate the binomial coefficient C(n,k).\n    \n    Args:\n        n (int): Non-negative integer representing total number of items\n        k (int): Non-negative integer representing items to choose\n        \n    Returns:\n        int: The binomial coefficient value\n        \n    Raises:\n        ValueError: If inputs are not non-negative integers\n    \"\"\"\n    # Validate that inputs are non-negative integers\n    if not isinstance(n, int) or not isinstance(k, int):\n        raise ValueError(\"Inputs must be integers\")\n    if n < 0 or k < 0:\n        raise ValueError(\"Inputs must be non-negative\")\n    if k > n:\n        return 0\n        \n    # Optimize by using the smaller value\n    k = min(k, n - k)\n    \n    # Calculate using multiplicative formula\n    result = 1\n    for i in range(k):\n        result *= (n - i)\n        result //= (i + 1)\n    \n    return result\n", "result": "passed", "passed": true}
{"task_id": 30, "requirement": "Input-Output Conditions", "completion": "def count_substring_with_equal_ends(s: str) -> int:\n    # Handle empty string case\n    if not s:\n        return 0\n    \n    n = len(s)\n    count = 0\n    \n    # Iterate through all possible substring combinations\n    for i in range(n):\n        for j in range(i, n):\n            # Check if substring from index i to j has same first and last character\n            if s[i] == s[j]:\n                count += 1\n    \n    return count\n", "result": "passed", "passed": true}
{"task_id": 32, "requirement": "Input-Output Conditions", "completion": "def max_prime_factors(n):\n    # Input validation\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    largest_prime = -1\n    \n    # Handle division by 2 separately to simplify the loop\n    while n % 2 == 0:\n        largest_prime = 2\n        n = n // 2\n    \n    # Check odd numbers up to sqrt(n)\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            largest_prime = i\n            n = n // i\n    \n    # If n is still greater than 2, it's prime itself\n    if n > 2:\n        largest_prime = n\n    \n    return largest_prime\n", "result": "passed", "passed": true}
{"task_id": 35, "requirement": "Input-Output Conditions", "completion": "def find_rect_num(n):\n    return n * (n + 1)\n", "result": "passed", "passed": true}
{"task_id": 36, "requirement": "Input-Output Conditions", "completion": "def find_nth_digit(numerator, denominator, n):\n    if denominator == 0:\n        raise ValueError(\"Denominator cannot be zero\")\n    \n    # Handle the integer part\n    quotient = abs(numerator) // abs(denominator)\n    remainder = abs(numerator) % abs(denominator)\n    \n    # If n is 0, return the last digit of the integer part\n    if n == 0:\n        return int(str(quotient)[-1])\n    \n    # Calculate decimal digits\n    for _ in range(n):\n        remainder *= 10\n        digit = remainder // abs(denominator)\n        remainder %= abs(denominator)\n    \n    return int(digit)\n", "result": "passed", "passed": true}
{"task_id": 38, "requirement": "Input-Output Conditions", "completion": "def div_even_odd(numbers):\n    # Find first even number\n    first_even = next((num for num in numbers if num % 2 == 0), None)\n    # Find first odd number\n    first_odd = next((num for num in numbers if num % 2 != 0), None)\n    \n    # Perform division if both numbers are found\n    if first_even is not None and first_odd is not None:\n        return first_even / first_odd\n    return None\n", "result": "passed", "passed": true}
{"task_id": 39, "requirement": "Input-Output Conditions", "completion": "from collections import Counter\nimport heapq\n\ndef rearrange_string(s: str) -> str:\n    # Input validation\n    if not s or not s.islower() or not s.isalpha():\n        raise ValueError(\"Input must be a non-empty string of lowercase letters\")\n    \n    # Count frequency of each character\n    char_count = Counter(s)\n    \n    # Create a max heap (using negative counts since heapq is min heap)\n    max_heap = [(-count, char) for char, count in char_count.items()]\n    heapq.heapify(max_heap)\n    \n    result = []\n    \n    while max_heap:\n        # If we can't continue but still have characters, it's impossible\n        if len(max_heap) == 1 and -max_heap[0][0] > 1:\n            return \"\"\n            \n        # Get the character with highest frequency\n        count1, char1 = heapq.heappop(max_heap)\n        \n        # If we have used all characters\n        if not max_heap:\n            if -count1 == 1:\n                result.append(char1)\n                return \"\".join(result)\n            else:\n                return \"\"\n        \n        # Get second highest frequency character\n        count2, char2 = heapq.heappop(max_heap)\n        \n        # Add both characters to result\n        result.extend([char1, char2])\n        \n        # Update counts and add back to heap if needed\n        if count1 + 1 < 0:\n            heapq.heappush(max_heap, (count1 + 1, char1))\n        if count2 + 1 < 0:\n            heapq.heappush(max_heap, (count2 + 1, char2))\n    \n    return \"\".join(result)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgpd4bbhf.py\", line 36, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 42, "requirement": "Input-Output Conditions", "completion": "def find_sum(arr):\n    # Create a dictionary to store element frequencies\n    freq = {}\n    \n    # Count frequency of each element\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    \n    # Calculate sum of repeated elements\n    # Returns 0 if no elements are repeated (all counts are 1)\n    repeated_sum = sum(num for num, count in freq.items() if count > 1)\n    \n    return repeated_sum\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpigbjl4yf.py\", line 11, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Input-Output Conditions", "completion": "import re\n\ndef text_match(text):\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return \"Found a match!\"\n    return \"Not matched!\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8h9qwlk2.py\", line 9, in <module>\n    assert text_match(\"Aaab_abbbc\") == 'Not matched!'\nAssertionError", "passed": false}
{"task_id": 46, "requirement": "Input-Output Conditions", "completion": "def test_distinct(numbers: list[int]) -> bool:\n    \"\"\"\n    Check if all integers in the given list are distinct.\n    \n    Args:\n        numbers: A list of integers\n        \n    Returns:\n        bool: True if all integers are distinct, False otherwise\n    \"\"\"\n    return len(set(numbers)) == len(numbers)\n", "result": "passed", "passed": true}
{"task_id": 48, "requirement": "Input-Output Conditions", "completion": "def odd_bit_set_number(n):\n    # Number of bits in integer (assuming 32-bit integer)\n    num_bits = 32\n    \n    # Set each odd-positioned bit to 1 (1-based indexing)\n    for i in range(num_bits):\n        if i % 2 == 0:  # Even index means odd position (1-based)\n            n |= (1 << i)\n    \n    return n\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0cjgbocr.py\", line 9, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "requirement": "Input-Output Conditions", "completion": "def specified_element(matrix, index=0):\n    \"\"\"\n    Extract elements at the specified index from each sublist in a 2D list.\n    \n    Args:\n        matrix (list): A 2D list/matrix\n        index (int): Index of elements to extract (defaults to 0)\n    \n    Returns:\n        list: Elements from the specified index of each sublist,\n              or empty list if input is empty\n    \"\"\"\n    if not matrix:\n        return []\n        \n    return [sublist[index] for sublist in matrix if len(sublist) > index]\n", "result": "passed", "passed": true}
{"task_id": 50, "requirement": "Input-Output Conditions", "completion": "def min_length_list(lists):\n    shortest_list = min(lists, key=lambda x: len(x))\n    return (len(shortest_list), shortest_list)\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    test_lists = [[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]\n    min_length, shortest = min_length_list(test_lists)\n    print(f\"Lists: {test_lists}\")\n    print(f\"Minimum length: {min_length}\")\n    print(f\"Shortest list: {shortest}\")\n", "result": "passed", "passed": true}
{"task_id": 52, "requirement": "Input-Output Conditions", "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n    \n    Args:\n        base (float): The length of the base of the parallelogram\n        height (float): The perpendicular height of the parallelogram\n        \n    Returns:\n        float: The area of the parallelogram\n    \"\"\"\n    if base <= 0 or height <= 0:\n        raise ValueError(\"Base and height must be positive numbers\")\n    \n    area = base * height\n    return area\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpoenwhlx8.py\", line 10, in <module>\n    assert parallelogram_area(0, 10) == 0\n  File \"/tmp/tmpoenwhlx8.py\", line 3, in parallelogram_area\n    raise ValueError(\"Base and height must be positive numbers\")\nValueError: Base and height must be positive numbers", "passed": false}
{"task_id": 53, "requirement": "Input-Output Conditions", "completion": "def check_equality(text):\n    # Check if input is a string\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Check if string is empty\n    if not text:\n        return \"Not Equal\"\n    \n    # Compare first and last characters\n    return \"Equal\" if text[0] == text[-1] else \"Not Equal\"\n", "result": "passed", "passed": true}
{"task_id": 54, "requirement": "Input-Output Conditions", "completion": "def counting_sort(arr):\n    # Input validation\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    if not arr:\n        return arr\n    if not all(isinstance(x, int) and x >= 0 for x in arr):\n        raise ValueError(\"All elements must be non-negative integers\")\n    \n    # Find maximum element\n    max_val = max(arr)\n    \n    # Create counting array (initialized with zeros)\n    count = [0] * (max_val + 1)\n    \n    # Store count of each element\n    for num in arr:\n        count[num] += 1\n    \n    # Create sorted array\n    sorted_arr = []\n    for i in range(len(count)):\n        sorted_arr.extend([i] * count[i])\n    \n    return sorted_arr\n", "result": "passed", "passed": true}
{"task_id": 57, "requirement": "Input-Output Conditions", "completion": "def find_max_num(digits, n):\n    # Input validation\n    if n <= 0 or len(digits) == 0:\n        return 0\n    \n    # Convert digits to strings and sort in descending order\n    digits_str = [str(d) for d in digits]\n    digits_str.sort(reverse=True)\n    \n    # Take first n digits and join them\n    result = ''.join(digits_str[:n])\n    \n    # Return 0 if we couldn't form n-digit number\n    return int(result) if len(result) == n else 0\n", "result": "passed", "passed": true}
{"task_id": 58, "requirement": "Input-Output Conditions", "completion": "def opposite_signs(num1, num2) -> bool:\n    \"\"\"\n    Check if two integers have opposite signs.\n    \n    Args:\n        num1: First integer\n        num2: Second integer\n        \n    Returns:\n        bool: True if numbers have opposite signs, False otherwise\n        \n    Raises:\n        TypeError: If inputs are not integers\n    \"\"\"\n    # Validate that inputs are integers\n    if not (isinstance(num1, int) and isinstance(num2, int)):\n        raise TypeError(\"Both inputs must be integers\")\n        \n    return (num1 * num2) < 0\n", "result": "passed", "passed": true}
{"task_id": 60, "requirement": "Input-Output Conditions", "completion": "def max_len_sub(arr, diff):\n    if not arr or len(arr) < 2:\n        return len(arr)\n    \n    n = len(arr)\n    # dp[i] stores the length of subsequence ending at index i\n    dp = [1] * n\n    max_length = 1\n    \n    for i in range(1, n):\n        for j in range(i):\n            # Check if difference between elements equals the given diff\n            if abs(arr[i] - arr[j]) == diff:\n                dp[i] = max(dp[i], dp[j] + 1)\n        max_length = max(max_length, dp[i])\n    \n    return max_length\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppdunar2g.py\", line 15, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nAssertionError", "passed": false}

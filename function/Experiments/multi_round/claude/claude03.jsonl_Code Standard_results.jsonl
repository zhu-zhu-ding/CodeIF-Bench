{"task_id": 11, "requirement": "Code Standard", "completion": "def remove_occ(input_string: str, target_char: str) -> str:\n    \"\"\"\n    Remove first and last occurrence of a given character from the string.\n\n    Args:\n        input_string: The input string to process.\n        target_char: The character to remove (first and last occurrence).\n\n    Returns:\n        str: Modified string with first and last occurrence of target_char removed.\n\n    Examples:\n        >>> remove_occ(\"hello\", \"l\")\n        'helo'\n        >>> remove_occ(\"banana\", \"a\")\n        'banna'\n    \"\"\"\n    # Handle empty string or character\n    if not input_string or not target_char:\n        return input_string\n\n    # Find first and last occurrence\n    first_pos = input_string.find(target_char)\n    last_pos = input_string.rfind(target_char)\n\n    # If character not found, return original string\n    if first_pos == -1:\n        return input_string\n\n    # If only one occurrence, remove it\n    if first_pos == last_pos:\n        return input_string[:first_pos] + input_string[first_pos + 1:]\n\n    # Remove both first and last occurrences\n    return (input_string[:first_pos] + \n            input_string[first_pos + 1:last_pos] + \n            input_string[last_pos + 1:])\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvac3gel9.py\", line 35, in <module>\n    check_code_style(remove_occ)\n  File \"/tmp/tmpvac3gel9.py\", line 31, in check_code_style\n    assert result.total_errors == 0, \"Code does not conform to PEP 8 standards.\"\nAssertionError: Code does not conform to PEP 8 standards.", "passed": false}
{"task_id": 12, "requirement": "Code Standard", "completion": "from typing import List\n\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Sort a matrix in ascending order based on the sum of its rows.\n\n    Args:\n        matrix: A 2D list (matrix) of integers.\n\n    Returns:\n        List[List[int]]: A new matrix with rows sorted by their sums in ascending order.\n\n    Raises:\n        ValueError: If the input matrix is empty or contains empty rows.\n    \"\"\"\n    if not matrix or not matrix[0]:\n        raise ValueError(\"Matrix cannot be empty or contain empty rows\")\n\n    return sorted(matrix, key=sum)\n", "result": "passed", "passed": true}
{"task_id": 14, "requirement": "Code Standard", "completion": "def find_volume(base: float, height: float, length: float) -> float:\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    The function follows PEP 8 standards and includes type hints.\n    Volume is calculated as: (1/2 * base * height) * length\n\n    Args:\n        base (float): The base length of the triangle\n        height (float): The height of the triangle\n        length (float): The length (depth) of the prism\n\n    Returns:\n        float: The volume of the triangular prism\n\n    Raises:\n        ValueError: If any input parameter is negative\n    \"\"\"\n    # Check for negative values\n    if any(param < 0 for param in (base, height, length)):\n        raise ValueError(\"All dimensions must be positive numbers\")\n\n    # Calculate the area of the triangle base\n    triangle_area = 0.5 * base * height\n\n    # Calculate the volume by multiplying base area with length\n    volume = triangle_area * length\n\n    return volume\n", "result": "passed", "passed": true}
{"task_id": 15, "requirement": "Code Standard", "completion": "def split_lowerstring(text: str) -> list[str]:\n    \"\"\"\n    Split a string at lowercase letters.\n\n    Args:\n        text (str): The input string to be split.\n\n    Returns:\n        list[str]: A list of substrings split at lowercase letters.\n\n    Examples:\n        >>> split_lowerstring(\"camelCase\")\n        ['c', 'amel', 'Case']\n        >>> split_lowerstring(\"helloWorld\")\n        ['h', 'ello', 'World']\n    \"\"\"\n    result = []\n    current_word = \"\"\n\n    for char in text:\n        if char.islower():\n            if current_word:\n                result.append(current_word)\n            current_word = char\n        else:\n            current_word += char\n\n    if current_word:\n        result.append(current_word)\n\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpk0pv1ayw.py\", line 14, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "requirement": "Code Standard", "completion": "import re\n\n\ndef text_lowercase_underscore(text: str) -> list[str]:\n    \"\"\"\n    Find sequences of lowercase letters joined with underscores.\n\n    Args:\n        text (str): The input text to search.\n\n    Returns:\n        list[str]: A list of matching sequences.\n\n    Example:\n        >>> text_lowercase_underscore(\"hello_world HELLO some_variable_name123\")\n        ['hello_world', 'some_variable_name']\n    \"\"\"\n    pattern = r'[a-z]+(?:_[a-z]+)*'\n    matches = re.findall(pattern, text)\n    return matches\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmprjxsc5sq.py\", line 6, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "requirement": "Code Standard", "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n    \n    Args:\n        side_length (float): Length of one side of the square\n        \n    Returns:\n        float: Perimeter of the square\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative\")\n    \n    perimeter = 4 * side_length\n    return perimeter\n", "result": "passed", "passed": true}
{"task_id": 18, "requirement": "Code Standard", "completion": "def remove_dirty_chars(source_string: str, chars_to_remove: str) -> str:\n    \"\"\"\n    Remove characters from source string that are present in chars_to_remove.\n\n    Args:\n        source_string: The input string to be cleaned.\n        chars_to_remove: String containing characters to be removed.\n\n    Returns:\n        str: A new string with specified characters removed.\n    \"\"\"\n    remove_set = set(chars_to_remove)\n    return ''.join(char for char in source_string if char not in remove_set)\n", "result": "passed", "passed": true}
{"task_id": 19, "requirement": "Code Standard", "completion": "def test_duplicate(numbers: list) -> bool:\n    \"\"\"\n    Check if a list contains any duplicate elements.\n\n    Args:\n        numbers: A list of integers to check for duplicates\n\n    Returns:\n        bool: True if duplicates exist, False otherwise\n\n    Examples:\n        >>> test_duplicate([1, 2, 3, 4, 5])\n        False\n        >>> test_duplicate([1, 2, 3, 2, 5])\n        True\n    \"\"\"\n    seen_numbers = set()\n\n    for number in numbers:\n        if number in seen_numbers:\n            return True\n        seen_numbers.add(number)\n\n    return False\n\n\nif __name__ == \"__main__\":\n    # Test cases with two spaces between functions (PEP 8)\n    test_array1 = [1, 2, 3, 4, 5]\n    test_array2 = [1, 2, 3, 2, 5]\n\n    print(f\"Array {test_array1} has duplicates: {test_duplicate(test_array1)}\")\n    print(f\"Array {test_array2} has duplicates: {test_duplicate(test_array2)}\")\n", "result": "passed", "passed": true}
{"task_id": 20, "requirement": "Code Standard", "completion": "def is_woodall(number: int) -> bool:\n    \"\"\"\n    Check if a given number is a Woodall number.\n    \n    A Woodall number follows the formula: n \u00d7 2^n - 1, where n is a natural number.\n    The first few Woodall numbers are: 1, 7, 23, 63, 159, 383, ...\n    \n    Args:\n        number: An integer to check\n        \n    Returns:\n        bool: True if the number is a Woodall number, False otherwise\n    \n    Examples:\n        >>> is_woodall(7)\n        True\n        >>> is_woodall(10)\n        False\n    \"\"\"\n    if not isinstance(number, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    if number < 1:\n        return False\n    \n    n = 1\n    while True:\n        woodall = n * (1 << n) - 1  # Using bit shift for better performance\n        if woodall == number:\n            return True\n        if woodall > number:\n            return False\n        n += 1\n", "result": "passed", "passed": true}
{"task_id": 21, "requirement": "Code Standard", "completion": "def multiples_of_num(number: int, count: int) -> list[int]:\n    \"\"\"\n    Find specified number of multiples for a given number.\n\n    Args:\n        number (int): The number to find multiples of\n        count (int): The number of multiples to find\n\n    Returns:\n        list[int]: A list containing count multiples of number\n\n    Raises:\n        ValueError: If count is less than 1\n        TypeError: If inputs are not integers\n    \"\"\"\n    if not isinstance(number, int) or not isinstance(count, int):\n        raise TypeError(\"Both inputs must be integers\")\n    \n    if count < 1:\n        raise ValueError(\"Count must be a positive integer\")\n\n    return [number * i for i in range(1, count + 1)]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpcbob26o5.py\", line 7, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "requirement": "Code Standard", "completion": "def find_first_duplicate(arr: list) -> int:\n    \"\"\"\n    Find the first duplicate element in an array of integers.\n\n    Args:\n        arr: List of integers to check for duplicates.\n\n    Returns:\n        int: First duplicate element found, or -1 if no duplicates exist.\n\n    Examples:\n        >>> find_first_duplicate([1, 2, 3, 2, 4])\n        2\n        >>> find_first_duplicate([1, 2, 3, 4])\n        -1\n    \"\"\"\n    seen = set()\n    \n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n        \n    return -1\n", "result": "passed", "passed": true}
{"task_id": 23, "requirement": "Code Standard", "completion": "def maximum_sum(list_of_lists: list) -> int:\n    \"\"\"\n    Calculate the maximum sum of elements from a list of lists.\n\n    Args:\n        list_of_lists: A list containing sublists of numbers.\n\n    Returns:\n        int: The maximum sum found among all sublists.\n        Returns 0 if the input list is empty.\n\n    Examples:\n        >>> maximum_sum([[1, 2, 3], [4, 5, -1], [1, 1, 1]])\n        8\n        >>> maximum_sum([])\n        0\n    \"\"\"\n    if not list_of_lists:\n        return 0\n\n    return max(sum(sublist) for sublist in list_of_lists)\n", "result": "passed", "passed": true}
{"task_id": 24, "requirement": "Code Standard", "completion": "def binary_to_decimal(binary_str: str) -> int:\n    \"\"\"\n    Convert a binary string to its decimal equivalent.\n\n    Args:\n        binary_str: A string containing binary digits (0s and 1s)\n\n    Returns:\n        int: The decimal equivalent of the binary number\n        \n    Raises:\n        ValueError: If the input contains non-binary digits\n    \"\"\"\n    try:\n        # Validate input is a string of 0s and 1s\n        if not all(digit in '01' for digit in binary_str):\n            raise ValueError(\"Input must contain only 0s and 1s\")\n\n        decimal_value = 0\n        power = 0\n\n        # Iterate through binary digits from right to left\n        for digit in reversed(binary_str):\n            decimal_value += int(digit) * (2 ** power)\n            power += 1\n\n        return decimal_value\n\n    except ValueError as e:\n        raise ValueError(f\"Invalid binary number: {e}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpisbxkk06.py\", line 15, in <module>\n    assert binary_to_decimal(100) == 4\n  File \"/tmp/tmpisbxkk06.py\", line 4, in binary_to_decimal\n    if not all(digit in '01' for digit in binary_str):\nTypeError: 'int' object is not iterable", "passed": false}
{"task_id": 25, "requirement": "Code Standard", "completion": "def find_product(input_array: list) -> int:\n    \"\"\"\n    Calculate the product of non-repeated elements in the given array.\n\n    Args:\n        input_array: A list of numbers\n\n    Returns:\n        int: Product of all unique elements in the array\n\n    Examples:\n        >>> find_product([1, 2, 3, 2, 4])\n        24\n        >>> find_product([1, 1, 1, 1])\n        1\n    \"\"\"\n    if not input_array:\n        return 0\n    \n    unique_elements = set(input_array)\n    product = 1\n    \n    for number in unique_elements:\n        product *= number\n    \n    return product\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9hkabc0o.py\", line 9, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "requirement": "Code Standard", "completion": "def check_k_elements(tuple_list: list, k: int) -> bool:\n    \"\"\"\n    Check if a list of tuples contains all elements from 0 to k-1.\n\n    Args:\n        tuple_list: A list of tuples containing integers\n        k: The number of elements to check for (0 to k-1)\n\n    Returns:\n        bool: True if all elements from 0 to k-1 are present, False otherwise\n    \"\"\"\n    # Convert tuple list elements into a flat set for efficient lookup\n    elements = set()\n    for tup in tuple_list:\n        elements.update(tup)\n    \n    # Check if all numbers from 0 to k-1 are present\n    required_elements = set(range(k))\n    return elements == required_elements\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpj0aoia3x.py\", line 9, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "requirement": "Code Standard", "completion": "from typing import List\n\n\ndef remove_digits(string_list: List[str]) -> List[str]:\n    \"\"\"\n    Remove all digits from each string in the provided list.\n\n    Args:\n        string_list: A list of strings that may contain digits.\n\n    Returns:\n        A new list of strings with all digits removed.\n\n    Example:\n        >>> remove_digits([\"hello123\", \"abc456def\"])\n        ['hello', 'abcdef']\n    \"\"\"\n    return [''.join(char for char in s if not char.isdigit()) for s in string_list]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0dj31wjy.py\", line 4, in <module>\n    assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\nNameError: name 'remove' is not defined", "passed": false}
{"task_id": 28, "requirement": "Code Standard", "completion": "def binomial_coeff(n: int, k: int) -> int:\n    \"\"\"\n    Calculate the binomial coefficient C(n,k).\n\n    The function computes the binomial coefficient which represents the number\n    of ways to choose k items from n items without regard to order.\n\n    Args:\n        n (int): Total number of items (must be non-negative)\n        k (int): Number of items to choose (must be non-negative and <= n)\n\n    Returns:\n        int: The binomial coefficient value\n\n    Raises:\n        ValueError: If n < 0 or k < 0 or k > n\n\n    Examples:\n        >>> binomial_coeff(5, 2)\n        10\n        >>> binomial_coeff(10, 3)\n        120\n    \"\"\"\n    # Input validation\n    if n < 0 or k < 0 or k > n:\n        raise ValueError(\"Invalid input: Require n >= 0, k >= 0, and k <= n\")\n\n    # Optimize by using the smaller value of k or n-k\n    k = min(k, n - k)\n\n    # Base cases\n    if k == 0:\n        return 1\n    if k == 1:\n        return n\n\n    # Calculate using multiplicative formula\n    result = 1\n    for i in range(k):\n        result *= (n - i)\n        result //= (i + 1)\n\n    return result\n", "result": "passed", "passed": true}
{"task_id": 29, "requirement": "Code Standard", "completion": "from typing import List\n\n\ndef get_odd_occurrence(numbers: List[int]) -> int:\n    \"\"\"\n    Find the element that appears an odd number of times in the list.\n\n    Args:\n        numbers: A list of integers where all elements appear an even number\n                of times except for one element.\n\n    Returns:\n        int: The element that appears an odd number of times.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Example:\n        >>> get_odd_occurrence([1, 2, 3, 2, 3, 1, 3])\n        3\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"Input list cannot be empty\")\n\n    result = 0\n    for number in numbers:\n        result ^= number\n    \n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpsrv0wux7.py\", line 9, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "requirement": "Code Standard", "completion": "def count_substring_with_equal_ends(input_string: str) -> int:\n    \"\"\"\n    Count all substrings that start and end with the same character.\n\n    Args:\n        input_string (str): The input string to analyze.\n\n    Returns:\n        int: The count of substrings with matching first and last characters.\n\n    Examples:\n        >>> count_substring_with_equal_ends(\"abcab\")\n        7\n        >>> count_substring_with_equal_ends(\"aba\")\n        4\n    \"\"\"\n    if not input_string:\n        return 0\n\n    string_length = len(input_string)\n    substring_count = 0\n\n    for start_pos in range(string_length):\n        for end_pos in range(start_pos, string_length):\n            if input_string[start_pos] == input_string[end_pos]:\n                substring_count += 1\n\n    return substring_count\n", "result": "passed", "passed": true}
{"task_id": 31, "requirement": "Code Standard", "completion": "from heapq import heappush, heappop\nfrom collections import Counter\nfrom typing import List\n\n\ndef func(nums: List[int], k: int) -> List[int]:\n    \"\"\"\n    Find the top k most frequent integers in the given list.\n\n    Args:\n        nums: A list of integers\n        k: Number of top frequent elements to return\n\n    Returns:\n        List of k most frequent integers in descending order of frequency\n    \"\"\"\n    if not nums or k <= 0:\n        return []\n\n    # Count frequency of each number\n    freq_counter = Counter(nums)\n    \n    # Create min heap to maintain top k elements\n    heap = []\n    \n    for num, freq in freq_counter.items():\n        heappush(heap, (freq, num))\n        if len(heap) > k:\n            heappop(heap)\n    \n    # Extract the k most frequent elements\n    result = []\n    while heap:\n        freq, num = heappop(heap)\n        result.append(num)\n    \n    return result[::-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7tbahurf.py\", line 21, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n  File \"/tmp/tmp7tbahurf.py\", line 8, in func\n    freq_counter = Counter(nums)\n  File \"/home/liminxiao/miniconda3/envs/DevEval/lib/python3.9/collections/__init__.py\", line 593, in __init__\n    self.update(iterable, **kwds)\n  File \"/home/liminxiao/miniconda3/envs/DevEval/lib/python3.9/collections/__init__.py\", line 679, in update\n    _count_elements(self, iterable)\nTypeError: unhashable type: 'list'", "passed": false}
{"task_id": 32, "requirement": "Code Standard", "completion": "def max_prime_factors(number: int) -> int:\n    \"\"\"\n    Find the largest prime factor of a given number.\n\n    Args:\n        number: A positive integer to find its largest prime factor.\n\n    Returns:\n        int: The largest prime factor of the input number.\n             Returns -1 if no prime factors are found (for input 1).\n\n    Raises:\n        ValueError: If the input is less than 1.\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Input must be a positive integer\")\n\n    largest_prime = -1\n    \n    # Handle division by 2 separately to simplify the loop\n    while number % 2 == 0:\n        largest_prime = 2\n        number = number // 2\n    \n    # Check odd numbers up to sqrt(number)\n    for factor in range(3, int(number ** 0.5) + 1, 2):\n        while number % factor == 0:\n            largest_prime = factor\n            number = number // factor\n    \n    # If number is still greater than 2, it's prime itself\n    if number > 2:\n        largest_prime = number\n    \n    return largest_prime\n", "result": "passed", "passed": true}
{"task_id": 33, "requirement": "Code Standard", "completion": "def decimal_to_binary(decimal_num: int) -> str:\n    \"\"\"\n    Convert a decimal number to its binary representation.\n\n    Args:\n        decimal_num (int): The decimal number to convert.\n\n    Returns:\n        str: The binary representation of the input number.\n\n    Examples:\n        >>> decimal_to_binary(10)\n        '1010'\n        >>> decimal_to_binary(-10)\n        '-1010'\n        >>> decimal_to_binary(0)\n        '0'\n    \"\"\"\n    if decimal_num == 0:\n        return \"0\"\n\n    # Handle negative numbers\n    is_negative = decimal_num < 0\n    decimal_num = abs(decimal_num)\n\n    binary = \"\"\n    while decimal_num > 0:\n        binary = str(decimal_num % 2) + binary\n        decimal_num //= 2\n\n    return \"-\" + binary if is_negative else binary\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpggzccp4p.py\", line 12, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "requirement": "Code Standard", "completion": "def find_missing(sorted_array: list[int]) -> int | None:\n    \"\"\"\n    Find the missing number in a sorted array of integers.\n\n    Args:\n        sorted_array: A sorted list of integers\n\n    Returns:\n        The missing integer in the sequence, or None if no number is missing\n    \"\"\"\n    if not sorted_array:\n        return None\n\n    n = len(sorted_array)\n    \n    # For single element array, no missing number can be determined\n    if n < 2:\n        return None\n    \n    # Check if array is properly sorted and consecutive\n    for i in range(n - 1):\n        current_num = sorted_array[i]\n        next_num = sorted_array[i + 1]\n        \n        # If difference is greater than 1, we found our missing number\n        if next_num - current_num > 1:\n            return current_num + 1\n            \n    return None\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpko0sii7n.py\", line 1, in <module>\n    def find_missing(sorted_array: list[int]) -> int | None:\nTypeError: unsupported operand type(s) for |: 'type' and 'NoneType'", "passed": false}
{"task_id": 35, "requirement": "Code Standard", "completion": "def find_rect_num(n: int) -> int:\n    \"\"\"\n    Find the n-th rectangular number.\n    \n    Args:\n        n (int): The position of the rectangular number to find (n > 0)\n    \n    Returns:\n        int: The n-th rectangular number\n    \n    Raises:\n        ValueError: If n is less than or equal to 0\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return n * (n + 1)\n", "result": "passed", "passed": true}
{"task_id": 36, "requirement": "Code Standard", "completion": "def find_nth_digit(numerator: int, denominator: int, n: int) -> str:\n    \"\"\"\n    Find the nth digit in the decimal representation of numerator/denominator.\n\n    Args:\n        numerator: The number being divided.\n        denominator: The number to divide by.\n        n: Position of the digit to find (0 = before decimal, 1 = first after decimal).\n\n    Returns:\n        str: The digit at the specified position.\n\n    Raises:\n        ValueError: If denominator is zero.\n    \"\"\"\n    if denominator == 0:\n        raise ValueError(\"Denominator cannot be zero\")\n\n    # Handle negative numbers\n    if numerator * denominator < 0:\n        return \"-\" + find_nth_digit(abs(numerator), abs(denominator), n)\n\n    numerator = abs(numerator)\n    denominator = abs(denominator)\n\n    # Get the decimal digits\n    quotient = numerator // denominator\n    remainder = numerator % denominator\n\n    # If n is 0, return the digit before decimal point\n    if n == 0:\n        return str(quotient)[-1]\n\n    # Calculate decimal digits\n    decimal_digits = \"\"\n    remainders = {}\n    position = 0\n\n    while remainder != 0 and position < n + 1:\n        if remainder in remainders:\n            break\n\n        remainders[remainder] = position\n        remainder *= 10\n        decimal_digits += str(remainder // denominator)\n        remainder %= denominator\n        position += 1\n\n    return decimal_digits[n - 1] if n <= len(decimal_digits) else \"0\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpy6bob80y.py\", line 28, in <module>\n    assert find_nth_digit(1,2,1) == 5\nAssertionError", "passed": false}
{"task_id": 37, "requirement": "Code Standard", "completion": "def sort_mixed_list(mixed_list: list) -> list:\n    \"\"\"\n    Sort a mixed list of integers and strings.\n    \n    Args:\n        mixed_list: A list containing integers and strings\n        \n    Returns:\n        list: A sorted list with integers followed by strings\n        \n    Example:\n        >>> sort_mixed_list([4, \"apple\", 1, \"zebra\"])\n        [1, 4, \"apple\", \"zebra\"]\n    \"\"\"\n    # Separate integers and strings\n    integers = [x for x in mixed_list if isinstance(x, int)]\n    strings = [x for x in mixed_list if isinstance(x, str)]\n    \n    # Sort each list separately\n    integers.sort()\n    strings.sort()\n    \n    return integers + strings\n", "result": "passed", "passed": true}
{"task_id": 38, "requirement": "Code Standard", "completion": "def div_even_odd(numbers: list) -> float:\n    \"\"\"\n    Find the division of first even number by first odd number in a given list.\n\n    Args:\n        numbers: A list of integers\n\n    Returns:\n        float: Result of dividing first even number by first odd number\n        str: Error message if either even or odd number is not found\n\n    Raises:\n        ZeroDivisionError: If first odd number is zero\n        TypeError: If input is not a list or contains non-numeric values\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list\")\n\n    first_even = None\n    first_odd = None\n\n    for num in numbers:\n        if not isinstance(num, (int, float)):\n            raise TypeError(\"List must contain numeric values only\")\n            \n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n\n    if first_even is None or first_odd is None:\n        return \"Cannot perform division: missing even or odd number\"\n\n    if first_odd == 0:\n        raise ZeroDivisionError(\"Cannot divide by zero\")\n\n    return first_even / first_odd\n", "result": "passed", "passed": true}
{"task_id": 39, "requirement": "Code Standard", "completion": "from collections import Counter\nimport heapq\nfrom typing import List\n\n\ndef rearrange_string(input_str: str) -> str:\n    \"\"\"\n    Rearrange characters in a string so that adjacent characters are different.\n\n    Args:\n        input_str: Input string to be rearranged.\n\n    Returns:\n        str: Rearranged string where no two adjacent characters are same.\n             Returns empty string if such arrangement is not possible.\n\n    Example:\n        >>> rearrange_string(\"aab\")\n        \"aba\"\n        >>> rearrange_string(\"aaab\")\n        \"\"\n    \"\"\"\n    # Count frequency of each character\n    char_count = Counter(input_str)\n    \n    # Create a max heap (using negative counts since heapq is min heap)\n    max_heap = [(-count, char) for char, count in char_count.items()]\n    heapq.heapify(max_heap)\n    \n    result: List[str] = []\n    prev_count, prev_char = 0, ''\n    \n    while max_heap:\n        # Get the character with highest frequency\n        current_count, current_char = heapq.heappop(max_heap)\n        result.append(current_char)\n        \n        # If we had a previous character waiting, add it back to heap\n        if prev_count < 0:\n            heapq.heappush(max_heap, (prev_count, prev_char))\n            \n        # Update previous character info\n        prev_count, prev_char = current_count + 1, current_char\n        \n    final_string = ''.join(result)\n    return final_string if len(final_string) == len(input_str) else ''\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpcwwgg6d1.py\", line 23, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "requirement": "Code Standard", "completion": "from collections import Counter\nfrom itertools import chain\n\n\ndef freq_element(list_of_lists):\n    \"\"\"\n    Find the frequency of elements in a list of lists.\n\n    Args:\n        list_of_lists (list): A list containing nested lists with elements\n\n    Returns:\n        dict: A dictionary with elements as keys and their frequencies as values\n\n    Raises:\n        TypeError: If input is not a list of lists\n    \"\"\"\n    # Input validation\n    if not isinstance(list_of_lists, list):\n        raise TypeError(\"Input must be a list\")\n    \n    if not all(isinstance(sublist, list) for sublist in list_of_lists):\n        raise TypeError(\"Input must be a list of lists\")\n\n    # Flatten the list of lists and count elements using Counter\n    flat_list = list(chain.from_iterable(list_of_lists))\n    frequency = Counter(flat_list)\n    \n    return dict(frequency)\n\n\nif __name__ == \"__main__\":\n    # Test cases\n    test_list = [[1, 2, 3], [4, 2, 3], [1, 2]]\n    result = freq_element(test_list)\n    print(result)  # Output: {1: 2, 2: 3, 3: 2, 4: 1}\n", "result": "passed", "passed": true}
{"task_id": 41, "requirement": "Code Standard", "completion": "def filter_even_numbers(numbers):\n    \"\"\"\n    Filter even numbers from the input sequence using a lambda function.\n\n    Args:\n        numbers: An iterable containing numbers\n\n    Returns:\n        list: A list containing only the even numbers from the input\n    \"\"\"\n    return list(filter(lambda x: x % 2 == 0, numbers))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpfof6txgm.py\", line 3, in <module>\n    assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\nNameError: name 'filter_evennumbers' is not defined", "passed": false}
{"task_id": 42, "requirement": "Code Standard", "completion": "def find_sum(array: list) -> int:\n    \"\"\"\n    Find the sum of all repeated elements in an array.\n\n    Args:\n        array: List of numbers to check for repetitions.\n\n    Returns:\n        int: Sum of all elements that appear more than once.\n\n    Examples:\n        >>> find_sum([1, 2, 3, 2, 4, 5, 5])\n        7\n        >>> find_sum([1, 2, 3, 4])\n        0\n    \"\"\"\n    frequency = {}\n    \n    # Count frequency of each element\n    for number in array:\n        frequency[number] = frequency.get(number, 0) + 1\n    \n    # Calculate sum of repeated elements\n    repeated_sum = sum(\n        number \n        for number, count in frequency.items() \n        if count > 1\n    )\n    \n    return repeated_sum\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpnlrucycr.py\", line 13, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Code Standard", "completion": "import re\n\n\ndef text_match(text: str) -> bool:\n    \"\"\"\n    Find sequences of lowercase letters joined with an underscore.\n\n    Args:\n        text (str): The input string to check.\n\n    Returns:\n        bool: True if the string matches the pattern, False otherwise.\n\n    Example:\n        >>> text_match(\"hello_world\")\n        True\n        >>> text_match(\"Hello_World\")\n        False\n    \"\"\"\n    pattern = r'^[a-z]+_[a-z]+$'\n    return bool(re.search(pattern, text))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpj13q1c3e.py\", line 5, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 44, "requirement": "Code Standard", "completion": "import re\n\n\ndef text_match_string(text: str) -> bool:\n    \"\"\"Match a word at the beginning of a string.\n\n    This function checks if the input string starts with a word character sequence\n    following PEP 8 style guidelines.\n\n    Args:\n        text: The input string to check.\n\n    Returns:\n        bool: True if string starts with a word, False otherwise.\n\n    Examples:\n        >>> text_match_string(\"Hello World\")\n        True\n        >>> text_match_string(\"123 Hello\")\n        False\n    \"\"\"\n    pattern = r'^[A-Za-z]+'\n    return bool(re.match(pattern, text))\n\n\n# Example usage\nif __name__ == '__main__':\n    print(text_match_string(\"Hello World\"))  # True\n    print(text_match_string(\"123 Hello\"))    # False\n    print(text_match_string(\" Hello\"))       # False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpybjpdw9u.py\", line 23, in <module>\n    assert text_match_string(\" python\")==('Not matched!')\nAssertionError", "passed": false}
{"task_id": 45, "requirement": "Code Standard", "completion": "def get_gcd(numbers: list) -> int:\n    \"\"\"\n    Calculate the Greatest Common Divisor (GCD) of a list of numbers.\n\n    Args:\n        numbers: A list of integers.\n\n    Returns:\n        int: The GCD of all numbers in the list.\n        None: If the input list is empty.\n\n    Examples:\n        >>> get_gcd([24, 36, 48])\n        12\n        >>> get_gcd([2, 4, 6, 8])\n        2\n    \"\"\"\n    from math import gcd\n    from functools import reduce\n\n    if not numbers:\n        return None\n\n    # Handle negative numbers by using absolute values\n    positive_numbers = [abs(num) for num in numbers]\n    \n    # Reduce applies gcd function pairwise to the array elements\n    return reduce(gcd, positive_numbers)\n", "result": "passed", "passed": true}
{"task_id": 46, "requirement": "Code Standard", "completion": "def test_distinct(sequence: list) -> bool:\n    \"\"\"\n    Determine whether all numbers in the sequence are different from each other.\n\n    Args:\n        sequence: A list of numbers to check for uniqueness\n\n    Returns:\n        bool: True if all numbers are distinct, False otherwise\n\n    Examples:\n        >>> test_distinct([1, 2, 3, 4])\n        True\n        >>> test_distinct([1, 2, 2, 3])\n        False\n    \"\"\"\n    if not sequence:\n        return True\n    \n    return len(set(sequence)) == len(sequence)\n", "result": "passed", "passed": true}
{"task_id": 48, "requirement": "Code Standard", "completion": "def odd_bit_set_number(number: int) -> int:\n    \"\"\"\n    Set all odd bits of a given number.\n    \n    Args:\n        number: An integer whose odd bits need to be set.\n        \n    Returns:\n        int: Number with all odd bits set to 1.\n    \n    Example:\n        >>> odd_bit_set_number(5)\n        2147483653\n    \"\"\"\n    # Create a mask with all odd bits set (1,3,5,7...)\n    # In binary: ...1010101\n    mask = 0xAAAAAAAA\n    \n    # Perform OR operation to set all odd bits\n    result = number | mask\n    \n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvrt7hlmn.py\", line 8, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "requirement": "Code Standard", "completion": "def specified_element(matrix: list, position: int = 0) -> list:\n    \"\"\"\n    Extract elements from a specified position in each sublist of a 2D list.\n\n    Args:\n        matrix: A two-dimensional list containing sublists of elements\n        position: Index position of elements to extract (defaults to 0)\n\n    Returns:\n        A list containing elements from the specified position of each sublist\n\n    Examples:\n        >>> matrix = [[1, 2, 3], [4, 5, 6]]\n        >>> specified_element(matrix)\n        [1, 4]\n        >>> specified_element(matrix, 1)\n        [2, 5]\n    \"\"\"\n    result = []\n    \n    if not matrix:\n        return result\n    \n    for sublist in matrix:\n        if isinstance(sublist, list) and len(sublist) > position:\n            result.append(sublist[position])\n            \n    return result\n", "result": "passed", "passed": true}
{"task_id": 51, "requirement": "Code Standard", "completion": "def check_equilateral(side1: float, side2: float, side3: float) -> str:\n    \"\"\"\n    Check if a triangle is equilateral based on its three sides.\n\n    Args:\n        side1 (float): Length of first side\n        side2 (float): Length of second side\n        side3 (float): Length of third side\n\n    Returns:\n        str: Message indicating whether the triangle is equilateral or not\n    \"\"\"\n    if side1 <= 0 or side2 <= 0 or side3 <= 0:\n        return \"Invalid input: sides must be positive numbers\"\n\n    if side1 == side2 == side3:\n        return \"This is an equilateral triangle\"\n    \n    return \"This is not an equilateral triangle\"\n\n\n# Example usage\nif __name__ == \"__main__\":\n    print(check_equilateral(5, 5, 5))      # Equilateral\n    print(check_equilateral(5, 4, 5))      # Not equilateral\n    print(check_equilateral(-1, 5, 5))     # Invalid input\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0qphq2cd.py\", line 12, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "requirement": "Code Standard", "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n    \n    Args:\n        base (float): The length of the base of the parallelogram\n        height (float): The perpendicular height of the parallelogram\n        \n    Returns:\n        float: The area of the parallelogram\n    \"\"\"\n    if base <= 0 or height <= 0:\n        raise ValueError(\"Base and height must be positive numbers\")\n    \n    area = base * height\n    return area\n", "result": "passed", "passed": true}
{"task_id": 53, "requirement": "Code Standard", "completion": "def check_equality(text: str) -> bool:\n    \"\"\"\n    Check if the first and last characters of a string are equal.\n\n    Args:\n        text (str): The input string to check.\n\n    Returns:\n        bool: True if first and last characters are equal (case-insensitive),\n              False otherwise or if string is empty.\n\n    Examples:\n        >>> check_equality(\"Python\")\n        False\n        >>> check_equality(\"level\")\n        True\n    \"\"\"\n    if not text:\n        return False\n    \n    return text[0].lower() == text[-1].lower()\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1tq9tt5h.py\", line 5, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 54, "requirement": "Code Standard", "completion": "def counting_sort(array: list) -> list:\n    \"\"\"\n    Sort a list of integers using the counting sort algorithm.\n\n    Args:\n        array: A list of integers to be sorted.\n\n    Returns:\n        list: The sorted list.\n\n    Examples:\n        >>> counting_sort([4, 2, 2, 8, 3, 3, 1])\n        [1, 2, 2, 3, 3, 4, 8]\n    \"\"\"\n    if not array:\n        return array\n\n    # Find the range of input array\n    max_value = max(array)\n    min_value = min(array)\n    range_of_elements = max_value - min_value + 1\n\n    # Initialize counting array with zeros\n    count_array = [0] * range_of_elements\n\n    # Count occurrences of each element\n    for num in array:\n        count_array[num - min_value] += 1\n\n    # Calculate cumulative counts\n    for i in range(1, len(count_array)):\n        count_array[i] += count_array[i - 1]\n\n    # Build the output array\n    output_array = [0] * len(array)\n    for num in reversed(array):\n        position = count_array[num - min_value] - 1\n        output_array[position] = num\n        count_array[num - min_value] -= 1\n\n    return output_array\n", "result": "passed", "passed": true}
{"task_id": 55, "requirement": "Code Standard", "completion": "def tn_gp(first_term: float, ratio: float, position: int) -> float:\n    \"\"\"\n    Calculate the nth term of a geometric progression.\n\n    Args:\n        first_term (float): The first term of the geometric progression\n        ratio (float): The common ratio between consecutive terms\n        position (int): The position of the term to find (must be positive)\n\n    Returns:\n        float: The nth term of the geometric progression\n\n    Raises:\n        ValueError: If position is less than 1\n        TypeError: If inputs are of incorrect type\n    \"\"\"\n    if not isinstance(position, int):\n        raise TypeError(\"Position must be an integer\")\n    if not isinstance(first_term, (int, float)) or not isinstance(ratio, (int, float)):\n        raise TypeError(\"First term and ratio must be numbers\")\n    if position < 1:\n        raise ValueError(\"Position must be a positive integer\")\n\n    return first_term * (ratio ** (position - 1))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpuvx3cwms.py\", line 9, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "requirement": "Code Standard", "completion": "def check_twice_reverse(number: int) -> bool:\n    \"\"\"\n    Check if a number is one less than twice its reverse.\n\n    Args:\n        number: An integer to check\n\n    Returns:\n        bool: True if the number is one less than twice its reverse, False otherwise\n    \"\"\"\n    # Convert number to string to easily reverse it\n    number_str = str(number)\n    # Reverse the string and convert back to integer\n    reversed_number = int(number_str[::-1])\n    \n    # Check if number is one less than twice its reverse\n    return number == (2 * reversed_number - 1)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0u0z17mx.py\", line 8, in <module>\n    assert check(70) == False\nNameError: name 'check' is not defined", "passed": false}
{"task_id": 57, "requirement": "Code Standard", "completion": "def find_max_num(digits: list) -> int:\n    \"\"\"\n    Find the largest number that can be formed from a list of digits.\n\n    Args:\n        digits: A list of integers representing individual digits.\n\n    Returns:\n        int: The largest possible number formed from the given digits.\n\n    Raises:\n        ValueError: If the input list is empty or contains non-digit numbers.\n    \"\"\"\n    # Input validation\n    if not digits:\n        raise ValueError(\"Input list cannot be empty\")\n    \n    if not all(isinstance(d, int) and 0 <= d <= 9 for d in digits):\n        raise ValueError(\"All elements must be single digits (0-9)\")\n\n    # Convert digits to strings and sort in descending order\n    digits_str = [str(d) for d in digits]\n    digits_str.sort(reverse=True)\n    \n    # Join the sorted digits to form the largest number\n    return int(''.join(digits_str))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpet67_ija.py\", line 12, in <module>\n    assert find_max_num([1,2,3],3) == 321\nTypeError: find_max_num() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 58, "requirement": "Code Standard", "completion": "def opposite_signs(num1: int, num2: int) -> bool:\n    \"\"\"\n    Check if two integers have opposite signs.\n    \n    Args:\n        num1 (int): First integer\n        num2 (int): Second integer\n        \n    Returns:\n        bool: True if numbers have opposite signs, False otherwise\n    \"\"\"\n    return (num1 * num2) < 0\n", "result": "passed", "passed": true}
{"task_id": 59, "requirement": "Code Standard", "completion": "def is_octagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth octagonal number.\n\n    PEP 8 compliant function that returns the nth octagonal number using\n    the formula: n(3n - 2)\n\n    Args:\n        n: A positive integer representing the position of the octagonal number\n\n    Returns:\n        The nth octagonal number\n\n    Raises:\n        ValueError: If n is not a positive integer\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n\n    return n * (3 * n - 2)\n", "result": "passed", "passed": true}
{"task_id": 60, "requirement": "Code Standard", "completion": "def max_len_sub(sequence: list) -> int:\n    \"\"\"\n    Find the maximum length of subsequence with difference 1 between adjacent elements.\n\n    Args:\n        sequence (list): Input list of integers\n\n    Returns:\n        int: Length of the longest valid subsequence\n\n    Examples:\n        >>> max_len_sub([1, 2, 3, 4, 5])\n        5\n        >>> max_len_sub([1, 3, 2, 4])\n        3\n    \"\"\"\n    if not sequence or len(sequence) < 2:\n        return len(sequence)\n    \n    sequence_length = len(sequence)\n    # dp[i] stores the length of subsequence ending at index i\n    dp = [1] * sequence_length\n    max_length = 1\n    \n    for current_pos in range(1, sequence_length):\n        for prev_pos in range(current_pos):\n            # Check if current element can be added to subsequence\n            if abs(sequence[current_pos] - sequence[prev_pos]) == 1:\n                dp[current_pos] = max(\n                    dp[current_pos],\n                    dp[prev_pos] + 1\n                )\n        max_length = max(max_length, dp[current_pos])\n    \n    return max_length\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_m5_x8o6.py\", line 18, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}

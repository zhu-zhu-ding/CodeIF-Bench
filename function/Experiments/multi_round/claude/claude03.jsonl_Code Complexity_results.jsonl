{"task_id": 11, "requirement": "Code Complexity", "completion": "def remove_occ(string, char):\n    if not string or not char:\n        return string\n        \n    # Convert string to list for easier manipulation\n    chars = list(string)\n    \n    # Remove first and last occurrences in a single pass\n    for i in range(len(chars)):\n        if chars[i] == char:\n            chars[i] = ''\n            break\n            \n    for i in range(len(chars)-1, -1, -1):\n        if chars[i] == char:\n            chars[i] = ''\n            break\n            \n    return ''.join(chars)\n", "result": "passed", "passed": true}
{"task_id": 14, "requirement": "Code Complexity", "completion": "def find_volume(base, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism with cyclomatic complexity of 1.\n    \n    Formula: Volume = (1/2 * base * height) * length\n    \n    Args:\n        base (float): The base length of the triangle\n        height (float): The height of the triangle\n        length (float): The length (depth) of the prism\n    \n    Returns:\n        float: The volume of the triangular prism\n    \n    Complexity:\n        Cyclomatic complexity: 1 (single path of execution)\n    \"\"\"\n    return 0.5 * base * height * length\n", "result": "passed", "passed": true}
{"task_id": 15, "requirement": "Code Complexity", "completion": "def split_lowerstring(text):\n    return [part for part in ''.join(f' {c}' if c.islower() else c for c in text).strip().split()]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpv5hhb2qp.py\", line 3, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "requirement": "Code Complexity", "completion": "import re\n\ndef text_lowercase_underscore(text):\n    return re.findall(r'[a-z]+(?:_[a-z]+)*', text)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxfr1pnnx.py\", line 4, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "requirement": "Code Complexity", "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n    \n    Args:\n        side_length (float): Length of one side of the square (must be non-negative)\n        \n    Returns:\n        float: Perimeter of the square\n    \"\"\"\n    perimeter = 4 * side_length\n    return perimeter\n", "result": "passed", "passed": true}
{"task_id": 20, "requirement": "Code Complexity", "completion": "def is_woodall(num):\n    \"\"\"\n    Check if a given number is a Woodall number using a functional approach.\n    A Woodall number follows the formula: n \u00d7 2^n - 1, where n is a natural number.\n    \n    Args:\n        num (int): The number to check\n        \n    Returns:\n        bool: True if the number is a Woodall number, False otherwise\n    \"\"\"\n    # Calculate Woodall numbers up to a reasonable limit based on the input\n    max_n = len(bin(num)) - 1  # Efficient upper bound based on binary length\n    woodall_numbers = {n * (2 ** n) - 1 for n in range(1, max_n + 1)}\n    return num in woodall_numbers\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6xvo01_b.py\", line 11, in <module>\n    assert cc_visit(inspect.getsource(is_woodall))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 21, "requirement": "Code Complexity", "completion": "def multiples_of_num(n, m):\n    \"\"\"\n    Find m multiples of number n.\n    Cyclomatic complexity = 1 (single path through function)\n    \n    Args:\n        n (int): The number to find multiples of\n        m (int): The number of multiples to find\n    \n    Returns:\n        list: A list containing m multiples of n\n    \"\"\"\n    return [n * i for i in range(1, m + 1)]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpk6cfyvao.py\", line 3, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 24, "requirement": "Code Complexity", "completion": "def binary_to_decimal(binary):\n    decimal = 0\n    power = 0\n    \n    # Process each digit from right to left\n    for digit in reversed(str(binary)):\n        decimal += int(digit) * (2 ** power)\n        power += 1\n        \n    return decimal\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpn_sfc4w5.py\", line 14, in <module>\n    assert cc_visit(inspect.getsource(binary_to_decimal))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 32, "requirement": "Code Complexity", "completion": "def max_prime_factors(n):\n    if n < 2:\n        return -1\n        \n    def next_factor(num):\n        if num % 2 == 0:\n            return 2\n        \n        for i in range(3, int(num ** 0.5) + 1, 2):\n            if num % i == 0:\n                return i\n        return num\n    \n    largest_prime = -1\n    while n > 1:\n        factor = next_factor(n)\n        largest_prime = max(largest_prime, factor)\n        n //= factor\n        \n    return largest_prime\n", "result": "passed", "passed": true}
{"task_id": 33, "requirement": "Code Complexity", "completion": "def decimal_to_binary(decimal_num):\n    return bin(decimal_num)[2:]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplmcv6zzc.py\", line 3, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 35, "requirement": "Code Complexity", "completion": "def find_rect_num(n: int) -> int:\n    \"\"\"\n    Find the n-th rectangular number.\n    \n    Args:\n        n (int): The position of the rectangular number to find\n    \n    Returns:\n        int: The n-th rectangular number (n \u00d7 (n+1))\n    \"\"\"\n    return n * (n + 1)\n", "result": "passed", "passed": true}
{"task_id": 36, "requirement": "Code Complexity", "completion": "def find_nth_digit(numerator, denominator, n):\n    if denominator == 0:\n        raise ValueError(\"Denominator cannot be zero\")\n    \n    # Convert to positive numbers and remember sign\n    sign = -1 if numerator * denominator < 0 else 1\n    numerator, denominator = abs(numerator), abs(denominator)\n    \n    # Generate digits using divmod\n    digits = []\n    seen_remainders = {}\n    remainder = numerator\n    \n    # Get all digits until we find nth digit or detect a cycle\n    while len(digits) <= n and remainder not in seen_remainders:\n        quotient, remainder = divmod(remainder * 10, denominator)\n        digits.append(str(quotient))\n        seen_remainders[remainder] = len(digits)\n    \n    # Return the nth digit (with sign if it's the first digit)\n    result = digits[n] if n < len(digits) else \"0\"\n    return \"-\" + result if sign < 0 and n == 0 else result\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpiau0fkth.py\", line 19, in <module>\n    assert find_nth_digit(1,2,1) == 5\nAssertionError", "passed": false}
{"task_id": 38, "requirement": "Code Complexity", "completion": "def div_even_odd(numbers):\n    # Use list comprehension to separate even and odd numbers\n    evens = [num for num in numbers if num % 2 == 0]\n    odds = [num for num in numbers if num % 2 != 0]\n    \n    # Return division if both lists are non-empty, otherwise return message\n    return evens[0] / odds[0] if evens and odds else \"Cannot perform division: missing even or odd number\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxq7omjl7.py\", line 12, in <module>\n    assert cc_visit(inspect.getsource(div_even_odd))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 40, "requirement": "Code Complexity", "completion": "from collections import Counter\nfrom itertools import chain\n\ndef freq_element(list_of_lists):\n    return dict(Counter(chain.from_iterable(list_of_lists)))\n\n# Example usage\nif __name__ == \"__main__\":\n    test_list = [[1, 2, 3], [4, 2, 3], [1, 2]]\n    result = freq_element(test_list)\n    print(result)  # Output: {1: 2, 2: 3, 3: 2, 4: 1}\n", "result": "passed", "passed": true}
{"task_id": 42, "requirement": "Code Complexity", "completion": "def find_sum(arr):\n    freq = {}\n    \n    for num in arr:  # +1 for the loop\n        freq[num] = freq.get(num, 0) + 1\n    \n    repeated_sum = sum(num for num, count in freq.items() if count > 1)  # +1 for the if condition\n    \n    return repeated_sum\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpfd8cvtl2.py\", line 7, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Code Complexity", "completion": "import re\n\ndef text_match(text):\n    pattern = r'^[a-z]+_[a-z]+$'\n    return bool(re.search(pattern, text))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpq_9vbln6.py\", line 5, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 45, "requirement": "Code Complexity", "completion": "def get_gcd(arr):\n    from math import gcd\n    from functools import reduce\n    \n    if not arr:\n        return None\n        \n    return reduce(gcd, map(abs, arr))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpp7gkv8rd.py\", line 12, in <module>\n    assert cc_visit(inspect.getsource(get_gcd))[0].complexity <=1\nAssertionError", "passed": false}
{"task_id": 47, "requirement": "Code Complexity", "completion": "def compute_last_digit(a, b):\n    if a > b:\n        return 0\n    if a == b:\n        return 1\n        \n    return reduce(lambda x, y: (x * (y % 10)) % 10, range(a + 1, b + 1), 1)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpceyx62az.py\", line 7, in <module>\n    assert compute_last_digit(2,4) == 2\n  File \"/tmp/tmpceyx62az.py\", line 6, in compute_last_digit\n    return reduce(lambda x, y: (x * (y % 10)) % 10, range(a + 1, b + 1), 1)\nNameError: name 'reduce' is not defined", "passed": false}
{"task_id": 51, "requirement": "Code Complexity", "completion": "def check_equilateral(side1, side2, side3):\n    return \"This is an equilateral triangle\" if side1 == side2 == side3 else \"This is not an equilateral triangle\"\n\n# Example usage\nprint(check_equilateral(5, 5, 5))  # Equilateral\nprint(check_equilateral(5, 4, 5))  # Not equilateral\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6klem6de.py\", line 6, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "requirement": "Code Complexity", "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n    \n    Args:\n        base (float): The length of the base of the parallelogram\n        height (float): The perpendicular height of the parallelogram\n        \n    Returns:\n        float: The area of the parallelogram\n    \"\"\"\n    return base * height\n", "result": "passed", "passed": true}
{"task_id": 53, "requirement": "Code Complexity", "completion": "def check_equality(text):\n    return bool(text) and text[0].lower() == text[-1].lower()\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpb1corjet.py\", line 3, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 56, "requirement": "Code Complexity", "completion": "def check(num):\n    # Convert to string, reverse, and convert back to int in one line\n    reverse_num = int(str(num)[::-1])\n    # Single return statement comparing the number with twice its reverse minus 1\n    return num == (2 * reverse_num - 1)\n", "result": "passed", "passed": true}
{"task_id": 58, "requirement": "Code Complexity", "completion": "def opposite_signs(num1: int, num2: int) -> bool:\n    \"\"\"\n    Check if two integers have opposite signs.\n    \n    Args:\n        num1 (int): First integer\n        num2 (int): Second integer\n        \n    Returns:\n        bool: True if numbers have opposite signs, False otherwise\n        \n    Note:\n        - Has cyclomatic complexity of 1 (single path of execution)\n        - Zero is considered to have the same sign as any number\n    \"\"\"\n    return (num1 * num2) < 0\n", "result": "passed", "passed": true}

{"task_id": 14, "requirement": "Input-Output Conditions", "completion": "def find_volume(base, height_triangle, height_prism):\n    # Check if all inputs are positive numbers\n    if not all(isinstance(x, (int, float)) and x > 0 for x in [base, height_triangle, height_prism]):\n        raise ValueError(\"All inputs must be positive numbers.\")\n    \n    # Calculate the volume of the triangular prism\n    volume = 0.5 * base * height_triangle * height_prism\n    \n    return volume\n\n# Example usage:\n# base = 3\n# height_triangle = 4\n# height_prism = 5\n# print(find_volume(base, height_triangle, height_prism))  # Output should be 30.0\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpg2kytez5.py\", line 16, in <module>\n    assert find_volume(5.5, 3.2, 4.1) == 72.16\nAssertionError", "passed": false}
{"task_id": 15, "requirement": "Input-Output Conditions", "completion": "import re\n\ndef split_lowerstring(s):\n    # Use regex to find all occurrences where a lowercase letter is followed by one or more non-lowercase characters\n    parts = re.split('[a-z]', s)\n    \n    # Filter out empty strings from the result\n    parts = [part for part in parts if part]\n    \n    return parts\n\n# Example usage:\ninput_string = \"SplitThisStringAtLowercaseLetters\"\nresult = split_lowerstring(input_string)\nprint(result)  # Output: ['Split', 'This', 'String', 'At', 'Lowercase', 'Letters']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1g_n5e7e.py\", line 12, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "requirement": "Input-Output Conditions", "completion": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Check if there are sequences of lowercase letters joined with an underscore in the input string.\n\n    Args:\n    text (str): The input string to search for patterns.\n\n    Returns:\n    str: 'Found a match!' if at least one match is found, otherwise 'Not matched!'\n    \"\"\"\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    matches = re.findall(pattern, text)\n    \n    if matches:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\ninput_text = \"hello_world this_is_python example_test another_example\"\nresult = text_lowercase_underscore(input_text)\nprint(result)  # Output: 'Found a match!'\n\n# Example with no matches:\ninput_text_no_match = \"HelloWorld ThisIsPython ExampleTest AnotherExample\"\nresult_no_match = text_lowercase_underscore(input_text_no_match)\nprint(result_no_match)  # Output: 'Not matched!'\n", "result": "passed", "passed": true}
{"task_id": 17, "requirement": "Input-Output Conditions", "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Parameters:\n    side_length (int): The length of one side of the square, must be a non-negative integer.\n\n    Returns:\n    int: The perimeter of the square, always a non-negative integer.\n    \"\"\"\n    if not isinstance(side_length, int) or side_length < 0:\n        raise ValueError(\"Side length must be a non-negative integer.\")\n    \n    return 4 * side_length\n\n# Example usage:\ntry:\n    side_length = 5\n    perimeter = square_perimeter(side_length)\n    print(f\"The perimeter of a square with side length {side_length} is {perimeter}\")\nexcept ValueError as e:\n    print(e)\n\n# Testing with negative values\ntry:\n    side_length = -3\n    perimeter = square_perimeter(side_length)\n    print(f\"The perimeter of a square with side length {side_length} is {perimeter}\")\nexcept ValueError as e:\n    print(e)\n\n# Testing with non-integer values\ntry:\n    side_length = 3.5\n    perimeter = square_perimeter(side_length)\n    print(f\"The perimeter of a square with side length {side_length} is {perimeter}\")\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 18, "requirement": "Input-Output Conditions", "completion": "def remove_dirty_chars(str1, str2):\n    # Check if the input strings contain only alphabetic characters\n    if not (str1.isalpha() and str2.isalpha()):\n        raise ValueError(\"Input strings must only contain alphabetic characters.\")\n    \n    # Convert both strings to lowercase to handle case insensitivity\n    str1_lower = str1.lower()\n    str2_lower = str2.lower()\n    \n    # Create a set of dirty characters for quick lookup\n    dirty_chars = set(str2_lower)\n    \n    # Build the result string by excluding dirty characters\n    result = ''.join(char for char in str1_lower if char not in dirty_chars)\n    \n    return result\n\n# Test cases\ntry:\n    print(remove_dirty_chars('Hello World', 'ad'))  # Output: \"hello worl\"\n    print(remove_dirty_chars('Programming', 'ing'))  # Output: \"programmr\"\n    print(remove_dirty_chars('Python3.8', 'n3'))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)  # Output: Input strings must only contain alphabetic characters.\n", "result": "passed", "passed": true}
{"task_id": 19, "requirement": "Input-Output Conditions", "completion": "def test_duplicate(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns True if there is at least one duplicate element,\n    otherwise it returns False. If the input is not a list, it raises a TypeError.\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Convert the list to a set to remove duplicates\n    unique_elements = set(lst)\n    \n    # Compare the length of the original list with the set\n    return len(unique_elements) != len(lst)\n\n# Test cases:\ntry:\n    print(test_duplicate([1, 2, 3, 4, 5]))  # Expected output: False (no duplicates)\n    print(test_duplicate([1, 2, 3, 3, 5]))  # Expected output: True (duplicates exist)\n    print(test_duplicate('not a list'))       # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 20, "requirement": "Input-Output Conditions", "completion": "def is_woodall(n):\n    # Woodall numbers must be greater than 0\n    if n <= 0:\n        return False\n    \n    # Woodall numbers must be odd\n    if n % 2 == 0:\n        return False\n    \n    # Start checking from i = 1\n    i = 1\n    while True:\n        woodall_number = i * (2 ** i) - 1\n        \n        # If the calculated Woodall number matches the input number, then it is a Woodall number.\n        if woodall_number == n:\n            return True\n        \n        # If the calculated Woodall number exceeds the input number, then it cannot be a Woodall number.\n        elif woodall_number > n:\n            return False\n        \n        i += 1\n\n# Test cases\nprint(is_woodall(7))   # Output: True (since 3 * 2^3 - 1 = 7)\nprint(is_woodall(15))  # Output: False\nprint(is_woodall(0))   # Output: False\nprint(is_woodall(-5))  # Output: False\n", "result": "passed", "passed": true}
{"task_id": 23, "requirement": "Input-Output Conditions", "completion": "def maximum_sum(list_of_lists):\n    \"\"\"\n    Find the maximum sum of elements in any sublist of the given list of lists.\n    \n    Parameters:\n    list_of_lists (list of list of int): A list containing sublists of integers.\n    \n    Returns:\n    int: The maximum sum found among all sublists. Returns None if the input is invalid.\n    \"\"\"\n    if not list_of_lists:\n        return None  # Return None if the input list is empty\n    \n    max_sum = float('-inf')  # Initialize with negative infinity to handle all possible sums\n    \n    for sublist in list_of_lists:\n        if not isinstance(sublist, list) or not all(isinstance(x, int) for x in sublist):\n            return None  # Return None if any element is not a valid integer sublist\n        \n        current_sum = sum(sublist)  # Calculate the sum of the current sublist\n        if current_sum > max_sum:\n            max_sum = current_sum  # Update max_sum if the current sum is greater\n    \n    return max_sum\n\n# Example usage:\nexample_list = [[1, 2, 3], [4, 5, 6], [10, -1, 3]]\nprint(maximum_sum(example_list))  # Output should be 19 (from the sublist [10, -1, 3])\n\n# Example with invalid input\ninvalid_list = [[1, 2, 'a'], [4, 5, 6], [10, -1, 3]]\nprint(maximum_sum(invalid_list))  # Output should be None\n", "result": "passed", "passed": true}
{"task_id": 25, "requirement": "Input-Output Conditions", "completion": "def find_product(lst):\n    # Dictionary to store the frequency of each element\n    freq = {}\n    product = 1\n\n    # Count the frequency of each element in the list\n    for num in lst:\n        if num not in freq:\n            freq[num] = 0\n        freq[num] += 1\n\n    # Multiply only those numbers which have a frequency of 1\n    for num in freq:\n        if freq[num] == 1:\n            product *= num\n\n    return product\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp906xdxaz.py\", line 15, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "requirement": "Input-Output Conditions", "completion": "def check_k_elements(tuple_list, k):\n    \"\"\"\n    Check if each tuple in the list has exactly k elements.\n\n    Parameters:\n        tuple_list (list of tuples): The list of tuples to be checked.\n        k (int): The expected number of elements in each tuple.\n\n    Returns:\n        bool: True if all tuples have exactly k elements, False otherwise.\n    \"\"\"\n    for tup in tuple_list:\n        if len(tup) != k:\n            return False\n    return True\n\n# Example usage:\ntuple_list = [(1, 2), (3, 4), (5, 6)]\nk = 2\nprint(check_k_elements(tuple_list, k))  # Output: True\n\ntuple_list = [(1, 2), (3, 4, 5), (5, 6)]\nk = 2\nprint(check_k_elements(tuple_list, k))  # Output: False\n\ntuple_list = []\nk = 0\nprint(check_k_elements(tuple_list, k))  # Output: True\n\ntuple_list = [(1,), (2,), (3,)]\nk = 1\nprint(check_k_elements(tuple_list, k))  # Output: True\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpaf0iyxk1.py\", line 19, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 28, "requirement": "Input-Output Conditions", "completion": "def binomial_coeff(n, k):\n    \"\"\"\n    Calculate the binomial coefficient C(n, k).\n\n    Parameters:\n    n (int): The total number of items.\n    k (int): The number of items to choose.\n\n    Returns:\n    int: The binomial coefficient.\n    \n    Raises:\n    ValueError: If either n or k is negative.\n    \"\"\"\n    if n < 0 or k < 0:\n        raise ValueError(\"Both n and k must be non-negative integers.\")\n    \n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    \n    # Using math.comb for better performance and readability in Python 3.8+\n    import math\n    return math.comb(n, k)\n\n# Example usage:\nn = 5\nk = 2\ntry:\n    print(f\"C({n}, {k}) = {binomial_coeff(n, k)}\")  # Output: C(5, 2) = 10\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 30, "requirement": "Input-Output Conditions", "completion": "def count_substring_with_equal_ends(s):\n    count = 0\n    n = len(s)\n    \n    # Iterate over all possible starting points of substrings\n    for i in range(n):\n        # Iterate over all possible ending points of substrings\n        for j in range(i, n):\n            # Check if the substring from index i to j starts and ends with the same character\n            if s[i] == s[j]:\n                count += 1\n                \n    return count\n\n# Example usage:\ns = \"abcab\"\nprint(count_substring_with_equal_ends(s))  # Output: 7\n", "result": "passed", "passed": true}
{"task_id": 32, "requirement": "Input-Output Conditions", "completion": "import math\n\ndef max_prime_factors(n):\n    # Input validation\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    # Initialize the maximum prime factor variable\n    max_prime = -1\n    \n    # Remove all even factors\n    while n % 2 == 0:\n        max_prime = 2\n        n //= 2\n    \n    # Now n must be odd, so we can skip one element (Note i = i + 2)\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        # While i divides n, remove i and set max_prime to i\n        while n % i == 0:\n            max_prime = i\n            n //= i\n    \n    # If n becomes a prime number greater than 2\n    if n > 2:\n        max_prime = n\n    \n    # Return the result as an integer\n    return int(max_prime)\n\n# Example usage:\nnumber = 600851475143\nprint(f\"The largest prime factor of {number} is {max_prime_factors(number)}\")\n", "result": "passed", "passed": true}
{"task_id": 35, "requirement": "Input-Output Conditions", "completion": "def find_rect_num(n):\n    \"\"\"\n    Find the n-th rectangular number.\n\n    Parameters:\n    n (int): The position of the rectangular number to find.\n\n    Returns:\n    int: The n-th rectangular number if n is a valid positive integer.\n\n    Raises:\n    ValueError: If the input is not a valid positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"The input must be a positive integer.\")\n    \n    return n * (n + 1) // 2\n\n# Example usage:\ntry:\n    n = 5\n    print(f\"The {n}-th rectangular number is: {find_rect_num(n)}\")\nexcept ValueError as e:\n    print(e)\n\ntry:\n    n = -3\n    print(find_rect_num(n))\nexcept ValueError as e:\n    print(e)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpc1f4_pnr.py\", line 16, in <module>\n    assert find_rect_num(4) == 20\nAssertionError", "passed": false}
{"task_id": 36, "requirement": "Input-Output Conditions", "completion": "def find_nth_digit(numerator, denominator, n):\n    \"\"\"\n    Find the nth digit in the decimal representation of the proper fraction numerator/denominator.\n    \n    :param numerator: The numerator of the fraction (integer)\n    :param denominator: The denominator of the fraction (integer)\n    :param n: The position of the digit to find (1-based index)\n    :return: The nth digit as an integer\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    if numerator >= denominator:\n        raise ValueError(\"The fraction must be proper (numerator < denominator)\")\n    \n    # Dictionary to store seen remainders and their corresponding positions\n    seen_remainders = {}\n    \n    # Initialize variables\n    remainder = numerator % denominator\n    position = 1\n    \n    while remainder != 0:\n        if remainder in seen_remainders:\n            start_index = seen_remainders[remainder]\n            break\n        \n        seen_remainders[remainder] = position\n        \n        # Multiply remainder by 10 and get the next digit\n        remainder *= 10\n        digit = remainder // denominator\n        remainder %= denominator\n        \n        position += 1\n    \n    # Now we know the length of the non-repeating part\n    non_repeating_length = position - start_index\n    \n    if n <= non_repeating_length:\n        # Nth digit is in the non-repeating part\n        remainder = numerator * (10 ** (non_repeating_length))\n        for _ in range(n):\n            remainder //= denominator\n        return remainder % 10\n    \n    # Nth digit is in the repeating part\n    repeating_length = position - non_repeating_length\n    nth_digit_position_in_repeating = (n - non_repeating_length - 1) % repeating_length\n    \n    remainder = numerator * (10 ** repeating_length)\n    for _ in range(nth_digit_position_in_repeating):\n        remainder //= denominator\n    \n    return remainder % 10\n\n# Example usage:\nprint(find_nth_digit(1, 3, 4))  # Output: 3 (since 1/3 = 0.3333...)\nprint(find_nth_digit(1, 7, 6))  # Output: 8 (since 1/7 = 0.142857142857...)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkbysq2gn.py\", line 39, in <module>\n    assert find_nth_digit(1,2,1) == 5\n  File \"/tmp/tmpkbysq2gn.py\", line 22, in find_nth_digit\n    non_repeating_length = position - start_index\nUnboundLocalError: local variable 'start_index' referenced before assignment", "passed": false}
{"task_id": 38, "requirement": "Input-Output Conditions", "completion": "def div_even_odd(numbers):\n    # Initialize variables to store the first even and odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Iterate through the list to find the first even and odd numbers\n    for num in numbers:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        elif first_odd is None and num % 2 != 0:\n            first_odd = num\n        \n        # If both even and odd numbers are found, break the loop\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Check if both even and odd numbers were found\n    if first_even is not None and first_odd is not None:\n        result = first_even / first_odd\n        return result\n    else:\n        raise ValueError(\"List must contain at least one even and one odd number.\")\n\n# Example usage:\nnumbers = [5, 3, 8, 1, 4]\ntry:\n    result = div_even_odd(numbers)\n    print(\"Division of the first even and odd number:\", result)\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 39, "requirement": "Input-Output Conditions", "completion": "import heapq\nfrom collections import Counter\n\ndef rearrange_string(s):\n    # Count the frequency of each character\n    freq = Counter(s)\n    \n    # Create a max-heap based on character frequency\n    max_heap = [(-count, char) for char, count in freq.items()]\n    heapq.heapify(max_heap)\n    \n    # Check if it's possible to rearrange the string\n    if (-max_heap[0][0]) * 2 > len(s) + 1:\n        return \"\"\n    \n    result = []\n    prev_char = None\n    prev_count = 0\n    \n    while max_heap:\n        count, char = heapq.heappop(max_heap)\n        result.append(char)\n        \n        # Add the previous character back into the heap if it still has remaining counts\n        if prev_char is not None:\n            heapq.heappush(max_heap, (prev_count, prev_char))\n        \n        prev_char = char\n        prev_count = count + 1  # Increase count since we've used up one occurrence\n    \n    return ''.join(result)\n\n# Test cases\nprint(rearrange_string(\"aab\"))  # Output: \"aba\"\nprint(rearrange_string(\"aaabbc\"))  # Output: \"bbaacb\" or similar\nprint(rearrange_string(\"aaaabc\"))  # Output: \"\"\n", "result": "timed out", "passed": false}
{"task_id": 42, "requirement": "Input-Output Conditions", "completion": "def find_sum(arr):\n    # Create a dictionary to store the frequency of each element\n    freq = {}\n    \n    # Iterate through the array and count the frequency of each element\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Initialize the sum of repeated elements\n    repeated_sum = 0\n    \n    # Iterate through the frequency dictionary and add the repeated elements to the sum\n    for num, count in freq.items():\n        if count > 1:\n            repeated_sum += num * count\n    \n    return repeated_sum\n\n# Example usage:\narr = [1, 2, 3, 4, 5, 6]\nprint(find_sum(arr))  # Output should be 0 (no repeated elements)\n\narr = [1, 2, 3, 2, 4, 5, 3, 6]\nprint(find_sum(arr))  # Output should be 10 (2*2 + 3*2)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmprjcxuf4f.py\", line 22, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Input-Output Conditions", "completion": "import re\n\ndef text_match(text):\n    # Define the regex pattern for sequences of lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    \n    # Use re.findall to find all occurrences of the pattern in the input text\n    matches = re.findall(pattern, text)\n    \n    # If no matches are found, return 'Not matched!'\n    if not matches:\n        return 'Not matched!'\n    \n    return matches\n\n# Example usage:\ninput_text1 = \"hello_world this_is_a_test example_example\"\nresult1 = text_match(input_text1)\nprint(result1)  # Output: ['hello_world', 'this_is_a_test', 'example_example']\n\ninput_text2 = \"HelloWorld ThisIsATest ExampleExample\"\nresult2 = text_match(input_text2)\nprint(result2)  # Output: Not matched!\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpyoahb9jw.py\", line 18, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 46, "requirement": "Input-Output Conditions", "completion": "def test_distinct(numbers):\n    \"\"\"\n    Determine whether all numbers in the list are distinct or not.\n    \n    Args:\n    numbers (list of int): A list of integers.\n    \n    Returns:\n    bool: True if all numbers are distinct, False otherwise.\n    \"\"\"\n    # Convert the list to a set and compare its length with the original list's length\n    return len(numbers) == len(set(numbers))\n\n# Example usage:\nnumbers1 = [1, 2, 3, 4, 5]\nnumbers2 = [1, 2, 3, 3, 5]\n\nprint(test_distinct(numbers1))  # Output: True\nprint(test_distinct(numbers2))  # Output: False\n", "result": "passed", "passed": true}
{"task_id": 48, "requirement": "Input-Output Conditions", "completion": "def odd_bit_set_number(n):\n    # Initialize a mask with all odd bits set to 1\n    mask = 0xAAAAAAAA  # This binary representation has all odd bits set\n    \n    # Use bitwise OR to set all odd bits of n to 1\n    result = n | mask\n    \n    return result\n\n# Example usage:\nnumber = 0b10101010  # Binary for 170\nresult = odd_bit_set_number(number)\nprint(f\"Original number: {number}\")\nprint(f\"Number after setting odd bits: {result}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgyjh9evm.py\", line 12, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "requirement": "Input-Output Conditions", "completion": "def specified_element(two_d_list, index=0):\n    \"\"\"\n    Extracts elements at the specified index from each sublist in a 2D list.\n    \n    Parameters:\n    - two_d_list: A list of lists from which elements are to be extracted.\n    - index: The index of the elements to be extracted from each sublist. Default is 0.\n    \n    Returns:\n    - A list containing the elements at the specified index from each sublist.\n    - An empty list if the input list is empty.\n    \"\"\"\n    if not two_d_list:\n        return []\n    \n    if not all(isinstance(sublist, list) for sublist in two_d_list):\n        raise ValueError(\"All elements in the input should be lists.\")\n    \n    try:\n        return [sublist[index] for sublist in two_d_list]\n    except IndexError:\n        raise IndexError(f\"Index {index} out of range for some sublists.\")\n\n# Example usage:\ntwo_d_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(specified_element(two_d_list))  # Output: [1, 4, 7]\nprint(specified_element(two_d_list, 1))  # Output: [2, 5, 8]\n\nempty_list = []\nprint(specified_element(empty_list))  # Output: []\n\ninvalid_index_list = [[1, 2], [3], [4, 5, 6]]\ntry:\n    print(specified_element(invalid_index_list, 2))\nexcept IndexError as e:\n    print(e)  # Output: Index 2 out of range for some sublists.\n", "result": "passed", "passed": true}
{"task_id": 50, "requirement": "Input-Output Conditions", "completion": "def min_length_list(list_of_lists):\n    if not list_of_lists:\n        return None  # Return None if the input list is empty\n    \n    # Find the list with the minimum length using the lambda function\n    min_length_list = min(list_of_lists, key=lambda x: len(x))\n    min_length = len(min_length_list)\n    \n    return (min_length, min_length_list)\n\n# Example usage:\nlists = [[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]\nresult = min_length_list(lists)\nprint(result)  # Output: (1, [10])\n", "result": "passed", "passed": true}
{"task_id": 52, "requirement": "Input-Output Conditions", "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram, must be positive.\n    height (float): The height of the parallelogram, must be positive.\n\n    Returns:\n    float: The area of the parallelogram, which will always be positive.\n    \"\"\"\n    # Validate that base and height are positive numbers\n    if not isinstance(base, (int, float)) or not isinstance(height, (int, float)):\n        raise TypeError(\"Both base and height must be numeric (int or float).\")\n    if base <= 0 or height <= 0:\n        raise ValueError(\"Both base and height must be positive numbers.\")\n    \n    # Calculate the area of the parallelogram\n    area = base * height\n    \n    return area\n\n# Example usage:\nbase = 5\nheight = 3\nprint(f\"The area of the parallelogram with base {base} and height {height} is {parallelogram_area(base, height)}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgsakctd1.py\", line 18, in <module>\n    assert parallelogram_area(0, 10) == 0\n  File \"/tmp/tmpgsakctd1.py\", line 6, in parallelogram_area\n    raise ValueError(\"Both base and height must be positive numbers.\")\nValueError: Both base and height must be positive numbers.", "passed": false}
{"task_id": 53, "requirement": "Input-Output Conditions", "completion": "def check_equality(s):\n    # Raise TypeError if input is not a string\n    if not isinstance(s, str):\n        raise TypeError('Input should be a string')\n\n    if len(s) == 0:\n        return 'Not Equal'\n    else:\n        return 'Equal' if s[0] == s[-1] else 'Not Equal'\n", "result": "passed", "passed": true}
{"task_id": 54, "requirement": "Input-Output Conditions", "completion": "def counting_sort(arr):\n    # Check if the input is a list of non-negative integers\n    if not isinstance(arr, list) or not all(isinstance(x, int) and x >= 0 for x in arr):\n        raise ValueError(\"Input must be a list of non-negative integers\")\n\n    if not arr:\n        return []\n\n    # Find the maximum element in the array\n    max_element = max(arr)\n\n    # Initialize the count array with zeros\n    count_array = [0] * (max_element + 1)\n\n    # Count the occurrences of each element\n    for num in arr:\n        count_array[num] += 1\n\n    # Reconstruct the sorted array\n    sorted_index = 0\n    for i in range(len(count_array)):\n        while count_array[i] > 0:\n            arr[sorted_index] = i\n            sorted_index += 1\n            count_array[i] -= 1\n\n    return arr\n\n# Example usage:\ntry:\n    arr = [4, 2, 2, 8, 3, 3, 1]\n    sorted_arr = counting_sort(arr)\n    print(\"Sorted array:\", sorted_arr)\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 57, "requirement": "Input-Output Conditions", "completion": "def find_max_num(digits, num_digits):\n    if len(digits) != num_digits:\n        raise ValueError(\"Length of digits list must match num_digits\")\n    \n    # Convert each digit to string for easy sorting\n    str_digits = [str(digit) for digit in digits]\n    \n    # Sort the digits in descending order based on their value when concatenated\n    sorted_digits = sorted(str_digits, key=lambda x: x*3, reverse=True)\n    \n    # Join the sorted digits to form the largest number\n    max_num = int(''.join(sorted_digits))\n    \n    return max_num\n\n# Example usage:\ndigits = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\nnum_digits = 11\nprint(find_max_num(digits, num_digits))  # Output: 965555332114\n", "result": "passed", "passed": true}
{"task_id": 58, "requirement": "Input-Output Conditions", "completion": "def opposite_signs(a, b):\n    # Check if both inputs are integers\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both inputs must be integers.\")\n    \n    # Use bitwise XOR to determine if the integers have opposite signs\n    return (a ^ b) < 0\n\n# Test cases:\ntry:\n    print(opposite_signs(10, -5))  # Should be True\n    print(opposite_signs(-3, 4))   # Should be True\n    print(opposite_signs(7, 9))    # Should be False\n    print(opposite_signs(-2, -8))  # Should be False\n    \n    # Testing with non-integer inputs\n    print(opposite_signs(10, \"5\"))  # Should raise a ValueError\nexcept ValueError as e:\n    print(e)\n", "result": "passed", "passed": true}
{"task_id": 60, "requirement": "Input-Output Conditions", "completion": "def max_len_sub(arr, diff):\n    if not arr:\n        return 0\n    \n    n = len(arr)\n    # Initialize the dp array where dp[i] will store the length of the longest subsequence ending at index i\n    dp = [1] * n\n    \n    # Iterate through each element in the array\n    for i in range(1, n):\n        # Check all previous elements to see if they can form a valid subsequence with the current element\n        for j in range(i):\n            if arr[i] - arr[j] == diff:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    # The result is the maximum value in the dp array\n    return max(dp)\n\n# Example usage:\narr = [1, 2, 3, 4, 5]\ndiff = 1\nprint(max_len_sub(arr, diff))  # Output: 5\n\narr = [1, 3, 5, 7, 9, 8, 6, 4, 2]\ndiff = 2\nprint(max_len_sub(arr, diff))  # Output: 5\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0el1vi6y.py\", line 22, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nAssertionError", "passed": false}

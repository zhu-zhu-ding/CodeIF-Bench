{"task_id": 11, "requirement": "Code Complexity", "completion": "def remove_occ(s, char):\n    \"\"\"\n    Remove the first and last occurrence of a given character from the string.\n\n    Parameters:\n    s (str): The input string.\n    char (str): The character to remove.\n\n    Returns:\n    str: The modified string with the first and last occurrence of the character removed.\n    \"\"\"\n    # Find the first and last occurrence of the character\n    first_index = s.find(char)\n    last_index = s.rfind(char)\n    \n    # If the character is found at least twice, remove the first and last occurrence\n    if first_index != -1 and first_index != last_index:\n        s = s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]\n    \n    return s\n\n# Example usage:\nstring = \"abracadabra\"\nchar_to_remove = \"a\"\nresult = remove_occ(string, char_to_remove)\nprint(result)  # Output: \"bracadabr\"\n", "result": "passed", "passed": true}
{"task_id": 14, "requirement": "Code Complexity", "completion": "def find_volume(base_length, triangle_height, prism_height):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base_length (float): The length of the base of the triangular face.\n    triangle_height (float): The height of the triangular face.\n    prism_height (float): The height (or length) of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    # Calculate the area of the triangular base\n    base_area = 0.5 * base_length * triangle_height\n    \n    # Calculate the volume of the prism\n    volume = base_area * prism_height\n    \n    return volume\n\n# Example usage:\n# base_length = 5, triangle_height = 4, prism_height = 10\n# volume = find_volume(5, 4, 10)\n# print(volume)  # Output: 100.0\n", "result": "passed", "passed": true}
{"task_id": 15, "requirement": "Code Complexity", "completion": "import re\n\ndef split_lowerstring(s):\n    # Split the string at each lowercase letter using a regular expression\n    return re.split(r'(?=[a-z])', s)\n\n# Example usage:\nexample_string = \"HelloWorldThisIsATest\"\nresult = split_lowerstring(example_string)\nprint(result)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpbi9k8hwq.py\", line 9, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "requirement": "Code Complexity", "completion": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Finds sequences of lowercase letters joined with an underscore in the given text.\n\n    Parameters:\n    text (str): The input string to search within.\n\n    Returns:\n    list: A list of matching sequences.\n    \"\"\"\n    # Define the regular expression pattern\n    pattern = r'\\b[a-z]+(?:_[a-z]+)+\\b'\n    \n    # Use re.findall to find all matches of the pattern in the text\n    return re.findall(pattern, text)\n\n# Example usage:\ntext = \"Here are some examples: this_is_a_test, another_example, and not_thisOne.\"\nprint(text_lowercase_underscore(text))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmps4xcmwwi.py\", line 10, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "requirement": "Code Complexity", "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Parameters:\n    side_length (float): The length of one side of the square.\n\n    Returns:\n    float: The perimeter of the square.\n    \"\"\"\n    return 4 * side_length\n\n# Example usage:\n# perimeter = square_perimeter(5)\n# print(perimeter)  # Output: 20\n", "result": "passed", "passed": true}
{"task_id": 20, "requirement": "Code Complexity", "completion": "def is_woodall(number):\n    # Precomputed set of Woodall numbers up to a certain limit\n    woodall_numbers = {1 * 2**1 - 1, 2 * 2**2 - 1, 3 * 2**3 - 1, 4 * 2**4 - 1, 5 * 2**5 - 1,\n                       6 * 2**6 - 1, 7 * 2**7 - 1, 8 * 2**8 - 1, 9 * 2**9 - 1, 10 * 2**10 - 1}\n    return number in woodall_numbers\n\n# Example usage:\nprint(is_woodall(7))  # True\nprint(is_woodall(23)) # True\nprint(is_woodall(10)) # False\n", "result": "passed", "passed": true}
{"task_id": 21, "requirement": "Code Complexity", "completion": "def multiples_of_num(n, m):\n    \"\"\"\n    Returns a list of the first m multiples of n.\n\n    Parameters:\n    n (int): The number to find multiples of.\n    m (int): The number of multiples to find.\n\n    Returns:\n    list: A list containing the first m multiples of n.\n    \"\"\"\n    return [n * i for i in range(1, m + 1)]\n\n# Example usage:\nn = 5\nm = 10\nprint(multiples_of_num(n, m))  # Output: [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5yzgltw6.py\", line 7, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 24, "requirement": "Code Complexity", "completion": "def binary_to_decimal(binary_str):\n    \"\"\"\n    Convert a binary number (given as a string) to its decimal equivalent.\n\n    Parameters:\n    binary_str (str): A string representing a binary number (e.g., '1011').\n\n    Returns:\n    int: The decimal equivalent of the binary number.\n    \"\"\"\n    return int(binary_str, 2)\n\n# Example usage:\nbinary_number = '1011'\ndecimal_number = binary_to_decimal(binary_number)\nprint(f\"The decimal equivalent of binary {binary_number} is {decimal_number}.\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8iy7hiu4.py\", line 7, in <module>\n    assert binary_to_decimal(100) == 4\n  File \"/tmp/tmp8iy7hiu4.py\", line 2, in binary_to_decimal\n    return int(binary_str, 2)\nTypeError: int() can't convert non-string with explicit base", "passed": false}
{"task_id": 32, "requirement": "Code Complexity", "completion": "def max_prime_factors(n):\n    # Initialize the largest prime factor\n    largest_prime = -1\n    \n    # Check for the smallest prime factor, 2\n    if n % 2 == 0:\n        largest_prime = 2\n        while n % 2 == 0:\n            n //= 2\n    \n    # Check for odd factors from 3 onwards\n    factor = 3\n    while factor * factor <= n:\n        if n % factor == 0:\n            largest_prime = factor\n            while n % factor == 0:\n                n //= factor\n        factor += 2\n    \n    # If n is still greater than 2, then it is a prime number\n    if n > 2:\n        largest_prime = n\n    \n    return largest_prime\n\n# Example usage:\nnumber = 13195\nprint(f\"The largest prime factor of {number} is {max_prime_factors(number)}\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpv5kqwg25.py\", line 29, in <module>\n    assert cc_visit(inspect.getsource(max_prime_factors))[0].complexity <= 5\nAssertionError", "passed": false}
{"task_id": 33, "requirement": "Code Complexity", "completion": "def decimal_to_binary(decimal_number):\n    return bin(decimal_number)[2:] if decimal_number >= 0 else '-' + bin(-decimal_number)[2:]\n\n# Example usage:\nprint(decimal_to_binary(10))  # Output: \"1010\"\nprint(decimal_to_binary(0))   # Output: \"0\"\nprint(decimal_to_binary(-10)) # Output: \"-1010\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpbja8qxq3.py\", line 7, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 35, "requirement": "Code Complexity", "completion": "def find_rect_num(n):\n    \"\"\"\n    Calculate the n-th rectangular number.\n\n    Parameters:\n    n (int): The position of the rectangular number to find.\n\n    Returns:\n    int: The n-th rectangular number.\n    \"\"\"\n    return n * (n + 1)\n\n# Example usage:\nn = 5\nrect_num = find_rect_num(n)\nprint(f\"The {n}-th rectangular number is: {rect_num}\")\n", "result": "passed", "passed": true}
{"task_id": 36, "requirement": "Code Complexity", "completion": "def find_nth_digit(numerator, denominator, n):\n    if denominator == 0:\n        raise ValueError(\"Denominator cannot be zero.\")\n    \n    # Calculate the integer part and the remainder\n    integer_part, remainder = divmod(numerator, denominator)\n    \n    # If there's no remainder, the fraction is a whole number\n    if remainder == 0:\n        return 0\n    \n    # Find the nth digit in the fractional part\n    for _ in range(n):\n        remainder *= 10\n        digit, remainder = divmod(remainder, denominator)\n    \n    return digit\n\n# Example usage:\nnumerator = 1\ndenominator = 3\nn = 5\nprint(find_nth_digit(numerator, denominator, n))  # Output: 3\n", "result": "passed", "passed": true}
{"task_id": 38, "requirement": "Code Complexity", "completion": "def div_even_odd(numbers):\n    first_even = next((num for num in numbers if num % 2 == 0), None)\n    first_odd = next((num for num in numbers if num % 2 != 0), None)\n    \n    if first_even is None or first_odd is None:\n        raise ValueError(\"The list must contain at least one even and one odd number.\")\n    \n    return first_even / first_odd\n\n# Example usage:\nnumbers = [5, 3, 8, 6, 7]\nresult = div_even_odd(numbers)\nprint(\"Division of first even and odd number:\", result)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpyv_tq674.py\", line 16, in <module>\n    assert cc_visit(inspect.getsource(div_even_odd))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 40, "requirement": "Code Complexity", "completion": "from collections import Counter\nfrom itertools import chain\n\ndef freq_element(list_of_lists):\n    # Flatten the list of lists using itertools.chain\n    flat_list = list(chain.from_iterable(list_of_lists))\n    \n    # Use Counter to count the frequency of each element\n    return Counter(flat_list)\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [4, 5, 1], [2, 3, 4, 4]]\nresult = freq_element(list_of_lists)\nprint(result)\n", "result": "passed", "passed": true}
{"task_id": 42, "requirement": "Code Complexity", "completion": "def find_sum(arr):\n    # Create a dictionary to count occurrences of each element\n    element_count = {}\n    \n    # Count each element in the array\n    for element in arr:\n        element_count[element] = element_count.get(element, 0) + 1\n    \n    # Calculate the sum of elements that are repeated\n    repeated_sum = sum(element * count for element, count in element_count.items() if count > 1)\n    \n    return repeated_sum\n\n# Example usage:\narray = [1, 2, 3, 2, 4, 5, 6, 3, 3]\nprint(find_sum(array))  # Output: 13 (2*2 + 3*3)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppr4fk9o1.py\", line 13, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Code Complexity", "completion": "import re\n\ndef text_match(text):\n    # Define the regex pattern for sequences of lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    \n    # Use re.findall to find all matches of the pattern in the input text\n    return re.findall(pattern, text)\n\n# Example usage:\nexample_text = \"Here are some examples: abc_def, ghi_jkl, and mno_pqr.\"\nprint(text_match(example_text))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpixy9xafs.py\", line 10, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 45, "requirement": "Code Complexity", "completion": "from math import gcd\nfrom functools import reduce\n\ndef get_gcd(arr):\n    \"\"\"\n    Calculate the GCD of an array of numbers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The GCD of the list of numbers.\n    \"\"\"\n    if not arr:\n        raise ValueError(\"Array must contain at least one number.\")\n    \n    return reduce(gcd, arr)\n\n# Example usage:\nnumbers = [48, 64, 80]\nresult = get_gcd(numbers)\nprint(f\"The GCD of {numbers} is {result}.\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1dfeflrh.py\", line 16, in <module>\n    assert cc_visit(inspect.getsource(get_gcd))[0].complexity <=1\nAssertionError", "passed": false}
{"task_id": 47, "requirement": "Code Complexity", "completion": "def compute_last_digit(a, b):\n    if a > b:\n        return 0  # If a > b, then a! does not divide b!\n    \n    # Initialize the result as 1 (since we are multiplying)\n    last_digit = 1\n    \n    # Iterate over the range from a+1 to b\n    for i in range(a + 1, b + 1):\n        last_digit = (last_digit * i) % 10  # Keep only the last digit\n    \n    return last_digit\n\n# Example usage:\n# compute_last_digit(5, 10) should return the last digit of (10! / 5!)\nprint(compute_last_digit(5, 10))  # Output: 2\n", "result": "passed", "passed": true}
{"task_id": 51, "requirement": "Code Complexity", "completion": "def check_equilateral(side1, side2, side3):\n    \"\"\"\n    Check if a triangle is equilateral.\n\n    Parameters:\n    side1 (float): Length of the first side of the triangle.\n    side2 (float): Length of the second side of the triangle.\n    side3 (float): Length of the third side of the triangle.\n\n    Prints:\n    str: A message indicating whether the triangle is equilateral or not.\n    \"\"\"\n    # Use a single conditional expression to determine the message\n    message = \"The triangle is equilateral.\" if side1 == side2 == side3 else \"The triangle is not equilateral.\"\n    print(message)\n\n# Example usage:\ncheck_equilateral(5, 5, 5)  # The triangle is equilateral.\ncheck_equilateral(5, 5, 3)  # The triangle is not equilateral.\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp35s89net.py\", line 8, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "requirement": "Code Complexity", "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram.\n    \"\"\"\n    return base * height\n\n# Example usage:\n# base = 5, height = 10\n# area = parallelogram_area(5, 10)\n# print(area)  # Output: 50\n", "result": "passed", "passed": true}
{"task_id": 53, "requirement": "Code Complexity", "completion": "def check_equality(s):\n    \"\"\"\n    Check if the first and last characters of the string are equal.\n\n    Parameters:\n    s (str): The string to check.\n\n    Returns:\n    bool: True if the first and last characters are equal, False otherwise.\n    \"\"\"\n    # Return False for empty strings or compare the first and last characters\n    return len(s) > 0 and s[0] == s[-1]\n\n# Example usage:\nprint(check_equality(\"radar\"))  # Output: True\nprint(check_equality(\"hello\"))  # Output: False\nprint(check_equality(\"a\"))      # Output: True\nprint(check_equality(\"\"))       # Output: False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpc1gb7dex.py\", line 9, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 56, "requirement": "Code Complexity", "completion": "def check(number):\n    # Reverse the number by converting it to a string, reversing the string, and converting back to an integer\n    reversed_number = int(str(number)[::-1])\n    \n    # Return the result of the comparison directly\n    return number == 2 * reversed_number - 1\n\n# Example usage:\nprint(check(37))  # True, because 37 is one less than twice 73 (73 * 2 - 1 = 145)\nprint(check(21))  # False, because 21 is not one less than twice 12 (12 * 2 - 1 = 23)\n", "result": "passed", "passed": true}
{"task_id": 58, "requirement": "Code Complexity", "completion": "def opposite_signs(x, y):\n    \"\"\"\n    Check if two integers have opposite signs.\n\n    Parameters:\n    x (int): First integer.\n    y (int): Second integer.\n\n    Returns:\n    bool: True if x and y have opposite signs, False otherwise.\n    \"\"\"\n    # Using bitwise XOR to check if the sign bits are different\n    return (x ^ y) < 0\n\n# Example usage:\nprint(opposite_signs(10, -5))  # Output: True\nprint(opposite_signs(-10, 5))  # Output: True\nprint(opposite_signs(10, 5))   # Output: False\nprint(opposite_signs(-10, -5)) # Output: False\n", "result": "passed", "passed": true}

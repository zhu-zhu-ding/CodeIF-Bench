{"task_id": 11, "requirement": "Functionality Extension", "completion": "def remove_occ(s, char, all=False):\n    \"\"\"\n    Remove the first and last occurrence of a given character from the string,\n    or remove all occurrences if 'all' is set to True.\n\n    Parameters:\n    s (str): The input string.\n    char (str): The character to remove.\n    all (bool): If True, remove all occurrences of the character.\n\n    Returns:\n    str: The modified string with the specified occurrences of the character removed.\n    \"\"\"\n    if all:\n        # Remove all occurrences of the character\n        return s.replace(char, \"\")\n    else:\n        # Find the first occurrence of the character\n        first_index = s.find(char)\n        \n        # Find the last occurrence of the character\n        last_index = s.rfind(char)\n        \n        # If the character is not found or only occurs once, return the original string\n        if first_index == -1 or first_index == last_index:\n            return s\n        \n        # Remove the first and last occurrence of the character\n        s = s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]\n        \n        return s\n\n# Example usage:\nstring = \"abracadabra\"\nchar_to_remove = \"a\"\n\n# Remove first and last occurrence\nresult = remove_occ(string, char_to_remove)\nprint(result)  # Output: \"bracadabr\"\n\n# Remove all occurrences\nresult_all = remove_occ(string, char_to_remove, all=True)\nprint(result_all)  # Output: \"brcdbr\"\n", "result": "passed", "passed": true}
{"task_id": 12, "requirement": "Functionality Extension", "completion": "def sort_matrix(matrix):\n    \"\"\"\n    Sorts a matrix in ascending order based on the sum of its rows,\n    treating missing values as zeros.\n\n    Parameters:\n    matrix (list of list of int/float): The input matrix to be sorted.\n\n    Returns:\n    list of list of int/float: The sorted matrix.\n    \"\"\"\n    # Determine the length of the longest row\n    max_length = max(len(row) for row in matrix)\n    \n    # Function to calculate the sum of a row, treating missing values as zeros\n    def row_sum(row):\n        # Pad the row with zeros to match the length of the longest row\n        padded_row = row + [0] * (max_length - len(row))\n        return sum(padded_row)\n    \n    # Sort the matrix using the row_sum function as the key\n    sorted_matrix = sorted(matrix, key=row_sum)\n    return sorted_matrix\n\n# Example usage:\nmatrix = [\n    [3, 4, 2],\n    [1, 2],\n    [5],\n    [2, 2, 2, 1]\n]\n\nsorted_matrix = sort_matrix(matrix)\nprint(\"Sorted Matrix:\")\nfor row in sorted_matrix:\n    print(row)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmptdcyrs9r.py\", line 23, in <module>\n    assert sort_matrix([[1, 2, 3], [4, 5], [6]]) == [[6], [4, 5], [1, 2, 3]]\nAssertionError", "passed": false}
{"task_id": 13, "requirement": "Functionality Extension", "completion": "from collections import Counter\n\ndef count_common(word_dict, n=1):\n    \"\"\"\n    Count the most common words in a dictionary.\n\n    Parameters:\n    - word_dict: A dictionary where keys are words and values are their frequencies.\n    - n: An optional parameter specifying the number of top frequent words to return. Default is 1.\n\n    Returns:\n    - A list of tuples containing the most common words and their counts.\n    \"\"\"\n    # Use Counter to find the n most common words\n    counter = Counter(word_dict)\n    most_common_words = counter.most_common(n)\n    \n    return most_common_words\n\n# Example usage:\nword_frequencies = {\n    'apple': 4,\n    'banana': 2,\n    'orange': 5,\n    'grape': 3\n}\n\n# Get the top 2 most common words\nprint(count_common(word_frequencies, 2))  # Output: [('orange', 5), ('apple', 4)]\n\n# Get the top 3 most common words\nprint(count_common(word_frequencies, 3))  # Output: [('orange', 5), ('apple', 4), ('grape', 3)]\n\n# Get the top 1 most common word (default behavior)\nprint(count_common(word_frequencies))     # Output: [('orange', 5)]\n", "result": "passed", "passed": true}
{"task_id": 14, "requirement": "Functionality Extension", "completion": "def find_volume(dimensions):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    dimensions (list or tuple): A list or tuple containing three elements:\n                                [base_length, triangle_height, prism_height]\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    if not isinstance(dimensions, (list, tuple)) or len(dimensions) != 3:\n        raise ValueError(\"Input must be a list or tuple with three elements: [base_length, triangle_height, prism_height]\")\n\n    base_length, triangle_height, prism_height = dimensions\n\n    # Calculate the area of the triangular base\n    base_area = 0.5 * base_length * triangle_height\n    \n    # Calculate the volume of the prism\n    volume = base_area * prism_height\n    \n    return volume\n\n# Example usage:\n# dimensions = [5, 4, 10]\n# volume = find_volume(dimensions)\n# print(volume)  # Output: 100.0\n", "result": "passed", "passed": true}
{"task_id": 15, "requirement": "Functionality Extension", "completion": "import re\n\ndef split_lowerstring(s, include_lower=False):\n    # Use a regular expression to find all segments starting with a lowercase letter\n    if include_lower:\n        # This pattern captures segments starting with a lowercase letter\n        # The pattern '([a-z].*?)(?=[A-Z]|$)' captures a lowercase letter followed by any characters until an uppercase letter or end of string\n        pattern = r'([a-z].*?)(?=[A-Z]|$)'\n    else:\n        # This pattern splits the string at lowercase letters without including them\n        # The pattern '(?=[a-z])' is a positive lookahead that matches a position before a lowercase letter\n        pattern = r'(?=[a-z])'\n    \n    # Use re.split or re.findall based on the requirement\n    if include_lower:\n        # Use re.findall to capture segments including lowercase letters\n        segments = re.findall(pattern, s)\n    else:\n        # Use re.split to split the string at lowercase letters\n        segments = re.split(pattern, s)\n    \n    return segments\n\n# Example usage:\nexample_string = \"HelloWorldThisIsATest\"\nresult_without_lower = split_lowerstring(example_string)\nresult_with_lower = split_lowerstring(example_string, include_lower=True)\n\nprint(\"Without including lowercase letters:\", result_without_lower)\nprint(\"Including lowercase letters:\", result_with_lower)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpb46xhiy5.py\", line 26, in <module>\n    assert split_lowerstring('AbCd', include_lower=True) == ['Ab', 'Cd']\nAssertionError", "passed": false}
{"task_id": 16, "requirement": "Functionality Extension", "completion": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Checks if there are sequences of lowercase letters joined with underscores in the given text.\n\n    Parameters:\n    text (str): The input string to search within.\n\n    Returns:\n    str: 'Found a match!' if at least one sequence matches, otherwise 'No match found.'\n    \"\"\"\n    # Define the regular expression pattern\n    pattern = r'\\b[a-z]+(?:_[a-z]+)+\\b'\n    \n    # Use re.search to check if there is at least one match of the pattern in the text\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'No match found.'\n\n# Example usage:\ntext = \"Here are some examples: this_is_a_test, another_example, and not_thisOne.\"\nprint(text_lowercase_underscore(text))  # Output: 'Found a match!'\n\ntext_no_match = \"This text has no matching pattern.\"\nprint(text_lowercase_underscore(text_no_match))  # Output: 'No match found.'\n", "result": "passed", "passed": true}
{"task_id": 17, "requirement": "Functionality Extension", "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square, rounding the side length to the nearest integer.\n\n    Parameters:\n    side_length (float): The length of one side of the square.\n\n    Returns:\n    int: The perimeter of the square.\n    \"\"\"\n    # Round the side length to the nearest integer\n    rounded_side_length = round(side_length)\n    \n    if rounded_side_length < 0:\n        raise ValueError(\"Side length cannot be negative after rounding.\")\n    \n    # Calculate the perimeter\n    perimeter = 4 * rounded_side_length\n    \n    return perimeter\n\n# Example usage:\n# perimeter = square_perimeter(5.6)\n# print(perimeter)  # Output: 24\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmp71sai_.py\", line 12, in <module>\n    assert square_perimeter(4.5) == 20\nAssertionError", "passed": false}
{"task_id": 18, "requirement": "Functionality Extension", "completion": "def remove_dirty_chars(source: str, dirty: str) -> str:\n    # Convert both strings to lowercase for case-insensitive comparison\n    source_lower = source.lower()\n    dirty_set = set(dirty.lower())\n    \n    # Use a list comprehension to filter out characters from 'source' that are in 'dirty_set'\n    cleaned_chars = [char for char, char_lower in zip(source, source_lower) if char_lower not in dirty_set]\n    \n    # Join the filtered characters back into a string\n    cleaned_string = ''.join(cleaned_chars)\n    \n    return cleaned_string\n\n# Example usage:\nsource_string = \"Hello World\"\ndirty_string = \"lo\"\ncleaned_string = remove_dirty_chars(source_string, dirty_string)\nprint(cleaned_string)  # Output: \"He Wr\"\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmptnemcbja.py\", line 15, in <module>\n    assert remove_dirty_chars('HelloWorld', 'hELLO') == 'World', 'Function should handle case-insensitive character removal.'\nAssertionError: Function should handle case-insensitive character removal.", "passed": false}
{"task_id": 19, "requirement": "Functionality Extension", "completion": "def test_duplicate(arr):\n    \"\"\"\n    Function to find duplicate elements in the array.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    list: A list of duplicate elements. Returns an empty list if no duplicates are found.\n    \"\"\"\n    seen = set()\n    duplicates = set()\n    \n    for num in arr:\n        if num in seen:\n            duplicates.add(num)\n        else:\n            seen.add(num)\n    \n    return list(duplicates)\n\n# Example usage:\n# print(test_duplicate([1, 2, 3, 4, 5]))  # Output: []\n# print(test_duplicate([1, 2, 3, 4, 5, 3, 2]))  # Output: [2, 3]\n", "result": "passed", "passed": true}
{"task_id": 20, "requirement": "Functionality Extension", "completion": "def is_woodall(number):\n    if number < 0:\n        return False\n    \n    def generate_woodall_numbers(limit):\n        woodall_numbers = []\n        n = 1\n        while True:\n            woodall_number = n * (2 ** n) - 1\n            if woodall_number > limit:\n                break\n            woodall_numbers.append(woodall_number)\n            n += 1\n        return woodall_numbers\n\n    if isinstance(number, int) and number > 0:\n        return generate_woodall_numbers(number)\n    else:\n        n = 1\n        while True:\n            woodall_number = n * (2 ** n) - 1\n            if woodall_number == number:\n                return True\n            elif woodall_number > number:\n                return False\n            n += 1\n\n# Example usage:\nprint(is_woodall(23))  # True, because 23 is a Woodall number\nprint(is_woodall(10))  # False, 10 is not a Woodall number\nprint(is_woodall(50))  # [1, 7, 23, 63], list of Woodall numbers up to 50\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvkomp7nc.py\", line 30, in <module>\n    assert is_woodall(15) == [1, 7, 15]\nAssertionError", "passed": false}
{"task_id": 21, "requirement": "Functionality Extension", "completion": "def multiples_of_num(n, m):\n    \"\"\"\n    Returns a list of the first m multiples of n, where n can be an integer or a floating-point number.\n\n    Parameters:\n    n (float): The number to find multiples of.\n    m (int): The number of multiples to find.\n\n    Returns:\n    list: A list containing the first m multiples of n as floating-point numbers.\n    \"\"\"\n    if m <= 0:\n        return []  # Return an empty list if m is zero or negative\n\n    multiples = []\n    for i in range(1, m + 1):\n        multiples.append(n * i)\n    \n    return multiples\n\n# Example usage:\nn = 2.5\nm = 5\nprint(multiples_of_num(n, m))  # Output: [2.5, 5.0, 7.5, 10.0, 12.5]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvj_eahtw.py\", line 12, in <module>\n    assert multiples_of_num(3, 2.5) == [2.5, 5.0, 7.5]\n  File \"/tmp/tmpvj_eahtw.py\", line 5, in multiples_of_num\n    for i in range(1, m + 1):\nTypeError: 'float' object cannot be interpreted as an integer", "passed": false}
{"task_id": 22, "requirement": "Functionality Extension", "completion": "def find_all_duplicates(arr):\n    seen = set()\n    duplicates = []\n    for num in arr:\n        if num in seen:\n            if num not in duplicates:\n                duplicates.append(num)\n        else:\n            seen.add(num)\n    return duplicates\n\n# Example usage:\narr = [2, 1, 3, 5, 3, 2, 4, 5]\nprint(find_all_duplicates(arr))  # Output: [3, 2, 5]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1hr_o659.py\", line 14, in <module>\n    assert find_first_duplicate([1, 2, 3, 2, 4, 5, 4]) == [2, 4]\nNameError: name 'find_first_duplicate' is not defined", "passed": false}
{"task_id": 23, "requirement": "Functionality Extension", "completion": "def maximum_sum(list_of_lists):\n    # Check if the input is empty\n    if not list_of_lists:\n        return 0\n    \n    # Initialize a variable to keep track of the maximum sum\n    max_sum = float('-inf')\n    \n    # Iterate over each list in the list of lists\n    for inner_list in list_of_lists:\n        # Calculate the sum of the current inner list\n        current_sum = sum(inner_list)\n        \n        # Update max_sum if the current_sum is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum\n\n# Example usage:\nlist_of_lists = [[-1, -2, -3], [-4, -5, -6], [-7, -8, -9]]\nprint(maximum_sum(list_of_lists))  # Output: -6\n\nlist_of_lists_with_mixed_numbers = [[-1, 2, 3], [4, -5, 6], [-7, 8, -9]]\nprint(maximum_sum(list_of_lists_with_mixed_numbers))  # Output: 5\n", "result": "passed", "passed": true}
{"task_id": 24, "requirement": "Functionality Extension", "completion": "def binary_to_decimal(binary_str):\n    \"\"\"\n    Convert a binary number (given as a string) to its decimal equivalent.\n\n    Parameters:\n    binary_str (str): A string representing a binary number (e.g., '001011').\n\n    Returns:\n    int: The decimal equivalent of the binary number.\n    \"\"\"\n    decimal_number = 0\n    binary_str = binary_str.strip()  # Remove any leading/trailing whitespace\n\n    # Iterate over the binary string, starting from the least significant bit\n    for index, digit in enumerate(reversed(binary_str)):\n        if digit not in ('0', '1'):\n            raise ValueError(\"Input string is not a valid binary number.\")\n        # Calculate the decimal value of the current bit and add it to the total\n        decimal_number += int(digit) * (2 ** index)\n\n    return decimal_number\n\n# Example usage:\nbinary_number = '001011'\ndecimal_number = binary_to_decimal(binary_number)\nprint(f\"The decimal equivalent of binary {binary_number} is {decimal_number}.\")\n", "result": "passed", "passed": true}
{"task_id": 25, "requirement": "Functionality Extension", "completion": "def find_product(arr):\n    # Dictionary to store the count of each element\n    element_count = {}\n    \n    # Count the occurrences of each element in the array\n    for num in arr:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n    \n    # Calculate the product of non-repeated elements\n    product = 1\n    has_non_repeated = False\n    for num, count in element_count.items():\n        if count == 1:\n            product *= num\n            has_non_repeated = True\n    \n    # If there are no non-repeated elements, return 0\n    return product if has_non_repeated else 0\n\n# Example usage with negative numbers:\narr = [2, -3, 4, 2, -5, 3, 6, -3]\nprint(find_product(arr))  # Output: -120 (4 * -5 * 6)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppyaxcne7.py\", line 22, in <module>\n    assert find_product([-1, -2, 3, 3], 4) == 2\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "requirement": "Functionality Extension", "completion": "def check_k_elements(tuple_list, k):\n    \"\"\"\n    Check how many tuples in the given list have exactly k elements.\n\n    Parameters:\n    tuple_list (list of tuples): The list of tuples to check.\n    k (int): The number of elements each tuple should have.\n\n    Returns:\n    int: The count of tuples that have exactly k elements.\n    \"\"\"\n    count = 0\n    for t in tuple_list:\n        if len(t) == k:\n            count += 1\n    return count\n\n# Example usage:\ntuples = [(1, 2), (3, 4), (5, 6)]\nk = 2\nprint(check_k_elements(tuples, k))  # Output: 3\n\ntuples = [(1, 2, 3), (4, 5), (6, 7, 8)]\nk = 2\nprint(check_k_elements(tuples, k))  # Output: 0\n\ntuples = [(1, 2, 3), (4, 5), (6, 7, 8), (9, 10, 11)]\nk = 3\nprint(check_k_elements(tuples, k))  # Output: 3\n", "result": "passed", "passed": true}
{"task_id": 27, "requirement": "Functionality Extension", "completion": "def remove(strings, additional_chars=''):\n    # Combine digits with additional characters to be removed\n    chars_to_remove = '0123456789' + additional_chars\n    \n    # Create a translation table that maps each character to None\n    translation_table = str.maketrans('', '', chars_to_remove)\n    \n    # Use list comprehension to apply the translation table to each string\n    return [s.translate(translation_table) for s in strings]\n\n# Example usage:\nstrings = [\"hello123\", \"world456!\", \"python789\"]\nresult = remove(strings, additional_chars='!')\nprint(result)  # Output: ['hello', 'world', 'python']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqmyp1ygu.py\", line 12, in <module>\n    assert remove_extended(['abcd123', '456defg'], 'abcdef') == ['d', 'g']\nNameError: name 'remove_extended' is not defined", "passed": false}
{"task_id": 28, "requirement": "Functionality Extension", "completion": "def binomial_coeff(n, k):\n    # If k is more than n, the result is 0\n    if k < 0 or k > n:\n        return 0\n    # If k is 0 or k equals n, the result is 1\n    if k == 0 or k == n:\n        return 1\n    \n    # Use the property C(n, k) = C(n, n-k)\n    k = min(k, n - k)\n    \n    # Create a table to store results of subproblems\n    C = [0] * (k + 1)\n    C[0] = 1  # Base case: C(n, 0) = 1\n    \n    # Calculate value of Binomial Coefficient in bottom-up manner\n    for i in range(1, n + 1):\n        # Compute next row of pascal triangle using the previous row\n        for j in range(min(i, k), 0, -1):\n            C[j] = C[j] + C[j - 1]\n    \n    return C[k]\n\n# Example usage:\nn = 1000\nk = 500\nprint(f\"Binomial Coefficient C({n}, {k}) is {binomial_coeff(n, k)}\")\n", "result": "passed", "passed": true}
{"task_id": 29, "requirement": "Functionality Extension", "completion": "from typing import List\n\ndef get_odd_occurrence(arr: List[int], arr_size: int) -> List[int]:\n    # Create a dictionary to store the count of each element\n    count_dict = {}\n    \n    # Count the occurrences of each element in the array\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Find all elements with an odd count\n    odd_occurrences = [num for num, count in count_dict.items() if count % 2 != 0]\n    \n    return odd_occurrences\n\n# Example usage:\narr = [1, 2, 3, 2, 3, 1, 3, 4, 4, 5, 5, 5]\narr_size = len(arr)\nresult = get_odd_occurrence(arr, arr_size)\nprint(result)  # Output: [3, 5]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwcj2m52c.py\", line 19, in <module>\n    assert get_odd_occurrence([1, 2, 3, 1, 2, 3, 1, 3]) == [1, 3]\nTypeError: get_odd_occurrence() missing 1 required positional argument: 'arr_size'", "passed": false}
{"task_id": 30, "requirement": "Functionality Extension", "completion": "def count_substring_with_equal_ends(s):\n    # Dictionary to store the frequency of each alphabetic character\n    frequency = {}\n    \n    # Count the frequency of each alphabetic character in the string\n    for char in s:\n        if char.isalpha():  # Check if the character is alphabetic\n            if char in frequency:\n                frequency[char] += 1\n            else:\n                frequency[char] = 1\n    \n    # Calculate the number of substrings for each alphabetic character\n    count = 0\n    for char in frequency:\n        n = frequency[char]\n        count += (n * (n + 1)) // 2\n    \n    return count\n\n# Example usage:\ns = \"abc ab!@#\"\nprint(count_substring_with_equal_ends(s))  # Output: 7\n", "result": "passed", "passed": true}
{"task_id": 31, "requirement": "Functionality Extension", "completion": "from collections import defaultdict\nimport heapq\n\ndef func(lists, k):\n    # If k is zero, return an empty list immediately\n    if k == 0:\n        return []\n    \n    # Dictionary to store the frequency of each integer\n    frequency = defaultdict(int)\n    \n    # Count the frequency of each integer across all lists\n    for lst in lists:\n        for num in lst:\n            frequency[num] += 1\n    \n    # Use a min-heap to keep track of the top k most frequent elements\n    min_heap = []\n    \n    for num, freq in frequency.items():\n        # Push the current number and its frequency onto the heap\n        heapq.heappush(min_heap, (freq, num))\n        \n        # If the heap size exceeds k, remove the smallest element\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    \n    # Extract the numbers from the heap, which are the top k frequent elements\n    top_k = [num for freq, num in min_heap]\n    \n    # Return the top k elements sorted by frequency and then by number\n    return sorted(top_k, key=lambda x: (-frequency[x], x))\n\n# Example usage:\nlists = [\n    [1, 2, 3],\n    [2, 3, 4],\n    [3, 4, 5],\n    [1, 3, 5]\n]\nk = 0\nprint(func(lists, k))  # Output: []\n", "result": "passed", "passed": true}
{"task_id": 32, "requirement": "Functionality Extension", "completion": "def max_prime_factors(n, return_all=False):\n    # List to store all prime factors\n    prime_factors = []\n    \n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        prime_factors.append(2)\n        n //= 2\n    \n    # Check for odd factors from 3 onwards\n    factor = 3\n    while factor * factor <= n:\n        while n % factor == 0:\n            prime_factors.append(factor)\n            n //= factor\n        factor += 2\n    \n    # If n is still greater than 2, then it is a prime number\n    if n > 2:\n        prime_factors.append(n)\n    \n    # Return all prime factors if return_all is True, otherwise return the largest\n    if return_all:\n        return prime_factors\n    else:\n        return prime_factors[-1] if prime_factors else None\n\n# Example usage:\nnumber = 13195\nprint(f\"The largest prime factor of {number} is {max_prime_factors(number)}\")\nprint(f\"All prime factors of {number} are {max_prime_factors(number, return_all=True)}\")\n", "result": "passed", "passed": true}
{"task_id": 33, "requirement": "Functionality Extension", "completion": "def decimal_to_binary(decimal_numbers):\n    def convert_single_number(decimal_number):\n        if decimal_number == 0:\n            return \"0\"\n        \n        binary_number = \"\"\n        is_negative = decimal_number < 0\n        decimal_number = abs(decimal_number)\n        \n        while decimal_number > 0:\n            remainder = decimal_number % 2\n            binary_number = str(remainder) + binary_number\n            decimal_number = decimal_number // 2\n        \n        if is_negative:\n            binary_number = \"-\" + binary_number\n        \n        return binary_number\n\n    # Check if the input is a list\n    if isinstance(decimal_numbers, list):\n        return [convert_single_number(num) for num in decimal_numbers]\n    else:\n        # If it's a single number, convert it directly\n        return convert_single_number(decimal_numbers)\n\n# Example usage:\nprint(decimal_to_binary([10, 0, -10]))  # Output: ['1010', '0', '-1010']\nprint(decimal_to_binary(5))             # Output: '101'\n", "result": "passed", "passed": true}
{"task_id": 34, "requirement": "Functionality Extension", "completion": "def find_missing(arr):\n    \"\"\"\n    Find all missing numbers in a sorted array of consecutive numbers.\n\n    :param arr: List[int] - A sorted list of consecutive numbers with some missing.\n    :return: List[int] - A list of all missing numbers.\n    \"\"\"\n    if not arr:\n        return []\n\n    missing_numbers = []\n    # Iterate through the array and check for missing numbers\n    for i in range(1, len(arr)):\n        # Calculate the expected number at the current position\n        expected_number = arr[i - 1] + 1\n        # If the current number is not the expected number, there are missing numbers\n        while arr[i] != expected_number:\n            missing_numbers.append(expected_number)\n            expected_number += 1\n\n    return missing_numbers\n\n# Example usage:\narr = [1, 2, 4, 5, 7, 8, 10]\nprint(find_missing(arr))  # Output: [3, 6, 9]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpsvj0lk09.py\", line 17, in <module>\n    assert find_missing([1,3,6], 3) == [2, 4, 5]\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "requirement": "Functionality Extension", "completion": "def find_rect_num(numbers):\n    \"\"\"\n    Calculate the rectangular numbers for a list of integers.\n\n    Parameters:\n    numbers (list of int): A list of integers for which to find the rectangular numbers.\n\n    Returns:\n    list of int: A list of rectangular numbers corresponding to the input integers.\n    \"\"\"\n    if not all(isinstance(n, int) and n > 0 for n in numbers):\n        raise ValueError(\"All elements in the list must be positive integers.\")\n    \n    return [n * (n + 1) for n in numbers]\n\n# Example usage:\nnumbers = [1, 2, 3, 4, 5]\nrect_nums = find_rect_num(numbers)\nprint(f\"The rectangular numbers for {numbers} are: {rect_nums}\")\n", "result": "passed", "passed": true}
{"task_id": 36, "requirement": "Functionality Extension", "completion": "def find_nth_digit(numerator, denominator, n):\n    if denominator == 0:\n        raise ValueError(\"Denominator cannot be zero.\")\n    \n    # Calculate the absolute value of the fraction\n    fraction = abs(numerator / denominator)\n    \n    # Convert the fraction to a string to easily access the decimal part\n    fraction_str = str(fraction)\n    \n    # Find the position of the decimal point\n    decimal_point_index = fraction_str.find('.')\n    \n    # If there is no decimal point, it means the fraction is a whole number\n    if decimal_point_index == -1:\n        return 0  # No fractional part, so the nth digit is 0\n    \n    # Extract the fractional part\n    fractional_part = fraction_str[decimal_point_index + 1:]\n    \n    # Check if the nth digit exists in the fractional part\n    if n > len(fractional_part):\n        return 0  # If n is greater than the length of the fractional part, return 0\n    \n    # Return the nth digit as an integer\n    return int(fractional_part[n - 1])\n\n# Example usage:\nnumerator = -1\ndenominator = 3\nn = 5\nprint(find_nth_digit(numerator, denominator, n))  # Output: 3\n", "result": "passed", "passed": true}
{"task_id": 37, "requirement": "Functionality Extension", "completion": "def sort_mixed_list(mixed_list, reverse_strings=False):\n    # Separate integers and strings\n    int_list = [item for item in mixed_list if isinstance(item, int)]\n    str_list = [item for item in mixed_list if isinstance(item, str)]\n    \n    # Sort the integer list in ascending order\n    int_list.sort()\n    \n    # Sort the string list, optionally in reverse order\n    str_list.sort(reverse=reverse_strings)\n    \n    # Combine the sorted lists\n    sorted_list = int_list + str_list\n    return sorted_list\n\n# Example usage:\nmixed_list = [3, 'apple', 1, 'banana', 2, 'cherry']\n\n# Sort with strings in normal order\nsorted_list_normal = sort_mixed_list(mixed_list)\nprint(sorted_list_normal)  # Output: [1, 2, 3, 'apple', 'banana', 'cherry']\n\n# Sort with strings in reverse order\nsorted_list_reverse = sort_mixed_list(mixed_list, reverse_strings=True)\nprint(sorted_list_reverse)  # Output: [1, 2, 3, 'cherry', 'banana', 'apple']\n", "result": "passed", "passed": true}
{"task_id": 38, "requirement": "Functionality Extension", "completion": "def div_even_odd(numbers):\n    first_even = None\n    first_odd = None\n    \n    for num in numbers:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is None:\n        raise ValueError(\"No even number found in the list.\")\n    if first_odd is None:\n        raise ValueError(\"No odd number found in the list.\")\n    if first_odd == 0:\n        raise ZeroDivisionError(\"The first odd number is zero, cannot divide by zero.\")\n    \n    return first_even / first_odd\n\n# Example usage:\nnumbers = [-5, -3, -8, 6, 7]\nresult = div_even_odd(numbers)\nprint(\"Division of first even and odd number:\", result)\n", "result": "passed", "passed": true}
{"task_id": 39, "requirement": "Functionality Extension", "completion": "from itertools import permutations\n\ndef is_valid_permutation(perm):\n    \"\"\"Check if a permutation is valid (no two adjacent characters are the same).\"\"\"\n    for i in range(1, len(perm)):\n        if perm[i] == perm[i - 1]:\n            return False\n    return True\n\ndef rearrange_string(s):\n    # Generate all unique permutations of the string\n    all_perms = set(permutations(s))\n    \n    # Filter permutations to find valid ones\n    valid_perms = [''.join(perm) for perm in all_perms if is_valid_permutation(perm)]\n    \n    return valid_perms\n\n# Example usage:\ns = \"aabb\"\nprint(rearrange_string(s))  # Output could be ['abab', 'baba', 'baba', 'abab']\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpc3q17wfd.py\", line 17, in <module>\n    assert set(rearange_string('aabb')) == {'abab', 'baba'}\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "requirement": "Functionality Extension", "completion": "from collections import Counter\n\ndef flatten(nested_list):\n    \"\"\"Recursively flattens a nested list of arbitrary depth.\"\"\"\n    for element in nested_list:\n        if isinstance(element, list):\n            yield from flatten(element)\n        else:\n            yield element\n\ndef freq_element(nested_list):\n    # Flatten the nested list\n    flat_list = list(flatten(nested_list))\n    \n    # Filter only integers\n    int_list = [element for element in flat_list if isinstance(element, int)]\n    \n    # Use Counter to count the frequency of each integer\n    frequency = Counter(int_list)\n    \n    return frequency\n\n# Example usage:\nnested_list = [[1, 2, [3, 4]], [4, [5, [1, 2]], 3], [2, 3, 4, [4, [5]]]]\nresult = freq_element(nested_list)\nprint(result)\n", "result": "passed", "passed": true}
{"task_id": 41, "requirement": "Functionality Extension", "completion": "def filter_evennumbers(numbers):\n    # First, filter out non-integer elements\n    integers_only = filter(lambda x: isinstance(x, int), numbers)\n    # Then, filter even numbers from the list of integers\n    even_numbers = filter(lambda x: x % 2 == 0, integers_only)\n    return list(even_numbers)\n\n# Example usage:\nmixed_list = [1, 2, 'a', 3.5, 4, 5, 'b', 6, 7.0, 8, 9, 10, None]\neven_numbers = filter_evennumbers(mixed_list)\nprint(even_numbers)  # Output: [2, 4, 6, 8, 10]\n", "result": "passed", "passed": true}
{"task_id": 42, "requirement": "Functionality Extension", "completion": "def find_sum(arr):\n    # Create a dictionary to count occurrences of each element\n    element_count = {}\n    \n    # Count each element in the array\n    for element in arr:\n        if element in element_count:\n            element_count[element] += 1\n        else:\n            element_count[element] = 1\n    \n    # Calculate the sum of elements that are repeated\n    repeated_sum = 0\n    for element, count in element_count.items():\n        if count > 1:\n            repeated_sum += element * count\n    \n    return repeated_sum\n\n# Example usage with negative numbers:\narray = [1, -2, 3, -2, 4, 5, -3, 3, -3]\nprint(find_sum(array))  # Output: -10 (-2*-2 + -3*-2)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpah7lg_ur.py\", line 19, in <module>\n    assert find_sum([-1, -2, -3, -1, -1], 5) == -2\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "requirement": "Functionality Extension", "completion": "import re\n\ndef text_match(text):\n    # Define the regex pattern for sequences of lowercase letters joined by one or more underscores\n    pattern = r'\\b[a-z]+(?:_[a-z]+)+\\b'\n    \n    # Use re.findall to find all matches of the pattern in the input text\n    matches = re.findall(pattern, text)\n    \n    return matches\n\n# Example usage:\nexample_text = \"Here are some examples: abc_def, ghi_jkl_mno, and pqr_stu_vwx.\"\nprint(text_match(example_text))\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppfje0s81.py\", line 11, in <module>\n    assert text_match('abc_def_ghi') == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 45, "requirement": "Functionality Extension", "completion": "from math import gcd\nfrom functools import reduce\n\ndef get_gcd(arr):\n    \"\"\"\n    Calculate the GCD of an array of numbers, ignoring zeros.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The GCD of the non-zero numbers in the list.\n    \"\"\"\n    # Filter out zeros from the list\n    non_zero_elements = [num for num in arr if num != 0]\n    \n    if not non_zero_elements:\n        raise ValueError(\"Array must contain at least one non-zero number.\")\n    \n    return reduce(gcd, non_zero_elements)\n\n# Example usage:\nnumbers = [0, 48, 0, 64, 80, 0]\nresult = get_gcd(numbers)\nprint(f\"The GCD of the non-zero elements in {numbers} is {result}.\")\n", "result": "passed", "passed": true}
{"task_id": 46, "requirement": "Functionality Extension", "completion": "def test_distinct(numbers):\n    \"\"\"\n    Determine whether all numbers in the list are distinct.\n\n    Parameters:\n    numbers (list): A list of numbers (integers or floating-point).\n\n    Returns:\n    bool: True if all numbers are distinct, False otherwise.\n    \"\"\"\n    # Convert the list to a set, which removes duplicates\n    unique_numbers = set(numbers)\n    \n    # Compare the length of the set with the original list\n    return len(unique_numbers) == len(numbers)\n\n# Example usage:\nnumbers_int = [1, 2, 3, 4, 5]\nprint(test_distinct(numbers_int))  # Output: True\n\nnumbers_float = [1.0, 2.0, 3.0, 4.0, 5.0]\nprint(test_distinct(numbers_float))  # Output: True\n\nnumbers_mixed = [1, 2.0, 3, 4.0, 5]\nprint(test_distinct(numbers_mixed))  # Output: True\n\nnumbers_with_duplicates = [1.0, 2.0, 2.0, 4.0, 5.0]\nprint(test_distinct(numbers_with_duplicates))  # Output: False\n", "result": "passed", "passed": true}
{"task_id": 47, "requirement": "Functionality Extension", "completion": "def compute_last_digit(a, b):\n    # Handle the case where a or b is zero\n    if a == 0:\n        if b == 0:\n            return 1  # 0! / 0! = 1\n        else:\n            # Return the last digit of b!\n            last_digit = 1\n            for i in range(1, b + 1):\n                last_digit *= i\n                last_digit %= 10\n            return last_digit\n    elif b == 0:\n        return 0  # b! = 1, and if a > 0, a! cannot divide 1\n    \n    # If a > b, a! does not divide b!\n    if a > b:\n        return 0\n    \n    # Initialize the result as 1 (since we are multiplying)\n    last_digit = 1\n    \n    # Iterate over the range from a+1 to b\n    for i in range(a + 1, b + 1):\n        last_digit *= i\n        last_digit %= 10  # Keep only the last digit\n    \n    return last_digit\n\n# Example usage:\nprint(compute_last_digit(0, 0))  # Output: 1\nprint(compute_last_digit(0, 5))  # Output: 0 (since 5! = 120, last digit is 0)\nprint(compute_last_digit(5, 10)) # Output: 2\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3uadz83c.py\", line 29, in <module>\n    assert compute_last_digit(0, 5) == 1\nAssertionError", "passed": false}
{"task_id": 48, "requirement": "Functionality Extension", "completion": "def odd_bit_set_number(n):\n    # Take the absolute value of the number to handle negative integers\n    abs_n = abs(n)\n    \n    # Create a mask with all odd bits set\n    # For a 32-bit integer, the mask would be: 0b01010101010101010101010101010101\n    # This is equivalent to 0x55555555 in hexadecimal\n    mask = 0x55555555\n    \n    # Set all odd bits of the absolute value using bitwise OR\n    result = abs_n | mask\n    \n    return result\n\n# Example usage:\nnumber = -10  # Binary of absolute value: 1010\nresult = odd_bit_set_number(number)\nprint(f\"Original number: {number} (Absolute value binary: {bin(abs(number))})\")\nprint(f\"Number with odd bits set: {result} (Binary: {bin(result)})\")\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpat8sb2mr.py\", line 16, in <module>\n    assert odd_bit_set_number(-10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "requirement": "Functionality Extension", "completion": "def specified_element(two_d_list, index=0):\n    \"\"\"\n    Extracts every first or specified element from a given two-dimensional list.\n    Supports negative indices to extract elements from the end of each sublist.\n\n    Parameters:\n    two_d_list (list of lists): The input two-dimensional list.\n    index (int): The index of the element to extract from each sublist. Defaults to 0.\n\n    Returns:\n    list: A list containing the extracted elements.\n    \"\"\"\n    extracted_elements = []\n    for sublist in two_d_list:\n        # Check if the index is valid for the current sublist\n        if -len(sublist) <= index < len(sublist):\n            extracted_elements.append(sublist[index])\n        else:\n            # Handle the case where the index is out of range\n            extracted_elements.append(None)  # or any other placeholder value you prefer\n    return extracted_elements\n\n# Example usage:\ntwo_d_list = [[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]\nprint(specified_element(two_d_list))        # Output: [1, 4, 6, 10]\nprint(specified_element(two_d_list, 1))     # Output: [2, 5, 7, None]\nprint(specified_element(two_d_list, 2))     # Output: [3, None, 8, None]\nprint(specified_element(two_d_list, -1))    # Output: [3, 5, 9, 10]\nprint(specified_element(two_d_list, -2))    # Output: [2, 4, 8, None]\n", "result": "passed", "passed": true}
{"task_id": 51, "requirement": "Functionality Extension", "completion": "def check_triangle_type(side1, side2, side3):\n    \"\"\"\n    Check if a triangle is equilateral, isosceles, or neither.\n\n    Parameters:\n    side1 (float): Length of the first side of the triangle.\n    side2 (float): Length of the second side of the triangle.\n    side3 (float): Length of the third side of the triangle.\n\n    Returns:\n    str: A message indicating whether the triangle is equilateral, isosceles, or neither.\n    \"\"\"\n    if side1 <= 0 or side2 <= 0 or side3 <= 0:\n        return \"Invalid side lengths. All sides must be positive numbers.\"\n\n    if side1 == side2 == side3:\n        return \"The triangle is equilateral.\"\n    elif side1 == side2 or side2 == side3 or side1 == side3:\n        return \"The triangle is isosceles.\"\n    else:\n        return \"The triangle is neither equilateral nor isosceles.\"\n\n# Example usage:\nprint(check_triangle_type(5, 5, 5))  # The triangle is equilateral.\nprint(check_triangle_type(5, 5, 3))  # The triangle is isosceles.\nprint(check_triangle_type(5, 4, 3))  # The triangle is neither equilateral nor isosceles.\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpr8jk94j9.py\", line 14, in <module>\n    assert check_equilateral(5, 5, 3) == 'isosceles'\nNameError: name 'check_equilateral' is not defined", "passed": false}
{"task_id": 52, "requirement": "Functionality Extension", "completion": "def parallelogram_area(dimensions):\n    \"\"\"\n    Calculate the areas of multiple parallelograms.\n\n    Parameters:\n    dimensions (list of tuples): A list where each tuple contains two floats,\n                                 the base and height of a parallelogram.\n\n    Returns:\n    list of floats: A list of areas for each parallelogram.\n    \"\"\"\n    areas = []\n    for base, height in dimensions:\n        if base <= 0 or height <= 0:\n            raise ValueError(\"Base and height must be positive numbers.\")\n        area = base * height\n        areas.append(area)\n    \n    return areas\n\n# Example usage:\n# dimensions = [(5, 10), (3, 6), (7, 8)]\n# areas = parallelogram_area(dimensions)\n# print(areas)  # Output: [50, 18, 56]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpk2zala7n.py\", line 13, in <module>\n    assert parallelogram_area_list([(10, 20), (15, 20), (8, 9)]) == [200, 300, 72]\nNameError: name 'parallelogram_area_list' is not defined", "passed": false}
{"task_id": 53, "requirement": "Functionality Extension", "completion": "def check_equality(s):\n    \"\"\"\n    Check if the first and last characters of the string are equal, ignoring case.\n\n    Parameters:\n    s (str): The string to check.\n\n    Returns:\n    bool: True if the first and last characters are equal (case-insensitive), False otherwise.\n    \"\"\"\n    # Check if the string is empty\n    if not s:\n        return False\n    \n    # Convert both characters to lower case and compare\n    return s[0].lower() == s[-1].lower()\n\n# Example usage:\nprint(check_equality(\"Radar\"))  # Output: True\nprint(check_equality(\"Hello\"))  # Output: False\nprint(check_equality(\"A\"))      # Output: True\nprint(check_equality(\"\"))       # Output: False\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkz5id8gl.py\", line 12, in <module>\n    assert check_equality('Abca') == 'Equal'\nAssertionError", "passed": false}
{"task_id": 54, "requirement": "Functionality Extension", "completion": "def counting_sort(arr):\n    if not arr:\n        return arr\n\n    # Find the maximum and minimum values in the array\n    max_val = max(arr)\n    min_val = min(arr)\n\n    # Create a count array to store the count of each unique object\n    # The size of the count array is based on the range of input values\n    range_of_elements = max_val - min_val + 1\n    count = [0] * range_of_elements\n\n    # Store the count of each element in the count array\n    for num in arr:\n        count[num - min_val] += 1\n\n    # Modify the count array by adding the previous counts (cumulative count)\n    for i in range(1, range_of_elements):\n        count[i] += count[i - 1]\n\n    # Output array to store the sorted order\n    output = [0] * len(arr)\n\n    # Build the output array using the count array\n    # Iterate over the input array in reverse to maintain stability\n    for num in reversed(arr):\n        output[count[num - min_val] - 1] = num\n        count[num - min_val] -= 1\n\n    return output\n\n# Example usage:\narr = [4, -2, 2, 8, -3, 3, 1]\nsorted_arr = counting_sort(arr)\nprint(\"Sorted array:\", sorted_arr)\n", "result": "passed", "passed": true}
{"task_id": 55, "requirement": "Functionality Extension", "completion": "def tn_gp(a1, r, t):\n    \"\"\"\n    Calculate the t-th term of a geometric series.\n\n    Parameters:\n    a1 (float): The first term of the geometric series.\n    r (float): The common ratio of the geometric series.\n    t (int): The term number to find.\n\n    Returns:\n    float: The t-th term of the geometric series.\n    \"\"\"\n    if t < 1:\n        raise ValueError(\"The term number t must be a positive integer.\")\n    \n    # Calculate the t-th term using the formula\n    at = a1 * (r ** (t - 1))\n    return float(at)\n\n# Example usage:\nfirst_term = 2.5\ncommon_ratio = 1.5\nterm_number = 5\n\ntth_term = tn_gp(first_term, common_ratio, term_number)\nprint(f\"The {term_number}-th term of the geometric series is: {tth_term}\")\n", "result": "passed", "passed": true}
{"task_id": 56, "requirement": "Functionality Extension", "completion": "def check(number):\n    # Determine if the number is negative\n    is_negative = number < 0\n    \n    # Work with the absolute value of the number for reversal\n    abs_number = abs(number)\n    \n    # Convert the absolute number to a string to easily reverse it\n    str_number = str(abs_number)\n    \n    # Reverse the string representation of the number\n    reversed_str_number = str_number[::-1]\n    \n    # Convert the reversed string back to an integer\n    reversed_number = int(reversed_str_number)\n    \n    # If the original number was negative, make the reversed number negative\n    if is_negative:\n        reversed_number = -reversed_number\n    \n    # Check if the original number is one less than twice the reversed number\n    return number == 2 * reversed_number - 1\n\n# Example usage:\nprint(check(37))   # True, because 37 is one less than twice 73 (73 * 2 - 1 = 145)\nprint(check(21))   # False, because 21 is not one less than twice 12 (12 * 2 - 1 = 23)\nprint(check(-37))  # False, because -37 is not one less than twice -73 (-73 * 2 - 1 = -147)\nprint(check(-73))  # True, because -73 is one less than twice -37 (-37 * 2 - 1 = -75)\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpztx2o53j.py\", line 23, in <module>\n    assert check(-37) == True\nAssertionError", "passed": false}
{"task_id": 57, "requirement": "Functionality Extension", "completion": "def find_max_num(digits):\n    # Convert each digit to a string to facilitate sorting and joining\n    digits_str = [str(digit) for digit in digits]\n    \n    # Sort the digits in descending order\n    digits_str.sort(reverse=True)\n    \n    # Join the sorted digits to form the largest number\n    max_num_str = ''.join(digits_str)\n    \n    # Convert the result back to an integer\n    max_num = int(max_num_str)\n    \n    return max_num\n\n# Example usage:\ndigits = [3, 1, 4, 1, 5, 9, 1, 5]\nlargest_number = find_max_num(digits)\nprint(largest_number)  # Output: 99543111\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgo2xvpsn.py\", line 15, in <module>\n    assert find_max_num([1, 1, 2, 2], 4) == 2211\nTypeError: find_max_num() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 58, "requirement": "Functionality Extension", "completion": "def opposite_signs(pairs):\n    \"\"\"\n    Check if each pair of integers in the list has opposite signs.\n\n    Parameters:\n    pairs (list of tuples): A list where each element is a tuple containing two integers.\n\n    Returns:\n    list of bool: A list of boolean values where each value is True if the corresponding pair has opposite signs, False otherwise.\n    \"\"\"\n    results = []\n    for x, y in pairs:\n        # Using bitwise XOR to check if the sign bits are different\n        results.append((x ^ y) < 0)\n    return results\n\n# Example usage:\npairs = [(10, -5), (-10, 5), (10, 5), (-10, -5)]\nprint(opposite_signs(pairs))  # Output: [True, True, False, False]\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmhve8mcp.py\", line 10, in <module>\n    assert opposite_signs_list([(1, -2), (3, 2), (-10, -10)]) == [True, False, False]\nNameError: name 'opposite_signs_list' is not defined", "passed": false}
{"task_id": 59, "requirement": "Functionality Extension", "completion": "def is_octagonal(n):\n    \"\"\"\n    Calculate the nth octagonal number or a list of the first n octagonal numbers.\n\n    Parameters:\n    n (int or list): The position(s) of the octagonal number(s) to find.\n\n    Returns:\n    int or list: The nth octagonal number or a list of octagonal numbers.\n    \"\"\"\n    def calculate_octagonal(num):\n        if num < 1:\n            raise ValueError(\"Each number in the list must be a positive integer.\")\n        return num * (3 * num - 2)\n    \n    if isinstance(n, int):\n        return calculate_octagonal(n)\n    elif isinstance(n, list):\n        return [calculate_octagonal(num) for num in n]\n    else:\n        raise TypeError(\"Input must be an integer or a list of integers.\")\n\n# Example usage:\nn_single = 5\noctagonal_number_single = is_octagonal(n_single)\nprint(f\"The {n_single}th octagonal number is {octagonal_number_single}\")\n\nn_list = [1, 2, 3, 4, 5]\noctagonal_numbers_list = is_octagonal(n_list)\nprint(f\"The octagonal numbers for the list {n_list} are {octagonal_numbers_list}\")\n", "result": "passed", "passed": true}
{"task_id": 60, "requirement": "Functionality Extension", "completion": "def max_len_sub(arr):\n    if not arr:\n        return 0\n\n    # Dictionary to store the length of the longest subsequence ending at each index\n    dp = [{} for _ in range(len(arr))]\n    max_length = 1\n\n    for i in range(len(arr)):\n        for j in range(i):\n            diff = arr[i] - arr[j]\n            # If there is already a subsequence with this difference ending at j, extend it\n            if diff in dp[j]:\n                dp[i][diff] = dp[j][diff] + 1\n            else:\n                # Otherwise, start a new subsequence with length 2 (arr[j], arr[i])\n                dp[i][diff] = 2\n\n            # Update the maximum length found so far\n            max_length = max(max_length, dp[i][diff])\n\n    return max_length\n\n# Example usage:\narr = [9, 4, 7, 2, 10]\nprint(max_len_sub(arr))  # Output: 3 (subsequence: [9, 7, 10] or [4, 7, 10])\n", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3p7oew0s.py\", line 22, in <module>\n    assert max_len_sub([10, 7, 4, 1, -2], -3) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}

{"task_id": 14, "completion": "def find_volume(base_area, height, length):\n    if base_area <= 0 or height <= 0 or length <= 0:\n        raise ValueError(\"All inputs must be positive numbers.\")\n    return base_area * height * length\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpptv8hy8j.py\", line 6, in <module>\n    assert find_volume(10,8,6) == 240\nAssertionError", "passed": false}
{"task_id": 15, "completion": "def split_lowerstring(s):\n    return [segment for segment in s.split() if segment.islower()]\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp713qoemb.py\", line 4, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(s):\n    if re.search(r'[a-z]+_[a-z]+', s):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpj63s0pqk.py\", line 11, in <module>\n    assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    if not isinstance(side_length, int) or side_length < 0:\n        raise ValueError(\"The side length of a square must be a non-negative integer.\")\n    return 4 * side_length\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(s1, s2):\n    # Check if the input strings only contain alphabetic characters\n    if not s1.isalpha() or not s2.isalpha():\n        raise ValueError('Input strings must only contain alphabetic characters.')\n\n    # Remove characters from s1 which are present in s2\n    result = ''.join(c for c in s1 if c not in s2)\n\n    return result\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 19, "completion": "def test_duplicate(lst):\n    if not isinstance(lst, list):\n        raise TypeError(\"Input should be a list\")\n    return len(lst) != len(set(lst))\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(n):\n    i = 0\n    while True:\n        woodall_num = 2**i * i - 1\n        if woodall_num == n:\n            return True\n        if woodall_num > n:\n            return False\n        i += 1\n\n# Test the function\nprint(is_woodall(7))  # True, because 7 is a Woodall number (2*1*2^1 - 1)\nprint(is_woodall(15))  # True, because 15 is a Woodall number (2*2*2^2 - 1)\nprint(is_woodall(10))  # False, because 10 is not a Woodall number\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists):\n    return max(sum(sublist) for sublist in list_of_lists)\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 25, "completion": "def find_product(lst):\n    # Create a dictionary to store the count of each element\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Initialize the product to 1\n    product = 1\n\n    # Multiply the product by each element that appears only once\n    for num, count in count_dict.items():\n        if count == 1:\n            product *= num\n\n    return product\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpn89o5_hr.py\", line 20, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(tuple_list, k):\n    for t in tuple_list:\n        if len(t) != k:\n            return False\n    return True\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpw_9k72xi.py\", line 7, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 28, "completion": "def binomial_coeff(n, k):\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    if k > n - k:\n        k = n - k\n    result = 1\n    for i in range(1, k+1):\n        result = result * (n - i + 1) // i\n    return result\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i] == s[j-1]:\n                count += 1\n    return count\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 35, "completion": "def find_rect_num(n):\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    return n * (n + 1) * (n + 2) // 6\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp06yeokj2.py\", line 7, in <module>\n    assert find_rect_num(5) == 30\nAssertionError", "passed": false}
{"task_id": 36, "completion": "def find_nth_digit(num1, num2, n):\n    # Convert the numbers to strings to get the decimal representation\n    decimal_str = str(num1 / num2)\n\n    # Remove the decimal point\n    decimal_str = decimal_str.replace('.', '')\n\n    # Check if n is out of range\n    if n > len(decimal_str):\n        return -1\n\n    # Return the nth digit\n    return int(decimal_str[n])\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 38, "completion": "def div_even_odd(lst):\n    even = [x for x in lst if x % 2 == 0]\n    odd = [x for x in lst if x % 2 != 0]\n    if even and odd:\n        return even[0] / odd[0]\n    else:\n        return \"No even or odd number in the list\"\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 39, "completion": "def rearrange_string(s):\n    # Sort the string\n    sorted_s = ''.join(sorted(s))\n    \n    # Rearrange the string\n    rearranged_s = sorted_s[0]\n    for i in range(1, len(sorted_s)):\n        if sorted_s[i] != sorted_s[i-1]:\n            rearranged_s += sorted_s[i]\n    \n    return rearranged_s\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8lephq_1.py\", line 13, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 42, "completion": "def find_sum(arr):\n    # Create a dictionary to store the count of each element\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Find the sum of the elements that appear more than once\n    sum_repeated = 0\n    for num, count in count_dict.items():\n        if count > 1:\n            sum_repeated += num * count\n\n    return sum_repeated\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3dgjm1rk.py\", line 18, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    pattern = '[_]?[a-z]+[_]?[a-z]+'\n    if re.search(pattern, text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'\n\n# Test the function\nprint(text_match('hello_world'))  # Should return 'Matched!'\nprint(text_match('Hello_World'))  # Should return 'Not matched!' because it contains uppercase letters\nprint(text_match('hello_world123'))  # Should return 'Not matched!' because it contains numbers\nprint(text_match('hello'))  # Should return 'Not matched!' because it does not contain an underscore\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpou4bt_6g.py\", line 16, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 46, "completion": "def test_distinct(lst):\n    return len(lst) == len(set(lst))\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 48, "completion": "def odd_bit_set_number(n):\n    # Convert the number to binary and reverse it\n    binary = bin(n)[2:][::-1]\n    \n    # Iterate over the binary string\n    for i in range(len(binary)):\n        # If the bit is 0 and the index is odd, set it to 1\n        if binary[i] == '0' and i % 2 != 0:\n            binary = binary[:i] + '1' + binary[i+1:]\n    \n    # Convert the binary string back to a number and return it\n    return int(binary[::-1], 2)\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpuz6a0n_q.py\", line 14, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(two_d_list, index):\n    if not two_d_list:  # if the list is empty\n        return []\n    return [sub_list[index] for sub_list in two_d_list if len(sub_list) > index]\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 50, "completion": "def min_length_list(list_of_lists):\n    return min(list_of_lists, key=lambda x: len(x))\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5aagfu2g.py\", line 4, in <module>\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nAssertionError", "passed": false}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    if base <= 0 or height <= 0:\n        raise ValueError(\"Base and height must be positive numbers.\")\n    return base * height\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5qe4tobw.py\", line 10, in <module>\n    assert parallelogram_area(0, 10) == 0\n  File \"/tmp/tmp5qe4tobw.py\", line 3, in parallelogram_area\n    raise ValueError(\"Base and height must be positive numbers.\")\nValueError: Base and height must be positive numbers.", "passed": false}
{"task_id": 53, "completion": "def check_equality(input_string):\n    if not isinstance(input_string, str):\n        raise TypeError(\"Input must be a string\")\n    if input_string[0] == input_string[-1]:\n        return 'Equal'\n    else:\n        return 'Not Equal'\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 54, "completion": "def counting_sort(arr):\n    # Find the maximum element in the array\n    max_val = max(arr)\n    \n    # Initialize the count array with all zeros\n    count = [0] * (max_val + 1)\n    \n    # Store the count of each element in the count array\n    for num in arr:\n        count[num] += 1\n    \n    # Store the cumulative count\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    \n    # Create a sorted array\n    sorted_arr = [0] * len(arr)\n    for num in arr:\n        sorted_arr[count[num] - 1] = num\n        count[num] -= 1\n    \n    return sorted_arr\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 57, "completion": "def find_max_num(digits, num_digits):\n    # Sort the digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n    \n    # Combine the sorted digits to form the largest number\n    max_num = int(''.join(map(str, sorted_digits[:num_digits])))\n    \n    return max_num\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 58, "completion": "def opposite_signs(num1, num2):\n    if not isinstance(num1, int) or not isinstance(num2, int):\n        raise TypeError(\"Both inputs must be integers\")\n    return (num1 > 0) != (num2 > 0)\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 60, "completion": "def max_len_sub(arr, diff):\n    n = len(arr)\n    dp = [1]*n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] - arr[j] == diff:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpb4y7qsrl.py\", line 10, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nAssertionError", "passed": false}

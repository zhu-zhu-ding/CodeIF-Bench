{"task_id": 11, "completion": "def remove_occ(s, char):\n    if char not in s:\n        return s\n    else:\n        first_index = s.index(char)\n        last_index = len(s) - 1 - s[::-1].index(char)\n        return s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]\n\n# Test the function\nprint(remove_occ(\"hello world\", \"l\"))  # Output: \"heo word\"\nprint(remove_occ(\"hello world\", \"z\"))  # Output: \"hello world\"\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 12, "completion": "def sort_matrix(matrix):\n    if not matrix or not matrix[0]:\n        return []\n\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n\n    # Sort the matrix based on the row sums\n    sorted_matrix = sorted(matrix, key=sum)\n\n    return sorted_matrix\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 13, "completion": "from collections import Counter\n\ndef count_common(words, n=10):\n    if not words:\n        return []\n    counter = Counter(words)\n    return counter.most_common(n)\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkab915uq.py\", line 9, in <module>\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nAssertionError", "passed": false}
{"task_id": 14, "completion": "def find_volume(base_area, height_of_prism):\n    # Check if the inputs are valid\n    if base_area <= 0 or height_of_prism <= 0:\n        return \"Invalid input. Dimensions must be positive.\"\n    else:\n        # Calculate the volume\n        volume = base_area * height_of_prism\n        return volume\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp916yjx2p.py\", line 10, in <module>\n    assert find_volume(10,8,6) == 240\nTypeError: find_volume() takes 2 positional arguments but 3 were given", "passed": false}
{"task_id": 15, "completion": "def split_lowerstring(s):\n    if not any(c.islower() for c in s):\n        return []\n    else:\n        return [x for x in s.split('a') if x]\n\n# Test the function\nprint(split_lowerstring(\"HelloWorld\"))  # Output: ['Hello', 'World']\nprint(split_lowerstring(\"HELLO\"))  # Output: []\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpezslmgqq.py\", line 11, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    if not text:\n        return 'Not matched!'\n    match = re.findall(r'[a-z]+_[a-z]+', text)\n    if match:\n        return match\n    else:\n        return 'Not matched!'\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpfot16zz7.py\", line 12, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative\")\n    return 4 * side_length\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(s1, s2):\n    if not s2:\n        return s1\n    else:\n        return ''.join([char for char in s1 if char not in s2])\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 19, "completion": "def test_duplicate(lst):\n    if len(lst) == 0:\n        return False\n    elif len(lst) == 1:\n        return False\n    else:\n        return len(lst) != len(set(lst))\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(n):\n    if n < 0:\n        return False\n    i = 0\n    while True:\n        woodall_num = 2**i * i - 1\n        if woodall_num == n:\n            return True\n        if woodall_num > n:\n            return False\n        i += 1\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 21, "completion": "def multiples_of_num(n, m):\n    if m == 0:\n        return []\n    else:\n        return [i * n for i in range(1, m + 1)]\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpsyvm_77i.py\", line 7, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "completion": "def find_first_duplicate(arr):\n    if not arr:\n        return -1\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists):\n    if not list_of_lists:  # If the input list is empty\n        return 0\n    else:\n        return max(sum(sublist) for sublist in list_of_lists)\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 24, "completion": "def binary_to_decimal(binary):\n    if not binary:\n        return 0\n    else:\n        return int(binary, 2)\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpeu07dj7j.py\", line 7, in <module>\n    assert binary_to_decimal(100) == 4\n  File \"/tmp/tmpeu07dj7j.py\", line 5, in binary_to_decimal\n    return int(binary, 2)\nTypeError: int() can't convert non-string with explicit base", "passed": false}
{"task_id": 25, "completion": "def find_product(lst):\n    if not lst:\n        return 1\n    else:\n        product = 1\n        for i in lst:\n            if lst.count(i) == 1:\n                product *= i\n        return product\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3ebvcgi1.py\", line 11, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(tuple_list, k):\n    if not tuple_list:  # if list is empty\n        return True\n    for t in tuple_list:\n        if len(t) < k:  # if tuple has less than k elements\n            return False\n    return True\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpcc28xqi1.py\", line 9, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "completion": "def remove(lst):\n    if not lst:  # if the list is empty\n        return []\n    else:\n        return [''.join([char for char in string if not char.isdigit()]) for string in lst]\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 28, "completion": "import math\n\ndef binomial_coeff(n, k):\n    # Handle edge cases\n    if k == 0 or n == k:\n        return 1\n    if k > n:\n        return 0\n\n    # Calculate binomial coefficient\n    return math.factorial(n) / (math.factorial(k) * math.factorial(n - k))\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 29, "completion": "def get_odd_occurrence(lst):\n    if not lst:\n        return None\n    count_dict = {}\n    for i in lst:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    for key, value in count_dict.items():\n        if value % 2 != 0:\n            return key\n    return None\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1p_0at3n.py\", line 15, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i] == s[j-1]:\n                count += 1\n    return count\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 31, "completion": "import heapq\n\ndef func(lists, k):\n    # Create a frequency dictionary\n    freq_dict = {}\n    for lst in lists:\n        for num in lst:\n            if num in freq_dict:\n                freq_dict[num] += 1\n            else:\n                freq_dict[num] = 1\n\n    # Use a heap to find the k most frequent numbers\n    heap = [(-freq, num) for num, freq in freq_dict.items()]\n    heapq.heapify(heap)\n\n    # Get the top k elements\n    top_k = []\n    for _ in range(k):\n        if heap:\n            top_k.append(heapq.heappop(heap)[1])\n        else:\n            break\n\n    return top_k\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0ve3r5d9.py\", line 27, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(n):\n    if n == 0:\n        return 0\n    else:\n        return n % 2 + 10 * decimal_to_binary(n // 2)\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpic5eud9q.py\", line 10, in <module>\n    assert decimal_to_binary(0) == '0'\nAssertionError", "passed": false}
{"task_id": 34, "completion": "def find_missing(arr):\n    if not arr:\n        return 1\n    if arr[0] != 1:\n        return 1\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] - mid == 2:\n            return arr[mid] - 1\n        elif arr[mid] - mid == arr[mid]:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return arr[-1] + 1\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp39yhn1o_.py\", line 17, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    if n == 1:\n        return 2\n    else:\n        return n * (n + 1)\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator, n):\n    if numerator == 0:\n        return 0\n    if n <= 0:\n        return None\n    fraction = numerator / denominator\n    str_fraction = str(fraction)\n    if '.' not in str_fraction:\n        return None\n    str_fraction = str_fraction.split('.')[1]\n    if len(str_fraction) < n:\n        return None\n    return int(str_fraction[n-1])\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 37, "completion": "def sort_mixed_list(lst):\n    if not lst:\n        return []\n    return sorted(lst, key=lambda x: (type(x), x))\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2a9zz19c.py\", line 6, in <module>\n    assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n  File \"/tmp/tmp2a9zz19c.py\", line 4, in sort_mixed_list\n    return sorted(lst, key=lambda x: (type(x), x))\nTypeError: '<' not supported between instances of 'type' and 'type'", "passed": false}
{"task_id": 38, "completion": "def div_even_odd(lst):\n    even = [x for x in lst if x % 2 == 0]\n    odd = [x for x in lst if x % 2 != 0]\n    \n    if even and odd:\n        return even[0] / odd[0]\n    else:\n        return 0\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 39, "completion": "from collections import Counter\n\ndef rearrange_string(s):\n    # Count the frequency of each character\n    counter = Counter(s)\n    \n    # If all characters are identical, return an empty string\n    if len(counter) == 1:\n        return \"\"\n    \n    # Sort the characters by their frequency in descending order\n    sorted_chars = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    \n    # Create a new string with the characters in the sorted order\n    new_s = ''.join([char * freq for char, freq in sorted_chars])\n    \n    # Check if the new string is valid\n    for i in range(len(new_s) - 1):\n        if new_s[i] == new_s[i + 1]:\n            return \"\"\n    \n    return new_s\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp93ud4it4.py\", line 24, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "completion": "import collections\n\ndef freq_element(lst):\n    if not lst:\n        return {}\n    else:\n        flat_list = [item for sublist in lst for item in sublist]\n        return dict(collections.Counter(flat_list))\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 41, "completion": "def filter_evennumbers(lst):\n    return list(filter(lambda x: x % 2 == 0, lst))\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 42, "completion": "def find_sum(arr):\n    if not arr:  # if the array is empty\n        return 0\n    else:\n        # create a dictionary to store the count of each element\n        count_dict = {}\n        for num in arr:\n            if num in count_dict:\n                count_dict[num] += 1\n            else:\n                count_dict[num] = 1\n\n        # sum up the elements that appear more than once\n        sum_repeated = 0\n        for num, count in count_dict.items():\n            if count > 1:\n                sum_repeated += num * count\n\n        return sum_repeated\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp71bjdxrk.py\", line 21, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    if text == \"\":\n        return 'Not matched!'\n    else:\n        pattern = '[_][a-z]+'\n        if re.search(pattern, text):\n            return 'Matched!'\n        else:\n            return 'Not matched!'\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp12lh04iw.py\", line 13, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 44, "completion": "def text_match_string(text, word):\n    if not text.strip():\n        return \"The string is empty or contains only spaces.\"\n    else:\n        if text.startswith(word):\n            return \"The string starts with the word.\"\n        else:\n            return \"The string does not start with the word.\"\n\n# Test the function\nprint(text_match_string(\"Hello World\", \"Hello\"))  # The string starts with the word.\nprint(text_match_string(\"Hello World\", \"World\"))  # The string does not start with the word.\nprint(text_match_string(\"\", \"Hello\"))  # The string is empty or contains only spaces.\nprint(text_match_string(\"   \", \"Hello\"))  # The string is empty or contains only spaces.\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwtujuljq.py\", line 16, in <module>\n    assert text_match_string(\" python\")==('Not matched!')\nTypeError: text_match_string() missing 1 required positional argument: 'word'", "passed": false}
{"task_id": 46, "completion": "def test_distinct(lst):\n    return len(lst) == len(set(lst))\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 47, "completion": "def compute_last_digit(a, b):\n    if a == b:\n        return 1\n    last_digit_a = a % 10\n    last_digit_b = b % 10\n    if last_digit_a in [0, 1, 5]:\n        return last_digit_a\n    if last_digit_b in [0, 1, 5]:\n        return last_digit_b\n    return -1\n\n# Test the function\nprint(compute_last_digit(5, 5))  # Output: 1\nprint(compute_last_digit(10, 10))  # Output: 1\nprint(compute_last_digit(15, 15))  # Output: 5\nprint(compute_last_digit(20, 20))  # Output: 0\nprint(compute_last_digit(25, 25))  # Output: 5\nprint(compute_last_digit(30, 30))  # Output: 0\nprint(compute_last_digit(35, 35))  # Output: 5\nprint(compute_last_digit(40, 40))  # Output: 0\nprint(compute_last_digit(45, 45))  # Output: 5\nprint(compute_last_digit(50, 50))  # Output: 0\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpnz74fp0i.py\", line 24, in <module>\n    assert compute_last_digit(2,4) == 2\nAssertionError", "passed": false}
{"task_id": 48, "completion": "def odd_bit_set_number(n):\n    # If the input is 0, return 1\n    if n == 0:\n        return 1\n\n    # Create a mask with all odd bits set\n    mask = 0xAAAAAAAA\n\n    # Use bitwise OR to set all odd bits in the input number\n    result = n | mask\n\n    return result\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpabc1py9o.py\", line 14, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(two_dim_list, index=0):\n    return [sub_list[index] for sub_list in two_dim_list if len(sub_list) > index]\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 50, "completion": "def min_length_list(lists):\n    return min(lists, key=lambda x: len(x))\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpr1lox_vh.py\", line 4, in <module>\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nAssertionError", "passed": false}
{"task_id": 51, "completion": "def check_equilateral(a, b, c):\n    if a == b == c == 0:\n        return False\n    elif a == b == c:\n        return True\n    else:\n        return False\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    if base <= 0 or height <= 0:\n        return 0\n    else:\n        return base * height\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(s):\n    if len(s) == 0:\n        return 'Equal'\n    elif s[0] == s[-1]:\n        return 'Equal'\n    else:\n        return 'Not Equal'\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 54, "completion": "def counting_sort(arr):\n    # Edge case: if the array is empty or contains a single element, it's already sorted\n    if len(arr) <= 1:\n        return arr\n\n    # Find the maximum element in the array\n    max_val = max(arr)\n\n    # Initialize the count array with zeros\n    count = [0] * (max_val + 1)\n\n    # Store the count of each element\n    for num in arr:\n        count[num] += 1\n\n    # Reconstruct the sorted array\n    sorted_arr = []\n    for num, freq in enumerate(count):\n        sorted_arr.extend([num] * freq)\n\n    return sorted_arr\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 55, "completion": "def tn_gp(a, r, t):\n    if r == 0:\n        return 0 if t > 1 else a\n    else:\n        return a * r ** (t - 1)\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpoji5d9z_.py\", line 7, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def check(n):\n    # Convert the number to a string, reverse it, and convert it back to an integer\n    reverse = int(str(n)[::-1])\n\n    # Check if the number is one less than twice its reverse\n    return n == reverse - 1\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgo5p5_5t.py\", line 10, in <module>\n    assert check(73) == True\nAssertionError", "passed": false}
{"task_id": 57, "completion": "def find_max_num(digits):\n    if not digits:\n        return 0\n    else:\n        digits.sort(reverse=True)\n        return int(''.join(map(str, digits)))\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9st104mr.py\", line 8, in <module>\n    assert find_max_num([1,2,3],3) == 321\nTypeError: find_max_num() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 58, "completion": "def opposite_signs(num1, num2):\n    return (num1 > 0) != (num2 > 0)\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4kvrdx64.py\", line 7, in <module>\n    assert opposite_signs(0, -1) == True\nAssertionError", "passed": false}
{"task_id": 59, "completion": "def is_octagonal(n):\n    if n == 1:\n        return 1\n    else:\n        return n * (3 * n - 2)\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 60, "completion": "def max_len_sub(arr):\n    if not arr:\n        return 0\n\n    n = len(arr)\n    dp = [1] * n\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] - arr[j] == i - j:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmptkug4t8p.py\", line 15, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}

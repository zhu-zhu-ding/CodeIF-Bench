{"task_id": 11, "completion": "def remove_occ(s, char):\n    if len(char) != 1:\n        raise ValueError('Second parameter must be a single character.')\n    first_index = s.find(char)\n    last_index = s.rfind(char)\n    if first_index == -1 or last_index == -1:\n        return s\n    return s[:first_index] + s[first_index+1:] + s[last_index+1:]\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpr5yygbon.py\", line 10, in <module>\n    assert remove_occ(\"hello\",\"l\") == \"heo\"\nAssertionError", "passed": false}
{"task_id": 12, "completion": "def sort_matrix(matrix):\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise TypeError(\"Input should be a list of lists\")\n    if not all(all(isinstance(ele, int) for ele in row) for row in matrix):\n        raise TypeError(\"All elements in the matrix should be integers\")\n\n    return sorted(matrix, key=sum)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 13, "completion": "from collections import Counter\n\ndef count_common(lst):\n    if not all(isinstance(i, str) for i in lst):\n        raise TypeError(\"Input should be a list of strings\")\n    else:\n        word_counts = Counter(lst)\n        most_common_word = word_counts.most_common(1)\n        return most_common_word[0][0], most_common_word[0][1]\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxiivu1aw.py\", line 11, in <module>\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nAssertionError", "passed": false}
{"task_id": 14, "completion": "def find_volume(base, height, length):\n    # Check if all inputs are positive numbers\n    if not all(isinstance(i, (int, float)) and i > 0 for i in [base, height, length]):\n        raise ValueError('All dimensions must be positive numbers.')\n\n    # Calculate the volume\n    volume = 0.5 * base * height * length\n    return volume\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 15, "completion": "def split_lowerstring(s):\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    return [word for word in s.split() if word[0].islower()]\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpo32hskeb.py\", line 9\n    try: split_lowerstring(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    pattern = r'[a-z]+_[a-z]+'\n    matches = re.findall(pattern, text)\n    return matches\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplpbw6xf7.py\", line 10, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative\")\n    return 4 * side_length\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(s1, s2):\n    if not isinstance(s1, str) or not isinstance(s2, str):\n        raise TypeError(\"Both inputs must be strings\")\n    return ''.join(c for c in s1 if c not in s2)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 19, "completion": "def test_duplicate(arr):\n    if not isinstance(arr, list):\n        raise ValueError('Input must be a list of integers')\n    for i in arr:\n        if not isinstance(i, int):\n            raise ValueError('Input must be a list of integers')\n    return len(arr) != len(set(arr))\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7t816e6k.py\", line 13, in <module>\n    test_duplicate(None)\n  File \"/tmp/tmp7t816e6k.py\", line 3, in test_duplicate\n    raise ValueError('Input must be a list of integers')\nValueError: Input must be a list of integers", "passed": false}
{"task_id": 20, "completion": "def is_woodall(n):\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    i = 0\n    while True:\n        woodall_num = i * 2**i - 1\n        if woodall_num == n:\n            return True\n        if woodall_num > n:\n            return False\n        i += 1\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 21, "completion": "def multiples_of_num(n, m):\n    if n < 0 or m < 0:\n        raise ValueError(\"Both n and m should be non-negative\")\n    else:\n        return [i * n for i in range(1, m + 1)]\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5bc9vtd3.py\", line 7, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "completion": "def find_first_duplicate(arr):\n    if not isinstance(arr, list):\n        raise TypeError(\"Input should be a list\")\n    for i in arr:\n        if not isinstance(i, int):\n            raise TypeError(\"All elements in the list should be integers\")\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpr2u9xq55.py\", line 15, in <module>\n    assert find_first_duplicate([1, 2, 3, 4])==-1\nAssertionError", "passed": false}
{"task_id": 23, "completion": "def maximum_sum(lst):\n    if not isinstance(lst, list):\n        raise TypeError(\"Input should be a list of lists\")\n    max_sum = float('-inf')\n    for sublist in lst:\n        if not isinstance(sublist, list):\n            raise TypeError(\"All elements in the list should be lists\")\n        for element in sublist:\n            if not isinstance(element, int):\n                raise TypeError(\"All elements in the sublists should be integers\")\n            if element > max_sum:\n                max_sum = element\n    return max_sum\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmp18ns_yo1.py\", line 18\n    try: maximum_sum([[1, 2], [3, 'a']]); assert False, 'Expected TypeError' except TypeError: pass\n                                                                             ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 24, "completion": "def binary_to_decimal(binary):\n    if not set(binary).issubset('01'):\n        raise ValueError('Invalid binary number')\n    return int(binary, 2)\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpoqtj3o9m.py\", line 9\n    try: binary_to_decimal('102'); assert False, 'Expected ValueError' except ValueError as e: assert str(e) == 'Invalid binary number'\n                                                                       ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 25, "completion": "def find_product(arr):\n    if not isinstance(arr, list) or not all(isinstance(i, int) for i in arr):\n        raise TypeError(\"Input should be a list of integers\")\n    else:\n        non_repeated_product = 1\n        for i in arr:\n            if arr.count(i) == 1:\n                non_repeated_product *= i\n        return non_repeated_product\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpyclcyslo.py\", line 11, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(lst, k):\n    # Check if lst is a list\n    if not isinstance(lst, list):\n        raise TypeError(\"The input should be a list.\")\n    # Check if all elements in lst are tuples\n    if not all(isinstance(i, tuple) for i in lst):\n        raise TypeError(\"All elements in the list should be tuples.\")\n    # Check if k is an integer\n    if not isinstance(k, int):\n        raise TypeError(\"k should be an integer.\")\n    # Check if all tuples in lst have k elements\n    if not all(len(i) == k for i in lst):\n        return False\n    return True\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpykff3ztm.py\", line 16, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "completion": "def remove(lst):\n    if not isinstance(lst, list):\n        raise TypeError(\"Input should be a list\")\n    for i in lst:\n        if not isinstance(i, str):\n            raise TypeError(\"All elements in the list should be strings\")\n    return [''.join([c for c in s if not c.isdigit()]) for s in lst]\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 28, "completion": "import math\n\ndef binomial_coeff(n, k):\n    if n < 0 or k < 0:\n        raise ValueError('Inputs must be non-negative')\n    if k > n:\n        raise ValueError('k must not be greater than n')\n    return math.factorial(n) / (math.factorial(k) * math.factorial(n - k))\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpc_gfjpr7.py\", line 13, in <module>\n    try: binomial_coeff(-1, 2)\n  File \"/tmp/tmpc_gfjpr7.py\", line 5, in binomial_coeff\n    raise ValueError('Inputs must be non-negative')\nValueError: Inputs must be non-negative\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpc_gfjpr7.py\", line 14, in <module>\n    except ValueError as e: assert str(e) == 'Inputs must be non-negative and k must not be greater than n'\nAssertionError", "passed": false}
{"task_id": 29, "completion": "def get_odd_occurrence(lst):\n    if not isinstance(lst, list) or not all(isinstance(i, int) for i in lst):\n        raise TypeError(\"Input should be a list of integers\")\n\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    for key, value in count_dict.items():\n        if value % 2 != 0:\n            return key\n\n    return None\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxsx8xt1v.py\", line 18, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    if not isinstance(s, str):\n        raise TypeError(\"Input should be a string\")\n\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i] == s[j-1]:\n                count += 1\n    return count\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpr439k6g_.py\", line 15\n    try: count_substring_with_equal_ends(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                                  ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 31, "completion": "import heapq\n\ndef func(lists, k):\n    # Flatten the list of lists\n    flat_list = [item for sublist in lists for item in sublist]\n\n    # Get the total number of distinct integers\n    total_distinct = len(set(flat_list))\n\n    # Check if k is greater than the total number of distinct integers\n    if k > total_distinct:\n        raise ValueError('k cannot be greater than the number of distinct integers')\n\n    # Create a frequency dictionary\n    freq_dict = {}\n    for num in flat_list:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # Use a heap to get the top k frequent numbers\n    heap = [(-freq, num) for num, freq in freq_dict.items()]\n    heapq.heapify(heap)\n\n    top_k = []\n    for _ in range(k):\n        top_k.append(heapq.heappop(heap)[1])\n\n    return top_k\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpj0sg4aqa.py\", line 32, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError('Input must be a positive integer')\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    max_prime = -1\n    while n % 2 == 0:\n        max_prime = 2\n        n >>= 1\n\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            if is_prime(i):\n                max_prime = i\n            n = n / i\n\n    if n > 2 and is_prime(n):\n        max_prime = n\n\n    return max_prime\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(n):\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    if n == 0:\n        return 0\n    else:\n        return n % 2 + 10 * decimal_to_binary(n // 2)\n\n# Test the function\nprint(decimal_to_binary(10))  # Output: 1010\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 34, "completion": "def find_missing(lst):\n    if not all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)):\n        raise ValueError('Input list must be sorted.')\n\n    return next((x for x in range(lst[0], lst[-1]) if x not in lst), None)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8q_xa02l.py\", line 7, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    return n * (n + 1) // 2\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpg0og3ur5.py\", line 6, in <module>\n    assert find_rect_num(4) == 20\nAssertionError", "passed": false}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator, n):\n    if denominator == 0:\n        raise ValueError('Denominator cannot be zero')\n    fraction = numerator / denominator\n    fraction_str = str(fraction)\n    if '.' not in fraction_str:\n        raise ValueError('The fraction does not have a decimal part')\n    fraction_str = fraction_str.split('.')[1]\n    if n > len(fraction_str):\n        raise ValueError('The nth digit does not exist')\n    return int(fraction_str[n-1])\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 37, "completion": "def sort_mixed_list(lst):\n    if not isinstance(lst, list):\n        raise TypeError(\"Input should be a list\")\n    for i in lst:\n        if not isinstance(i, (int, str)):\n            raise TypeError(\"List should only contain integers and strings\")\n    return sorted(lst, key=lambda x: (isinstance(x, str), x))\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 38, "completion": "def div_even_odd(lst):\n    even = None\n    odd = None\n    for num in lst:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 != 0 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    if even is None or odd is None:\n        raise ValueError('List must contain at least one even and one odd number.')\n    return even / odd\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpg64tvfus.py\", line 18\n    try: div_even_odd([2, 4, 6]); assert False; except ValueError as e: assert str(e) == 'List must contain at least one even and one odd number.'\n                                                ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 39, "completion": "from collections import Counter\n\ndef rearrange_string(s):\n    if not isinstance(s, str):\n        raise ValueError(\"Input should be a string\")\n    if not s.islower() or not s.isalpha():\n        raise ValueError(\"String should contain only lowercase letters\")\n\n    counter = Counter(s)\n    max_count = max(counter.values())\n    if max_count > len(s) // 2 + len(s) % 2:\n        return False\n\n    return True\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpcza7_it3.py\", line 16, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "completion": "import collections\n\ndef freq_element(lst):\n    if not isinstance(lst, list) or not all(isinstance(i, list) for i in lst):\n        raise TypeError(\"Input should be a list of lists\")\n    else:\n        flat_list = [item for sublist in lst for item in sublist]\n        freq_dict = collections.Counter(flat_list)\n        return freq_dict\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmployw55sm.py\", line 14\n    try: freq_element('not a list'); assert False; except TypeError: assert True\n                                                   ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 41, "completion": "def filter_evennumbers(lst):\n    if not isinstance(lst, list):\n        raise TypeError(\"Input should be a list\")\n    for i in lst:\n        if not isinstance(i, int):\n            raise TypeError(\"List should only contain integers\")\n    return list(filter(lambda x: x % 2 == 0, lst))\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 42, "completion": "def find_sum(arr):\n    if not isinstance(arr, list):\n        raise TypeError(\"Input should be a list\")\n    else:\n        return sum(i for i in arr if arr.count(i) > 1)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphcgy1duz.py\", line 7, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    pattern = '[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return re.findall(pattern, text)\n    else:\n        return \"No match found\"\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpb2y96lzo.py\", line 12, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 44, "completion": "def text_match_string(text, word):\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    return text.startswith(word)\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpwizwcq0s.py\", line 9\n    try: text_match_string(123); assert False, 'TypeError not raised' except TypeError: pass\n                                                                      ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 45, "completion": "import math\nfrom functools import reduce\n\ndef get_gcd(nums):\n    if not nums:\n        raise ValueError('Input list cannot be empty.')\n    return reduce(math.gcd, nums)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 46, "completion": "def test_distinct(lst):\n    # Check if input is a list\n    if not isinstance(lst, list):\n        raise TypeError(\"Input should be a list\")\n    # Check if list contains only integers\n    elif not all(isinstance(i, int) for i in lst):\n        raise TypeError(\"List should only contain integers\")\n    # Check if all elements are distinct\n    elif len(lst) == len(set(lst)):\n        return True\n    else:\n        return False\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 47, "completion": "import math\n\ndef compute_last_digit(a, b):\n    if a > b:\n        raise ValueError('a should not be greater than b')\n    \n    # Calculate factorial of a and b\n    fact_a = math.factorial(a)\n    fact_b = math.factorial(b)\n    \n    # Find the last digit of the factorial of b divided by the factorial of a\n    last_digit = fact_b % 10\n    \n    return last_digit\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpyvky86ga.py\", line 16, in <module>\n    assert compute_last_digit(2,4) == 2\nAssertionError", "passed": false}
{"task_id": 48, "completion": "def odd_bit_set_number(n):\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    return n | 0xAAAAAAAA\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp81xl6n3n.py\", line 6, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(two_dim_list, index):\n    result = []\n    for sublist in two_dim_list:\n        if index < len(sublist):\n            result.append(sublist[index])\n        else:\n            raise IndexError('Index out of range for sublist')\n    return result\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 50, "completion": "def min_length_list(lst):\n    if not all(isinstance(i, list) for i in lst):\n        raise ValueError('Input must be a list of lists.')\n    return min(lst, key=lambda x: len(x))\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpn_ldnqg1.py\", line 6, in <module>\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nAssertionError", "passed": false}
{"task_id": 51, "completion": "def check_equilateral(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        raise ValueError(\"All sides of a triangle must be positive\")\n    if a == b == c:\n        return \"The triangle is equilateral\"\n    else:\n        return \"The triangle is not equilateral\"\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdkxox5gs.py\", line 9, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    if not (isinstance(base, (int, float)) and isinstance(height, (int, float))):\n        raise TypeError(\"Both base and height must be numerical (int or float)\")\n    return base * height\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(input_string):\n    if not isinstance(input_string, str):\n        raise TypeError('Input must be a string')\n    return input_string[0] == input_string[-1]\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8k9mehy9.py\", line 6, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 54, "completion": "def counting_sort(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input should be a list\")\n    # Check if the list contains only integers\n    if not all(isinstance(i, int) for i in arr):\n        raise TypeError(\"List should contain only integers\")\n    \n    # Find the maximum element in the list\n    max_val = max(arr)\n    \n    # Initialize the count array with zeros\n    count = [0] * (max_val + 1)\n    \n    # Store the count of each element\n    for num in arr:\n        count[num] += 1\n    \n    # Reconstruct the sorted array\n    sorted_arr = []\n    for i, freq in enumerate(count):\n        sorted_arr.extend([i] * freq)\n    \n    return sorted_arr\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 55, "completion": "def tn_gp(a, r, n):\n    \"\"\"\n    This function calculates the nth term of a geometric series.\n\n    :param a: The first term of the geometric series.\n    :param r: The common ratio of the geometric series.\n    :param n: The term number to find.\n    :return: The nth term of the geometric series.\n    \"\"\"\n    if n < 1:\n        raise ValueError('Term number must be greater than 0')\n    return a * r ** (n - 1)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpirq511s3.py\", line 7, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def check(n):\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    else:\n        return n == 2*int(str(n)[::-1]) - 1\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 57, "completion": "from itertools import permutations\n\ndef find_max_num(digits, num_digits):\n    if num_digits > len(digits):\n        raise ValueError('Number of digits exceeds the length of the list.')\n    else:\n        perms = permutations(digits, num_digits)\n        max_num = max(int(''.join(map(str, p))) for p in perms)\n        return max_num\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 58, "completion": "def opposite_signs(num1, num2):\n    if not all(isinstance(i, int) for i in [num1, num2]):\n        raise TypeError(\"Both inputs must be integers\")\n    return (num1 > 0) != (num2 > 0)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 59, "completion": "def is_octagonal(n):\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"Input must be a positive integer\")\n    return n * (4 * n - 3)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpfojxntfe.py\", line 6, in <module>\n    assert is_octagonal(5) == 65\nAssertionError", "passed": false}
{"task_id": 60, "completion": "def max_len_sub(arr, n):\n    if not isinstance(arr, list):\n        raise TypeError(\"The first parameter should be a list.\")\n    if not isinstance(n, int):\n        raise TypeError(\"The second parameter should be an integer.\")\n\n    max_len = 0\n    current_len = 0\n    for i in range(1, len(arr)):\n        diff = arr[i] - arr[i-1]\n        if diff <= n:\n            current_len += 1\n            max_len = max(max_len, current_len)\n        else:\n            current_len = 0\n    return max_len\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpava9ice1.py\", line 18, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nAssertionError", "passed": false}

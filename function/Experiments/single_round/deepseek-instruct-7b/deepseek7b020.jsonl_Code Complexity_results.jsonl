{"task_id": 11, "completion": "def remove_occ(s, char):\n    try:\n        first_index = s.index(char)\n        last_index = len(s) - 1 - s[::-1].index(char)\n        return s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]\n    except ValueError:\n        return \"Character not found in string\"\n    except ValueError:\n        return \"Character found only once in string\"\n\n# Test the function\nprint(remove_occ(\"hello world\", \"l\"))  # should return \"heo word\"\nprint(remove_occ(\"hello world\", \"z\"))  # should return \"Character not found in string\"\nprint(remove_occ(\"hello\", \"l\"))  # should return \"heo\"\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 14, "completion": "def find_volume(base, height, length):\n    return (base * height * length) / 2\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 15, "completion": "def split_lowerstring(s):\n    return [char for char in s if char.islower()]\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2jzg6gxm.py\", line 4, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    return re.findall(r'[a-z]+_[a-z]+', text)\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1xny7np2.py\", line 6, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    return 4 * side_length\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 20, "completion": "import math\n\ndef is_woodall(x):\n    n = math.log(x + 1, 2)\n    return n == int(n)\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpo0fctzml.py\", line 7, in <module>\n    assert is_woodall(383) == True\nAssertionError", "passed": false}
{"task_id": 21, "completion": "def multiples_of_num(n, m):\n    return [i * n for i in range(1, m + 1)]\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp75r2ctv3.py\", line 4, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 24, "completion": "def binary_to_decimal(binary):\n    decimal = 0\n    for digit in binary:\n        decimal = decimal * 2 + int(digit)\n    return decimal\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6va1eg43.py\", line 7, in <module>\n    assert binary_to_decimal(100) == 4\n  File \"/tmp/tmp6va1eg43.py\", line 3, in binary_to_decimal\n    for digit in binary:\nTypeError: 'int' object is not iterable", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(n):\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpss0dfwol.py\", line 8, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    return n**2\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5qfldgp8.py\", line 4, in <module>\n    assert find_rect_num(4) == 20\nAssertionError", "passed": false}
{"task_id": 36, "completion": "def find_nth_digit(num1, num2, n):\n    # Calculate the fraction\n    fraction = num1 / num2\n\n    # Convert the fraction to a string to easily access each digit\n    fraction_str = str(fraction)\n\n    # Check if the nth digit exists\n    if len(fraction_str) > n:\n        # Return the nth digit\n        return fraction_str[n]\n    else:\n        # The nth digit does not exist\n        return None\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwqhqpqi3.py\", line 16, in <module>\n    assert find_nth_digit(1,2,1) == 5\nAssertionError", "passed": false}
{"task_id": 38, "completion": "def div_even_odd(lst):\n    even = None\n    odd = None\n    for num in lst:\n        if even is None and num % 2 == 0:\n            even = num\n        if odd is None and num % 2 != 0:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    if even is None or odd is None:\n        raise ValueError(\"List must contain at least one even and one odd number\")\n    return even / odd\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppzdk3069.py\", line 20, in <module>\n    assert cc_visit(inspect.getsource(div_even_odd))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 40, "completion": "from collections import Counter\nfrom typing import List, Union\n\ndef freq_element(lst: List[List[Union[int, str]]]) -> Counter:\n    \"\"\"\n    Flatten a list of lists and count the frequency of each element.\n\n    :param lst: A list of lists containing elements.\n    :return: A Counter object with the frequency of each element.\n    \"\"\"\n    # Flatten the list of lists\n    flat_list = [item for sublist in lst for item in sublist]\n    \n    # Count the frequency of each element\n    freq = Counter(flat_list)\n    \n    return freq\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpq94akpla.py\", line 19, in <module>\n    assert cc_visit(inspect.getsource(freq_element))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 42, "completion": "def find_sum(arr):\n    # Initialize a dictionary to keep track of element counts\n    counts = {}\n    for num in arr:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n\n    # Initialize a variable to keep track of the sum\n    total = 0\n    for num, count in counts.items():\n        if count > 1:\n            total += num * count\n\n    return total\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpnu3y361r.py\", line 18, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    pattern = '[_]?[a-z]+[_]?[a-z]+'\n    if re.search(pattern, text):\n        return re.search(pattern, text).group()\n    else:\n        return None\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpuazep61p.py\", line 10, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 45, "completion": "import math\nfrom functools import reduce\n\ndef get_gcd(arr):\n    if len(arr) == 0:\n        raise ValueError(\"Array is empty\")\n    return reduce(math.gcd, arr)\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2yltr3jq.py\", line 14, in <module>\n    assert cc_visit(inspect.getsource(get_gcd))[0].complexity <=1\nAssertionError", "passed": false}
{"task_id": 47, "completion": "def compute_last_digit(a, b):\n    # The last digit of a factorial is always 0, 1, 2, 4, 5, 6, 8, or 9\n    # So, we only need to consider these cases\n    last_digits = [0, 1, 2, 4, 5, 6, 8, 9]\n\n    # If a is greater than b, then the last digit of a! / b! is 0\n    if a > b:\n        return 0\n\n    # If a is less than b, then the last digit of a! / b! is not 0\n    # So, we need to find the last digit of a! / b!\n    else:\n        # We start from the smallest number that is greater than a and less than b\n        for i in range(a+1, b+1):\n            # We only need to consider the last digit of i\n            i = i % 10\n            # If i is not in last_digits, then the last digit of a! / b! is not 0\n            if i not in last_digits:\n                return i\n\n        # If we have not returned yet, then the last digit of a! / b! is 0\n        return 0\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpfevnn0va.py\", line 24, in <module>\n    assert compute_last_digit(2,4) == 2\nAssertionError", "passed": false}
{"task_id": 51, "completion": "def check_equilateral(a, b, c):\n    if a == b == c:\n        return \"The triangle is equilateral\"\n    else:\n        return \"The triangle is not equilateral\"\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpq14dl1gi.py\", line 7, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    return base * height\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(s):\n    return s[0] == s[-1]\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmps_yea784.py\", line 4, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def check(n):\n    return n == (int(str(n)[::-1]) - 1) * 2\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpfox1cp2x.py\", line 6, in <module>\n    assert check(73) == True\nAssertionError", "passed": false}
{"task_id": 58, "completion": "def opposite_signs(num1, num2):\n    return num1 * num2 < 0\n", "requirement": "Code Complexity", "result": "passed", "passed": true}

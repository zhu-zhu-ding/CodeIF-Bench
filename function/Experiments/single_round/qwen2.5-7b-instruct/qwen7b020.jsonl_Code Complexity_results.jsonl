{"task_id": 11, "completion": "def remove_occ(string, char):\n    # Step 1: Check if the string is empty or if the character is not present in the string\n    if not string or char not in string:\n        return string\n\n    # Step 2: Find the indices of the first and last occurrences of the character\n    first_index = string.find(char)\n    last_index = string.rfind(char)\n\n    # Step 3: Remove the characters at those indices\n    if first_index != -1 and last_index != -1:\n        return string[:first_index] + string[first_index+1:last_index] + string[last_index+1:]\n    else:\n        return string\n\n# Example usage:\nprint(remove_occ(\"hello world\", \"l\"))  # Output: \"heo worl\"\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 14, "completion": "def find_volume(base, base_height, prism_height):\n    # Calculate the base area of the triangle\n    base_area = 0.5 * base * base_height\n    \n    # Calculate the volume of the triangular prism\n    volume = base_area * prism_height\n    \n    return volume\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 15, "completion": "def split_lowerstring(s):\n    return [s]\n\n# Example usage:\nprint(split_lowerstring(\"HelloWorld\"))\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpfpixw4lf.py\", line 5, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(input_string):\n    \"\"\"\n    This function checks if the input string is a sequence of lowercase letters joined by an underscore.\n    \n    Parameters:\n    input_string (str): The string to be checked.\n    \n    Returns:\n    bool: True if the input string matches the pattern, False otherwise.\n    \"\"\"\n    # Regular expression to match a sequence of lowercase letters joined by an underscore\n    pattern = r'^[a-z]+_[a-z]+$'\n    \n    # Check if the input string matches the pattern\n    return bool(re.match(pattern, input_string))\n\n# Example usage:\nprint(text_lowercase_underscore(\"hello_world\"))  # Output: True\nprint(text_lowercase_underscore(\"Hello_World\"))  # Output: False\nprint(text_lowercase_underscore(\"hello_world_2\"))  # Output: False\nprint(text_lowercase_underscore(\"helloworld\"))  # Output: False\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpms5e7sd6.py\", line 12, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    # The perimeter of a square is 4 times its side length\n    return 4 * side_length\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(number):\n    # Calculate n from the given number using the formula and check if it results in the original number\n    import math\n\n    if number < 0:\n        return False  # Negative numbers cannot be Woodall numbers\n\n    n = math.log((number + 1) / 2, 2)\n    return n.is_integer()\n\n# Example usage:\nprint(is_woodall(7))  # True, because 7 = 3 * 2^3 - 1\nprint(is_woodall(23)) # False, 23 is not a Woodall number\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpop6a_npi.py\", line 11, in <module>\n    assert is_woodall(383) == True\nAssertionError", "passed": false}
{"task_id": 21, "completion": "def multiples_of_num(n, m):\n    return [i * n for i in range(1, m + 1)]\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpt2va4qew.py\", line 3, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 24, "completion": "def binary_to_decimal(binary_str):\n    \"\"\"\n    Convert a binary number (given as a string) to its decimal equivalent.\n    \n    Args:\n    binary_str (str): A string representing a binary number.\n    \n    Returns:\n    int: The decimal equivalent of the binary number.\n    \"\"\"\n    # Ensure the input is a valid binary string\n    if not all(char in '01' for char in binary_str):\n        raise ValueError(\"Invalid binary number\")\n    \n    # Convert the binary string to a decimal integer\n    return int(binary_str, 2)\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2w3f039u.py\", line 7, in <module>\n    assert binary_to_decimal(100) == 4\n  File \"/tmp/tmp2w3f039u.py\", line 3, in binary_to_decimal\n    if not all(char in '01' for char in binary_str):\nTypeError: 'int' object is not iterable", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    # Initialize the largest prime factor variable\n    largest_prime = -1\n    \n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n    \n    # n must be odd at this point, so we can skip one element (Note i = i +2)\n    for i in range(3, int(n**0.5) + 1, 2):\n        # While i divides n, print i and divide n\n        while n % i == 0:\n            largest_prime = i\n            n //= i\n    \n    # This condition is to handle the case when n is a prime number\n    # greater than 2\n    if n > 2:\n        largest_prime = n\n    \n    return largest_prime\n\n# Example usage:\nprint(max_prime_factors(13195))  # Output: 29\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(decimal_number):\n    return bin(decimal_number)[2:]\n\n# Example usage:\nprint(decimal_to_binary(10))  # Output: \"1010\"\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpbpy3zfxb.py\", line 5, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    return n * (n + 1)\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator, n):\n    # Handle edge cases where denominator is zero or numerator is zero\n    if denominator == 0:\n        raise ValueError(\"Denominator cannot be zero.\")\n    if numerator == 0:\n        return 0\n    \n    # Convert the division result to a string to easily access digits\n    division_result = str(numerator / denominator)\n    \n    # Check if the result is an integer or has a fractional part\n    if '.' in division_result:\n        # Extract the fractional part and convert it to a string\n        fractional_part = division_result.split('.')[1]\n    else:\n        # If there's no fractional part, consider the last digit of the integer part\n        fractional_part = \"0\"  # This ensures we always have a string to work with\n    \n    # Get the n-th digit from the fractional part\n    if n > len(fractional_part):\n        return None  # Return None if n exceeds the length of the fractional part\n    else:\n        return int(fractional_part[n - 1])\n\n# Example usage:\nprint(find_nth_digit(1, 2, 1))  # Output: 4 (0.5, 5 is the first digit after the decimal point)\nprint(find_nth_digit(3, 7, 5))  # Output: 1 (0.428571..., 1 is the 5th digit after the decimal point)\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 38, "completion": "def div_even_odd(numbers):\n    # Check if the list is empty\n    if not numbers:\n        return None\n    \n    # Initialize variables for the first even and odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Iterate through the list to find the first even and odd numbers\n    for num in numbers:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        elif first_odd is None and num % 2 != 0:\n            first_odd = num\n        \n        # If both first even and odd numbers are found, break the loop\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Check if both first even and odd numbers are found\n    if first_even is None or first_odd is None:\n        return None\n    \n    # Return the division of the first even and odd numbers\n    return first_even / first_odd\n\n# Example usage:\nnumbers = [5, 3, 2, 4, 7]\nprint(div_even_odd(numbers))  # Output: 0.4\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpnqys4p2_.py\", line 30, in <module>\n    assert cc_visit(inspect.getsource(div_even_odd))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 40, "completion": "from collections import Counter\n\ndef freq_element(lst_of_lsts):\n    # Flatten the list of lists into a single list\n    flat_list = [item for sublist in lst_of_lsts for item in sublist]\n    \n    # Use Counter to get the frequency of each element\n    freq_dict = Counter(flat_list)\n    \n    return freq_dict\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpzy_35i5v.py\", line 13, in <module>\n    assert cc_visit(inspect.getsource(freq_element))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 42, "completion": "def find_sum(arr):\n    # Create a dictionary to count occurrences of each element\n    counts = {}\n    for num in arr:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    \n    # Sum only the elements that appear more than once\n    sum_of_repeats = sum(num * (count - 1) for num, count in counts.items() if count > 1)\n    \n    return sum_of_repeats\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmprthvfq94.py\", line 12, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    \"\"\"\n    This function uses regex to find sequences of lowercase letters joined with an underscore.\n    \n    :param text: The input string to search within.\n    :return: A list of all matches found in the input string.\n    \"\"\"\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    return re.findall(pattern, text)\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3h94pcb_.py\", line 5, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 45, "completion": "from math import gcd\n\ndef get_gcd(arr):\n    if not arr:\n        return None\n    \n    # Initialize gcd with the first element of the array\n    current_gcd = arr[0]\n    \n    # Iterate through the array starting from the second element\n    for num in arr[1:]:\n        current_gcd = gcd(current_gcd, num)\n        \n        # If the GCD becomes 1, we can stop early as it won't change further\n        if current_gcd == 1:\n            break\n    \n    return current_gcd\n\n# Example usage:\narr = [24, 36, 48]\nprint(get_gcd(arr))  # Output: 12\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpyty62rck.py\", line 22, in <module>\n    assert cc_visit(inspect.getsource(get_gcd))[0].complexity <=1\nAssertionError", "passed": false}
{"task_id": 47, "completion": "def compute_last_digit(a, b):\n    # If a > b, the result is 0 because factorial(a) would be larger than factorial(b)\n    if a > b:\n        return 0\n    \n    # If a == b, the result is 1 because any number divided by itself is 1\n    if a == b:\n        return 1\n    \n    # If a < b, calculate the last digit of the division of factorials\n    # The last digit of n! for n >= 5 is always 0 because it contains factors 2 and 5\n    if a >= 5:\n        return 0\n    \n    # For a = 1, 2, 3, 4, calculate the factorial directly and find the last digit\n    if a == 1:\n        return (b * (b - 1)) % 10\n    elif a == 2:\n        return (b * (b - 1) * (b - 2)) % 10\n    elif a == 3:\n        return (b * (b - 1) * (b - 2) * (b - 3)) % 10\n    elif a == 4:\n        return (b * (b - 1) * (b - 2) * (b - 3) * (b - 4)) % 10\n\n# Example usage:\nprint(compute_last_digit(3, 6))  # Output: 0\nprint(compute_last_digit(1, 5))  # Output: 0\nprint(compute_last_digit(2, 7))  # Output: 0\nprint(compute_last_digit(4, 8))  # Output: 0\nprint(compute_last_digit(5, 5))  # Output: 1\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpad0n00gl.py\", line 27, in <module>\n    assert compute_last_digit(2,4) == 2\nAssertionError", "passed": false}
{"task_id": 51, "completion": "def check_equilateral(a, b, c):\n    # Check if all three sides are equal\n    if a == b == c:\n        print(\"The triangle is equilateral.\")\n    else:\n        print(\"The triangle is not equilateral.\")\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1t7om2vr.py\", line 7, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram.\n    \"\"\"\n    return base * height\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(s):\n    # Check if the string is empty or has only one character\n    if not s:\n        return True\n    \n    # Compare the first and last characters of the string\n    return s[0] == s[-1]\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1_deznua.py\", line 7, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def check(number):\n    # Reverse the number\n    reversed_number = int(str(number)[::-1])\n    \n    # Check if the number is one less than twice its reverse\n    return number == 2 * reversed_number - 1\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 58, "completion": "def opposite_signs(a, b):\n    \"\"\"\n    Check if two integers have opposite signs.\n\n    Args:\n    a (int): First integer.\n    b (int): Second integer.\n\n    Returns:\n    bool: True if the integers have opposite signs, False otherwise.\n    \"\"\"\n    return (a ^ b) < 0\n", "requirement": "Code Complexity", "result": "passed", "passed": true}

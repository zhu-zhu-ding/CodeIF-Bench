{"task_id": 14, "completion": "def find_volume(base_area, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    - base_area (int or float): The area of the triangular base.\n    - height (int or float): The height of the prism.\n    - length (int or float): The length (or depth) of the prism.\n\n    Returns:\n    - float: The volume of the triangular prism.\n    \"\"\"\n    # Ensure all inputs are positive numbers\n    if base_area <= 0 or height <= 0 or length <= 0:\n        raise ValueError(\"All input values must be positive numbers.\")\n    \n    # Calculate the volume\n    volume = base_area * height * length\n    \n    return volume\n\n# Example usage:\ntry:\n    volume = find_volume(10.5, 4.2, 6.3)\n    print(f\"The volume of the triangular prism is: {volume}\")\nexcept ValueError as e:\n    print(e)\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0wwz6xvr.py\", line 14, in <module>\n    assert find_volume(10,8,6) == 240\nAssertionError", "passed": false}
{"task_id": 15, "completion": "def split_lowerstring(input_string):\n    if not input_string:\n        return []\n\n    result = []\n    current_segment = \"\"\n    \n    for i, char in enumerate(input_string):\n        # Check if the character is lowercase\n        if char.islower():\n            # If the previous character was not lowercase, add the current segment to the result\n            if i > 0 and not input_string[i-1].islower():\n                result.append(current_segment)\n                current_segment = \"\"\n            # Add the current character to the current segment\n            current_segment += char\n        else:\n            # If the character is not lowercase, add it to the current segment\n            current_segment += char\n    \n    # Add the last segment to the result\n    if current_segment:\n        result.append(current_segment)\n    \n    return result\n\n# Example usage:\ninput_str = \"HelloWorld123\"\nprint(split_lowerstring(input_str))  # Output: ['Hello', 'World', '123']\n\ninput_str = \"abcDEFghiJKL\"\nprint(split_lowerstring(input_str))  # Output: ['abc', 'DEF', 'ghi', 'JKL']\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwqwejkm7.py\", line 27, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(input_string):\n    # Define the pattern to match lowercase letters joined by an underscore\n    pattern = r'[a-z]+_[a-z]+'\n    \n    # Search for the pattern in the input string\n    match = re.search(pattern, input_string)\n    \n    # Return the appropriate message based on whether a match was found\n    if match:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\nprint(text_lowercase_underscore(\"hello_world\"))  # Output: Found a match!\nprint(text_lowercase_underscore(\"Hello_World\"))  # Output: Not matched!\nprint(text_lowercase_underscore(\"test_case\"))    # Output: Found a match!\nprint(text_lowercase_underscore(\"123_test\"))     # Output: Not matched!\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpeds90hrp.py\", line 19, in <module>\n    assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Parameters:\n    side_length (int): The length of one side of the square. Must be a non-negative integer.\n\n    Returns:\n    int: The perimeter of the square.\n    \"\"\"\n    if not isinstance(side_length, int) or side_length < 0:\n        raise ValueError(\"Side length must be a non-negative integer.\")\n    \n    return 4 * side_length\n\n# Example usage:\ntry:\n    print(square_perimeter(5))  # Expected output: 20\n    print(square_perimeter(-3)) # This will raise an error\nexcept ValueError as e:\n    print(e)\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(str1, str2):\n    # Check if the input strings contain only alphabetic characters\n    assert all(c.isalpha() for c in str1), \"Input strings must only contain alphabetic characters.\"\n    assert all(c.isalpha() for c in str2), \"Input strings must only contain alphabetic characters.\"\n\n    # Remove characters from str1 that are present in str2\n    result = ''.join([char for char in str1 if char not in str2])\n    \n    return result\n\n# Example usage:\nstr1 = \"helloWorld\"\nstr2 = \"loW\"\nprint(remove_dirty_chars(str1, str2))  # Output: \"heWrd\"\n\n# Test with non-alphabetic characters (should raise ValueError)\ntry:\n    str1 = \"helloWorld123\"\n    str2 = \"loW\"\n    print(remove_dirty_chars(str1, str2))\nexcept ValueError as e:\n    print(e)  # Output: Input strings must only contain alphabetic characters.\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1_bo54_n.py\", line 16, in <module>\n    print(remove_dirty_chars(str1, str2))\n  File \"/tmp/tmp1_bo54_n.py\", line 3, in remove_dirty_chars\n    assert all(c.isalpha() for c in str1), \"Input strings must only contain alphabetic characters.\"\nAssertionError: Input strings must only contain alphabetic characters.", "passed": false}
{"task_id": 19, "completion": "def test_duplicate(arr):\n    \"\"\"\n    Check if the given list of integers contains any duplicate elements.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    bool: True if there are duplicates, False otherwise.\n\n    Raises:\n    TypeError: If the input is not a list.\n    \"\"\"\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n\n    # Using a set to track seen elements\n    seen = set()\n\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n\n    return False\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(test_duplicate([1, 2, 3, 4]))  # Output: False\n    print(test_duplicate([1, 2, 3, 3]))  # Output: True\n    print(test_duplicate([1, 2, 3, 4, 5]))  # Output: False\n    print(test_duplicate([1, 2, 3, 4, 4]))  # Output: True\n    try:\n        print(test_duplicate(\"not a list\"))  # Should raise TypeError\n    except TypeError as e:\n        print(e)  # Output: Input must be a list\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(number):\n    \"\"\"\n    Check if the given number is a Woodall number.\n    \n    Args:\n    number (int): The number to check.\n    \n    Returns:\n    bool: True if the number is a Woodall number, False otherwise.\n    \"\"\"\n    # Start with n = 1 and keep checking until we either find a match or exceed the number\n    n = 1\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number == number:\n            return True\n        elif woodall_number > number:\n            return False\n        n += 1\n\n# Example usage:\nprint(is_woodall(7))   # True, because 7 = 1 * 2^3 - 1\nprint(is_woodall(23))  # False, 23 is not a Woodall number\nprint(is_woodall(959)  # True, because 959 = 10 * 2^10 - 1\n", "requirement": "Input-Output Conditions", "result": "failed: File \"/tmp/tmpeeuvsf58.py\", line 15\n    assert is_woodall(383) == True\n    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists):\n    \"\"\"\n    Finds the maximum sum of elements from any sublist within a given list of lists.\n\n    Parameters:\n    list_of_lists (list of lists): A list containing sublists of integers.\n\n    Returns:\n    int: The maximum sum of elements from any sublist.\n    \"\"\"\n    # Initialize the maximum sum to a very small number\n    max_sum = float('-inf')\n    \n    # Iterate through each sublist in the list of lists\n    for sublist in list_of_lists:\n        # Calculate the sum of the current sublist\n        current_sum = sum(sublist)\n        \n        # Update the maximum sum if the current sum is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum\n\n# Example usage:\nexample_list = [[1, 2, 3], [4, 5, 6], [10, -1, 2]]\nprint(maximum_sum(example_list))  # Output: 15\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 25, "completion": "from collections import Counter\n\ndef find_product(arr):\n    # Step 1: Count the frequency of each element\n    freq = Counter(arr)\n    \n    # Step 2: Identify non-repeated elements\n    non_repeated_elements = [element for element, count in freq.items() if count == 1]\n    \n    # Step 3: Compute the product of non-repeated elements\n    product = 1\n    for element in non_repeated_elements:\n        product *= element\n    \n    return product\n\n# Example usage:\narr = [2, 4, 6, 8, 2, 4]\nprint(find_product(arr))  # Output should be 6 * 8 = 48\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwsulwn4e.py\", line 15, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(tuples_list, k):\n    \"\"\"\n    Check if all tuples in the given list have exactly k elements.\n\n    Parameters:\n    - tuples_list (list): A list of tuples.\n    - k (int): The number of elements expected in each tuple.\n\n    Returns:\n    - bool: True if all tuples have exactly k elements, False otherwise.\n    \"\"\"\n    # Iterate through each tuple in the list\n    for tup in tuples_list:\n        # Check if the length of the tuple is not equal to k\n        if len(tup) != k:\n            return False\n    return True\n\n# Example usage:\ntuples_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nk = 3\nprint(check_k_elements(tuples_list, k))  # Output: True\n\ntuples_list = [(1, 2), (4, 5, 6), (7, 8, 9)]\nk = 3\nprint(check_k_elements(tuples_list, k))  # Output: False\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpn7ow61a7.py\", line 15, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 28, "completion": "import math\n\ndef binomial_coeff(n, k):\n    \"\"\"\n    Calculate the binomial coefficient (n choose k).\n\n    Parameters:\n    n (int): The total number of items.\n    k (int): The number of items to choose.\n\n    Returns:\n    int: The binomial coefficient.\n    \"\"\"\n    # Ensure n and k are non-negative integers\n    if not (isinstance(n, int) and isinstance(k, int) and n >= 0 and k >= 0):\n        raise ValueError(\"Both n and k must be non-negative integers\")\n\n    # Ensure k does not exceed n\n    if k > n:\n        return 0\n\n    # Calculate the binomial coefficient using the factorial function\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n\n# Example usage:\nprint(binomial_coeff(5, 2))  # Output: 10\nprint(binomial_coeff(10, 3)) # Output: 120\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    n = len(s)\n    count = 0\n    \n    # Iterate over each character in the string\n    for i in range(n):\n        # Count substrings starting and ending with s[i]\n        count += (i + 1) * (n - i)\n    \n    return count\n\n# Example usage:\ns = \"abccba\"\nprint(count_substring_with_equal_ends(s))  # Output: 12\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpixm9v8ff.py\", line 12, in <module>\n    assert count_substring_with_equal_ends(\"abc\") == 3\nAssertionError", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    # Function to check if a number is prime\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        for i in range(3, int(num**0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n\n    # Step 1: Remove all factors of 2\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n    \n    # Step 2: Check for odd factors\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            largest_prime = i\n            n //= i\n    \n    # Step 3: If n is a prime number greater than 2\n    if n > 2:\n        largest_prime = n\n    \n    return largest_prime\n\n# Example usage:\nprint(max_prime_factors(13195))  # Output: 29\nprint(max_prime_factors(600851475143))  # Output: 6857\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 35, "completion": "def find_rect_num(n):\n    \"\"\"\n    Find the n-th rectangular number.\n\n    Parameters:\n    n (int): The position in the sequence of rectangular numbers.\n\n    Returns:\n    int: The n-th rectangular number.\n    \"\"\"\n    return n * (n + 1)\n\n# Example usage:\nprint(find_rect_num(5))  # Output: 30 (5 * 6)\nprint(find_rect_num(7))  # Output: 56 (7 * 8)\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator, n):\n    \"\"\"\n    Finds the nth digit in the decimal representation of the fraction numerator/denominator.\n\n    :param numerator: The numerator of the fraction.\n    :param denominator: The denominator of the fraction.\n    :param n: The position of the digit to be found.\n    :return: The nth digit of the decimal representation of the fraction.\n    \"\"\"\n    # Compute the decimal representation of the fraction\n    fraction = numerator / denominator\n    \n    # Convert the fraction to a string to easily access digits\n    fraction_str = str(fraction)\n    \n    # Check if the fraction has a repeating decimal part\n    if '.' in fraction_str:\n        # Find the start of the repeating part\n        index = fraction_str.index('.')\n        non_repeating = fraction_str[index+1:index+n]\n        \n        # If there is no repeating part or we don't have enough digits, return -1\n        if len(non_repeating) < n:\n            return -1\n        \n        # Return the nth digit\n        return int(non_repeating[n-1])\n    \n    else:\n        # If there is no decimal part, the fraction is an integer\n        return -1\n\n# Example usage:\nprint(find_nth_digit(1, 2, 1))  # Output: 5 (since 1/2 = 0.5, the 1st digit after the decimal point is 5)\nprint(find_nth_digit(2, 3, 4))  # Output: 6 (since 2/3 = 0.666..., the 4th digit after the decimal point is 6)\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpzsh5op_l.py\", line 22, in <module>\n    assert find_nth_digit(1,2,1) == 5\nAssertionError", "passed": false}
{"task_id": 38, "completion": "def div_even_odd(numbers):\n    \"\"\"\n    This function takes a list of integers and returns the division of the first even number by the first odd number.\n    \n    :param numbers: List of integers\n    :return: Division result as a float or integer\n    \"\"\"\n    # Initialize variables to store the first even and odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Iterate through the list to find the first even and odd numbers\n    for num in numbers:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        elif first_odd is None and num % 2 != 0:\n            first_odd = num\n        \n        # If both first even and first odd numbers are found, break the loop\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Check if both first even and first odd numbers were found\n    if first_even is None or first_odd is None:\n        raise ValueError(\"The list must contain at least one even and one odd number.\")\n    \n    # Perform the division and return the result\n    result = first_even / first_odd\n    return result\n\n# Example usage:\nnumbers = [5, 3, 8, 1, 4]\nprint(div_even_odd(numbers))  # Output will be 1.6 since 4 (first even) / 2.5 (first odd) is 1.6\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 39, "completion": "def rearrange_string(s):\n    # Count the frequency of each character\n    from collections import Counter\n    char_count = Counter(s)\n    \n    # Sort the characters based on their frequency (descending order)\n    sorted_chars = sorted(char_count.items(), key=lambda x: x[1], reverse=True)\n    \n    # Initialize the result string\n    result = [''] * len(s)\n    \n    # Place the most frequent characters first\n    for i, (char, count) in enumerate(sorted_chars):\n        for j in range(count):\n            # Find the next available position\n            k = 0\n            while k < len(result) and result[k] != '':\n                k += 1\n            if k == len(result):\n                return \"\"  # Not possible to place all characters without adjacent duplicates\n            \n            result[k] = char\n    \n    # Fill the remaining positions with the least frequent characters\n    for i in range(len(result)):\n        if result[i] == '':\n            for char, count in sorted_chars:\n                if count > 0:\n                    result[i] = char\n                    count -= 1\n                    break\n    \n    return ''.join(result)\n\n# Example usage:\nprint(rearrange_string(\"aaabbc\"))  # Output could be \"ababac\" or similar\nprint(rearrange_string(\"aaabc\"))   # Output could be \"abaca\" or similar\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp29l2dj4j.py\", line 31, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 42, "completion": "def find_sum(arr):\n    # Create a dictionary to store the count of each element\n    element_count = {}\n    \n    # Iterate over the array and populate the dictionary with counts\n    for element in arr:\n        if element in element_count:\n            element_count[element] += 1\n        else:\n            element_count[element] = 1\n    \n    # Calculate the sum of counts of elements that appear more than once\n    sum_of_repeats = sum(count for count in element_count.values() if count > 1)\n    \n    return sum_of_repeats\n\n# Example usage:\narr = [1, 2, 3, 2, 4, 5, 5]\nprint(find_sum(arr))  # Output: 6 (2 appears twice and 5 appears twice, so 2+2+2=6)\n\narr = [1, 2, 3, 4]\nprint(find_sum(arr))  # Output: 0 (no repeated elements)\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp31dz7nn6.py\", line 18, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    # Define the regex pattern for lowercase letters joined by an underscore\n    pattern = '^[a-z]+_[a-z]+$'\n    \n    # Search for the pattern in the given text\n    if re.search(pattern, text):\n        return re.search(pattern, text).group()  # Return the matched sequence\n    else:\n        return 'Not matched!'\n\n# Example usage:\nprint(text_match(\"hello_world\"))  # Should return \"hello_world\"\nprint(text_match(\"Hello_World\"))  # Should return \"Not matched!\"\nprint(text_match(\"hello_world123\"))  # Should return \"Not matched!\"\nprint(text_match(\"_hello_world\"))  # Should return \"Not matched!\"\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0d7_6jwe.py\", line 15, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 46, "completion": "def test_distinct(numbers):\n    \"\"\"\n    Determine if all numbers in the given list are distinct.\n    \n    :param numbers: List of integers\n    :return: Boolean indicating whether all numbers are distinct\n    \"\"\"\n    return len(numbers) == len(set(numbers))\n\n# Example usage:\nnumbers1 = [1, 2, 3, 4, 5]\nnumbers2 = [1, 2, 3, 3, 4]\n\nprint(test_distinct(numbers1))  # Output: True\nprint(test_distinct(numbers2))  # Output: False\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 48, "completion": "def odd_bit_set_number(n):\n    \"\"\"\n    Set all odd bits of the given number n.\n    \n    Parameters:\n    n (int): The input number.\n    \n    Returns:\n    int: The number with all odd bits set.\n    \"\"\"\n    # Create a mask with all odd bits set\n    # For example, for 32-bit integers:\n    # 0b10101010101010101010101010101010 -> 0b11111111111111111111111111111111\n    # This pattern can be generated using the expression (1 << (n // 2 + 1)) - 1\n    # and then shifting it to the correct position.\n    mask = ((1 << (n.bit_length() // 2 + 1)) - 1) << 1\n    \n    # Use bitwise OR to set all odd bits\n    return n | mask\n\n# Example usage:\nprint(odd_bit_set_number(10))  # Binary: 1010 -> 1111 (15)\nprint(odd_bit_set_number(17))  # Binary: 10001 -> 11111 (31)\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpj9qwcrvx.py\", line 13, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(two_d_list, index):\n    \"\"\"\n    Extracts elements at a specified index from each sublist in a two-dimensional list.\n    \n    :param two_d_list: A two-dimensional list from which to extract elements.\n    :param index: The index of the elements to extract from each sublist.\n    :return: A list containing the elements at the specified index from each sublist.\n    \"\"\"\n    # Check if the two_d_list is empty\n    if not two_d_list:\n        return []\n    \n    # Extract the elements at the specified index from each sublist\n    extracted_elements = [sublist[index] for sublist in two_d_list if len(sublist) > index]\n    \n    return extracted_elements\n\n# Example usage:\ntwo_d_list = [\n    [1, 2, 3],\n    [4, 5, 6, 7],\n    [8, 9],\n    [10, 11, 12, 13, 14]\n]\n\n# Extracting the first element from each sublist\nprint(specified_element(two_d_list, 0))  # Output: [1, 4, 8, 10]\n\n# Extracting the third element from each sublist (if it exists)\nprint(specified_element(two_d_list, 2))  # Output: [3, 6]\n\n# Extracting from an empty list\nprint(specified_element([], 1))  # Output: []\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 50, "completion": "def min_length_list(list_of_lists):\n    # Use the min function with a key argument that applies a lambda function\n    # The lambda function calculates the length of each list\n    min_list = min(list_of_lists, key=lambda x: len(x))\n    \n    # Return a tuple containing the length of the shortest list and the list itself\n    return (len(min_list), min_list)\n\n# Example usage:\nexample_lists = [[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]\nresult = min_length_list(example_lists)\nprint(result)  # Output will be (2, [4, 5])\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram.\n\n    Raises:\n    ValueError: If either base or height is not a positive number.\n    \"\"\"\n    if base <= 0 or height <= 0:\n        raise ValueError(\"Both base and height must be positive numbers.\")\n\n    area = base * height\n    return area\n\n# Example usage:\ntry:\n    base = 5.0  # Example base value\n    height = 3.0  # Example height value\n    area = parallelogram_area(base, height)\n    print(f\"The area of the parallelogram with base {base} and height {height} is {area}\")\nexcept ValueError as e:\n    print(e)\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpns12st7o.py\", line 18, in <module>\n    assert parallelogram_area(0, 10) == 0\n  File \"/tmp/tmpns12st7o.py\", line 3, in parallelogram_area\n    raise ValueError(\"Both base and height must be positive numbers.\")\nValueError: Both base and height must be positive numbers.", "passed": false}
{"task_id": 53, "completion": "def check_equality(s):\n    # Check if the input is a string\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string\")\n    \n    # Get the first and last characters of the string\n    first_char = s[0]\n    last_char = s[-1]\n    \n    # Compare the first and last characters\n    if first_char == last_char:\n        return 'Equal'\n    else:\n        return 'Not Equal'\n\n# Example usage:\nprint(check_equality(\"hello\"))  # Output: Not Equal\nprint(check_equality(\"radar\"))  # Output: Equal\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 54, "completion": "def counting_sort(arr):\n    \"\"\"\n    Sorts a list of non-negative integers using the counting sort algorithm.\n    \n    Parameters:\n    arr (list): A list of non-negative integers.\n    \n    Returns:\n    list: A sorted list of integers.\n    \"\"\"\n    if not arr:\n        return []\n\n    # Find the maximum value to determine the size of the count array\n    max_val = max(arr)\n    \n    # Initialize the count array with zeros\n    count = [0] * (max_val + 1)\n    \n    # Count the occurrences of each number in the input array\n    for num in arr:\n        count[num] += 1\n    \n    # Modify the count array such that each element at each index\n    # stores the sum of previous counts (cumulative count)\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    \n    # Output array to store the sorted elements\n    output = [0] * len(arr)\n    \n    # Build the output array by placing elements at their correct positions\n    for num in reversed(arr):\n        output[count[num] - 1] = num\n        count[num] -= 1\n    \n    return output\n\n# Example usage:\narr = [4, 2, 2, 8, 3, 3, 1]\nsorted_arr = counting_sort(arr)\nprint(sorted_arr)  # Output: [1, 2, 2, 3, 3, 4, 8]\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 57, "completion": "from itertools import permutations\n\ndef find_max_num(digits, num_digits):\n    \"\"\"\n    Finds the largest number that can be formed with the given digits.\n    \n    :param digits: List of integers representing the digits.\n    :param num_digits: Integer representing the number of digits in the resulting number.\n    :return: Integer representing the largest number that can be formed.\n    \"\"\"\n    if not digits or num_digits <= 0:\n        return None\n    \n    # Generate all permutations of the given length\n    perm = permutations(digits, num_digits)\n    \n    # Convert each permutation to a number and find the maximum\n    max_num = max(int(''.join(map(str, p))) for p in perm)\n    \n    return max_num\n\n# Example usage:\ndigits = [1, 2, 3, 4]\nnum_digits = 3\nprint(find_max_num(digits, num_digits))  # Output: 432\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 58, "completion": "def opposite_signs(a, b):\n    # Check if the signs of a and b are different\n    # This is true if the result of (a & b) is 0\n    # and one of them is positive and the other is negative\n    return (a * b < 0)\n\n# Example usage:\nprint(opposite_signs(10, -5))  # True\nprint(opposite_signs(-3, -7))  # False\nprint(opposite_signs(20, 40))  # False\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 60, "completion": "def max_len_sub(arr):\n    \"\"\"\n    Finds the maximum length of a subsequence where the difference between adjacent elements is 1.\n    \n    :param arr: List[int] - The input array of integers.\n    :return: int - The maximum length of such subsequence.\n    \"\"\"\n    # Dictionary to store the length of the longest subsequence ending with each element\n    dp = {}\n    \n    # Iterate through the array\n    for num in arr:\n        # Initialize the length for the current number if not already present\n        if num not in dp:\n            dp[num] = 1\n        \n        # Check if there is a previous number that can form a subsequence with the current number\n        prev_num = num - 1\n        if prev_num in dp:\n            dp[num] = max(dp[num], dp[prev_num] + 1)\n        \n        # Check if there is a next number that can form a subsequence with the current number\n        next_num = num + 1\n        if next_num in dp:\n            dp[num] = max(dp[num], dp[next_num] + 1)\n    \n    # Return the maximum value from the dictionary\n    return max(dp.values())\n\n# Example usage:\narr = [1, 2, 3, 2, 4, 5]\nprint(max_len_sub(arr))  # Output: 4\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmuqk9rt9.py\", line 22, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}

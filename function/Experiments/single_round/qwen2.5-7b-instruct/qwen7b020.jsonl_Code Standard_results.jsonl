{"task_id": 11, "completion": "def remove_occ(string: str, char: str) -> str:\n    \"\"\"\n    Removes the first and last occurrence of a given character from the string.\n\n    :param string: The input string from which characters will be removed.\n    :param char: The character to be removed from the string.\n    :return: A new string with the first and last occurrences of the specified character removed.\n    \"\"\"\n    # Find the indices of the first and last occurrences of the character\n    try:\n        first_index = string.index(char)\n        last_index = string.rindex(char)\n    except ValueError:\n        # If the character is not found in the string, return the original string\n        return string\n\n    # Handle edge case where the character is at the beginning or end of the string\n    if first_index == last_index:\n        return string.replace(char, '', 1).replace(char, '', 1)\n\n    # Remove the first and last occurrence of the character\n    new_string = string[:first_index] + string[first_index+1:last_index] + string[last_index+1:]\n\n    return new_string\n\n# Example usage\nif __name__ == \"__main__\":\n    test_string = \"aabcda\"\n    char_to_remove = \"a\"\n    result = remove_occ(test_string, char_to_remove)\n    print(f\"Original String: {test_string}\")\n    print(f\"Character to Remove: '{char_to_remove}'\")\n    print(f\"Result: {result}\")\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4cqtx7gv.py\", line 40, in <module>\n    check_code_style(remove_occ)\n  File \"/tmp/tmp4cqtx7gv.py\", line 36, in check_code_style\n    assert result.total_errors == 0, \"Code does not conform to PEP 8 standards.\"\nAssertionError: Code does not conform to PEP 8 standards.", "passed": false}
{"task_id": 12, "completion": "def sort_matrix(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order based on the sum of its rows.\n\n    Parameters:\n        matrix (list of lists): The input matrix to be sorted.\n\n    Returns:\n        list of lists: The sorted matrix.\n    \"\"\"\n\n    # Calculate the sum of each row and store it along with the row index\n    row_sums = [(sum(row), idx) for idx, row in enumerate(matrix)]\n\n    # Sort the row sums and their corresponding indices\n    row_sums.sort()\n\n    # Reorder the matrix based on the sorted row sums\n    sorted_matrix = [matrix[idx] for _, idx in row_sums]\n\n    return sorted_matrix\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_matrix = [\n        [3, 5, 1],\n        [2, 2, 2],\n        [4, 0, 1]\n    ]\n    \n    sorted_matrix = sort_matrix(example_matrix)\n    print(\"Original Matrix:\")\n    for row in example_matrix:\n        print(row)\n    print(\"\\nSorted Matrix:\")\n    for row in sorted_matrix:\n        print(row)\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 14, "completion": "def find_volume(base_length, base_width, height, prism_height):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base_length (float): The length of the base triangle.\n    base_width (float): The width of the base triangle.\n    height (float): The height of the base triangle.\n    prism_height (float): The height of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    # Calculate the area of the triangular base\n    base_area = 0.5 * base_length * base_width\n    \n    # Calculate the volume of the prism\n    volume = base_area * prism_height\n    \n    return volume\n\n# Example usage:\nbase_length = 4.0\nbase_width = 3.0\nheight = 2.0\nprism_height = 10.0\n\nvolume = find_volume(base_length, base_width, height, prism_height)\nprint(f\"The volume of the triangular prism is: {volume}\")\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpy8rkmh_v.py\", line 14, in <module>\n    assert find_volume(10,8,6) == 240\nTypeError: find_volume() missing 1 required positional argument: 'prism_height'", "passed": false}
{"task_id": 15, "completion": "def split_lowerstring(input_string):\n    \"\"\"\n    Splits the input string at lowercase letters.\n\n    Args:\n    input_string (str): The string to be split.\n\n    Returns:\n    list: A list of substrings obtained by splitting the input string at lowercase letters.\n    \"\"\"\n    result = []\n    current_substring = ''\n\n    for char in input_string:\n        if char.islower():\n            if current_substring:\n                result.append(current_substring)\n                current_substring = ''\n        current_substring += char\n\n    if current_substring:\n        result.append(current_substring)\n\n    return result\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqepcqd62.py\", line 13, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "completion": "def text_lowercase_underscore(text):\n    \"\"\"\n    Finds sequences of lowercase letters joined with an underscore in the given text.\n\n    Args:\n        text (str): The input string to search within.\n\n    Returns:\n        list: A list of found sequences.\n    \"\"\"\n    import re\n\n    # Regular expression to match sequences of lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    \n    # Find all matches in the input text\n    matches = re.findall(pattern, text)\n    \n    return matches\n\n# Example usage\nif __name__ == \"__main__\":\n    example_text = \"This is an example_text_for testing lower_case detection and another_example_text.\"\n    print(text_lowercase_underscore(example_text))\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0fu9d05p.py\", line 12, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Parameters:\n    side_length (float): The length of one side of the square.\n\n    Returns:\n    float: The perimeter of the square.\n    \"\"\"\n    return 4 * side_length\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(source_str: str, chars_to_remove: str) -> str:\n    \"\"\"\n    Removes characters from source_str that are present in chars_to_remove.\n\n    Parameters:\n    source_str (str): The original string from which characters will be removed.\n    chars_to_remove (str): The string containing characters to be removed from source_str.\n\n    Returns:\n    str: A new string with characters from chars_to_remove removed from source_str.\n    \"\"\"\n    return ''.join(char for char in source_str if char not in chars_to_remove)\n\n# Example usage:\nsource = \"Hello, World!\"\nchars_to_remove = \",!\"\ncleaned_source = remove_dirty_chars(source, chars_to_remove)\nprint(cleaned_source)  # Output: Hello World\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 19, "completion": "def test_duplicate(numbers):\n    \"\"\"\n    Check if the given list of integers contains any duplicate elements.\n\n    Args:\n    numbers (list): A list of integers.\n\n    Returns:\n    bool: True if there is at least one duplicate element, False otherwise.\n    \"\"\"\n    seen = set()\n    for number in numbers:\n        if number in seen:\n            return True\n        seen.add(number)\n    return False\n\n# Example usage:\nnumbers_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(test_duplicate(numbers_list))  # Output: False\n\nnumbers_list_with_duplicates = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]\nprint(test_duplicate(numbers_list_with_duplicates))  # Output: True\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(number):\n    \"\"\"\n    Check if the given number is a Woodall number.\n    \n    Args:\n    number (int): The number to check.\n    \n    Returns:\n    bool: True if the number is a Woodall number, False otherwise.\n    \"\"\"\n    if number < 0:\n        return False\n    \n    n = 1\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number == number:\n            return True\n        elif woodall_number > number:\n            return False\n        n += 1\n\n# Example usage:\nprint(is_woodall(7))   # True, because 7 = 1 * 2^3 - 1\nprint(is_woodall(23))  # False\nprint(is_woodall(31))  # True, because 31 = 5 * 2^5 - 1\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 21, "completion": "def multiples_of_num(n, m):\n    \"\"\"\n    Generate a list of m multiples of the given number n.\n\n    Parameters:\n    n (int): The base number to find multiples of.\n    m (int): The number of multiples to generate.\n\n    Returns:\n    list: A list containing the first m multiples of n.\n    \"\"\"\n    return [i * n for i in range(1, m + 1)]\n\n# Example usage:\nif __name__ == \"__main__\":\n    n = 5\n    m = 7\n    print(multiples_of_num(n, m))\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpledbvzo8.py\", line 8, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "completion": "def find_first_duplicate(arr):\n    \"\"\"\n    Finds the first duplicate element in a given array of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The first duplicate integer found in the array, or None if no duplicates are found.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_array = [2, 1, 5, 2, 3, 3, 4]\n    result = find_first_duplicate(example_array)\n    print(f\"The first duplicate element is: {result}\")\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7y9mvnbf.py\", line 14, in <module>\n    assert find_first_duplicate([1, 2, 3, 4])==-1\nAssertionError", "passed": false}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists):\n    \"\"\"\n    Finds the maximum sum of elements in a list of lists.\n    \n    Parameters:\n    list_of_lists (list): A list containing sublists of integers.\n    \n    Returns:\n    int: The maximum sum of any sublist.\n    \"\"\"\n    if not list_of_lists:\n        return 0\n\n    max_sum = float('-inf')  # Initialize with negative infinity to handle all negative numbers\n\n    for sublist in list_of_lists:\n        current_sum = sum(sublist)\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_list = [[1, 2, 3], [4, 5, 6], [10, -1, 2]]\n    print(\"Maximum Sum:\", maximum_sum(example_list))  # Output: Maximum Sum: 15\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5mhm90ec.py\", line 30, in <module>\n    check_code_style(maximum_sum)\n  File \"/tmp/tmp5mhm90ec.py\", line 26, in check_code_style\n    assert result.total_errors == 0, \"Code does not conform to PEP 8 standards.\"\nAssertionError: Code does not conform to PEP 8 standards.", "passed": false}
{"task_id": 24, "completion": "def binary_to_decimal(binary_str):\n    \"\"\"\n    Convert a binary number (given as a string) to its decimal equivalent.\n\n    Parameters:\n    binary_str (str): A string representing a binary number.\n\n    Returns:\n    int: The decimal equivalent of the binary number.\n\n    Example:\n    >>> binary_to_decimal('1011')\n    11\n    \"\"\"\n    decimal_value = 0\n    # Reverse the binary string for easier processing from the least significant bit\n    binary_str = binary_str[::-1]\n\n    for index, digit in enumerate(binary_str):\n        if digit not in ('0', '1'):\n            raise ValueError(\"Input string must contain only '0's and '1's.\")\n        decimal_value += int(digit) * (2 ** index)\n\n    return decimal_value\n\n# Example usage\nif __name__ == \"__main__\":\n    binary_number = '1011'\n    print(f\"The decimal equivalent of binary {binary_number} is {binary_to_decimal(binary_number)}\")\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0j6ysehk.py\", line 14, in <module>\n    assert binary_to_decimal(100) == 4\n  File \"/tmp/tmp0j6ysehk.py\", line 4, in binary_to_decimal\n    binary_str = binary_str[::-1]\nTypeError: 'int' object is not subscriptable", "passed": false}
{"task_id": 25, "completion": "def find_product(arr):\n    \"\"\"\n    Calculate the product of non-repeated elements in a given array.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The product of non-repeated elements.\n    \"\"\"\n    from collections import Counter\n\n    # Count the occurrences of each element\n    element_counts = Counter(arr)\n\n    # Filter out the elements that occur more than once\n    unique_elements = [element for element, count in element_counts.items() if count == 1]\n\n    # Calculate the product of the unique elements\n    product = 1\n    for element in unique_elements:\n        product *= element\n\n    return product\n\n# Example usage:\narr = [2, 3, 4, 5, 2, 3]\nprint(find_product(arr))  # Output: 20 (4 * 5)\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3ybipc89.py\", line 15, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(tuples_list, k):\n    \"\"\"\n    Check if each tuple in the given list has at least k elements.\n\n    Args:\n    tuples_list (list): A list of tuples.\n    k (int): The minimum number of elements required in each tuple.\n\n    Returns:\n    bool: True if all tuples have at least k elements, False otherwise.\n    \"\"\"\n    for tup in tuples_list:\n        if len(tup) < k:\n            return False\n    return True\n\n# Example usage:\nexample_tuples = [(1, 2, 3), (4, 5), (6, 7, 8, 9)]\nk_value = 3\nresult = check_k_elements(example_tuples, k_value)\nprint(f\"All tuples have at least {k_value} elements: {result}\")\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqb07znd0.py\", line 11, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "completion": "def remove(strings):\n    \"\"\"\n    Removes all digits from a list of strings.\n\n    :param strings: List of strings from which digits will be removed.\n    :return: A new list of strings with all digits removed.\n    \"\"\"\n    return [''.join(filter(lambda x: not x.isdigit(), s)) for s in strings]\n\n# Example usage:\nexample_list = [\"hello123\", \"world456\", \"test789\", \"python\"]\nresult = remove(example_list)\nprint(result)  # Output: ['hello', 'world', 'test', 'python']\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 28, "completion": "def binomial_coeff(n: int, k: int) -> int:\n    \"\"\"\n    Calculate the binomial coefficient \"n choose k\".\n\n    Args:\n        n (int): The total number of items.\n        k (int): The number of items to choose.\n\n    Returns:\n        int: The binomial coefficient of n and k.\n    \"\"\"\n    # Ensure k does not exceed n\n    if k > n:\n        return 0\n\n    # Take advantage of symmetry: C(n, k) == C(n, n-k)\n    k = min(k, n - k)\n\n    # Calculate the binomial coefficient using a multiplicative formula\n    coeff = 1\n    for i in range(1, k + 1):\n        coeff *= n - (k - i)\n        coeff //= i\n\n    return coeff\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 29, "completion": "def get_odd_occurrence(numbers):\n    \"\"\"\n    Finds the element that occurs an odd number of times in the given list.\n    \n    Args:\n    numbers (list): A list of integers.\n    \n    Returns:\n    int: The integer that occurs an odd number of times. If no such element exists, returns None.\n    \"\"\"\n    # Initialize a dictionary to keep track of counts\n    count_dict = {}\n    \n    # Iterate through the list and count occurrences of each number\n    for num in numbers:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Find the number with an odd count\n    for num, count in count_dict.items():\n        if count % 2 != 0:\n            return num\n    \n    # Return None if no element has an odd occurrence\n    return None\n\n# Example usage\nif __name__ == \"__main__\":\n    example_list = [1, 2, 3, 2, 3, 1, 3]\n    result = get_odd_occurrence(example_list)\n    print(f\"The element occurring odd number of times is: {result}\")\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp54rq2rn5.py\", line 21, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    \"\"\"\n    Count all substrings of the input string s that start and end with the same character.\n\n    :param s: Input string\n    :return: Count of substrings starting and ending with the same character\n    \"\"\"\n    count = 0\n    n = len(s)\n\n    for i in range(n):\n        # Check for substrings starting and ending with s[i]\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n\n    return count\n\n# Example usage:\ninput_string = \"aba\"\nresult = count_substring_with_equal_ends(input_string)\nprint(f\"Count of substrings starting and ending with the same character: {result}\")\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 31, "completion": "import heapq\n\ndef func(sorted_lists, k):\n    \"\"\"\n    Find the top k integers that occur most frequently from given lists of sorted and distinct integers.\n\n    :param sorted_lists: A list of sorted lists of integers.\n    :param k: The number of top frequent integers to return.\n    :return: A list of the top k integers that occur most frequently.\n    \"\"\"\n    # Dictionary to keep track of frequency of each integer\n    frequency = {}\n    \n    # Iterate through each list and update the frequency dictionary\n    for lst in sorted_lists:\n        for num in lst:\n            if num in frequency:\n                frequency[num] += 1\n            else:\n                frequency[num] = 1\n    \n    # Use a min heap to keep track of the top k elements\n    min_heap = []\n    \n    # Push the first k elements into the heap\n    for num, freq in frequency.items():\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, (freq, num))\n        else:\n            # If the current frequency is greater than the smallest frequency in the heap\n            if freq > min_heap[0][0]:\n                heapq.heapreplace(min_heap, (freq, num))\n    \n    # Extract the top k elements from the heap\n    top_k = [num for _, num in min_heap]\n    \n    return top_k\n\n# Example usage\nsorted_lists = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\nk = 2\nprint(func(sorted_lists, k))  # Output: [3, 2]\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpf2uhrg6s.py\", line 29, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    \"\"\"\n    Find the largest prime factor of a given number.\n\n    Parameters:\n    n (int): The number to find the largest prime factor for.\n\n    Returns:\n    int: The largest prime factor of the given number.\n    \"\"\"\n    # Initialize the largest prime factor variable\n    largest_prime = -1\n\n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n\n    # Now n must be odd, start checking from 3\n    factor = 3\n    while factor * factor <= n:\n        while n % factor == 0:\n            largest_prime = factor\n            n //= factor\n        factor += 2\n\n    # If n is a prime number greater than 2\n    if n > 2:\n        largest_prime = n\n\n    return largest_prime\n\n# Example usage:\nnumber = 600851475143\nprint(f\"The largest prime factor of {number} is {max_prime_factors(number)}\")\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(decimal_number):\n    \"\"\"\n    Convert a decimal number to its binary representation.\n\n    Args:\n        decimal_number (int): The decimal number to be converted.\n\n    Returns:\n        str: The binary representation of the given decimal number.\n    \"\"\"\n    if decimal_number == 0:\n        return \"0\"\n    \n    binary_number = \"\"\n    while decimal_number > 0:\n        remainder = decimal_number % 2\n        binary_number = str(remainder) + binary_number\n        decimal_number //= 2\n    \n    return binary_number\n\n# Example usage:\nif __name__ == \"__main__\":\n    test_number = 42\n    print(f\"The binary representation of {test_number} is {decimal_to_binary(test_number)}\")\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpngf44n87.py\", line 14, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "completion": "def find_missing(arr):\n    \"\"\"\n    Finds the missing number in a sorted array of unique integers.\n    \n    Args:\n    arr (list): A sorted list of unique integers with one missing element.\n    \n    Returns:\n    int: The missing number in the array.\n    \"\"\"\n    if not arr:\n        raise ValueError(\"Array cannot be empty\")\n    \n    start = 0\n    end = len(arr) - 1\n    \n    # Edge case where the first or last element is missing\n    if arr[start] != start:\n        return start\n    if arr[end] != end + 1:\n        return end + 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        \n        # Check if the missing number is on the left side\n        if arr[mid] != mid and (mid == 0 or arr[mid - 1] == mid - 1):\n            return mid\n        # If the current element is equal to its index, search in the right half\n        elif arr[mid] == mid:\n            start = mid + 1\n        else:\n            end = mid - 1\n            \n    raise ValueError(\"No missing number found\")\n\n# Example usage:\narr = [0, 1, 2, 4, 5, 6]\nprint(find_missing(arr))  # Output: 3\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpj2tz0rd4.py\", line 25, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    \"\"\"\n    Calculate the n-th rectangular number.\n\n    Args:\n    n (int): The position in the sequence of rectangular numbers.\n\n    Returns:\n    int: The n-th rectangular number.\n    \"\"\"\n    return n * (n + 1)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test the function with some values\n    test_values = [1, 2, 3, 4, 5]\n    for value in test_values:\n        print(f\"The {value}-th rectangular number is: {find_rect_num(value)}\")\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 36, "completion": "def find_nth_digit(numerator: int, denominator: int, n: int) -> int:\n    \"\"\"\n    Finds the n-th digit in the decimal representation of the fraction numerator/denominator.\n    \n    Args:\n        numerator (int): The numerator of the fraction.\n        denominator (int): The denominator of the fraction.\n        n (int): The position of the digit to be found in the decimal representation.\n        \n    Returns:\n        int: The n-th digit in the decimal representation of the fraction.\n        \n    Raises:\n        ValueError: If the denominator is zero or if n is negative.\n    \"\"\"\n    if denominator == 0:\n        raise ValueError(\"Denominator cannot be zero.\")\n    if n < 1:\n        raise ValueError(\"The value of n must be a positive integer.\")\n    \n    # Convert the fraction to its decimal representation as a string\n    fraction_str = str(numerator / denominator)\n    \n    # Remove the leading '0.' from the string representation\n    decimal_part = fraction_str.split('.')[1]\n    \n    # Check if the requested digit is within the length of the decimal part\n    if n > len(decimal_part):\n        return -1  # Return -1 if the digit does not exist\n    \n    # Return the n-th digit\n    return int(decimal_part[n - 1])\n\n# Example usage:\nif __name__ == \"__main__\":\n    numerator = 1\n    denominator = 7\n    n = 4\n    print(f\"The {n}-th digit in the decimal representation of {numerator}/{denominator} is: {find_nth_digit(numerator, denominator, n)}\")\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 37, "completion": "def sort_mixed_list(mixed_list):\n    \"\"\"\n    Sorts a mixed list containing both integers and strings.\n    \n    Args:\n        mixed_list (list): A list containing integers and strings.\n        \n    Returns:\n        list: A sorted list with integers and strings separated and sorted accordingly.\n    \"\"\"\n    # Separate integers and strings into two different lists\n    integers = [x for x in mixed_list if isinstance(x, int)]\n    strings = [x for x in mixed_list if isinstance(x, str)]\n    \n    # Sort the integer list\n    integers.sort()\n    \n    # Sort the string list lexicographically\n    strings.sort()\n    \n    # Concatenate the sorted lists\n    sorted_list = integers + strings\n    \n    return sorted_list\n\n# Example usage:\nmixed_list = [1, 'apple', 'banana', 3, '2', '10', 5]\nsorted_list = sort_mixed_list(mixed_list)\nprint(sorted_list)  # Output: [1, 3, 5, '10', '2', 'apple', 'banana']\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 38, "completion": "def div_even_odd(numbers):\n    \"\"\"\n    Divides the first even number by the first odd number in the given list.\n    \n    Args:\n    numbers (list): A list of integers.\n    \n    Returns:\n    float: The result of dividing the first even number by the first odd number.\n           Returns None if there is no even or odd number in the list.\n    \n    Examples:\n    >>> div_even_odd([5, 2, 3, 4])\n    0.6666666666666666\n    \n    >>> div_even_odd([7, 9, 11])\n    None\n    \"\"\"\n    # Initialize variables to store the first even and odd numbers\n    first_even = None\n    first_odd = None\n\n    # Iterate through the list to find the first even and odd numbers\n    for num in numbers:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n\n    # Check if both first_even and first_odd have been found\n    if first_even is None or first_odd is None:\n        return None\n\n    # Perform the division\n    result = first_even / first_odd\n    return result\n\n# Example usage\nif __name__ == \"__main__\":\n    print(div_even_odd([5, 2, 3, 4]))  # Output: 0.6666666666666666\n    print(div_even_odd([7, 9, 11]))    # Output: None\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 39, "completion": "def rearrange_string(s: str) -> bool:\n    \"\"\"\n    Check if the characters in the given string can be rearranged so that no two adjacent characters are the same.\n\n    Args:\n        s (str): The input string to check.\n\n    Returns:\n        bool: True if the string can be rearranged as required, False otherwise.\n    \"\"\"\n\n    # Count the frequency of each character in the string\n    char_count = {}\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n\n    # Sort the characters based on their frequency in descending order\n    sorted_chars = sorted(char_count.items(), key=lambda x: -x[1])\n\n    # If the most frequent character appears more than half the length of the string,\n    # it's impossible to rearrange the string as required\n    if sorted_chars[0][1] > (len(s) + 1) // 2:\n        return False\n\n    # Initialize the result string with placeholders\n    result = [''] * len(s)\n\n    # Place the most frequent characters first, alternating between two positions\n    even_pos = 0\n    odd_pos = 1\n    for char, count in sorted_chars:\n        for _ in range(count):\n            if even_pos < len(s):\n                result[even_pos] = char\n                even_pos += 2\n            else:\n                result[odd_pos] = char\n                odd_pos += 2\n\n    # Check if the resulting string meets the requirement\n    for i in range(len(result) - 1):\n        if result[i] == result[i + 1]:\n            return False\n\n    return True\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8f458klq.py\", line 30, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "completion": "from collections import Counter\n\ndef freq_element(matrix):\n    \"\"\"\n    Finds the frequency of each element in a given list of lists.\n\n    Args:\n    matrix (list of lists): A nested list containing elements.\n\n    Returns:\n    dict: A dictionary where keys are unique elements from the matrix and values are their respective frequencies.\n    \"\"\"\n    # Flatten the list of lists into a single list\n    flat_list = [item for sublist in matrix for item in sublist]\n    \n    # Use Counter to get the frequency of each element\n    frequency = Counter(flat_list)\n    \n    return frequency\n\n# Example usage:\nif __name__ == \"__main__\":\n    nested_list = [[1, 2, 3], [4, 5, 1], [3, 6, 7]]\n    result = freq_element(nested_list)\n    print(result)\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 41, "completion": "def filter_evennumbers(numbers):\n    \"\"\"\n    Filters even numbers from the given list using a lambda function.\n\n    :param numbers: A list of integers.\n    :return: A list containing only the even numbers from the input list.\n    \"\"\"\n    even_numbers = list(filter(lambda x: x % 2 == 0, numbers))\n    return even_numbers\n\n# Example usage:\nif __name__ == \"__main__\":\n    sample_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(\"Original List:\", sample_numbers)\n    print(\"Even Numbers:\", filter_evennumbers(sample_numbers))\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 42, "completion": "def find_sum(arr):\n    \"\"\"\n    Calculate the sum of all repeated elements in the given array.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The sum of all repeated elements in the array.\n    \"\"\"\n    from collections import Counter\n\n    # Count the occurrences of each element in the array\n    element_counts = Counter(arr)\n\n    # Calculate the sum of elements that appear more than once\n    sum_of_repeats = sum(element for element, count in element_counts.items() if count > 1)\n\n    return sum_of_repeats\n\n# Example usage:\narr = [1, 2, 3, 2, 3, 4, 5, 3]\nprint(find_sum(arr))  # Output should be 3 + 2 + 3 = 8\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmptz6r1i0r.py\", line 11, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    \"\"\"\n    This function uses regex to find sequences of lowercase letters joined with an underscore.\n    \n    Args:\n    text (str): The input string to search within.\n    \n    Returns:\n    list: A list of all matches found in the input string.\n    \"\"\"\n    # Regular expression pattern for matching sequences of lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    \n    # Find all matches in the input text\n    matches = re.findall(pattern, text)\n    \n    return matches\n\n# Example usage\nif __name__ == \"__main__\":\n    example_text = \"This is an example_string for the function and another_example_to_test.\"\n    print(text_match(example_text))\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpb1kk7k0d.py\", line 12, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 44, "completion": "def text_match_string(pattern: str, text: str) -> bool:\n    \"\"\"\n    Matches a word at the beginning of a string.\n\n    Args:\n        pattern (str): The word pattern to match.\n        text (str): The input string to search within.\n\n    Returns:\n        bool: True if the pattern matches the beginning of the text, False otherwise.\n    \"\"\"\n    import re\n\n    # Escape any special characters in the pattern\n    pattern = re.escape(pattern)\n\n    # Compile the regular expression pattern\n    regex = re.compile(r'^' + pattern)\n\n    # Match the pattern against the start of the text\n    match = regex.match(text)\n\n    return bool(match)\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp415n6nrb.py\", line 10, in <module>\n    assert text_match_string(\" python\")==('Not matched!')\nTypeError: text_match_string() missing 1 required positional argument: 'text'", "passed": false}
{"task_id": 45, "completion": "import math\n\ndef get_gcd(arr):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of all elements in the given array.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The GCD of all elements in the array.\n    \"\"\"\n    if not arr:\n        return None  # Return None if the array is empty\n    \n    current_gcd = arr[0]\n    \n    for num in arr[1:]:\n        current_gcd = math.gcd(current_gcd, num)\n        \n        # If GCD becomes 1, no need to continue as it won't change further\n        if current_gcd == 1:\n            break\n            \n    return current_gcd\n\n# Example usage:\narray = [24, 36, 48]\nprint(get_gcd(array))  # Output: 12\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 46, "completion": "def test_distinct(numbers):\n    \"\"\"\n    Determines if all elements in the provided list of numbers are distinct.\n    \n    Args:\n        numbers (list): A list of numbers to be checked for distinctness.\n        \n    Returns:\n        bool: True if all numbers are distinct, False otherwise.\n    \"\"\"\n    return len(numbers) == len(set(numbers))\n\n# Example usage:\nnumbers_list = [1, 2, 3, 4, 5]\nprint(test_distinct(numbers_list))  # Output: True\n\nnumbers_list_with_duplicates = [1, 2, 3, 3, 4]\nprint(test_distinct(numbers_list_with_duplicates))  # Output: False\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 48, "completion": "def odd_bit_set_number(number):\n    \"\"\"\n    Sets all the odd bits of the given number.\n\n    Parameters:\n    number (int): The input number whose odd bits need to be set.\n\n    Returns:\n    int: The number with all odd bits set.\n    \"\"\"\n    # Create a mask with alternating 1s and 0s starting from the least significant bit\n    mask = 0x55555555  # Binary: 01010101010101010101010101010101\n\n    # Use bitwise OR to set the odd bits of the input number\n    result = number | mask\n\n    return result\n\n# Example usage\nif __name__ == \"__main__\":\n    num = 10  # Binary: 1010\n    print(f\"Original Number: {num} (binary: {bin(num)})\")\n    new_num = odd_bit_set_number(num)\n    print(f\"Number with odd bits set: {new_num} (binary: {bin(new_num)})\")\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpnti1nown.py\", line 13, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(two_d_list, index=0):\n    \"\"\"\n    Extracts the element at the specified index from each sublist in a two-dimensional list.\n\n    :param two_d_list: A list of lists (2D list).\n    :param index: The index of the element to extract from each sublist. Defaults to 0.\n    :return: A list containing the extracted elements.\n\n    Example:\n    >>> specified_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0)\n    [1, 4, 7]\n    >>> specified_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1)\n    [2, 5, 8]\n    \"\"\"\n\n    # Check if the input is a list of lists\n    if not all(isinstance(sublist, list) for sublist in two_d_list):\n        raise ValueError(\"Input must be a list of lists\")\n\n    # Extract the specified element from each sublist\n    extracted_elements = [sublist[index] for sublist in two_d_list]\n\n    return extracted_elements\n\n# Example usage\nif __name__ == \"__main__\":\n    example_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(specified_element(example_list, 0))  # Output: [1, 4, 7]\n    print(specified_element(example_list, 1))  # Output: [2, 5, 8]\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 51, "completion": "def check_equilateral(side1, side2, side3):\n    \"\"\"\n    Check if a triangle with given side lengths is equilateral.\n    \n    An equilateral triangle has all three sides of the same length.\n    \n    Parameters:\n    side1 (float): Length of the first side.\n    side2 (float): Length of the second side.\n    side3 (float): Length of the third side.\n    \n    Returns:\n    None: Prints whether the triangle is equilateral or not.\n    \"\"\"\n    if side1 == side2 == side3:\n        print(\"The triangle is equilateral.\")\n    else:\n        print(\"The triangle is not equilateral.\")\n\n# Example usage:\ncheck_equilateral(5, 5, 5)  # Should print: The triangle is equilateral.\ncheck_equilateral(5, 6, 7)  # Should print: The triangle is not equilateral.\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpky7mrbl_.py\", line 9, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "completion": "def parallelogram_area(base: float, height: float) -> float:\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram measured perpendicular to the base.\n\n    Returns:\n    float: The area of the parallelogram.\n    \"\"\"\n    return base * height\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(s):\n    \"\"\"\n    Check if the first and last characters of a string are equal.\n\n    Parameters:\n    s (str): The input string to be checked.\n\n    Returns:\n    bool: True if the first and last characters are equal, False otherwise.\n    \"\"\"\n    # Check if the string is empty or has only one character\n    if len(s) < 2:\n        return True\n\n    # Compare the first and last characters\n    return s[0] == s[-1]\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6kx6cgzm.py\", line 7, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 54, "completion": "def counting_sort(arr):\n    \"\"\"\n    Sorts an array of integers using the counting sort algorithm.\n\n    Args:\n        arr (list): A list of non-negative integers.\n\n    Returns:\n        list: The sorted list of integers.\n    \"\"\"\n    if not arr:\n        return []\n\n    # Find the maximum value to determine the size of the count array\n    max_value = max(arr)\n\n    # Initialize the count array with zeros\n    count = [0] * (max_value + 1)\n\n    # Count the occurrences of each value in the input array\n    for num in arr:\n        count[num] += 1\n\n    # Reconstruct the sorted array from the count array\n    sorted_arr = []\n    for i, cnt in enumerate(count):\n        sorted_arr.extend([i] * cnt)\n\n    return sorted_arr\n\n# Example usage:\nif __name__ == \"__main__\":\n    unsorted_array = [4, 2, 2, 8, 3, 3, 1]\n    sorted_array = counting_sort(unsorted_array)\n    print(\"Sorted Array:\", sorted_array)\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 55, "completion": "def tn_gp(a, r, t):\n    \"\"\"\n    Calculate the t-th term of a geometric series.\n\n    Parameters:\n    a (float): The first term of the geometric series.\n    r (float): The common ratio of the geometric series.\n    t (int): The term position in the series.\n\n    Returns:\n    float: The t-th term of the geometric series.\n    \"\"\"\n    if t < 1:\n        raise ValueError(\"The term position 't' must be a positive integer.\")\n    \n    # Calculate the t-th term using the formula: a * r^(t-1)\n    return a * (r ** (t - 1))\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Example values\n    a = 3  # First term\n    r = 2  # Common ratio\n    t = 5  # Term position\n\n    try:\n        term_value = tn_gp(a, r, t)\n        print(f\"The {t}-th term of the geometric series is: {term_value}\")\n    except ValueError as e:\n        print(e)\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpsh6a4274.py\", line 17, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def check(number):\n    \"\"\"\n    Check if the given number is one less than twice its reverse.\n\n    Args:\n    number (int): The number to be checked.\n\n    Returns:\n    bool: True if the condition is met, False otherwise.\n    \"\"\"\n    # Reverse the number\n    reversed_number = int(str(number)[::-1])\n    \n    # Calculate twice the reversed number minus one\n    calculated_value = 2 * reversed_number - 1\n    \n    # Check if the original number matches the calculated value\n    return number == calculated_value\n\n# Example usage:\nprint(check(47))  # Output: True, because 47 is one less than twice its reverse (74)\nprint(check(50))  # Output: False, because 50 does not satisfy the condition\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 57, "completion": "def find_max_num(digits):\n    \"\"\"\n    Given a list of non-negative integers (digits), this function returns the largest number\n    that can be formed by concatenating the digits together.\n\n    :param digits: List[int] - A list of non-negative integers.\n    :return: int - The largest number that can be formed from the given digits.\n\n    Example:\n    >>> find_max_num([5, 3, 0, 7])\n    7530\n    \"\"\"\n\n    # Convert each digit to a string for easy comparison and concatenation\n    str_digits = [str(digit) for digit in digits]\n\n    # Sort the digits in descending order\n    str_digits.sort(reverse=True)\n\n    # Join the sorted digits to form the largest possible number\n    max_num_str = ''.join(str_digits)\n\n    # Convert the result back to an integer\n    max_num = int(max_num_str)\n\n    return max_num\n\n# Example usage\nif __name__ == \"__main__\":\n    digits = [5, 3, 0, 7]\n    print(find_max_num(digits))  # Output: 7530\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpf5c92jux.py\", line 15, in <module>\n    assert find_max_num([1,2,3],3) == 321\nTypeError: find_max_num() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 58, "completion": "def opposite_signs(a: int, b: int) -> bool:\n    \"\"\"\n    Check if two integers have opposite signs.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n\n    Returns:\n        bool: True if the integers have opposite signs, False otherwise.\n    \"\"\"\n    return (a ^ b) < 0\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 59, "completion": "def nth_octagonal(n):\n    \"\"\"\n    Calculate the nth octagonal number.\n    \n    Args:\n    n (int): The position in the sequence of octagonal numbers.\n    \n    Returns:\n    int: The nth octagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    return n * (3 * n - 2)\n\ndef is_octagonal(number):\n    \"\"\"\n    Check if a given number is an octagonal number.\n    \n    Args:\n    number (int): The number to check.\n    \n    Returns:\n    bool: True if the number is an octagonal number, False otherwise.\n    \"\"\"\n    if number < 0:\n        return False\n    \n    # Solving the quadratic equation derived from the octagonal number formula\n    # 3n^2 - 2n - x = 0\n    # Using the quadratic formula: n = (1 + sqrt(1 + 3x)) / 3\n    import math\n    discriminant = 1 + 12 * number\n    if discriminant < 0:\n        return False\n    \n    sqrt_discriminant = math.sqrt(discriminant)\n    if sqrt_discriminant.is_integer():\n        n = (1 + sqrt_discriminant) / 6\n        return n.is_integer()\n    return False\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(f\"5th Octagonal Number: {nth_octagonal(5)}\")  # Should print 70\n    print(f\"Is 70 an Octagonal Number? {is_octagonal(70)}\")  # Should print True\n    print(f\"Is 45 an Octagonal Number? {is_octagonal(45)}\")  # Should print False\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6z_hdqrt.py\", line 25, in <module>\n    assert is_octagonal(5) == 65\nAssertionError", "passed": false}
{"task_id": 60, "completion": "def max_len_sub(arr):\n    \"\"\"\n    Finds the maximum length of a subsequence in the given array where the difference\n    between adjacent elements is at most 1.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum length of the subsequence.\n    \"\"\"\n    if not arr:\n        return 0\n\n    n = len(arr)\n    dp = [1] * n  # Initialize DP array with 1s, as each element is a subsequence of length 1\n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) <= 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)\n\n# Example usage:\narr = [1, 2, 2, 3, 4, 4, 5]\nprint(max_len_sub(arr))  # Output: 5\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpt2fexg59.py\", line 14, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}

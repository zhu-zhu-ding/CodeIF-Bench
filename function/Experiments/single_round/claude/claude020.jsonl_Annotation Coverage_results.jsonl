{"task_id": 11, "completion": "def remove_occ(s: str, ch: str) -> str:\n    # Check if character is not in string or if inputs are invalid\n    if not ch or len(ch) != 1 or ch not in s:\n        return s\n    \n    # Find first and last occurrence\n    first = s.find(ch)\n    last = s.rfind(ch)\n    \n    # If only one occurrence, remove it\n    if first == last:\n        return s[:first] + s[first + 1:]\n    \n    # Remove both first and last occurrences\n    return s[:first] + s[first + 1:last] + s[last + 1:]\n", "requirement": "Annotation Coverage", "result": "passed", "passed": true}
{"task_id": 12, "completion": "def sort_matrix(matrix: list[list[int]]) -> list[list[int]]:\n    # Sort the matrix based on the sum of each row\n    return sorted(matrix, key=sum)\n", "requirement": "Annotation Coverage", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgp46nxop.py\", line 11, in <module>\n    test_annotations()\n  File \"/tmp/tmpgp46nxop.py\", line 10, in test_annotations\n    assert hints == {'matrix': 'list[list[int]]', 'return': 'list[list[int]]'}\nAssertionError", "passed": false}
{"task_id": 13, "completion": "from collections import Counter\nfrom typing import List\n\ndef count_common(words: List[str]) -> List[tuple[str, int]]:\n    \"\"\"\n    Count the frequency of words and return a list of tuples containing words and their counts,\n    sorted by frequency in descending order.\n    \n    Args:\n        words: A list of strings to count\n        \n    Returns:\n        A list of tuples where each tuple contains (word, count), sorted by count in descending order\n    \"\"\"\n    # Use Counter to count word frequencies\n    word_counts = Counter(words)\n    \n    # Convert to list of tuples and sort by count (descending)\n    return word_counts.most_common()\n", "requirement": "Annotation Coverage", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpctf4mngb.py\", line 8, in <module>\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nAssertionError", "passed": false}
{"task_id": 14, "completion": "def find_volume(base_area: float, height: float, length: float) -> float:\n    \"\"\"Calculate the volume of a triangular prism.\n    \n    Args:\n        base_area (float): Area of the triangular base\n        height (float): Height of the triangle\n        length (float): Length of the prism\n        \n    Returns:\n        float: Volume of the triangular prism\n    \"\"\"\n    return base_area * length\n", "requirement": "Annotation Coverage", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3nmf924e.py\", line 11, in <module>\n    assert find_volume(10,8,6) == 240\nAssertionError", "passed": false}
{"task_id": 15, "completion": "def split_lowerstring(text: str) -> list[str]:\n    result = []\n    current_word = \"\"\n    \n    for char in text:\n        if char.islower():\n            if current_word:\n                result.append(current_word)\n            current_word = char\n        else:\n            current_word += char\n    \n    # Append the last word if it exists\n    if current_word:\n        result.append(current_word)\n    \n    return result\n", "requirement": "Annotation Coverage", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpodkld5k4.py\", line 15, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "completion": "def text_lowercase_underscore(text: str) -> str:\n    import re\n    pattern = r'[a-z]+(?:_[a-z]+)*'\n    matches = re.findall(pattern, text)\n    return ' '.join(matches)\n", "requirement": "Annotation Coverage", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpumd52hfn.py\", line 6, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(a: int) -> int:\n    return 4 * a\n", "requirement": "Annotation Coverage", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(string: str, second_string: str) -> str:\n    # Create a set of characters to remove (for better performance)\n    chars_to_remove = set(second_string)\n    \n    # Use a list comprehension to keep only characters not in chars_to_remove\n    result = ''.join(char for char in string if char not in chars_to_remove)\n    \n    return result\n", "requirement": "Annotation Coverage", "result": "passed", "passed": true}
{"task_id": 19, "completion": "def test_duplicate(arraynums: list) -> bool:\n    return len(arraynums) != len(set(arraynums))\n", "requirement": "Annotation Coverage", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(x: int) -> bool:\n    if x <= 0:\n        return False\n    \n    # Check each n starting from 1\n    n = 1\n    while True:\n        woodall = n * (2 ** n) - 1\n        if woodall == x:\n            return True\n        if woodall > x:\n            return False\n        n += 1\n", "requirement": "Annotation Coverage", "result": "passed", "passed": true}
{"task_id": 21, "completion": "def multiples_of_num(m: int, n: int) -> list[int]:\n    \"\"\"\n    Find m multiples of number n.\n    \n    Args:\n        m (int): Number of multiples to find\n        n (int): Number to find multiples of\n    \n    Returns:\n        list[int]: List containing m multiples of n\n    \"\"\"\n    return [n * i for i in range(1, m + 1)]\n", "requirement": "Annotation Coverage", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkos8cvye.py\", line 6, in <module>\n    assert multiples_of_num.__annotations__ == {'m': int, 'n': int, 'return': list}\nAssertionError", "passed": false}
{"task_id": 22, "completion": "def find_first_duplicate(nums: list[int]) -> int:\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1  # Return -1 if no duplicates found\n", "requirement": "Annotation Coverage", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqtn59no3.py\", line 11, in <module>\n    assert find_first_duplicate.__annotations__ == {'nums': list, 'return': int}\nAssertionError", "passed": false}
{"task_id": 23, "completion": "def maximum_sum(list1: list[list[int]]) -> int:\n    if not list1:  # Handle empty list case\n        return 0\n    \n    # Calculate sum of each sublist and return the maximum\n    return max(sum(sublist) for sublist in list1)\n", "requirement": "Annotation Coverage", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp79t6twfn.py\", line 9, in <module>\n    assert maximum_sum.__annotations__ == {'list1': 'list[list[int]]', 'return': 'int'}\nAssertionError", "passed": false}
{"task_id": 24, "completion": "def binary_to_decimal(binary: str) -> int:\n    decimal = 0\n    power = 0\n    \n    # Iterate through binary string from right to left\n    for digit in reversed(binary):\n        if digit == '1':\n            decimal += 2 ** power\n        elif digit != '0':\n            raise ValueError(\"Invalid binary string: must contain only 0s and 1s\")\n        power += 1\n        \n    return decimal\n", "requirement": "Annotation Coverage", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpsx55uxqi.py\", line 12, in <module>\n    assert binary_to_decimal(100) == 4\n  File \"/tmp/tmpsx55uxqi.py\", line 5, in binary_to_decimal\n    for digit in reversed(binary):\nTypeError: 'int' object is not reversible", "passed": false}
{"task_id": 25, "completion": "def find_product(arr: list, n: int) -> int:\n    # Create a set to store unique elements\n    unique_elements = set(arr)\n    \n    # Calculate product of unique elements\n    product = 1\n    for num in unique_elements:\n        product *= num\n        \n    return product\n", "requirement": "Annotation Coverage", "result": "passed", "passed": true}
{"task_id": 26, "completion": "def check_k_elements(test_list: list[tuple], K: int) -> bool:\n    # Check if list is empty\n    if not test_list:\n        return False\n    \n    # Check if all tuples have exactly K elements\n    return all(len(tup) == K for tup in test_list)\n", "requirement": "Annotation Coverage", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplaylsb6o.py\", line 7, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "completion": "def remove(strings: list[str]) -> list[str]:\n    return [''.join(char for char in s if not char.isdigit()) for s in strings]\n", "requirement": "Annotation Coverage", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpy49s6o7j.py\", line 6, in <module>\n    assert remove.__annotations__ == {'list': list[str], 'return': list[str]}\nAssertionError", "passed": false}
{"task_id": 28, "completion": "def binomial_coeff(n: int, k: int) -> int:\n    \"\"\"\n    Calculate the binomial coefficient C(n,k).\n    \n    Args:\n        n: Total number of items\n        k: Number of items to choose\n        \n    Returns:\n        The binomial coefficient (n choose k)\n        \n    Raises:\n        ValueError: If k > n or if either n or k is negative\n    \"\"\"\n    if k > n:\n        raise ValueError(\"k cannot be greater than n\")\n    if n < 0 or k < 0:\n        raise ValueError(\"n and k must be non-negative\")\n    \n    # Optimize by using the smaller value of k or n-k\n    k = min(k, n - k)\n    \n    result = 1\n    # Calculate using multiplicative formula\n    for i in range(k):\n        result *= (n - i)\n        result //= (i + 1)\n        \n    return result\n", "requirement": "Annotation Coverage", "result": "passed", "passed": true}
{"task_id": 29, "completion": "def get_odd_occurrence(arr: list[int], arr_size: int) -> int:\n    \"\"\"\n    Find the element that appears an odd number of times in the array.\n    \n    Args:\n        arr (list[int]): List of integers\n        arr_size (int): Size of the input list\n        \n    Returns:\n        int: Element that appears odd number of times\n    \"\"\"\n    result = 0\n    \n    # Using XOR operation\n    # When we XOR a number with itself even times, it becomes 0\n    # When we XOR a number with itself odd times, it remains the same\n    for i in range(arr_size):\n        result = result ^ arr[i]\n        \n    return result\n", "requirement": "Annotation Coverage", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdb4vbgxo.py\", line 12, in <module>\n    assert get_odd_occurrence.__annotations__ == {'arr': list, 'arr_size': int, 'return': int}\nAssertionError", "passed": false}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s: str) -> int:\n    count = 0\n    n = len(s)\n    \n    # Check all possible substrings\n    for i in range(n):\n        for j in range(i, n):\n            # If first and last characters match, increment count\n            if s[i] == s[j]:\n                count += 1\n    \n    return count\n", "requirement": "Annotation Coverage", "result": "passed", "passed": true}
{"task_id": 31, "completion": "from typing import List\nfrom heapq import heappush, heappop\nfrom collections import Counter\n\ndef func(nums: List[List[int]], k: int) -> List[int]:\n    # Flatten the list of lists and count frequencies\n    flat_nums = [num for sublist in nums for num in sublist]\n    counter = Counter(flat_nums)\n    \n    # Create a min heap to keep track of k most frequent elements\n    heap = []\n    \n    for num, freq in counter.items():\n        # Push tuple of (frequency, number) to heap\n        heappush(heap, (freq, num))\n        # If heap size exceeds k, remove the smallest frequency element\n        if len(heap) > k:\n            heappop(heap)\n    \n    # Extract the k most frequent numbers in descending order\n    result = [num for _, num in sorted(heap, reverse=True)]\n    \n    return result\n", "requirement": "Annotation Coverage", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpti8shbuz.py\", line 19, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n: int) -> int:\n    largest_prime = -1\n    \n    # Handle divisibility by 2 separately\n    while n % 2 == 0:\n        largest_prime = 2\n        n = n // 2\n    \n    # Check for odd factors up to sqrt(n)\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            largest_prime = i\n            n = n // i\n    \n    # If n is still greater than 2, it's prime itself\n    if n > 2:\n        largest_prime = n\n    \n    return largest_prime\n", "requirement": "Annotation Coverage", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(N: int) -> str:\n    if N == 0:\n        return \"0\"\n    \n    # Handle negative numbers\n    is_negative = N < 0\n    N = abs(N)\n    \n    # Convert to binary\n    binary = \"\"\n    while N > 0:\n        binary = str(N % 2) + binary\n        N //= 2\n    \n    # Add negative sign if necessary\n    return \"-\" + binary if is_negative else binary\n", "requirement": "Annotation Coverage", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5w6hmfcp.py\", line 14, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "completion": "def find_missing(ar: list, N: int) -> int:\n    \"\"\"\n    Find the missing number in a sorted array of numbers from 1 to N\n    \n    Args:\n        ar (list): Sorted list of integers with one missing number\n        N (int): The expected length of the complete sequence\n        \n    Returns:\n        int: The missing number in the sequence\n    \"\"\"\n    # Calculate expected sum of numbers from 1 to N\n    expected_sum = (N * (N + 1)) // 2\n    \n    # Calculate actual sum of array\n    actual_sum = sum(ar)\n    \n    # The difference is the missing number\n    return expected_sum - actual_sum\n", "requirement": "Annotation Coverage", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpriwapvmn.py\", line 8, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nAssertionError", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n: int) -> int:\n    \"\"\"\n    Calculate the n-th rectangular number.\n    \n    Args:\n        n: The position of the rectangular number to find\n        \n    Returns:\n        The n-th rectangular number (n * (n + 1))\n    \"\"\"\n    return n * (n + 1)\n", "requirement": "Annotation Coverage", "result": "passed", "passed": true}
{"task_id": 36, "completion": "def find_nth_digit(p: int, q: int, N: int) -> int:\n    # Handle edge cases\n    if q == 0:\n        raise ValueError(\"Denominator cannot be zero\")\n    if p >= q:\n        raise ValueError(\"This function only works with proper fractions (p < q)\")\n    if N < 1:\n        raise ValueError(\"N must be a positive integer\")\n    \n    # Perform long division to find the nth digit\n    result = p\n    for _ in range(N):\n        result *= 10\n        if result < q:\n            return 0\n        result = result % q\n        \n    return (result * 10) // q\n\n", "requirement": "Annotation Coverage", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpk41jy6xu.py\", line 17, in <module>\n    assert find_nth_digit(1,2,1) == 5\nAssertionError", "passed": false}
{"task_id": 37, "completion": "from typing import Union\n\ndef sort_mixed_list(mixed_list: list[Union[int, str]]) -> list[Union[int, str]]:\n    # Separate integers and strings\n    integers = [x for x in mixed_list if isinstance(x, int)]\n    strings = [x for x in mixed_list if isinstance(x, str)]\n    \n    # Sort each list separately\n    integers.sort()\n    strings.sort()\n    \n    # Combine and return the sorted lists\n    return integers + strings\n", "requirement": "Annotation Coverage", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpab7a9v6z.py\", line 15, in <module>\n    assert sort_mixed_list.__annotations__ == {'mixed_list': list[Union[int, str]], 'return' : list}\nAssertionError", "passed": false}
{"task_id": 38, "completion": "def div_even_odd(list1: list[int]) -> float:\n    # Initialize variables to store first even and odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Find first even and odd numbers\n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Check if both numbers were found\n    if first_even is None or first_odd is None:\n        raise ValueError(\"List must contain at least one even and one odd number\")\n    \n    # Return the division\n    return first_even / first_odd\n", "requirement": "Annotation Coverage", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp71xiv8nx.py\", line 21, in <module>\n    assert div_even_odd.__annotations__ == {'list1': list, 'return': (int, float)}\nAssertionError", "passed": false}
{"task_id": 39, "completion": "def rearrange_string(S: str) -> str:\n    \"\"\"\n    Write a function to check if the letters of a given string can be rearranged\n    so that two characters that are adjacent to each other are different.\n    \n    Args:\n        S (str): Input string to be rearranged\n        \n    Returns:\n        str: Rearranged string where no adjacent characters are the same,\n             or empty string if not possible\n    \n    Example:\n        >>> rearrange_string(\"aaab\")\n        \"abaa\"\n        >>> rearrange_string(\"aaa\")\n        \"\"\n    \"\"\"\n    # Count frequency of each character\n    char_count = {}\n    for char in S:\n        char_count[char] = char_count.get(char, 0) + 1\n    \n    # Find the character with maximum frequency\n    max_char = max(char_count.items(), key=lambda x: x[1], default=('', 0))\n    \n    # If max frequency is greater than (n+1)/2, rearrangement is impossible\n    if max_char[1] > (len(S) + 1) // 2:\n        return \"\"\n    \n    # Create a list to store the result\n    result = [''] * len(S)\n    \n    # Fill even positions with most frequent character\n    idx = 0\n    for _ in range(char_count[max_char[0]]):\n        result[idx] = max_char[0]\n        idx += 2\n    \n    # Delete the most frequent character from dictionary\n    del char_count[max_char[0]]\n    \n    # Fill remaining positions with remaining characters\n    idx = 1\n    for char in char_count:\n        for _ in range(char_count[char]):\n            if idx >= len(S):\n                idx = 0\n            result[idx] = char\n            idx += 2\n            \n    return ''.join(result)\n", "requirement": "Annotation Coverage", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpeswhra1w.py\", line 29, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "completion": "from collections import Counter\nfrom typing import List, Dict\n\ndef freq_element(nums: List[List[int]]) -> Dict[int, int]:\n    # Flatten the list of lists and count elements using Counter\n    flattened = [num for sublist in nums for num in sublist]\n    return dict(Counter(flattened))\n", "requirement": "Annotation Coverage", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3op3x3e0.py\", line 10, in <module>\n    assert freq_element.__annotations__ == {'nums': 'list[list[int]]', 'return': 'dict[int, int]'}\nAssertionError", "passed": false}
{"task_id": 41, "completion": "from typing import List\n\ndef filter_evennumbers(nums: List[int]) -> List[int]:\n    return list(filter(lambda x: x % 2 == 0, nums))\n", "requirement": "Annotation Coverage", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpt3dquo58.py\", line 7, in <module>\n    assert filter_evennumbers.__annotations__ == {'nums': list, 'return': list}\nAssertionError", "passed": false}
{"task_id": 42, "completion": "def find_sum(arr: list, n: int) -> int:\n    # Create a dictionary to store frequency of elements\n    frequency = {}\n    \n    # Count frequency of each element\n    for num in arr:\n        frequency[num] = frequency.get(num, 0) + 1\n    \n    # Calculate sum of repeated elements\n    repeated_sum = 0\n    for num, count in frequency.items():\n        if count > 1:  # If element appears more than once\n            repeated_sum += num\n            \n    return repeated_sum\n", "requirement": "Annotation Coverage", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp93c6fr4l.py\", line 13, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nAssertionError", "passed": false}
{"task_id": 43, "completion": "import re\nfrom typing import Match, Optional\n\ndef text_match(text: str) -> Optional[Match[str]]:\n    \"\"\"\n    Find sequences of lowercase letters joined with an underscore.\n    \n    Args:\n        text (str): The input string to search\n        \n    Returns:\n        Optional[Match[str]]: Match object if pattern is found, None otherwise\n    \"\"\"\n    pattern = r'[a-z]+_[a-z]+'\n    return re.search(pattern, text)\n", "requirement": "Annotation Coverage", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgbr09aqq.py\", line 6, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 44, "completion": "def text_match_string(text: str) -> str:\n    import re\n    pattern = r'^\\w+'\n    result = re.search(pattern, text)\n    return result.group() if result else \"\"\n", "requirement": "Annotation Coverage", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9gt733sc.py\", line 6, in <module>\n    assert text_match_string(\" python\")==('Not matched!')\nAssertionError", "passed": false}
{"task_id": 45, "completion": "from math import gcd\nfrom functools import reduce\n\ndef get_gcd(numbers: list) -> int:\n    \"\"\"\n    Calculate the Greatest Common Divisor (GCD) of a list of numbers.\n    \n    Args:\n        numbers: A list of integers\n    \n    Returns:\n        The GCD of all numbers in the list\n    \"\"\"\n    if not numbers:\n        return 0\n    \n    return reduce(gcd, numbers)\n", "requirement": "Annotation Coverage", "result": "passed", "passed": true}
{"task_id": 46, "completion": "def test_distinct(numbers: list) -> bool:\n    # Convert list to set to remove duplicates\n    # If lengths match, all elements were unique\n    return len(set(numbers)) == len(numbers)\n", "requirement": "Annotation Coverage", "result": "passed", "passed": true}
{"task_id": 47, "completion": "def compute_last_digit(a: int, b: int) -> int:\n    \"\"\"\n    Computes the last digit of b! / a!\n    \n    Args:\n        a: The denominator factorial number\n        b: The numerator factorial number\n        \n    Returns:\n        The last digit of b! / a!\n    \"\"\"\n    if a > b:\n        return 0\n    \n    result = 1\n    # We only need to multiply numbers from (a+1) to b\n    # And we only care about the last digit at each step\n    for i in range(a + 1, b + 1):\n        result = (result * (i % 10)) % 10\n        \n    return result\n", "requirement": "Annotation Coverage", "result": "passed", "passed": true}
{"task_id": 48, "completion": "def odd_bit_set_number(n: int) -> int:\n    # Create a mask with all odd bits set (1010101010...)\n    mask = 0xAAAAAAAA  # 32-bit number with odd bits set\n    \n    # Combine the original number with the mask using OR operation\n    result = n | mask\n    \n    return result\n", "requirement": "Annotation Coverage", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp44o6100o.py\", line 7, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 50, "completion": "def min_length_list(lists: list[list]) -> tuple[int, list]:\n    # Use lambda to get length of each list, then find min based on that length\n    min_list = min(lists, key=lambda x: len(x))\n    return (len(min_list), min_list)\n", "requirement": "Annotation Coverage", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqeo2qxct.py\", line 8, in <module>\n    assert min_length_list.__annotations__ == {'lists': 'list[list]', 'return': 'tuple[int, list]'}\nAssertionError", "passed": false}
{"task_id": 51, "completion": "def check_equilateral(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Check if a triangle is equilateral (all sides are equal).\n    \n    Args:\n        a (int): Length of first side\n        b (int): Length of second side\n        c (int): Length of third side\n    \n    Returns:\n        bool: True if the triangle is equilateral, False otherwise\n    \"\"\"\n    return a == b == c and a > 0\n", "requirement": "Annotation Coverage", "result": "passed", "passed": true}
{"task_id": 52, "completion": "def parallelogram_area(base: float, height: float) -> float:\n    \"\"\"\n    Calculate the area of a parallelogram.\n    \n    Args:\n        base (float): The length of the base of the parallelogram\n        height (float): The height (perpendicular distance between parallel sides) of the parallelogram\n        \n    Returns:\n        float: The area of the parallelogram\n    \"\"\"\n    return base * height\n", "requirement": "Annotation Coverage", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(s: str) -> str:\n    if not s:  # Check if string is empty\n        return \"String is empty\"\n    \n    if s[0].lower() == s[-1].lower():  # Compare first and last characters (case-insensitive)\n        return \"Equal\"\n    else:\n        return \"Not equal\"\n", "requirement": "Annotation Coverage", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1it6fujl.py\", line 9, in <module>\n    assert check_equality(\"ab\") == \"Not Equal\"\nAssertionError", "passed": false}
{"task_id": 54, "completion": "def counting_sort(arr: list) -> list:\n    if not arr:\n        return []\n    \n    # Find the range of input array\n    max_val = max(arr)\n    min_val = min(arr)\n    range_val = max_val - min_val + 1\n    \n    # Create counting array and output array\n    count = [0] * range_val\n    output = [0] * len(arr)\n    \n    # Store count of each element\n    for num in arr:\n        count[num - min_val] += 1\n    \n    # Modify count array to store actual positions\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    \n    # Build the output array\n    for num in reversed(arr):\n        index = count[num - min_val] - 1\n        output[index] = num\n        count[num - min_val] -= 1\n    \n    return output\n", "requirement": "Annotation Coverage", "result": "passed", "passed": true}
{"task_id": 55, "completion": "def tn_gp(a: int, r: int, n: int) -> int:\n    \"\"\"\n    Calculate the nth term of a geometric sequence.\n    \n    Args:\n        a: First term of the sequence\n        r: Common ratio\n        n: Position of the term to find\n    \n    Returns:\n        The nth term of the geometric sequence\n    \"\"\"\n    return a * (r ** (n - 1))\n", "requirement": "Annotation Coverage", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgi8gcjj3.py\", line 3, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def check(n: int) -> bool:\n    # Convert number to string to easily reverse it\n    str_num = str(n)\n    # Reverse the string and convert back to integer\n    reversed_num = int(str_num[::-1])\n    \n    # Check if n is one less than twice its reverse\n    return n == (2 * reversed_num) - 1\n", "requirement": "Annotation Coverage", "result": "passed", "passed": true}
{"task_id": 57, "completion": "def find_max_num(digits: list, n: int) -> int:\n    # Sort digits in descending order\n    digits.sort(reverse=True)\n    \n    # Convert digits to strings and join them\n    result = ''.join(map(str, digits[:n]))\n    \n    # Convert back to integer and return\n    return int(result)\n", "requirement": "Annotation Coverage", "result": "passed", "passed": true}
{"task_id": 58, "completion": "def opposite_signs(a: int, b: int) -> bool:\n    return (a * b) < 0\n", "requirement": "Annotation Coverage", "result": "passed", "passed": true}
{"task_id": 59, "completion": "def is_octagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth octagonal number.\n    \n    Args:\n        n (int): The position of the octagonal number to calculate\n        \n    Returns:\n        int: The nth octagonal number\n        \n    Raises:\n        ValueError: If n is less than 1\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return n * (3 * n - 2)\n", "requirement": "Annotation Coverage", "result": "passed", "passed": true}
{"task_id": 60, "completion": "def max_len_sub(arr: list[int], diff: int) -> int:\n    # Initialize dp dictionary to store the length of subsequences\n    dp = {}\n    max_length = 1  # Minimum length is always 1\n    \n    # Iterate through each number in the array\n    for num in arr:\n        # Length is either 1 (starting new sequence) or\n        # 1 + length of sequence ending with (num - diff)\n        dp[num] = max(1, dp.get(num - diff, 0) + 1)\n        max_length = max(max_length, dp[num])\n    \n    return max_length\n", "requirement": "Annotation Coverage", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp111af55w.py\", line 12, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nAssertionError", "passed": false}

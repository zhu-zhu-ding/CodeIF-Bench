{"task_id": 11, "completion": "def remove_occ(input_str: str, char: str) -> str:\n    if not input_str or not char:\n        return input_str\n        \n    first = input_str.find(char)\n    if first == -1:  # character not found\n        return input_str\n        \n    # Find last occurrence and create new string excluding first and last occurrence\n    last = input_str.rfind(char)\n    return input_str[:first] + input_str[first + 1:last] + input_str[last + 1:]\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 14, "completion": "def find_volume(base: float, height: float, length: float) -> float:\n    \"\"\"\n    Calculate the volume of a triangular prism.\n    \n    Args:\n        base: The base length of the triangle\n        height: The height of the triangle\n        length: The length (depth) of the prism\n    \n    Returns:\n        float: The volume of the triangular prism\n    \"\"\"\n    return (0.5 * base * height) * length\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 15, "completion": "def split_lowerstring(text: str) -> list[str]:\n    return [part for part in ''.join(c if c.islower() else f\" {c}\" for c in text).split()]\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpcn70oh2j.py\", line 3, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    \"\"\"\n    Check if text contains sequences of lowercase letters joined with underscore.\n    \n    Args:\n        text (str): The input string to check\n        \n    Returns:\n        bool: True if pattern matches, False otherwise\n    \"\"\"\n    return bool(re.match(r'^[a-z]+(_[a-z]+)*$', text))\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4jzehyua.py\", line 4, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length: float) -> float:\n    \"\"\"\n    Calculate the perimeter of a square.\n    \n    Args:\n        side_length (float): Length of one side of the square\n        \n    Returns:\n        float: Perimeter of the square\n        \n    Raises:\n        ValueError: If side_length is less than or equal to 0\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be positive\")\n    return 4 * side_length\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpiyazua8a.py\", line 10, in <module>\n    assert cc_visit(inspect.getsource(square_perimeter))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 20, "completion": "def is_woodall(number: int) -> bool:\n    return any(n * (2 ** n) - 1 == number for n in range(1, int(number ** 0.5) + 1))\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvnigttuw.py\", line 8, in <module>\n    assert cc_visit(inspect.getsource(is_woodall))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 21, "completion": "def multiples_of_num(n: int, m: int) -> list[int]:\n    \"\"\"\n    Returns m multiples of number n.\n    \n    Args:\n        n (int): The number to find multiples of\n        m (int): The count of multiples to return\n        \n    Returns:\n        list[int]: List containing m multiples of n\n    \"\"\"\n    return [n * i for i in range(1, m + 1)]\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplugupmam.py\", line 3, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 24, "completion": "def binary_to_decimal(binary_str: str) -> int:\n    return int(binary_str, 2)\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqs1w74sk.py\", line 3, in <module>\n    assert binary_to_decimal(100) == 4\n  File \"/tmp/tmpqs1w74sk.py\", line 2, in binary_to_decimal\n    return int(binary_str, 2)\nTypeError: int() can't convert non-string with explicit base", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    largest_factor = 1\n    \n    # Handle 2 as a special case\n    while n % 2 == 0:\n        largest_factor = 2\n        n = n // 2\n    \n    # Check odd numbers up to sqrt(n)\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            largest_factor = i\n            n = n // i\n    \n    # If n is still greater than 2, it's prime itself\n    if n > 2:\n        largest_factor = n\n        \n    return largest_factor\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(decimal_num: int) -> str:\n    \"\"\"\n    Convert a decimal number to its binary representation.\n    \n    Args:\n        decimal_num: An integer in decimal format\n        \n    Returns:\n        A string representing the binary number\n        \n    Example:\n        >>> decimal_to_binary(10)\n        '1010'\n    \"\"\"\n    return bin(decimal_num)[2:]\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpzeab7tql.py\", line 3, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n: int) -> int:\n    \"\"\"\n    Calculate the n-th rectangular number.\n    \n    Args:\n        n (int): The position of the rectangular number to find (n > 0)\n    \n    Returns:\n        int: The n-th rectangular number\n    \n    Example:\n        >>> find_rect_num(3)\n        12  # Because it's 3 * 4\n    \"\"\"\n    return n * (n + 1)\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator, n):\n    \"\"\"\n    Find the nth digit after the decimal point in the proper fraction numerator/denominator.\n    \n    Args:\n        numerator (int): The numerator of the fraction\n        denominator (int): The denominator of the fraction\n        n (int): The position of the digit to find (1-based indexing)\n    \n    Returns:\n        int: The nth digit after the decimal point, or -1 if n is invalid\n    \"\"\"\n    if n < 1 or denominator == 0:\n        return -1\n        \n    # Handle the division\n    quotient = (numerator * 10 ** n) // denominator\n    \n    # Get the nth digit\n    digit = (quotient % 10)\n    \n    return digit\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 38, "completion": "def div_even_odd(numbers):\n    if not numbers:\n        return None\n        \n    first_even = next((num for num in numbers if num % 2 == 0), None)\n    first_odd = next((num for num in numbers if num % 2 != 0), None)\n    \n    return first_even / first_odd if (first_even is not None and first_odd is not None) else None\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpu39nbpn2.py\", line 12, in <module>\n    assert cc_visit(inspect.getsource(div_even_odd))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 40, "completion": "from collections import Counter\nfrom itertools import chain\n\ndef freq_element(list_of_lists):\n    \"\"\"\n    Find frequency of elements in a list of lists using Counter.\n    \n    Args:\n        list_of_lists (list): A list containing nested lists\n        \n    Returns:\n        Counter: A Counter object with elements and their frequencies\n    \"\"\"\n    return Counter(chain.from_iterable(list_of_lists))\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 42, "completion": "def find_sum(arr):\n    # Use dictionary to store frequency of elements\n    freq = {}\n    \n    # Count frequency of each element\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    \n    # Calculate sum of elements that appear more than once\n    repeated_sum = sum(num for num, count in freq.items() if count > 1)\n    \n    return repeated_sum\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpcyr8po_q.py\", line 10, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text: str) -> bool:\n    \"\"\"\n    Check if the text contains sequences of lowercase letters joined with an underscore.\n    \n    Args:\n        text (str): The input string to check\n        \n    Returns:\n        bool: True if pattern matches, False otherwise\n    \"\"\"\n    pattern = r'^[a-z]+_[a-z]+$'\n    return bool(re.match(pattern, text))\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmptel6q2hw.py\", line 5, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 45, "completion": "def get_gcd(numbers):\n    if not numbers:\n        return None\n    \n    def gcd_pair(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    result = numbers[0]\n    for i in range(1, len(numbers)):\n        result = gcd_pair(result, numbers[i])\n    \n    return result\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpb7bx_b19.py\", line 17, in <module>\n    assert cc_visit(inspect.getsource(get_gcd))[0].complexity <=1\nAssertionError", "passed": false}
{"task_id": 47, "completion": "def compute_last_digit(a: int, b: int) -> int:\n    \"\"\"\n    Computes the last digit of b!/a!\n    \n    Args:\n        a: Lower factorial number\n        b: Higher factorial number\n    Returns:\n        The last digit of b!/a!\n    \"\"\"\n    if a > b:\n        return 0\n    \n    result = 1\n    for i in range(a + 1, b + 1):\n        result = (result * (i % 10)) % 10\n        \n    return result\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 51, "completion": "def check_equilateral(side1: float, side2: float, side3: float) -> bool:\n    return side1 == side2 == side3\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 52, "completion": "def parallelogram_area(base: float, height: float) -> float:\n    \"\"\"\n    Calculate the area of a parallelogram.\n    \n    Args:\n        base (float): The length of the base of the parallelogram\n        height (float): The perpendicular height of the parallelogram\n        \n    Returns:\n        float: The area of the parallelogram\n        \n    Raises:\n        ValueError: If base or height is negative\n    \"\"\"\n    if base < 0 or height < 0:\n        raise ValueError(\"Base and height must be non-negative\")\n    \n    return base * height\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmnogd63f.py\", line 10, in <module>\n    assert cc_visit(inspect.getsource(parallelogram_area))[0].complexity ==1\nAssertionError", "passed": false}
{"task_id": 53, "completion": "def check_equality(text: str) -> bool:\n    return bool(text) and text[0] == text[-1]\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpsfcyyaex.py\", line 3, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def check(number: int) -> bool:\n    # Convert number to string to easily reverse it\n    num_str = str(number)\n    # Get the reverse number by converting back to int\n    reverse_num = int(num_str[::-1])\n    # Check if number is one less than twice its reverse\n    return number == (2 * reverse_num - 1)\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 58, "completion": "def opposite_signs(a: int, b: int) -> bool:\n    return (a * b) < 0\n", "requirement": "Code Complexity", "result": "passed", "passed": true}

{"task_id": 11, "completion": "def remove_occ(input_str, char):\n    # Return original string if char not present\n    if char not in input_str:\n        return input_str\n    \n    # Find first occurrence\n    first_index = input_str.find(char)\n    \n    # Find last occurrence\n    last_index = input_str.rfind(char)\n    \n    # If only one occurrence, remove it and return\n    if first_index == last_index:\n        return input_str[:first_index] + input_str[first_index + 1:]\n    \n    # Remove first and last occurrence\n    return input_str[:first_index] + input_str[first_index + 1:last_index] + input_str[last_index + 1:]\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 12, "completion": "def sort_matrix(matrix):\n    # Handle empty matrix case\n    if not matrix:\n        return []\n    \n    # Create list of tuples: (row_sum, row_index, row)\n    indexed_sums = [(sum(row), i, row) for i, row in enumerate(matrix)]\n    \n    # Sort based on row sums\n    indexed_sums.sort(key=lambda x: x[0])\n    \n    # Return sorted matrix (extract just the rows in sorted order)\n    return [row for _, _, row in indexed_sums]\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 13, "completion": "from collections import Counter\n\ndef count_common(words, n=5):\n    \"\"\"\n    Count the most common words in a list and return the top N words with their counts.\n    \n    Args:\n        words (list): List of words to analyze\n        n (int): Number of top words to return (default=5)\n    \n    Returns:\n        list: List of tuples containing (word, count) pairs, sorted by count in descending order\n    \"\"\"\n    if not words:\n        return []\n        \n    # Use Counter to count word frequencies\n    word_counts = Counter(words)\n    \n    # Get the n most common words\n    most_common = word_counts.most_common(n)\n    \n    return most_common\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp98ly0v1d.py\", line 10, in <module>\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nAssertionError", "passed": false}
{"task_id": 14, "completion": "def find_volume(base_length: float, base_height: float, prism_height: float) -> float:\n    \"\"\"\n    Calculate the volume of a triangular prism.\n    \n    Args:\n        base_length (float): Length of the triangle's base\n        base_height (float): Height of the triangle\n        prism_height (float): Height of the prism\n    \n    Returns:\n        float: Volume of the triangular prism\n        \n    Raises:\n        ValueError: If any dimension is less than or equal to 0\n    \"\"\"\n    # Check for invalid dimensions\n    if base_length <= 0 or base_height <= 0 or prism_height <= 0:\n        raise ValueError(\"All dimensions must be positive numbers\")\n    \n    # Calculate the area of the triangle base\n    triangle_area = 0.5 * base_length * base_height\n    \n    # Calculate the volume\n    volume = triangle_area * prism_height\n    \n    return volume\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 15, "completion": "def split_lowerstring(text):\n    if not any(c.islower() for c in text):\n        return []\n    \n    result = []\n    current = \"\"\n    \n    for char in text:\n        if char.islower():\n            if current:\n                result.append(current)\n            current = char\n        else:\n            current += char\n    \n    if current:\n        result.append(current)\n    \n    return result\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpl7frob0t.py\", line 16, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    if not text:  # Handle empty string\n        return \"Not matched!\"\n    \n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    \n    if re.match(pattern, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    if not isinstance(side_length, (int, float)):\n        raise TypeError(\"Side length must be a number\")\n    \n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative\")\n        \n    return 4 * side_length\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(original_str: str, chars_to_remove: str) -> str:\n    # Return original string if chars_to_remove is empty\n    if not chars_to_remove:\n        return original_str\n    \n    # Create a new string excluding characters found in chars_to_remove\n    return ''.join(char for char in original_str if char not in chars_to_remove)\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 19, "completion": "def test_duplicate(arr):\n    # Handle empty list or single element list\n    if len(arr) <= 1:\n        return False\n        \n    # Use set to track seen numbers\n    seen = set()\n    \n    # Check each number\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    \n    return False\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(test_duplicate([]))  # False\n    print(test_duplicate([1]))  # False\n    print(test_duplicate([1, 2, 3, 1]))  # True\n    print(test_duplicate([1, 2, 3, 4]))  # False\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(num):\n    # Handle edge cases\n    if not isinstance(num, int) or num < 0:\n        return False\n    if num == 0:\n        return False\n        \n    # Check numbers up to a reasonable limit\n    n = 1\n    while True:\n        woodall = n * (2 ** n) - 1\n        \n        # If we found a match, it's a Woodall number\n        if woodall == num:\n            return True\n        \n        # If we've exceeded the input number, it's not a Woodall number\n        if woodall > num:\n            return False\n            \n        # Prevent integer overflow for very large numbers\n        if n > 100:  # Practical limit to prevent infinite loops\n            return False\n            \n        n += 1\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 21, "completion": "def multiples_of_num(n: int, m: int) -> list:\n    \"\"\"\n    Find m multiples of number n.\n    \n    Args:\n        n (int): The number to find multiples of\n        m (int): The count of multiples to find\n        \n    Returns:\n        list: List containing m multiples of n\n        \n    Examples:\n        >>> multiples_of_num(3, 4)\n        [3, 6, 9, 12]\n        >>> multiples_of_num(5, 0)\n        []\n    \"\"\"\n    if m <= 0:\n        return []\n    \n    return [n * i for i in range(1, m + 1)]\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpug0nrwd0.py\", line 5, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "completion": "def find_first_duplicate(arr):\n    seen = set()\n    \n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    \n    return -1\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists):\n    if not list_of_lists or all(not sublist for sublist in list_of_lists):\n        return 0\n    \n    return max(sum(sublist) for sublist in list_of_lists)\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 24, "completion": "def binary_to_decimal(binary_str):\n    if not binary_str:  # Handle empty string case\n        return 0\n    \n    decimal = 0\n    power = 0\n    \n    # Iterate through the binary string from right to left\n    for digit in reversed(binary_str):\n        if digit == '1':\n            decimal += 2 ** power\n        elif digit != '0':\n            raise ValueError(\"Invalid binary string\")\n        power += 1\n    \n    return decimal\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphc4ac426.py\", line 14, in <module>\n    assert binary_to_decimal(100) == 4\n  File \"/tmp/tmphc4ac426.py\", line 7, in binary_to_decimal\n    for digit in reversed(binary_str):\nTypeError: 'int' object is not reversible", "passed": false}
{"task_id": 25, "completion": "def find_product(arr):\n    if not arr:  # Check if array is empty\n        return 1\n    \n    # Convert array to set to remove duplicates, then calculate product\n    unique_elements = set(arr)\n    product = 1\n    \n    for num in unique_elements:\n        product *= num\n        \n    return product\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_wrmvwjo.py\", line 10, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(tuple_list, k):\n    \"\"\"\n    Check if all tuples in the given list have exactly k elements.\n    \n    Args:\n        tuple_list (list): List of tuples to check\n        k (int): Expected number of elements in each tuple\n    \n    Returns:\n        bool: True if all tuples have k elements, False otherwise\n    \"\"\"\n    # Check if input list is empty\n    if not tuple_list:\n        return False\n    \n    # Check if k is a valid positive integer\n    if not isinstance(k, int) or k <= 0:\n        return False\n    \n    # Check each tuple in the list\n    return all(isinstance(item, tuple) and len(item) == k for item in tuple_list)\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5swnmy37.py\", line 10, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "completion": "def remove(string_list):\n    \"\"\"\n    Remove all digits from each string in the given list.\n    \n    Args:\n        string_list (list): List of strings to process\n        \n    Returns:\n        list: New list with digits removed from each string\n        \n    Examples:\n        >>> remove(['hello123', 'world456'])\n        ['hello', 'world']\n        >>> remove(['abc', '123', 'def'])\n        ['abc', '', 'def']\n        >>> remove([])\n        []\n    \"\"\"\n    if not isinstance(string_list, list):\n        raise TypeError(\"Input must be a list\")\n        \n    return [\n        ''.join(char for char in s if not char.isdigit())\n        for s in string_list\n    ]\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 28, "completion": "def binomial_coeff(n: int, k: int) -> int:\n    \"\"\"\n    Calculate the binomial coefficient C(n,k) - number of ways to choose k items from n items.\n    \n    Args:\n        n (int): Total number of items\n        k (int): Number of items to choose\n        \n    Returns:\n        int: The binomial coefficient value\n        \n    Raises:\n        ValueError: If n < 0 or k < 0 or k > n\n    \"\"\"\n    # Handle invalid inputs\n    if n < 0 or k < 0:\n        raise ValueError(\"Both n and k must be non-negative\")\n    if k > n:\n        raise ValueError(\"k cannot be greater than n\")\n    \n    # Handle edge cases\n    if k == 0 or k == n:\n        return 1\n    \n    # Use the smaller value of k or (n-k) to optimize calculation\n    k = min(k, n - k)\n    \n    # Calculate using multiplicative formula\n    result = 1\n    for i in range(k):\n        result *= (n - i)\n        result //= (i + 1)\n    \n    return result\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 29, "completion": "def get_odd_occurrence(arr):\n    # Handle empty list case\n    if not arr:\n        return None\n    \n    # Create a dictionary to store frequency of elements\n    frequency = {}\n    \n    # Count occurrences of each element\n    for num in arr:\n        frequency[num] = frequency.get(num, 0) + 1\n    \n    # Find element with odd frequency\n    for num, count in frequency.items():\n        if count % 2 != 0:\n            return num\n    \n    # If no odd occurrence found\n    return None\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0fy32hiy.py\", line 16, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s: str) -> int:\n    if not s:  # Handle empty string case\n        return 0\n        \n    n = len(s)\n    count = 0\n    \n    # Check all possible substrings\n    for i in range(n):\n        for j in range(i, n):\n            # If first and last characters match, increment count\n            if s[i] == s[j]:\n                count += 1\n                \n    return count\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 31, "completion": "from heapq import heappush, heappop\nfrom collections import Counter\nfrom typing import List\n\ndef func(lists: List[List[int]], k: int) -> List[int]:\n    # Handle empty input case\n    if not any(lists):\n        return []\n    \n    # Flatten the list of lists and count frequencies\n    all_numbers = [num for sublist in lists for num in sublist]\n    frequency_count = Counter(all_numbers)\n    \n    # Create min heap to maintain top k elements\n    heap = []\n    \n    # Process each number and its frequency\n    for num, freq in frequency_count.items():\n        # Use negative frequency for max heap behavior\n        heappush(heap, (freq, num))\n        # Keep heap size to k\n        if len(heap) > k:\n            heappop(heap)\n    \n    # Extract results in descending order of frequency\n    result = []\n    while heap:\n        freq, num = heappop(heap)\n        result.append(num)\n    \n    return result[::-1]  # Reverse to get descending order\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpl_dpilph.py\", line 26, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    # Handle edge cases\n    if n < 2:\n        return None\n    \n    largest_factor = 2\n    \n    # First, handle all even numbers\n    while n % 2 == 0:\n        largest_factor = 2\n        n = n // 2\n    \n    # Then check odd numbers up to sqrt(n)\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            largest_factor = i\n            n = n // i\n    \n    # If n is still greater than 2, it's prime itself\n    if n > 2:\n        largest_factor = n\n        \n    return largest_factor\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(decimal_num):\n    # Handle edge case for 0\n    if decimal_num == 0:\n        return \"0\"\n    \n    # Handle negative numbers\n    is_negative = decimal_num < 0\n    decimal_num = abs(decimal_num)\n    \n    # Convert to binary\n    binary = \"\"\n    while decimal_num > 0:\n        binary = str(decimal_num % 2) + binary\n        decimal_num //= 2\n    \n    # Add negative sign if necessary\n    return \"-\" + binary if is_negative else binary\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5ximnp2y.py\", line 15, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "completion": "def find_missing(arr):\n    if not arr:\n        return None\n    \n    # Get the expected start and end of sequence\n    start = min(arr[0], 1)  # Handle case where sequence might start with 1\n    end = arr[-1]\n    \n    # Calculate expected sum of complete sequence\n    expected_sum = (end * (end + 1) - start * (start - 1)) // 2\n    \n    # Calculate actual sum of array\n    actual_sum = sum(arr)\n    \n    # Missing number is the difference\n    missing = expected_sum - actual_sum\n    \n    return missing if missing else None\n\n# Test cases\nprint(find_missing([1, 2, 4, 5, 6]))  # Output: 3\nprint(find_missing([2, 3, 4, 5]))     # Output: 1\nprint(find_missing([1, 2, 3, 4]))     # Output: None\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxj8di941.py\", line 18, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    \"\"\"\n    Find the n-th rectangular number.\n    \n    Args:\n        n (int): Position of the rectangular number to find (1-based indexing)\n    \n    Returns:\n        int: The n-th rectangular number\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    return n * (n + 1)\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator, n):\n    # Handle special case where numerator is 0\n    if numerator == 0:\n        return 0\n        \n    # Handle invalid inputs\n    if denominator == 0 or n <= 0:\n        raise ValueError(\"Invalid input: denominator cannot be 0 and n must be positive\")\n    \n    # Perform long division to find decimal digits\n    quotient = numerator * 10 // denominator\n    remainder = (numerator * 10) % denominator\n    \n    # Skip the first digit if it's 0\n    current_position = 1\n    \n    # Continue long division until we reach the nth digit\n    while current_position < n:\n        remainder *= 10\n        quotient = remainder // denominator\n        remainder = remainder % denominator\n        current_position += 1\n        \n    return quotient\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 37, "completion": "def sort_mixed_list(mixed_list):\n    if not mixed_list:  # Handle empty list case\n        return []\n    \n    # Separate numbers and strings\n    numbers = [x for x in mixed_list if isinstance(x, (int, float))]\n    strings = [x for x in mixed_list if isinstance(x, str)]\n    \n    # Sort both lists separately\n    numbers.sort()\n    strings.sort()\n    \n    # Return combined sorted list with numbers first, then strings\n    return numbers + strings\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 38, "completion": "def div_even_odd(numbers):\n    # Initialize variables to store first even and odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Find first even and odd numbers\n    for num in numbers:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Handle cases where even/odd numbers aren't found or division by zero\n    if first_even is None or first_odd is None:\n        return None\n    if first_even == 0:\n        return 0\n        \n    return first_even / first_odd\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 39, "completion": "from collections import Counter\nfrom heapq import heappush, heappop\n\ndef rearrange_string(s: str) -> str:\n    # Count frequency of each character\n    char_count = Counter(s)\n    \n    # Create a max heap (using negative counts since Python has min heap)\n    heap = []\n    for char, count in char_count.items():\n        heappush(heap, (-count, char))\n    \n    result = []\n    prev_char = None\n    prev_count = 0\n    \n    while heap:\n        # Get the most frequent character\n        count, char = heappop(heap)\n        result.append(char)\n        \n        # If we have a previous character waiting, put it back in heap\n        if prev_char and prev_count < 0:\n            heappush(heap, (prev_count, prev_char))\n            \n        # Store current char as previous for next iteration\n        prev_char = char\n        prev_count = count + 1  # Increment count (remember, count is negative)\n    \n    # Check if the resulting string is valid\n    final_str = ''.join(result)\n    return final_str if len(final_str) == len(s) else \"\"\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpbabsvmfd.py\", line 26, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "completion": "from collections import Counter\n\ndef freq_element(list_of_lists):\n    # Return empty dictionary for empty input\n    if not list_of_lists:\n        return {}\n    \n    # Flatten the list of lists and count elements\n    flattened = [item for sublist in list_of_lists for item in sublist]\n    return dict(Counter(flattened))\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 41, "completion": "def filter_evennumbers(numbers):\n    if not numbers:  # Check if list is empty\n        return []\n    \n    # Use filter() with lambda to get even numbers\n    return list(filter(lambda x: x % 2 == 0, numbers))\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 42, "completion": "def find_sum(arr):\n    # Handle empty array case\n    if not arr:\n        return 0\n    \n    # Create a dictionary to store element frequencies\n    freq = {}\n    \n    # Count frequency of each element\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    \n    # Calculate sum of elements that appear more than once\n    repeated_sum = sum(num for num, count in freq.items() if count > 1)\n    \n    return repeated_sum\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpt9iul4gy.py\", line 13, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    if not text:  # Check for empty string\n        return \"Not matched!\"\n    \n    pattern = r'^[a-z]+(?:_[a-z]+)*$'\n    \n    if re.match(pattern, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 44, "completion": "import re\n\ndef text_match_string(text):\n    if not isinstance(text, str):\n        return False\n    \n    # Check if string is empty or contains only whitespace\n    if not text or text.isspace():\n        return False\n    \n    # Pattern explanation:\n    # ^ - matches start of string\n    # \\w+ - matches one or more word characters (letters, digits, underscores)\n    pattern = r'^\\w+'\n    \n    return bool(re.match(pattern, text))\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpsecwhgwh.py\", line 13, in <module>\n    assert text_match_string(\" python\")==('Not matched!')\nAssertionError", "passed": false}
{"task_id": 46, "completion": "def test_distinct(numbers):\n    \"\"\"\n    Determines whether all numbers in the given list are distinct.\n    \n    Args:\n        numbers: List of numbers to check\n        \n    Returns:\n        bool: True if all numbers are distinct, False otherwise\n        \n    Examples:\n        >>> test_distinct([1, 2, 3])\n        True\n        >>> test_distinct([1, 2, 2])\n        False\n        >>> test_distinct([])\n        True\n        >>> test_distinct([1])\n        True\n    \"\"\"\n    # Handle edge cases\n    if len(numbers) <= 1:\n        return True\n    \n    # Convert list to set to remove duplicates\n    # Then compare lengths - if equal, all elements were distinct\n    return len(set(numbers)) == len(numbers)\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 47, "completion": "def compute_last_digit(a, b):\n    # If a equals b, the result is always 1\n    if a == b:\n        return 1\n    \n    # If a > b, result is 0 since factorial(b)/factorial(a) will be a fraction\n    if a > b:\n        return 0\n        \n    # Calculate the last digit of the product of numbers from (a+1) to b\n    result = 1\n    for i in range(a + 1, b + 1):\n        result = (result * (i % 10)) % 10\n        \n    return result\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 48, "completion": "def odd_bit_set_number(n):\n    # Start with the input number\n    result = n\n    \n    # Set each odd position bit (1-based indexing)\n    # We'll check up to 32 bits (for integer)\n    for i in range(32):\n        # Check if current position is odd (1-based indexing)\n        if i % 2 == 0:  # i % 2 == 0 means odd position in 1-based indexing\n            # Set the bit at position i using OR operation\n            result |= (1 << i)\n    \n    return result\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2rwno3c0.py\", line 12, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(matrix, index=0):\n    \"\"\"\n    Extract elements at the specified index from each sublist in a 2D list.\n    \n    Args:\n        matrix (list): A 2D list containing sublists\n        index (int): The index position to extract (defaults to 0)\n    \n    Returns:\n        list: A list containing elements at the specified index from valid sublists\n    \"\"\"\n    return [sublist[index] for sublist in matrix if len(sublist) > index]\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 50, "completion": "def min_length_list(*lists):\n    if not lists:\n        return None\n    return min(lists, key=lambda x: len(x))\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_8304jqd.py\", line 5, in <module>\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nAssertionError", "passed": false}
{"task_id": 51, "completion": "def check_equilateral(side1, side2, side3):\n    # Check if any side is zero or negative\n    if side1 <= 0 or side2 <= 0 or side3 <= 0:\n        return False\n    \n    # Check if all sides are equal\n    return side1 == side2 == side3\n\n# Example usage:\ndef main():\n    # Test cases\n    print(check_equilateral(5, 5, 5))      # True\n    print(check_equilateral(2, 3, 2))      # False\n    print(check_equilateral(0, 0, 0))      # False\n    print(check_equilateral(7, 7, 7))      # True\n\nif __name__ == \"__main__\":\n    main()\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 52, "completion": "def parallelogram_area(base: float, height: float) -> float:\n    \"\"\"\n    Calculate the area of a parallelogram given its base and height.\n    \n    Args:\n        base (float): The length of the base of the parallelogram\n        height (float): The height (perpendicular distance between parallel sides)\n        \n    Returns:\n        float: The area of the parallelogram\n        \n    Raises:\n        ValueError: If base or height is negative\n    \"\"\"\n    if base < 0 or height < 0:\n        raise ValueError(\"Base and height must be non-negative numbers\")\n        \n    # Handle edge cases where base or height is zero\n    if base == 0 or height == 0:\n        return 0\n        \n    return base * height\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(text):\n    # Handle empty string case\n    if not text:\n        return \"Equal\"\n    \n    # Compare first and last characters\n    return \"Equal\" if text[0] == text[-1] else \"Not Equal\"\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 54, "completion": "def counting_sort(arr):\n    # Handle edge cases\n    if not arr:  # Empty array\n        return []\n    if len(arr) == 1:  # Single element\n        return arr\n    \n    # Find the range of input array\n    max_val = max(arr)\n    min_val = min(arr)\n    range_of_elements = max_val - min_val + 1\n    \n    # Create a counting array to store count of each unique object\n    count = [0] * range_of_elements\n    \n    # Store count of each object\n    for num in arr:\n        count[num - min_val] += 1\n    \n    # Modify count array to store actual position of each object\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    \n    # Create output array\n    output = [0] * len(arr)\n    \n    # Build the output array\n    for i in range(len(arr) - 1, -1, -1):\n        output[count[arr[i] - min_val] - 1] = arr[i]\n        count[arr[i] - min_val] -= 1\n    \n    return output\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 55, "completion": "def tn_gp(a, r, n):\n    \"\"\"\n    Calculate the nth term of a geometric progression.\n    \n    Args:\n        a: First term of the sequence\n        r: Common ratio\n        n: Position of the term to find (1-based index)\n    \n    Returns:\n        The nth term of the geometric progression\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Term position must be a positive integer\")\n        \n    if r == 0:\n        return a if n == 1 else 0\n        \n    return a * (r ** (n - 1))\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2n0xmvcw.py\", line 7, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def check(number):\n    # Convert number to string to easily reverse it\n    num_str = str(number)\n    \n    # Get the reverse by converting string back to integer\n    reverse = int(num_str[::-1])\n    \n    # Check if the original number is one less than twice its reverse\n    return number == (2 * reverse - 1)\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpbjppp6bs.py\", line 12, in <module>\n    assert check(1) == False\nAssertionError", "passed": false}
{"task_id": 57, "completion": "def find_max_num(digits):\n    # Handle empty list case\n    if not digits:\n        return 0\n    \n    # Convert digits to strings and sort in descending order\n    digits_str = [str(d) for d in digits]\n    digits_str.sort(reverse=True)\n    \n    # Join the digits and convert back to integer\n    return int(''.join(digits_str))\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpro7rc7ex.py\", line 10, in <module>\n    assert find_max_num([1,2,3],3) == 321\nTypeError: find_max_num() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 58, "completion": "def opposite_signs(num1: int, num2: int) -> bool:\n    # Handle case where either number is zero\n    if num1 == 0 or num2 == 0:\n        return False\n    \n    # Compare signs using multiplication\n    # If product is negative, numbers have opposite signs\n    return (num1 * num2) < 0\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_60nxk2q.py\", line 11, in <module>\n    assert opposite_signs(0, -1) == True\nAssertionError", "passed": false}
{"task_id": 59, "completion": "def is_octagonal(n):\n    \"\"\"\n    Calculate the nth octagonal number.\n    \n    Args:\n        n (int): The position of the octagonal number to calculate (n >= 1)\n    \n    Returns:\n        int: The nth octagonal number\n    \n    Raises:\n        ValueError: If n is less than 1\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return n * (3 * n - 2)\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 60, "completion": "def max_len_sub(arr):\n    # Handle empty array case\n    if not arr:\n        return 0\n    \n    # If array has only one element, return 1\n    if len(arr) == 1:\n        return 1\n    \n    n = len(arr)\n    # dp array to store lengths of subsequences ending at each index\n    dp = [1] * n\n    # Keep track of maximum length found\n    max_length = 1\n    \n    # For each position, check all previous positions\n    for i in range(1, n):\n        for j in range(i):\n            # If current difference is different from previous difference\n            if arr[i] - arr[j] != arr[j] - arr[j-1]:\n                # Update dp[i] if we found a longer subsequence\n                dp[i] = max(dp[i], dp[j] + 1)\n        max_length = max(max_length, dp[i])\n    \n    return max_length\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpj9553c37.py\", line 22, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}

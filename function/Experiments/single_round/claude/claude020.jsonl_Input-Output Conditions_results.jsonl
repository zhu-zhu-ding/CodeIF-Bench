{"task_id": 14, "completion": "def find_volume(base_area: float, height: float, length: float) -> float:\n    \"\"\"\n    Calculate the volume of a triangular prism.\n    \n    Args:\n        base_area (float): Area of the triangular base\n        height (float): Height of the triangular face\n        length (float): Length of the prism\n    \n    Returns:\n        float: Volume of the triangular prism\n    \n    Raises:\n        ValueError: If any input is negative or zero\n    \"\"\"\n    # Check if inputs are positive\n    if base_area <= 0 or height <= 0 or length <= 0:\n        raise ValueError(\"All dimensions must be positive numbers\")\n    \n    # Calculate and return the volume\n    volume = base_area * length\n    return volume\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpcbcsym75.py\", line 8, in <module>\n    assert find_volume(10,8,6) == 240\nAssertionError", "passed": false}
{"task_id": 15, "completion": "def split_lowerstring(text):\n    if not text:\n        return []\n    \n    result = []\n    current_segment = text[0]\n    \n    for char in text[1:]:\n        if char.islower():\n            result.append(current_segment)\n            current_segment = char\n        else:\n            current_segment += char\n            \n    result.append(current_segment)\n    return result\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmptyi1b48s.py\", line 14, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    # Pattern matches: one or more lowercase letters, followed by underscore, followed by one or more lowercase letters\n    pattern = r'^[a-z]+_[a-z]+$'\n    \n    if re.match(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 17, "completion": "def square_perimeter(side_length: int) -> int:\n    # Check if input is non-negative\n    if not isinstance(side_length, int) or side_length < 0:\n        raise ValueError(\"Side length must be a non-negative integer\")\n    \n    # Calculate perimeter (4 * side length)\n    return 4 * side_length\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(str1: str, str2: str) -> str:\n    # Validate that both inputs contain only alphabetic characters\n    if not (str1.isalpha() and str2.isalpha()):\n        raise ValueError(\"Input strings must only contain alphabetic characters\")\n    \n    # Create a result string by keeping only characters from str1 that are not in str2\n    result = ''.join(char for char in str1 if char not in str2)\n    \n    return result\n\n\n# Test cases\ndef test_remove_dirty_chars():\n    assert remove_dirty_chars(\"hello\", \"el\") == \"ho\"\n    assert remove_dirty_chars(\"python\", \"hon\") == \"pyt\"\n    assert remove_dirty_chars(\"abcdef\", \"xyz\") == \"abcdef\"\n    assert remove_dirty_chars(\"\", \"abc\") == \"\"\n    assert remove_dirty_chars(\"abc\", \"\") == \"abc\"\n    \n    # Test error cases\n    try:\n        remove_dirty_chars(\"hello123\", \"world\")\n        assert False, \"Should raise ValueError for non-alphabetic characters\"\n    except ValueError:\n        pass\n        \n    try:\n        remove_dirty_chars(\"hello\", \"world!\")\n        assert False, \"Should raise ValueError for non-alphabetic characters\"\n    except ValueError:\n        pass\n\n# Run tests\nif __name__ == \"__main__\":\n    test_remove_dirty_chars()\n    print(\"All tests passed!\")\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplujpaqev.py\", line 28, in <module>\n    test_remove_dirty_chars()\n  File \"/tmp/tmplujpaqev.py\", line 13, in test_remove_dirty_chars\n    assert remove_dirty_chars(\"\", \"abc\") == \"\"\n  File \"/tmp/tmplujpaqev.py\", line 4, in remove_dirty_chars\n    raise ValueError(\"Input strings must only contain alphabetic characters\")\nValueError: Input strings must only contain alphabetic characters", "passed": false}
{"task_id": 19, "completion": "def test_duplicate(numbers):\n    # Type checking\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Use set to check for duplicates - sets only store unique values\n    return len(set(numbers)) < len(numbers)\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(num):\n    if num < 1:\n        return False\n    \n    # Check for each value of n until the Woodall number exceeds input\n    n = 1\n    while True:\n        woodall = n * (2 ** n) - 1\n        if woodall == num:\n            return True\n        if woodall > num:\n            return False\n        n += 1\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists):\n    if not list_of_lists:  # Check if input list is empty\n        return 0\n    \n    # Use sum() to calculate sum of each sublist, then find maximum using max()\n    return max(sum(sublist) for sublist in list_of_lists)\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 25, "completion": "def find_product(arr):\n    # Convert list to set to remove duplicates\n    unique_elements = set(arr)\n    \n    # Initialize product as 1\n    product = 1\n    \n    # Multiply all unique elements\n    for num in unique_elements:\n        product *= num\n    \n    return product\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpliwmjzbl.py\", line 10, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(tuple_list, k):\n    \"\"\"\n    Check if all tuples in the given list have exactly k elements.\n    \n    Args:\n        tuple_list (list): List of tuples to check\n        k (int): Expected number of elements in each tuple\n    \n    Returns:\n        bool: True if all tuples have k elements, False otherwise\n    \"\"\"\n    if not tuple_list:  # Check if the list is empty\n        return False\n        \n    return all(len(tup) == k for tup in tuple_list)\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0npa37cy.py\", line 5, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 28, "completion": "def binomial_coeff(n: int, k: int) -> int:\n    \"\"\"\n    Calculate the binomial coefficient C(n,k) - number of ways to choose k items from n items.\n    \n    Args:\n        n (int): Total number of items (non-negative integer)\n        k (int): Number of items to choose (non-negative integer)\n    \n    Returns:\n        int: The binomial coefficient C(n,k)\n    \n    Raises:\n        ValueError: If n or k is negative, or if k > n\n    \"\"\"\n    # Input validation\n    if n < 0 or k < 0:\n        raise ValueError(\"Both n and k must be non-negative\")\n    if k > n:\n        raise ValueError(\"k cannot be greater than n\")\n    \n    # Optimize by using the smaller value of k or n-k\n    k = min(k, n - k)\n    \n    # Base cases\n    if k == 0:\n        return 1\n    if k == 1:\n        return n\n    \n    # Calculate using multiplicative formula\n    result = 1\n    for i in range(k):\n        result *= (n - i)\n        result //= (i + 1)\n    \n    return result\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    if not s:\n        return 0\n        \n    n = len(s)\n    count = 0\n    \n    # Check all possible substrings\n    for i in range(n):\n        for j in range(i, n):\n            # If first and last characters match, increment count\n            if s[i] == s[j]:\n                count += 1\n                \n    return count\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    # Handle edge cases\n    if n < 2:\n        return None\n    \n    largest_factor = 1\n    \n    # Divide out all factors of 2 first\n    while n % 2 == 0:\n        largest_factor = 2\n        n = n // 2\n    \n    # Check odd numbers up to sqrt(n)\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            largest_factor = i\n            n = n // i\n    \n    # If n is still greater than 2, it's prime and is the largest factor\n    if n > 2:\n        largest_factor = n\n    \n    return largest_factor\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 35, "completion": "def find_rect_num(n):\n    \"\"\"\n    Find the n-th rectangular number.\n    \n    Args:\n        n (int): Position in the sequence (0-based index)\n    \n    Returns:\n        int: The n-th rectangular number\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    return n * (n + 1)\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator, n):\n    # Handle division by zero\n    if denominator == 0:\n        raise ValueError(\"Denominator cannot be zero\")\n    \n    # Handle negative numbers\n    if numerator < 0 or denominator < 0:\n        raise ValueError(\"Only positive numbers are supported\")\n    \n    # Get the integer part first\n    integer_part = numerator // denominator\n    remainder = numerator % denominator\n    \n    # If n is 0, return the integer part's last digit\n    if n == 0:\n        return integer_part % 10\n    \n    # Calculate decimal digits\n    for _ in range(n):\n        remainder *= 10\n        digit = remainder // denominator\n        remainder = remainder % denominator\n    \n    return digit\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 38, "completion": "def div_even_odd(numbers):\n    # Find first even number\n    even = next((num for num in numbers if num % 2 == 0), None)\n    # Find first odd number\n    odd = next((num for num in numbers if num % 2 != 0), None)\n    \n    # Check if both even and odd numbers were found\n    if even is None or odd is None:\n        raise ValueError(\"List must contain at least one even and one odd number\")\n    \n    # Return the division\n    return even / odd\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 39, "completion": "from heapq import heappush, heappop\nfrom collections import Counter\n\ndef rearrange_string(s: str) -> str:\n    # Count frequency of each character\n    char_count = Counter(s)\n    \n    # Create max heap (using negative counts since heapq is min heap)\n    max_heap = []\n    for char, count in char_count.items():\n        heappush(max_heap, (-count, char))\n    \n    result = []\n    prev_char = None\n    prev_count = 0\n    \n    while max_heap:\n        # Get the most frequent character\n        count, char = heappop(max_heap)\n        result.append(char)\n        \n        # If we had a previous character waiting, put it back in heap\n        if prev_char and prev_count < 0:\n            heappush(max_heap, (prev_count, prev_char))\n        \n        # Save current char for next iteration\n        prev_char = char\n        prev_count = count + 1  # increment count (remember counts are negative)\n    \n    final_str = ''.join(result)\n    \n    # Check if the result is valid (same length as input)\n    return final_str if len(final_str) == len(s) else \"\"\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1hsoazj7.py\", line 26, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 42, "completion": "def find_sum(arr):\n    # Create a dictionary to store element frequencies\n    freq = {}\n    \n    # Count frequency of each element\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    \n    # Calculate sum of elements that appear more than once\n    repeated_sum = sum(num for num, count in freq.items() if count > 1)\n    \n    return repeated_sum\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpnqlw12az.py\", line 10, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    pattern = r'^[a-z]+_[a-z]+$'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 46, "completion": "def test_distinct(numbers):\n    # Convert list to set to remove duplicates and compare lengths\n    # If lengths are equal, all numbers were distinct\n    return len(set(numbers)) == len(numbers)\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 48, "completion": "def odd_bit_set_number(n):\n    # Create a mask with all odd bits set (starting from rightmost bit as position 1)\n    # In binary: ...1010101\n    mask = 0xAAAAAAAA\n    \n    # Perform OR operation to set all odd bits\n    result = n | mask\n    \n    return result\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphubiki7z.py\", line 8, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(two_d_list, index=0):\n    \"\"\"\n    Extract elements at a specified index from each sublist in a 2D list.\n    \n    Args:\n        two_d_list (list): A two-dimensional list\n        index (int): The index of elements to extract (defaults to 0)\n    \n    Returns:\n        list: A list containing elements at the specified index from each sublist\n    \"\"\"\n    # Return empty list if input is empty\n    if not two_d_list:\n        return []\n    \n    # Use list comprehension to extract elements, handling potential index errors\n    result = [sublist[index] for sublist in two_d_list if len(sublist) > index]\n    \n    return result\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 50, "completion": "def min_length_list(lists):\n    if not lists:  # Check if input list is empty\n        return None\n    return min(((len(lst), lst) for lst in lists), key=lambda x: x[0])\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 52, "completion": "def parallelogram_area(base: float, height: float) -> float:\n    \"\"\"\n    Calculate the area of a parallelogram given its base and height.\n    \n    Args:\n        base (float): The length of the base of the parallelogram\n        height (float): The height (perpendicular distance between parallel sides)\n        \n    Returns:\n        float: The area of the parallelogram\n        \n    Raises:\n        ValueError: If base or height is not positive\n    \"\"\"\n    if not isinstance(base, (int, float)) or not isinstance(height, (int, float)):\n        raise TypeError(\"Base and height must be numerical values\")\n    \n    if base <= 0 or height <= 0:\n        raise ValueError(\"Base and height must be positive numbers\")\n    \n    return base * height\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpyy3srzkx.py\", line 11, in <module>\n    assert parallelogram_area(0, 10) == 0\n  File \"/tmp/tmpyy3srzkx.py\", line 5, in parallelogram_area\n    raise ValueError(\"Base and height must be positive numbers\")\nValueError: Base and height must be positive numbers", "passed": false}
{"task_id": 53, "completion": "def check_equality(text):\n    # Input validation to ensure we receive a string\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Handle empty string case\n    if len(text) == 0:\n        raise ValueError(\"String cannot be empty\")\n        \n    # Compare first and last characters\n    return \"Equal\" if text[0] == text[-1] else \"Not Equal\"\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 54, "completion": "def counting_sort(arr):\n    # Handle empty or single-element arrays\n    if not arr or len(arr) == 1:\n        return arr\n    \n    # Find the maximum element to determine the range\n    max_element = max(arr)\n    \n    # Create a counting array initialized with zeros\n    count = [0] * (max_element + 1)\n    \n    # Count the occurrences of each element\n    for num in arr:\n        count[num] += 1\n    \n    # Reconstruct the sorted array\n    sorted_arr = []\n    for i in range(len(count)):\n        sorted_arr.extend([i] * count[i])\n    \n    return sorted_arr\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 57, "completion": "def find_max_num(digits, num_digits):\n    # Sort digits in descending order\n    digits.sort(reverse=True)\n    \n    # If requested number of digits is greater than available digits\n    if num_digits > len(digits):\n        return -1\n    \n    # Take first num_digits digits and convert to number\n    result = int(''.join(map(str, digits[:num_digits])))\n    \n    return result\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 58, "completion": "def opposite_signs(num1: int, num2: int) -> bool:\n    # Check if inputs are integers\n    if not (isinstance(num1, int) and isinstance(num2, int)):\n        raise TypeError(\"Both inputs must be integers\")\n    \n    # Check if numbers have opposite signs using multiplication\n    # If product is negative, numbers have opposite signs\n    return num1 * num2 < 0\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 60, "completion": "def max_len_sub(arr, diff):\n    if not arr:\n        return 0\n        \n    n = len(arr)\n    dp = [1] * n  # Initialize dp array with 1s\n    max_length = 1\n    \n    # For each position, check previous elements\n    for i in range(1, n):\n        for j in range(i):\n            # If difference between elements equals given diff\n            if arr[i] - arr[j] == diff:\n                dp[i] = max(dp[i], dp[j] + 1)\n                max_length = max(max_length, dp[i])\n                \n    return max_length\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpbwwdo_og.py\", line 15, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nAssertionError", "passed": false}

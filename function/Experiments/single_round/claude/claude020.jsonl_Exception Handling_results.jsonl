{"task_id": 11, "completion": "def remove_occ(input_str, char):\n    # Validate that char is a single character\n    if len(char) != 1:\n        raise ValueError('Second parameter must be a single character.')\n    \n    # Convert string to list for easier manipulation\n    str_list = list(input_str)\n    \n    # Find first occurrence\n    first_index = -1\n    last_index = -1\n    \n    # Find indices of first and last occurrence\n    for i in range(len(str_list)):\n        if str_list[i] == char:\n            if first_index == -1:\n                first_index = i\n            last_index = i\n    \n    # If character is found, remove last occurrence first (to maintain index validity)\n    if last_index != -1:\n        str_list.pop(last_index)\n        if first_index != last_index:  # Only remove first if it's different from last\n            str_list.pop(first_index)\n    \n    # Convert back to string and return\n    return ''.join(str_list)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 12, "completion": "def sort_matrix(matrix):\n    # Type checking: ensure matrix is a list\n    if not isinstance(matrix, list):\n        raise TypeError(\"Input must be a list of lists\")\n    \n    # Check if matrix is empty\n    if not matrix:\n        return []\n    \n    # Type checking: ensure each row is a list and contains only integers\n    for row in matrix:\n        if not isinstance(row, list):\n            raise TypeError(\"Each row must be a list\")\n        if not all(isinstance(x, int) for x in row):\n            raise TypeError(\"All elements must be integers\")\n    \n    # Sort the matrix based on row sums\n    return sorted(matrix, key=sum)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 13, "completion": "from collections import Counter\nfrom typing import List\n\ndef count_common(words: List[str]) -> dict:\n    # Type checking\n    if not isinstance(words, list) or not all(isinstance(word, str) for word in words):\n        raise TypeError(\"Input must be a list of strings\")\n    \n    # Count occurrences using Counter\n    word_counts = Counter(words)\n    \n    # Convert Counter to regular dictionary\n    return dict(word_counts)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpaskte_31.py\", line 11, in <module>\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nAssertionError", "passed": false}
{"task_id": 14, "completion": "def find_volume(base, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n    \n    Args:\n        base (float): The base length of the triangle\n        height (float): The height of the triangle\n        length (float): The length of the prism\n    \n    Returns:\n        float: The volume of the triangular prism\n        \n    Raises:\n        ValueError: If any dimension is non-positive or non-numeric\n    \"\"\"\n    try:\n        # Convert inputs to float to handle numeric strings\n        base = float(base)\n        height = float(height)\n        length = float(length)\n        \n        # Check if any dimension is non-positive\n        if base <= 0 or height <= 0 or length <= 0:\n            raise ValueError(\"All dimensions must be positive numbers.\")\n            \n        # Calculate volume\n        volume = 0.5 * base * height * length\n        return volume\n        \n    except (ValueError, TypeError):\n        raise ValueError(\"All dimensions must be positive numbers.\")\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 15, "completion": "def split_lowerstring(text):\n    # Check if input is a string\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Initialize variables\n    result = []\n    current_segment = \"\"\n    \n    for char in text:\n        if char.islower():\n            # If we have collected characters, add them to result\n            if current_segment:\n                result.append(current_segment)\n            current_segment = char\n        else:\n            current_segment += char\n    \n    # Add the last segment if it exists\n    if current_segment:\n        result.append(current_segment)\n    \n    return result\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpvvobmfbl.py\", line 23\n    try: split_lowerstring(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 16, "completion": "def text_lowercase_underscore(text):\n    import re\n    \n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4jg4ndxg.py\", line 7, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative\")\n    return 4 * side_length\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(main_str, chars_to_remove):\n    # Type validation\n    if not isinstance(main_str, str) or not isinstance(chars_to_remove, str):\n        raise TypeError(\"Both inputs must be strings\")\n    \n    # Create a new string excluding characters from chars_to_remove\n    return ''.join(char for char in main_str if char not in chars_to_remove)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 19, "completion": "def test_duplicate(arr):\n    # Input validation\n    if not isinstance(arr, list):\n        raise ValueError('Input must be a list of integers')\n    \n    # Check if all elements are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise ValueError('Input must be a list of integers')\n    \n    # Use set to check for duplicates\n    return len(arr) != len(set(arr))\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpc2zi8mb9.py\", line 14, in <module>\n    test_duplicate(None)\n  File \"/tmp/tmpc2zi8mb9.py\", line 4, in test_duplicate\n    raise ValueError('Input must be a list of integers')\nValueError: Input must be a list of integers", "passed": false}
{"task_id": 20, "completion": "def is_woodall(number):\n    # Check if input is an integer\n    if not isinstance(number, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    # Woodall numbers must be positive\n    if number <= 0:\n        return False\n    \n    # Check for each n starting from 1\n    n = 1\n    while True:\n        woodall = n * (2**n) - 1\n        if woodall == number:\n            return True\n        elif woodall > number:\n            return False\n        n += 1\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 21, "completion": "def multiples_of_num(m, n):\n    if m < 0 or n < 0:\n        raise ValueError(\"Both m and n must be non-negative numbers\")\n    \n    return [n * i for i in range(1, m + 1)]\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 22, "completion": "def find_first_duplicate(arr):\n    # Type checking\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements must be integers\")\n    \n    # Use a set to track seen numbers\n    seen = set()\n    \n    # Iterate through the array\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    \n    # Return None if no duplicates found\n    return None\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppdsixqky.py\", line 17, in <module>\n    assert find_first_duplicate([1, 2, 3, 4])==-1\nAssertionError", "passed": false}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists):\n    # Type checking for main list\n    if not isinstance(list_of_lists, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Empty list check\n    if not list_of_lists:\n        return 0\n    \n    max_sum = float('-inf')  # Initialize with negative infinity\n    \n    for sublist in list_of_lists:\n        # Check if element is a list\n        if not isinstance(sublist, list):\n            raise TypeError(\"All elements must be lists\")\n            \n        # Check if sublist is empty\n        if not sublist:\n            continue\n            \n        # Check if all elements are integers\n        if not all(isinstance(x, int) for x in sublist):\n            raise TypeError(\"All elements in sublists must be integers\")\n            \n        # Calculate sum of current sublist\n        current_sum = sum(sublist)\n        max_sum = max(max_sum, current_sum)\n    \n    # If no valid sublists were found, return 0\n    return 0 if max_sum == float('-inf') else max_sum\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpphumlai5.py\", line 27\n    try: maximum_sum([[1, 2], [3, 'a']]); assert False, 'Expected TypeError' except TypeError: pass\n                                                                             ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 24, "completion": "def binary_to_decimal(binary_str):\n    # Check if input is a string\n    if not isinstance(binary_str, str):\n        raise ValueError(\"Invalid binary number\")\n    \n    # Check if string contains only 0s and 1s\n    if not all(bit in '01' for bit in binary_str):\n        raise ValueError(\"Invalid binary number\")\n    \n    # Convert binary to decimal using int() with base 2\n    decimal = int(binary_str, 2)\n    return decimal\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmploc5s6gw.py\", line 14\n    try: binary_to_decimal('102'); assert False, 'Expected ValueError' except ValueError as e: assert str(e) == 'Invalid binary number'\n                                                                       ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 25, "completion": "def find_product(arr):\n    # Check if input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if all elements are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements must be integers\")\n    \n    # Get unique elements using set and calculate product\n    unique_elements = set(arr)\n    product = 1\n    \n    for num in unique_elements:\n        product *= num\n    \n    return product\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpt6xk5t9b.py\", line 14, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(tuple_list, k):\n    # Check if k is an integer\n    if not isinstance(k, int):\n        raise TypeError(\"k must be an integer\")\n    \n    # Check if input is a list\n    if not isinstance(tuple_list, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if all elements are tuples and have k elements\n    for item in tuple_list:\n        if not isinstance(item, tuple):\n            raise TypeError(\"All elements in the list must be tuples\")\n        if len(item) != k:\n            return False\n            \n    return True\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppstacruf.py\", line 15, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "completion": "def remove(strings):\n    # Check if input is a list\n    if not isinstance(strings, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if all elements are strings\n    if not all(isinstance(s, str) for s in strings):\n        raise TypeError(\"All elements must be strings\")\n    \n    # Remove digits from each string using list comprehension\n    return [''.join(char for char in s if not char.isdigit()) for s in strings]\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 28, "completion": "def binomial_coeff(n, k):\n    # Input validation\n    if n < 0 or k < 0 or k > n:\n        raise ValueError(\"Inputs must be non-negative and k must not be greater than n\")\n    \n    # Optimize calculation by using the smaller value\n    k = min(k, n - k)\n    \n    # Base cases\n    if k == 0:\n        return 1\n    if k == 1:\n        return n\n    \n    # Calculate using multiplicative formula\n    result = 1\n    for i in range(k):\n        result *= (n - i)\n        result //= (i + 1)\n    \n    return result\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 29, "completion": "def get_odd_occurrence(arr):\n    # Type checking\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements must be integers\")\n    \n    # Use XOR operation to find the odd occurring element\n    result = 0\n    for num in arr:\n        result ^= num\n    \n    # If no odd occurrence is found (result is 0), return None\n    return result if result != 0 else None\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmprvykxd_a.py\", line 13, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    # Type checking\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Handle empty string\n    if not s:\n        return 0\n        \n    n = len(s)\n    count = 0\n    \n    # Check all possible substrings\n    for i in range(n):\n        for j in range(i, n):\n            # If first and last characters match, increment count\n            if s[i] == s[j]:\n                count += 1\n                \n    return count\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmp0ojua7q3.py\", line 20\n    try: count_substring_with_equal_ends(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                                  ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 31, "completion": "from heapq import heappush, heappop\nfrom collections import Counter\nfrom typing import List\n\ndef func(lists: List[List[int]], k: int) -> List[int]:\n    # Combine all lists and count frequencies\n    all_nums = []\n    for lst in lists:\n        all_nums.extend(lst)\n    \n    # Count frequencies of all numbers\n    freq_counter = Counter(all_nums)\n    \n    # Check if k is valid\n    if k > len(freq_counter):\n        raise ValueError('k cannot be greater than the number of distinct integers')\n    \n    # Create min heap to keep track of k most frequent elements\n    heap = []\n    \n    # Process each number and its frequency\n    for num, freq in freq_counter.items():\n        # If heap has less than k elements, simply add the current element\n        if len(heap) < k:\n            heappush(heap, (freq, num))\n        else:\n            # If current frequency is higher than the smallest frequency in heap\n            if freq > heap[0][0]:\n                heappop(heap)\n                heappush(heap, (freq, num))\n    \n    # Extract numbers from heap in descending order of frequency\n    result = []\n    while heap:\n        result.append(heappop(heap)[1])\n    \n    return result[::-1]  # Reverse to get descending order\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphyvyldm0.py\", line 31, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    # Input validation\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    # Handle special case\n    if n == 1:\n        return 1\n        \n    largest_factor = 1\n    \n    # Divide out all factors of 2 first\n    while n % 2 == 0:\n        largest_factor = 2\n        n = n // 2\n    \n    # Check odd numbers up to sqrt(n)\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            largest_factor = i\n            n = n // i\n    \n    # If n is still greater than 2, it's prime itself\n    if n > 2:\n        largest_factor = n\n        \n    return largest_factor\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(decimal):\n    # Check if input is a non-negative integer\n    if not isinstance(decimal, int) or decimal < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    # Handle special case for 0\n    if decimal == 0:\n        return \"0\"\n    \n    # Convert decimal to binary\n    binary = \"\"\n    num = decimal\n    while num > 0:\n        binary = str(num % 2) + binary\n        num //= 2\n    \n    return binary\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpcg1smlh1.py\", line 15, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "completion": "def find_missing(arr):\n    # Check if array is sorted\n    if not all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1)):\n        raise ValueError(\"Input list must be sorted.\")\n    \n    # Handle empty or single element arrays\n    if not arr:\n        return None\n    \n    # Find the expected sequence range\n    start = arr[0]\n    end = arr[-1]\n    \n    # Calculate expected sum of sequence\n    expected_sum = (end * (end + 1) // 2) - (start * (start - 1) // 2)\n    # Calculate actual sum of array\n    actual_sum = sum(arr)\n    \n    # Missing number is the difference\n    missing = expected_sum - actual_sum\n    \n    # Verify if there is actually a missing number\n    return missing if missing != 0 and start <= missing <= end else None\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9rr8wj1d.py\", line 19, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    # Check if input is valid\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    # Calculate nth rectangular number: n * (n + 1)\n    return n * (n + 1)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator, n):\n    # Check for zero denominator\n    if denominator == 0:\n        raise ValueError(\"Denominator cannot be zero\")\n    \n    # Handle negative numbers by working with absolute values\n    numerator, denominator = abs(numerator), abs(denominator)\n    \n    # Perform long division\n    result = \"\"\n    quotient = numerator // denominator\n    remainder = numerator % denominator\n    \n    # Add leading zero for proper fractions\n    result = \"0.\"\n    \n    # Calculate decimal digits\n    for _ in range(n):\n        remainder *= 10\n        digit = remainder // denominator\n        remainder = remainder % denominator\n        result += str(digit)\n    \n    # Return the nth digit as an integer\n    return int(result[n + 1])  # +1 because of the \"0.\" prefix\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 37, "completion": "def sort_mixed_list(mixed_list):\n    # Type checking for input\n    if not isinstance(mixed_list, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if all elements are either strings or integers\n    if not all(isinstance(x, (int, str)) for x in mixed_list):\n        raise TypeError(\"List elements must be either integers or strings\")\n    \n    # Separate integers and strings\n    integers = [x for x in mixed_list if isinstance(x, int)]\n    strings = [x for x in mixed_list if isinstance(x, str)]\n    \n    # Sort both lists separately\n    integers.sort()\n    strings.sort()\n    \n    # Return combined sorted list with integers first, then strings\n    return integers + strings\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 38, "completion": "def div_even_odd(numbers):\n    # Check if the input is empty\n    if not numbers:\n        raise ValueError(\"List must contain at least one even and one odd number.\")\n    \n    # Find first even number\n    first_even = None\n    for num in numbers:\n        if num % 2 == 0:\n            first_even = num\n            break\n    \n    # Find first odd number\n    first_odd = None\n    for num in numbers:\n        if num % 2 != 0:\n            first_odd = num\n            break\n    \n    # Check if both even and odd numbers were found\n    if first_even is None or first_odd is None:\n        raise ValueError(\"List must contain at least one even and one odd number.\")\n    \n    # Return the division\n    return first_even / first_odd\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpft3v_7ei.py\", line 25\n    try: div_even_odd([2, 4, 6]); assert False; except ValueError as e: assert str(e) == 'List must contain at least one even and one odd number.'\n                                                ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 39, "completion": "def rearrange_string(s):\n    # Input validation\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string\")\n    if not s.islower() or not s.isalpha():\n        raise ValueError(\"Input must contain only lowercase letters\")\n    \n    # Count frequency of each character\n    char_count = {}\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n    \n    # Find the character with maximum frequency\n    max_char = max(char_count.items(), key=lambda x: x[1], default=('', 0))\n    if max_char[1] > (len(s) + 1) // 2:\n        return \"\"  # Impossible to rearrange\n    \n    # Create a list of characters sorted by frequency\n    chars = sorted(char_count.items(), key=lambda x: (-x[1], x[0]))\n    \n    # Create result array\n    result = [''] * len(s)\n    \n    # Fill even positions first\n    idx = 0\n    for char, count in chars:\n        while count > 0 and idx < len(s):\n            result[idx] = char\n            count -= 1\n            idx += 2\n        \n        # If we still have characters left, reset idx to fill odd positions\n        if count > 0:\n            idx = 1\n            while count > 0 and idx < len(s):\n                result[idx] = char\n                count -= 1\n                idx += 2\n    \n    return ''.join(result)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpw1ikoam4.py\", line 34, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "completion": "from collections import Counter\n\ndef freq_element(list_of_lists):\n    # Check if input is a list\n    if not isinstance(list_of_lists, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if all elements are lists\n    if not all(isinstance(item, list) for item in list_of_lists):\n        raise TypeError(\"Input must be a list of lists\")\n    \n    # Flatten the list of lists and count elements\n    flattened = [item for sublist in list_of_lists for item in sublist]\n    return Counter(flattened)\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmp6qusvy0t.py\", line 15\n    try: freq_element('not a list'); assert False; except TypeError: assert True\n                                                   ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 41, "completion": "def filter_evennumbers(numbers):\n    # Check if input is a list\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if all elements are integers\n    if not all(isinstance(x, int) for x in numbers):\n        raise TypeError(\"All elements must be integers\")\n    \n    # Use filter with lambda to get even numbers\n    return list(filter(lambda x: x % 2 == 0, numbers))\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 42, "completion": "def find_sum(arr):\n    # Check if input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Create a dictionary to store element counts\n    count_dict = {}\n    \n    # Count occurrences of each element\n    for num in arr:\n        count_dict[num] = count_dict.get(num, 0) + 1\n    \n    # Calculate sum of repeated elements\n    repeated_sum = sum(num for num, count in count_dict.items() if count > 1)\n    \n    return repeated_sum\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjxhl7hv0.py\", line 13, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    # Type checking\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Pattern matches lowercase letters joined by underscores\n    pattern = r'^[a-z]+(?:_[a-z]+)*$'\n    \n    # Return True if match found, False otherwise\n    return bool(re.match(pattern, text))\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphcby0vy3.py\", line 10, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 44, "completion": "import re\n\ndef text_match_string(text):\n    # Type checking\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Pattern to match a word at the beginning of string\n    # ^\\w+ matches one or more word characters at the start of the string\n    pattern = r'^\\w+'\n    \n    # Search for the pattern\n    result = re.match(pattern, text)\n    \n    # Return True if match found, False otherwise\n    return bool(result)\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmptlg2dhi5.py\", line 16\n    try: text_match_string(123); assert False, 'TypeError not raised' except TypeError: pass\n                                                                      ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 45, "completion": "def get_gcd(numbers):\n    # Check if list is empty\n    if not numbers:\n        raise ValueError('Input list cannot be empty.')\n    \n    def gcd_two_numbers(a, b):\n        # GCD of two numbers using Euclidean algorithm\n        while b:\n            a, b = b, a % b\n        return abs(a)\n    \n    # Start with the first number\n    result = numbers[0]\n    \n    # Calculate GCD for all numbers in the list\n    for i in range(1, len(numbers)):\n        result = gcd_two_numbers(result, numbers[i])\n    \n    return result\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 46, "completion": "def test_distinct(numbers):\n    # Type checking\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if all elements are integers\n    if not all(isinstance(x, int) for x in numbers):\n        raise TypeError(\"All elements must be integers\")\n    \n    # Compare length of list with length of set to determine if all elements are distinct\n    return len(numbers) == len(set(numbers))\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 47, "completion": "def compute_last_digit(a, b):\n    if a > b:\n        raise ValueError('a should not be greater than b')\n    \n    # Initialize result as 1\n    result = 1\n    \n    # Multiply numbers from (a+1) to b\n    # Only keep the last digit at each step\n    for i in range(a + 1, b + 1):\n        result = (result * i) % 10\n        \n    return result\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 48, "completion": "def odd_bit_set_number(number):\n    \"\"\"\n    Sets all odd-positioned bits of a given number.\n    \n    Args:\n        number: An integer input\n        \n    Returns:\n        Integer with all odd-positioned bits set to 1\n        \n    Raises:\n        TypeError: If input is not an integer\n    \"\"\"\n    if not isinstance(number, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    # Create a mask with all odd bits set (1010101010...)\n    # 32 bits is sufficient for most cases\n    mask = 0xAAAAAAAA  # 1010 1010 1010 1010 in binary\n    \n    # Combine the original number with the mask using OR operation\n    return number | mask\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpyj18hscs.py\", line 9, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(matrix, index=0):\n    \"\"\"\n    Extract elements at the specified index from each sublist in a 2D list.\n    \n    Args:\n        matrix (list): A 2D list/matrix\n        index (int): Index of elements to extract (defaults to 0)\n    \n    Returns:\n        list: Elements at specified index from each sublist\n    \n    Raises:\n        IndexError: If specified index is out of range for any sublist\n    \"\"\"\n    result = []\n    for sublist in matrix:\n        if index >= len(sublist):\n            raise IndexError('Index out of range for sublist')\n        result.append(sublist[index])\n    return result\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 50, "completion": "def min_length_list(lists):\n    # Check if input is a list\n    if not isinstance(lists, list):\n        raise ValueError(\"Input must be a list of lists.\")\n    \n    # Check if all elements are lists and input is not empty\n    if not lists or not all(isinstance(item, list) for item in lists):\n        raise ValueError(\"Input must be a list of lists.\")\n    \n    # Use lambda function with min() to find list with minimum length\n    return min(lists, key=lambda x: len(x))\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmgqb1hlt.py\", line 10, in <module>\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nAssertionError", "passed": false}
{"task_id": 51, "completion": "def check_equilateral(side1, side2, side3):\n    # Check if any side is non-positive\n    if side1 <= 0 or side2 <= 0 or side3 <= 0:\n        raise ValueError(\"All sides must be positive numbers\")\n    \n    # Check if all sides are equal\n    if side1 == side2 == side3:\n        return True\n    else:\n        return False\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram given its base and height.\n    \n    Args:\n        base (int/float): The length of the base\n        height (int/float): The height of the parallelogram\n        \n    Returns:\n        float: The area of the parallelogram\n        \n    Raises:\n        TypeError: If inputs are not numbers\n    \"\"\"\n    if not (isinstance(base, (int, float)) and isinstance(height, (int, float))):\n        raise TypeError(\"Base and height must be numerical values\")\n    \n    if base <= 0 or height <= 0:\n        raise ValueError(\"Base and height must be positive numbers\")\n        \n    return base * height\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(text):\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    if len(text) == 0:\n        return False\n        \n    return text[0] == text[-1]\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpugd8ftqw.py\", line 7, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 54, "completion": "def counting_sort(arr):\n    # Type checking\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if list is empty\n    if not arr:\n        return []\n    \n    # Check for non-integer elements\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements must be integers\")\n    \n    # Find the range of input array\n    max_val = max(arr)\n    min_val = min(arr)\n    range_val = max_val - min_val + 1\n    \n    # Create counting array and output array\n    count = [0] * range_val\n    output = [0] * len(arr)\n    \n    # Store count of each element\n    for num in arr:\n        count[num - min_val] += 1\n    \n    # Modify count array to store actual positions\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    \n    # Build the output array\n    for num in reversed(arr):\n        index = count[num - min_val] - 1\n        output[index] = num\n        count[num - min_val] -= 1\n    \n    return output\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 55, "completion": "def tn_gp(a, r, n):\n    \"\"\"\n    Calculate the nth term of a geometric progression.\n    \n    Parameters:\n    a (number): First term of the GP\n    r (number): Common ratio\n    n (int): Term number to find\n    \n    Returns:\n    number: The nth term of the GP\n    \n    Raises:\n    ValueError: If n is less than 1\n    \"\"\"\n    if n < 1:\n        raise ValueError('Term number must be greater than 0')\n    \n    return a * (r ** (n - 1))\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpplq5agyf.py\", line 5, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def check(number):\n    # Check if input is an integer\n    if not isinstance(number, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    # Convert number to string to reverse it\n    num_str = str(abs(number))  # Use abs() to handle negative numbers\n    reversed_num = int(num_str[::-1])  # Convert reversed string back to integer\n    \n    # Check if number is one less than twice its reverse\n    return number == (2 * reversed_num - 1)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 57, "completion": "def find_max_num(digits, num_digits):\n    # Validate input\n    if num_digits > len(digits):\n        raise ValueError('Number of digits exceeds the length of the list.')\n    \n    # Sort digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n    \n    # Take the first num_digits and join them\n    result = ''.join(map(str, sorted_digits[:num_digits]))\n    \n    return int(result)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 58, "completion": "def opposite_signs(num1, num2):\n    # Check if inputs are integers\n    if not (isinstance(num1, int) and isinstance(num2, int)):\n        raise TypeError(\"Both inputs must be integers\")\n    \n    # Check if numbers have opposite signs using multiplication\n    # If product is negative, numbers have opposite signs\n    return (num1 * num2) < 0\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 59, "completion": "def is_octagonal(n):\n    \"\"\"\n    Calculate the nth octagonal number.\n    \n    Args:\n        n (int): The position of the octagonal number to calculate\n        \n    Returns:\n        int: The nth octagonal number\n        \n    Raises:\n        ValueError: If n is not a positive integer\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    return n * (3 * n - 2)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 60, "completion": "def max_len_sub(arr, diff):\n    # Type checking\n    if not isinstance(arr, list):\n        raise TypeError(\"First parameter must be a list\")\n    if not isinstance(diff, int):\n        raise TypeError(\"Second parameter must be an integer\")\n    \n    if not arr:  # Check if array is empty\n        return 0\n        \n    n = len(arr)\n    dp = [1] * n  # Initialize dp array with 1s\n    max_length = 1\n    \n    # For each element, check previous elements\n    for i in range(1, n):\n        for j in range(i):\n            # If current element minus previous element equals the difference\n            # and the sequence can be extended\n            if arr[i] - arr[j] == diff:\n                dp[i] = max(dp[i], dp[j] + 1)\n                max_length = max(max_length, dp[i])\n    \n    return max_length\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpez06bikq.py\", line 21, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nAssertionError", "passed": false}

{"task_id": 11, "completion": "def remove_occ(input_string: str, char: str) -> str:\n    \"\"\"\n    Remove first and last occurrence of a given character from the string.\n    \n    Args:\n        input_string (str): The input string to process\n        char (str): The character to remove (first and last occurrence)\n    \n    Returns:\n        str: String with first and last occurrence of char removed\n    \n    Raises:\n        ValueError: If char is not a single character\n    \"\"\"\n    if len(char) != 1:\n        raise ValueError(\"Character parameter must be a single character\")\n    \n    # If character is not in string, return original string\n    if char not in input_string:\n        return input_string\n    \n    # Find first and last occurrence\n    first_index = input_string.find(char)\n    last_index = input_string.rfind(char)\n    \n    # If only one occurrence, remove it\n    if first_index == last_index:\n        return input_string[:first_index] + input_string[first_index + 1:]\n    \n    # Remove both first and last occurrence\n    return (input_string[:first_index] + \n            input_string[first_index + 1:last_index] + \n            input_string[last_index + 1:])\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpylp5nwog.py\", line 34, in <module>\n    check_code_style(remove_occ)\n  File \"/tmp/tmpylp5nwog.py\", line 30, in check_code_style\n    assert result.total_errors == 0, \"Code does not conform to PEP 8 standards.\"\nAssertionError: Code does not conform to PEP 8 standards.", "passed": false}
{"task_id": 12, "completion": "def sort_matrix(matrix):\n    \"\"\"\n    Sort a matrix in ascending order based on the sum of its rows.\n    \n    Args:\n        matrix (list): A 2D list representing the matrix\n        \n    Returns:\n        list: A new matrix with rows sorted by their sums\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return matrix\n    \n    # Create pairs of (row_sum, row) and sort them\n    sorted_pairs = sorted((sum(row), row) for row in matrix)\n    \n    # Extract only the rows from the sorted pairs\n    return [row for _, row in sorted_pairs]\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 14, "completion": "def find_volume(base: float, height: float, length: float) -> float:\n    \"\"\"\n    Calculate the volume of a triangular prism.\n    \n    Args:\n        base (float): The base length of the triangle\n        height (float): The height of the triangle\n        length (float): The length (depth) of the prism\n    \n    Returns:\n        float: The volume of the triangular prism\n    \"\"\"\n    # Calculate area of triangle (base * height / 2)\n    triangle_area = (base * height) / 2\n    \n    # Calculate volume (triangle area * length)\n    volume = triangle_area * length\n    \n    return volume\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 15, "completion": "def split_lowerstring(text: str) -> list:\n    \"\"\"\n    Split a string at lowercase letters.\n    \n    Args:\n        text (str): The input string to be split\n        \n    Returns:\n        list: A list of substrings split at lowercase letters\n        \n    Example:\n        >>> split_lowerstring(\"CamelCase\")\n        ['C', 'amel', 'C', 'ase']\n    \"\"\"\n    if not text:\n        return []\n    \n    result = []\n    current_segment = text[0]\n    \n    for char in text[1:]:\n        if char.islower():\n            result.append(current_segment)\n            current_segment = char\n        else:\n            current_segment += char\n            \n    result.append(current_segment)\n    return result\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp348m865o.py\", line 14, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Find sequences of lowercase letters joined with underscores.\n    \n    Args:\n        text (str): The input text to search\n        \n    Returns:\n        list: All matching sequences found in the text\n    \"\"\"\n    pattern = r'[a-z]+(?:_[a-z]+)*'\n    matches = re.findall(pattern, text)\n    return matches\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgsez8beh.py\", line 6, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length: float) -> float:\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Args:\n        side_length (float): Length of one side of the square\n\n    Returns:\n        float: Perimeter of the square\n\n    Raises:\n        ValueError: If side_length is less than or equal to 0\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number\")\n    \n    return 4 * side_length\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(main_string: str, chars_to_remove: str) -> str:\n    \"\"\"\n    Remove characters from main_string that are present in chars_to_remove.\n\n    Args:\n        main_string (str): The string to be cleaned\n        chars_to_remove (str): String containing characters to be removed\n\n    Returns:\n        str: Cleaned string with specified characters removed\n    \"\"\"\n    return ''.join(char for char in main_string if char not in chars_to_remove)\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 19, "completion": "def test_duplicate(numbers: list[int]) -> bool:\n    \"\"\"\n    Check if the given list of integers contains any duplicate elements.\n    \n    Args:\n        numbers: List of integers to check for duplicates\n        \n    Returns:\n        bool: True if duplicates exist, False otherwise\n    \"\"\"\n    return len(numbers) != len(set(numbers))\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(number: int) -> bool:\n    \"\"\"\n    Check if a given number is a Woodall number.\n    \n    A Woodall number is of the form n \u00d7 2^n - 1, where n is a positive integer.\n    \n    Args:\n        number (int): The number to check\n        \n    Returns:\n        bool: True if the number is a Woodall number, False otherwise\n    \"\"\"\n    if number < 0:\n        return False\n    \n    n = 1\n    while True:\n        woodall = n * (2 ** n) - 1\n        if woodall == number:\n            return True\n        if woodall > number:\n            return False\n        n += 1\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 21, "completion": "def multiples_of_num(n: int, m: int) -> list[int]:\n    \"\"\"\n    Find m multiples of number n.\n\n    Args:\n        n (int): The number to find multiples of\n        m (int): The number of multiples to find\n\n    Returns:\n        list[int]: List containing m multiples of n\n\n    Raises:\n        ValueError: If n or m is not a positive integer\n    \"\"\"\n    if not isinstance(n, int) or not isinstance(m, int):\n        raise ValueError(\"Both arguments must be integers\")\n    if n <= 0 or m <= 0:\n        raise ValueError(\"Both arguments must be positive integers\")\n\n    return [n * i for i in range(1, m + 1)]\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpe8js3_l3.py\", line 7, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "completion": "def find_first_duplicate(arr: list[int]) -> int:\n    \"\"\"\n    Find the first duplicate element in an array of integers.\n    \n    Args:\n        arr: List of integers to search for duplicates\n        \n    Returns:\n        int: First duplicate element found, or -1 if no duplicates exist\n    \"\"\"\n    seen = set()\n    \n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    \n    return -1\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists: list) -> float:\n    \"\"\"\n    Calculate the maximum sum of elements from a list of lists.\n    \n    Args:\n        list_of_lists (list): A list containing sublists of numbers\n        \n    Returns:\n        float: The maximum sum found among all sublists\n        \n    Raises:\n        ValueError: If the input list is empty\n    \"\"\"\n    if not list_of_lists:\n        raise ValueError(\"Input list cannot be empty\")\n        \n    return max(sum(sublist) for sublist in list_of_lists)\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 24, "completion": "def binary_to_decimal(binary_str: str) -> int:\n    \"\"\"\n    Convert a binary string to its decimal equivalent.\n    \n    Args:\n        binary_str (str): A string containing a binary number (e.g., '1010')\n        \n    Returns:\n        int: The decimal equivalent of the input binary number\n        \n    Raises:\n        ValueError: If the input string contains characters other than 0 and 1\n    \"\"\"\n    if not all(bit in '01' for bit in binary_str):\n        raise ValueError(\"Binary string must contain only 0s and 1s\")\n    \n    decimal = 0\n    for bit in binary_str:\n        decimal = decimal * 2 + int(bit)\n    \n    return decimal\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5ps6_a5w.py\", line 8, in <module>\n    assert binary_to_decimal(100) == 4\n  File \"/tmp/tmp5ps6_a5w.py\", line 2, in binary_to_decimal\n    if not all(bit in '01' for bit in binary_str):\nTypeError: 'int' object is not iterable", "passed": false}
{"task_id": 25, "completion": "def find_product(array):\n    \"\"\"\n    Calculate the product of non-repeated elements in an array.\n    \n    Args:\n        array: List of numbers\n        \n    Returns:\n        int or float: Product of unique elements, or 1 if array is empty\n    \"\"\"\n    if not array:\n        return 1\n    \n    # Convert array to set to get unique elements\n    unique_elements = set(array)\n    \n    # Calculate product of unique elements\n    product = 1\n    for num in unique_elements:\n        product *= num\n    \n    return product\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpicfno160.py\", line 11, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(tuple_list: list, k: int) -> bool:\n    \"\"\"\n    Check if the given tuple list contains all elements from 1 to k.\n    \n    Args:\n        tuple_list (list): List of tuples containing integers\n        k (int): The number of elements to check for\n        \n    Returns:\n        bool: True if all elements from 1 to k are present, False otherwise\n    \"\"\"\n    # Create a set of all numbers from the tuples\n    numbers = set()\n    for tup in tuple_list:\n        numbers.update(tup)\n    \n    # Check if all numbers from 1 to k are present\n    expected_numbers = set(range(1, k + 1))\n    return numbers == expected_numbers\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdbptga9w.py\", line 9, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "completion": "def remove(string_list: list[str]) -> list[str]:\n    \"\"\"\n    Remove all digits from each string in the given list.\n    \n    Args:\n        string_list: A list of strings that may contain digits\n        \n    Returns:\n        A new list with all digits removed from each string\n    \"\"\"\n    return [\n        ''.join(char for char in s if not char.isdigit())\n        for s in string_list\n    ]\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 28, "completion": "def binomial_coeff(n: int, k: int) -> int:\n    \"\"\"\n    Calculate the binomial coefficient C(n, k).\n    \n    Args:\n        n (int): Total number of items\n        k (int): Number of items to choose\n        \n    Returns:\n        int: The binomial coefficient C(n, k)\n        \n    Raises:\n        ValueError: If n < 0, k < 0, or k > n\n    \"\"\"\n    if n < 0 or k < 0:\n        raise ValueError(\"Both n and k must be non-negative\")\n    if k > n:\n        raise ValueError(\"k cannot be greater than n\")\n    \n    # Optimize by using the smaller value of k or n-k\n    k = min(k, n - k)\n    \n    # Base cases\n    if k == 0:\n        return 1\n    if k == 1:\n        return n\n    \n    # Calculate using multiplicative formula\n    result = 1\n    for i in range(k):\n        result *= (n - i)\n        result //= (i + 1)\n    \n    return result\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 29, "completion": "def get_odd_occurrence(sequence):\n    \"\"\"\n    Find elements that appear an odd number of times in the sequence.\n    \n    Args:\n        sequence: An iterable containing elements to check\n        \n    Returns:\n        list: Elements that appear an odd number of times\n    \"\"\"\n    occurrence_count = {}\n    \n    # Count occurrences of each element\n    for element in sequence:\n        occurrence_count[element] = occurrence_count.get(element, 0) + 1\n    \n    # Filter elements with odd occurrences\n    odd_elements = [\n        element \n        for element, count in occurrence_count.items() \n        if count % 2 != 0\n    ]\n    \n    return odd_elements\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpny22wlo7.py\", line 13, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(text: str) -> int:\n    \"\"\"\n    Count all substrings that start and end with the same character.\n    \n    Args:\n        text (str): Input string to process\n        \n    Returns:\n        int: Number of substrings with same starting and ending characters\n    \n    Example:\n        >>> count_substring_with_equal_ends(\"abcab\")\n        7  # Substrings: 'a', 'b', 'c', 'a', 'b', 'aba', 'bcab'\n    \"\"\"\n    if not text:\n        return 0\n        \n    count = 0\n    n = len(text)\n    \n    # Iterate through all possible starting positions\n    for i in range(n):\n        # Iterate through all possible ending positions\n        for j in range(i, n):\n            # If characters at start and end match, increment count\n            if text[i] == text[j]:\n                count += 1\n                \n    return count\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 31, "completion": "from collections import Counter\nfrom heapq import heappush, heappop\nfrom typing import List\n\ndef func(nums: List[int], k: int) -> List[int]:\n    \"\"\"\n    Find the top k most frequent integers in the given list.\n    \n    Args:\n        nums: List of integers\n        k: Number of top frequent elements to return\n    \n    Returns:\n        List of k most frequent integers\n    \"\"\"\n    # Count frequency of each number\n    counter = Counter(nums)\n    \n    # Create min heap to maintain top k elements\n    heap = []\n    \n    # Process each number and its frequency\n    for num, freq in counter.items():\n        # Push negative frequency to simulate max heap\n        heappush(heap, (freq, num))\n        # Keep heap size as k\n        if len(heap) > k:\n            heappop(heap)\n    \n    # Extract k most frequent elements\n    result = []\n    while heap:\n        freq, num = heappop(heap)\n        result.append(num)\n    \n    # Return result in descending order of frequency\n    return result[::-1]\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdmto3xcu.py\", line 23, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n  File \"/tmp/tmpdmto3xcu.py\", line 6, in func\n    counter = Counter(nums)\n  File \"/home/liminxiao/miniconda3/envs/DevEval/lib/python3.9/collections/__init__.py\", line 593, in __init__\n    self.update(iterable, **kwds)\n  File \"/home/liminxiao/miniconda3/envs/DevEval/lib/python3.9/collections/__init__.py\", line 679, in update\n    _count_elements(self, iterable)\nTypeError: unhashable type: 'list'", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n: int) -> int:\n    \"\"\"\n    Find the largest prime factor of a given number.\n    \n    Args:\n        n: A positive integer greater than 1\n        \n    Returns:\n        The largest prime factor of n\n        \n    Raises:\n        ValueError: If n is less than 2\n    \"\"\"\n    if n < 2:\n        raise ValueError(\"Input must be greater than 1\")\n    \n    largest_factor = 1\n    \n    # Handle all the 2s first\n    while n % 2 == 0:\n        largest_factor = 2\n        n = n // 2\n    \n    # Check odd numbers up to sqrt(n)\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            largest_factor = i\n            n = n // i\n    \n    # If n is still greater than 2, it's prime itself\n    if n > 2:\n        largest_factor = n\n    \n    return largest_factor\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(decimal_num: int) -> str:\n    \"\"\"\n    Convert a decimal number to its binary representation.\n    \n    Args:\n        decimal_num: An integer in decimal format\n        \n    Returns:\n        str: Binary representation of the input number\n        \n    Raises:\n        ValueError: If the input is negative\n    \"\"\"\n    if decimal_num < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    if decimal_num == 0:\n        return \"0\"\n    \n    binary = \"\"\n    num = decimal_num\n    \n    while num > 0:\n        binary = str(num % 2) + binary\n        num //= 2\n    \n    return binary\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpx913ajau.py\", line 12, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "completion": "def find_missing(arr: list[int]) -> int:\n    \"\"\"\n    Find the missing number in a sorted array of consecutive integers.\n    \n    Args:\n        arr: A sorted list of integers with one missing number\n        \n    Returns:\n        int: The missing number in the sequence\n        \n    Example:\n        >>> find_missing([1, 2, 4, 5, 6])\n        3\n    \"\"\"\n    n = len(arr)\n    # If array is empty or has only one element, return None\n    if n < 2:\n        return None\n    \n    # Iterate through the array to find the gap\n    for i in range(n - 1):\n        if arr[i + 1] - arr[i] > 1:\n            return arr[i] + 1\n            \n    # If no gap is found, return None\n    return None\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpezhbkd_m.py\", line 12, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n: int) -> int:\n    \"\"\"\n    Calculate the n-th rectangular number.\n    \n    Args:\n        n (int): The position of the rectangular number to find (must be positive)\n    \n    Returns:\n        int: The n-th rectangular number\n        \n    Raises:\n        ValueError: If n is less than or equal to 0\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    return n * (n + 1)\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 36, "completion": "def find_nth_digit(numerator: int, denominator: int, n: int) -> int:\n    \"\"\"\n    Find the nth digit after the decimal point in the proper fraction numerator/denominator.\n    \n    Args:\n        numerator (int): The numerator of the fraction\n        denominator (int): The denominator of the fraction\n        n (int): Position of the digit to find (1-based indexing)\n    \n    Returns:\n        int: The nth digit after the decimal point\n        \n    Raises:\n        ValueError: If denominator is 0 or n is less than 1\n        ValueError: If numerator is greater than or equal to denominator\n    \"\"\"\n    if denominator == 0:\n        raise ValueError(\"Denominator cannot be zero\")\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    if numerator >= denominator:\n        raise ValueError(\"Numerator must be less than denominator for proper fraction\")\n    \n    # Perform long division\n    result = numerator * 10\n    for _ in range(n):\n        digit = result // denominator\n        result = (result % denominator) * 10\n    \n    return digit\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1434q_uf.py\", line 31, in <module>\n    check_code_style(find_nth_digit)\n  File \"/tmp/tmp1434q_uf.py\", line 27, in check_code_style\n    assert result.total_errors == 0, \"Code does not conform to PEP 8 standards.\"\nAssertionError: Code does not conform to PEP 8 standards.", "passed": false}
{"task_id": 37, "completion": "def sort_mixed_list(mixed_list: list) -> list:\n    \"\"\"\n    Sort a mixed list of integers and strings.\n    \n    Args:\n        mixed_list: List containing integers and strings\n        \n    Returns:\n        List with integers and strings sorted separately\n    \"\"\"\n    # Separate integers and strings\n    numbers = [x for x in mixed_list if isinstance(x, int)]\n    strings = [x for x in mixed_list if isinstance(x, str)]\n    \n    # Sort both lists\n    numbers.sort()\n    strings.sort()\n    \n    # Return combined sorted list\n    return numbers + strings\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 38, "completion": "def div_even_odd(numbers: list) -> float:\n    \"\"\"\n    Divides the first even number by the first odd number in a given list.\n    \n    Args:\n        numbers (list): List of integers\n        \n    Returns:\n        float: Result of dividing first even by first odd number\n        \n    Raises:\n        ValueError: If no even or odd number is found\n        ZeroDivisionError: If first odd number is zero\n    \"\"\"\n    # Find first even number\n    first_even = None\n    for num in numbers:\n        if num % 2 == 0:\n            first_even = num\n            break\n    \n    # Find first odd number\n    first_odd = None\n    for num in numbers:\n        if num % 2 != 0:\n            first_odd = num\n            break\n    \n    # Check if both numbers were found\n    if first_even is None:\n        raise ValueError(\"No even number found in the list\")\n    if first_odd is None:\n        raise ValueError(\"No odd number found in the list\")\n    if first_odd == 0:\n        raise ZeroDivisionError(\"Cannot divide by zero\")\n    \n    return first_even / first_odd\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 39, "completion": "from collections import Counter\nfrom heapq import heappush, heappop\n\n\ndef rearrange_string(s: str) -> str:\n    \"\"\"\n    Rearrange string characters so that no adjacent characters are the same.\n    \n    Args:\n        s: Input string to be rearranged\n        \n    Returns:\n        Rearranged string if possible, empty string if impossible\n    \"\"\"\n    # Count frequency of each character\n    char_count = Counter(s)\n    \n    # Create max heap (using negative counts since heapq is min heap)\n    max_heap = []\n    for char, count in char_count.items():\n        heappush(max_heap, (-count, char))\n    \n    result = []\n    prev_char = None\n    prev_count = 0\n    \n    while max_heap:\n        # Get most frequent remaining character\n        count, char = heappop(max_heap)\n        result.append(char)\n        \n        # Add previously used character back to heap if it has remaining count\n        if prev_char and prev_count < 0:\n            heappush(max_heap, (prev_count, prev_char))\n            \n        # Update previous character info\n        prev_char = char\n        prev_count = count + 1  # Increment because we used negative counts\n    \n    # Check if resulting string length matches input\n    return ''.join(result) if len(result) == len(s) else ''\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpx9dbgyb9.py\", line 25, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "completion": "from collections import Counter\nfrom typing import List\n\n\ndef freq_element(nested_list: List[List]) -> dict:\n    \"\"\"\n    Find the frequency of elements in a list of lists.\n    \n    Args:\n        nested_list: A list containing other lists as elements\n        \n    Returns:\n        dict: A dictionary with elements as keys and their frequencies as values\n        \n    Example:\n        >>> freq_element([[1, 2], [2, 3], [1, 3]])\n        Counter({1: 2, 2: 2, 3: 2})\n    \"\"\"\n    # Flatten the list of lists and count elements\n    flattened = [item for sublist in nested_list for item in sublist]\n    return Counter(flattened)\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 41, "completion": "def filter_even_numbers(numbers):\n    \"\"\"\n    Filter even numbers from a given sequence using lambda function.\n    \n    Args:\n        numbers: An iterable containing numbers\n        \n    Returns:\n        list: A list containing only even numbers\n    \"\"\"\n    return list(filter(lambda x: x % 2 == 0, numbers))\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpyxyereef.py\", line 3, in <module>\n    assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\nNameError: name 'filter_evennumbers' is not defined", "passed": false}
{"task_id": 42, "completion": "def find_sum(arr: list) -> int:\n    \"\"\"\n    Find the sum of all elements that appear more than once in the array.\n    \n    Args:\n        arr (list): Input array of numbers\n        \n    Returns:\n        int: Sum of all repeated elements\n    \"\"\"\n    # Create a dictionary to store element frequencies\n    frequency = {}\n    \n    # Count occurrences of each element\n    for num in arr:\n        frequency[num] = frequency.get(num, 0) + 1\n    \n    # Calculate sum of elements that appear more than once\n    repeated_sum = sum(num for num, count in frequency.items() if count > 1)\n    \n    return repeated_sum\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0_zlbhm5.py\", line 10, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text: str) -> bool:\n    \"\"\"\n    Check if the text contains sequences of lowercase letters joined with an underscore.\n    \n    Args:\n        text: String to check for pattern matching\n        \n    Returns:\n        bool: True if pattern is found, False otherwise\n    \"\"\"\n    pattern = r'^[a-z]+_[a-z]+$'\n    return bool(re.match(pattern, text))\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpnikat0x5.py\", line 5, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 44, "completion": "import re\n\ndef text_match_string(text: str, pattern: str) -> bool:\n    \"\"\"\n    Check if the pattern matches at the beginning of the text string.\n    \n    Args:\n        text (str): The input string to check\n        pattern (str): The word pattern to match at the beginning\n        \n    Returns:\n        bool: True if pattern matches at the beginning, False otherwise\n    \"\"\"\n    pattern = r'^\\b' + re.escape(pattern)\n    return bool(re.match(pattern, text))\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4_0woahw.py\", line 5, in <module>\n    assert text_match_string(\" python\")==('Not matched!')\nTypeError: text_match_string() missing 1 required positional argument: 'pattern'", "passed": false}
{"task_id": 45, "completion": "from typing import List\nfrom math import gcd\nfrom functools import reduce\n\n\ndef get_gcd(numbers: List[int]) -> int:\n    \"\"\"\n    Calculate the Greatest Common Divisor (GCD) of all numbers in the given array.\n    \n    Args:\n        numbers: List of integers to find GCD for\n        \n    Returns:\n        int: The GCD of all numbers in the array\n        \n    Raises:\n        ValueError: If the input list is empty\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"Input array cannot be empty\")\n    \n    return reduce(gcd, numbers)\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 46, "completion": "def test_distinct(numbers):\n    \"\"\"\n    Check if all numbers in the given sequence are distinct.\n    \n    Args:\n        numbers: An iterable containing numbers\n        \n    Returns:\n        bool: True if all numbers are distinct, False otherwise\n    \"\"\"\n    # Convert to set to remove duplicates and compare lengths\n    return len(set(numbers)) == len(numbers)\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 48, "completion": "def odd_bit_set_number(number: int) -> int:\n    \"\"\"\n    Sets all odd-positioned bits of a given number to 1.\n    Bit positions are counted from right to left, starting from 1.\n    \n    Args:\n        number: Input integer number\n        \n    Returns:\n        Integer with all odd-positioned bits set to 1\n    \"\"\"\n    # Create a mask with all odd bits set to 1\n    # 0xAAAAAAAA is a hexadecimal number where all odd bits are 1\n    odd_bits_mask = 0xAAAAAAAA\n    \n    # Set all odd bits to 1 using OR operation\n    result = number | odd_bits_mask\n    \n    return result\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpnhydp8ln.py\", line 8, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(matrix: list, index: int = 0) -> list:\n    \"\"\"\n    Extract elements at the specified index from each sublist in a 2D list.\n    \n    Args:\n        matrix (list): A two-dimensional list (list of lists)\n        index (int, optional): Index of elements to extract. Defaults to 0.\n    \n    Returns:\n        list: A list containing elements at the specified index from each sublist\n    \n    Raises:\n        IndexError: If the specified index is out of range for any sublist\n    \"\"\"\n    return [sublist[index] for sublist in matrix]\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 51, "completion": "def check_equilateral(side1: float, side2: float, side3: float) -> bool:\n    \"\"\"\n    Check if a triangle is equilateral by comparing all three sides.\n    \n    Args:\n        side1 (float): Length of first side\n        side2 (float): Length of second side\n        side3 (float): Length of third side\n    \n    Returns:\n        bool: True if the triangle is equilateral, False otherwise\n    \"\"\"\n    if side1 <= 0 or side2 <= 0 or side3 <= 0:\n        return False\n    \n    return side1 == side2 == side3\n\n# Example usage\ndef main():\n    # Test cases\n    print(check_equilateral(5, 5, 5))      # True\n    print(check_equilateral(5, 4, 5))      # False\n    print(check_equilateral(0, 0, 0))      # False\n    print(check_equilateral(-1, -1, -1))   # False\n\nif __name__ == \"__main__\":\n    main()\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 52, "completion": "def parallelogram_area(base: float, height: float) -> float:\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Args:\n        base (float): The length of the base of the parallelogram\n        height (float): The perpendicular height of the parallelogram\n\n    Returns:\n        float: The area of the parallelogram\n\n    Raises:\n        ValueError: If base or height is less than or equal to 0\n    \"\"\"\n    if base <= 0 or height <= 0:\n        raise ValueError(\"Base and height must be positive numbers\")\n    \n    return base * height\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(text: str) -> bool:\n    \"\"\"\n    Check if the first and last characters of a string are equal.\n\n    Args:\n        text (str): The input string to check\n\n    Returns:\n        bool: True if first and last characters are equal, False otherwise\n    \"\"\"\n    if not text:\n        return False\n    \n    return text[0].lower() == text[-1].lower()\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpes658elt.py\", line 5, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 54, "completion": "def counting_sort(arr):\n    \"\"\"\n    Sort an array using the counting sort algorithm.\n    \n    Args:\n        arr: List of non-negative integers to be sorted\n        \n    Returns:\n        List: Sorted array\n    \"\"\"\n    if not arr:\n        return arr\n    \n    # Find the range of input array\n    max_val = max(arr)\n    min_val = min(arr)\n    range_of_elements = max_val - min_val + 1\n    \n    # Create a counting array to store count of each unique object\n    count = [0] * range_of_elements\n    \n    # Store count of each object\n    for num in arr:\n        count[num - min_val] += 1\n    \n    # Modify count array such that each element at each index\n    # stores actual position of each object in output array\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    \n    # Create an output array\n    output = [0] * len(arr)\n    \n    # Build the output array\n    for i in range(len(arr) - 1, -1, -1):\n        output[count[arr[i] - min_val] - 1] = arr[i]\n        count[arr[i] - min_val] -= 1\n    \n    # Copy the output array to arr\n    for i in range(len(arr)):\n        arr[i] = output[i]\n    \n    return arr\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 55, "completion": "def tn_gp(a1: float, r: float, n: int) -> float:\n    \"\"\"\n    Calculate the nth term of a geometric progression.\n\n    Args:\n        a1 (float): First term of the geometric progression\n        r (float): Common ratio\n        n (int): Position of the term to find\n\n    Returns:\n        float: The nth term of the geometric progression\n\n    Raises:\n        ValueError: If n is less than 1\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Position n must be a positive integer\")\n    \n    return a1 * (r ** (n - 1))\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5hqmgaok.py\", line 5, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def check(number: int) -> bool:\n    \"\"\"\n    Check if a number is one less than twice its reverse.\n    \n    Args:\n        number (int): The number to check\n        \n    Returns:\n        bool: True if the number is one less than twice its reverse, False otherwise\n    \"\"\"\n    # Convert number to string to reverse it\n    num_str = str(number)\n    # Reverse the string and convert back to integer\n    reversed_num = int(num_str[::-1])\n    \n    # Check if number is one less than twice its reverse\n    return number == (2 * reversed_num - 1)\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 57, "completion": "def find_max_num(digits):\n    \"\"\"\n    Find the largest number that can be formed using the given digits.\n    \n    Args:\n        digits (str or int): Input number or string of digits\n        \n    Returns:\n        int: Largest possible number that can be formed\n    \"\"\"\n    # Convert input to string if it's an integer\n    digits_str = str(digits)\n    \n    # Convert to list of digits and sort in descending order\n    digit_list = sorted(digits_str, reverse=True)\n    \n    # Join the digits and convert back to integer\n    max_num = int(''.join(digit_list))\n    \n    return max_num\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjvl9mi45.py\", line 9, in <module>\n    assert find_max_num([1,2,3],3) == 321\nTypeError: find_max_num() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 58, "completion": "def opposite_signs(num1: int, num2: int) -> bool:\n    \"\"\"\n    Check if two integers have opposite signs.\n    \n    Args:\n        num1 (int): First integer\n        num2 (int): Second integer\n        \n    Returns:\n        bool: True if numbers have opposite signs, False otherwise\n    \"\"\"\n    return (num1 * num2) < 0\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 59, "completion": "def is_octagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth octagonal number.\n    \n    Args:\n        n (int): The position of the octagonal number to calculate (must be positive)\n    \n    Returns:\n        int: The nth octagonal number\n        \n    Raises:\n        ValueError: If n is less than or equal to 0\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    return n * (3 * n - 2)\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 60, "completion": "def max_len_sub(arr):\n    \"\"\"\n    Find the maximum length of subsequence with different adjacent elements.\n    \n    Args:\n        arr (list): Input array of integers\n        \n    Returns:\n        int: Length of the longest subsequence\n    \"\"\"\n    if not arr:\n        return 0\n    \n    n = len(arr)\n    if n <= 1:\n        return n\n    \n    # Initialize dp array with 1 as each element itself is a subsequence\n    dp = [1] * n\n    max_length = 1\n    \n    # For each position, check previous elements\n    for i in range(1, n):\n        for j in range(i):\n            # If current element is different from previous element\n            if arr[i] != arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n        max_length = max(max_length, dp[i])\n    \n    return max_length\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpc11tpxwm.py\", line 18, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}

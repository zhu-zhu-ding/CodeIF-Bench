{"task_id": 11, "completion": "def remove_occ(s, char):\n    first = s.find(char)\n    last = s.rfind(char)\n    if first != -1 and last != -1:\n        s = s[:first] + s[first+1:last] + s[last+1:]\n    return s\n\n# Example usage:\nresult = remove_occ(\"hello world\", \"l\")\nprint(result)  # Output: \"heo world\"\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 14, "completion": "def find_volume(base_area, triangle_height, prism_length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base_area (float): The area of the base of the triangle.\n    triangle_height (float): The height of the triangle.\n    prism_length (float): The length of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    return 0.5 * base_area * triangle_height * prism_length\n\n# Example usage:\nbase_area = 10\ntriangle_height = 5\nprism_length = 20\nvolume = find_volume(base_area, triangle_height, prism_length)\nprint(f\"The volume of the triangular prism is: {volume} cubic units\")\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 15, "completion": "import re\n\ndef split_lowerstring(input_string):\n    return re.split(r'(?=[a-z])', input_string)\n\n# Example usage:\ninput_string = \"HelloWorld\"\nresult = split_lowerstring(input_string)\nprint(result)  # Output: ['H', 'ello', 'W', 'orld']\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpukh0vmwi.py\", line 8, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    return re.findall(r'\\b[a-z]+(?:_[a-z]+)+\\b', text)\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8jqo3g7r.py\", line 4, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square given the length of one side.\n\n    Parameters:\n    side_length (float): The length of one side of the square.\n\n    Returns:\n    float: The perimeter of the square.\n    \"\"\"\n    return 4 * side_length", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(num):\n    n = 1\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number == num:\n            return True\n        elif woodall_number > num:\n            return False\n        n += 1\n\n# Example usage:\nprint(is_woodall(7))  # True, since 7 = 2 * 2^2 - 1\nprint(is_woodall(15)) # True, since 15 = 3 * 2^3 - 1\nprint(is_woodall(10)) # False\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6k33atw3.py\", line 19, in <module>\n    assert cc_visit(inspect.getsource(is_woodall))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 21, "completion": "def multiples_of_num(m, n):\n    return [n * i for i in range(1, m + 1)]\n\n# Example usage:\nprint(multiples_of_num(5, 3))  # Output: [3, 6, 9, 12, 15]", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphw8h8a3t.py\", line 10, in <module>\n    assert cc_visit(inspect.getsource(multiples_of_num))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 24, "completion": "def binary_to_decimal(binary):\n    return int(binary, 2)\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpysyp7ewe.py\", line 3, in <module>\n    assert binary_to_decimal(100) == 4\n  File \"/tmp/tmpysyp7ewe.py\", line 2, in binary_to_decimal\n    return int(binary, 2)\nTypeError: int() can't convert non-string with explicit base", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    # Initialize the maximum prime factor\n    max_prime = -1\n    \n    # Check for number of 2s that divide n\n    while n % 2 == 0:\n        max_prime = 2\n        n >>= 1  # equivalent to n //= 2\n    \n    # n must be odd at this point, thus skip even numbers and iterate only for odd integers\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n // i\n    \n    # This condition is to check if n is a prime number greater than 2\n    if n > 2:\n        max_prime = n\n    \n    return max_prime\n\n# Example usage\nnumber = 315\nprint(f\"The largest prime factor of {number} is {max_prime_factors(number)}\")\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(decimal_number):\n    return bin(decimal_number)[2:]\n\n# Example usage:\ndecimal_number = 10\nbinary_number = decimal_to_binary(decimal_number)\nprint(f\"The binary representation of {decimal_number} is {binary_number}\")\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplim6o1_x.py\", line 7, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    return n * (n + 1)\n\n# Example usage:\nn = 5\nresult = find_rect_num(n)\nprint(f\"The {n}-th rectangular number is: {result}\")\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator, n):\n    if denominator == 0:\n        return \"Error: Division by zero\"\n    if n <= 0:\n        return \"Error: n must be a positive integer\"\n    \n    # Get the integer part and the initial remainder\n    integer_part = numerator // denominator\n    remainder = numerator % denominator\n    \n    # Skip the integer part digits\n    result = []\n    for _ in range(n):\n        remainder *= 10\n        digit = remainder // denominator\n        result.append(digit)\n        remainder %= denominator\n    \n    return result[n-1]\n\n# Example usage:\nprint(find_nth_digit(1, 3, 5))  # Output: 3 (since 1/3 = 0.33333...)\nprint(find_nth_digit(22, 7, 10))  # Output: 2 (since 22/7 = 3.142857142857...)\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 38, "completion": "def div_even_odd(numbers):\n    even = odd = None\n    for num in numbers:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 != 0 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            return even / odd\n    return None\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppn8v27in.py\", line 16, in <module>\n    assert cc_visit(inspect.getsource(div_even_odd))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 40, "completion": "from collections import Counter\nfrom itertools import chain\n\ndef freq_element(list_of_lists):\n    # Flatten the list of lists using chain.from_iterable\n    flattened_list = list(chain.from_iterable(list_of_lists))\n    # Use Counter to count the frequency of each element\n    frequency = Counter(flattened_list)\n    return frequency\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [2, 3, 4], [4, 5, 6]]\nresult = freq_element(list_of_lists)\nprint(result)  # Output: Counter({2: 2, 3: 2, 4: 2, 1: 1, 5: 1, 6: 1})\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 42, "completion": "def find_sum(arr):\n    # Dictionary to store the count of each element\n    element_count = {}\n    # Variable to store the sum of repeated elements\n    sum_repeated = 0\n    # Set to keep track of elements that have been added to the sum\n    added_elements = set()\n\n    # Count the occurrences of each element in the array\n    for num in arr:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n\n    # Calculate the sum of repeated elements\n    for num, count in element_count.items():\n        if count > 1 and num not in added_elements:\n            sum_repeated += num * count\n            added_elements.add(num)\n\n    return sum_repeated\n\n# Example usage:\narr = [1, 2, 3, 2, 4, 3, 5, 3]\nresult = find_sum(arr)\nprint(\"Sum of repeated elements:\", result)  # Output: 11 (2*2 + 3*3)\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpb5fxfchs.py\", line 24, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    return re.findall(pattern, text)\n\n# Example usage:\ntext = \"Here is an_example of the kind of_string we are looking for.\"\nmatches = text_match(text)\nprint(matches)  # Output: ['an_example', 'kind_of_string']\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4iasuais.py\", line 9, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 45, "completion": "import math\nfrom functools import reduce\n\ndef get_gcd(arr):\n    return reduce(math.gcd, arr)\n\n# Example usage:\narr = [24, 36, 48]\nprint(\"GCD of the array:\", get_gcd(arr))  # Output: 12\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 47, "completion": "def compute_last_digit(a, b):\n    if a > b:\n        return 0  # Since b! / a! would be 0 if a > b\n    result = 1\n    for i in range(a + 1, b + 1):\n        result *= i\n        result %= 10  # Keep only the last digit to prevent overflow\n    return result\n\n# Example usage:\nprint(compute_last_digit(3, 5))  # Output: 2 (since 5! / 3! = 20 and last digit is 0)\nprint(compute_last_digit(4, 10)) # Output: 2 (since 10! / 4! = 151200 and last digit is 0)\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 51, "completion": "def check_equilateral(side1, side2, side3):\n    if side1 == side2 == side3:\n        print(\"The triangle is equilateral.\")\n    else:\n        print(\"The triangle is not equilateral.\")\n\n# Example usage:\ncheck_equilateral(5, 5, 5)  # Output: The triangle is equilateral.\ncheck_equilateral(3, 4, 5)  # Output: The triangle is not equilateral.", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpghdxauir.py\", line 9, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram given its base and height.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram.\n    \"\"\"\n    return base * height\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(input_string):\n    if len(input_string) < 1:\n        return False\n    return input_string[0] == input_string[-1]\n\n# Example usage:\nprint(check_equality(\"hello\"))  # Output: False\nprint(check_equality(\"radar\"))  # Output: True\nprint(check_equality(\"a\"))      # Output: True\nprint(check_equality(\"\"))       # Output: False\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpt9pjiiwg.py\", line 10, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def check(number):\n    reverse_number = int(str(number)[::-1])\n    return number == 2 * reverse_number - 1\n\n# Example usage:\nprint(check(17))  # Output: True\nprint(check(20))  # Output: False\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 58, "completion": "def opposite_signs(x, y):\n    return (x ^ y) < 0\n\n# Example usage:\nprint(opposite_signs(10, -20))  # Output: True\nprint(opposite_signs(-5, -10))  # Output: False\nprint(opposite_signs(15, 30))   # Output: False\n", "requirement": "Code Complexity", "result": "passed", "passed": true}

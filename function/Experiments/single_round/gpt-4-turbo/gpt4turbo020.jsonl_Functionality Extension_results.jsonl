{"task_id": 11, "completion": "def remove_occ(s, char, all=False):\n    if all:\n        # Remove all occurrences of the character\n        return s.replace(char, \"\")\n    else:\n        # Remove first occurrence of the character\n        first_removed = s.replace(char, \"\", 1)\n        # Reverse the string to remove the last occurrence\n        reversed_string = first_removed[::-1]\n        last_removed = reversed_string.replace(char, \"\", 1)\n        # Reverse again to restore original order\n        return last_removed[::-1]\n\n# Example usage:\ns = \"hello world\"\nchar = \"l\"\nprint(remove_occ(s, char))  # Output: \"heo world\"\nprint(remove_occ(s, char, all=True))  # Output: \"heo word\"\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 12, "completion": "def sort_matrix(matrix):\n    # Calculate the sum of each row, treating missing values as zeros\n    row_sums = [sum(row) for row in matrix]\n    \n    # Create a list of tuples where each tuple contains the row and its sum\n    row_sum_pairs = list(zip(matrix, row_sums))\n    \n    # Sort the list of tuples based on the sum\n    sorted_row_sum_pairs = sorted(row_sum_pairs, key=lambda x: x[1])\n    \n    # Extract the sorted rows from the tuples\n    sorted_matrix = [row for row, _ in sorted_row_sum_pairs]\n    \n    return sorted_matrix\n\n# Example usage:\nmatrix = [\n    [1, 2, 3],\n    [4, 5],\n    [6],\n    [7, 8, 9, 10]\n]\n\nsorted_matrix = sort_matrix(matrix)\nfor row in sorted_matrix:\n    print(row)\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0cu93gor.py\", line 21, in <module>\n    assert sort_matrix([[1, 2, 3], [4, 5], [6]]) == [[6], [4, 5], [1, 2, 3]]\nAssertionError", "passed": false}
{"task_id": 13, "completion": "from collections import Counter\n\ndef count_common(words_dict, top_n=None):\n    # Flatten the dictionary values into a list of words\n    words = [word for sublist in words_dict.values() for word in sublist]\n    \n    # Use Counter to count the frequency of each word\n    word_counts = Counter(words)\n    \n    # Return the most common words based on the top_n parameter\n    if top_n:\n        return word_counts.most_common(top_n)\n    else:\n        return word_counts.most_common()\n\n# Example usage:\nwords_dict = {\n    'category1': ['apple', 'banana', 'apple', 'orange'],\n    'category2': ['banana', 'apple', 'apple', 'kiwi'],\n    'category3': ['orange', 'kiwi', 'banana', 'apple']\n}\n\n# Get the 3 most common words\nprint(count_common(words_dict, top_n=3))\n\n# Get all words sorted by frequency\nprint(count_common(words_dict))\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpoau51918.py\", line 22, in <module>\n    assert count_common(['apple', 'banana', 'apple', 'orange', 'banana', 'banana'], 2) == [('banana', 3), ('apple', 2)]\n  File \"/tmp/tmpoau51918.py\", line 4, in count_common\n    words = [word for sublist in words_dict.values() for word in sublist]\nAttributeError: 'list' object has no attribute 'values'", "passed": false}
{"task_id": 14, "completion": "def find_volume(dimensions):\n    if isinstance(dimensions, (list, tuple)) and len(dimensions) == 3:\n        base_area, height, length = dimensions\n        try:\n            base_area = float(base_area)\n            height = float(height)\n            length = float(length)\n            if base_area <= 0 or height <= 0 or length <= 0:\n                return \"All dimensions must be positive numbers.\"\n            volume = base_area * height * length\n            return volume\n        except ValueError:\n            return \"All dimensions must be numbers.\"\n    else:\n        return \"Input must be a list or tuple of three elements.\"\n\n# Example usage:\nprint(find_volume([5, 4, 10]))  # Output: 200.0\nprint(find_volume((3, 2, 6)))   # Output: 36.0\nprint(find_volume([5, -1, 10])) # Output: All dimensions must be positive numbers.\nprint(find_volume([5, 'a', 10])) # Output: All dimensions must be numbers.\nprint(find_volume([5, 4]))      # Output: Input must be a list or tuple of three elements.\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpc_txqugs.py\", line 22, in <module>\n    assert find_volume([10, 8, 6]) == 240\nAssertionError", "passed": false}
{"task_id": 15, "completion": "import re\n\ndef split_lowerstring(input_string, include_lower=False):\n    # Split the string at lowercase letters\n    segments = re.split(r'([A-Z]+)', input_string)\n    \n    # Filter out empty strings from the list\n    segments = [segment for segment in segments if segment]\n    \n    if include_lower:\n        # Include the uppercase letters at the start of each segment\n        result = []\n        for i in range(0, len(segments), 2):\n            if i+1 < len(segments):\n                result.append(segments[i] + segments[i+1])\n            else:\n                result.append(segments[i])\n        return result\n    else:\n        # Return only the segments starting with uppercase letters\n        return [segment for segment in segments if segment[0].isupper()]\n\n# Example usage:\ninput_string = \"HelloWorldPythonProgramming\"\nprint(split_lowerstring(input_string, include_lower=True))  # Output: ['HelloWorld', 'PythonProgramming']\nprint(split_lowerstring(input_string, include_lower=False))  # Output: ['Hello', 'World', 'Python', 'Programming']\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    # Regular expression pattern to find sequences of lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]+(?:_[a-z]+)+\\b'\n    \n    # Search for the pattern in the input text\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'No match found.'\n\n# Example usage\nprint(text_lowercase_underscore(\"hello_world\"))  # Output: Found a match!\nprint(text_lowercase_underscore(\"Hello_World\"))  # Output: No match found.\nprint(text_lowercase_underscore(\"hello_world_this_is_a_test\"))  # Output: Found a match!\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    # Round the side length to the nearest integer\n    rounded_side_length = round(side_length)\n    \n    # Calculate the perimeter of the square\n    perimeter = 4 * rounded_side_length\n    \n    return perimeter\n\n# Example usage:\nprint(square_perimeter(5))        # Output: 20\nprint(square_perimeter(5.2))      # Output: 20\nprint(square_perimeter(5.7))      # Output: 24\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpt1vqpcwa.py\", line 11, in <module>\n    assert square_perimeter(4.5) == 20\nAssertionError", "passed": false}
{"task_id": 18, "completion": "def remove_dirty_chars(s1, s2):\n    # Convert both strings to lowercase to handle case-insensitivity\n    s1_lower = s1.lower()\n    s2_lower = s2.lower()\n    \n    # Create a set of characters to remove from s1\n    remove_set = set(s2_lower)\n    \n    # Use a list comprehension to filter out characters present in remove_set\n    filtered_chars = [char for char in s1_lower if char not in remove_set]\n    \n    # Join the filtered characters to form the resulting string\n    result = ''.join(filtered_chars)\n    \n    return result\n\n# Example usage:\ns1 = \"Hello World\"\ns2 = \"old\"\nresult = remove_dirty_chars(s1, s2)\nprint(result)  # Output: \"He Wr\"\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7deju7ir.py\", line 17, in <module>\n    assert remove_dirty_chars('HelloWorld', 'hELLO') == 'World', 'Function should handle case-insensitive character removal.'\nAssertionError: Function should handle case-insensitive character removal.", "passed": false}
{"task_id": 19, "completion": "def test_duplicate(arr):\n    # Create an empty dictionary to store the count of each element\n    element_count = {}\n    # Create an empty list to store the duplicate elements\n    duplicates = []\n    \n    # Iterate through each element in the array\n    for element in arr:\n        # If the element is already in the dictionary, increment its count\n        if element in element_count:\n            element_count[element] += 1\n        else:\n            # Otherwise, add the element to the dictionary with a count of 1\n            element_count[element] = 1\n    \n    # Iterate through the dictionary to find elements with a count greater than 1\n    for element, count in element_count.items():\n        if count > 1:\n            # Add the duplicate elements to the duplicates list\n            duplicates.append(element)\n    \n    # Return the list of duplicates\n    return duplicates\n\n# Example usage:\narr = [1, 2, 3, 4, 5, 2, 6, 7, 8, 9, 3]\nprint(test_duplicate(arr))  # Output: [2, 3]\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(n):\n    if not isinstance(n, int) or n <= 0:\n        return False, []\n    \n    woodall_numbers = []\n    i = 1\n    while True:\n        woodall_number = i * (2 ** i) - 1\n        if woodall_number > n:\n            break\n        woodall_numbers.append(woodall_number)\n        i += 1\n    \n    return n in woodall_numbers, woodall_numbers\n\n# Example usage:\nnumber = 31\nis_woodall_number, woodall_numbers_up_to_n = is_woodall(number)\nprint(f\"Is {number} a Woodall number? {is_woodall_number}\")\nprint(f\"Woodall numbers up to {number}: {woodall_numbers_up_to_n}\")\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgxlpn427.py\", line 18, in <module>\n    assert is_woodall(10) == [1, 7]\nAssertionError", "passed": false}
{"task_id": 21, "completion": "def multiples_of_num(n, m):\n    # Check if n is a floating-point number\n    if isinstance(n, float):\n        # Generate m multiples of n as floating-point numbers\n        return [n * i for i in range(1, m + 1)]\n    else:\n        # Generate m multiples of n as integers\n        return [n * i for i in range(1, m + 1)]\n\n# Example usage:\nprint(multiples_of_num(5, 5))  # Output: [5, 10, 15, 20, 25]\nprint(multiples_of_num(2.5, 5))  # Output: [2.5, 5.0, 7.5, 10.0, 12.5]\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmptnkd1ueo.py\", line 12, in <module>\n    assert multiples_of_num(3, 2.5) == [2.5, 5.0, 7.5]\n  File \"/tmp/tmptnkd1ueo.py\", line 8, in multiples_of_num\n    return [n * i for i in range(1, m + 1)]\nTypeError: 'float' object cannot be interpreted as an integer", "passed": false}
{"task_id": 22, "completion": "def find_first_duplicate(arr):\n    seen = set()\n    duplicates = []\n    first_duplicate = None\n    \n    for num in arr:\n        if num in seen:\n            if first_duplicate is None:\n                first_duplicate = num\n            duplicates.append(num)\n        else:\n            seen.add(num)\n    \n    return first_duplicate, duplicates\n\n# Example usage:\narr = [1, 2, 3, 4, 2, 5, 6, 3, 7]\nfirst_duplicate, all_duplicates = find_first_duplicate(arr)\nprint(\"First Duplicate:\", first_duplicate)  # Output: 2\nprint(\"All Duplicates:\", all_duplicates)     # Output: [2, 3]\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmps8z7moxi.py\", line 18, in <module>\n    assert find_first_duplicate([1, 2, 3, 2, 4, 5, 4]) == [2, 4]\nAssertionError", "passed": false}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists):\n    # Initialize the maximum sum to a very small number\n    max_sum = float('-inf')\n    \n    # Iterate through each list in the list of lists\n    for lst in list_of_lists:\n        # Calculate the sum of the current list\n        current_sum = sum(lst)\n        \n        # Update the maximum sum if the current sum is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [-1, -2, -3], [4, 5, -6], [7, 8, 9]]\nprint(maximum_sum(list_of_lists))  # Output: 24\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 24, "completion": "def binary_to_decimal(binary_str):\n    # Remove leading zeros\n    binary_str = binary_str.lstrip('0')\n    \n    # If the binary string becomes empty after removing leading zeros, it means it was 0\n    if binary_str == '':\n        return 0\n    \n    # Initialize decimal value\n    decimal_value = 0\n    \n    # Convert binary to decimal\n    for i, digit in enumerate(reversed(binary_str)):\n        if digit == '1':\n            decimal_value += 2 ** i\n    \n    return decimal_value\n\n# Test cases\nprint(binary_to_decimal('101'))  # Output: 5\nprint(binary_to_decimal('000101'))  # Output: 5\nprint(binary_to_decimal('10010'))  # Output: 18\nprint(binary_to_decimal('0000000'))  # Output: 0\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 25, "completion": "def find_product(arr):\n    # Create a dictionary to count occurrences of each element\n    element_count = {}\n    for num in arr:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n    \n    # Calculate the product of non-repeated elements\n    product = 1\n    for num, count in element_count.items():\n        if count == 1:  # Only consider non-repeated elements\n            product *= num\n    \n    return product\n\n# Example usage:\narr = [1, 2, 3, 2, -1, 4, -1]\nresult = find_product(arr)\nprint(result)  # Output: 12 (product of 1, 3, and 4)\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpk8d_6sd6.py\", line 19, in <module>\n    assert find_product([-1, -2, 3, 3], 4) == 2\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(tuple_list, k):\n    # Initialize a counter to keep track of tuples with exactly k elements\n    count = 0\n    \n    # Iterate through each tuple in the list\n    for t in tuple_list:\n        # Check if the length of the tuple is exactly k\n        if len(t) == k:\n            count += 1\n    \n    # Return the count of tuples with exactly k elements\n    return count\n\n# Example usage:\ntuple_list = [(1, 2, 3), (4, 5), (6, 7, 8, 9), (10, 11, 12)]\nk = 3\nresult = check_k_elements(tuple_list, k)\nprint(f\"Number of tuples with exactly {k} elements: {result}\")\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 27, "completion": "def remove(strings, additional_chars=''):\n    # Define the characters to remove (digits and any additional characters)\n    chars_to_remove = '0123456789' + additional_chars\n    \n    # Create a translation table for str.translate() that maps each character to remove to None\n    translation_table = str.maketrans('', '', chars_to_remove)\n    \n    # Use a list comprehension to apply the translation table to each string in the list\n    cleaned_strings = [s.translate(translation_table) for s in strings]\n    \n    return cleaned_strings\n\n# Example usage:\nstrings = ['hello123', 'world456', 'test789']\nadditional_chars = '!@#'\nresult = remove(strings, additional_chars)\nprint(result)  # Output: ['hello', 'world', 'test']\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp890zo6t2.py\", line 14, in <module>\n    assert remove_extended(['abcd123', '456defg'], 'abcdef') == ['d', 'g']\nNameError: name 'remove_extended' is not defined", "passed": false}
{"task_id": 28, "completion": "def binomial_coeff(n, k):\n    # Create a temporary array to store the intermediate results\n    C = [0] * (k + 1)\n    C[0] = 1  # Base case: C(n, 0) = 1 for any n\n    \n    # Calculate the binomial coefficient iteratively\n    for i in range(1, n + 1):\n        # Compute C(i, j) for all j from min(i, k) to 0\n        j = min(i, k)\n        while j > 0:\n            C[j] = C[j] + C[j - 1]\n            j -= 1\n    \n    return C[k]\n\n# Example usage\nn = 10\nk = 5\nprint(f\"Binomial Coefficient C({n}, {k}) is {binomial_coeff(n, k)}\")\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 29, "completion": "from typing import List\n\ndef get_odd_occurrence(arr: List[int], arr_size: int) -> List[int]:\n    # Dictionary to store the count of each element\n    count_dict = {}\n    \n    # Count the occurrences of each element in the array\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # List to store elements that occur an odd number of times\n    odd_occurrences = []\n    \n    # Check for elements with odd occurrences\n    for key, value in count_dict.items():\n        if value % 2 != 0:\n            odd_occurrences.append(key)\n    \n    return odd_occurrences\n\n# Example usage:\narr = [1, 2, 3, 2, 3, 1, 3]\narr_size = len(arr)\nresult = get_odd_occurrence(arr, arr_size)\nprint(result)  # Output: [3]\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkwsl12i9.py\", line 23, in <module>\n    assert get_odd_occurrence([1, 2, 3, 1, 2, 3, 1, 3]) == [1, 3]\nTypeError: get_odd_occurrence() missing 1 required positional argument: 'arr_size'", "passed": false}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    # Filter out non-alphabetic characters\n    filtered_string = ''.join([char for char in s if char.isalpha()])\n    \n    # Initialize count of substrings\n    count = 0\n    \n    # Iterate over all possible substrings\n    for i in range(len(filtered_string)):\n        for j in range(i, len(filtered_string)):\n            # Check if the first and last characters of the substring are the same\n            if filtered_string[i] == filtered_string[j]:\n                count += 1\n    \n    return count\n\n# Example usage:\ninput_string = \"abc cba! a@b#c$\"\nresult = count_substring_with_equal_ends(input_string)\nprint(\"Count of substrings starting and ending with the same character:\", result)\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 31, "completion": "import heapq\nfrom collections import defaultdict\n\ndef func(lists, k):\n    if k == 0:\n        return []\n    \n    # Create a dictionary to count the frequency of each integer\n    frequency = defaultdict(int)\n    for lst in lists:\n        for num in lst:\n            frequency[num] += 1\n    \n    # Use a heap to find the top k frequent elements\n    # We use a min-heap so we can easily pop the least frequent element when the heap size exceeds k\n    min_heap = []\n    for num, freq in frequency.items():\n        heapq.heappush(min_heap, (freq, num))\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    \n    # Extract the elements from the heap and sort them by frequency\n    top_k = sorted(min_heap, key=lambda x: (-x[0], x[1]))\n    \n    # Return only the elements, not their frequencies\n    return [num for freq, num in top_k]\n\n# Example usage:\nlists = [[1, 2, 3], [2, 3, 4], [2, 3, 5]]\nk = 2\nprint(func(lists, k))  # Output: [2, 3]\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 32, "completion": "def max_prime_factors(n, return_all=False):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_factors = []\n    # Check for number of 2s that divide n\n    while n % 2 == 0:\n        prime_factors.append(2)\n        n = n // 2\n\n    # n must be odd at this point, thus a skip of 2 is used (i.e., 3, 5, 7, 9, ...)\n    for i in range(3, int(n**0.5) + 1, 2):\n        # While i divides n, add i and divide n\n        while n % i == 0:\n            if is_prime(i):\n                prime_factors.append(i)\n            n = n // i\n\n    # Condition if n is a prime number greater than 2\n    if n > 2 and is_prime(n):\n        prime_factors.append(n)\n\n    if return_all:\n        return prime_factors\n    else:\n        return max(prime_factors) if prime_factors else None\n\n# Example usage:\nprint(max_prime_factors(315))  # Output: 7\nprint(max_prime_factors(315, return_all=True))  # Output: [3, 5, 7]\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(decimal_numbers):\n    # Check if the input is a single number or a list\n    if isinstance(decimal_numbers, list):\n        # If it's a list, convert each number in the list to binary\n        return [bin(num)[2:] for num in decimal_numbers]\n    else:\n        # If it's a single number, convert it to binary\n        return bin(decimal_numbers)[2:]\n\n# Example usage:\nsingle_number = 10\nlist_of_numbers = [10, 15, 20]\n\nprint(\"Binary of\", single_number, \"is\", decimal_to_binary(single_number))\nprint(\"Binary of\", list_of_numbers, \"is\", decimal_to_binary(list_of_numbers))\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 34, "completion": "def find_missing(arr):\n    # Initialize an empty list to store the missing numbers\n    missing_numbers = []\n    \n    # Loop through the array from the first element to the second last element\n    for i in range(len(arr) - 1):\n        # Calculate the difference between the current element and the next element\n        diff = arr[i + 1] - arr[i]\n        \n        # If the difference is greater than 1, it means there are missing numbers\n        if diff > 1:\n            # Append all missing numbers between the current element and the next element to the list\n            missing_numbers.extend(range(arr[i] + 1, arr[i + 1]))\n    \n    # Return the list of missing numbers\n    return missing_numbers\n\n# Example usage:\narr = [1, 2, 4, 7, 10]\nprint(find_missing(arr))  # Output: [3, 5, 6, 8, 9]\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpatrif_6o.py\", line 17, in <module>\n    assert find_missing([1,3,6], 3) == [2, 4, 5]\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    if isinstance(n, int):\n        return n * (n + 1)\n    elif isinstance(n, list):\n        return [x * (x + 1) for x in n]\n    else:\n        raise TypeError(\"Input must be an integer or a list of integers\")\n\n# Example usage:\nsingle_rect_num = find_rect_num(5)  # Output: 30\nlist_of_rect_nums = find_rect_num([1, 2, 3, 4, 5])  # Output: [2, 6, 12, 20, 30]\n\nprint(\"Single rectangular number:\", single_rect_num)\nprint(\"List of rectangular numbers:\", list_of_rect_nums)\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator, n):\n    # Ensure n is a positive integer\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    # Handle negative numerators and denominators\n    numerator = abs(numerator)\n    denominator = abs(denominator)\n    \n    # Check for zero denominator\n    if denominator == 0:\n        raise ValueError(\"Denominator cannot be zero\")\n    \n    # Get the integer part and the remainder\n    integer_part, remainder = divmod(numerator, denominator)\n    \n    # Skip the integer part and focus on the fractional part\n    result = \"\"\n    for _ in range(n):\n        remainder *= 10\n        digit, remainder = divmod(remainder, denominator)\n        result += str(digit)\n    \n    # Return the nth digit as an integer\n    return int(result[n-1])\n\n# Example usage:\nprint(find_nth_digit(1, 3, 5))  # Output: 3 (since 1/3 = 0.33333...)\nprint(find_nth_digit(-22, 7, 4))  # Output: 8 (since -22/7 = -3.142857142857...)\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 37, "completion": "def sort_mixed_list(mixed_list, reverse_strings=False):\n    # Separate integers and strings into two lists\n    int_list = [item for item in mixed_list if isinstance(item, int)]\n    str_list = [item for item in mixed_list if isinstance(item, str)]\n    \n    # Sort the integer list\n    int_list.sort()\n    \n    # Sort the string list, reverse if reverse_strings is True\n    str_list.sort(reverse=reverse_strings)\n    \n    # Merge the sorted lists back together\n    sorted_list = []\n    i = j = 0\n    while i < len(int_list) and j < len(str_list):\n        if int_list[i] < str_list[j]:\n            sorted_list.append(int_list[i])\n            i += 1\n        else:\n            sorted_list.append(str_list[j])\n            j += 1\n    # Append any remaining items from either list\n    sorted_list.extend(int_list[i:])\n    sorted_list.extend(str_list[j:])\n    \n    return sorted_list\n\n# Example usage:\nmixed_list = [5, 'apple', 2, 'banana', 'orange', 3]\nsorted_list = sort_mixed_list(mixed_list)\nprint(\"Sorted list:\", sorted_list)\n\nsorted_list_with_reverse = sort_mixed_list(mixed_list, reverse_strings=True)\nprint(\"Sorted list with strings in reverse:\", sorted_list_with_reverse)\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmprjj0prf2.py\", line 25, in <module>\n    sorted_list = sort_mixed_list(mixed_list)\n  File \"/tmp/tmprjj0prf2.py\", line 13, in sort_mixed_list\n    if int_list[i] < str_list[j]:\nTypeError: '<' not supported between instances of 'int' and 'str'", "passed": false}
{"task_id": 38, "completion": "def div_even_odd(numbers):\n    if not numbers:\n        return \"List is empty\"\n    \n    first_even = None\n    first_odd = None\n    \n    for num in numbers:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is None:\n        return \"No even number found\"\n    if first_odd is None:\n        return \"No odd number found\"\n    \n    if first_odd == 0:\n        return \"Cannot divide by zero\"\n    \n    return first_even / first_odd\n\n# Example usage:\nnumbers = [1, -4, 3, 8]\nresult = div_even_odd(numbers)\nprint(result)  # Output: -1.3333333333333333\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 39, "completion": "from collections import Counter\nfrom itertools import permutations\n\ndef rearrange_string(s):\n    # Count the frequency of each character\n    char_count = Counter(s)\n    \n    # Check if any character appears more than half the length of the string (rounded up)\n    if any(count > (len(s) + 1) // 2 for count in char_count.values()):\n        return \"Not possible to rearrange\"\n    \n    # Generate all unique permutations of the string\n    unique_permutations = set(permutations(s))\n    \n    # Filter permutations to find valid rearrangements\n    valid_rearrangements = []\n    for perm in unique_permutations:\n        if all(perm[i] != perm[i+1] for i in range(len(perm) - 1)):\n            valid_rearrangements.append(''.join(perm))\n    \n    return valid_rearrangements if valid_rearrangements else \"Not possible to rearrange\"\n\n# Example usage:\ns = \"aab\"\nprint(rearrange_string(s))  # Output: ['aba']\n\ns = \"aaab\"\nprint(rearrange_string(s))  # Output: Not possible to rearrange\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0gmzigt2.py\", line 22, in <module>\n    assert set(rearange_string('aabb')) == {'abab', 'baba'}\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "completion": "from collections import Counter\n\ndef freq_element(lst):\n    def flatten_list(nested_list):\n        for item in nested_list:\n            if isinstance(item, list):\n                yield from flatten_list(item)\n            else:\n                yield item\n    \n    flat_list = flatten_list(lst)\n    return Counter(flat_list)\n\n# Example usage:\nnested_list = [1, 2, [3, 4, [5, 6], 7], [8, 9], 10]\nresult = freq_element(nested_list)\nprint(result)\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 41, "completion": "def filter_evennumbers(lst):\n    # Filter out non-integer types\n    filtered_lst = list(filter(lambda x: isinstance(x, int), lst))\n    # Filter even numbers using lambda function\n    even_numbers = list(filter(lambda x: x % 2 == 0, filtered_lst))\n    return even_numbers\n\n# Example usage:\ninput_list = [1, 2, 3, 4, 5, 'a', 'b', 6, 7.5, 8]\nresult = filter_evennumbers(input_list)\nprint(result)  # Output: [2, 4, 6, 8]\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 42, "completion": "def find_sum(arr):\n    # Create a dictionary to store the frequency of each element\n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    \n    # Calculate the sum of repeated elements\n    sum_repeated = 0\n    for num, count in frequency.items():\n        if count > 1:\n            sum_repeated += num * count\n    \n    return sum_repeated\n\n# Example usage:\narr = [1, 2, 3, 2, 4, 5, 5, -1, -1]\nresult = find_sum(arr)\nprint(result)  # Output: 13 (2+2+5+5-1-1)\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp38k189uk.py\", line 19, in <module>\n    assert find_sum([-1, -2, -3, -1, -1], 5) == -2\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    pattern = r'[a-z]+(_[a-z]+)+'\n    matches = re.findall(pattern, text)\n    return matches\n\n# Example usage:\ntext = \"hello_world this_is_a_test example_text\"\nresult = text_match(text)\nprint(result)  # Output: ['hello_world', 'this_is_a_test', 'example_text']\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpbw3jlsr2.py\", line 10, in <module>\n    assert text_match('abc_def_ghi') == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 45, "completion": "import math\nfrom functools import reduce\n\ndef get_gcd(arr):\n    # Filter out zero values from the list\n    filtered_arr = [num for num in arr if num != 0]\n    \n    # If the filtered list is empty, return 0 (since GCD of an empty list is undefined)\n    if not filtered_arr:\n        return 0\n    \n    # Use reduce to apply the gcd function across the filtered list\n    return reduce(math.gcd, filtered_arr)\n\n# Example usage:\narr = [0, 15, 5, 20, 0]\nprint(get_gcd(arr))  # Output: 5\n\narr2 = [0, 0, 0]\nprint(get_gcd(arr2))  # Output: 0\n\narr3 = [12, 24, 36]\nprint(get_gcd(arr3))  # Output: 12\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 46, "completion": "def test_distinct(numbers):\n    # Convert the list to a set to remove duplicates\n    unique_numbers = set(numbers)\n    # Compare the length of the original list and the set\n    return len(numbers) == len(unique_numbers)\n\n# Test cases\nprint(test_distinct([1, 2, 3, 4]))  # True, all numbers are distinct\nprint(test_distinct([1, 2, 2, 4]))  # False, there are duplicates\nprint(test_distinct([1.1, 2.2, 3.3, 4.4]))  # True, all numbers are distinct\nprint(test_distinct([1.1, 2.2, 2.2, 4.4]))  # False, there are duplicates\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 47, "completion": "def compute_last_digit(a, b):\n    if a > b:\n        return 0  # factorial(b) / factorial(a) is not an integer if a > b\n    if a == 0 or b == 0:\n        return 1  # factorial(0) is 1, and 1 divided by 1 is 1\n    \n    # Calculate factorial(b) / factorial(a)\n    result = 1\n    for i in range(a + 1, b + 1):\n        result *= i\n    \n    # Get the last digit\n    last_digit = result % 10\n    return last_digit\n\n# Example usage:\nprint(compute_last_digit(3, 5))  # Output: 2 (since 5! / 3! = 20 and last digit is 0)\nprint(compute_last_digit(0, 0))  # Output: 1\nprint(compute_last_digit(5, 3))  # Output: 0 (since 3! / 5! is not an integer)\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 48, "completion": "def odd_bit_set_number(num):\n    # Calculate the absolute value of the number\n    abs_num = abs(num)\n    \n    # Initialize a variable to hold the result\n    result = abs_num\n    \n    # Iterate through the bits of the number\n    bit_position = 0\n    while abs_num > 0:\n        # Check if the current bit position is odd\n        if bit_position % 2 == 1:\n            # Set the bit at the current position\n            result |= (1 << bit_position)\n        \n        # Move to the next bit\n        abs_num >>= 1\n        bit_position += 1\n    \n    # Return the result\n    return result\n\n# Test the function with positive and negative numbers\nprint(odd_bit_set_number(10))  # Example with positive number\nprint(odd_bit_set_number(-10)) # Example with negative number\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpr4vf312v.py\", line 21, in <module>\n    assert odd_bit_set_number(-10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(matrix, index=0):\n    \"\"\"\n    Extracts the specified element from each sublist in a two-dimensional list.\n    \n    :param matrix: A two-dimensional list (list of lists)\n    :param index: The index of the element to extract from each sublist (default is 0)\n    :return: A list containing the extracted elements\n    \"\"\"\n    result = []\n    for sublist in matrix:\n        # Check if the sublist is long enough\n        if len(sublist) > abs(index) if index < 0 else len(sublist) > index:\n            result.append(sublist[index])\n        else:\n            # Append None or a default value if the index is out of range\n            result.append(None)\n    return result\n\n# Example usage:\nmatrix = [\n    [1, 2, 3],\n    [4, 5, 6, 7],\n    [8, 9],\n    [10]\n]\n\n# Extract the first element from each sublist\nprint(specified_element(matrix))  # Output: [1, 4, 8, 10]\n\n# Extract the third element from each sublist, or None if it doesn't exist\nprint(specified_element(matrix, 2))  # Output: [3, 6, None, None]\n\n# Extract the last element from each sublist using a negative index\nprint(specified_element(matrix, -1))  # Output: [3, 7, 9, 10]\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 51, "completion": "def check_equilateral(a, b, c):\n    if a == b == c:\n        return \"equilateral\"\n    elif a == b or b == c or a == c:\n        return \"isosceles\"\n    else:\n        return \"not equilateral or isosceles\"\n\n# Example usage:\nside1 = 5\nside2 = 5\nside3 = 5\nresult = check_equilateral(side1, side2, side3)\nprint(f\"The triangle with sides {side1}, {side2}, {side3} is {result}.\")\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 52, "completion": "def parallelogram_area(base_height_pairs):\n    if isinstance(base_height_pairs, tuple):\n        # Calculate area for a single tuple (base, height)\n        base, height = base_height_pairs\n        return base * height\n    elif isinstance(base_height_pairs, list):\n        # Calculate area for a list of tuples [(base1, height1), (base2, height2), ...]\n        areas = []\n        for base, height in base_height_pairs:\n            area = base * height\n            areas.append(area)\n        return areas\n    else:\n        raise TypeError(\"Input should be a tuple or a list of tuples\")\n\n# Example usage:\nsingle_parallelogram = (4, 5)\nprint(parallelogram_area(single_parallelogram))  # Output: 20\n\nmultiple_parallelograms = [(4, 5), (3, 6), (7, 2)]\nprint(parallelogram_area(multiple_parallelograms))  # Output: [20, 18, 14]\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8wced9sv.py\", line 20, in <module>\n    assert parallelogram_area_list([(10, 20), (15, 20), (8, 9)]) == [200, 300, 72]\nNameError: name 'parallelogram_area_list' is not defined", "passed": false}
{"task_id": 53, "completion": "def check_equality(input_string):\n    # Check if the input string is empty\n    if not input_string:\n        return False\n    \n    # Convert the string to lowercase to ignore case sensitivity\n    input_string = input_string.lower()\n    \n    # Compare the first and last characters\n    return input_string[0] == input_string[-1]\n\n# Example usage:\nresult = check_equality(\"Racecar\")\nprint(result)  # Output: True\n\nresult = check_equality(\"hello\")\nprint(result)  # Output: False\n\nresult = check_equality(\"A\")\nprint(result)  # Output: True\n\nresult = check_equality(\"\")\nprint(result)  # Output: False\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpeqwbtxa2.py\", line 18, in <module>\n    assert check_equality('Abca') == 'Equal'\nAssertionError", "passed": false}
{"task_id": 54, "completion": "def counting_sort(arr):\n    # Find the minimum and maximum values in the array\n    min_val = min(arr)\n    max_val = max(arr)\n    \n    # Calculate the range of the values\n    range_of_elements = max_val - min_val + 1\n    \n    # Create a count array to store the count of each unique element\n    count = [0] * range_of_elements\n    output = [0] * len(arr)\n    \n    # Store the count of each element in the count array\n    for num in arr:\n        count[num - min_val] += 1\n    \n    # Modify the count array by adding the previous counts (cumulative count)\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    \n    # Build the output array by placing elements in their correct position\n    for i in range(len(arr) - 1, -1, -1):\n        output[count[arr[i] - min_val] - 1] = arr[i]\n        count[arr[i] - min_val] -= 1\n    \n    # Copy the sorted elements into the original array\n    for i in range(len(arr)):\n        arr[i] = output[i]\n    \n    return arr\n\n# Example usage:\narr = [-5, -10, 0, -3, 8, 5, -1, 10]\nsorted_arr = counting_sort(arr)\nprint(\"Sorted array:\", sorted_arr)\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 55, "completion": "def tn_gp(a, r, n):\n    \"\"\"\n    Calculate the n-th term of a geometric series.\n    \n    Parameters:\n    a (float): The first term of the geometric series.\n    r (float): The common ratio of the geometric series.\n    n (int): The term number to find.\n    \n    Returns:\n    float: The n-th term of the geometric series.\n    \"\"\"\n    # Calculate the n-th term using the formula: a * r^(n-1)\n    nth_term = a * (r ** (n - 1))\n    return nth_term\n\n# Example usage:\nfirst_term = 3.0\ncommon_ratio = 2.5\nterm_number = 5\n\nresult = tn_gp(first_term, common_ratio, term_number)\nprint(f\"The {term_number}-th term of the geometric series is: {result}\")\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 56, "completion": "def check(num):\n    # Check if the number is negative\n    is_negative = num < 0\n    \n    # Take the absolute value to handle reversing correctly\n    abs_num = abs(num)\n    \n    # Reverse the digits of the absolute value of the number\n    reversed_num = int(str(abs_num)[::-1])\n    \n    # If the original number was negative, make the reversed number negative\n    if is_negative:\n        reversed_num = -reversed_num\n    \n    # Check if the original number is one less than twice its reverse\n    return num == 2 * reversed_num - 1\n\n# Test cases\nprint(check(21))  # True, because 21 is one less than twice 12\nprint(check(-21)) # True, because -21 is one less than twice -12\nprint(check(18))  # False\nprint(check(-18)) # False\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6ys_ki0a.py\", line 19, in <module>\n    assert check(-37) == True\nAssertionError", "passed": false}
{"task_id": 57, "completion": "def find_max_num(digits):\n    # Convert each digit to a string for easy sorting and concatenation\n    digits_str = [str(digit) for digit in digits]\n    \n    # Sort the list of string digits in descending order\n    sorted_digits = sorted(digits_str, reverse=True, key=lambda x: x*10)\n    \n    # Concatenate the sorted digits into a single string\n    largest_num_str = ''.join(sorted_digits)\n    \n    # Convert the string back to an integer\n    largest_num = int(largest_num_str)\n    \n    return largest_num\n\n# Example usage:\ndigits = [3, 1, 4, 1, 5, 9]\nprint(find_max_num(digits))  # Output: 954311\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpf_rb0eul.py\", line 14, in <module>\n    assert find_max_num([1, 1, 2, 2], 4) == 2211\nTypeError: find_max_num() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 58, "completion": "def opposite_signs(x, y):\n    # Check if x and y have opposite signs\n    return (x < 0 and y >= 0) or (x >= 0 and y < 0)\n\ndef process_pairs(pairs):\n    # Initialize an empty list to store the results\n    results = []\n    # Iterate through each pair in the list\n    for x, y in pairs:\n        # Check if the current pair has opposite signs\n        result = opposite_signs(x, y)\n        # Append the result to the results list\n        results.append(result)\n    return results\n\n# Example usage:\npairs = [(3, -5), (-2, 2), (4, 5), (-1, -1)]\nresult = process_pairs(pairs)\nprint(result)  # Output: [True, True, False, False]\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpudcqti6s.py\", line 18, in <module>\n    assert opposite_signs_list([(1, -2), (3, 2), (-10, -10)]) == [True, False, False]\nNameError: name 'opposite_signs_list' is not defined", "passed": false}
{"task_id": 59, "completion": "def is_octagonal(n):\n    if isinstance(n, int):\n        # Calculate the nth octagonal number using the formula: n * (3n - 2)\n        return n * (3 * n - 2)\n    elif isinstance(n, list):\n        # If n is a list, calculate the first n octagonal numbers\n        octagonal_numbers = []\n        for i in n:\n            octagonal_numbers.append(i * (3 * i - 2))\n        return octagonal_numbers\n    else:\n        raise ValueError(\"Input must be an integer or a list of integers\")\n\n# Example usage:\nnth_octagonal = is_octagonal(5)\nprint(f\"The 5th octagonal number is: {nth_octagonal}\")\n\noctagonal_list = is_octagonal([1, 2, 3, 4, 5])\nprint(f\"The first 5 octagonal numbers are: {octagonal_list}\")\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 60, "completion": "def max_len_sub(arr):\n    if not arr:\n        return 0\n    \n    n = len(arr)\n    if n == 1:\n        return 1\n    \n    # Initialize the dp array where dp[i] will store the maximum length of subsequence ending at index i\n    dp = [1] * n\n    \n    # Iterate through the array to fill dp array\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    # The maximum value in dp array will be the answer\n    return max(dp)\n\n# Example usage\narr = [1, 2, 3, 4, 5, 3, 2, 1]\nprint(max_len_sub(arr))  # Output: 5 (subsequence: [1, 2, 3, 2, 1])\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqc01ifrg.py\", line 19, in <module>\n    assert max_len_sub([10, 7, 4, 1, -2], -3) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}

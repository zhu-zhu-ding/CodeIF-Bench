{"task_id": 11, "completion": "def remove_occ(s, char):\n    # Find the first occurrence of the character\n    first_occurrence = s.find(char)\n    if first_occurrence == -1:\n        # If the character is not found, return the original string\n        return s\n    \n    # Remove the first occurrence\n    s = s[:first_occurrence] + s[first_occurrence + 1:]\n    \n    # Find the last occurrence of the character\n    last_occurrence = s.rfind(char)\n    if last_occurrence == -1:\n        # If the character is not found after removing the first occurrence, return the modified string\n        return s\n    \n    # Remove the last occurrence\n    s = s[:last_occurrence] + s[last_occurrence + 1:]\n    \n    return s\n\n# Example usage:\nresult = remove_occ(\"hello world\", \"l\")\nprint(result)  # Output: \"heo world\"\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 12, "completion": "def sort_matrix(matrix):\n    # Check if the matrix is empty\n    if not matrix:\n        return matrix\n    \n    # Calculate the sum of each row and store it along with the row index\n    row_sums = [(sum(row), idx) for idx, row in enumerate(matrix)]\n    \n    # Sort the row sums\n    sorted_row_sums = sorted(row_sums)\n    \n    # Create a new matrix sorted by the sum of the rows\n    sorted_matrix = [matrix[idx] for _, idx in sorted_row_sums]\n    \n    return sorted_matrix\n\n# Example usage:\nmatrix = [\n    [3, 1, 2],\n    [1, 0, 0],\n    [2, 3, 4]\n]\n\nsorted_matrix = sort_matrix(matrix)\nprint(sorted_matrix)  # Output: [[1, 0, 0], [3, 1, 2], [2, 3, 4]]\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 13, "completion": "from collections import Counter\n\ndef count_common(words):\n    if not words:\n        return []\n    \n    word_counts = Counter(words)\n    most_common_count = word_counts.most_common(1)[0][1]\n    \n    return [word for word, count in word_counts.items() if count == most_common_count]\n\n# Example usage:\nwords = [\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"banana\"]\nprint(count_common(words))  # Output: ['banana']\n\n# Example with empty list:\nprint(count_common([]))  # Output: []\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6w1lq9wd.py\", line 13, in <module>\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nAssertionError", "passed": false}
{"task_id": 14, "completion": "def find_volume(base_area, triangle_height, prism_length):\n    if base_area <= 0 or triangle_height <= 0 or prism_length <= 0:\n        raise ValueError(\"All dimensions must be positive numbers\")\n    \n    # Calculate the area of the triangle\n    triangle_area = 0.5 * base_area * triangle_height\n    \n    # Calculate the volume of the triangular prism\n    volume = triangle_area * prism_length\n    \n    return volume\n\n# Example usage:\ntry:\n    print(find_volume(5, 4, 10))  # Expected output: 100.0\n    print(find_volume(0.1, 0.1, 0.1))  # Expected output: 0.005\n    print(find_volume(0, 4, 10))  # This will raise a ValueError\nexcept ValueError as e:\n    print(e)\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 15, "completion": "import re\n\ndef split_lowerstring(input_string):\n    # Check if the input string contains any lowercase letters\n    if not re.search('[a-z]', input_string):\n        return []\n    \n    # Split the string at lowercase letters\n    result = re.split('[a-z]', input_string)\n    \n    # Filter out empty strings from the result\n    result = [s for s in result if s]\n    \n    return result\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0xcvlrcq.py\", line 11, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    # Regular expression pattern to find sequences of lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]+(?:_[a-z]+)+\\b'\n    \n    # Search for the pattern in the input text\n    matches = re.findall(pattern, text)\n    \n    # If matches are found, return them as a list, otherwise return 'Not matched!'\n    if matches:\n        return matches\n    else:\n        return 'Not matched!'\n\n# Example usage:\nprint(text_lowercase_underscore(\"Here are some_examples of_lowercase_underscore and someOther_examples\"))\nprint(text_lowercase_underscore(\"No matches here\"))\nprint(text_lowercase_underscore(\"\"))\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplccyeyl6.py\", line 16, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative\")\n    return 4 * side_length\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(original_str, remove_chars):\n    if not remove_chars:\n        return original_str\n    \n    # Create a set of characters to be removed\n    remove_set = set(remove_chars)\n    \n    # Use list comprehension to filter out characters present in remove_set\n    filtered_chars = [char for char in original_str if char not in remove_set]\n    \n    # Join the filtered characters to form the resultant string\n    result_str = ''.join(filtered_chars)\n    \n    return result_str\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 19, "completion": "def test_duplicate(arr):\n    # Check if the list is empty or has only one element\n    if len(arr) <= 1:\n        return False\n    \n    # Create an empty set to store unique elements\n    seen = set()\n    \n    # Iterate through the array\n    for num in arr:\n        # If the number is already in the set, it's a duplicate\n        if num in seen:\n            return True\n        # Add the number to the set\n        seen.add(num)\n    \n    # If no duplicates were found\n    return False\n\n# Test cases\nprint(test_duplicate([]))  # Output: False (empty list)\nprint(test_duplicate([1]))  # Output: False (single element)\nprint(test_duplicate([1, 2, 3, 4, 5]))  # Output: False (no duplicates)\nprint(test_duplicate([1, 2, 3, 4, 1]))  # Output: True (contains duplicates)\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(num):\n    if num < 1:\n        return False  # Woodall numbers are positive integers\n    \n    n = 1\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number == num:\n            return True\n        elif woodall_number > num:\n            return False\n        n += 1\n\n# Test cases\nprint(is_woodall(0))  # False\nprint(is_woodall(1))  # True\nprint(is_woodall(7))  # True\nprint(is_woodall(23)) # True\nprint(is_woodall(24)) # False\nprint(is_woodall(767)) # False\nprint(is_woodall(383)) # True\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 21, "completion": "def multiples_of_num(n, m):\n    if m == 0:\n        return []\n    return [n * i for i in range(1, m + 1)]\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpy0uikdzl.py\", line 5, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "completion": "def find_first_duplicate(arr):\n    # Check if the list is empty\n    if not arr:\n        return -1\n    \n    # Create a set to store unique elements\n    seen = set()\n    \n    # Iterate through the array\n    for num in arr:\n        # If the number is already in the set, it's a duplicate\n        if num in seen:\n            return num\n        # Add the number to the set\n        seen.add(num)\n    \n    # If no duplicates are found, return -1\n    return -1\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists):\n    # Check if the input list is empty\n    if not list_of_lists:\n        return 0\n    \n    max_sum = None\n    \n    # Iterate through each sublist in the list of lists\n    for sublist in list_of_lists:\n        # Calculate the sum of the current sublist\n        current_sum = sum(sublist)\n        \n        # Update max_sum if it's None or if the current_sum is greater\n        if max_sum is None or current_sum > max_sum:\n            max_sum = current_sum\n    \n    # If max_sum is still None, it means all sublists were empty\n    if max_sum is None:\n        return 0\n    \n    return max_sum\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [4, 5, 6], [10, 11, 12]]\nprint(maximum_sum(list_of_lists))  # Output: 33\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 24, "completion": "def binary_to_decimal(binary_str):\n    # Check if the input string is empty\n    if binary_str == \"\":\n        return 0\n    \n    # Initialize the decimal value\n    decimal_value = 0\n    \n    # Iterate over each character in the binary string\n    for i, digit in enumerate(reversed(binary_str)):\n        # Convert the binary digit to an integer and multiply by the power of 2\n        decimal_value += int(digit) * (2 ** i)\n    \n    return decimal_value\n\n# Example usage:\nbinary_number = \"1011\"\ndecimal_result = binary_to_decimal(binary_number)\nprint(f\"The decimal equivalent of binary {binary_number} is {decimal_result}\")\n\n# Edge case with empty string\nempty_binary = \"\"\nempty_decimal_result = binary_to_decimal(empty_binary)\nprint(f\"The decimal equivalent of an empty binary string is {empty_decimal_result}\")\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0ed2kjjb.py\", line 20, in <module>\n    assert binary_to_decimal(100) == 4\n  File \"/tmp/tmp0ed2kjjb.py\", line 8, in binary_to_decimal\n    for i, digit in enumerate(reversed(binary_str)):\nTypeError: 'int' object is not reversible", "passed": false}
{"task_id": 25, "completion": "def find_product(arr):\n    # Check if the input list is empty\n    if not arr:\n        return 1\n    \n    # Create a dictionary to count occurrences of each element\n    element_count = {}\n    for num in arr:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n    \n    # Calculate the product of non-repeated elements\n    product = 1\n    for num, count in element_count.items():\n        if count == 1:\n            product *= num\n    \n    return product\n\n# Example usage:\narr = [1, 2, 3, 2, 4]\nprint(find_product(arr))  # Output: 12 (1*3*4)\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp53r6x1db.py\", line 21, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(tuple_list, k):\n    # Check if the list is empty\n    if not tuple_list:\n        return False\n    \n    # Iterate through each tuple in the list\n    for tup in tuple_list:\n        # Check if the tuple has exactly k elements\n        if len(tup) != k:\n            return False\n    \n    # If all tuples have k elements, return True\n    return True\n\n# Example usage:\ntuple_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nk = 3\nprint(check_k_elements(tuple_list, k))  # Output: True\n\ntuple_list = [(1, 2), (3, 4, 5), (6, 7)]\nk = 2\nprint(check_k_elements(tuple_list, k))  # Output: False\n\ntuple_list = []\nk = 3\nprint(check_k_elements(tuple_list, k))  # Output: False\n\ntuple_list = [(1, 2, 3), (), (4, 5, 6)]\nk = 3\nprint(check_k_elements(tuple_list, k))  # Output: False\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppz3yl52b.py\", line 25, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "completion": "def remove(strings):\n    # Check if the input list is empty\n    if not strings:\n        return []\n    \n    # Define a list to store the processed strings\n    processed_strings = []\n    \n    # Iterate through each string in the list\n    for string in strings:\n        # Use a list comprehension to filter out digits from the string\n        no_digits_string = ''.join([char for char in string if not char.isdigit()])\n        # Append the processed string to the processed_strings list\n        processed_strings.append(no_digits_string)\n    \n    # Return the list of processed strings\n    return processed_strings\n\n# Example usage:\ninput_strings = [\"hello123\", \"world456\", \"test789\"]\noutput_strings = remove(input_strings)\nprint(output_strings)  # Output: ['hello', 'world', 'test']\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 28, "completion": "def binomial_coeff(n, k):\n    # Base cases\n    if k == 0 or k == n:\n        return 1\n    if k > n:\n        return 0\n    \n    # Recursive cases\n    return binomial_coeff(n-1, k-1) + binomial_coeff(n-1, k)\n\n# Test cases\nprint(binomial_coeff(5, 2))  # Output: 10\nprint(binomial_coeff(10, 0))  # Output: 1\nprint(binomial_coeff(10, 10))  # Output: 1\nprint(binomial_coeff(6, 3))  # Output: 20\nprint(binomial_coeff(0, 0))  # Output: 1\nprint(binomial_coeff(5, 6))  # Output: 0\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 29, "completion": "def get_odd_occurrence(arr):\n    if not arr:\n        return None\n    \n    result = 0\n    for element in arr:\n        result ^= element\n    \n    return result if arr.count(result) % 2 != 0 else None\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6475dhty.py\", line 8, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    # Check if the input string is empty\n    if not s:\n        return 0\n    \n    # Initialize a counter to keep track of substrings with equal start and end characters\n    count = 0\n    \n    # Iterate over each character in the string\n    for i in range(len(s)):\n        # For each character, consider it as a starting point and check all possible substrings\n        for j in range(i, len(s)):\n            # If the starting character matches the ending character, increment the count\n            if s[i] == s[j]:\n                count += 1\n    \n    # Return the total count of such substrings\n    return count\n\n# Example usage:\nresult = count_substring_with_equal_ends(\"abcab\")\nprint(result)  # Output: 3 (substrings: \"a\", \"abca\", \"b\")\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 31, "completion": "import heapq\nfrom collections import defaultdict\n\ndef func(lists, k):\n    if not lists or all(len(lst) == 0 for lst in lists):\n        return []\n    \n    # Dictionary to count frequency of each integer\n    frequency = defaultdict(int)\n    \n    # Count frequency of each integer in all lists\n    for lst in lists:\n        for num in lst:\n            frequency[num] += 1\n    \n    # Use a min-heap to keep track of top k elements\n    min_heap = []\n    \n    # Iterate over the frequency dictionary\n    for num, freq in frequency.items():\n        # Push the negative frequency and number to the heap\n        # (negative frequency to simulate max-heap using min-heap)\n        heapq.heappush(min_heap, (-freq, num))\n        \n        # If heap size exceeds k, pop the smallest element\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    \n    # Extract the numbers from the heap and sort them by frequency\n    result = sorted([heapq.heappop(min_heap)[1] for _ in range(len(min_heap))], key=lambda x: -frequency[x])\n    \n    return result\n\n# Example usage:\nlists = [[1, 2, 3], [2, 3, 4], [2, 5]]\nk = 2\nprint(func(lists, k))  # Output: [2, 3]\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpj3s0ux4o.py\", line 29, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    # Initialize the maximum prime factor variable\n    max_prime = -1\n    \n    # Check for number of 2s that divide n\n    while n % 2 == 0:\n        max_prime = 2\n        n //= 2\n    \n    # n must be odd at this point, thus skip even numbers and iterate only for odd integers\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n //= i\n    \n    # This condition is to check if n is a prime number greater than 2\n    if n > 2:\n        max_prime = n\n    \n    return max_prime\n\n# Example usage:\nnumber = 56\nprint(f\"The largest prime factor of {number} is {max_prime_factors(number)}\")\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(decimal_number):\n    if decimal_number == 0:\n        return '0'\n    binary_number = ''\n    while decimal_number > 0:\n        remainder = decimal_number % 2\n        binary_number = str(remainder) + binary_number\n        decimal_number = decimal_number // 2\n    return binary_number\n\n# Example usage:\nprint(decimal_to_binary(10))  # Output: 1010\nprint(decimal_to_binary(0))   # Output: 0\nprint(decimal_to_binary(255)) # Output: 11111111\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpbtqx5865.py\", line 14, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "completion": "def find_missing(arr):\n    # Check if the first element is missing\n    if arr[0] != 1:\n        return 1\n    \n    # Initialize left and right pointers\n    left, right = 0, len(arr) - 1\n    \n    # Binary search to find the missing number\n    while left <= right:\n        mid = (left + right) // 2\n        \n        # Check if the missing number is on the left side\n        if arr[mid] != mid + 1 and arr[mid - 1] == mid:\n            return mid + 1\n        \n        # Adjust the search range\n        if arr[mid] == mid + 1:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # If no missing number found, return the next number after the last element\n    return arr[-1] + 1\n\n# Example usage\narr = [1, 2, 3, 4, 6, 7, 8]\nprint(find_missing(arr))  # Output: 5\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_ntvpcm_.py\", line 23, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    if n == 1:\n        return 2\n    else:\n        return n * (n + 1)\n\n# Test cases\nprint(find_rect_num(1))  # Output: 2\nprint(find_rect_num(2))  # Output: 6\nprint(find_rect_num(3))  # Output: 12\nprint(find_rect_num(4))  # Output: 20\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator, n):\n    if numerator == 0:\n        return 0\n    \n    # Get the decimal representation of the fraction\n    result = numerator / denominator\n    \n    # Convert the result to a string, removing the '0.' at the beginning\n    decimal_str = str(result)[2:]\n    \n    # Check if the length of the decimal string is less than n\n    if len(decimal_str) < n:\n        return 0  # Return 0 if the nth digit does not exist\n    \n    # Return the nth digit as an integer\n    return int(decimal_str[n - 1])\n\n# Example usage:\nprint(find_nth_digit(1, 3, 1))  # Output: 3\nprint(find_nth_digit(1, 3, 2))  # Output: 3\nprint(find_nth_digit(1, 3, 3))  # Output: 3\nprint(find_nth_digit(1, 3, 4))  # Output: 3\nprint(find_nth_digit(1, 3, 5))  # Output: 3\nprint(find_nth_digit(0, 5, 1))  # Output: 0\nprint(find_nth_digit(0, 5, 10)) # Output: 0\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 37, "completion": "def sort_mixed_list(mixed_list):\n    # Separate the integers and strings into two different lists\n    int_list = [item for item in mixed_list if isinstance(item, int)]\n    str_list = [item for item in mixed_list if isinstance(item, str)]\n    \n    # Sort each list individually\n    int_list.sort()\n    str_list.sort()\n    \n    # Combine the sorted lists and return the result\n    sorted_list = int_list + str_list\n    return sorted_list\n\n# Example usage:\nmixed_list = [3, \"banana\", 1, \"apple\", 2, \"cherry\"]\nsorted_list = sort_mixed_list(mixed_list)\nprint(sorted_list)  # Output: [1, 2, 3, 'apple', 'banana', 'cherry']\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 38, "completion": "def div_even_odd(numbers):\n    first_even = None\n    first_odd = None\n    \n    # Loop through the list to find the first even and odd numbers\n    for num in numbers:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        if num % 2 != 0 and first_odd is None:\n            first_odd = num\n        \n        # Stop searching once both numbers are found\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Handle cases where the first even or odd number is not found\n    if first_even is None or first_odd is None:\n        return \"List must contain at least one even and one odd number.\"\n    \n    # Handle case where the first even number is zero\n    if first_even == 0:\n        return 0\n    \n    # Perform the division\n    return first_odd / first_even\n\n# Example usage:\nnumbers = [1, 3, 5, 0, 2, 4]\nresult = div_even_odd(numbers)\nprint(result)  # Output: 0.0\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5_tvtt_2.py\", line 25, in <module>\n    assert div_even_odd([1,3,5,7,4,1,6,8])==4\nAssertionError", "passed": false}
{"task_id": 39, "completion": "from collections import Counter\nimport heapq\n\ndef rearrange_string(s):\n    # Count the frequency of each character\n    char_count = Counter(s)\n    # Create a max heap based on the frequency of characters\n    max_heap = [(-freq, char) for char, freq in char_count.items()]\n    heapq.heapify(max_heap)\n    \n    prev_char = None\n    prev_freq = 0\n    result = []\n    \n    while max_heap:\n        freq, char = heapq.heappop(max_heap)\n        # Append the current character to the result\n        result.append(char)\n        \n        # If there's a previous character with non-zero frequency, push it back to the heap\n        if prev_char and prev_freq < 0:\n            heapq.heappush(max_heap, (prev_freq, prev_char))\n        \n        # Update the previous character and its frequency\n        prev_char = char\n        prev_freq = freq + 1  # Decrease frequency since we used one occurrence of this character\n    \n    # Join the list to form the rearranged string\n    rearranged = ''.join(result)\n    \n    # Check if the rearranged string is valid\n    if len(rearranged) != len(s):\n        return \"\"\n    return rearranged\n\n# Example usage:\nprint(rearrange_string(\"aabbcc\"))  # Output could be \"abcabc\" or another valid rearrangement\nprint(rearrange_string(\"aaab\"))    # Output: \"\" (not possible to rearrange)\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp76j1wow5.py\", line 31, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "completion": "from collections import Counter\n\ndef freq_element(list_of_lists):\n    if not list_of_lists:\n        return {}\n    \n    # Flatten the list of lists\n    flat_list = [item for sublist in list_of_lists for item in sublist]\n    \n    # Use Counter to count the frequency of each element\n    frequency = Counter(flat_list)\n    \n    return dict(frequency)\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\nprint(freq_element(list_of_lists))  # Output: {1: 1, 2: 2, 3: 3, 4: 2, 5: 1}\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 41, "completion": "def filter_evennumbers(numbers):\n    if not numbers:\n        return []\n    return list(filter(lambda x: x % 2 == 0, numbers))\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 42, "completion": "def find_sum(arr):\n    if not arr:\n        return 0\n    \n    # Create a dictionary to store the frequency of each element\n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    \n    # Calculate the sum of repeated elements\n    sum_repeated = 0\n    for num, count in frequency.items():\n        if count > 1:\n            sum_repeated += num * count\n    \n    return sum_repeated\n\n# Example usage:\narr = [1, 2, 3, 2, 4, 5, 5, 5]\nresult = find_sum(arr)\nprint(result)  # Output: 17 (2*2 + 5*3)\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpidriqjqg.py\", line 21, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    if not text:\n        return 'Not matched!'\n    pattern = r'\\b[a-z]+(?:_[a-z]+)+\\b'\n    if re.search(pattern, text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'\n\n# Test cases\nprint(text_match(\"hello_world\"))  # Matched!\nprint(text_match(\"Hello_World\"))  # Not matched!\nprint(text_match(\"hello_world_123\"))  # Not matched!\nprint(text_match(\"\"))  # Not matched!\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxjquf4j4.py\", line 15, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 44, "completion": "import re\n\ndef text_match_string(text):\n    # Check if the input text is empty or contains only spaces\n    if not text.strip():\n        return False\n    \n    # Use regular expression to match a word at the beginning of the string\n    pattern = r'^\\w+'\n    match = re.match(pattern, text)\n    \n    # Return True if a match is found, otherwise return False\n    return bool(match)\n\n# Test cases\nprint(text_match_string(\"Hello world\"))  # True, matches \"Hello\"\nprint(text_match_string(\"  Hello world\"))  # True, matches \"Hello\"\nprint(text_match_string(\"\"))  # False, empty string\nprint(text_match_string(\"   \"))  # False, string with only spaces\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpofd5a6j4.py\", line 16, in <module>\n    assert text_match_string(\" python\")==('Not matched!')\nAssertionError", "passed": false}
{"task_id": 46, "completion": "def test_distinct(numbers):\n    # Check if the list is empty or has a single element\n    if len(numbers) <= 1:\n        return True\n    \n    # Use a set to check for distinct elements\n    seen = set()\n    for number in numbers:\n        if number in seen:\n            return False\n        seen.add(number)\n    return True\n\n# Test cases\nprint(test_distinct([]))  # True, as an empty list trivially has all distinct elements\nprint(test_distinct([1]))  # True, as a single element list has all distinct elements\nprint(test_distinct([1, 2, 3, 4]))  # True, all elements are distinct\nprint(test_distinct([1, 2, 2, 4]))  # False, not all elements are distinct\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 47, "completion": "def compute_last_digit(a, b):\n    if a > b:\n        return 0  # factorial(a) cannot divide factorial(b) if a > b\n    if a == b:\n        return 1  # factorial(a) / factorial(b) is 1 when a == b\n    \n    # Calculate factorial(b) / factorial(a)\n    result = 1\n    for i in range(a + 1, b + 1):\n        result *= i\n        result %= 10  # Keep only the last digit to prevent overflow\n    \n    return result\n\n# Example usage:\nprint(compute_last_digit(3, 5))  # Output: 2 (since 5! / 3! = 20 and last digit is 0)\nprint(compute_last_digit(4, 4))  # Output: 1 (since 4! / 4! = 1)\nprint(compute_last_digit(6, 3))  # Output: 0 (since 6! cannot divide 3!)\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 48, "completion": "def odd_bit_set_number(num):\n    # Initialize a mask with all odd bits set to 1\n    mask = 0xAAAAAAAA\n    \n    # If the input number is 0, return 1 as per the edge case requirement\n    if num == 0:\n        return 1\n    \n    # Set all odd bits of the input number using bitwise OR operation\n    result = num | mask\n    \n    return result\n\n# Test cases\nprint(odd_bit_set_number(0))  # Output: 1\nprint(odd_bit_set_number(2))  # Output: 2 | 0xAAAAAAAA = 2863311370\nprint(odd_bit_set_number(10)) # Output: 10 | 0xAAAAAAAA = 2863311370\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpsf_r_d_9.py\", line 14, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(matrix, index=0):\n    \"\"\"\n    Extracts the specified element from each sublist in a two-dimensional list.\n    \n    :param matrix: A two-dimensional list (list of lists)\n    :param index: The index of the element to extract from each sublist (default is 0)\n    :return: A list containing the extracted elements\n    \"\"\"\n    result = []\n    for sublist in matrix:\n        if len(sublist) > index:\n            result.append(sublist[index])\n    return result\n\n# Example usage:\nmatrix = [[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]\nprint(specified_element(matrix))  # Output: [1, 4, 6, 10]\nprint(specified_element(matrix, 1))  # Output: [2, 5, 7]\nprint(specified_element(matrix, 2))  # Output: [3, 8]\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 50, "completion": "def min_length_list(list_of_lists):\n    if not list_of_lists:\n        return None  # Return None if the input list is empty\n    return min(list_of_lists, key=lambda x: len(x))\n\n# Example usage:\nlists = [[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]\nshortest_list = min_length_list(lists)\nprint(\"The shortest list is:\", shortest_list)\n\n# Example with lists of the same length\nsame_length_lists = [[1, 2], [3, 4], [5, 6]]\nfirst_shortest_list = min_length_list(same_length_lists)\nprint(\"The first list among those of the same length is:\", first_shortest_list)\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpzua8n81w.py\", line 13, in <module>\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nAssertionError", "passed": false}
{"task_id": 51, "completion": "def check_equilateral(a, b, c):\n    # Check if all sides are greater than zero\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    # Check if all sides are equal\n    if a == b == c:\n        return True\n    else:\n        return False\n\n# Example usage:\nprint(check_equilateral(3, 3, 3))  # Output: True\nprint(check_equilateral(3, 4, 5))  # Output: False\nprint(check_equilateral(0, 0, 0))  # Output: False\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    if base <= 0 or height <= 0:\n        return 0\n    return base * height\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(input_string):\n    # Check if the string is empty\n    if not input_string:\n        return 'Equal'\n    \n    # Compare the first and last characters of the string\n    if input_string[0] == input_string[-1]:\n        return 'Equal'\n    else:\n        return 'Not Equal'\n\n# Test cases\nprint(check_equality(\"\"))  # Output: Equal\nprint(check_equality(\"hello\"))  # Output: Not Equal\nprint(check_equality(\"radar\"))  # Output: Equal\nprint(check_equality(\"a\"))  # Output: Equal\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 54, "completion": "def counting_sort(arr):\n    # Handle edge cases\n    if len(arr) <= 1:\n        return arr\n    \n    # Find the maximum and minimum values in the array\n    max_val = max(arr)\n    min_val = min(arr)\n    \n    # Initialize the count array with zeros\n    count = [0] * (max_val - min_val + 1)\n    \n    # Count the occurrences of each element in the array\n    for num in arr:\n        count[num - min_val] += 1\n    \n    # Reconstruct the sorted array\n    sorted_arr = []\n    for i, c in enumerate(count):\n        sorted_arr.extend([i + min_val] * c)\n    \n    return sorted_arr\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 55, "completion": "def tn_gp(a, r, t):\n    \"\"\"\n    Calculate the t-nth term of a geometric series.\n    \n    Parameters:\n    a (int or float): The first term of the geometric series.\n    r (int or float): The common ratio of the geometric series.\n    t (int): The term number to find (1-based index).\n    \n    Returns:\n    int or float: The t-nth term of the geometric series.\n    \"\"\"\n    if r == 0:\n        if t == 1:\n            return a\n        else:\n            return 0\n    else:\n        return a * (r ** (t - 1))\n\n# Example usage:\nprint(tn_gp(3, 2, 4))  # Output: 24\nprint(tn_gp(5, 0, 1))  # Output: 5\nprint(tn_gp(5, 0, 3))  # Output: 0\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpfjx1r_8_.py\", line 13, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def check(number):\n    # Check if the number is a single digit or zero\n    if number < 10:\n        return number == 1  # Only 1 is one less than twice its reverse (0)\n    \n    # Convert the number to string to reverse it\n    str_number = str(number)\n    reversed_str_number = str_number[::-1]\n    \n    # Convert the reversed string back to an integer\n    reversed_number = int(reversed_str_number)\n    \n    # Check if the number is one less than twice its reverse\n    return number == 2 * reversed_number - 1\n\n# Test cases\nprint(check(0))  # False, edge case\nprint(check(1))  # True, edge case\nprint(check(10)) # False\nprint(check(21)) # True\nprint(check(18)) # False\nprint(check(12)) # True\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplnfmpp62.py\", line 23, in <module>\n    assert check(1) == False\nAssertionError", "passed": false}
{"task_id": 57, "completion": "def find_max_num(digits):\n    if not digits:\n        return 0\n    # Convert each digit to a string for sorting and joining\n    digits = [str(digit) for digit in digits]\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n    # Join the sorted digits into a single string and convert it back to an integer\n    max_num = int(''.join(digits))\n    return max_num\n\n# Example usage:\nprint(find_max_num([3, 1, 4, 1, 5]))  # Output: 54311\nprint(find_max_num([]))  # Output: 0\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9d8c3map.py\", line 14, in <module>\n    assert find_max_num([1,2,3],3) == 321\nTypeError: find_max_num() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 58, "completion": "def opposite_signs(x, y):\n    # Check if the signs of x and y are opposite\n    return (x < 0 and y >= 0) or (x >= 0 and y < 0)\n\n# Test cases\nprint(opposite_signs(10, -5))  # True, opposite signs\nprint(opposite_signs(-20, 30))  # True, opposite signs\nprint(opposite_signs(0, 100))   # False, zero is neither positive nor negative\nprint(opposite_signs(-100, 0))  # False, zero is neither positive nor negative\nprint(opposite_signs(1000000, -2000000))  # True, opposite signs\nprint(opposite_signs(-5000000, 3000000))  # True, opposite signs\nprint(opposite_signs(0, 0))     # False, both are zero\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjicepisi.py\", line 16, in <module>\n    assert opposite_signs(0, 1) == True\nAssertionError", "passed": false}
{"task_id": 59, "completion": "def is_octagonal(n):\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    return n * (3 * n - 2)\n\n# Example usage:\nfirst_octagonal = is_octagonal(1)\nprint(\"The first octagonal number is:\", first_octagonal)\n\nnth_octagonal = is_octagonal(5)\nprint(\"The 5th octagonal number is:\", nth_octagonal)\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 60, "completion": "def max_len_sub(arr):\n    if not arr:\n        return 0\n    \n    n = len(arr)\n    if n == 1:\n        return 1\n    \n    # Initialize the dp array where dp[i] will store the maximum length of subsequence\n    # ending at index i with the required property\n    dp = [1] * n\n    \n    # Initialize the maximum length of such subsequence\n    max_len = 1\n    \n    # Iterate over the array to fill dp array\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n        max_len = max(max_len, dp[i])\n    \n    return max_len\n\n# Example usage:\narr = [1, 2, 3, 4, 5]\nprint(max_len_sub(arr))  # Output: 5\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpf15964vn.py\", line 22, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}

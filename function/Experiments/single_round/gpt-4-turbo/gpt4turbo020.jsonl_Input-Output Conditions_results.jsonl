{"task_id": 14, "completion": "def find_volume(base_area, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base_area (float or int): The area of the triangular base of the prism.\n    height (float or int): The height of the triangular prism.\n    length (float or int): The length of the triangular prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    if base_area <= 0 or height <= 0 or length <= 0:\n        raise ValueError(\"All inputs must be positive numbers.\")\n    \n    volume = base_area * height * length\n    return volume\n\n# Example usage:\nbase_area = 10.5\nheight = 5.2\nlength = 12.3\nprint(find_volume(base_area, height, length))  # Output will be the volume of the triangular prism\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphdic6heg.py\", line 11, in <module>\n    assert find_volume(10,8,6) == 240\nAssertionError", "passed": false}
{"task_id": 15, "completion": "import re\n\ndef split_lowerstring(input_string):\n    # Use regular expression to split the string at lowercase letters\n    segments = re.split(r'([a-z])', input_string)\n    \n    # Filter out empty strings from the list\n    segments = [segment for segment in segments if segment]\n    \n    return segments\n\n# Example usage:\ninput_string = \"HelloWorld\"\nresult = split_lowerstring(input_string)\nprint(result)  # Output: ['H', 'e', 'llo', 'W', 'o', 'rld']\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9bui4vol.py\", line 12, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    # Regular expression pattern to find sequences of lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]+(_[a-z]+)+\\b'\n    \n    # Search for the pattern in the input text\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\nprint(text_lowercase_underscore(\"hello_world\"))  # Output: Found a match!\nprint(text_lowercase_underscore(\"Hello_World\"))  # Output: Not matched!\nprint(text_lowercase_underscore(\"hello_world_123\"))  # Output: Not matched!\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    if isinstance(side_length, int) and side_length >= 0:\n        return 4 * side_length\n    else:\n        raise ValueError(\"Input must be a non-negative integer\")", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(s1, s2):\n    # Check if input strings contain only alphabetic characters\n    if not (s1.isalpha() and s2.isalpha()):\n        raise ValueError('Input strings must only contain alphabetic characters.')\n    \n    # Create a set of characters to remove from the first string\n    remove_set = set(s2)\n    \n    # Use list comprehension to filter out characters present in remove_set\n    filtered_chars = [char for char in s1 if char not in remove_set]\n    \n    # Join the filtered characters to form the resultant string\n    result = ''.join(filtered_chars)\n    \n    return result\n\n# Example usage:\ntry:\n    result = remove_dirty_chars('hello', 'world')\n    print(result)  # Output: he\nexcept ValueError as e:\n    print(e)\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 19, "completion": "def test_duplicate(arr):\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list of integers\")\n    \n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(num):\n    n = 1\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number == num:\n            return True\n        elif woodall_number > num:\n            return False\n        n += 1\n\n# Example usage:\nprint(is_woodall(7))  # True, because 7 = 2 * 2^2 - 1\nprint(is_woodall(15)) # False\nprint(is_woodall(31)) # True, because 31 = 3 * 2^3 - 1\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists):\n    # Initialize the maximum sum to a very small number\n    max_sum = float('-inf')\n    \n    # Iterate through each sublist in the list of lists\n    for sublist in list_of_lists:\n        # Calculate the sum of the current sublist\n        current_sum = sum(sublist)\n        \n        # Update the maximum sum if the current sum is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n            \n    return max_sum\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 25, "completion": "def find_product(arr):\n    # Create a dictionary to count occurrences of each element\n    element_count = {}\n    for num in arr:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n    \n    # Calculate the product of non-repeated elements\n    product = 1\n    for num, count in element_count.items():\n        if count == 1:\n            product *= num\n    \n    return product\n\n# Example usage:\narr = [1, 2, 3, 2, 4, 5, 5]\nresult = find_product(arr)\nprint(result)  # Output: 12 (product of 1, 3, and 4)\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpp6r6m4vb.py\", line 19, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(tuple_list, k):\n    # Iterate through each tuple in the list\n    for tup in tuple_list:\n        # Check if the length of the tuple is not equal to k\n        if len(tup) != k:\n            return False\n    # If all tuples have exactly k elements, return True\n    return True\n\n# Example usage:\ntuples = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nk = 3\nprint(check_k_elements(tuples, k))  # Output: True\n\ntuples_with_different_lengths = [(1, 2, 3), (4, 5), (7, 8, 9, 10)]\nprint(check_k_elements(tuples_with_different_lengths, k))  # Output: False\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpeqj879ot.py\", line 15, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 28, "completion": "def binomial_coeff(n, k):\n    # Function to calculate factorial of a number\n    def factorial(num):\n        if num == 0 or num == 1:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    # Check if k is greater than n, if so return 0 as binomial coefficient is not defined\n    if k > n:\n        return 0\n    \n    # Calculate binomial coefficient using the factorial function\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\n# Example usage:\nresult = binomial_coeff(5, 2)\nprint(result)  # Output: 10\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    n = len(s)\n    count = 0\n    \n    # Iterate over each character in the string\n    for i in range(n):\n        # Check substrings starting from the current character\n        for j in range(i, n):\n            # If the start and end characters of the substring are the same, increment the count\n            if s[i] == s[j]:\n                count += 1\n    \n    return count\n\n# Example usage:\ninput_string = \"abcab\"\nresult = count_substring_with_equal_ends(input_string)\nprint(result)  # Output: 7\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    # Initialize the largest prime factor\n    max_prime = -1\n    \n    # Check for number of 2s that divide n\n    while n % 2 == 0:\n        max_prime = 2\n        n >>= 1  # equivalent to n //= 2\n    \n    # n must be odd at this point, thus skip even numbers and iterate only for odd integers\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n // i\n    \n    # This condition is to check if n is a prime number greater than 2\n    if n > 2:\n        max_prime = n\n    \n    return int(max_prime)\n\n# Example usage:\nnumber = 315\nprint(f\"The largest prime factor of {number} is {max_prime_factors(number)}\")\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 35, "completion": "def find_rect_num(n):\n    return n * (n + 1) // 2\n\n# Example usage:\nn = 5\nresult = find_rect_num(n)\nprint(f\"The {n}-th rectangular number is: {result}\")\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmptlvytee4.py\", line 7, in <module>\n    assert find_rect_num(4) == 20\nAssertionError", "passed": false}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator, n):\n    # Ensure n is a positive integer\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    # Calculate the decimal representation of the fraction\n    result = numerator / denominator\n    \n    # Convert the result to a string to access digits\n    result_str = str(result)\n    \n    # Find the position of the decimal point\n    decimal_index = result_str.find('.')\n    \n    # Calculate the index of the nth digit after the decimal point\n    target_index = decimal_index + n\n    \n    # Check if the target index is within the bounds of the string\n    if target_index >= len(result_str):\n        return 0  # Return 0 if the nth digit does not exist (e.g., the decimal terminates before the nth digit)\n    \n    # Return the nth digit as an integer\n    return int(result_str[target_index])\n\n# Example usage:\nprint(find_nth_digit(1, 3, 1))  # Output: 3 (since 1/3 = 0.3333... and the 1st digit is 3)\nprint(find_nth_digit(1, 3, 4))  # Output: 3 (since 1/3 = 0.3333... and the 4th digit is 3)\nprint(find_nth_digit(1, 7, 6))  # Output: 8 (since 1/7 = 0.142857142857... and the 6th digit is 8)\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 38, "completion": "def div_even_odd(numbers):\n    first_even = None\n    first_odd = None\n    \n    # Loop through the list to find the first even and odd numbers\n    for num in numbers:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        if num % 2 != 0 and first_odd is None:\n            first_odd = num\n        \n        # If both first even and odd numbers are found, break the loop\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # If either first_even or first_odd is not found, return None\n    if first_even is None or first_odd is None:\n        return None\n    \n    # Return the division of the first even number by the first odd number\n    return first_even / first_odd\n\n# Example usage:\nnumbers = [1, 3, 5, 2, 4, 6]\nresult = div_even_odd(numbers)\nprint(result)  # Output: 2.0\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 39, "completion": "from collections import Counter\nimport heapq\n\ndef rearrange_string(s):\n    # Count the frequency of each character\n    char_count = Counter(s)\n    # Create a max heap based on the frequency of characters\n    max_heap = [(-freq, char) for char, freq in char_count.items()]\n    heapq.heapify(max_heap)\n    \n    prev_char = None\n    prev_freq = 0\n    result = []\n    \n    while max_heap:\n        freq, char = heapq.heappop(max_heap)\n        # Append the current character to the result\n        result.append(char)\n        \n        # If there's a previous character with non-zero frequency, push it back to the heap\n        if prev_freq < 0:\n            heapq.heappush(max_heap, (prev_freq, prev_char))\n        \n        # Update the previous character and its frequency\n        prev_char = char\n        prev_freq = freq + 1  # Decrease the frequency\n    \n    # Join the list to form the final rearranged string\n    rearranged = ''.join(result)\n    \n    # Check if the rearranged string meets the condition\n    if len(rearranged) != len(s):\n        return \"\"\n    return rearranged\n\n# Example usage:\ninput_string = \"aabbcc\"\noutput_string = rearrange_string(input_string)\nprint(output_string)  # Output could be \"abcabc\" or another valid rearrangement\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3loow3gn.py\", line 32, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 42, "completion": "def find_sum(arr):\n    # Create a dictionary to store the frequency of each element\n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    \n    # Calculate the sum of repeated elements\n    sum_repeated = 0\n    for num, count in frequency.items():\n        if count > 1:\n            sum_repeated += num * count\n    \n    return sum_repeated\n\n# Example usage:\narr = [1, 2, 3, 2, 4, 5, 5, 5]\nresult = find_sum(arr)\nprint(result)  # Output: 17 (2*2 + 5*3)\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6gx3gzgg.py\", line 19, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    pattern = r'^[a-z]+(_[a-z]+)+$'\n    if re.match(pattern, text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'\n\n# Test cases\nprint(text_match(\"hello_world\"))  # Matched!\nprint(text_match(\"hello_World\"))  # Not matched!\nprint(text_match(\"hello_world_123\"))  # Not matched!\nprint(text_match(\"hello\"))  # Not matched!\nprint(text_match(\"hello_world_again\"))  # Matched!\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpei_2jf4s.py\", line 14, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 46, "completion": "def test_distinct(numbers):\n    # Use a set to store unique numbers\n    unique_numbers = set(numbers)\n    \n    # Compare the length of the set with the length of the original list\n    return len(unique_numbers) == len(numbers)\n\n# Example usage:\nnumbers = [1, 2, 3, 4, 5]\nprint(test_distinct(numbers))  # Output: True\n\nnumbers = [1, 2, 3, 4, 1]\nprint(test_distinct(numbers))  # Output: False\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 48, "completion": "def odd_bit_set_number(num):\n    # Initialize a mask with all odd bits set to 1\n    mask = 0xAAAAAAAA\n    \n    # Set all odd bits of the input number using bitwise OR operation\n    result = num | mask\n    \n    return result\n\n# Example usage:\nnum = 10  # Binary representation: 1010\nresult = odd_bit_set_number(num)\nprint(f\"Original number: {num} (binary: {bin(num)})\")\nprint(f\"Number with odd bits set: {result} (binary: {bin(result)})\")\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4v426hdc.py\", line 12, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(two_dim_list, index):\n    # Check if the input list is empty\n    if not two_dim_list:\n        return []\n    \n    # Initialize an empty list to store the elements\n    result = []\n    \n    # Iterate through each sublist in the two-dimensional list\n    for sublist in two_dim_list:\n        # Check if the index is within the bounds of the sublist\n        if index < len(sublist):\n            # Append the element at the specified index to the result list\n            result.append(sublist[index])\n    \n    return result\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 50, "completion": "def min_length_list(list_of_lists):\n    # Use the min function with a lambda function as the key to find the list with the minimum length\n    min_list = min(list_of_lists, key=lambda x: len(x))\n    # Return a tuple containing the length of the shortest list and the list itself\n    return (len(min_list), min_list)\n\n# Example usage:\nlists = [[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]\nresult = min_length_list(lists)\nprint(result)  # Output: (1, [6])\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    if base <= 0 or height <= 0:\n        raise ValueError(\"Base and height must be positive numbers.\")\n    area = base * height\n    return area\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpyum6y8qi.py\", line 10, in <module>\n    assert parallelogram_area(0, 10) == 0\n  File \"/tmp/tmpyum6y8qi.py\", line 3, in parallelogram_area\n    raise ValueError(\"Base and height must be positive numbers.\")\nValueError: Base and height must be positive numbers.", "passed": false}
{"task_id": 53, "completion": "def check_equality(input_string):\n    if not isinstance(input_string, str):\n        raise ValueError(\"Input must be a string\")\n    \n    if input_string[0] == input_string[-1]:\n        return 'Equal'\n    else:\n        return 'Not Equal'\n\n# Example usage:\nresult = check_equality(\"hello\")\nprint(result)  # Output: Not Equal\n\nresult = check_equality(\"radar\")\nprint(result)  # Output: Equal\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 54, "completion": "def counting_sort(arr):\n    # Check if the input is a list of non-negative integers\n    if not all(isinstance(x, int) and x >= 0 for x in arr):\n        raise ValueError(\"Input should be a list of non-negative integers\")\n    \n    # Find the maximum element in the array\n    max_val = max(arr) if arr else 0\n    \n    # Initialize the count array with zeros\n    count = [0] * (max_val + 1)\n    \n    # Count the occurrences of each element in the input array\n    for num in arr:\n        count[num] += 1\n    \n    # Initialize the output array\n    output = []\n    \n    # Build the output array using the count array\n    for i, c in enumerate(count):\n        output.extend([i] * c)\n    \n    return output\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 57, "completion": "from itertools import permutations\n\ndef find_max_num(digits, num_digits):\n    # Convert the list of integers to a list of strings\n    digits_str = [str(digit) for digit in digits]\n    \n    # Generate all possible permutations of the given digits with the specified length\n    all_combinations = permutations(digits_str, num_digits)\n    \n    # Join each tuple of digits to form numbers and convert them to integers\n    possible_numbers = [int(''.join(combination)) for combination in all_combinations]\n    \n    # Return the maximum number from the list of possible numbers\n    return max(possible_numbers)\n\n# Example usage:\ndigits = [3, 5, 9, 1]\nnum_digits = 3\nprint(find_max_num(digits, num_digits))  # Output: 953\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 58, "completion": "def opposite_signs(x, y):\n    # Check if x and y are both integers\n    if not isinstance(x, int) or not isinstance(y, int):\n        raise ValueError(\"Both inputs must be integers\")\n    \n    # XOR the signs of x and y, if result is negative then they have opposite signs\n    return (x ^ y) < 0\n\n# Example usage:\nprint(opposite_signs(10, -20))  # Output: True\nprint(opposite_signs(-5, -10))  # Output: False\nprint(opposite_signs(15, 30))   # Output: False\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 60, "completion": "def max_len_sub(arr, diff):\n    if not arr:\n        return 0\n    \n    n = len(arr)\n    # Dictionary to store the maximum length of subsequence ending at each index\n    dp = {}\n    \n    max_length = 1\n    \n    for i in range(n):\n        dp[i] = 1  # Each element is a subsequence of length 1 by itself\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == diff:\n                dp[i] = max(dp[i], dp[j] + 1)\n        max_length = max(max_length, dp[i])\n    \n    return max_length\n\n# Example usage:\narr = [1, 5, 3, 4, 2]\ndiff = 1\nprint(max_len_sub(arr, diff))  # Output: 3 (subsequence [1, 2, 3] or [5, 4, 3])\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphie4sd58.py\", line 19, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nAssertionError", "passed": false}

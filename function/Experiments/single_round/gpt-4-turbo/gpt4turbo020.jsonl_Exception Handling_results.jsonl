{"task_id": 11, "completion": "def remove_occ(input_string, char_to_remove):\n    if len(char_to_remove) != 1:\n        raise ValueError('Second parameter must be a single character.')\n    \n    # Find the first occurrence of the character\n    first_index = input_string.find(char_to_remove)\n    if first_index == -1:\n        return input_string  # Character not found, return original string\n    \n    # Remove the first occurrence\n    input_string = input_string[:first_index] + input_string[first_index + 1:]\n    \n    # Find the last occurrence of the character\n    last_index = input_string.rfind(char_to_remove)\n    if last_index == -1:\n        return input_string  # Character not found after removing the first, return modified string\n    \n    # Remove the last occurrence\n    input_string = input_string[:last_index] + input_string[last_index + 1:]\n    \n    return input_string\n\n# Example usage:\ntry:\n    result = remove_occ(\"hello world\", \"l\")\n    print(result)  # Output: \"heo world\"\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 12, "completion": "def sort_matrix(matrix):\n    # Check if the input is a list of lists\n    if not all(isinstance(row, list) for row in matrix):\n        raise TypeError(\"Input should be a list of lists\")\n    \n    # Check if all elements in the matrix are integers\n    for row in matrix:\n        if not all(isinstance(element, int) for element in row):\n            raise TypeError(\"All elements in the matrix must be integers\")\n    \n    # Sort the matrix based on the sum of its rows\n    sorted_matrix = sorted(matrix, key=sum)\n    \n    return sorted_matrix\n\n# Example usage:\nmatrix = [\n    [3, 2, 1],\n    [4, 6, 5],\n    [9, 7, 8]\n]\n\ntry:\n    sorted_matrix = sort_matrix(matrix)\n    print(\"Sorted Matrix:\")\n    for row in sorted_matrix:\n        print(row)\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 13, "completion": "from collections import Counter\n\ndef count_common(words):\n    if not isinstance(words, list) or not all(isinstance(word, str) for word in words):\n        raise TypeError(\"Input must be a list of strings\")\n    \n    word_counts = Counter(words)\n    most_common_words = word_counts.most_common()\n    \n    return most_common_words\n\n# Example usage:\nwords = [\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"banana\"]\ntry:\n    print(count_common(words))\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_qhzdnok.py\", line 14, in <module>\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nAssertionError", "passed": false}
{"task_id": 14, "completion": "def find_volume(base, height, length):\n    # Check if inputs are non-positive or non-numeric\n    if not all(isinstance(x, (int, float)) and x > 0 for x in [base, height, length]):\n        raise ValueError(\"All dimensions must be positive numbers.\")\n    \n    # Calculate the area of the triangular base\n    area_of_triangle = 0.5 * base * height\n    \n    # Calculate the volume of the triangular prism\n    volume = area_of_triangle * length\n    \n    return volume\n\n# Example usage:\ntry:\n    print(find_volume(3, 4, 5))  # Should print 30.0\n    print(find_volume(-1, 4, 5))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 15, "completion": "def split_lowerstring(input_string):\n    if not isinstance(input_string, str):\n        raise TypeError(\"Input must be a string\")\n    \n    result = []\n    current_segment = []\n    \n    for char in input_string:\n        if char.islower():\n            if current_segment:\n                result.append(''.join(current_segment))\n                current_segment = []\n        else:\n            current_segment.append(char)\n    \n    if current_segment:\n        result.append(''.join(current_segment))\n    \n    return result\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpbratf6mo.py\", line 19\n    try: split_lowerstring(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    pattern = r'\\b[a-z]+(?:_[a-z]+)+\\b'\n    matches = re.findall(pattern, text)\n    return matches\n\n# Example usage:\ninput_text = \"hello_world this_is_a_test exampleText not_a_match\"\nresult = text_lowercase_underscore(input_text)\nprint(result)  # Output: ['hello_world', 'this_is_a_test']\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpm5iiejfo.py\", line 12, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative\")\n    return 4 * side_length\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(s1, s2):\n    if not isinstance(s1, str) or not isinstance(s2, str):\n        raise TypeError(\"Both inputs must be strings\")\n    \n    # Create a set of characters to remove from the first string\n    remove_set = set(s2)\n    \n    # Use a list comprehension to filter out characters in remove_set\n    filtered_chars = [char for char in s1 if char not in remove_set]\n    \n    # Join the filtered characters to form the resulting string\n    result = ''.join(filtered_chars)\n    \n    return result\n\n# Example usage:\ns1 = \"hello world\"\ns2 = \"aeiou\"\ntry:\n    result = remove_dirty_chars(s1, s2)\n    print(result)  # Output: hll wrld\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 19, "completion": "def test_duplicate(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise ValueError('Input must be a list of integers')\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(item, int) for item in arr):\n        raise ValueError('Input must be a list of integers')\n    \n    # Use a set to find duplicates\n    seen = set()\n    for number in arr:\n        if number in seen:\n            return True\n        seen.add(number)\n    return False\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvpljyzr0.py\", line 19, in <module>\n    test_duplicate(None)\n  File \"/tmp/tmpvpljyzr0.py\", line 4, in test_duplicate\n    raise ValueError('Input must be a list of integers')\nValueError: Input must be a list of integers", "passed": false}
{"task_id": 20, "completion": "def is_woodall(n):\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    i = 1\n    while True:\n        woodall_number = i * (2 ** i) - 1\n        if woodall_number == n:\n            return True\n        elif woodall_number > n:\n            return False\n        i += 1\n\n# Example usage:\ntry:\n    print(is_woodall(7))  # True\n    print(is_woodall(15)) # False\n    print(is_woodall(31)) # True\n    print(is_woodall(\"31\")) # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 21, "completion": "def multiples_of_num(m, n):\n    if m < 0 or n < 0:\n        raise ValueError(\"Both m and n must be non-negative integers\")\n    \n    multiples = []\n    for i in range(1, m+1):\n        multiples.append(n * i)\n    \n    return multiples\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 22, "completion": "def find_first_duplicate(arr):\n    # Check if input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements in the list must be integers\")\n    \n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    \n    return None  # Return None if there is no duplicate\n\n# Example usage:\ntry:\n    print(find_first_duplicate([1, 2, 3, 4, 2, 5]))  # Output: 2\n    print(find_first_duplicate([1, 2, 3, 4, 5]))    # Output: None\n    print(find_first_duplicate(\"not a list\"))       # Raises TypeError\n    print(find_first_duplicate([1, 2, '3', 4]))     # Raises TypeError\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplnvkjdsv.py\", line 23, in <module>\n    assert find_first_duplicate([1, 2, 3, 4])==-1\nAssertionError", "passed": false}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists):\n    # Check if the input is a list\n    if not isinstance(list_of_lists, list):\n        raise TypeError(\"Input must be a list of lists\")\n    \n    # Initialize variable to store the maximum sum\n    max_sum = None\n    \n    # Iterate through each sublist in the list of lists\n    for sublist in list_of_lists:\n        # Check if the current element is a list\n        if not isinstance(sublist, list):\n            raise TypeError(\"Input must be a list of lists\")\n        \n        # Check if all elements in the sublist are integers\n        if not all(isinstance(item, int) for item in sublist):\n            raise TypeError(\"All elements in sublists must be integers\")\n        \n        # Calculate the sum of the current sublist\n        current_sum = sum(sublist)\n        \n        # Update max_sum if it's None or if the current sum is greater\n        if max_sum is None or current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(maximum_sum(list_of_lists))  # Output: 24\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpj1by_6b7.py\", line 27\n    try: maximum_sum([[1, 2], [3, 'a']]); assert False, 'Expected TypeError' except TypeError: pass\n                                                                             ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 24, "completion": "def binary_to_decimal(binary_str):\n    # Check if the input is a valid binary string\n    if not all(char in '01' for char in binary_str):\n        raise ValueError('Invalid binary number')\n    \n    # Convert binary string to decimal\n    decimal = 0\n    for char in binary_str:\n        decimal = decimal * 2 + int(char)\n    \n    return decimal\n\n# Example usage:\ntry:\n    result = binary_to_decimal('1010')\n    print(f\"The decimal equivalent of '1010' is {result}\")\nexcept ValueError as e:\n    print(e)\n\ntry:\n    result = binary_to_decimal('1020')\n    print(f\"The decimal equivalent of '1020' is {result}\")\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmp1tpqba30.py\", line 24\n    try: binary_to_decimal('102'); assert False, 'Expected ValueError' except ValueError as e: assert str(e) == 'Invalid binary number'\n                                                                       ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 25, "completion": "def find_product(arr):\n    # Check if input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements in the list must be integers\")\n    \n    # Create a dictionary to count occurrences of each element\n    element_count = {}\n    for num in arr:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n    \n    # Calculate the product of non-repeated elements\n    product = 1\n    for num, count in element_count.items():\n        if count == 1:  # Only consider non-repeated elements\n            product *= num\n    \n    return product\n\n# Example usage:\narr = [1, 2, 3, 2, 5]\nprint(find_product(arr))  # Output: 15 (product of 1, 3, and 5)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmptc7rbwls.py\", line 24, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(tuple_list, k):\n    # Check if the input is a list of tuples\n    if not isinstance(tuple_list, list) or not all(isinstance(item, tuple) for item in tuple_list):\n        raise TypeError(\"Input must be a list of tuples\")\n    \n    # Check if k is an integer\n    if not isinstance(k, int):\n        raise TypeError(\"k must be an integer\")\n    \n    # Check if all tuples in the list have exactly k elements\n    return all(len(tup) == k for tup in tuple_list)\n\n# Example usage:\ntry:\n    tuple_list = [(1, 2), (3, 4), (5, 6)]\n    k = 2\n    result = check_k_elements(tuple_list, k)\n    print(f\"All tuples have {k} elements: {result}\")\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5_3qccj8.py\", line 18, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "completion": "def remove(input_list):\n    # Check if input is a list\n    if not isinstance(input_list, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if all elements in the list are strings\n    if not all(isinstance(item, str) for item in input_list):\n        raise TypeError(\"All elements in the list must be strings\")\n    \n    # Remove digits from each string in the list\n    output_list = [''.join(char for char in item if not char.isdigit()) for item in input_list]\n    \n    return output_list\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 28, "completion": "def binomial_coeff(n, k):\n    # Check if inputs are valid\n    if n < 0 or k < 0 or k > n:\n        raise ValueError(\"Inputs must be non-negative and k must not be greater than n\")\n    \n    # Function to calculate factorial\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x - 1)\n    \n    # Calculate binomial coefficient using the formula\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\n# Example usage:\ntry:\n    result = binomial_coeff(5, 2)\n    print(\"Binomial Coefficient:\", result)\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 29, "completion": "def get_odd_occurrence(arr):\n    # Check if input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements in the list must be integers\")\n    \n    # Initialize dictionary to store the count of each element\n    count_dict = {}\n    \n    # Count the occurrences of each element\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Find the element with an odd count\n    for key, value in count_dict.items():\n        if value % 2 != 0:\n            return key\n    \n    # If no element has an odd count, return None\n    return None\n\n# Example usage:\ntry:\n    print(get_odd_occurrence([1, 2, 3, 2, 3, 1, 3]))  # Output: 3\n    print(get_odd_occurrence([20, 15, 20, 15, 15]))   # Output: 15\n    print(get_odd_occurrence([1, 1, 2, 2, 3, 3]))     # Output: None\n    print(get_odd_occurrence(\"not a list\"))           # Raises TypeError\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjttqbpvp.py\", line 30, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    \n    n = len(s)\n    count = 0\n    \n    # Iterate over all possible substrings\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n    \n    return count\n\n# Example usage:\ntry:\n    result = count_substring_with_equal_ends(\"abcab\")\n    print(\"Number of substrings starting and ending with the same character:\", result)\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmp0gyyrgli.py\", line 21\n    try: count_substring_with_equal_ends(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                                  ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 31, "completion": "import heapq\nfrom collections import Counter\n\ndef func(lists, k):\n    # Flatten the list of lists and count the frequency of each integer\n    flat_list = [item for sublist in lists for item in sublist]\n    frequency = Counter(flat_list)\n    \n    # Check if k is greater than the number of distinct integers\n    if k > len(frequency):\n        raise ValueError('k cannot be greater than the number of distinct integers')\n    \n    # Use a heap to find the top k frequent elements\n    # heapq.nlargest returns the k largest elements from the iterable, as specified by the key function\n    top_k = heapq.nlargest(k, frequency.keys(), key=frequency.get)\n    \n    return top_k\n\n# Example usage:\nlists = [[1, 3, 5], [2, 3, 6], [1, 2, 4]]\nk = 2\nprint(func(lists, k))  # Output: [1, 2] or [1, 3] or [2, 3] depending on the internal ordering in the heap\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmph67hnys9.py\", line 18, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    # Check if the input is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    # Initialize the largest prime factor\n    largest_prime = None\n    \n    # Divide n by 2 until it becomes odd\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n    \n    # Check for odd factors from 3 to sqrt(n)\n    factor = 3\n    while factor * factor <= n:\n        while n % factor == 0:\n            largest_prime = factor\n            n //= factor\n        factor += 2\n    \n    # If n is still greater than 2, then it is prime\n    if n > 2:\n        largest_prime = n\n    \n    return largest_prime\n\n# Example usage:\ntry:\n    print(max_prime_factors(13195))  # Output: 29\n    print(max_prime_factors(-10))    # This will raise a ValueError\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(decimal):\n    # Check if the input is a non-negative integer\n    if not isinstance(decimal, int) or decimal < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    # Special case for 0\n    if decimal == 0:\n        return '0'\n    \n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    \n    return binary\n\n# Example usage:\ntry:\n    print(decimal_to_binary(10))  # Output: 1010\n    print(decimal_to_binary(0))   # Output: 0\n    print(decimal_to_binary(255)) # Output: 11111111\n    print(decimal_to_binary(-1))  # This will raise ValueError\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgvfs7m_7.py\", line 21, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "completion": "def find_missing(arr):\n    # Check if the input list is sorted\n    if not all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1)):\n        raise ValueError(\"Input list must be sorted.\")\n    \n    # Find the missing number using the difference between indices and elements\n    for i in range(len(arr)):\n        if arr[i] != i + arr[0]:\n            return i + arr[0]\n    \n    # If no missing number is found within the list, assume the next number in sequence is missing\n    return arr[-1] + 1\n\n# Example usage:\ntry:\n    print(find_missing([1, 2, 3, 5]))  # Output: 4\n    print(find_missing([1, 3, 4, 5]))  # Output: 2\n    print(find_missing([2, 3, 4, 6]))  # Output: 5\n    print(find_missing([1, 2, 3, 4]))  # Output: 5 (no missing number within the list)\n    print(find_missing([3, 1, 2]))     # This will raise ValueError\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvjp1cr8n.py\", line 20, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    return n * (n + 1) // 2\n\n# Example usage:\ntry:\n    result = find_rect_num(5)\n    print(f\"The 5th rectangular number is: {result}\")\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp47wv8pwt.py\", line 11, in <module>\n    assert find_rect_num(4) == 20\nAssertionError", "passed": false}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator, n):\n    if denominator == 0:\n        raise ValueError('Denominator cannot be zero')\n    \n    # Get the decimal part of the division\n    result = numerator / denominator\n    \n    # Convert the result to a string to access digits easily\n    result_str = str(result)\n    \n    # Find the position of the decimal point\n    decimal_index = result_str.find('.')\n    \n    # Calculate the index of the nth digit after the decimal point\n    target_index = decimal_index + n\n    \n    # Check if the target index is within the bounds of the string\n    if target_index >= len(result_str):\n        return None  # or raise an error if preferred\n    \n    # Return the nth digit as an integer\n    return int(result_str[target_index])\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 37, "completion": "def sort_mixed_list(mixed_list):\n    # Check if the input is a list\n    if not isinstance(mixed_list, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if all elements are either integers or strings\n    if not all(isinstance(item, (int, str)) for item in mixed_list):\n        raise TypeError(\"All elements in the list must be either integers or strings\")\n    \n    # Sort the list by converting all elements to strings for comparison\n    sorted_list = sorted(mixed_list, key=str)\n    \n    return sorted_list\n\n# Example usage:\nmixed_list = [3, \"banana\", 1, \"apple\", 2, \"cherry\"]\nsorted_mixed_list = sort_mixed_list(mixed_list)\nprint(sorted_mixed_list)  # Output: [1, 2, 3, 'apple', 'banana', 'cherry']\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 38, "completion": "def div_even_odd(numbers):\n    even = None\n    odd = None\n    \n    for num in numbers:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 != 0 and odd is None:\n            odd = num\n        \n        if even is not None and odd is not None:\n            break\n    \n    if even is None or odd is None:\n        raise ValueError(\"List must contain at least one even and one odd number.\")\n    \n    return even / odd\n\n# Example usage:\nnumbers = [2, 4, 6, 7, 8]\nresult = div_even_odd(numbers)\nprint(result)  # Output: 0.2857142857142857\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmp1kakktay.py\", line 21\n    try: div_even_odd([2, 4, 6]); assert False; except ValueError as e: assert str(e) == 'List must contain at least one even and one odd number.'\n                                                ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 39, "completion": "from collections import Counter\nimport heapq\n\ndef rearrange_string(s):\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string.\")\n    if not s.islower() or not s.isalpha():\n        raise ValueError(\"String must contain only lowercase letters.\")\n    \n    # Count frequency of each character\n    char_count = Counter(s)\n    # Create a max heap based on the frequency of characters\n    max_heap = [(-freq, char) for char, freq in char_count.items()]\n    heapq.heapify(max_heap)\n    \n    prev_char = None\n    prev_freq = 0\n    result = []\n    \n    while max_heap:\n        freq, char = heapq.heappop(max_heap)\n        # Append the current character to the result\n        result.append(char)\n        \n        # If there's a previous character with non-zero frequency, push it back to the heap\n        if prev_char and prev_freq < 0:\n            heapq.heappush(max_heap, (prev_freq, prev_char))\n        \n        # Update previous character and its frequency\n        prev_char = char\n        prev_freq = freq + 1  # Increment frequency since it's stored as negative in the heap\n    \n    # Join the list to form the rearranged string\n    rearranged = ''.join(result)\n    # Check if the rearranged string meets the condition\n    for i in range(1, len(rearranged)):\n        if rearranged[i] == rearranged[i-1]:\n            return False\n    \n    return rearranged\n\n# Example usage:\nprint(rearrange_string(\"aabbcc\"))  # Output could be \"abcabc\"\nprint(rearrange_string(\"aaab\"))    # Output: False\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpggbt0svi.py\", line 36, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "completion": "from collections import Counter\nfrom typing import List, Any\n\ndef freq_element(list_of_lists: List[List[Any]]) -> dict:\n    if not all(isinstance(sublist, list) for sublist in list_of_lists):\n        raise TypeError(\"Input must be a list of lists\")\n    \n    # Flatten the list of lists\n    flat_list = [item for sublist in list_of_lists for item in sublist]\n    \n    # Use Counter to count frequency of elements\n    frequency = Counter(flat_list)\n    \n    return frequency\n\n# Example usage:\ntry:\n    example_list = [[1, 2, 2], [3, 4, 4, 4], [5]]\n    print(freq_element(example_list))\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmps72krcjy.py\", line 20\n    try: freq_element('not a list'); assert False; except TypeError: assert True\n                                                   ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 41, "completion": "def filter_evennumbers(numbers):\n    if not isinstance(numbers, list) or not all(isinstance(n, int) for n in numbers):\n        raise TypeError(\"Input must be a list of integers\")\n    \n    return list(filter(lambda x: x % 2 == 0, numbers))\n\n# Example usage:\ntry:\n    result = filter_evennumbers([1, 2, 3, 4, 5, 6])\n    print(result)  # Output: [2, 4, 6]\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 42, "completion": "def find_sum(arr):\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Dictionary to store the count of each element\n    element_count = {}\n    for element in arr:\n        if element in element_count:\n            element_count[element] += 1\n        else:\n            element_count[element] = 1\n    \n    # Calculate the sum of repeated elements\n    sum_repeated_elements = 0\n    for element, count in element_count.items():\n        if count > 1:\n            sum_repeated_elements += element * count\n    \n    return sum_repeated_elements\n\n# Example usage:\ntry:\n    print(find_sum([1, 2, 3, 2, 3, 3]))  # Output: 13 (2*2 + 3*3)\n    print(find_sum(\"not a list\"))  # This will raise a TypeError\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpufa7ypnq.py\", line 23, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    matches = re.findall(pattern, text)\n    return matches\n\n# Example usage:\ninput_text = \"hello_world this_is_a_test example_text\"\nresult = text_match(input_text)\nprint(result)  # Output: ['hello_world', 'this_is_a_test', 'example_text']\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpawjy6zxi.py\", line 12, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 44, "completion": "import re\n\ndef text_match_string(text):\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    pattern = r'^\\w+'\n    match = re.match(pattern, text)\n    \n    if match:\n        return match.group()\n    else:\n        return None\n\n# Example usage:\ntry:\n    result = text_match_string(\"Hello World\")\n    print(result)  # Output: Hello\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmp501mmg0m.py\", line 20\n    try: text_match_string(123); assert False, 'TypeError not raised' except TypeError: pass\n                                                                      ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 45, "completion": "from functools import reduce\nimport math\n\ndef get_gcd(arr):\n    if not arr:\n        raise ValueError('Input list cannot be empty.')\n    \n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    \n    return reduce(gcd, arr)\n\n# Example usage:\narr = [24, 36, 48]\nprint(get_gcd(arr))  # Output: 12\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 46, "completion": "def test_distinct(numbers):\n    # Check if the input is a list\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(num, int) for num in numbers):\n        raise TypeError(\"All elements in the list must be integers\")\n    \n    # Check if all numbers are distinct\n    return len(numbers) == len(set(numbers))\n\n# Example usage:\ntry:\n    result = test_distinct([1, 2, 3, 4, 5])\n    print(\"All numbers are distinct:\", result)\nexcept TypeError as e:\n    print(e)\n\ntry:\n    result = test_distinct([1, 2, 3, 3, 5])\n    print(\"All numbers are distinct:\", result)\nexcept TypeError as e:\n    print(e)\n\ntry:\n    result = test_distinct(\"not a list\")\n    print(\"All numbers are distinct:\", result)\nexcept TypeError as e:\n    print(e)\n\ntry:\n    result = test_distinct([1, 2, 'three', 4, 5])\n    print(\"All numbers are distinct:\", result)\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 47, "completion": "def compute_last_digit(a, b):\n    if a > b:\n        raise ValueError('a should not be greater than b')\n    \n    # Calculate factorial of b and a\n    factorial_b = 1\n    for i in range(1, b + 1):\n        factorial_b *= i\n    \n    factorial_a = 1\n    for i in range(1, a + 1):\n        factorial_a *= i\n    \n    # Calculate the division of factorial_b by factorial_a\n    result = factorial_b // factorial_a\n    \n    # Get the last digit\n    last_digit = result % 10\n    \n    return last_digit\n\n# Example usage:\nprint(compute_last_digit(5, 10))  # Output will be the last digit of 10! / 5!\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 48, "completion": "def odd_bit_set_number(num):\n    if not isinstance(num, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    # Create a mask with odd bits set\n    mask = 0\n    for i in range(0, num.bit_length() + 1, 2):\n        mask |= (1 << i)\n    \n    # Set the odd bits of the number using bitwise OR\n    return num | mask\n\n# Example usage:\ntry:\n    result = odd_bit_set_number(10)\n    print(f\"The result of setting odd bits in 10 is: {result}\")\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9yfue1rh.py\", line 16, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(two_dim_list, index=0):\n    result = []\n    for sublist in two_dim_list:\n        if index >= len(sublist):\n            raise IndexError('Index out of range for sublist')\n        result.append(sublist[index])\n    return result\n\n# Example usage:\ntry:\n    data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(specified_element(data))  # Output: [1, 4, 7]\n    print(specified_element(data, 1))  # Output: [2, 5, 8]\n    print(specified_element(data, 3))  # This will raise an IndexError\nexcept IndexError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 50, "completion": "def min_length_list(list_of_lists):\n    # Check if the input is a list of lists\n    if not all(isinstance(lst, list) for lst in list_of_lists):\n        raise ValueError('Input must be a list of lists.')\n    \n    # Use a lambda function to find the list with the minimum length\n    return min(list_of_lists, key=lambda x: len(x))\n\n# Example usage:\ntry:\n    example_input = [[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]\n    result = min_length_list(example_input)\n    print(\"The list with the minimum length is:\", result)\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpzcn_1np6.py\", line 14, in <module>\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nAssertionError", "passed": false}
{"task_id": 51, "completion": "def check_equilateral(a, b, c):\n    # Check if inputs are non-positive integers\n    if a <= 0 or b <= 0 or c <= 0:\n        raise ValueError(\"All sides must be positive integers.\")\n    \n    # Check if all sides are equal\n    if a == b == c:\n        print(\"The triangle is equilateral.\")\n    else:\n        print(\"The triangle is not equilateral.\")\n\n# Example usage:\ntry:\n    check_equilateral(3, 3, 3)  # Equilateral\n    check_equilateral(3, 4, 5)  # Not equilateral\n    check_equilateral(-1, 2, 2) # Raises ValueError\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpcalyl1lg.py\", line 17, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    if not (isinstance(base, (int, float)) and isinstance(height, (int, float))):\n        raise TypeError(\"Both base and height must be numerical values\")\n    return base * height\n\n# Example usage:\ntry:\n    area = parallelogram_area(5, 10)\n    print(\"Area of the parallelogram:\", area)\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(input_string):\n    if not isinstance(input_string, str):\n        raise TypeError(\"Input must be a string\")\n    \n    if len(input_string) == 0:\n        return False\n    \n    return input_string[0] == input_string[-1]\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8wova52i.py\", line 7, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 54, "completion": "def counting_sort(arr):\n    # Check if input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements in the list must be integers\")\n    \n    # Handle empty list case\n    if len(arr) == 0:\n        return arr\n    \n    # Find the minimum and maximum values in the array\n    min_val = min(arr)\n    max_val = max(arr)\n    \n    # Initialize the count array\n    count = [0] * (max_val - min_val + 1)\n    \n    # Count each element\n    for num in arr:\n        count[num - min_val] += 1\n    \n    # Reconstruct the sorted array\n    sorted_arr = []\n    for i, c in enumerate(count):\n        sorted_arr.extend([i + min_val] * c)\n    \n    return sorted_arr\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 55, "completion": "def tn_gp(a, r, n):\n    if n < 1:\n        raise ValueError('Term number must be greater than 0')\n    return a * (r ** (n - 1))\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdm7uxv2m.py\", line 5, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def check(number):\n    # Check if the input is an integer\n    if not isinstance(number, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    # Reverse the number\n    reversed_number = int(str(abs(number))[::-1]) * (-1 if number < 0 else 1)\n    \n    # Check if the number is one less than twice its reverse\n    if number == 2 * reversed_number - 1:\n        return True\n    else:\n        return False\n\n# Example usage:\ntry:\n    result = check(23)\n    print(result)  # Output: True\n    result = check(45)\n    print(result)  # Output: False\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 57, "completion": "def find_max_num(digits, num_digits):\n    if num_digits > len(digits):\n        raise ValueError('Number of digits exceeds the length of the list.')\n    \n    # Sort the digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n    \n    # Take the first 'num_digits' from the sorted list and form the largest number\n    max_num = int(''.join(map(str, sorted_digits[:num_digits])))\n    \n    return max_num\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 58, "completion": "def opposite_signs(x, y):\n    # Check if the inputs are integers\n    if not isinstance(x, int) or not isinstance(y, int):\n        raise TypeError(\"Inputs must be integers\")\n    \n    # Check if the signs are opposite\n    return (x < 0 and y > 0) or (x > 0 and y < 0)\n\n# Example usage:\ntry:\n    print(opposite_signs(5, -3))  # Output: True\n    print(opposite_signs(-7, -2))  # Output: False\n    print(opposite_signs(10, 20))  # Output: False\n    print(opposite_signs(-1, 1))  # Output: True\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 59, "completion": "def is_octagonal(n):\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    return n * (3 * n - 2)\n\n# Example usage:\ntry:\n    result = is_octagonal(5)\n    print(f\"The 5th octagonal number is: {result}\")\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 60, "completion": "def max_len_sub(arr, diff):\n    if not isinstance(arr, list) or not isinstance(diff, int):\n        raise TypeError(\"First argument must be a list and second argument must be an integer\")\n    \n    if not arr:\n        return 0\n    \n    max_length = 1\n    current_length = 1\n    \n    for i in range(1, len(arr)):\n        if abs(arr[i] - arr[i-1]) == diff:\n            current_length += 1\n            max_length = max(max_length, current_length)\n        else:\n            current_length = 1\n    \n    return max_length\n\n# Example usage:\ntry:\n    result = max_len_sub([1, 3, 5, 7, 9], 2)\n    print(\"Maximum length of subsequence:\", result)\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpfnvl453y.py\", line 21, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nAssertionError", "passed": false}

{"task_id": 11, "completion": "def remove_occ(s: str, char: str) -> str:\n    \"\"\"\n    Remove the first and last occurrence of a given character from the string.\n\n    Parameters:\n    s (str): The input string.\n    char (str): The character to remove.\n\n    Returns:\n    str: The string with the first and last occurrence of the character removed.\n    \"\"\"\n    # Find the index of the first occurrence\n    first_index = s.find(char)\n    \n    # Find the index of the last occurrence\n    last_index = s.rfind(char)\n    \n    # If the character is not found, return the original string\n    if first_index == -1 or last_index == -1:\n        return s\n    \n    # Remove the first occurrence\n    s = s[:first_index] + s[first_index + 1:]\n    \n    # Adjust the last index if it was after the first occurrence\n    if last_index > first_index:\n        last_index -= 1\n    \n    # Remove the last occurrence\n    s = s[:last_index] + s[last_index + 1:]\n    \n    return s\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    input_string = \"hello world\"\n    char_to_remove = \"l\"\n    result = remove_occ(input_string, char_to_remove)\n    print(f\"Original string: {input_string}\")\n    print(f\"String after removing first and last '{char_to_remove}': {result}\")\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 12, "completion": "def sort_matrix(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order based on the sum of its rows.\n\n    Parameters:\n    matrix (list of list of int): The matrix to be sorted.\n\n    Returns:\n    list of list of int: The sorted matrix.\n    \"\"\"\n    # Sort the matrix based on the sum of each row\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    \n    return sorted_matrix\n\n# Example usage:\nif __name__ == \"__main__\":\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9],\n        [0, 1, 2]\n    ]\n    \n    sorted_matrix = sort_matrix(matrix)\n    print(\"Sorted Matrix:\")\n    for row in sorted_matrix:\n        print(row)\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 14, "completion": "def find_volume(base_triangle_area: float, prism_height: float) -> float:\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base_triangle_area (float): The area of the base triangle of the prism.\n    prism_height (float): The height (or length) of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    if base_triangle_area <= 0 or prism_height <= 0:\n        raise ValueError(\"Both base_triangle_area and prism_height must be positive numbers.\")\n    \n    volume = base_triangle_area * prism_height\n    return volume\n\n# Example usage:\n# base_area = 10.0  # Area of the base triangle\n# height = 5.0      # Height of the prism\n# print(find_volume(base_area, height))  # Output: 50.0\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpz92thz13.py\", line 10, in <module>\n    assert find_volume(10,8,6) == 240\nTypeError: find_volume() takes 2 positional arguments but 3 were given", "passed": false}
{"task_id": 15, "completion": "def split_lowerstring(input_string):\n    \"\"\"\n    Split a string at lowercase letters.\n\n    Parameters:\n    input_string (str): The input string to be split.\n\n    Returns:\n    list: A list of substrings obtained by splitting the input string at lowercase letters.\n    \"\"\"\n    result = []\n    start = 0\n\n    for i, char in enumerate(input_string):\n        if char.islower():\n            if start != i:\n                result.append(input_string[start:i])\n            start = i + 1\n\n    # Append the remaining part of the string if any\n    if start < len(input_string):\n        result.append(input_string[start:])\n\n    return result\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_string = \"HelloWorldPythonIsAwesome\"\n    split_result = split_lowerstring(example_string)\n    print(split_result)  # Output: ['Hello', 'World', 'Python', 'Is', 'Awesome']\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpa_wl7dmq.py\", line 18, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Find sequences of lowercase letters joined with an underscore.\n\n    Args:\n        text (str): The input string to search for sequences.\n\n    Returns:\n        list: A list of all matches found in the input text.\n    \"\"\"\n    # Define the regex pattern to match lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    \n    # Find all matches in the input text\n    matches = re.findall(pattern, text)\n    \n    return matches\n\n# Example usage:\nif __name__ == \"__main__\":\n    sample_text = \"hello_world this_is_a_test example_text_123 not_a_match\"\n    result = text_lowercase_underscore(sample_text)\n    print(result)  # Output: ['hello_world', 'this_is_a_test', 'example_text']\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvaunoe4d.py\", line 13, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Parameters:\n    side_length (float or int): The length of one side of the square.\n\n    Returns:\n    float or int: The perimeter of the square.\n    \"\"\"\n    return 4 * side_length\n\n# Example usage:\n# perimeter = square_perimeter(5)\n# print(perimeter)  # Output: 20\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(input_string, dirty_chars):\n    \"\"\"\n    Remove characters from the input_string that are present in the dirty_chars.\n\n    :param input_string: The original string from which characters will be removed.\n    :param dirty_chars: A string containing characters to be removed from input_string.\n    :return: A new string with the dirty characters removed.\n    \"\"\"\n    # Use a set for O(1) lookups\n    dirty_set = set(dirty_chars)\n    \n    # Use a list comprehension to filter out dirty characters\n    cleaned_string = ''.join([char for char in input_string if char not in dirty_set])\n    \n    return cleaned_string\n\n# Example usage:\n# result = remove_dirty_chars(\"hello world\", \"lo\")\n# print(result)  # Output: \"he wrd\"\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkv3gj_ft.py\", line 27, in <module>\n    check_code_style(remove_dirty_chars)\n  File \"/tmp/tmpkv3gj_ft.py\", line 23, in check_code_style\n    assert result.total_errors == 0, \"Code does not conform to PEP 8 standards.\"\nAssertionError: Code does not conform to PEP 8 standards.", "passed": false}
{"task_id": 19, "completion": "def test_duplicate(arr):\n    \"\"\"\n    Check if the given array of integers contains any duplicate elements.\n\n    Parameters:\n    arr (list): A list of integers to check for duplicates.\n\n    Returns:\n    bool: True if duplicates are found, False otherwise.\n    \"\"\"\n    # Use a set to store unique elements\n    unique_elements = set()\n    \n    # Iterate through the array\n    for num in arr:\n        # If the element is already in the set, it's a duplicate\n        if num in unique_elements:\n            return True\n        # Otherwise, add it to the set\n        unique_elements.add(num)\n    \n    # If no duplicates are found, return False\n    return False\n\n# Example usage:\nif __name__ == \"__main__\":\n    array = [1, 2, 3, 4, 5, 2]\n    result = test_duplicate(array)\n    print(f\"Contains duplicates: {result}\")\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(number):\n    \"\"\"\n    Check if a given number is a Woodall number.\n\n    A Woodall number is a number of the form W_n = n * 2^n - 1.\n\n    :param number: The number to check.\n    :type number: int\n    :return: True if the number is a Woodall number, False otherwise.\n    :rtype: bool\n    \"\"\"\n    if number < 1:\n        return False\n\n    n = 1\n    while True:\n        woodall_candidate = n * (2 ** n) - 1\n        if woodall_candidate == number:\n            return True\n        if woodall_candidate > number:\n            return False\n        n += 1\n\n# Example usage:\nif __name__ == \"__main__\":\n    num = 23\n    if is_woodall(num):\n        print(f\"{num} is a Woodall number.\")\n    else:\n        print(f\"{num} is not a Woodall number.\")\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 21, "completion": "def multiples_of_num(n, m):\n    \"\"\"\n    Find the first m multiples of n.\n\n    Parameters:\n    n (int): The number whose multiples are to be found.\n    m (int): The number of multiples to find.\n\n    Returns:\n    list: A list containing the first m multiples of n.\n    \"\"\"\n    return [n * i for i in range(1, m + 1)]\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    n = 5\n    m = 10\n    result = multiples_of_num(n, m)\n    print(f\"The first {m} multiples of {n} are: {result}\")\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpstk56b6k.py\", line 9, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "completion": "def find_first_duplicate(arr):\n    \"\"\"\n    Find the first duplicate element in a given array of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The first duplicate element found, or -1 if no duplicates are found.\n    \"\"\"\n    seen = set()\n    \n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    \n    return -1\n\n# Example usage:\nif __name__ == \"__main__\":\n    arr = [3, 5, 2, 5, 3, 7, 8]\n    result = find_first_duplicate(arr)\n    print(f\"The first duplicate element is: {result}\")\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists):\n    \"\"\"\n    Find the maximum sum of elements of a list in a list of lists.\n\n    Parameters:\n    list_of_lists (list of list of int): A list containing sublists of integers.\n\n    Returns:\n    int: The maximum sum of the elements of any sublist.\n    \"\"\"\n    if not list_of_lists:\n        return 0  # Return 0 if the list is empty\n\n    max_sum = float('-inf')  # Initialize with negative infinity to handle all possible sums\n\n    for sublist in list_of_lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum\n\n# Example usage:\nif __name__ == \"__main__\":\n    lists = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [10, -2, 1],\n        [7, 8, 9]\n    ]\n    print(maximum_sum(lists))  # Output: 24 (from the sublist [7, 8, 9])\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp887eyarm.py\", line 36, in <module>\n    check_code_style(maximum_sum)\n  File \"/tmp/tmp887eyarm.py\", line 32, in check_code_style\n    assert result.total_errors == 0, \"Code does not conform to PEP 8 standards.\"\nAssertionError: Code does not conform to PEP 8 standards.", "passed": false}
{"task_id": 24, "completion": "def binary_to_decimal(binary_str):\n    \"\"\"\n    Convert a binary string to its decimal equivalent.\n\n    Parameters:\n    binary_str (str): A string representing a binary number.\n\n    Returns:\n    int: The decimal equivalent of the binary number.\n    \"\"\"\n    if not all(char in '01' for char in binary_str):\n        raise ValueError(\"Input string must contain only binary digits (0 and 1).\")\n\n    decimal_value = 0\n    length = len(binary_str)\n\n    for i, char in enumerate(binary_str):\n        if char == '1':\n            decimal_value += 2 ** (length - i - 1)\n\n    return decimal_value\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    binary_number = \"1101\"\n    decimal_number = binary_to_decimal(binary_number)\n    print(f\"The decimal equivalent of binary {binary_number} is {decimal_number}.\")\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdsggk7g6.py\", line 15, in <module>\n    assert binary_to_decimal(100) == 4\n  File \"/tmp/tmpdsggk7g6.py\", line 2, in binary_to_decimal\n    if not all(char in '01' for char in binary_str):\nTypeError: 'int' object is not iterable", "passed": false}
{"task_id": 25, "completion": "from typing import List\n\ndef find_product(arr: List[int]) -> int:\n    \"\"\"\n    Calculate the product of non-repeated elements in the given array.\n\n    Parameters:\n    arr (List[int]): The input array of integers.\n\n    Returns:\n    int: The product of non-repeated elements. If all elements are repeated, returns 1.\n    \"\"\"\n    # Create a dictionary to count occurrences of each element\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Filter out elements that appear more than once\n    non_repeated_elements = [num for num, count in count_dict.items() if count == 1]\n\n    # Calculate the product of non-repeated elements\n    product = 1\n    for num in non_repeated_elements:\n        product *= num\n\n    return product\n\n# Example usage:\nif __name__ == \"__main__\":\n    array = [1, 2, 3, 2, 4, 5, 3]\n    result = find_product(array)\n    print(f\"The product of non-repeated elements is: {result}\")\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmprtmzdpp6.py\", line 22, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(tuple_list, k):\n    \"\"\"\n    Check if all tuples in the given list have exactly k elements.\n\n    Parameters:\n    tuple_list (list of tuples): The list of tuples to be checked.\n    k (int): The expected number of elements in each tuple.\n\n    Returns:\n    bool: True if all tuples have exactly k elements, False otherwise.\n    \"\"\"\n    return all(len(t) == k for t in tuple_list)\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    sample_list = [(1, 2), (3, 4), (5, 6)]\n    k_value = 2\n    result = check_k_elements(sample_list, k_value)\n    print(f\"All tuples have exactly {k_value} elements: {result}\")\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpsn1bg5wi.py\", line 9, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "completion": "def remove_digits(strings):\n    \"\"\"\n    Remove all digits from each string in the given list of strings.\n\n    Parameters:\n    strings (list of str): The list of strings from which digits will be removed.\n\n    Returns:\n    list of str: A list of strings with all digits removed.\n    \"\"\"\n    return [''.join(char for char in s if not char.isdigit()) for s in strings]\n\n# Example usage:\nif __name__ == \"__main__\":\n    input_strings = [\"abc123\", \"4def56\", \"ghi789\", \"jkl0\"]\n    result = remove_digits(input_strings)\n    print(result)  # Output: ['abc', 'def', 'ghi', 'jkl']\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpbz6vv76m.py\", line 8, in <module>\n    assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\nNameError: name 'remove' is not defined", "passed": false}
{"task_id": 28, "completion": "from math import factorial\n\n\ndef binomial_coeff(n: int, k: int) -> int:\n    \"\"\"\n    Calculate the binomial coefficient C(n, k).\n\n    Parameters:\n    n (int): Total number of items.\n    k (int): Number of items to choose.\n\n    Returns:\n    int: The binomial coefficient C(n, k).\n    \"\"\"\n    if k < 0 or k > n:\n        return 0\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    n = 5\n    k = 2\n    result = binomial_coeff(n, k)\n    print(f\"C({n}, {k}) = {result}\")\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 29, "completion": "def get_odd_occurrence(arr):\n    \"\"\"\n    Finds the element that occurs an odd number of times in the given list.\n\n    :param arr: List of elements (integers or other hashable types)\n    :return: The element that occurs an odd number of times\n    \"\"\"\n    # Initialize a dictionary to store the count of each element\n    count_dict = {}\n\n    # Iterate through the list and count occurrences of each element\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Iterate through the dictionary to find the element with an odd count\n    for key, value in count_dict.items():\n        if value % 2 != 0:\n            return key\n\n    # If no element occurs an odd number of times, return None\n    return None\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    arr = [4, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5]\n    result = get_odd_occurrence(arr)\n    print(f\"The element occurring an odd number of times is: {result}\")\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpq91pfhhb.py\", line 21, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s: str) -> int:\n    \"\"\"\n    Count all the substrings in the given string that start and end with the same character.\n\n    :param s: The input string.\n    :return: The count of substrings that start and end with the same character.\n    \"\"\"\n    count = 0\n    n = len(s)\n    \n    # Iterate over all possible substrings\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substring = s[i:j]\n            if substring[0] == substring[-1]:\n                count += 1\n    \n    return count\n\n# Example usage:\nif __name__ == \"__main__\":\n    input_string = \"abcab\"\n    result = count_substring_with_equal_ends(input_string)\n    print(f\"Number of substrings with equal ends: {result}\")\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 31, "completion": "import heapq\nfrom collections import defaultdict\n\ndef func(lists, k):\n    \"\"\"\n    Find the top k integers that occur most frequently from given lists of sorted and distinct integers.\n\n    Parameters:\n    lists (List[List[int]]): A list of lists containing sorted and distinct integers.\n    k (int): The number of top frequent integers to find.\n\n    Returns:\n    List[int]: A list of the top k integers that occur most frequently.\n    \"\"\"\n    if not lists or k <= 0:\n        return []\n\n    # Count the frequency of each integer across all lists\n    frequency_map = defaultdict(int)\n    for lst in lists:\n        for num in lst:\n            frequency_map[num] += 1\n\n    # Use a min-heap to keep track of the top k frequent integers\n    min_heap = []\n    for num, freq in frequency_map.items():\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, (freq, num))\n        else:\n            if freq > min_heap[0][0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, (freq, num))\n\n    # Extract the numbers from the heap and sort them by frequency in descending order\n    top_k = [num for freq, num in sorted(min_heap, reverse=True)]\n\n    return top_k\n\n# Example usage:\nlists = [\n    [1, 3, 5],\n    [2, 3, 4],\n    [3, 5, 6]\n]\nk = 2\nprint(func(lists, k))  # Output: [3, 5]\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmjiu0mw3.py\", line 31, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    \"\"\"\n    Find the largest prime factor of a given number.\n\n    Parameters:\n    n (int): The number to find the largest prime factor of.\n\n    Returns:\n    int: The largest prime factor of the given number.\n    \"\"\"\n    # Initialize the largest prime factor\n    largest_prime = -1\n\n    # Divide n by 2 until it's odd\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n\n    # Check for odd factors from 3 to sqrt(n)\n    i = 3\n    while i * i <= n:\n        while n % i == 0:\n            largest_prime = i\n            n //= i\n        i += 2\n\n    # If n is still greater than 2, then n itself is prime\n    if n > 2:\n        largest_prime = n\n\n    return largest_prime\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    number = 13195\n    print(f\"The largest prime factor of {number} is: {max_prime_factors(number)}\")\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(decimal_num):\n    \"\"\"\n    Convert a decimal number to its binary representation.\n\n    Parameters:\n    decimal_num (int): The decimal number to be converted.\n\n    Returns:\n    str: The binary representation of the decimal number.\n    \"\"\"\n    if not isinstance(decimal_num, int) or decimal_num < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n\n    if decimal_num == 0:\n        return \"0\"\n\n    binary_str = \"\"\n    while decimal_num > 0:\n        binary_str = str(decimal_num % 2) + binary_str\n        decimal_num = decimal_num // 2\n\n    return binary_str\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    decimal_number = 10\n    binary_number = decimal_to_binary(decimal_number)\n    print(f\"The binary representation of {decimal_number} is {binary_number}\")\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpfj8ll1ja.py\", line 16, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "completion": "def find_missing(sorted_array):\n    \"\"\"\n    Find the missing number in a sorted array of integers.\n\n    :param sorted_array: List of integers, sorted in ascending order.\n    :return: The missing integer in the sequence.\n    \"\"\"\n    # Iterate through the array to find the missing number\n    for i in range(len(sorted_array) - 1):\n        if sorted_array[i + 1] != sorted_array[i] + 1:\n            return sorted_array[i] + 1\n    \n    # If no missing number is found, return None or the next expected number\n    return None\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_array = [1, 2, 3, 4, 6, 7, 8]\n    missing_number = find_missing(example_array)\n    print(f\"The missing number is: {missing_number}\")\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_6brwofc.py\", line 13, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    \"\"\"\n    Calculate the n-th rectangular number.\n\n    Parameters:\n    n (int): The position of the rectangular number in the sequence.\n\n    Returns:\n    int: The n-th rectangular number.\n    \"\"\"\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    return n * (n + 1)\n\n# Example usage:\nif __name__ == \"__main__\":\n    n = 5\n    result = find_rect_num(n)\n    print(f\"The {n}-th rectangular number is: {result}\")\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator, n):\n    \"\"\"\n    Find the nth digit in the proper fraction of two given numbers.\n\n    Parameters:\n    numerator (int): The numerator of the fraction.\n    denominator (int): The denominator of the fraction.\n    n (int): The position of the digit to find.\n\n    Returns:\n    int: The nth digit in the fractional part of the division.\n    \"\"\"\n    if denominator == 0:\n        raise ValueError(\"Denominator cannot be zero.\")\n    \n    # Calculate the fractional part\n    fractional_part = str(numerator / denominator).split('.')[1]\n    \n    # Check if n is within the range of the fractional part\n    if n > len(fractional_part):\n        raise ValueError(\"n is out of range for the fractional part.\")\n    \n    # Return the nth digit\n    return int(fractional_part[n - 1])\n\n# Example usage:\n# print(find_nth_digit(1, 7, 3))  # Output: 5\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 37, "completion": "def sort_mixed_list(mixed_list):\n    \"\"\"\n    Sorts a mixed list of integers and strings.\n\n    The function sorts integers numerically and strings alphabetically.\n    Integers are placed before strings in the sorted list.\n\n    :param mixed_list: List containing a mix of integers and strings.\n    :return: Sorted list with integers first, followed by strings.\n    \"\"\"\n    # Separate integers and strings\n    integers = [x for x in mixed_list if isinstance(x, int)]\n    strings = [x for x in mixed_list if isinstance(x, str)]\n\n    # Sort integers and strings separately\n    integers.sort()\n    strings.sort()\n\n    # Combine the sorted integers and strings\n    sorted_list = integers + strings\n\n    return sorted_list\n\n# Example usage:\nif __name__ == \"__main__\":\n    mixed_list = [3, 'apple', 1, 'banana', 2, 'cherry']\n    sorted_list = sort_mixed_list(mixed_list)\n    print(sorted_list)  # Output: [1, 2, 3, 'apple', 'banana', 'cherry']\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 38, "completion": "def div_even_odd(numbers):\n    \"\"\"\n    Find the division of the first even and odd number in the given list.\n\n    :param numbers: List of integers\n    :return: Division of the first even and odd number as a float\n    :raises ValueError: If no even or odd number is found\n    \"\"\"\n    first_even = None\n    first_odd = None\n\n    for num in numbers:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n\n    if first_even is None:\n        raise ValueError(\"No even number found in the list.\")\n    if first_odd is None:\n        raise ValueError(\"No odd number found in the list.\")\n\n    return first_even / first_odd\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    numbers = [1, 3, 5, 7, 8, 10]\n    try:\n        result = div_even_odd(numbers)\n        print(f\"The division of the first even and odd number is: {result}\")\n    except ValueError as e:\n        print(e)\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 39, "completion": "from collections import Counter\n\ndef rearrange_string(s: str) -> bool:\n    \"\"\"\n    Check if the letters of a given string can be rearranged so that no two\n    adjacent characters are the same.\n\n    :param s: Input string\n    :return: True if the string can be rearranged as required, False otherwise\n    \"\"\"\n    # Count the frequency of each character in the string\n    char_count = Counter(s)\n    \n    # Get the most frequent character and its count\n    max_count = max(char_count.values())\n    \n    # If the most frequent character appears more than (n + 1) / 2 times,\n    # it's impossible to rearrange the string as required\n    if max_count > (len(s) + 1) // 2:\n        return False\n    \n    return True\n\n# Example usage:\nif __name__ == \"__main__\":\n    test_string = \"aabb\"\n    result = rearrange_string(test_string)\n    print(f\"Can the string '{test_string}' be rearranged? {result}\")\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpilbsilb1.py\", line 17, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "completion": "from collections import Counter\n\ndef freq_element(lst_of_lsts):\n    \"\"\"\n    Calculate the frequency of elements in a given list of lists.\n\n    Parameters:\n    lst_of_lsts (list of list): A list containing lists of elements.\n\n    Returns:\n    dict: A dictionary with elements as keys and their frequencies as values.\n    \"\"\"\n    # Flatten the list of lists into a single list\n    flattened_list = [item for sublist in lst_of_lsts for item in sublist]\n    \n    # Use Counter to get the frequency of each element\n    frequency = Counter(flattened_list)\n    \n    # Convert Counter object to a regular dictionary and return\n    return dict(frequency)\n\n# Example usage:\nif __name__ == \"__main__\":\n    lst_of_lsts = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\n    result = freq_element(lst_of_lsts)\n    print(result)  # Output: {1: 1, 2: 2, 3: 3, 4: 2, 5: 1}\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 41, "completion": "def filter_evennumbers(numbers):\n    \"\"\"\n    Filters even numbers from a given list of numbers.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    list: A list containing only the even numbers from the input list.\n    \"\"\"\n    return list(filter(lambda x: x % 2 == 0, numbers))\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    even_numbers = filter_evennumbers(numbers)\n    print(\"Even numbers:\", even_numbers)\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 42, "completion": "from collections import Counter\n\ndef find_sum(arr):\n    \"\"\"\n    Calculate the sum of repeated elements in a given array.\n\n    Parameters:\n    arr (list): The input list of elements.\n\n    Returns:\n    int: The sum of repeated elements.\n    \"\"\"\n    # Count the occurrences of each element in the array\n    element_counts = Counter(arr)\n    \n    # Sum the elements that appear more than once\n    sum_repeated = sum(element for element, count in element_counts.items() if count > 1)\n    \n    return sum_repeated\n\n# Example usage:\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 2, 3, 5, 6, 7, 8, 8]\n    result = find_sum(arr)\n    print(f\"The sum of repeated elements is: {result}\")\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_5dhe04r.py\", line 13, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    \"\"\"\n    Find sequences of lowercase letters joined with an underscore.\n\n    Args:\n        text (str): The input string to search for matches.\n\n    Returns:\n        list: A list of all matches found in the input text.\n    \"\"\"\n    # Define the regex pattern to match lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    \n    # Find all matches in the input text\n    matches = re.findall(pattern, text)\n    \n    return matches\n\n# Example usage:\nif __name__ == \"__main__\":\n    sample_text = \"hello_world this_is_a_test no_match here_is_another_example\"\n    result = text_match(sample_text)\n    print(\"Matches found:\", result)\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7o2jrryn.py\", line 13, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 44, "completion": "import re\n\ndef text_match_string(text, word):\n    \"\"\"\n    Check if the given word is at the beginning of the text.\n\n    Parameters:\n    text (str): The string to search within.\n    word (str): The word to search for at the beginning of the text.\n\n    Returns:\n    bool: True if the word is found at the beginning of the text, False otherwise.\n    \"\"\"\n    # Use a regular expression to match the word at the beginning of the text\n    pattern = re.compile(r'^' + re.escape(word) + r'\\b', re.IGNORECASE)\n    match = pattern.search(text)\n    \n    return bool(match)\n\n# Example usage:\nif __name__ == \"__main__\":\n    sample_text = \"Hello world, this is a test.\"\n    sample_word = \"hello\"\n    \n    result = text_match_string(sample_text, sample_word)\n    print(f\"Does the text start with '{sample_word}'? {result}\")\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmph9igf5bc.py\", line 13, in <module>\n    assert text_match_string(\" python\")==('Not matched!')\nTypeError: text_match_string() missing 1 required positional argument: 'word'", "passed": false}
{"task_id": 45, "completion": "from math import gcd\nfrom functools import reduce\n\n\ndef get_gcd(arr):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of the elements in the given array.\n\n    :param arr: List of integers for which the GCD is to be calculated.\n    :return: The GCD of the array elements.\n    \"\"\"\n    if not arr:\n        raise ValueError(\"The input array must not be empty.\")\n    \n    return reduce(gcd, arr)\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    numbers = [24, 36, 48, 60]\n    result = get_gcd(numbers)\n    print(f\"The GCD of {numbers} is {result}\")\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 46, "completion": "def test_distinct(numbers):\n    \"\"\"\n    Determine whether all the numbers in the list are distinct.\n\n    Parameters:\n    numbers (list): A list of numbers (integers or floats).\n\n    Returns:\n    bool: True if all numbers are distinct, False otherwise.\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    unique_numbers = set(numbers)\n    \n    # Compare the length of the set to the length of the original list\n    return len(unique_numbers) == len(numbers)\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    test_case_1 = [1, 2, 3, 4, 5]\n    test_case_2 = [1, 2, 2, 3, 4]\n    test_case_3 = [10, 20, 30, 40, 50, 10]\n    \n    print(test_distinct(test_case_1))  # Output: True\n    print(test_distinct(test_case_2))  # Output: False\n    print(test_distinct(test_case_3))  # Output: False\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 48, "completion": "def odd_bit_set_number(n):\n    \"\"\"\n    Set all odd bits of a given number.\n\n    Parameters:\n    n (int): The number whose odd bits are to be set.\n\n    Returns:\n    int: The number with all odd bits set.\n    \"\"\"\n    # Create a mask with all odd bits set\n    mask = 0xAAAAAAAA  # Binary: 10101010...1010\n\n    # Perform a bitwise OR operation to set the odd bits\n    result = n | mask\n\n    return result\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    number = 0b101010  # Example number: 42 in decimal\n    result = odd_bit_set_number(number)\n    print(f\"Original number: {bin(number)}\")\n    print(f\"Number with odd bits set: {bin(result)}\")\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpcruz703j.py\", line 13, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(two_d_list, index=0):\n    \"\"\"\n    Extracts every first or specified element from a given two-dimensional list.\n\n    Parameters:\n    two_d_list (list of list): The two-dimensional list from which to extract elements.\n    index (int): The index of the element to extract from each sublist. Default is 0.\n\n    Returns:\n    list: A list containing the specified elements from each sublist.\n    \"\"\"\n    return [sublist[index] for sublist in two_d_list]\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_list = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    \n    # Extract the first element from each sublist\n    result = specified_element(example_list)\n    print(result)  # Output: [1, 4, 7]\n    \n    # Extract the second element from each sublist\n    result = specified_element(example_list, index=1)\n    print(result)  # Output: [2, 5, 8]\n    \n    # Extract the third element from each sublist\n    result = specified_element(example_list, index=2)\n    print(result)  # Output: [3, 6, 9]\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 51, "completion": "def check_equilateral(side1, side2, side3):\n    \"\"\"\n    Check if a triangle is equilateral.\n\n    An equilateral triangle has all three sides of equal length.\n\n    Parameters:\n    side1 (float): Length of the first side.\n    side2 (float): Length of the second side.\n    side3 (float): Length of the third side.\n\n    Returns:\n    bool: True if the triangle is equilateral, False otherwise.\n    \"\"\"\n    if side1 == side2 == side3:\n        print(\"The triangle is equilateral.\")\n        return True\n    else:\n        print(\"The triangle is not equilateral.\")\n        return False\n\n\n# Example usage:\n# check_equilateral(5, 5, 5)  # Output: The triangle is equilateral.\n# check_equilateral(5, 4, 5)  # Output: The triangle is not equilateral.\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram.\n    \"\"\"\n    return base * height\n\n# Example usage:\n# area = parallelogram_area(5, 10)\n# print(\"The area of the parallelogram is:\", area)\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(input_string):\n    \"\"\"\n    Check if the first and last characters of the given string are equal.\n\n    Parameters:\n    input_string (str): The string to check.\n\n    Returns:\n    bool: True if the first and last characters are equal, False otherwise.\n    \"\"\"\n    if not input_string:\n        return False  # Return False for empty strings\n\n    return input_string[0] == input_string[-1]\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    test_string = \"hello\"\n    result = check_equality(test_string)\n    print(f\"The first and last characters of '{test_string}' are equal: {result}\")\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9wab5bxw.py\", line 10, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 54, "completion": "def counting_sort(arr):\n    \"\"\"\n    Sorts the given array using the Counting Sort algorithm.\n\n    Parameters:\n    arr (list): The list of non-negative integers to be sorted.\n\n    Returns:\n    list: The sorted list.\n    \"\"\"\n    if not arr:\n        return arr\n\n    # Find the maximum element in the array\n    max_element = max(arr)\n\n    # Initialize the count array with zeros\n    count = [0] * (max_element + 1)\n\n    # Store the count of each element in the count array\n    for num in arr:\n        count[num] += 1\n\n    # Modify the count array to store the actual position of each element\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n\n    # Build the output array\n    output = [0] * len(arr)\n    for num in reversed(arr):\n        output[count[num] - 1] = num\n        count[num] -= 1\n\n    return output\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    arr = [4, 2, 2, 8, 3, 3, 1]\n    sorted_arr = counting_sort(arr)\n    print(\"Sorted array:\", sorted_arr)\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 55, "completion": "def tn_gp(first_term: float, common_ratio: float, term_number: int) -> float:\n    \"\"\"\n    Calculate the t-th term of a geometric series.\n\n    Parameters:\n    first_term (float): The first term of the geometric series.\n    common_ratio (float): The common ratio of the geometric series.\n    term_number (int): The term number to find (t-th term).\n\n    Returns:\n    float: The t-th term of the geometric series.\n    \"\"\"\n    if term_number < 1:\n        raise ValueError(\"Term number must be a positive integer.\")\n    \n    return first_term * (common_ratio ** (term_number - 1))\n\n# Example usage:\n# first_term = 2\n# common_ratio = 3\n# term_number = 4\n# print(tn_gp(first_term, common_ratio, term_number))  # Output: 54.0\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp04erodl6.py\", line 10, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def check(number):\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n\n    Parameters:\n    number (int): The number to check.\n\n    Returns:\n    bool: True if the number is one less than twice its reverse, False otherwise.\n    \"\"\"\n    # Convert the number to a string to easily reverse it\n    reversed_number_str = str(number)[::-1]\n    \n    # Convert the reversed string back to an integer\n    reversed_number = int(reversed_number_str)\n    \n    # Check if the number is one less than twice its reverse\n    return number == 2 * reversed_number - 1\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    num = 73\n    result = check(num)\n    print(f\"Is {num} one less than twice its reverse? {result}\")\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 57, "completion": "def find_max_num(digits):\n    \"\"\"\n    Find the largest number that can be formed with the given digits.\n\n    Parameters:\n    digits (list of int): A list of digits (0-9).\n\n    Returns:\n    int: The largest number that can be formed with the given digits.\n    \"\"\"\n    # Sort the digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n    \n    # Convert the sorted digits to a single integer\n    max_num = int(''.join(map(str, sorted_digits)))\n    \n    return max_num\n\n# Example usage:\nif __name__ == \"__main__\":\n    digits = [3, 1, 4, 1, 5, 9]\n    result = find_max_num(digits)\n    print(f\"The largest number that can be formed is: {result}\")\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpe8li1b_t.py\", line 12, in <module>\n    assert find_max_num([1,2,3],3) == 321\nTypeError: find_max_num() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 58, "completion": "def opposite_signs(num1: int, num2: int) -> bool:\n    \"\"\"\n    Check if two integers have opposite signs.\n\n    Parameters:\n    num1 (int): The first integer.\n    num2 (int): The second integer.\n\n    Returns:\n    bool: True if the integers have opposite signs, False otherwise.\n    \"\"\"\n    return (num1 ^ num2) < 0\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(opposite_signs(5, -3))  # Output: True\n    print(opposite_signs(5, 3))   # Output: False\n    print(opposite_signs(-5, -3)) # Output: False\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 59, "completion": "def is_octagonal(n):\n    \"\"\"\n    Calculate the nth octagonal number.\n\n    Parameters:\n    n (int): The position of the octagonal number to calculate.\n\n    Returns:\n    int: The nth octagonal number.\n    \"\"\"\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return n * (3 * n - 2)\n\n# Example usage:\nif __name__ == \"__main__\":\n    n = 5\n    print(f\"The {n}th octagonal number is: {is_octagonal(n)}\")\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 60, "completion": "def max_len_sub(arr):\n    \"\"\"\n    Find the maximum length of a subsequence where the difference between\n    adjacent elements is exactly 1.\n\n    :param arr: List of integers\n    :return: Maximum length of the subsequence\n    \"\"\"\n    if not arr:\n        return 0\n\n    # Create a dictionary to store the length of the longest subsequence\n    # ending with each number\n    dp = {}\n    max_length = 1\n\n    for num in arr:\n        # Check if the previous number (num - 1) exists in the dictionary\n        if num - 1 in dp:\n            dp[num] = dp[num - 1] + 1\n        else:\n            dp[num] = 1\n\n        # Update the maximum length if the current subsequence is longer\n        if dp[num] > max_length:\n            max_length = dp[num]\n\n    return max_length\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 3, 2]\n    print(max_len_sub(arr))  # Output: 5 (subsequence [1, 2, 3, 4, 5])\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvbz0rbai.py\", line 22, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}

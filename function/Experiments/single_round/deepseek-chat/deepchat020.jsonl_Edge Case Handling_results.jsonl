{"task_id": 11, "completion": "def remove_occ(s, char):\n    # Find the index of the first occurrence\n    first_index = s.find(char)\n    \n    # Find the index of the last occurrence\n    last_index = s.rfind(char)\n    \n    # If the character is not found, return the original string\n    if first_index == -1 or last_index == -1:\n        return s\n    \n    # Remove the first occurrence\n    s = s[:first_index] + s[first_index+1:]\n    \n    # Since we removed the first occurrence, the last_index might have shifted\n    # So we need to find the last occurrence again\n    last_index = s.rfind(char)\n    \n    # Remove the last occurrence\n    s = s[:last_index] + s[last_index+1:]\n    \n    return s\n\n# Example usage:\ninput_string = \"hello world\"\nchar_to_remove = 'l'\nresult = remove_occ(input_string, char_to_remove)\nprint(result)  # Output: \"helo word\"\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 12, "completion": "def sort_matrix(matrix):\n    # Handle the case of an empty matrix\n    if not matrix:\n        return []\n    \n    # Calculate the sum of each row and store it along with the row\n    rows_with_sum = [(sum(row), row) for row in matrix]\n    \n    # Sort the rows based on the sum\n    sorted_rows_with_sum = sorted(rows_with_sum, key=lambda x: x[0])\n    \n    # Extract the sorted rows\n    sorted_matrix = [row for (_, row) in sorted_rows_with_sum]\n    \n    return sorted_matrix\n\n# Example usage:\nmatrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [0, 0, 0]\n]\n\nsorted_matrix = sort_matrix(matrix)\nprint(sorted_matrix)\n# Output: [[0, 0, 0], [1, 2, 3], [4, 5, 6]]\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 13, "completion": "from collections import Counter\n\ndef count_common(words_dict):\n    \"\"\"\n    Counts the most common words in a dictionary.\n\n    Parameters:\n    words_dict (dict): A dictionary where keys are words and values are their counts.\n\n    Returns:\n    list: A list of tuples containing the most common words and their counts.\n          If the input dictionary is empty, returns an empty list.\n    \"\"\"\n    if not words_dict:\n        return []\n    \n    # Use Counter to count the most common words\n    word_counter = Counter(words_dict)\n    \n    # Get the most common words\n    most_common_words = word_counter.most_common()\n    \n    return most_common_words\n\n# Example usage:\nwords_dict = {\n    'apple': 5,\n    'banana': 3,\n    'cherry': 5,\n    'date': 2\n}\n\nprint(count_common(words_dict))\n# Output: [('apple', 5), ('cherry', 5), ('banana', 3), ('date', 2)]\n\nempty_dict = {}\nprint(count_common(empty_dict))\n# Output: []\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpeu6d8pjz.py\", line 22, in <module>\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nAssertionError", "passed": false}
{"task_id": 14, "completion": "def find_volume(base, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base (float): The length of the base of the triangle.\n    height (float): The height of the triangle.\n    length (float): The length of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    # Handle edge cases where one or more dimensions are at their minimum positive value\n    if base <= 0 or height <= 0 or length <= 0:\n        raise ValueError(\"All dimensions must be positive numbers.\")\n    \n    # Calculate the area of the triangular base\n    base_area = 0.5 * base * height\n    \n    # Calculate the volume of the prism\n    volume = base_area * length\n    \n    return volume\n\n# Example usage:\ntry:\n    volume = find_volume(3, 4, 5)\n    print(f\"The volume of the triangular prism is: {volume}\")\nexcept ValueError as e:\n    print(e)\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 15, "completion": "import re\n\ndef split_lowerstring(s):\n    # Use regular expression to split the string at lowercase letters\n    parts = re.split('([a-z])', s)\n    \n    # Filter out the lowercase letters and empty strings\n    result = [part for part in parts if part and not part.islower()]\n    \n    return result\n\n# Example usage:\nprint(split_lowerstring(\"HelloWorld\"))  # Output: ['Hello', 'World']\nprint(split_lowerstring(\"HELLOWORLD\"))  # Output: []\nprint(split_lowerstring(\"PythonIsFun\"))  # Output: ['P', 'thon', 'I', 's', 'F', 'un']\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpcwhqwqcc.py\", line 12, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    # Define the pattern for lowercase letters joined with an underscore\n    pattern = r'[a-z]+_[a-z]+'\n    \n    # Check if the input string is empty\n    if not text:\n        return 'Not matched!'\n    \n    # Search for the pattern in the input text\n    match = re.search(pattern, text)\n    \n    # If a match is found, return the matched string\n    if match:\n        return match.group()\n    else:\n        return 'Not matched!'\n\n# Example usage:\nprint(text_lowercase_underscore(\"hello_world\"))  # Output: hello_world\nprint(text_lowercase_underscore(\"Hello_World\"))  # Output: Not matched!\nprint(text_lowercase_underscore(\"\"))             # Output: Not matched!\nprint(text_lowercase_underscore(\"abc_def_ghi\"))  # Output: abc_def\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpclqutl_o.py\", line 20, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Parameters:\n    side_length (float or int): The length of one side of the square.\n\n    Returns:\n    float or int: The perimeter of the square. Returns 0 if side_length is 0.\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    return 4 * side_length\n\n# Example usage:\n# print(square_perimeter(5))  # Output: 20\n# print(square_perimeter(0))  # Output: 0\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(string1, string2):\n    # If the second string is empty, return the original first string\n    if not string2:\n        return string1\n    \n    # Create a set of characters from the second string for quick lookup\n    dirty_chars = set(string2)\n    \n    # Use a list comprehension to filter out the dirty characters\n    cleaned_string = ''.join([char for char in string1 if char not in dirty_chars])\n    \n    return cleaned_string\n\n# Example usage:\nstring1 = \"hello world\"\nstring2 = \"lo\"\nresult = remove_dirty_chars(string1, string2)\nprint(result)  # Output: \"he wrd\"\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 19, "completion": "def test_duplicate(arr):\n    \"\"\"\n    Check if the given array of integers contains any duplicate elements.\n\n    Parameters:\n    arr (list of int): The array of integers to check for duplicates.\n\n    Returns:\n    bool: True if there are duplicates, False otherwise.\n    \"\"\"\n    # Handle edge cases: empty list or list with one element\n    if len(arr) <= 1:\n        return False\n    \n    # Use a set to track seen elements\n    seen = set()\n    \n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    \n    return False\n\n# Example usage:\nprint(test_duplicate([1, 2, 3, 4, 5]))  # Output: False\nprint(test_duplicate([1, 2, 3, 4, 1]))  # Output: True\nprint(test_duplicate([]))               # Output: False\nprint(test_duplicate([42]))             # Output: False\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 20, "completion": "import math\n\ndef is_woodall(number):\n    if number < 1:\n        return False  # Woodall numbers are positive integers\n    \n    # We need to find an integer n such that n * 2^n - 1 == number\n    # We can estimate the upper bound for n using logarithms\n    if number == 1:\n        return True  # W_1 = 1 * 2^1 - 1 = 1\n    \n    # Estimate the upper bound for n\n    # Since n * 2^n grows rapidly, we can limit n to a reasonable range\n    max_n = math.floor(math.log2(number)) + 2\n    \n    for n in range(1, max_n + 1):\n        woodall_candidate = n * (1 << n) - 1  # Equivalent to n * 2^n - 1\n        if woodall_candidate == number:\n            return True\n        if woodall_candidate > number:\n            break  # Since Woodall numbers grow rapidly, we can stop early\n    \n    return False\n\n# Example usage:\nprint(is_woodall(1))    # True, W_1 = 1\nprint(is_woodall(7))    # True, W_2 = 7\nprint(is_woodall(23))   # True, W_3 = 23\nprint(is_woodall(63))   # True, W_4 = 63\nprint(is_woodall(159))  # True, W_5 = 159\nprint(is_woodall(0))    # False\nprint(is_woodall(100))  # False\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 21, "completion": "def multiples_of_num(n, m):\n    \"\"\"\n    Find m number of multiples of n.\n\n    Parameters:\n    n (int): The number whose multiples are to be found.\n    m (int): The number of multiples to find.\n\n    Returns:\n    list: A list containing the first m multiples of n. If m is zero, returns an empty list.\n    \"\"\"\n    if m == 0:\n        return []\n    \n    return [n * i for i in range(1, m + 1)]\n\n# Example usage:\nprint(multiples_of_num(3, 5))  # Output: [3, 6, 9, 12, 15]\nprint(multiples_of_num(7, 0))  # Output: []\nprint(multiples_of_num(2, 4))  # Output: [2, 4, 6, 8]\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpl57w3msk.py\", line 9, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "completion": "def find_first_duplicate(arr):\n    # Handle empty list\n    if not arr:\n        return -1\n    \n    # Use a set to track seen elements\n    seen = set()\n    \n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    \n    # If no duplicates found, return -1\n    return -1\n\n# Example usage:\nprint(find_first_duplicate([1, 2, 3, 4, 2, 5]))  # Output: 2\nprint(find_first_duplicate([1, 2, 3, 4, 5]))     # Output: -1\nprint(find_first_duplicate([]))                  # Output: -1\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists):\n    # Check if the input list is empty\n    if not list_of_lists:\n        return 0\n    \n    # Initialize the maximum sum to 0\n    max_sum = 0\n    \n    # Iterate through each sublist in the list of lists\n    for sublist in list_of_lists:\n        # Calculate the sum of the current sublist\n        current_sum = sum(sublist)\n        \n        # Update the maximum sum if the current sum is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    # Return the maximum sum found\n    return max_sum\n\n# Example usage:\nexample_list = [[1, 2, 3], [4, 5], [], [6, 7, 8, 9]]\nprint(maximum_sum(example_list))  # Output: 30 (sum of [6, 7, 8, 9])\n\nempty_list = []\nprint(maximum_sum(empty_list))  # Output: 0\n\nall_empty_lists = [[], [], []]\nprint(maximum_sum(all_empty_lists))  # Output: 0\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 24, "completion": "def binary_to_decimal(binary_str):\n    \"\"\"\n    Convert a binary string to its decimal equivalent.\n\n    Parameters:\n    binary_str (str): A string representing a binary number.\n\n    Returns:\n    int: The decimal equivalent of the binary string. Returns 0 if the input is an empty string.\n    \"\"\"\n    if not binary_str:\n        return 0\n    \n    decimal = 0\n    length = len(binary_str)\n    \n    for i, char in enumerate(binary_str):\n        if char == '1':\n            decimal += 2 ** (length - i - 1)\n        elif char != '0':\n            raise ValueError(\"Invalid binary string. The string should contain only '0's and '1's.\")\n    \n    return decimal\n\n# Example usage:\nprint(binary_to_decimal(\"1010\"))  # Output: 10\nprint(binary_to_decimal(\"1111\"))  # Output: 15\nprint(binary_to_decimal(\"\"))      # Output: 0\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqcyr2bze.py\", line 16, in <module>\n    assert binary_to_decimal(100) == 4\n  File \"/tmp/tmpqcyr2bze.py\", line 5, in binary_to_decimal\n    length = len(binary_str)\nTypeError: object of type 'int' has no len()", "passed": false}
{"task_id": 25, "completion": "from collections import Counter\n\ndef find_product(arr):\n    if not arr:\n        return 1\n    \n    # Count the occurrences of each element in the array\n    element_counts = Counter(arr)\n    \n    # Filter out elements that appear more than once\n    non_repeated_elements = [element for element, count in element_counts.items() if count == 1]\n    \n    # Calculate the product of non-repeated elements\n    product = 1\n    for element in non_repeated_elements:\n        product *= element\n    \n    return product\n\n# Example usage:\narr = [1, 2, 3, 2, 4, 5, 5]\nresult = find_product(arr)\nprint(result)  # Output will be 12 (1 * 3 * 4)\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2h_32kw9.py\", line 18, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(tuple_list, k):\n    \"\"\"\n    Check if all tuples in the given list have exactly k elements.\n\n    Parameters:\n    tuple_list (list of tuples): The list of tuples to check.\n    k (int): The number of elements each tuple should have.\n\n    Returns:\n    bool: True if all tuples have exactly k elements, False otherwise.\n    \"\"\"\n    # Handle edge case: empty list\n    if not tuple_list:\n        return False  # or return True, depending on the desired behavior for an empty list\n\n    # Check each tuple in the list\n    for t in tuple_list:\n        if len(t) != k:\n            return False\n\n    return True\n\n# Example usage:\ntuple_list = [(1, 2), (3, 4), (5, 6)]\nk = 2\nprint(check_k_elements(tuple_list, k))  # Output: True\n\ntuple_list = [(1, 2, 3), (4, 5), (6, 7)]\nk = 2\nprint(check_k_elements(tuple_list, k))  # Output: False\n\ntuple_list = []\nk = 2\nprint(check_k_elements(tuple_list, k))  # Output: False (or True, depending on the desired behavior)\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgfwiqcwh.py\", line 20, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "completion": "def remove(strings):\n    \"\"\"\n    Removes all digits from a list of strings.\n\n    Parameters:\n    strings (list of str): The list of strings from which to remove digits.\n\n    Returns:\n    list of str: A list of strings with all digits removed.\n    \"\"\"\n    # Handle edge case: if the input list is empty, return an empty list\n    if not strings:\n        return []\n    \n    # Define a helper function to remove digits from a single string\n    def remove_digits(s):\n        return ''.join([char for char in s if not char.isdigit()])\n    \n    # Apply the helper function to each string in the list\n    return [remove_digits(s) for s in strings]\n\n# Example usage:\ninput_list = [\"hello123\", \"world456\", \"no_digits\", \"\", \"12345\"]\noutput_list = remove(input_list)\nprint(output_list)  # Output: ['hello', 'world', 'no_digits', '', '']\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 28, "completion": "import math\n\ndef binomial_coeff(n, k):\n    # Handle edge cases\n    if k == 0 or k == n:\n        return 1\n    if k < 0 or k > n:\n        return 0\n    \n    # Calculate the binomial coefficient using the formula\n    return math.comb(n, k)\n\n# Example usage:\nprint(binomial_coeff(5, 2))  # Output: 10\nprint(binomial_coeff(4, 4))  # Output: 1\nprint(binomial_coeff(6, 0))  # Output: 1\nprint(binomial_coeff(3, 5))  # Output: 0\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 29, "completion": "def get_odd_occurrence(lst):\n    \"\"\"\n    Finds the element that occurs an odd number of times in the list.\n\n    :param lst: List of elements (can be empty)\n    :return: The element that occurs an odd number of times, or None if the list is empty\n    \"\"\"\n    if not lst:\n        return None\n    \n    # Use a dictionary to count occurrences of each element\n    occurrence_count = {}\n    \n    for element in lst:\n        if element in occurrence_count:\n            occurrence_count[element] += 1\n        else:\n            occurrence_count[element] = 1\n    \n    # Find the element with an odd count\n    for element, count in occurrence_count.items():\n        if count % 2 != 0:\n            return element\n    \n    # If no element occurs an odd number of times, return None\n    return None\n\n# Example usage:\nprint(get_odd_occurrence([1, 2, 3, 2, 3, 1, 3]))  # Output: 3\nprint(get_odd_occurrence([]))  # Output: None\nprint(get_odd_occurrence([1, 1, 2, 2, 3, 3, 3]))  # Output: 3\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqv8n5ytf.py\", line 21, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    if not s:\n        return 0\n    \n    count = 0\n    n = len(s)\n    \n    # Iterate over all possible substrings\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substring = s[i:j]\n            if substring[0] == substring[-1]:\n                count += 1\n    \n    return count\n\n# Example usage:\nprint(count_substring_with_equal_ends(\"abcab\"))  # Output: 7\nprint(count_substring_with_equal_ends(\"aaaa\"))   # Output: 10\nprint(count_substring_with_equal_ends(\"\"))       # Output: 0\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 31, "completion": "import heapq\nfrom collections import defaultdict\n\ndef func(lists, k):\n    if not any(lists):\n        return []\n    \n    # Step 1: Count the frequency of each integer\n    frequency = defaultdict(int)\n    for lst in lists:\n        for num in lst:\n            frequency[num] += 1\n    \n    # Step 2: Use a min-heap to find the top k frequent integers\n    heap = []\n    for num, freq in frequency.items():\n        if len(heap) < k:\n            heapq.heappush(heap, (freq, num))\n        else:\n            if freq > heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (freq, num))\n    \n    # Step 3: Extract the top k integers from the heap\n    result = [heapq.heappop(heap)[1] for _ in range(len(heap))]\n    \n    # Step 4: Return the result in descending order of frequency\n    return result[::-1]\n\n# Example usage:\nlists = [\n    [1, 2, 3],\n    [2, 3, 4],\n    [3, 4, 5],\n    [4, 5, 6]\n]\nk = 2\nprint(func(lists, k))  # Output: [3, 4]\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpz5kkt0f7.py\", line 33, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    # Initialize the largest prime factor\n    largest_prime = -1\n    \n    # Divide n by 2 until it's odd\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n    \n    # Now n must be odd, so we can skip even numbers\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            largest_prime = i\n            n //= i\n    \n    # If n is still greater than 2, then n itself is a prime number\n    if n > 2:\n        largest_prime = n\n    \n    return largest_prime\n\n# Example usage:\nnumber = 13195\nprint(f\"The largest prime factor of {number} is: {max_prime_factors(number)}\")\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(decimal_num):\n    if decimal_num == 0:\n        return '0'\n    \n    binary_num = ''\n    while decimal_num > 0:\n        binary_num = str(decimal_num % 2) + binary_num\n        decimal_num = decimal_num // 2\n    \n    return binary_num\n\n# Example usage:\nprint(decimal_to_binary(0))    # Output: '0'\nprint(decimal_to_binary(10))   # Output: '1010'\nprint(decimal_to_binary(255))  # Output: '11111111'\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpaoeopxud.py\", line 13, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "completion": "def find_missing(arr):\n    # Handle edge case where the array is empty\n    if not arr:\n        return None\n    \n    # Handle edge case where the missing number is the smallest\n    if arr[0] != 0:\n        return 0\n    \n    # Iterate through the array to find the missing number\n    for i in range(len(arr) - 1):\n        if arr[i + 1] != arr[i] + 1:\n            return arr[i] + 1\n    \n    # If no missing number is found, return the next number after the last element\n    return arr[-1] + 1\n\n# Example usage:\narr = [0, 1, 2, 3, 4, 5, 7, 8, 9]\nprint(find_missing(arr))  # Output: 6\n\narr = [1, 2, 3, 4, 5]\nprint(find_missing(arr))  # Output: 0\n\narr = [0, 1, 2, 3, 4, 5]\nprint(find_missing(arr))  # Output: 6\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpi82yr2ff.py\", line 21, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    \"\"\"\n    Find the n-th rectangular number.\n\n    Parameters:\n    n (int): The position of the rectangular number in the sequence.\n\n    Returns:\n    int: The n-th rectangular number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    return n * (n + 1)\n\n# Example usage:\nprint(find_rect_num(1))  # Output: 2\nprint(find_rect_num(2))  # Output: 6\nprint(find_rect_num(3))  # Output: 12\nprint(find_rect_num(4))  # Output: 20\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator, n):\n    \"\"\"\n    Find the nth digit in the proper fraction of two given numbers.\n\n    Parameters:\n    numerator (int): The numerator of the fraction.\n    denominator (int): The denominator of the fraction.\n    n (int): The position of the digit to find (1-based index).\n\n    Returns:\n    int: The nth digit in the fractional part, or 0 if the numerator is zero.\n    \"\"\"\n    if numerator == 0:\n        return 0\n    \n    # Calculate the fractional part as a string\n    fractional_part = str(numerator / denominator).split('.')[1]\n    \n    # Check if n is within the length of the fractional part\n    if n <= len(fractional_part):\n        return int(fractional_part[n - 1])\n    else:\n        return 0  # If n is beyond the length, return 0\n\n# Example usage:\nprint(find_nth_digit(1, 7, 3))  # Output: 5 (since 1/7 = 0.142857..., the 3rd digit is 5)\nprint(find_nth_digit(0, 5, 2))  # Output: 0 (since numerator is 0)\nprint(find_nth_digit(22, 7, 10)) # Output: 0 (since 22/7 = 3.1428571428..., the 10th digit is 8)\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 37, "completion": "def sort_mixed_list(mixed_list):\n    # Handle empty list\n    if not mixed_list:\n        return []\n    \n    # Separate integers and strings\n    integers = [x for x in mixed_list if isinstance(x, int)]\n    strings = [x for x in mixed_list if isinstance(x, str)]\n    \n    # Sort integers and strings separately\n    integers.sort()\n    strings.sort()\n    \n    # Merge the sorted lists\n    sorted_list = integers + strings\n    \n    return sorted_list\n\n# Example usage:\nmixed_list = [3, 'apple', 1, 'banana', 2, 'cherry']\nsorted_list = sort_mixed_list(mixed_list)\nprint(sorted_list)  # Output: [1, 2, 3, 'apple', 'banana', 'cherry']\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 38, "completion": "def div_even_odd(numbers):\n    first_even = None\n    first_odd = None\n    \n    for num in numbers:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is None or first_odd is None:\n        return None  # Return None if either even or odd number is not found\n    \n    if first_even == 0:\n        return 0\n    \n    return first_even / first_odd\n\n# Example usage:\nnumbers = [1, 3, 5, 7, 9, 2, 4, 6, 8]\nresult = div_even_odd(numbers)\nprint(result)  # Output: 2.0\n\nnumbers_with_zero_even = [0, 1, 3, 5, 7, 9]\nresult = div_even_odd(numbers_with_zero_even)\nprint(result)  # Output: 0\n\nnumbers_with_zero_odd = [2, 4, 6, 8, 0]\nresult = div_even_odd(numbers_with_zero_odd)\nprint(result)  # Output: 1.0\n\nnumbers_without_even = [1, 3, 5, 7, 9]\nresult = div_even_odd(numbers_without_even)\nprint(result)  # Output: None\n\nnumbers_without_odd = [2, 4, 6, 8]\nresult = div_even_odd(numbers_without_odd)\nprint(result)  # Output: None\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 39, "completion": "from collections import Counter\nimport heapq\n\ndef rearrange_string(s: str) -> str:\n    # Count the frequency of each character in the string\n    char_count = Counter(s)\n    \n    # Create a max-heap based on the frequency of characters\n    max_heap = [(-count, char) for char, count in char_count.items()]\n    heapq.heapify(max_heap)\n    \n    result = []\n    prev_count, prev_char = 0, ''\n    \n    while max_heap:\n        # Pop the character with the highest frequency\n        count, char = heapq.heappop(max_heap)\n        \n        # Append the character to the result\n        result.append(char)\n        \n        # Push the previous character back into the heap if its count is not zero\n        if prev_count < 0:\n            heapq.heappush(max_heap, (prev_count, prev_char))\n        \n        # Update the previous character and its count\n        prev_count, prev_char = count + 1, char\n    \n    # If the result length is not equal to the input string length, rearrangement is not possible\n    if len(result) != len(s):\n        return \"\"\n    \n    return ''.join(result)\n\n# Example usage:\nprint(rearrange_string(\"aabb\"))  # Output: \"abab\"\nprint(rearrange_string(\"aaab\"))  # Output: \"\"\nprint(rearrange_string(\"aab\"))   # Output: \"aba\"\nprint(rearrange_string(\"aaa\"))   # Output: \"\"\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpibwwjmbp.py\", line 30, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "completion": "from collections import Counter\n\ndef freq_element(lst_of_lsts):\n    # If the input is an empty list, return an empty dictionary\n    if not lst_of_lsts:\n        return {}\n    \n    # Flatten the list of lists into a single list\n    flattened_list = [item for sublist in lst_of_lsts for item in sublist]\n    \n    # Use Counter to get the frequency of each element\n    frequency = Counter(flattened_list)\n    \n    # Convert the Counter object to a dictionary and return it\n    return dict(frequency)\n\n# Example usage:\nexample_list = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\nprint(freq_element(example_list))  # Output: {1: 1, 2: 2, 3: 3, 4: 2, 5: 1}\n\nempty_list = []\nprint(freq_element(empty_list))  # Output: {}\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 41, "completion": "def filter_evennumbers(input_list):\n    \"\"\"\n    Filters even numbers from the input list using a lambda function.\n\n    :param input_list: List of integers to filter.\n    :return: List of even numbers. Returns an empty list if the input list is empty.\n    \"\"\"\n    return list(filter(lambda x: x % 2 == 0, input_list))\n\n# Example usage:\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    even_numbers = filter_evennumbers(numbers)\n    print(even_numbers)  # Output: [2, 4, 6, 8, 10]\n\n    empty_list = []\n    result = filter_evennumbers(empty_list)\n    print(result)  # Output: []\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 42, "completion": "from collections import Counter\n\ndef find_sum(arr):\n    if not arr:\n        return 0\n    \n    # Count the occurrences of each element in the array\n    element_counts = Counter(arr)\n    \n    # Sum the elements that appear more than once\n    sum_repeated = sum(element for element, count in element_counts.items() if count > 1)\n    \n    return sum_repeated\n\n# Example usage:\narr = [1, 2, 3, 4, 2, 3, 5]\nprint(find_sum(arr))  # Output: 5 (since 2 + 3 = 5)\n\nempty_arr = []\nprint(find_sum(empty_arr))  # Output: 0\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4y3wspr7.py\", line 15, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(input_string):\n    # Check if the input string is empty\n    if not input_string:\n        return 'Not matched!'\n    \n    # Define the regex pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'^[a-z]+_[a-z]+$'\n    \n    # Use re.match to check if the entire string matches the pattern\n    if re.match(pattern, input_string):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\nprint(text_match(\"hello_world\"))  # Output: Found a match!\nprint(text_match(\"Hello_world\"))  # Output: Not matched!\nprint(text_match(\"hello_world_\")) # Output: Not matched!\nprint(text_match(\"\"))             # Output: Not matched!\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 44, "completion": "import re\n\ndef text_match_string(word, text):\n    \"\"\"\n    Matches a word at the beginning of a string.\n\n    Parameters:\n    word (str): The word to match at the beginning of the string.\n    text (str): The string to search within.\n\n    Returns:\n    bool: True if the word is found at the beginning of the string, False otherwise.\n    \"\"\"\n    # Handle edge cases: empty string or string with only spaces\n    if not text.strip():\n        return False\n    \n    # Use regex to match the word at the beginning of the string\n    pattern = r'^\\b' + re.escape(word) + r'\\b'\n    match = re.search(pattern, text)\n    \n    return bool(match)\n\n# Example usage:\nprint(text_match_string(\"hello\", \"hello world\"))  # True\nprint(text_match_string(\"hello\", \"helloworld\"))   # False (no word boundary)\nprint(text_match_string(\"hello\", \"world hello\"))  # False (not at the beginning)\nprint(text_match_string(\"hello\", \"\"))             # False (empty string)\nprint(text_match_string(\"hello\", \"   \"))          # False (string with only spaces)\nprint(text_match_string(\"hello\", \"hello\"))        # True (exact match)\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_2s6iibv.py\", line 17, in <module>\n    assert text_match_string(\" python\")==('Not matched!')\nTypeError: text_match_string() missing 1 required positional argument: 'text'", "passed": false}
{"task_id": 46, "completion": "def test_distinct(numbers):\n    \"\"\"\n    Determine whether all the numbers in the list are distinct.\n\n    Parameters:\n    numbers (list): A list of numbers (integers, floats, etc.).\n\n    Returns:\n    bool: True if all numbers are distinct, False otherwise.\n    \"\"\"\n    # Handle edge cases: empty list or single element\n    if len(numbers) <= 1:\n        return True\n    \n    # Use a set to check for duplicates\n    unique_numbers = set(numbers)\n    \n    # If the length of the set is less than the length of the list, there are duplicates\n    return len(unique_numbers) == len(numbers)\n\n# Example usage:\nprint(test_distinct([1, 2, 3, 4, 5]))  # Output: True\nprint(test_distinct([1, 2, 2, 3, 4]))  # Output: False\nprint(test_distinct([]))               # Output: True\nprint(test_distinct([42]))             # Output: True\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 47, "completion": "def compute_last_digit(a: int, b: int) -> int:\n    if a == b:\n        return 1\n    elif a < b:\n        # If a < b, factorial(b) / factorial(a) will have trailing zeros\n        # due to the additional multiples of 5 and 2 in factorial(b).\n        # Hence, the last digit will be 0.\n        return 0\n    else:\n        # If a > b, factorial(a) / factorial(b) is equivalent to\n        # the product of numbers from b+1 to a.\n        # We need to compute the last digit of this product.\n        last_digit = 1\n        for i in range(b + 1, a + 1):\n            last_digit = (last_digit * i) % 10\n        return last_digit\n\n# Example usage:\nprint(compute_last_digit(5, 5))  # Output: 1\nprint(compute_last_digit(5, 6))  # Output: 0\nprint(compute_last_digit(6, 5))  # Output: 6\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1miow7_r.py\", line 21, in <module>\n    assert compute_last_digit(2,4) == 2\nAssertionError", "passed": false}
{"task_id": 48, "completion": "def odd_bit_set_number(n):\n    # Create a mask with all odd bits set\n    mask = 0xAAAAAAAA  # Binary: 10101010...1010\n    \n    # Perform a bitwise OR operation to set the odd bits\n    result = n | mask\n    \n    # Handle the edge case where the input is 0\n    if n == 0:\n        return 1\n    \n    return result\n\n# Example usage:\nprint(odd_bit_set_number(0))  # Output: 1\nprint(odd_bit_set_number(5))  # Output: 15 (binary: 1111)\nprint(odd_bit_set_number(10)) # Output: 10 (binary: 1010) since odd bits are already set\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3c2zvqfm.py\", line 14, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(two_d_list, index=0):\n    \"\"\"\n    Extracts every first or specified element from a given two-dimensional list.\n    \n    Parameters:\n    two_d_list (list of list): The two-dimensional list from which to extract elements.\n    index (int): The index of the element to extract from each sublist. Default is 0 (first element).\n    \n    Returns:\n    list: A list containing the specified elements from each sublist where the index is valid.\n    \"\"\"\n    result = []\n    for sublist in two_d_list:\n        if len(sublist) > index:\n            result.append(sublist[index])\n    return result\n\n# Example usage:\ntwo_d_list = [\n    [1, 2, 3],\n    [4, 5],\n    [6],\n    [7, 8, 9, 10]\n]\n\n# Extract the first element from each sublist\nprint(specified_element(two_d_list))  # Output: [1, 4, 6, 7]\n\n# Extract the second element from each sublist\nprint(specified_element(two_d_list, 1))  # Output: [2, 5, 8]\n\n# Extract the third element from each sublist\nprint(specified_element(two_d_list, 2))  # Output: [3, 9]\n\n# Extract the fourth element from each sublist\nprint(specified_element(two_d_list, 3))  # Output: [10]\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 50, "completion": "def min_length_list(*lists):\n    \"\"\"\n    Finds the list with the minimum length among the provided lists.\n    \n    :param lists: Variable number of lists to compare.\n    :return: The list with the minimum length. If all lists have the same length, returns the first list.\n    \"\"\"\n    if not lists:\n        return None  # Handle the case where no lists are provided\n    \n    # Use the min function with a lambda to find the list with the minimum length\n    return min(lists, key=lambda lst: len(lst))\n\n# Example usage:\nlist1 = [1, 2, 3]\nlist2 = [4, 5]\nlist3 = [6, 7, 8, 9]\nlist4 = [10]\n\nresult = min_length_list(list1, list2, list3, list4)\nprint(result)  # Output: [10]\n\n# Edge case: All lists have the same length\nlist5 = [1, 2]\nlist6 = [3, 4]\nlist7 = [5, 6]\n\nresult_edge = min_length_list(list5, list6, list7)\nprint(result_edge)  # Output: [1, 2]\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpc_9mw52q.py\", line 19, in <module>\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nAssertionError", "passed": false}
{"task_id": 51, "completion": "def check_equilateral(side1, side2, side3):\n    \"\"\"\n    Check if a triangle is equilateral.\n\n    Parameters:\n    side1 (float): Length of the first side of the triangle.\n    side2 (float): Length of the second side of the triangle.\n    side3 (float): Length of the third side of the triangle.\n\n    Returns:\n    bool: True if the triangle is equilateral, False otherwise.\n          Returns False if all sides are zero.\n    \"\"\"\n    # Check if all sides are zero\n    if side1 == 0 and side2 == 0 and side3 == 0:\n        return False\n    \n    # Check if all sides are equal and greater than zero\n    if side1 == side2 == side3 and side1 > 0:\n        return True\n    else:\n        return False\n\n# Example usage:\nprint(check_equilateral(5, 5, 5))  # Output: True\nprint(check_equilateral(5, 5, 6))  # Output: False\nprint(check_equilateral(0, 0, 0))  # Output: False\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram. Returns 0 if either base or height is zero.\n    \"\"\"\n    if base <= 0 or height <= 0:\n        return 0\n    return base * height\n\n# Example usage:\n# print(parallelogram_area(5, 6))  # Output: 30\n# print(parallelogram_area(0, 6))  # Output: 0\n# print(parallelogram_area(5, 0))  # Output: 0\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(s):\n    # Handle empty string case\n    if not s:\n        return 'Equal'\n    \n    # Check if the first and last characters are equal\n    if s[0] == s[-1]:\n        return 'Equal'\n    else:\n        return 'Not Equal'\n\n# Example usage:\nprint(check_equality(\"hello\"))  # Output: Not Equal\nprint(check_equality(\"abba\"))   # Output: Equal\nprint(check_equality(\"\"))       # Output: Equal\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 54, "completion": "def counting_sort(arr):\n    # Handle edge cases: empty list or list with a single element\n    if len(arr) <= 1:\n        return arr\n    \n    # Find the maximum and minimum values in the array\n    max_val = max(arr)\n    min_val = min(arr)\n    \n    # Create a count array to store the count of each unique element\n    count = [0] * (max_val - min_val + 1)\n    \n    # Store the count of each element in the count array\n    for num in arr:\n        count[num - min_val] += 1\n    \n    # Reconstruct the sorted array from the count array\n    sorted_arr = []\n    for i in range(len(count)):\n        sorted_arr.extend([i + min_val] * count[i])\n    \n    return sorted_arr\n\n# Example usage:\narr = [4, 2, 2, 8, 3, 3, 1]\nsorted_arr = counting_sort(arr)\nprint(\"Sorted array:\", sorted_arr)\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 55, "completion": "def tn_gp(a, r, t):\n    \"\"\"\n    Calculate the t-th term of a geometric series.\n\n    Parameters:\n    a (float): The first term of the geometric series.\n    r (float): The common ratio of the geometric series.\n    t (int): The term number to find (1-based indexing).\n\n    Returns:\n    float: The t-th term of the geometric series.\n    \"\"\"\n    if t < 1:\n        raise ValueError(\"Term number t must be a positive integer.\")\n    \n    if r == 0:\n        if t == 1:\n            return a\n        else:\n            return 0\n    else:\n        return a * (r ** (t - 1))\n\n# Example usage:\na = 2  # First term\nr = 3  # Common ratio\nt = 4  # Term number\n\nresult = tn_gp(a, r, t)\nprint(f\"The {t}-th term of the geometric series is: {result}\")\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmph0l91fdi.py\", line 17, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def check(n):\n    # Handle negative numbers by taking absolute value\n    n_abs = abs(n)\n    \n    # Reverse the number\n    reversed_n = int(str(n_abs)[::-1])\n    \n    # Check the condition\n    return n_abs == 2 * reversed_n - 1\n\n# Test cases\nprint(check(123))  # False\nprint(check(21))   # True (21 = 2 * 12 - 1)\nprint(check(0))    # False (0 != 2 * 0 - 1)\nprint(check(5))    # True (5 = 2 * 3 - 1, but 3 is not the reverse of 5, so this is a special case)\nprint(check(9))    # True (9 = 2 * 5 - 1, but 5 is not the reverse of 9, so this is a special case)\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpfzzfm0xl.py\", line 18, in <module>\n    assert check(1) == False\nAssertionError", "passed": false}
{"task_id": 57, "completion": "def find_max_num(digits):\n    # Handle the edge case where the list is empty\n    if not digits:\n        return 0\n    \n    # Convert each digit to a string to facilitate sorting\n    str_digits = [str(digit) for digit in digits]\n    \n    # Sort the digits in descending order to form the largest number\n    str_digits.sort(reverse=True)\n    \n    # Join the sorted digits into a single string and convert it to an integer\n    max_num = int(''.join(str_digits))\n    \n    return max_num\n\n# Example usage:\ndigits = [3, 1, 4, 1, 5, 9]\nprint(find_max_num(digits))  # Output: 954311\n\n# Edge case: empty list\nprint(find_max_num([]))  # Output: 0\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2evn61ts.py\", line 17, in <module>\n    assert find_max_num([1,2,3],3) == 321\nTypeError: find_max_num() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 58, "completion": "def opposite_signs(x: int, y: int) -> bool:\n    \"\"\"\n    Check if two integers have opposite signs.\n\n    Parameters:\n    x (int): The first integer.\n    y (int): The second integer.\n\n    Returns:\n    bool: True if the integers have opposite signs, False otherwise.\n    \"\"\"\n    return (x ^ y) < 0\n\n# Example usage:\nprint(opposite_signs(5, -3))  # Output: True\nprint(opposite_signs(5, 3))   # Output: False\nprint(opposite_signs(0, 0))   # Output: False\nprint(opposite_signs(0, 5))   # Output: False\nprint(opposite_signs(0, -5))  # Output: True\nprint(opposite_signs(-2147483648, 2147483647))  # Output: True (handles large integers)\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjj20rwde.py\", line 14, in <module>\n    assert opposite_signs(0, 1) == True\nAssertionError", "passed": false}
{"task_id": 59, "completion": "def is_octagonal(n):\n    \"\"\"\n    Calculate the nth octagonal number.\n\n    Parameters:\n    n (int): The position of the octagonal number in the sequence.\n\n    Returns:\n    int: The nth octagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    return n * (3 * n - 2)\n\n# Example usage:\nif __name__ == \"__main__\":\n    n = 1\n    print(f\"The {n}th octagonal number is: {is_octagonal(n)}\")\n    \n    n = 5\n    print(f\"The {n}th octagonal number is: {is_octagonal(n)}\")\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 60, "completion": "def max_len_sub(arr):\n    if not arr:\n        return 0\n    \n    # Initialize a dictionary to store the maximum length of subsequence ending with each element\n    dp = {}\n    \n    for num in arr:\n        # The subsequence can either start with the current number or extend an existing subsequence\n        # by adding the current number to the subsequence ending with (num - 1) or (num + 1)\n        dp[num] = max(dp.get(num - 1, 0), dp.get(num + 1, 0)) + 1\n    \n    # The result is the maximum value in the dp dictionary\n    return max(dp.values())\n\n# Example usage:\narr = [1, 2, 3, 4, 5, 3, 2]\nprint(max_len_sub(arr))  # Output: 5\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmsg54_rp.py\", line 15, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}

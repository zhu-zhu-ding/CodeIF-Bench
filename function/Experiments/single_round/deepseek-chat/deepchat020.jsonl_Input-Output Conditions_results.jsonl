{"task_id": 14, "completion": "def find_volume(base_area, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base_area (float or int): The area of the triangular base.\n    height (float or int): The height of the triangular base.\n    length (float or int): The length of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    # Volume = Base Area * Length\n    volume = base_area * length\n    return volume\n\n# Example usage:\n# base_area = 10  # Area of the triangular base\n# height = 5      # Height of the triangular base\n# length = 8      # Length of the prism\n# print(find_volume(base_area, height, length))  # Output: 80.0\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpuujebufn.py\", line 10, in <module>\n    assert find_volume(10,8,6) == 240\nAssertionError", "passed": false}
{"task_id": 15, "completion": "import re\n\ndef split_lowerstring(input_string):\n    # Use regular expression to split the string at lowercase letters\n    segments = re.split('([a-z])', input_string)\n    \n    # Combine the segments and the lowercase letters alternately\n    result = []\n    for i in range(0, len(segments) - 1, 2):\n        result.append(segments[i] + segments[i+1])\n    \n    # If there's an odd number of segments, add the last one\n    if len(segments) % 2 != 0:\n        result.append(segments[-1])\n    \n    return result\n\n# Example usage:\ninput_string = \"HelloWorldPython\"\nresult = split_lowerstring(input_string)\nprint(result)  # Output: ['Hello', 'World', 'Python']\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpq0w7db0s.py\", line 17, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(input_string):\n    # Define the pattern for lowercase letters joined with an underscore\n    pattern = r'[a-z]+_[a-z]+'\n    \n    # Search for the pattern in the input string\n    if re.search(pattern, input_string):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\nprint(text_lowercase_underscore(\"hello_world\"))  # Output: Found a match!\nprint(text_lowercase_underscore(\"Hello_World\"))  # Output: Not matched!\nprint(text_lowercase_underscore(\"helloWorld\"))   # Output: Not matched!\nprint(text_lowercase_underscore(\"hello_world_123\"))  # Output: Found a match!\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplz96uef1.py\", line 17, in <module>\n    assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Parameters:\n    side_length (int): The length of one side of the square. Must be a non-negative integer.\n\n    Returns:\n    int: The perimeter of the square.\n    \n    Raises:\n    ValueError: If the input is not a non-negative integer.\n    \"\"\"\n    if not isinstance(side_length, int) or side_length < 0:\n        raise ValueError(\"The side length must be a non-negative integer.\")\n    \n    return 4 * side_length\n\n# Example usage:\n# perimeter = square_perimeter(5)\n# print(perimeter)  # Output: 20\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(first_string, second_string):\n    # Check if both strings contain only alphabetic characters\n    if not (first_string.isalpha() and second_string.isalpha()):\n        raise ValueError(\"Input strings must only contain alphabetic characters.\")\n    \n    # Create a set of characters from the second string for quick lookup\n    dirty_chars = set(second_string)\n    \n    # Filter out characters from the first string that are in the dirty_chars set\n    cleaned_string = ''.join([char for char in first_string if char not in dirty_chars])\n    \n    return cleaned_string\n\n# Example usage:\ntry:\n    result = remove_dirty_chars(\"hello\", \"el\")\n    print(result)  # Output: \"ho\"\nexcept ValueError as e:\n    print(e)\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 19, "completion": "def test_duplicate(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list of integers.\")\n    \n    # Check for duplicates by comparing the length of the list to the length of the set\n    # Sets automatically remove duplicates, so if the lengths differ, there are duplicates\n    return len(arr) != len(set(arr))\n\n# Example usage:\n# print(test_duplicate([1, 2, 3, 4, 5]))  # Output: False\n# print(test_duplicate([1, 2, 3, 4, 2]))  # Output: True\n# print(test_duplicate(\"not a list\"))     # Raises TypeError\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(num):\n    if num < 1:\n        return False  # Woodall numbers are positive integers\n    \n    n = 1\n    while True:\n        woodall = n * (2 ** n) - 1\n        if woodall == num:\n            return True\n        if woodall > num:\n            return False\n        n += 1\n\n# Example usage:\nprint(is_woodall(1))   # True, since 1 * 2^1 - 1 = 1\nprint(is_woodall(7))   # True, since 2 * 2^2 - 1 = 7\nprint(is_woodall(23))  # True, since 3 * 2^3 - 1 = 23\nprint(is_woodall(10))  # False, 10 is not a Woodall number\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists):\n    \"\"\"\n    Find the maximum sum of elements of a list in a list of lists.\n\n    :param list_of_lists: List of lists containing integers.\n    :return: Integer representing the maximum sum of elements from any sublist.\n    \"\"\"\n    if not list_of_lists:\n        return 0  # Return 0 if the list is empty\n\n    max_sum = float('-inf')  # Initialize with negative infinity to handle all possible sums\n\n    for sublist in list_of_lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum\n\n# Example usage:\nlists = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [10, -2, 1],\n    [7, 8, 9]\n]\n\nprint(maximum_sum(lists))  # Output: 24 (from the sublist [7, 8, 9])\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 25, "completion": "from collections import Counter\n\ndef find_product(arr):\n    # Count the occurrences of each element in the array\n    count = Counter(arr)\n    \n    # Filter out elements that appear more than once\n    non_repeated_elements = [num for num in arr if count[num] == 1]\n    \n    # Calculate the product of non-repeated elements\n    product = 1\n    for num in non_repeated_elements:\n        product *= num\n    \n    return product\n\n# Example usage:\narr = [1, 2, 3, 2, 4, 5, 5]\nresult = find_product(arr)\nprint(result)  # Output: 12 (since 1 * 3 * 4 = 12)\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppyiea39n.py\", line 16, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(tuple_list, k):\n    \"\"\"\n    Check if all tuples in the list contain exactly k elements.\n\n    :param tuple_list: List of tuples to be checked.\n    :param k: The number of elements each tuple should contain.\n    :return: True if all tuples have exactly k elements, False otherwise.\n    \"\"\"\n    return all(len(t) == k for t in tuple_list)\n\n# Example usage:\ntuple_list = [(1, 2), (3, 4), (5, 6)]\nk = 2\nprint(check_k_elements(tuple_list, k))  # Output: True\n\ntuple_list = [(1, 2, 3), (4, 5), (6, 7)]\nk = 2\nprint(check_k_elements(tuple_list, k))  # Output: False\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdgw2fkoo.py\", line 10, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 28, "completion": "def binomial_coeff(n, k):\n    # Handle edge cases\n    if k < 0 or k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    \n    # Use the multiplicative formula to compute the binomial coefficient\n    if k > n - k:\n        k = n - k  # Take advantage of symmetry\n    \n    result = 1\n    for i in range(k):\n        result = result * (n - i) // (i + 1)\n    \n    return result\n\n# Example usage:\nn = 5\nk = 2\nprint(f\"C({n}, {k}) = {binomial_coeff(n, k)}\")  # Output: C(5, 2) = 10\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    count = 0\n    n = len(s)\n    \n    # Iterate over all possible substrings\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substring = s[i:j]\n            if substring[0] == substring[-1]:\n                count += 1\n                \n    return count\n\n# Example usage:\ninput_string = \"abcab\"\nresult = count_substring_with_equal_ends(input_string)\nprint(result)  # Output: 7\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    # Initialize the largest prime factor\n    largest_prime = -1\n    \n    # Divide n by 2 until it's odd\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n    \n    # Now n must be odd, so we can skip even numbers\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            largest_prime = i\n            n //= i\n    \n    # If n is still greater than 2, then n itself is prime\n    if n > 2:\n        largest_prime = n\n    \n    return largest_prime\n\n# Example usage:\nnumber = 13195\nprint(f\"The largest prime factor of {number} is: {max_prime_factors(number)}\")\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 35, "completion": "def find_rect_num(n):\n    \"\"\"\n    Calculate the n-th rectangular number.\n\n    Parameters:\n    n (int): The position of the rectangular number to find.\n\n    Returns:\n    int: The n-th rectangular number.\n    \"\"\"\n    return n * (n + 1)\n\n# Example usage:\nif __name__ == \"__main__\":\n    n = 5\n    print(f\"The {n}-th rectangular number is: {find_rect_num(n)}\")\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator, n):\n    # Compute the fraction as a decimal string\n    decimal_representation = str(numerator / denominator)\n    \n    # Find the position of the decimal point\n    decimal_point_index = decimal_representation.find('.')\n    \n    # If there's no decimal point, the fraction is a whole number\n    if decimal_point_index == -1:\n        return 0  # or handle as per requirements\n    \n    # Extract the decimal part\n    decimal_part = decimal_representation[decimal_point_index + 1:]\n    \n    # Check if n is within the length of the decimal part\n    if n <= len(decimal_part):\n        return int(decimal_part[n - 1])\n    else:\n        return 0  # or handle as per requirements\n\n# Example usage:\nnumerator = 1\ndenominator = 7\nn = 3\nprint(find_nth_digit(numerator, denominator, n))  # Output: 4\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 38, "completion": "def div_even_odd(numbers):\n    # Initialize variables to store the first even and odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Iterate through the list to find the first even and odd numbers\n    for num in numbers:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        \n        # If both first_even and first_odd are found, break out of the loop\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Check if both first_even and first_odd are found\n    if first_even is not None and first_odd is not None:\n        # Return the division of first_even by first_odd\n        return first_even / first_odd\n    else:\n        # If either first_even or first_odd is not found, return None\n        return None\n\n# Example usage:\nnumbers = [1, 3, 5, 7, 8, 10]\nresult = div_even_odd(numbers)\nprint(result)  # Output: 8.0\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 39, "completion": "import heapq\nfrom collections import Counter\n\ndef rearange_string(s: str) -> str:\n    # Count the frequency of each character\n    char_counts = Counter(s)\n    \n    # Create a max-heap based on frequency\n    max_heap = [(-count, char) for char, count in char_counts.items()]\n    heapq.heapify(max_heap)\n    \n    result = []\n    prev_count, prev_char = 0, ''\n    \n    while max_heap:\n        # Pop the character with the highest frequency\n        count, char = heapq.heappop(max_heap)\n        \n        # Append the character to the result\n        result.append(char)\n        \n        # Push the previous character back to the heap if its count is not zero\n        if prev_count < 0:\n            heapq.heappush(max_heap, (prev_count, prev_char))\n        \n        # Update the previous character and its count\n        prev_count, prev_char = count + 1, char\n    \n    # If the result length is not equal to the input string length, it's impossible\n    if len(result) != len(s):\n        return \"\"\n    \n    return ''.join(result)\n\n# Example usage:\nprint(rearange_string(\"aabb\"))  # Output: \"abab\"\nprint(rearange_string(\"aaab\"))  # Output: \"\"\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 42, "completion": "from collections import Counter\n\ndef find_sum(arr):\n    # Count the occurrences of each element in the array\n    element_counts = Counter(arr)\n    \n    # Filter elements that appear more than once\n    repeated_elements = [element for element, count in element_counts.items() if count > 1]\n    \n    # Calculate the sum of repeated elements\n    sum_repeated = sum(repeated_elements)\n    \n    return sum_repeated\n\n# Example usage:\narr = [1, 2, 3, 4, 2, 3, 5]\nresult = find_sum(arr)\nprint(result)  # Output: 5 (since 2 + 3 = 5)\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvgwxyhe1.py\", line 14, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(input_string):\n    # Define the regex pattern to match sequences of lowercase letters joined by an underscore\n    pattern = r'^[a-z]+_[a-z]+$'\n    \n    # Use re.search to check if the pattern matches the input string\n    if re.search(pattern, input_string):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\nprint(text_match(\"hello_world\"))  # Output: Found a match!\nprint(text_match(\"Hello_world\"))  # Output: Not matched!\nprint(text_match(\"hello_world_\")) # Output: Not matched!\nprint(text_match(\"hello\"))        # Output: Not matched!\nprint(text_match(\"hello_\"))       # Output: Not matched!\nprint(text_match(\"_world\"))       # Output: Not matched!\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 46, "completion": "def test_distinct(numbers):\n    \"\"\"\n    Determine whether all the numbers in the list are distinct.\n\n    :param numbers: List of integers\n    :return: Boolean indicating whether all numbers are distinct\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    unique_numbers = set(numbers)\n    \n    # If the length of the set is equal to the length of the list, all numbers are distinct\n    return len(unique_numbers) == len(numbers)\n\n# Example usage:\nprint(test_distinct([1, 2, 3, 4, 5]))  # Output: True\nprint(test_distinct([1, 2, 2, 3, 4]))  # Output: False\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 48, "completion": "def odd_bit_set_number(n):\n    \"\"\"\n    Sets all odd bits of the given integer n.\n\n    :param n: The input integer.\n    :return: The integer with all odd bits set.\n    \"\"\"\n    # Create a mask with all odd bits set\n    mask = 0\n    i = 1\n    while i < 32:  # Assuming 32-bit integers\n        mask |= (1 << i)\n        i += 2\n    \n    # Perform a bitwise OR operation to set the odd bits\n    result = n | mask\n    return result\n\n# Example usage:\ninput_number = 0b10101010  # Binary: 10101010, Decimal: 170\noutput_number = odd_bit_set_number(input_number)\nprint(bin(output_number))  # Output: 0b11111111 (Binary: 11111111, Decimal: 255)\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpv4z1i1n0.py\", line 15, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(two_d_list, index):\n    \"\"\"\n    Extracts every first or specified element from a given two-dimensional list.\n\n    Parameters:\n    two_d_list (list of list): The two-dimensional list from which to extract elements.\n    index (int): The index of the element to extract from each sublist.\n\n    Returns:\n    list: A list of elements from each sublist at the specified index.\n          Returns an empty list if the input list is empty.\n    \"\"\"\n    if not two_d_list:\n        return []\n    \n    return [sublist[index] for sublist in two_d_list if len(sublist) > index]\n\n# Example usage:\ntwo_d_list = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n\nindex = 1\nresult = specified_element(two_d_list, index)\nprint(result)  # Output: [2, 5, 8]\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 50, "completion": "def min_length_list(list_of_lists):\n    # Use the min function with a lambda to find the list with the minimum length\n    min_list = min(list_of_lists, key=lambda x: len(x))\n    return (len(min_list), min_list)\n\n# Example usage:\nlists = [[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]\nresult = min_length_list(lists)\nprint(result)  # Output: (1, [6])\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram.\n    \"\"\"\n    if base <= 0 or height <= 0:\n        raise ValueError(\"Base and height must be positive numbers.\")\n    \n    area = base * height\n    return area\n\n# Example usage:\n# base = 5\n# height = 10\n# area = parallelogram_area(base, height)\n# print(f\"The area of the parallelogram is: {area}\")\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpih467mif.py\", line 15, in <module>\n    assert parallelogram_area(0, 10) == 0\n  File \"/tmp/tmpih467mif.py\", line 3, in parallelogram_area\n    raise ValueError(\"Base and height must be positive numbers.\")\nValueError: Base and height must be positive numbers.", "passed": false}
{"task_id": 53, "completion": "def check_equality(input_string):\n    # Check if the input is a string\n    if not isinstance(input_string, str):\n        raise ValueError(\"Input must be a string\")\n    \n    # Check if the string is empty\n    if not input_string:\n        return \"Not Equal\"\n    \n    # Compare the first and last characters\n    if input_string[0] == input_string[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n\n# Example usage:\nprint(check_equality(\"hello\"))  # Output: Not Equal\nprint(check_equality(\"racecar\"))  # Output: Equal\nprint(check_equality(\"\"))  # Output: Not Equal\nprint(check_equality(\"a\"))  # Output: Equal\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 54, "completion": "def counting_sort(arr):\n    # If the array is empty, return it immediately\n    if not arr:\n        return arr\n\n    # Find the maximum element in the array to determine the range\n    max_val = max(arr)\n    \n    # Initialize a count array with zeros, with size (max_val + 1)\n    count = [0] * (max_val + 1)\n    \n    # Store the count of each element in the count array\n    for num in arr:\n        count[num] += 1\n    \n    # Modify the count array such that each element at each index\n    # stores the sum of previous counts. This will help in placing\n    # the elements in the correct position in the output array.\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    \n    # Initialize the output array with zeros\n    output = [0] * len(arr)\n    \n    # Build the output array by placing elements in their correct position\n    for num in reversed(arr):\n        output[count[num] - 1] = num\n        count[num] -= 1\n    \n    return output\n\n# Example usage:\narr = [4, 2, 2, 8, 3, 3, 1]\nsorted_arr = counting_sort(arr)\nprint(\"Sorted array:\", sorted_arr)\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 57, "completion": "def find_max_num(digits, num_digits):\n    # Sort the digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n    \n    # Take the first 'num_digits' digits\n    selected_digits = sorted_digits[:num_digits]\n    \n    # Combine the selected digits to form the largest number\n    max_num = int(''.join(map(str, selected_digits)))\n    \n    return max_num\n\n# Example usage:\ndigits = [1, 2, 3, 4, 5]\nnum_digits = 3\nprint(find_max_num(digits, num_digits))  # Output: 543\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 58, "completion": "def opposite_signs(x: int, y: int) -> bool:\n    \"\"\"\n    Check if two integers have opposite signs.\n\n    Parameters:\n    x (int): The first integer.\n    y (int): The second integer.\n\n    Returns:\n    bool: True if the integers have opposite signs, False otherwise.\n    \"\"\"\n    return (x ^ y) < 0\n\n# Example usage:\nprint(opposite_signs(5, -3))  # Output: True\nprint(opposite_signs(5, 3))   # Output: False\nprint(opposite_signs(-5, -3)) # Output: False\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 60, "completion": "def max_len_sub(arr, diff):\n    # Create a dictionary to store the maximum length of subsequence ending with each number\n    dp = {}\n    max_length = 0\n    \n    for num in arr:\n        # Check if (num - diff) exists in the dictionary\n        if (num - diff) in dp:\n            # If it exists, update the current number's subsequence length\n            dp[num] = dp[num - diff] + 1\n        else:\n            # Otherwise, start a new subsequence with length 1\n            dp[num] = 1\n        \n        # Update the maximum length found so far\n        if dp[num] > max_length:\n            max_length = dp[num]\n    \n    return max_length\n\n# Example usage:\narr = [1, 5, 2, 6, 3, 7, 4]\ndiff = 3\nprint(max_len_sub(arr, diff))  # Output: 4\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3tv467_7.py\", line 21, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nAssertionError", "passed": false}

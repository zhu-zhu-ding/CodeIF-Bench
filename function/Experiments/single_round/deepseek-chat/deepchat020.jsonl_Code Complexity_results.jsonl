{"task_id": 11, "completion": "def remove_occ(s: str, char: str) -> str:\n    # Find the index of the first occurrence\n    first_index = s.find(char)\n    \n    # Find the index of the last occurrence\n    last_index = s.rfind(char)\n    \n    # If the character is not found, return the original string\n    if first_index == -1 or last_index == -1:\n        return s\n    \n    # Remove the first occurrence\n    s = s[:first_index] + s[first_index+1:]\n    \n    # Adjust the last index if it was after the first occurrence\n    if last_index > first_index:\n        last_index -= 1\n    \n    # Remove the last occurrence\n    s = s[:last_index] + s[last_index+1:]\n    \n    return s\n\n# Example usage:\nresult = remove_occ(\"hello world\", \"l\")\nprint(result)  # Output: \"helo word\"\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 14, "completion": "def find_volume(base, triangle_height, prism_height):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base (float): The length of the base of the triangle.\n    triangle_height (float): The height of the triangle.\n    prism_height (float): The height (length) of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    base_area = 0.5 * base * triangle_height\n    volume = base_area * prism_height\n    return volume\n\n# Example usage:\n# base = 5, triangle_height = 4, prism_height = 10\n# Volume = 0.5 * 5 * 4 * 10 = 100\nprint(find_volume(5, 4, 10))  # Output: 100.0\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 15, "completion": "import re\n\ndef split_lowerstring(s):\n    return re.split(r'(?<=[a-z])', s)\n\n# Example usage:\nresult = split_lowerstring(\"HelloWorldPython\")\nprint(result)  # Output: ['Hello', 'World', 'Python']\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp48nfwpv0.py\", line 7, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Find sequences of lowercase letters joined with an underscore.\n\n    :param text: The input string to search within.\n    :return: A list of all matches found.\n    \"\"\"\n    return re.findall(r'[a-z]+_[a-z]+', text)\n\n# Example usage:\nif __name__ == \"__main__\":\n    sample_text = \"hello_world this_is_a_test example_text\"\n    matches = text_lowercase_underscore(sample_text)\n    print(matches)  # Output: ['hello_world', 'this_is_a_test', 'example_text']\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpe7qsobs4.py\", line 9, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Parameters:\n    side_length (float or int): The length of one side of the square.\n\n    Returns:\n    float or int: The perimeter of the square.\n    \"\"\"\n    return 4 * side_length\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(num):\n    if num < 1:\n        return False\n    \n    n = 1\n    while True:\n        woodall = n * (2 ** n) - 1\n        if woodall == num:\n            return True\n        if woodall > num:\n            return False\n        n += 1\n\n# Example usage:\nprint(is_woodall(1))   # True, because 1 * 2^1 - 1 = 1\nprint(is_woodall(7))   # True, because 2 * 2^2 - 1 = 7\nprint(is_woodall(23))  # True, because 3 * 2^3 - 1 = 23\nprint(is_woodall(10))  # False, 10 is not a Woodall number\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmprlniikka.py\", line 22, in <module>\n    assert cc_visit(inspect.getsource(is_woodall))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 21, "completion": "def multiples_of_num(n, m):\n    return [n * i for i in range(1, m + 1)]\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_5o54hau.py\", line 3, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 24, "completion": "def binary_to_decimal(binary_str):\n    return int(binary_str, 2)\n\n# Example usage:\nbinary_number = \"1101\"\ndecimal_number = binary_to_decimal(binary_number)\nprint(f\"The decimal equivalent of {binary_number} is {decimal_number}\")\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwt_oyizo.py\", line 7, in <module>\n    assert binary_to_decimal(100) == 4\n  File \"/tmp/tmpwt_oyizo.py\", line 2, in binary_to_decimal\n    return int(binary_str, 2)\nTypeError: int() can't convert non-string with explicit base", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    # Initialize the largest prime factor\n    largest_prime = -1\n    \n    # Divide by 2 until n is odd\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n    \n    # Now n must be odd, so we can skip even numbers\n    # and iterate from 3 to sqrt(n)\n    i = 3\n    while i * i <= n:\n        while n % i == 0:\n            largest_prime = i\n            n //= i\n        i += 2\n    \n    # If n is still greater than 2, then n itself is prime\n    if n > 2:\n        largest_prime = n\n    \n    return largest_prime\n\n# Example usage:\nprint(max_prime_factors(13195))  # Output: 29\nprint(max_prime_factors(600851475143))  # Output: 6857\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(decimal_number):\n    return bin(decimal_number)[2:]\n\n# Example usage:\nprint(decimal_to_binary(10))  # Output: 1010\nprint(decimal_to_binary(255))  # Output: 11111111\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwi9mp5vl.py\", line 6, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    return n * (n + 1)\n\n# Example usage:\n# print(find_rect_num(5))  # Output: 30\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator, n):\n    if denominator == 0:\n        raise ValueError(\"Denominator cannot be zero.\")\n    \n    # Calculate the integer part of the division\n    integer_part = numerator // denominator\n    remainder = numerator % denominator\n    \n    # Initialize the result with the integer part\n    result = str(integer_part) + \".\"\n    \n    # Simulate long division to find the nth digit after the decimal point\n    for _ in range(n):\n        remainder *= 10\n        digit = remainder // denominator\n        result += str(digit)\n        remainder %= denominator\n    \n    # Return the nth digit after the decimal point\n    return int(result.split('.')[1][n-1])\n\n# Example usage:\n# print(find_nth_digit(1, 7, 3))  # Output: 4 (since 1/7 = 0.142857..., the 3rd digit is 4)\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 38, "completion": "def div_even_odd(numbers):\n    even = None\n    odd = None\n    \n    for num in numbers:\n        if even is None and num % 2 == 0:\n            even = num\n        if odd is None and num % 2 != 0:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    \n    if even is None or odd is None:\n        return None  # Return None if either even or odd number is not found\n    \n    return even / odd\n\n# Example usage:\nnumbers = [1, 3, 5, 7, 2, 4, 6]\nresult = div_even_odd(numbers)\nprint(result)  # Output: 2.0 (since 2 / 1 = 2.0)\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0oihlp54.py\", line 23, in <module>\n    assert cc_visit(inspect.getsource(div_even_odd))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 40, "completion": "from collections import Counter\nfrom itertools import chain\n\ndef freq_element(lst_of_lsts):\n    # Flatten the list of lists into a single list\n    flattened_list = list(chain.from_iterable(lst_of_lsts))\n    \n    # Use Counter to count the frequency of each element\n    frequency = Counter(flattened_list)\n    \n    return frequency\n\n# Example usage:\nlst_of_lsts = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\nresult = freq_element(lst_of_lsts)\nprint(result)\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 42, "completion": "from collections import Counter\n\ndef find_sum(arr):\n    # Count the occurrences of each element in the array\n    element_counts = Counter(arr)\n    \n    # Sum the elements that appear more than once\n    sum_repeated = sum(element for element, count in element_counts.items() if count > 1)\n    \n    return sum_repeated\n\n# Example usage:\narr = [1, 2, 3, 4, 2, 3, 5]\nprint(find_sum(arr))  # Output: 5 (since 2 + 3 = 5)\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpsppf378y.py\", line 11, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    # Define the regex pattern to match sequences of lowercase letters joined by an underscore\n    pattern = r'[a-z]+_[a-z]+'\n    \n    # Use re.search to find the pattern in the input text\n    match = re.search(pattern, text)\n    \n    # Return True if a match is found, otherwise return False\n    return bool(match)\n\n# Example usage:\nprint(text_match(\"hello_world\"))  # Output: True\nprint(text_match(\"Hello_world\"))  # Output: False (because 'H' is uppercase)\nprint(text_match(\"hello_world_123\"))  # Output: True (matches 'hello_world')\nprint(text_match(\"hello\"))  # Output: False (no underscore)\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmgqdvtu2.py\", line 14, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 45, "completion": "from math import gcd\nfrom functools import reduce\n\ndef get_gcd(arr):\n    \"\"\"\n    Calculate the GCD of all elements in the given array.\n\n    :param arr: List of integers\n    :return: GCD of all elements in the array\n    \"\"\"\n    if not arr:\n        return 0  # Return 0 if the array is empty\n    \n    # Use reduce to apply the gcd function across the array\n    return reduce(gcd, arr)\n\n# Example usage:\narr = [24, 36, 60]\nprint(get_gcd(arr))  # Output: 12\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6ge_7hua.py\", line 16, in <module>\n    assert cc_visit(inspect.getsource(get_gcd))[0].complexity <=1\nAssertionError", "passed": false}
{"task_id": 47, "completion": "def compute_last_digit(a: int, b: int) -> int:\n    if b < a:\n        return -1  # Undefined case\n    \n    # The last digit of the division is the last digit of the product (a+1) * (a+2) * ... * b\n    last_digit = 1\n    for i in range(a + 1, b + 1):\n        last_digit = (last_digit * (i % 10)) % 10\n    \n    return last_digit\n\n# Example usage:\nprint(compute_last_digit(5, 10))  # Output: 2\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 51, "completion": "def check_equilateral(a, b, c):\n    if a == b == c:\n        print(\"The triangle is equilateral.\")\n    else:\n        print(\"The triangle is not equilateral.\")\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpui09__8y.py\", line 6, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram.\n    \"\"\"\n    return base * height\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(s):\n    return len(s) > 0 and s[0] == s[-1]\n\n# Example usage:\nprint(check_equality(\"hello\"))  # Output: False\nprint(check_equality(\"abba\"))   # Output: True\nprint(check_equality(\"a\"))      # Output: True\nprint(check_equality(\"\"))       # Output: False\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvrs0uoz5.py\", line 8, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def check(n):\n    # Calculate the reverse of the number\n    reverse = int(str(n)[::-1])\n    \n    # Check if the number is one less than twice its reverse\n    return n == 2 * reverse - 1\n\n# Example usage:\nprint(check(21))  # Output: True, because 21 == 2 * 12 - 1\nprint(check(23))  # Output: False, because 23 != 2 * 32 - 1\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 58, "completion": "def opposite_signs(x, y):\n    \"\"\"\n    Check if two integers have opposite signs.\n\n    Parameters:\n    x (int): The first integer.\n    y (int): The second integer.\n\n    Returns:\n    bool: True if the integers have opposite signs, False otherwise.\n    \"\"\"\n    return (x ^ y) < 0\n\n# Example usage:\nprint(opposite_signs(5, -3))  # Output: True\nprint(opposite_signs(5, 3))   # Output: False\nprint(opposite_signs(-5, -3)) # Output: False\n", "requirement": "Code Complexity", "result": "passed", "passed": true}

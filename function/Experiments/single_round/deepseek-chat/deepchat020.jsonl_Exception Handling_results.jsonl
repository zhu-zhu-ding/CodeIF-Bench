{"task_id": 11, "completion": "def remove_occ(s, char):\n    # Check if the second parameter is a single character\n    if not isinstance(char, str) or len(char) != 1:\n        raise ValueError(\"Second parameter must be a single character.\")\n    \n    # Find the index of the first occurrence\n    first_index = s.find(char)\n    \n    # Find the index of the last occurrence\n    last_index = s.rfind(char)\n    \n    # If the character is not found, return the original string\n    if first_index == -1 or last_index == -1:\n        return s\n    \n    # Remove the first occurrence\n    s = s[:first_index] + s[first_index+1:]\n    \n    # Since we removed the first occurrence, the last occurrence index might have shifted\n    # So we need to find the last occurrence again\n    last_index = s.rfind(char)\n    \n    # Remove the last occurrence\n    s = s[:last_index] + s[last_index+1:]\n    \n    return s\n\n# Example usage:\n# result = remove_occ(\"hello world\", \"l\")\n# print(result)  # Output: \"helo word\"\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 12, "completion": "def sort_matrix(matrix):\n    # Check if the input is a list of lists\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise TypeError(\"Input must be a list of lists.\")\n    \n    # Check if all elements in the matrix are integers\n    for row in matrix:\n        if not all(isinstance(element, int) for element in row):\n            raise TypeError(\"All elements in the matrix must be integers.\")\n    \n    # Sort the matrix based on the sum of each row\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    \n    return sorted_matrix\n\n# Example usage:\nmatrix = [\n    [1, 2, 3],\n    [4, 5],\n    [7, 8, 9]\n]\n\ntry:\n    sorted_matrix = sort_matrix(matrix)\n    print(\"Sorted Matrix:\")\n    for row in sorted_matrix:\n        print(row)\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 13, "completion": "from collections import Counter\n\ndef count_common(words):\n    # Check if the input is a list\n    if not isinstance(words, list):\n        raise TypeError(\"Input must be a list of strings.\")\n    \n    # Check if all elements in the list are strings\n    if not all(isinstance(word, str) for word in words):\n        raise TypeError(\"All elements in the list must be strings.\")\n    \n    # Count the occurrences of each word\n    word_counts = Counter(words)\n    \n    # Find the most common words\n    most_common = word_counts.most_common()\n    \n    return most_common\n\n# Example usage:\ntry:\n    words_list = [\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"banana\"]\n    common_words = count_common(words_list)\n    print(\"Most common words:\", common_words)\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmdlbowmy.py\", line 21, in <module>\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nAssertionError", "passed": false}
{"task_id": 14, "completion": "def find_volume(base, height, length):\n    # Check if all inputs are numeric and positive\n    if not (isinstance(base, (int, float)) and isinstance(height, (int, float)) and isinstance(length, (int, float))):\n        raise ValueError('All dimensions must be positive numbers.')\n    \n    if base <= 0 or height <= 0 or length <= 0:\n        raise ValueError('All dimensions must be positive numbers.')\n    \n    # Calculate the area of the triangular base\n    area_of_base = 0.5 * base * height\n    \n    # Calculate the volume of the triangular prism\n    volume = area_of_base * length\n    \n    return volume\n\n# Example usage:\ntry:\n    volume = find_volume(3, 4, 5)\n    print(f\"The volume of the triangular prism is: {volume}\")\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 15, "completion": "import re\n\ndef split_lowerstring(s):\n    # Check if the input is a string\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Use regular expression to split the string at lowercase letters\n    parts = re.split('([a-z])', s)\n    \n    # Combine the lowercase letters with their preceding parts\n    result = []\n    for i in range(0, len(parts) - 1, 2):\n        result.append(parts[i] + (parts[i+1] if i+1 < len(parts) else ''))\n    \n    return result\n\n# Example usage:\n# print(split_lowerstring(\"HelloWorldPython\"))  # Output: ['Hello', 'World', 'Python']\n# print(split_lowerstring(\"ThisIsAString\"))     # Output: ['This', 'Is', 'A', 'String']\n# print(split_lowerstring(123))                 # Raises TypeError: Input must be a string\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpgc_ybshy.py\", line 20\n    try: split_lowerstring(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(input_string):\n    # Check if the input is a string\n    if not isinstance(input_string, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Regular expression to match sequences of lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    \n    # Find all matches in the input string\n    matches = re.findall(pattern, input_string)\n    \n    return matches\n\n# Example usage:\n# input_text = \"hello_world this_is_a_test not_a_match CamelCase_NotAllowed\"\n# result = text_lowercase_underscore(input_text)\n# print(result)  # Output: ['hello_world', 'this_is_a_test']\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpswcwp0xc.py\", line 15, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Parameters:\n    side_length (float or int): The length of one side of the square.\n\n    Returns:\n    float or int: The perimeter of the square.\n\n    Raises:\n    ValueError: If the side_length is negative.\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    \n    perimeter = 4 * side_length\n    return perimeter\n\n# Example usage:\ntry:\n    side = 5\n    print(f\"The perimeter of the square with side length {side} is {square_perimeter(side)}\")\nexcept ValueError as e:\n    print(e)\n\ntry:\n    side = -3\n    print(f\"The perimeter of the square with side length {side} is {square_perimeter(side)}\")\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(input_string, dirty_chars):\n    # Check if both inputs are strings\n    if not isinstance(input_string, str) or not isinstance(dirty_chars, str):\n        raise TypeError(\"Both inputs must be strings.\")\n    \n    # Create a set of characters to remove for faster lookup\n    dirty_set = set(dirty_chars)\n    \n    # Use a list comprehension to filter out the dirty characters\n    cleaned_string = ''.join([char for char in input_string if char not in dirty_set])\n    \n    return cleaned_string\n\n# Example usage:\n# result = remove_dirty_chars(\"hello world\", \"lo\")\n# print(result)  # Output: \"he wrd\"\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 19, "completion": "def test_duplicate(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise ValueError(\"Input must be a list of integers\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise ValueError(\"Input must be a list of integers\")\n    \n    # Use a set to check for duplicates\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    \n    return False\n\n# Example usage:\ntry:\n    print(test_duplicate([1, 2, 3, 4, 5]))  # Output: False\n    print(test_duplicate([1, 2, 3, 4, 1]))  # Output: True\n    print(test_duplicate(\"not a list\"))     # Raises ValueError\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2cz58swd.py\", line 26, in <module>\n    test_duplicate(None)\n  File \"/tmp/tmp2cz58swd.py\", line 4, in test_duplicate\n    raise ValueError(\"Input must be a list of integers\")\nValueError: Input must be a list of integers", "passed": false}
{"task_id": 20, "completion": "def is_woodall(number):\n    # Check if the input is an integer\n    if not isinstance(number, int):\n        raise TypeError(\"Input must be an integer.\")\n    \n    # Woodall numbers are positive, so we can return False for non-positive numbers\n    if number <= 0:\n        return False\n    \n    # Iterate over possible values of n to find if number is a Woodall number\n    n = 1\n    while True:\n        woodall = n * (2 ** n) - 1\n        if woodall == number:\n            return True\n        if woodall > number:\n            return False\n        n += 1\n\n# Example usage:\nprint(is_woodall(1))   # True, since 1*2^1 - 1 = 1\nprint(is_woodall(7))   # True, since 2*2^2 - 1 = 7\nprint(is_woodall(23))  # True, since 3*2^3 - 1 = 23\nprint(is_woodall(10))  # False, 10 is not a Woodall number\nprint(is_woodall(3.5)) # Raises TypeError\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxb4ey3b8.py\", line 22, in <module>\n    print(is_woodall(3.5)) # Raises TypeError\n  File \"/tmp/tmpxb4ey3b8.py\", line 4, in is_woodall\n    raise TypeError(\"Input must be an integer.\")\nTypeError: Input must be an integer.", "passed": false}
{"task_id": 21, "completion": "def multiples_of_num(n, m):\n    \"\"\"\n    Find m number of multiples of n.\n\n    Parameters:\n    n (int): The number whose multiples are to be found.\n    m (int): The number of multiples to find.\n\n    Returns:\n    list: A list containing the first m multiples of n.\n\n    Raises:\n    ValueError: If either m or n is negative.\n    \"\"\"\n    if m < 0 or n < 0:\n        raise ValueError(\"Both m and n must be non-negative.\")\n    \n    return [n * i for i in range(1, m + 1)]\n\n# Example usage:\ntry:\n    result = multiples_of_num(5, 4)\n    print(result)  # Output: [5, 10, 15, 20]\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvuie7doj.py\", line 11, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "completion": "def find_first_duplicate(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list of integers.\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements in the list must be integers.\")\n    \n    # Use a set to track seen elements\n    seen = set()\n    \n    # Iterate through the array\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    \n    # If no duplicates found, return None\n    return None\n\n# Example usage:\n# print(find_first_duplicate([1, 2, 3, 4, 2, 5]))  # Output: 2\n# print(find_first_duplicate([1, 2, 3, 4, 5]))     # Output: None\n# print(find_first_duplicate(\"not a list\"))        # Raises TypeError\n# print(find_first_duplicate([1, 2, 'a', 3]))      # Raises TypeError\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvvh90v7x.py\", line 23, in <module>\n    assert find_first_duplicate([1, 2, 3, 4])==-1\nAssertionError", "passed": false}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists):\n    # Check if the input is a list\n    if not isinstance(list_of_lists, list):\n        raise TypeError(\"Input must be a list of lists.\")\n    \n    # Check if all elements in the list are lists\n    for sublist in list_of_lists:\n        if not isinstance(sublist, list):\n            raise TypeError(\"All elements in the input list must be lists.\")\n        \n        # Check if all elements in the sublist are integers\n        for element in sublist:\n            if not isinstance(element, int):\n                raise TypeError(\"All elements in the sublists must be integers.\")\n    \n    # Calculate the sum of each sublist and find the maximum sum\n    max_sum = max(sum(sublist) for sublist in list_of_lists)\n    \n    return max_sum\n\n# Example usage:\n# list_of_lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n# print(maximum_sum(list_of_lists))  # Output: 24\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpvlpm8yop.py\", line 22\n    try: maximum_sum([[1, 2], [3, 'a']]); assert False, 'Expected TypeError' except TypeError: pass\n                                                                             ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 24, "completion": "def binary_to_decimal(binary_str):\n    # Check if the input is a valid binary string\n    for char in binary_str:\n        if char not in {'0', '1'}:\n            raise ValueError(\"Invalid binary number\")\n    \n    # Convert binary string to decimal\n    decimal_value = 0\n    length = len(binary_str)\n    for i, char in enumerate(binary_str):\n        decimal_value += int(char) * (2 ** (length - i - 1))\n    \n    return decimal_value\n\n# Example usage:\ntry:\n    binary_number = \"101010\"\n    decimal_number = binary_to_decimal(binary_number)\n    print(f\"The decimal equivalent of {binary_number} is {decimal_number}\")\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpc6qxitgk.py\", line 22\n    try: binary_to_decimal('102'); assert False, 'Expected ValueError' except ValueError as e: assert str(e) == 'Invalid binary number'\n                                                                       ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 25, "completion": "def find_product(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements in the list must be integers.\")\n    \n    # Find non-repeated elements\n    non_repeated_elements = [x for x in arr if arr.count(x) == 1]\n    \n    # Calculate the product of non-repeated elements\n    product = 1\n    for num in non_repeated_elements:\n        product *= num\n    \n    return product\n\n# Example usage:\n# print(find_product([1, 2, 3, 2, 4]))  # Output: 12 (1 * 3 * 4)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpod1z44uv.py\", line 17, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(tuple_list, k):\n    # Check if the input is a list\n    if not isinstance(tuple_list, list):\n        raise TypeError(\"Input must be a list of tuples.\")\n    \n    # Check if k is an integer\n    if not isinstance(k, int):\n        raise TypeError(\"k must be an integer.\")\n    \n    # Check if all elements in the list are tuples\n    if not all(isinstance(t, tuple) for t in tuple_list):\n        raise TypeError(\"All elements in the list must be tuples.\")\n    \n    # Check if all tuples have exactly k elements\n    if not all(len(t) == k for t in tuple_list):\n        return False\n    \n    return True\n\n# Example usage:\ntuple_list = [(1, 2), (3, 4), (5, 6)]\nk = 2\nprint(check_k_elements(tuple_list, k))  # Output: True\n\ntuple_list = [(1, 2), (3, 4, 5), (6, 7)]\nk = 2\nprint(check_k_elements(tuple_list, k))  # Output: False\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpq0cc1c12.py\", line 22, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "completion": "def remove(lst):\n    # Check if the input is a list\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Check if all elements in the list are strings\n    for item in lst:\n        if not isinstance(item, str):\n            raise TypeError(\"All elements in the list must be strings.\")\n    \n    # Remove digits from each string in the list\n    result = [''.join([char for char in s if not char.isdigit()]) for s in lst]\n    \n    return result\n\n# Example usage:\ninput_list = [\"hello123\", \"world456\", \"python789\"]\noutput_list = remove(input_list)\nprint(output_list)  # Output: ['hello', 'world', 'python']\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 28, "completion": "import math\n\ndef binomial_coeff(n, k):\n    \"\"\"\n    Calculate the binomial coefficient C(n, k), which is the number of ways to choose k elements from a set of n elements.\n    \n    Parameters:\n    n (int): The total number of elements.\n    k (int): The number of elements to choose.\n    \n    Returns:\n    int: The binomial coefficient C(n, k).\n    \n    Raises:\n    ValueError: If either n or k is negative, or if k is greater than n.\n    \"\"\"\n    if n < 0 or k < 0:\n        raise ValueError(\"Inputs must be non-negative and k must not be greater than n\")\n    if k > n:\n        raise ValueError(\"Inputs must be non-negative and k must not be greater than n\")\n    \n    return math.comb(n, k)\n\n# Example usage:\ntry:\n    result = binomial_coeff(5, 2)\n    print(f\"C(5, 2) = {result}\")\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 29, "completion": "def get_odd_occurrence(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list of integers.\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements in the list must be integers.\")\n    \n    # Dictionary to store the count of each element\n    count_dict = {}\n    \n    # Count the occurrences of each element\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Find the element with an odd count\n    for num, count in count_dict.items():\n        if count % 2 != 0:\n            return num\n    \n    # If no element occurs an odd number of times, return None\n    return None\n\n# Example usage:\ntry:\n    result = get_odd_occurrence([1, 2, 3, 2, 3, 1, 3])\n    print(f\"The element occurring an odd number of times is: {result}\")\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpq1dd8kfz.py\", line 28, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    # Check if the input is a string\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    \n    count = 0\n    n = len(s)\n    \n    # Iterate over all possible substrings\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substring = s[i:j]\n            if substring[0] == substring[-1]:\n                count += 1\n    \n    return count\n\n# Example usage:\n# print(count_substring_with_equal_ends(\"abcab\"))  # Output: 7\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmp076p_f_2.py\", line 19\n    try: count_substring_with_equal_ends(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                                  ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 31, "completion": "import heapq\nfrom collections import defaultdict\n\ndef func(lists, k):\n    # Count the frequency of each integer across all lists\n    frequency_map = defaultdict(int)\n    for lst in lists:\n        for num in lst:\n            frequency_map[num] += 1\n    \n    # Check if k is greater than the number of distinct integers\n    distinct_integers = len(frequency_map)\n    if k > distinct_integers:\n        raise ValueError(\"k cannot be greater than the number of distinct integers\")\n    \n    # Use a min-heap to find the top k frequent integers\n    heap = []\n    for num, freq in frequency_map.items():\n        if len(heap) < k:\n            heapq.heappush(heap, (freq, num))\n        else:\n            if freq > heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (freq, num))\n    \n    # Extract the top k frequent integers from the heap\n    top_k = [heapq.heappop(heap)[1] for _ in range(len(heap))]\n    top_k.reverse()  # To get the most frequent first\n    \n    return top_k\n\n# Example usage:\nlists = [\n    [1, 2, 3],\n    [2, 3, 4],\n    [3, 4, 5],\n    [1, 3, 5]\n]\nk = 2\nprint(func(lists, k))  # Output: [3, 1] or [3, 2] depending on the order\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkssp83lg.py\", line 35, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    # Check if the input is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    max_prime = -1\n    \n    # Divide out all factors of 2\n    while n % 2 == 0:\n        max_prime = 2\n        n //= 2\n    \n    # Check for odd factors from 3 to sqrt(n)\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            if is_prime(i):\n                max_prime = i\n            n //= i\n    \n    # If n is still greater than 2, then n itself is prime\n    if n > 2:\n        max_prime = n\n    \n    return max_prime\n\n# Example usage:\ntry:\n    number = 13195\n    result = max_prime_factors(number)\n    print(f\"The largest prime factor of {number} is {result}\")\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(decimal):\n    \"\"\"\n    Convert a non-negative integer from decimal to binary.\n\n    Parameters:\n    decimal (int): The non-negative integer to convert.\n\n    Returns:\n    str: The binary representation of the input decimal number.\n\n    Raises:\n    ValueError: If the input is not a non-negative integer.\n    \"\"\"\n    # Check if the input is a non-negative integer\n    if not isinstance(decimal, int) or decimal < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    # Handle the special case where the input is 0\n    if decimal == 0:\n        return \"0\"\n    \n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    \n    return binary\n\n# Example usage:\ntry:\n    print(decimal_to_binary(10))  # Output: \"1010\"\n    print(decimal_to_binary(0))   # Output: \"0\"\n    print(decimal_to_binary(255)) # Output: \"11111111\"\n    print(decimal_to_binary(-5))  # This will raise a ValueError\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1jqc0s0r.py\", line 21, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "completion": "def find_missing(arr):\n    # Check if the array is sorted\n    if arr != sorted(arr):\n        raise ValueError('Input list must be sorted.')\n    \n    # Iterate through the array to find the missing number\n    for i in range(len(arr) - 1):\n        if arr[i+1] != arr[i] + 1:\n            return arr[i] + 1\n    \n    # If no missing number is found, return None or raise an error\n    return None\n\n# Example usage:\ntry:\n    arr = [1, 2, 3, 4, 6, 7, 8]\n    missing_number = find_missing(arr)\n    print(f\"The missing number is: {missing_number}\")\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4ydb03fj.py\", line 18, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    \"\"\"\n    Calculate the n-th rectangular number.\n\n    Parameters:\n    n (int): The position of the rectangular number to find.\n\n    Returns:\n    int: The n-th rectangular number.\n\n    Raises:\n    ValueError: If the input is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return n * (n + 1)\n\n# Example usage:\ntry:\n    n = 5\n    result = find_rect_num(n)\n    print(f\"The {n}-th rectangular number is: {result}\")\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator, n):\n    \"\"\"\n    Find the nth digit in the proper fraction of two given numbers.\n\n    Parameters:\n    numerator (int): The numerator of the fraction.\n    denominator (int): The denominator of the fraction.\n    n (int): The position of the digit to find (1-based index).\n\n    Returns:\n    int: The nth digit in the fractional part of the division.\n\n    Raises:\n    ValueError: If the denominator is zero.\n    \"\"\"\n    if denominator == 0:\n        raise ValueError(\"Denominator cannot be zero\")\n    \n    # Perform the division and convert to a string to easily access the fractional part\n    result = str(numerator / denominator)\n    \n    # Split the result into integer and fractional parts\n    integer_part, fractional_part = result.split('.')\n    \n    # Check if the fractional part has at least n digits\n    if len(fractional_part) < n:\n        return 0  # If not, return 0 as the nth digit is implicitly 0\n    \n    # Return the nth digit in the fractional part\n    return int(fractional_part[n - 1])\n\n# Example usage:\n# print(find_nth_digit(1, 3, 2))  # Output: 3 (since 1/3 = 0.333..., the 2nd digit is 3)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 37, "completion": "def sort_mixed_list(mixed_list):\n    # Check if the input is a list\n    if not isinstance(mixed_list, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Check if all elements are either integers or strings\n    for element in mixed_list:\n        if not isinstance(element, (int, str)):\n            raise TypeError(\"List elements must be either integers or strings.\")\n    \n    # Sort the list with integers first, then strings\n    # Integers are sorted numerically, strings are sorted lexicographically\n    sorted_list = sorted(mixed_list, key=lambda x: (isinstance(x, str), x))\n    \n    return sorted_list\n\n# Example usage:\nmixed_list = [3, 'apple', 1, 'banana', 2, 'cherry']\nsorted_list = sort_mixed_list(mixed_list)\nprint(sorted_list)  # Output: [1, 2, 3, 'apple', 'banana', 'cherry']\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 38, "completion": "def div_even_odd(numbers):\n    even_num = None\n    odd_num = None\n    \n    # Iterate through the list to find the first even and first odd number\n    for num in numbers:\n        if even_num is None and num % 2 == 0:\n            even_num = num\n        if odd_num is None and num % 2 != 0:\n            odd_num = num\n        # If both even and odd numbers are found, break out of the loop\n        if even_num is not None and odd_num is not None:\n            break\n    \n    # Check if both even and odd numbers were found\n    if even_num is None or odd_num is None:\n        raise ValueError('List must contain at least one even and one odd number.')\n    \n    # Return the division of the first even and first odd number\n    return even_num / odd_num\n\n# Example usage:\ntry:\n    result = div_even_odd([1, 3, 5, 7, 2, 4, 6])\n    print(\"Division result:\", result)\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpo0ywlx9j.py\", line 27\n    try: div_even_odd([2, 4, 6]); assert False; except ValueError as e: assert str(e) == 'List must contain at least one even and one odd number.'\n                                                ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 39, "completion": "from collections import Counter\n\ndef rearange_string(s):\n    # Input validation\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string.\")\n    \n    if not s.islower() or not s.isalpha():\n        raise ValueError(\"Input must contain only lowercase letters.\")\n    \n    # Count the frequency of each character\n    char_count = Counter(s)\n    \n    # Get the most frequent character and its count\n    max_char, max_count = char_count.most_common(1)[0]\n    \n    # Check if the most frequent character can be placed without being adjacent\n    if max_count > (len(s) + 1) // 2:\n        return False\n    \n    # If possible, return True\n    return True\n\n# Example usage:\ntry:\n    print(rearange_string(\"aabb\"))  # Output: True\n    print(rearange_string(\"aaab\"))  # Output: False\n    print(rearange_string(\"abc\"))   # Output: True\n    print(rearange_string(\"123\"))   # Raises ValueError\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpz7e8tt4t.py\", line 25, in <module>\n    assert rearange_string(\"aab\")==('aba')\nAssertionError", "passed": false}
{"task_id": 40, "completion": "from collections import Counter\n\ndef freq_element(lst_of_lsts):\n    # Check if the input is a list of lists\n    if not isinstance(lst_of_lsts, list) or not all(isinstance(sublist, list) for sublist in lst_of_lsts):\n        raise TypeError(\"Input must be a list of lists.\")\n    \n    # Flatten the list of lists\n    flattened_list = [item for sublist in lst_of_lsts for item in sublist]\n    \n    # Calculate the frequency of each element\n    frequency = Counter(flattened_list)\n    \n    return dict(frequency)\n\n# Example usage:\nif __name__ == \"__main__\":\n    lst_of_lsts = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\n    print(freq_element(lst_of_lsts))  # Output: {1: 1, 2: 2, 3: 3, 4: 2, 5: 1}\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmph4ov7tje.py\", line 18\n    try: freq_element('not a list'); assert False; except TypeError: assert True\n                                                   ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 41, "completion": "def filter_evennumbers(input_list):\n    # Check if the input is a list\n    if not isinstance(input_list, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in input_list):\n        raise TypeError(\"All elements in the list must be integers.\")\n    \n    # Use a lambda function to filter even numbers\n    even_numbers = list(filter(lambda x: x % 2 == 0, input_list))\n    \n    return even_numbers\n\n# Example usage:\n# numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n# print(filter_evennumbers(numbers))  # Output: [2, 4, 6, 8, 10]\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 42, "completion": "def find_sum(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Dictionary to store the frequency of each element\n    frequency = {}\n    \n    # Count the frequency of each element in the array\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    \n    # Calculate the sum of elements that appear more than once\n    repeated_sum = 0\n    for num, count in frequency.items():\n        if count > 1:\n            repeated_sum += num * count\n    \n    return repeated_sum\n\n# Example usage:\n# arr = [1, 2, 3, 4, 2, 3, 5]\n# print(find_sum(arr))  # Output: 10 (2*2 + 3*2 = 4 + 6 = 10)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_d_a114r.py\", line 22, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(input_string):\n    # Check if the input is a string\n    if not isinstance(input_string, str):\n        raise TypeError(\"Input must be a string.\")\n    \n    # Define the regex pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'[a-z]+_[a-z]+'\n    \n    # Find all matches in the input string\n    matches = re.findall(pattern, input_string)\n    \n    return matches\n\n# Example usage:\nif __name__ == \"__main__\":\n    test_string = \"hello_world this_is_a_test not_a_match CamelCase_NotMatch\"\n    try:\n        result = text_match(test_string)\n        print(\"Matches found:\", result)\n    except TypeError as e:\n        print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgldiruot.py\", line 19, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 44, "completion": "import re\n\ndef text_match_string(input_string, word):\n    \"\"\"\n    Matches a word at the beginning of a string.\n\n    Parameters:\n    input_string (str): The string to search within.\n    word (str): The word to match at the beginning of the string.\n\n    Returns:\n    bool: True if the word is found at the beginning of the string, False otherwise.\n\n    Raises:\n    TypeError: If the input is not a string.\n    \"\"\"\n    # Check if both inputs are strings\n    if not isinstance(input_string, str) or not isinstance(word, str):\n        raise TypeError(\"Both inputs must be strings.\")\n    \n    # Use regex to match the word at the beginning of the string\n    pattern = r'^' + re.escape(word)\n    match = re.search(pattern, input_string)\n    \n    # Return True if a match is found, otherwise False\n    return bool(match)\n\n# Example usage:\n# print(text_match_string(\"hello world\", \"hello\"))  # Output: True\n# print(text_match_string(\"world hello\", \"hello\"))  # Output: False\n# print(text_match_string(123, \"hello\"))            # Raises TypeError\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpeqv6jirg.py\", line 18\n    try: text_match_string(123); assert False, 'TypeError not raised' except TypeError: pass\n                                                                      ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 45, "completion": "from math import gcd\nfrom functools import reduce\n\ndef get_gcd(numbers):\n    if not numbers:\n        raise ValueError('Input list cannot be empty.')\n    \n    # Use reduce to apply the gcd function across the list\n    return reduce(gcd, numbers)\n\n# Example usage:\ntry:\n    result = get_gcd([24, 36, 48])\n    print(f\"The GCD is: {result}\")\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 46, "completion": "def test_distinct(numbers):\n    # Check if the input is a list\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(num, int) for num in numbers):\n        raise TypeError(\"All elements in the list must be integers.\")\n    \n    # Check if all numbers are distinct\n    if len(numbers) == len(set(numbers)):\n        return True\n    else:\n        return False\n\n# Example usage:\ntry:\n    print(test_distinct([1, 2, 3, 4, 5]))  # Output: True\n    print(test_distinct([1, 2, 2, 3, 4]))  # Output: False\n    print(test_distinct(\"not a list\"))     # Raises TypeError\n    print(test_distinct([1, 2, 'three']))  # Raises TypeError\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 47, "completion": "def compute_last_digit(a: int, b: int) -> int:\n    if a > b:\n        raise ValueError(\"a should not be greater than b\")\n    \n    # If a == b, the result is 1, and the last digit is 1\n    if a == b:\n        return 1\n    \n    # The last digit of b! / a! is the last digit of (a+1) * (a+2) * ... * b\n    last_digit = 1\n    for i in range(a + 1, b + 1):\n        last_digit = (last_digit * i) % 10\n    \n    return last_digit\n\n# Example usage:\ntry:\n    a = 5\n    b = 10\n    result = compute_last_digit(a, b)\n    print(f\"The last digit of {b}! / {a}! is: {result}\")\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 48, "completion": "def odd_bit_set_number(n):\n    # Check if the input is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    \n    # Create a mask with all odd bits set\n    mask = 0\n    bit_position = 1  # Start with the first odd bit (bit 1)\n    \n    while bit_position < n.bit_length():\n        mask |= 1 << bit_position\n        bit_position += 2  # Move to the next odd bit\n    \n    # Set all odd bits in the number\n    result = n | mask\n    \n    return result\n\n# Example usage:\n# number = 10  # Binary: 1010\n# result = odd_bit_set_number(number)\n# print(result)  # Output: 11 (Binary: 1011)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp81j9ygas.py\", line 18, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(two_d_list, index=0):\n    \"\"\"\n    Extracts every first or specified element from a given two-dimensional list.\n\n    Parameters:\n    two_d_list (list of list): The two-dimensional list from which to extract elements.\n    index (int): The index of the element to extract from each sublist. Default is 0.\n\n    Returns:\n    list: A list containing the specified element from each sublist.\n\n    Raises:\n    IndexError: If the specified index is out of range for any sublist.\n    \"\"\"\n    result = []\n    for sublist in two_d_list:\n        if index >= len(sublist) or index < -len(sublist):\n            raise IndexError(f\"Index out of range for sublist: {sublist}\")\n        result.append(sublist[index])\n    return result\n\n# Example usage:\nif __name__ == \"__main__\":\n    two_d_list = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    \n    # Extract the first element from each sublist\n    print(specified_element(two_d_list))  # Output: [1, 4, 7]\n    \n    # Extract the second element from each sublist\n    print(specified_element(two_d_list, 1))  # Output: [2, 5, 8]\n    \n    # Attempt to extract an element with an out-of-range index\n    try:\n        print(specified_element(two_d_list, 3))  # This will raise an IndexError\n    except IndexError as e:\n        print(e)  # Output: Index out of range for sublist: [1, 2, 3]\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvq98w14n.py\", line 27, in <module>\n    try: specified_element([[1, 2], [3, 4]], 3)\n  File \"/tmp/tmpvq98w14n.py\", line 5, in specified_element\n    raise IndexError(f\"Index out of range for sublist: {sublist}\")\nIndexError: Index out of range for sublist: [1, 2]\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpvq98w14n.py\", line 28, in <module>\n    except IndexError as e: assert str(e) == 'Index out of range for sublist'\nAssertionError", "passed": false}
{"task_id": 50, "completion": "def min_length_list(list_of_lists):\n    # Check if the input is a list of lists\n    if not isinstance(list_of_lists, list) or not all(isinstance(sublist, list) for sublist in list_of_lists):\n        raise ValueError(\"Input must be a list of lists.\")\n    \n    # Use the min function with a lambda to find the list with the minimum length\n    return min(list_of_lists, key=lambda x: len(x))\n\n# Example usage:\ntry:\n    lists = [[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]\n    result = min_length_list(lists)\n    print(\"List with minimum length:\", result)\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9di91ffn.py\", line 14, in <module>\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nAssertionError", "passed": false}
{"task_id": 51, "completion": "def check_equilateral(a, b, c):\n    \"\"\"\n    Check if the triangle is equilateral.\n\n    Parameters:\n    a (int): Length of the first side of the triangle.\n    b (int): Length of the second side of the triangle.\n    c (int): Length of the third side of the triangle.\n\n    Raises:\n    ValueError: If any of the inputs are non-positive integers.\n    \"\"\"\n    # Check if all inputs are positive integers\n    if not (isinstance(a, int) and isinstance(b, int) and isinstance(c, int)):\n        raise ValueError(\"All inputs must be integers.\")\n    if a <= 0 or b <= 0 or c <= 0:\n        raise ValueError(\"All inputs must be positive integers.\")\n    \n    # Check if all sides are equal\n    if a == b == c:\n        print(\"The triangle is equilateral.\")\n    else:\n        print(\"The triangle is not equilateral.\")\n\n# Example usage:\ntry:\n    check_equilateral(5, 5, 5)  # Should print \"The triangle is equilateral.\"\n    check_equilateral(3, 4, 5)  # Should print \"The triangle is not equilateral.\"\n    check_equilateral(0, 5, 5)  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwgo736ab.py\", line 19, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    # Check if both base and height are numerical (int or float)\n    if not isinstance(base, (int, float)) or not isinstance(height, (int, float)):\n        raise TypeError(\"Both base and height must be numerical values.\")\n    \n    # Calculate the area of the parallelogram\n    area = base * height\n    \n    return area\n\n# Example usage:\n# base = 5\n# height = 10\n# print(parallelogram_area(base, height))  # Output: 50\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(input_string):\n    # Check if the input is a string\n    if not isinstance(input_string, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Check if the string is empty\n    if len(input_string) == 0:\n        return False\n    \n    # Compare the first and last characters\n    return input_string[0] == input_string[-1]\n\n# Example usage:\ntry:\n    print(check_equality(\"hello\"))  # Output: False\n    print(check_equality(\"racecar\"))  # Output: True\n    print(check_equality(\"\"))  # Output: False\n    print(check_equality(123))  # Raises TypeError\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxx7bd5s8.py\", line 18, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 54, "completion": "def counting_sort(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements in the list must be integers.\")\n    \n    if not arr:\n        return arr\n    \n    # Find the maximum and minimum values in the array\n    max_val = max(arr)\n    min_val = min(arr)\n    \n    # Create a count array to store the count of each unique element\n    count = [0] * (max_val - min_val + 1)\n    \n    # Store the count of each element in the count array\n    for num in arr:\n        count[num - min_val] += 1\n    \n    # Reconstruct the sorted array from the count array\n    sorted_arr = []\n    for i in range(len(count)):\n        sorted_arr.extend([i + min_val] * count[i])\n    \n    return sorted_arr\n\n# Example usage:\nif __name__ == \"__main__\":\n    arr = [4, 2, 2, 8, 3, 3, 1]\n    sorted_arr = counting_sort(arr)\n    print(\"Sorted array:\", sorted_arr)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 55, "completion": "def tn_gp(a, r, n):\n    \"\"\"\n    Calculate the t-nth term of a geometric series.\n\n    Parameters:\n    a (float or int): The first term of the geometric series.\n    r (float or int): The common ratio of the geometric series.\n    n (int): The term number to find (must be greater than 0).\n\n    Returns:\n    float or int: The t-nth term of the geometric series.\n\n    Raises:\n    ValueError: If the term number n is less than 1.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Term number must be greater than 0\")\n    \n    return a * (r ** (n - 1))\n\n# Example usage:\ntry:\n    a = 2  # First term\n    r = 3  # Common ratio\n    n = 4  # Term number\n    result = tn_gp(a, r, n)\n    print(f\"The {n}-th term of the geometric series is: {result}\")\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmph3abe5hr.py\", line 14, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def check(number):\n    # Check if the input is an integer\n    if not isinstance(number, int):\n        raise TypeError(\"Input must be an integer.\")\n    \n    # Reverse the number\n    reversed_number = int(str(number)[::-1])\n    \n    # Check if the number is one less than twice its reverse\n    return number == 2 * reversed_number - 1\n\n# Example usage:\ntry:\n    print(check(123))  # Example input\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 57, "completion": "def find_max_num(digits, num_digits):\n    # Check if the number of digits requested exceeds the length of the list\n    if num_digits > len(digits):\n        raise ValueError(\"Number of digits exceeds the length of the list.\")\n    \n    # Sort the digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n    \n    # Select the first 'num_digits' digits\n    selected_digits = sorted_digits[:num_digits]\n    \n    # Combine the selected digits to form the largest number\n    max_num = int(''.join(map(str, selected_digits)))\n    \n    return max_num\n\n# Example usage:\ndigits = [3, 1, 4, 1, 5, 9]\nnum_digits = 4\ntry:\n    result = find_max_num(digits, num_digits)\n    print(f\"The largest number formed with {num_digits} digits is: {result}\")\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 58, "completion": "def opposite_signs(x, y):\n    # Check if both inputs are integers\n    if not isinstance(x, int) or not isinstance(y, int):\n        raise TypeError(\"Both inputs must be integers.\")\n    \n    # Check if the signs are opposite\n    return (x ^ y) < 0\n\n# Example usage:\ntry:\n    print(opposite_signs(5, -3))  # Output: True\n    print(opposite_signs(5, 3))   # Output: False\n    print(opposite_signs(5, \"a\")) # This will raise a TypeError\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 59, "completion": "def is_octagonal(n):\n    \"\"\"\n    Calculate the nth octagonal number.\n\n    Parameters:\n    n (int): The position of the octagonal number to calculate.\n\n    Returns:\n    int: The nth octagonal number.\n\n    Raises:\n    ValueError: If the input is not a positive integer.\n    \"\"\"\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    # Calculate the nth octagonal number\n    octagonal_number = n * (3 * n - 2)\n    \n    return octagonal_number\n\n# Example usage:\ntry:\n    n = 5\n    result = is_octagonal(n)\n    print(f\"The {n}th octagonal number is: {result}\")\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxane1ks8.py\", line 19, in <module>\n    is_octagonal(-1)\n  File \"/tmp/tmpxane1ks8.py\", line 4, in is_octagonal\n    raise ValueError(\"Input must be a positive integer.\")\nValueError: Input must be a positive integer.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpxane1ks8.py\", line 21, in <module>\n    assert str(e) == 'Input must be a positive integer'\nAssertionError", "passed": false}
{"task_id": 60, "completion": "def max_len_sub(arr, diff):\n    # Check if the input array is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input array must be a list.\")\n    \n    # Check if the second parameter is an integer\n    if not isinstance(diff, int):\n        raise TypeError(\"The difference parameter must be an integer.\")\n    \n    # If the array is empty, return 0\n    if not arr:\n        return 0\n    \n    # Initialize a dictionary to store the length of the longest subsequence\n    # ending with each element\n    dp = {}\n    \n    # Iterate through each element in the array\n    for num in arr:\n        # Check if (num - diff) exists in the dictionary\n        if (num - diff) in dp:\n            dp[num] = dp[num - diff] + 1\n        else:\n            dp[num] = 1\n    \n    # The maximum length is the maximum value in the dictionary\n    return max(dp.values())\n\n# Example usage:\n# arr = [1, 5, 2, 3, 4, 6]\n# diff = 1\n# print(max_len_sub(arr, diff))  # Output: 4 (subsequence: [1, 2, 3, 4])\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpfyx1hwk5.py\", line 27, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nAssertionError", "passed": false}

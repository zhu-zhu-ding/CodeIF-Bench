{"task_id": 11, "completion": "def remove_occ(input_string, char_to_remove):\n    \"\"\"\n    Removes the first and last occurrence of a specified character from the input string.\n    \n    Parameters:\n    - input_string (str): The original string from which characters will be removed.\n    - char_to_remove (str): The character whose first and last occurrences will be removed.\n    \n    Returns:\n    - str: The modified string after removing the specified character's first and last occurrences.\n    \"\"\"\n    if len(char_to_remove) != 1:\n        raise ValueError(\"char_to_remove must be a single character\")\n    \n    # Find indices of all occurrences of the character\n    indices = [i for i, c in enumerate(input_string) if c == char_to_remove]\n    \n    # If there are less than two occurrences, return the original string\n    if len(indices) < 2:\n        return input_string\n    \n    # Remove the first and last occurrence\n    first_index = indices[0]\n    last_index = indices[-1]\n    \n    # Construct the new string without the first and last occurrence of the character\n    new_string = input_string[:first_index] + input_string[first_index+1:last_index] + input_string[last_index+1:]\n    \n    return new_string\n\n# Example usage:\nprint(remove_occ(\"hello world\", \"l\"))  # Output: \"heo word\"\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpq60xrxes.py\", line 34, in <module>\n    check_code_style(remove_occ)\n  File \"/tmp/tmpq60xrxes.py\", line 30, in check_code_style\n    assert result.total_errors == 0, \"Code does not conform to PEP 8 standards.\"\nAssertionError: Code does not conform to PEP 8 standards.", "passed": false}
{"task_id": 12, "completion": "def sort_matrix(matrix):\n    \"\"\"\n    Sorts a given matrix (list of lists) in ascending order based on the sum of each row.\n\n    Parameters:\n    matrix (List[List[int]]): A list of lists where each sublist represents a row in the matrix.\n\n    Returns:\n    List[List[int]]: The sorted matrix.\n    \"\"\"\n    # Sort the matrix based on the sum of each row\n    sorted_matrix = sorted(matrix, key=sum)\n    return sorted_matrix\n\n# Example usage\nif __name__ == \"__main__\":\n    example_matrix = [\n        [3, 4, 5],\n        [1, 2],\n        [7, 0, 9, -1]\n    ]\n    print(\"Original Matrix:\")\n    for row in example_matrix:\n        print(row)\n\n    sorted_matrix = sort_matrix(example_matrix)\n    print(\"\\nSorted Matrix:\")\n    for row in sorted_matrix:\n        print(row)\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 14, "completion": "def find_volume(base_length, base_height, prism_height):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base_length (float): The length of the base of the triangle.\n    base_height (float): The height of the triangle.\n    prism_height (float): The height of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    # Calculate the area of the triangular base\n    base_area = (base_length * base_height) / 2\n    \n    # Calculate the volume of the prism\n    volume = base_area * prism_height\n    \n    return volume\n\n# Example usage:\n# volume = find_volume(3.0, 4.0, 5.0)\n# print(volume)\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 15, "completion": "def split_lowerstring(input_string):\n    \"\"\"\n    Splits the input string at each lowercase letter and returns a list of substrings.\n    \n    Parameters:\n    input_string (str): The string to be split.\n    \n    Returns:\n    list: A list of substrings split at each lowercase letter.\n    \"\"\"\n    if not isinstance(input_string, str):\n        raise ValueError(\"Input must be a string.\")\n    \n    # Initialize variables\n    result = []\n    current_substring = ''\n    \n    # Iterate through each character in the string\n    for char in input_string:\n        # Check if the character is a lowercase letter\n        if char.islower():\n            if current_substring:\n                result.append(current_substring)\n                current_substring = ''\n        current_substring += char\n    \n    # Append the last substring if it's not empty\n    if current_substring:\n        result.append(current_substring)\n    \n    return result\n\n# Example usage\nif __name__ == \"__main__\":\n    test_string = \"HelloWorldThisIsAString\"\n    print(split_lowerstring(test_string))\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphfa5jruw.py\", line 23, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Finds sequences of lowercase letters joined with an underscore in the given text.\n    \n    Args:\n    text (str): The input string to search within.\n    \n    Returns:\n    list: A list of all matched sequences of lowercase letters joined with an underscore.\n    \"\"\"\n    # Define the regex pattern for sequences of lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    \n    # Use re.findall() to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    return matches\n\n# Example usage\nif __name__ == \"__main__\":\n    example_text = \"this_is_a_test string_with_mixed_words_and_this_is_another_example\"\n    print(text_lowercase_underscore(example_text))\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjugoyzio.py\", line 12, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Parameters:\n    side_length (float): The length of one side of the square.\n\n    Returns:\n    float: The perimeter of the square.\n    \"\"\"\n    return 4 * side_length\n\n# Example usage:\nif __name__ == \"__main__\":\n    side = 5.0\n    print(f\"The perimeter of the square with side length {side} is {square_perimeter(side)}\")\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(original_string: str, chars_to_remove: str) -> str:\n    \"\"\"\n    Removes all characters from original_string that are present in chars_to_remove.\n\n    Args:\n        original_string (str): The original string from which characters will be removed.\n        chars_to_remove (str): The string containing characters to be removed from the original string.\n\n    Returns:\n        str: A new string with characters removed.\n    \"\"\"\n    # Create a set of characters to remove for faster lookup\n    chars_set = set(chars_to_remove)\n    \n    # Use a generator expression to filter out unwanted characters\n    filtered_string = ''.join(char for char in original_string if char not in chars_set)\n    \n    return filtered_string\n\n# Example usage:\nif __name__ == \"__main__\":\n    original_str = \"Hello, World!\"\n    chars_to_rm = \"lo\"\n    result = remove_dirty_chars(original_str, chars_to_rm)\n    print(result)  # Expected output: \"He, Wrld!\"\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmponrygpr3.py\", line 30, in <module>\n    check_code_style(remove_dirty_chars)\n  File \"/tmp/tmponrygpr3.py\", line 26, in check_code_style\n    assert result.total_errors == 0, \"Code does not conform to PEP 8 standards.\"\nAssertionError: Code does not conform to PEP 8 standards.", "passed": false}
{"task_id": 19, "completion": "def test_duplicate(nums):\n    \"\"\"\n    Check if the given list of integers contains any duplicates.\n\n    Args:\n    nums (List[int]): A list of integers.\n\n    Returns:\n    bool: True if there are duplicates, False otherwise.\n    \"\"\"\n    # Using a set to track seen numbers\n    seen = set()\n    \n    for num in nums:\n        if num in seen:\n            return True\n        seen.add(num)\n    \n    return False\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_list = [1, 2, 3, 4, 5, 2]\n    print(test_duplicate(example_list))  # Output: True\n\n    example_list = [1, 2, 3, 4, 5]\n    print(test_duplicate(example_list))  # Output: False\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(num):\n    \"\"\"\n    Check if the given number is a Woodall number.\n    \n    A Woodall number is defined as n * 2^n - 1 for some positive integer n.\n    \n    Args:\n        num (int): The number to check.\n        \n    Returns:\n        bool: True if the number is a Woodall number, False otherwise.\n    \"\"\"\n    if num < 0:\n        return False\n    \n    # Iterate over possible values of n\n    n = 1\n    while True:\n        woodall_num = n * (2 ** n) - 1\n        if woodall_num == num:\n            return True\n        elif woodall_num > num:\n            break\n        n += 1\n    \n    return False\n\n# Example usage\nif __name__ == \"__main__\":\n    print(is_woodall(7))   # True, because 3*2^3-1=7\n    print(is_woodall(15))  # False\n    print(is_woodall(23))  # True, because 4*2^4-1=23\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 21, "completion": "def multiples_of_num(m: int, n: int) -> list:\n    \"\"\"\n    Generates a list containing the first m multiples of n.\n\n    Args:\n        m (int): The number of multiples to generate.\n        n (int): The base number to find multiples of.\n\n    Returns:\n        list: A list of the first m multiples of n.\n    \"\"\"\n    return [i * n for i in range(1, m + 1)]\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 22, "completion": "def find_first_duplicate(nums):\n    \"\"\"\n    Finds the first duplicate number for which the second occurrence has the minimal index.\n    In other words, if there are more than one duplicated numbers, it returns the number for which the second occurrence\n    has a smaller index than the second occurrence of the other number does.\n    \n    Args:\n    nums (List[int]): A list of integers where 1 \u2264 nums[i] \u2264 len(nums)\n    \n    Returns:\n    int: The first integer that appears twice, or -1 if no such integer exists.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists):\n    \"\"\"\n    Calculate the maximum sum of elements from a list of lists.\n\n    Args:\n    list_of_lists (list of lists): A list containing multiple lists of integers.\n\n    Returns:\n    int: The maximum sum of elements found in any single list within the list of lists.\n    \"\"\"\n    max_sum = float('-inf')  # Initialize with negative infinity\n\n    for sublist in list_of_lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 24, "completion": "def binary_to_decimal(binary_str):\n    \"\"\"\n    Convert a binary number (as a string) to its decimal equivalent.\n\n    Args:\n    binary_str (str): A string representing a binary number.\n\n    Returns:\n    int: The decimal equivalent of the binary number.\n    \"\"\"\n    return int(binary_str, 2)\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpaxxosq4m.py\", line 3, in <module>\n    assert binary_to_decimal(100) == 4\n  File \"/tmp/tmpaxxosq4m.py\", line 2, in binary_to_decimal\n    return int(binary_str, 2)\nTypeError: int() can't convert non-string with explicit base", "passed": false}
{"task_id": 25, "completion": "from collections import Counter\n\ndef find_product(arr):\n    \"\"\"\n    Finds the product of non-repeated elements in the given list.\n    \n    Parameters:\n    arr (list): A list of integers.\n    \n    Returns:\n    int: The product of non-repeated elements.\n    \"\"\"\n    # Count the occurrences of each element in the array\n    element_counts = Counter(arr)\n    \n    # Calculate the product of elements that appear exactly once\n    product = 1\n    for element, count in element_counts.items():\n        if count == 1:\n            product *= element\n    \n    return product\n\n# Example usage:\nexample_array = [2, 3, 2, 4, 5]\nprint(find_product(example_array))  # Output will be 3 * 4 * 5 = 60\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmps0atl7j6.py\", line 14, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(tuples_list, elements):\n    \"\"\"\n    Check if the given list of tuples contains all specified elements at least once.\n    \n    Args:\n    tuples_list (list of tuples): A list containing tuples.\n    elements (set or list): A collection of elements to be checked in the tuples.\n    \n    Returns:\n    bool: True if all elements are found in any of the tuples, False otherwise.\n    \"\"\"\n    # Convert the list of tuples into a single set of all elements contained within those tuples\n    all_elements = {element for tup in tuples_list for element in tup}\n    \n    # Check if the set of all elements contains all the required elements\n    return all(element in all_elements for element in elements)\n\n# Example usage:\ntuples_list = [(1, 2), (3, 4), (5, 6)]\nelements_to_check = {1, 3, 5}\n\nresult = check_k_elements(tuples_list, elements_to_check)\nprint(result)  # Output: True\n\nelements_to_check = {1, 7, 5}\nresult = check_k_elements(tuples_list, elements_to_check)\nprint(result)  # Output: False\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3uw_ubj1.py\", line 14, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n  File \"/tmp/tmp3uw_ubj1.py\", line 5, in check_k_elements\n    return all(element in all_elements for element in elements)\nTypeError: 'int' object is not iterable", "passed": false}
{"task_id": 27, "completion": "import re\n\ndef remove_digits_from_list(string_list):\n    \"\"\"\n    Removes all digits from each string in the provided list of strings.\n\n    Args:\n        string_list (list of str): A list of strings from which digits will be removed.\n\n    Returns:\n        list of str: A new list containing the modified strings with digits removed.\n    \"\"\"\n    # Using regular expression to remove digits from each string in the list\n    return [re.sub(r'\\d', '', s) for s in string_list]\n\n# Example usage:\nexample_list = [\"abc123\", \"def456\", \"ghi789\"]\ncleaned_list = remove_digits_from_list(example_list)\nprint(cleaned_list)  # Output: ['abc', 'def', 'ghi']\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpcbrmc_si.py\", line 9, in <module>\n    assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\nNameError: name 'remove' is not defined", "passed": false}
{"task_id": 28, "completion": "def binomial_coeff(n: int, k: int) -> int:\n    \"\"\"\n    Calculate the binomial coefficient (n choose k).\n\n    Parameters:\n    n (int): The total number of items.\n    k (int): The number of items to choose.\n\n    Returns:\n    int: The binomial coefficient of n and k.\n    \"\"\"\n    if k < 0 or k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n\n    # Optimization: C(n, k) == C(n, n-k)\n    if n - k < k:\n        k = n - k\n\n    # Initialize result\n    result = 1\n\n    # Calculate value of [n * (n-1) *---* (n-k+1)] / [k * (k-1) *----* 1]\n    for i in range(k):\n        result *= n - i\n        result //= i + 1\n    \n    return result\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 29, "completion": "def get_odd_occurrence(arr):\n    \"\"\"\n    Finds the element that occurs an odd number of times in the given list.\n    \n    Args:\n    arr (list): A list of integers.\n    \n    Returns:\n    int: The integer that occurs an odd number of times.\n         If no such element exists, returns None.\n    \"\"\"\n    # Dictionary to store the count of each element\n    count_dict = {}\n    \n    # Count occurrences of each element\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Find the element with an odd occurrence\n    for key, value in count_dict.items():\n        if value % 2 != 0:\n            return key\n    \n    # If no element occurs an odd number of times\n    return None\n\n# Example usage:\nexample_list = [1, 2, 3, 2, 3, 1, 3]\nresult = get_odd_occurrence(example_list)\nprint(f\"The element occurring an odd number of times is: {result}\")\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxw6f9mrx.py\", line 20, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s: str) -> int:\n    \"\"\"\n    Counts all substrings of the input string s that start and end with the same character.\n\n    Parameters:\n    s (str): The input string to analyze.\n\n    Returns:\n    int: The number of substrings starting and ending with the same character.\n    \"\"\"\n    length = len(s)\n    if length == 0:\n        return 0\n\n    # Initialize the count of substrings\n    count = 0\n\n    # Count substrings for each starting character\n    for i in range(length):\n        for j in range(i, length):\n            if s[i] == s[j]:\n                count += 1\n\n    return count\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 31, "completion": "import heapq\nfrom collections import Counter\n\ndef find_top_k_frequent(lists, k):\n    \"\"\"\n    Finds the top k integers that occur most frequently across multiple sorted lists.\n    \n    Args:\n    lists: A list of lists, where each sublist contains sorted and distinct integers.\n    k: An integer indicating the number of top frequent integers to return.\n    \n    Returns:\n    A list of the top k most frequent integers.\n    \"\"\"\n    # Flatten the list of lists into a single list\n    flat_list = [item for sublist in lists for item in sublist]\n    \n    # Count the frequency of each integer\n    freq_counter = Counter(flat_list)\n    \n    # Use a heap to keep track of the top k elements based on frequency\n    # Negate the count to simulate a max heap with min heap functionality\n    heap = [(-count, num) for num, count in freq_counter.items()]\n    heapq.heapify(heap)\n    \n    # Extract the top k elements from the heap\n    top_k = []\n    for _ in range(k):\n        if heap:\n            _, num = heapq.heappop(heap)\n            top_k.append(num)\n    \n    return top_k\n\n# Example usage:\nlists = [[1, 4, 5], [1, 3, 4], [2, 6]]\nk = 2\nprint(find_top_k_frequent(lists, k))  # Output might vary based on input but should show the 2 most frequent numbers\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4knqk6xg.py\", line 23, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nNameError: name 'func' is not defined", "passed": false}
{"task_id": 32, "completion": "def max_prime_factor(n):\n    \"\"\"\n    Finds the largest prime factor of a given positive integer n.\n\n    Parameters:\n    n (int): A positive integer greater than 1\n\n    Returns:\n    int: The largest prime factor of n\n    \"\"\"\n    # Initialize the smallest prime factor\n    factor = 2\n    \n    # Divide n by 2 until it becomes odd\n    while n % factor == 0:\n        last_factor = factor\n        n //= factor\n    \n    # Now n must be odd, start checking from 3\n    factor = 3\n    max_factor = int(n ** 0.5) + 1  # Upper bound for checking factors\n    \n    # Check for factors from 3 onwards\n    while factor <= max_factor:\n        while n % factor == 0:\n            last_factor = factor\n            n //= factor\n        factor += 2\n    \n    # If n is a prime number greater than 2\n    if n > 2:\n        return n\n    \n    return last_factor\n\n# Example usage:\n# print(max_prime_factor(13195))  # Output: 29\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpa2_49d7l.py\", line 23, in <module>\n    assert max_prime_factors(15) == 5\nNameError: name 'max_prime_factors' is not defined", "passed": false}
{"task_id": 33, "completion": "def decimal_to_binary(decimal_number):\n    \"\"\"\n    Convert a decimal number to its binary representation.\n\n    Args:\n        decimal_number (int): The decimal number to be converted.\n\n    Returns:\n        str: The binary representation of the decimal number.\n    \"\"\"\n    if not isinstance(decimal_number, int):\n        raise TypeError(\"Input must be an integer.\")\n    \n    # Convert to binary using built-in bin function and remove the '0b' prefix\n    binary_representation = bin(decimal_number)[2:]\n    \n    return binary_representation\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwwvia2kt.py\", line 7, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "completion": "def find_missing(nums):\n    \"\"\"\n    Finds the missing number in a sorted list of consecutive integers.\n    \n    Args:\n    nums (List[int]): A sorted list of integers with exactly one missing element.\n    \n    Returns:\n    int: The missing integer in the sequence.\n    \"\"\"\n    # Calculate the expected sum of the sequence if no number was missing\n    n = len(nums) + 1\n    expected_sum = n * (nums[0] + nums[-1]) // 2\n    \n    # Calculate the actual sum of the provided numbers\n    actual_sum = sum(nums)\n    \n    # The difference between the expected sum and the actual sum is the missing number\n    return expected_sum - actual_sum\n\n# Example usage\nif __name__ == \"__main__\":\n    example_array = [1, 2, 4, 5, 6]\n    print(find_missing(example_array))  # Output should be 3\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpu8wz9457.py\", line 13, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    \"\"\"\n    Calculate the n-th rectangular number.\n    \n    A rectangular number or oblong number is a number that represents a rectangle with integer sides.\n    The n-th rectangular number is given by the formula n * (n + 1).\n    \n    Args:\n    n (int): The position in the sequence of rectangular numbers.\n    \n    Returns:\n    int: The n-th rectangular number.\n    \"\"\"\n    return n * (n + 1)\n\n# Example usage and a simple check function to verify correctness\ndef check_rect_num():\n    test_cases = [(1, 2), (2, 6), (3, 12), (4, 20)]\n    for n, expected in test_cases:\n        result = find_rect_num(n)\n        assert result == expected, f\"Expected {expected}, got {result} for n={n}\"\n    print(\"All test cases passed!\")\n\ncheck_rect_num()\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 36, "completion": "def find_nth_digit(dividend, divisor, n):\n    \"\"\"\n    Finds the nth digit after the decimal point in the division of dividend by divisor.\n\n    Args:\n    dividend (int): The number to be divided.\n    divisor (int): The number by which to divide.\n    n (int): The position of the digit to retrieve (1-based index).\n\n    Returns:\n    int: The nth digit after the decimal point in the division result.\n    \n    Raises:\n    ValueError: If n is out of bounds or if the division does not converge to a finite decimal.\n    \"\"\"\n    # Perform the division\n    quotient = dividend / divisor\n    \n    # Convert the quotient to a string\n    quotient_str = str(quotient)\n    \n    # Split into integer and fractional parts\n    parts = quotient_str.split('.')\n    \n    # Check if there is a fractional part\n    if len(parts) < 2:\n        raise ValueError(\"Division does not have a fractional part.\")\n    \n    fractional_part = parts[1]\n    \n    # Ensure n is within bounds\n    if n <= 0 or n > len(fractional_part):\n        raise ValueError(\"n is out of bounds for the fractional part of the division result.\")\n    \n    # Get the nth digit\n    nth_digit = int(fractional_part[n-1])\n    \n    return nth_digit\n\n# Example usage:\nprint(find_nth_digit(1, 3, 2))  # Output: 3 (since 1/3 = 0.333..., the second digit is 3)\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpiwuo3gfp.py\", line 37, in <module>\n    check_code_style(find_nth_digit)\n  File \"/tmp/tmpiwuo3gfp.py\", line 33, in check_code_style\n    assert result.total_errors == 0, \"Code does not conform to PEP 8 standards.\"\nAssertionError: Code does not conform to PEP 8 standards.", "passed": false}
{"task_id": 37, "completion": "def sort_mixed_list(mixed_list):\n    \"\"\"\n    Sorts a given list containing both integers and strings.\n    \n    Args:\n    mixed_list (list): A list containing a mix of integers and strings.\n    \n    Returns:\n    list: A new list with integers sorted followed by strings sorted.\n    \"\"\"\n    # Separate integers and strings into different lists\n    integers = [item for item in mixed_list if isinstance(item, int)]\n    strings = [item for item in mixed_list if isinstance(item, str)]\n    \n    # Sort each list\n    integers.sort()\n    strings.sort()\n    \n    # Combine sorted lists\n    sorted_list = integers + strings\n    \n    return sorted_list\n\n# Example usage:\nexample_list = [3, \"banana\", 1, \"apple\", 2, \"cherry\"]\nsorted_example_list = sort_mixed_list(example_list)\nprint(sorted_example_list)  # Output: [1, 2, 3, 'apple', 'banana', 'cherry']\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 38, "completion": "def div_even_odd(numbers):\n    \"\"\"\n    Divides the first even number by the first odd number in the given list.\n    \n    Args:\n    numbers (list): A list of integers containing at least one even and one odd number.\n    \n    Returns:\n    float: The result of dividing the first even number by the first odd number.\n    \n    Raises:\n    ValueError: If the list does not contain both an even and an odd number.\n    \"\"\"\n    first_even = None\n    first_odd = None\n    \n    for num in numbers:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is None or first_odd is None:\n        raise ValueError(\"The list must contain at least one even and one odd number.\")\n    \n    return first_even / first_odd\n\n# Example usage:\ntry:\n    print(div_even_odd([4, 3, 5, 2, 6]))  # Output: 1.3333333333333333 (4/3)\nexcept ValueError as e:\n    print(e)\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpbkvruikt.py\", line 36, in <module>\n    check_code_style(div_even_odd)\n  File \"/tmp/tmpbkvruikt.py\", line 32, in check_code_style\n    assert result.total_errors == 0, \"Code does not conform to PEP 8 standards.\"\nAssertionError: Code does not conform to PEP 8 standards.", "passed": false}
{"task_id": 39, "completion": "from collections import Counter\n\ndef rearrange_string(s: str) -> bool:\n    \"\"\"\n    Check if the characters in the string can be rearranged such that no two adjacent characters are the same.\n    \n    :param s: A string to be checked.\n    :return: True if it's possible to rearrange the string as required, False otherwise.\n    \"\"\"\n    # Count the frequency of each character\n    char_count = Counter(s)\n    \n    # Find the maximum frequency character\n    max_freq = max(char_count.values())\n    \n    # Sum of frequencies of all characters except the one with max frequency\n    sum_other_chars = sum(freq for char, freq in char_count.items() if freq != max_freq)\n    \n    # If the difference between the max frequency and sum of others is more than 1,\n    # it's not possible to rearrange the string as required\n    if max_freq - sum_other_chars > 1:\n        return False\n    \n    # Create a list of characters sorted by their frequency (descending)\n    char_list = sorted(char_count.keys(), key=lambda x: -char_count[x])\n    \n    # Prepare a result list to store the rearranged string\n    result = [''] * len(s)\n    \n    # Place characters into the result list\n    index = 0\n    for char in char_list:\n        for _ in range(char_count[char]):\n            if index >= len(s):\n                index = 1  # Start from the second position if we reach the end\n            result[index] = char\n            index += 2\n    \n    # Check if there are any two adjacent characters that are the same\n    for i in range(1, len(result)):\n        if result[i] == result[i - 1]:\n            return False\n    \n    return True\n\n# Example usage\nprint(rearrange_string(\"aab\"))  # True\nprint(rearrange_string(\"aaab\")) # False\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpbqeinxlr.py\", line 33, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "completion": "from collections import Counter\n\ndef freq_element(list_of_lists):\n    \"\"\"\n    Counts the frequency of each element in a given list of lists.\n    \n    Args:\n    - list_of_lists (list of lists): A list containing multiple sublists.\n    \n    Returns:\n    - dict: A dictionary where keys are the unique elements from the sublists and values are their frequencies.\n    \"\"\"\n    # Flatten the list of lists into a single list\n    flattened_list = [item for sublist in list_of_lists for item in sublist]\n    \n    # Use Counter to count the frequency of each element\n    frequency_dict = Counter(flattened_list)\n    \n    return frequency_dict\n\n# Example usage:\nexample_list_of_lists = [\n    ['apple', 'banana', 'cherry'],\n    ['banana', 'cherry', 'date'],\n    ['apple', 'cherry', 'date', 'elderberry']\n]\n\nprint(freq_element(example_list_of_lists))\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 41, "completion": "def filter_even_numbers(numbers):\n    \"\"\"\n    Filters out even numbers from a list using a lambda function.\n\n    Args:\n        numbers (list): A list of integers.\n\n    Returns:\n        list: A list containing only the even numbers from the input list.\n    \"\"\"\n    # Using filter with a lambda function to get even numbers\n    even_numbers = list(filter(lambda x: x % 2 == 0, numbers))\n    return even_numbers\n\n# Example usage:\nif __name__ == \"__main__\":\n    sample_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(\"Even numbers:\", filter_even_numbers(sample_numbers))\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7z6i8z00.py\", line 9, in <module>\n    assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\nNameError: name 'filter_evennumbers' is not defined", "passed": false}
{"task_id": 42, "completion": "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    \"\"\"\n    Calculates the sum of all repeated elements in the given list.\n    \n    Args:\n    arr (List[int]): A list of integers.\n    \n    Returns:\n    int: The sum of all repeated elements in the list.\n    \"\"\"\n    # Create a dictionary to keep track of element counts\n    count_dict = {}\n    \n    # Count occurrences of each element\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Calculate the sum of elements that appear more than once\n    total_sum = 0\n    for key, value in count_dict.items():\n        if value > 1:\n            total_sum += key * (value - 1)\n    \n    return total_sum\n\n# Example usage:\nexample_array = [1, 2, 3, 2, 3, 4, 5, 3]\nprint(find_sum(example_array))  # Output will be 6 because 2 appears twice (2*1=2) and 3 appears three times (3*2=6), so 2+6=8\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmwgey08_.py\", line 20, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    \"\"\"\n    Finds sequences of lowercase letters joined with an underscore in the given text.\n    \n    Args:\n    text (str): The string to search within.\n    \n    Returns:\n    list: A list of all matches found in the input text.\n    \"\"\"\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    matches = re.findall(pattern, text)\n    return matches\n\n# Example usage:\nsample_text = \"an_example_of_text_with_underscores_and_words_like_this_is_found\"\nprint(text_match(sample_text))\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7rmxa6qp.py\", line 9, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 44, "completion": "import re\n\ndef text_match_string(text, pattern):\n    \"\"\"\n    Checks if the pattern matches at the beginning of the given text.\n    \n    Args:\n    text (str): The string to be searched.\n    pattern (str): The word pattern to match at the start of the text.\n    \n    Returns:\n    bool: True if the pattern matches at the beginning of the text, False otherwise.\n    \"\"\"\n    # Use ^ to assert position at start of a line\n    regex = f\"^{pattern}\"\n    return bool(re.match(regex, text))\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpq_k6etyc.py\", line 6, in <module>\n    assert text_match_string(\" python\")==('Not matched!')\nTypeError: text_match_string() missing 1 required positional argument: 'pattern'", "passed": false}
{"task_id": 45, "completion": "from functools import reduce\nimport math\n\ndef get_gcd(numbers):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of a list of numbers.\n\n    Args:\n    numbers (list of int): A list of integers for which to find the GCD.\n\n    Returns:\n    int: The GCD of all the numbers in the list.\n    \"\"\"\n    return reduce(math.gcd, numbers)\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 46, "completion": "def test_distinct(numbers):\n    \"\"\"\n    Determine whether all numbers in the list are distinct.\n\n    Args:\n        numbers (list): A list of integers.\n\n    Returns:\n        bool: True if all numbers are distinct, False otherwise.\n    \"\"\"\n    return len(numbers) == len(set(numbers))\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 48, "completion": "def odd_bit_set_number(number):\n    \"\"\"\n    Sets all the odd bits (1st, 3rd, 5th, ...) of the given number to 1.\n    \n    Args:\n    number (int): The input number whose odd bits are to be set to 1.\n    \n    Returns:\n    int: The number with all odd bits set to 1.\n    \"\"\"\n    # Calculate the mask for the odd bits\n    mask = 0\n    bit_position = 1\n    while bit_position <= number.bit_length():\n        if bit_position % 2 == 1:\n            mask |= 1 << (bit_position - 1)\n        bit_position += 1\n    \n    # Apply the mask to the original number\n    result = number | mask\n    return result\n\n# Example usage:\nprint(bin(odd_bit_set_number(0b1010)))  # Output should show all odd bits set to 1\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 49, "completion": "def specified_element(matrix, index=0):\n    \"\"\"\n    Extracts the specified element (defaulting to the first element) from each sublist in a two-dimensional list.\n\n    :param matrix: A two-dimensional list (list of lists).\n    :param index: The index of the element to extract from each sublist.\n                  Defaults to 0, which means the first element will be extracted.\n    :return: A list containing the specified elements from each sublist.\n    \"\"\"\n    if not all(isinstance(sublist, list) for sublist in matrix):\n        raise ValueError(\"The input must be a two-dimensional list.\")\n    \n    # Ensure the index is valid for all sublists\n    if any(index >= len(sublist) for sublist in matrix):\n        raise IndexError(\"The specified index is out of range for some sublists.\")\n    \n    return [sublist[index] for sublist in matrix]\n\n# Example usage:\nexample_matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(specified_element(example_matrix))  # Default behavior, extracts the first element from each sublist\nprint(specified_element(example_matrix, 2))  # Extracts the third element from each sublist\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpi5k3uce0.py\", line 29, in <module>\n    check_code_style(specified_element)\n  File \"/tmp/tmpi5k3uce0.py\", line 25, in check_code_style\n    assert result.total_errors == 0, \"Code does not conform to PEP 8 standards.\"\nAssertionError: Code does not conform to PEP 8 standards.", "passed": false}
{"task_id": 51, "completion": "def check_equilateral(side1, side2, side3):\n    \"\"\"\n    Check if a triangle with sides of length side1, side2, and side3 is equilateral.\n\n    Parameters:\n    side1 (float): Length of the first side of the triangle.\n    side2 (float): Length of the second side of the triangle.\n    side3 (float): Length of the third side of the triangle.\n\n    Returns:\n    None\n\n    Prints:\n    A message indicating whether the triangle is equilateral or not.\n    \"\"\"\n    # Check if all three sides are equal\n    if side1 == side2 == side3:\n        print(\"The triangle is equilateral.\")\n    else:\n        print(\"The triangle is not equilateral.\")\n\n# Example usage:\ncheck_equilateral(5, 5, 5)  # Should print \"The triangle is equilateral.\"\ncheck_equilateral(5, 4, 5)  # Should print \"The triangle is not equilateral.\"\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpilm7p9tq.py\", line 10, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "completion": "def parallelogram_area(base: float, height: float) -> float:\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float): The base length of the parallelogram.\n    height (float): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram.\n    \"\"\"\n    return base * height\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(input_string):\n    \"\"\"\n    Check if the first and last characters of a given string are equal.\n\n    Parameters:\n        input_string (str): The string to be checked.\n\n    Returns:\n        bool: True if the first and last characters are equal, False otherwise.\n    \"\"\"\n    # Ensure the string has at least one character\n    if len(input_string) < 1:\n        return False\n\n    # Compare the first and last characters\n    return input_string[0] == input_string[-1]\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9t2rhozw.py\", line 7, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 54, "completion": "def counting_sort(arr):\n    \"\"\"\n    Sorts an array using the Counting Sort algorithm.\n    \n    Parameters:\n    arr (list): A list of non-negative integers.\n    \n    Returns:\n    list: The sorted list in ascending order.\n    \n    Note:\n    This function assumes that the input list contains only non-negative integers.\n    \"\"\"\n    if not arr:  # Check if the list is empty\n        return arr\n    \n    max_val = max(arr)  # Find the maximum value in the list\n    \n    # Initialize the count array with zeros\n    count_arr = [0] * (max_val + 1)\n    \n    # Populate the count array\n    for num in arr:\n        count_arr[num] += 1\n    \n    # Build the sorted list\n    sorted_arr = []\n    for i, count in enumerate(count_arr):\n        sorted_arr.extend([i] * count)\n    \n    return sorted_arr\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 55, "completion": "def t_n_geometric_progression(a: float, r: float, n: int) -> float:\n    \"\"\"\n    Calculate the n-th term of a geometric progression.\n\n    Args:\n        a (float): The first term of the geometric progression.\n        r (float): The common ratio between consecutive terms.\n        n (int): The term number to calculate in the progression.\n\n    Returns:\n        float: The value of the n-th term in the geometric progression.\n\n    Raises:\n        ValueError: If n is less than 1 or if any of the inputs are not numbers.\n    \"\"\"\n    if not (isinstance(n, int) and isinstance(a, (int, float)) and isinstance(r, (int, float))):\n        raise ValueError(\"a, r must be numbers and n must be an integer.\")\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1.\")\n\n    # Calculate the n-th term using the formula a * r^(n-1)\n    nth_term = a * (r ** (n - 1))\n    return nth_term\n\n# Example usage:\n# print(t_n_geometric_progression(2, 3, 4))  # Should output 54.0\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpo7_muud9.py\", line 11, in <module>\n    assert tn_gp(1,5,2)==16\nNameError: name 'tn_gp' is not defined", "passed": false}
{"task_id": 56, "completion": "def check(number):\n    \"\"\"\n    Check if the given number is one less than twice its reverse.\n    \n    Args:\n    number (int): The number to be checked.\n    \n    Returns:\n    bool: True if the number is one less than twice its reverse, False otherwise.\n    \"\"\"\n    # Convert the number to a string to easily reverse it\n    str_num = str(number)\n    reversed_str_num = str_num[::-1]\n    \n    # Convert the reversed string back to an integer\n    reversed_number = int(reversed_str_num)\n    \n    # Calculate twice the reversed number minus one\n    target_value = 2 * reversed_number - 1\n    \n    # Check if the original number matches the calculated value\n    return number == target_value\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 57, "completion": "def find_max_num(digits):\n    \"\"\"\n    Finds the largest number that can be formed with the given digits.\n\n    Args:\n    digits (list of int): A list of non-negative integers representing digits.\n\n    Returns:\n    int: The largest integer that can be formed from the given digits.\n    \"\"\"\n    # Sort the digits in descending order for maximum value\n    sorted_digits = sorted(digits, reverse=True)\n    \n    # Convert each digit back to string since we want to form a number\n    str_digits = [str(digit) for digit in sorted_digits]\n    \n    # Join them together to form the final number\n    max_number = ''.join(str_digits)\n    \n    return int(max_number)\n\n# Example usage:\ndigits_example = [3, 30, 34, 5, 9]\nprint(find_max_num(digits_example))  # Output will depend on the input\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpc6w3t5q3.py\", line 12, in <module>\n    assert find_max_num([1,2,3],3) == 321\nTypeError: find_max_num() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 58, "completion": "def opposite_signs(a: int, b: int) -> bool:\n    \"\"\"\n    Check if two integers have opposite signs.\n\n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n\n    Returns:\n    bool: True if the integers have opposite signs, False otherwise.\n    \"\"\"\n    return (a ^ b) < 0\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 59, "completion": "import math\n\ndef is_octagonal(number):\n    \"\"\"\n    Determine if a number is an octagonal number.\n    \n    Args:\n    number (int): The number to check.\n    \n    Returns:\n    bool: True if the number is an octagonal number, False otherwise.\n    \"\"\"\n    # Calculate the discriminant of the quadratic equation\n    discriminant = 1 + 8 * number\n    \n    # Check if the discriminant is a perfect square\n    if discriminant < 0 or math.sqrt(discriminant) % 1 != 0:\n        return False\n    \n    # Calculate n using the positive root of the quadratic equation\n    n = (1 + math.sqrt(discriminant)) / 6\n    \n    # Check if n is an integer\n    return n.is_integer()\n\n# Example usage\nprint(is_octagonal(1))   # True\nprint(is_octagonal(21))  # True\nprint(is_octagonal(496)) # True\nprint(is_octagonal(5))   # False\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp373gd2p3.py\", line 17, in <module>\n    assert is_octagonal(5) == 65\nAssertionError", "passed": false}
{"task_id": 60, "completion": "def max_len_sub(arr):\n    \"\"\"\n    Finds the maximum length of a subsequence where the difference between\n    adjacent elements is constant (either all increasing or all decreasing).\n\n    :param arr: List[int] - A list of integers.\n    :return: int - The maximum length of such a subsequence.\n    \"\"\"\n    if not arr:\n        return 0\n\n    n = len(arr)\n    # Initialize variables to store the maximum lengths for increasing and decreasing subsequences\n    max_incr = [1] * n\n    max_decr = [1] * n\n    \n    # Fill in the max_incr and max_decr arrays\n    for i in range(1, n):\n        if arr[i] > arr[i - 1]:\n            max_incr[i] = max_incr[i - 1] + 1\n        else:\n            max_incr[i] = 1\n        \n        if arr[i] < arr[i - 1]:\n            max_decr[i] = max_decr[i - 1] + 1\n        else:\n            max_decr[i] = 1\n    \n    # Find the maximum value from both lists\n    max_length = max(max(max_incr), max(max_decr))\n    \n    return max_length\n\n# Example usage:\narr_example = [1, 7, 4, 9, 2, 5]\nprint(max_len_sub(arr_example))  # Output will depend on the definition of \"difference between adjacent elements\"\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1bdb4sfu.py\", line 24, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}

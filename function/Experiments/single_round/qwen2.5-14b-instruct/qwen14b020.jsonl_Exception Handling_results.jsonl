{"task_id": 11, "completion": "def remove_occ(s, char):\n    # Check if the character is indeed a single character\n    if len(char) != 1:\n        raise ValueError('Second parameter must be a single character.')\n    \n    # Check if the character exists in the string\n    if char * 2 not in s + char:  # Ensures we can find at least two occurrences\n        return s\n    \n    # Find the indices of the first and last occurrences\n    first_index = s.find(char)\n    last_index = s.rfind(char)\n    \n    # Construct the new string without the first and last occurrences\n    new_string = s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]\n    \n    return new_string\n\n# Example usage:\ntry:\n    print(remove_occ(\"hello\", \"l\"))  # Expected output: \"heo\"\n    print(remove_occ(\"hello\", \"z\"))  # Expected output: \"hello\" (since 'z' does not exist in the string)\n    print(remove_occ(\"hello\", \"ll\")) # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 12, "completion": "def sort_matrix(matrix):\n    # Check if the input is a list of lists\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise TypeError(\"Input must be a list of lists.\")\n    \n    # Check if each element in the matrix is an integer\n    for row in matrix:\n        if not all(isinstance(element, int) for element in row):\n            raise TypeError(\"All elements in the matrix must be integers.\")\n    \n    # Sort the matrix based on the sum of its rows\n    sorted_matrix = sorted(matrix, key=sum)\n    \n    return sorted_matrix\n\n# Example usage:\nmatrix = [[3, 2, 1], [1, 0, 1], [4, 3]]\nsorted_matrix = sort_matrix(matrix)\nprint(sorted_matrix)  # Output: [[1, 0, 1], [3, 2, 1], [4, 3]]\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 13, "completion": "from collections import Counter\n\ndef count_common(word_list):\n    # Check if the input is a list\n    if not isinstance(word_list, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Check if all elements in the list are strings\n    if not all(isinstance(word, str) for word in word_list):\n        raise TypeError(\"All elements in the list must be strings.\")\n    \n    # Count the frequency of each word\n    word_count = Counter(word_list)\n    \n    return dict(word_count)\n\n# Example usage:\nwords = [\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"banana\"]\nprint(count_common(words))\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpzzkl2m6m.py\", line 15, in <module>\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nAssertionError", "passed": false}
{"task_id": 14, "completion": "def find_volume(base, height_triangle, length_prism):\n    # Check if all inputs are positive numbers\n    if not (isinstance(base, (int, float)) and isinstance(height_triangle, (int, float)) and isinstance(length_prism, (int, float))):\n        raise ValueError('All dimensions must be numeric.')\n    if base <= 0 or height_triangle <= 0 or length_prism <= 0:\n        raise ValueError('All dimensions must be positive numbers.')\n    \n    # Calculate the volume of the triangular prism\n    base_area = 0.5 * base * height_triangle\n    volume = base_area * length_prism\n    \n    return volume\n\n# Example usage:\ntry:\n    print(find_volume(3, 4, 5))  # Expected output: 30.0\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpl6gpbx34.py\", line 22, in <module>\n    try: find_volume('a', 2, 3)\n  File \"/tmp/tmpl6gpbx34.py\", line 4, in find_volume\n    raise ValueError('All dimensions must be numeric.')\nValueError: All dimensions must be numeric.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpl6gpbx34.py\", line 23, in <module>\n    except ValueError as e: assert str(e) == 'All dimensions must be positive numbers.'\nAssertionError", "passed": false}
{"task_id": 15, "completion": "def split_lowerstring(s):\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Split the string at each lowercase letter\n    result = []\n    current_part = ''\n    for char in s:\n        if char.islower():\n            if current_part:\n                result.append(current_part)\n                current_part = ''\n        current_part += char\n    if current_part:\n        result.append(current_part)\n    \n    return result\n\n# Example usage:\ntry:\n    print(split_lowerstring(\"HelloWorld\"))  # Output: ['H', 'W']\n    print(split_lowerstring(\"PythonIsFun\")) # Output: ['P', 'I', 'F']\n    print(split_lowerstring(12345))         # Raises TypeError\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmp5nnt1qmd.py\", line 26\n    try: split_lowerstring(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Finds sequences of lowercase letters joined with an underscore in the provided string.\n    \n    Args:\n    text (str): The string to search within.\n    \n    Returns:\n    list: A list of all matched patterns.\n    \n    Raises:\n    TypeError: If the input is not a string.\n    \"\"\"\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string.\")\n    \n    # Regular expression to match sequences of lowercase letters joined with an underscore\n    pattern = r'[a-z]+_[a-z]+'\n    matches = re.findall(pattern, text)\n    \n    return matches\n\n# Example usage:\ntry:\n    print(text_lowercase_underscore(\"This_is_a_test_string_with_multiple_values_like_this_is\"))\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpo4trz206.py\", line 14, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n    \n    Parameters:\n    - side_length (float or int): The length of one side of the square.\n    \n    Returns:\n    float: The perimeter of the square.\n    \n    Raises:\n    ValueError: If the side_length is negative.\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    \n    return 4 * side_length\n\n# Example usage:\ntry:\n    print(square_perimeter(5))  # Expected output: 20\n    print(square_perimeter(-3)) # This will raise a ValueError\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(str1, str2):\n    # Check if both inputs are strings\n    if not isinstance(str1, str) or not isinstance(str2, str):\n        raise TypeError(\"Both arguments must be strings\")\n    \n    # Remove characters from str1 that are present in str2\n    result = ''.join([char for char in str1 if char not in str2])\n    \n    return result\n\n# Example usage:\ntry:\n    print(remove_dirty_chars(\"hello\", \"world\"))  # Expected output: \"heo\"\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 19, "completion": "def test_duplicate(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise ValueError('Input must be a list of integers')\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise ValueError('Input must be a list of integers')\n    \n    # Using a set to track seen numbers\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\n# Example usage:\ntry:\n    print(test_duplicate([1, 2, 3, 4]))  # Output: False\n    print(test_duplicate([1, 2, 3, 3]))  # Output: True\n    print(test_duplicate([1, 'a', 3]))   # Raises ValueError\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpniyl3k6s.py\", line 26, in <module>\n    test_duplicate(None)\n  File \"/tmp/tmpniyl3k6s.py\", line 4, in test_duplicate\n    raise ValueError('Input must be a list of integers')\nValueError: Input must be a list of integers", "passed": false}
{"task_id": 20, "completion": "def is_woodall(num):\n    # Check if the input is an integer\n    if not isinstance(num, int):\n        raise TypeError(\"Input must be an integer.\")\n    \n    # Check if num is non-positive; Woodall numbers are positive\n    if num <= 0:\n        return False\n    \n    # Iterate over possible values of n to find if num matches n * 2^n - 1\n    n = 1\n    while True:\n        woodall_candidate = n * (2 ** n) - 1\n        if woodall_candidate == num:\n            return True\n        elif woodall_candidate > num:\n            break\n        n += 1\n    \n    return False\n\n# Example usage:\nprint(is_woodall(7))  # True, because 7 = 2 * 2^2 - 1\nprint(is_woodall(23)) # True, because 23 = 3 * 2^3 - 1\nprint(is_woodall(15)) # False\nprint(is_woodall(-1)) # False\ntry:\n    print(is_woodall(4.5))\nexcept TypeError as e:\n    print(e)  # Input must be an integer.\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 21, "completion": "def multiples_of_num(m, n):\n    if m < 0 or n < 0:\n        raise ValueError(\"Both m and n must be non-negative.\")\n    \n    return [i * n for i in range(1, m + 1)]\n\n# Example usage:\ntry:\n    print(multiples_of_num(5, 3))  # Output: [3, 6, 9, 12, 15]\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 22, "completion": "def find_first_duplicate(arr):\n    if not isinstance(arr, list) or not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"Input must be a list of integers\")\n    \n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    \n    raise ValueError(\"No duplicates found\")\n\n# Example usage:\ntry:\n    print(find_first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 1]))  # Should print 1\n    print(find_first_duplicate([10, 22, 10, 20, 30]))  # Should print 10\n    print(find_first_duplicate(['a', 1, 2]))  # Raises TypeError\nexcept TypeError as te:\n    print(te)\nexcept ValueError as ve:\n    print(ve)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7nxua1pm.py\", line 20, in <module>\n    assert find_first_duplicate([1, 2, 3, 4])==-1\n  File \"/tmp/tmp7nxua1pm.py\", line 9, in find_first_duplicate\n    raise ValueError(\"No duplicates found\")\nValueError: No duplicates found", "passed": false}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists):\n    # Check if the input is a list\n    if not isinstance(list_of_lists, list):\n        raise TypeError(\"Input must be a list\")\n    \n    max_sum = None  # Initialize max_sum to None to handle empty sublists\n    \n    for sublist in list_of_lists:\n        # Check if the current element is a list\n        if not isinstance(sublist, list):\n            raise TypeError(\"Each element of the main list must be a sublist\")\n        \n        # Check if the sublist is empty or all elements are integers\n        if not sublist or all(isinstance(item, int) for item in sublist):\n            # Calculate the sum of the current sublist\n            sublist_sum = sum(sublist)\n            \n            # Update max_sum if the current sublist sum is greater\n            if max_sum is None or sublist_sum > max_sum:\n                max_sum = sublist_sum\n        else:\n            raise TypeError(\"All elements in each sublist must be integers\")\n    \n    # If max_sum is still None, it means there were no valid sublists\n    if max_sum is None:\n        raise ValueError(\"No valid sublists found with integer elements\")\n    \n    return max_sum\n\n# Example usage:\ntry:\n    print(maximum_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))  # Output: 27\n    print(maximum_sum([[1, 2], ['a', 3], [4, 5]]))  # Raises TypeError\n    print(maximum_sum([[], [1], [2, 3]]))  # Output: 5\nexcept TypeError as te:\n    print(te)\nexcept ValueError as ve:\n    print(ve)\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpc2x91jie.py\", line 35\n    try: maximum_sum([[1, 2], [3, 'a']]); assert False, 'Expected TypeError' except TypeError: pass\n                                                                             ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 24, "completion": "def binary_to_decimal(binary_str):\n    # Check if the input string is a valid binary number\n    if not all(char in '01' for char in binary_str):\n        raise ValueError('Invalid binary number')\n    \n    # Convert the binary string to a decimal integer\n    decimal_number = int(binary_str, 2)\n    \n    return decimal_number\n\n# Example usage:\ntry:\n    print(binary_to_decimal(\"1010\"))  # Should print 10\n    print(binary_to_decimal(\"1101\"))  # Should print 13\n    print(binary_to_decimal(\"1020\"))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmp2t2xoctw.py\", line 18\n    try: binary_to_decimal('102'); assert False, 'Expected ValueError' except ValueError as e: assert str(e) == 'Invalid binary number'\n                                                                       ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 25, "completion": "def find_product(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements in the list must be integers\")\n    \n    # Count the occurrences of each element\n    from collections import Counter\n    counts = Counter(arr)\n    \n    # Calculate the product of non-repeated elements\n    product = 1\n    for num, count in counts.items():\n        if count == 1:\n            product *= num\n    \n    return product\n\n# Example usage:\ntry:\n    print(find_product([4, 5, 4, 6]))  # Output will be 5 * 6 = 30\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdo76qsms.py\", line 22, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(tuples_list, k):\n    # Check if k is an integer\n    if not isinstance(k, int):\n        raise TypeError(\"The second argument must be an integer.\")\n    \n    # Check if the input is a list\n    if not isinstance(tuples_list, list):\n        raise TypeError(\"The first argument must be a list.\")\n    \n    # Check if all elements in the list are tuples\n    for item in tuples_list:\n        if not isinstance(item, tuple):\n            raise TypeError(\"All elements in the list must be tuples.\")\n    \n    # Check if each tuple contains exactly k elements\n    for tup in tuples_list:\n        if len(tup) != k:\n            return False\n    \n    return True\n\n# Example usage:\ntry:\n    print(check_k_elements([(1, 2), (3, 4), (5, 6)], 2))  # Should return True\n    print(check_k_elements([(1, 2), (3, 4, 5), (5, 6)], 2))  # Should return False\n    print(check_k_elements([1, (3, 4, 5), (5, 6)], 2))  # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpyd2y073p.py\", line 24, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "completion": "import re\n\ndef remove_digits(strings_list):\n    # Check if the input is a list\n    if not isinstance(strings_list, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Check if each element in the list is a string\n    for item in strings_list:\n        if not isinstance(item, str):\n            raise TypeError(\"All elements in the list must be strings.\")\n    \n    # Remove digits from each string in the list\n    cleaned_list = [re.sub(r'\\d', '', s) for s in strings_list]\n    \n    return cleaned_list\n\n# Example usage:\ntry:\n    print(remove_digits([\"hello123\", \"world456\", \"test789\"]))  # Output: ['hello', 'world', 'test']\n    print(remove_digits([\"hello\", 123]))  # Raises TypeError\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpaktnumnw.py\", line 19, in <module>\n    assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\nNameError: name 'remove' is not defined", "passed": false}
{"task_id": 28, "completion": "def binomial_coeff(n, k):\n    # Check if inputs are non-negative integers and k <= n\n    if not (isinstance(n, int) and isinstance(k, int)):\n        raise ValueError(\"Both inputs must be integers.\")\n    if n < 0 or k < 0:\n        raise ValueError(\"Inputs must be non-negative.\")\n    if k > n:\n        raise ValueError(\"k must not be greater than n.\")\n\n    # Initialize result\n    res = 1\n\n    # Since C(n, k) == C(n, n-k)\n    if (k > n - k):\n        k = n - k\n\n    # Calculate value of [n * (n-1) *---* (n-k+1)] / [k * (k-1) *----* 1]\n    for i in range(k):\n        res *= (n - i)\n        res //= (i + 1)\n\n    return res\n\n# Example usage:\ntry:\n    print(binomial_coeff(5, 2))  # Expected output: 10\n    print(binomial_coeff(6, 3))  # Expected output: 20\n    print(binomial_coeff(-1, 2)) # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpvjjscxgx.py\", line 29, in <module>\n    try: binomial_coeff(-1, 2)\n  File \"/tmp/tmpvjjscxgx.py\", line 6, in binomial_coeff\n    raise ValueError(\"Inputs must be non-negative.\")\nValueError: Inputs must be non-negative.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpvjjscxgx.py\", line 30, in <module>\n    except ValueError as e: assert str(e) == 'Inputs must be non-negative and k must not be greater than n'\nAssertionError", "passed": false}
{"task_id": 29, "completion": "def get_odd_occurrence(numbers):\n    # Check if the input is a list\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Dictionary to store the count of each number\n    count_dict = {}\n    \n    # Count occurrences of each number\n    for num in numbers:\n        # Check if each item in the list is an integer\n        if not isinstance(num, int):\n            raise TypeError(\"All elements in the list must be integers.\")\n        \n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Find the number with an odd occurrence\n    for num, count in count_dict.items():\n        if count % 2 != 0:\n            return num\n    \n    # If no odd occurrence found, raise an exception (though it should always find one based on the problem statement)\n    raise ValueError(\"No element occurs an odd number of times.\")\n\n# Example usage:\ntry:\n    print(get_odd_occurrence([1, 2, 3, 2, 3, 1, 3]))  # Output should be 3\nexcept Exception as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpt01vi6t9.py\", line 27, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    # Check if the input is a string\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    \n    n = len(s)\n    count = 0\n    \n    # Iterate through each character in the string\n    for i in range(n):\n        # For each character, calculate the number of valid substrings\n        # that start and end with this character\n        count += (i + 1)\n    \n    return count\n\n# Example usage:\ntry:\n    print(count_substring_with_equal_ends(\"abc\"))  # Output: 3\n    print(count_substring_with_equal_ends(\"aaa\"))  # Output: 6\n    print(count_substring_with_equal_ends(123))    # Raises TypeError\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpupx07nc6.py\", line 23\n    try: count_substring_with_equal_ends(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                                  ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 31, "completion": "import heapq\n\ndef func(lists, k):\n    # Dictionary to store the frequency of each integer\n    frequency = {}\n    \n    # Count the frequency of each integer in the lists\n    for sublist in lists:\n        for num in sublist:\n            frequency[num] = frequency.get(num, 0) + 1\n    \n    # Check if k is valid\n    if k > len(frequency):\n        raise ValueError('k cannot be greater than the number of distinct integers')\n    \n    # Use a min-heap to keep track of the top k frequent integers\n    heap = []\n    for num, freq in frequency.items():\n        heapq.heappush(heap, (freq, num))\n        if len(heap) > k:\n            heapq.heappop(heap)\n    \n    # Extract the top k integers from the heap\n    top_k = [num for _, num in heap]\n    \n    return top_k\n\n# Example usage:\nlists = [[1, 4, 7], [3, 4, 8], [2, 5, 6]]\nk = 4\nprint(func(lists, k))  # Output may vary based on the input\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp98x20hpb.py\", line 25, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    # Check if the input is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError('Input must be a positive integer')\n    \n    # Initialize the largest prime factor\n    largest_prime = -1\n    \n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n    \n    # Now n must be odd, start checking from 3\n    for i in range(3, int(n**0.5) + 1, 2):\n        # While i divides n, replace n and update largest_prime\n        while n % i == 0:\n            largest_prime = i\n            n //= i\n    \n    # If n becomes a prime number greater than 2\n    if n > 2:\n        largest_prime = n\n    \n    return largest_prime\n\n# Example usage:\ntry:\n    print(max_prime_factors(13195))  # Should print 29\n    print(max_prime_factors(2048))   # Should print 2\n    print(max_prime_factors(-10))    # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(decimal_number):\n    # Check if the input is a non-negative integer\n    if not isinstance(decimal_number, int) or decimal_number < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    # Convert the decimal number to binary\n    binary_number = bin(decimal_number)[2:]  # Remove the '0b' prefix\n    \n    return binary_number\n\n# Example usage:\ntry:\n    print(decimal_to_binary(10))  # Output: 1010\n    print(decimal_to_binary(-1))  # Raises ValueError\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1h4hwmve.py\", line 14, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "completion": "def find_missing(arr):\n    # Check if the array is sorted\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            raise ValueError('Input list must be sorted.')\n    \n    # Calculate the expected sum using the formula for the sum of an arithmetic series\n    n = len(arr) + 1  # Since one number is missing\n    start = arr[0]\n    end = arr[-1]\n    expected_sum = (n * (start + end)) // 2\n    \n    # Calculate the actual sum of the provided array\n    actual_sum = sum(arr)\n    \n    # The missing number is the difference between the expected sum and the actual sum\n    return expected_sum - actual_sum\n\n# Example usage:\ntry:\n    print(find_missing([1, 2, 4, 5]))  # Output should be 3\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(find_missing([10, 11, 13, 14, 15]))  # Output should be 12\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(find_missing([5, 6, 7, 8, 10]))  # Raises ValueError\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpk56etixb.py\", line 28, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    \"\"\"\n    Finds the n-th rectangular number.\n    \n    Parameters:\n    n (int): The position in the sequence of rectangular numbers.\n    \n    Returns:\n    int: The n-th rectangular number.\n    \n    Raises:\n    ValueError: If n is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    # Calculate the n-th rectangular number\n    rect_num = n * (n + 1)\n    return rect_num\n\n# Example usage:\ntry:\n    print(find_rect_num(4))  # Should print 12, which is the 4th rectangular number\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator, n):\n    # Check for division by zero\n    if denominator == 0:\n        raise ValueError(\"Denominator cannot be zero\")\n    \n    # Determine the integer part of the division\n    integer_part = numerator // denominator\n    \n    # Calculate the remainder after taking out the integer part\n    remainder = numerator % denominator\n    \n    # Handle the special case where the result is an integer\n    if remainder == 0:\n        return str(integer_part)[n-1] if n <= len(str(integer_part)) else \"0\"\n    \n    # Initialize variables for long division\n    decimal_part = \"\"\n    seen_remainders = {}\n    \n    # Perform long division until we either find the nth digit or detect a cycle\n    while len(decimal_part) < n and remainder != 0:\n        # If we've seen this remainder before, we have detected a cycle\n        if remainder in seen_remainders:\n            start_cycle = seen_remainders[remainder]\n            non_repeating = decimal_part[:start_cycle]\n            repeating = decimal_part[start_cycle:]\n            break\n        \n        # Store the position of this remainder\n        seen_remainders[remainder] = len(decimal_part)\n        \n        # Append the next digit to the decimal part\n        remainder *= 10\n        next_digit = remainder // denominator\n        decimal_part += str(next_digit)\n        \n        # Update the remainder\n        remainder %= denominator\n    \n    # If we detected a cycle, adjust n to account for the non-repeating part\n    if remainder != 0:\n        n -= len(non_repeating)\n        if n > 0:\n            return repeating[n-1]\n        else:\n            return non_repeating[-n]\n    \n    # If no cycle was detected, just return the nth digit\n    return decimal_part[n-1] if n <= len(decimal_part) else \"0\"\n\n# Example usage:\nprint(find_nth_digit(1, 2, 1))  # Should return '5' since 1/2 = 0.5\nprint(find_nth_digit(22, 7, 3)) # Should return '8' since 22/7 \u2248 3.142857...\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjs8jfut_.py\", line 42, in <module>\n    print(find_nth_digit(22, 7, 3)) # Should return '8' since 22/7 \u2248 3.142857...\n  File \"/tmp/tmpjs8jfut_.py\", line 33, in find_nth_digit\n    n -= len(non_repeating)\nUnboundLocalError: local variable 'non_repeating' referenced before assignment", "passed": false}
{"task_id": 37, "completion": "def sort_mixed_list(mixed_list):\n    # Check if the input is a list\n    if not isinstance(mixed_list, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Check each element in the list\n    for item in mixed_list:\n        if not isinstance(item, (int, str)):\n            raise TypeError(\"List can only contain integers and strings.\")\n    \n    # Sort the list using a custom sorting key\n    sorted_list = sorted(mixed_list, key=lambda x: (isinstance(x, int), x))\n    return sorted_list\n\n# Example usage:\ntry:\n    print(sort_mixed_list([10, \"apple\", 5, \"banana\", 2, \"cherry\"]))\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpc7esxs1y.py\", line 17, in <module>\n    assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nAssertionError", "passed": false}
{"task_id": 38, "completion": "def div_even_odd(numbers):\n    \"\"\"\n    Finds the division of the first even and odd number in the given list.\n    \n    Args:\n    - numbers (list): A list of integers.\n    \n    Returns:\n    - float: The result of dividing the first even number by the first odd number.\n    \n    Raises:\n    - ValueError: If the list does not contain at least one even and one odd number.\n    \"\"\"\n    first_even = None\n    first_odd = None\n    \n    for num in numbers:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        \n        # If we've found both, no need to continue\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Check if we have both an even and an odd number\n    if first_even is None or first_odd is None:\n        raise ValueError('List must contain at least one even and one odd number.')\n    \n    return first_even / first_odd\n\n# Example usage:\ntry:\n    print(div_even_odd([4, 3, 2, 1]))  # Output: 4.0\n    print(div_even_odd([5, 7, 9]))     # Raises ValueError\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpjrsxuymw.py\", line 25\n    try: div_even_odd([2, 4, 6]); assert False; except ValueError as e: assert str(e) == 'List must contain at least one even and one odd number.'\n                                                ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 39, "completion": "def rearrange_string(s):\n    # Check if input is a string\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string.\")\n    \n    # Check if string contains only lowercase letters\n    if not s.islower():\n        raise ValueError(\"String must contain only lowercase letters.\")\n    \n    # Count the frequency of each character\n    from collections import Counter\n    char_count = Counter(s)\n    \n    result = []\n    used_char = None\n    \n    while char_count:\n        for char, count in char_count.most_common():\n            if char != used_char:\n                result.append(char)\n                char_count[char] -= 1\n                if char_count[char] == 0:\n                    del char_count[char]\n                used_char = char\n                break\n        else:  # No character found that is different from used_char\n            raise ValueError(\"Cannot rearrange string to meet conditions.\")\n    \n    return ''.join(result)\n\n# Example usage:\ntry:\n    print(rearrange_string(\"aab\"))  # Output might be \"aba\"\n    print(rearrange_string(\"aaabc\"))  # Output might be \"abaca\"\n    print(rearrange_string(\"aa\"))    # Raises ValueError\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpytf6_ivy.py\", line 32, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "completion": "from collections import Counter\nfrom typing import List\n\ndef flatten_list(nested_list):\n    \"\"\"Helper function to flatten a list of lists.\"\"\"\n    flat_list = []\n    for sublist in nested_list:\n        if isinstance(sublist, list):  # Ensure each element is a list\n            for item in sublist:\n                flat_list.append(item)\n        else:\n            raise ValueError(\"Each element in the main list should be a list.\")\n    return flat_list\n\ndef freq_element(list_of_lists: List[List[int]]) -> dict:\n    \"\"\"\n    Counts the frequency of elements in a list of lists.\n    \n    Args:\n    - list_of_lists (List[List[int]]): A list containing sublists of integers.\n    \n    Returns:\n    - dict: A dictionary with elements as keys and their frequencies as values.\n    \n    Raises:\n    - TypeError: If the input is not a list of lists.\n    - ValueError: If any element in the list is not a list.\n    \"\"\"\n    if not isinstance(list_of_lists, list) or not all(isinstance(lst, list) for lst in list_of_lists):\n        raise TypeError(\"Input must be a list of lists.\")\n    \n    flattened_list = flatten_list(list_of_lists)\n    return dict(Counter(flattened_list))\n\n# Example usage\nif __name__ == \"__main__\":\n    example_input = [[1, 2, 3], [4, 5, 6, 2], [1, 2, 2]]\n    print(freq_element(example_input))\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpfqejqfm9.py\", line 25\n    try: freq_element('not a list'); assert False; except TypeError: assert True\n                                                   ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 41, "completion": "def filter_evennumbers(numbers):\n    # Check if the input is a list\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in numbers):\n        raise TypeError(\"All elements in the list must be integers.\")\n    \n    # Filter even numbers using a lambda function\n    even_numbers = list(filter(lambda x: x % 2 == 0, numbers))\n    \n    return even_numbers\n\n# Example usage:\ntry:\n    print(filter_evennumbers([1, 2, 3, 4, 5]))  # Output: [2, 4]\n    print(filter_evennumbers([1, 'a', 3, 4]))   # Raises TypeError\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 42, "completion": "def find_sum(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Dictionary to keep track of element counts\n    count_dict = {}\n    repeated_sum = 0\n    \n    # Count occurrences of each element\n    for item in arr:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    \n    # Calculate the sum of repeated elements\n    for key, value in count_dict.items():\n        if value > 1:\n            repeated_sum += key * (value - 1)\n    \n    return repeated_sum\n\n# Example usage:\ntry:\n    print(find_sum([1, 2, 3, 2, 3, 4]))  # Output: 5 (2 + 3 = 5, because they each appear twice)\n    print(find_sum([1, 1, 1, 1]))       # Output: 0 (1 appears four times, but we only count it three times extra)\n    print(find_sum('not a list'))        # Raises TypeError\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6l4qyue9.py\", line 26, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpexwuy0zy.py\", line 2, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nNameError: name 'text_match' is not defined", "passed": false}
{"task_id": 44, "completion": "import re\n\ndef text_match_string(word, text):\n    # Check if the inputs are strings\n    if not isinstance(text, str) or not isinstance(word, str):\n        raise TypeError(\"Both 'word' and 'text' must be strings\")\n    \n    # Regular expression pattern to match the word at the start of the string\n    pattern = r'^' + re.escape(word)\n    \n    # Search for the pattern in the text\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\n# Example usage:\ntry:\n    print(text_match_string('hello', 'hello world'))  # Should return True\n    print(text_match_string('world', 'hello world'))  # Should return False\n    print(text_match_string('test', 'testing'))       # Should return True\n    print(text_match_string(123, '123abc'))           # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpy4etwy_g.py\", line 24\n    try: text_match_string(123); assert False, 'TypeError not raised' except TypeError: pass\n                                                                      ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 45, "completion": "import math\nfrom functools import reduce\n\ndef get_gcd(arr):\n    # Check if the input list is empty\n    if not arr:\n        raise ValueError('Input list cannot be empty.')\n    \n    # Use reduce to apply the gcd function across all elements in the array\n    return reduce(math.gcd, arr)\n\n# Example usage:\ntry:\n    print(get_gcd([12, 24, 36]))  # Should output 12\n    print(get_gcd([]))            # This will raise a ValueError\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 46, "completion": "def test_distinct(numbers):\n    # Check if the input is a list\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(n, int) for n in numbers):\n        raise TypeError(\"All elements in the list must be integers\")\n    \n    # Use set to check for distinct elements\n    return len(numbers) == len(set(numbers))\n\n# Example usage:\ntry:\n    print(test_distinct([1, 2, 3, 4]))  # Should return True\n    print(test_distinct([1, 2, 2, 3]))  # Should return False\n    print(test_distinct([1, 'a', 3]))   # Should raise TypeError\n    print(test_distinct('not a list'))  # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 47, "completion": "def compute_last_digit(a, b):\n    # Check if a is greater than b\n    if a > b:\n        raise ValueError('a should not be greater than b')\n    \n    # If b is less than 5, manually compute the division\n    if b < 5:\n        result = 1\n        for i in range(a + 1, b + 1):\n            result *= i\n        return str(result)[-1]  # Get the last digit\n        \n    # If b >= 5, the result will end in 0 because there are enough factors of 2 and 5\n    return '0'\n\n# Example usage:\nprint(compute_last_digit(3, 5))  # Output should be '2'\nprint(compute_last_digit(4, 4))  # Output should be '1'\nprint(compute_last_digit(5, 7))  # Output should be '0'\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpr66ywe7y.py\", line 17, in <module>\n    assert compute_last_digit(2,4) == 2\nAssertionError", "passed": false}
{"task_id": 48, "completion": "def odd_bit_set_number(n):\n    # Check if the input is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    # Initialize the mask to 0\n    mask = 0\n    \n    # Determine the number of bits in the number\n    num_bits = n.bit_length()\n    \n    # Create a mask with bits set at odd positions\n    for i in range(num_bits):\n        if i % 2 == 1:\n            mask |= (1 << i)\n    \n    # Apply the mask to set the odd bits of n\n    result = n | mask\n    \n    return result\n\n# Example usage:\nprint(odd_bit_set_number(10))  # Example input\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpzb8tjmmk.py\", line 18, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(two_d_list, index):\n    \"\"\"\n    Extracts elements from each sublist in a two-dimensional list based on a specified index.\n    \n    Parameters:\n    - two_d_list: A two-dimensional list (list of lists).\n    - index: An integer representing the index of the element to extract from each sublist.\n    \n    Returns:\n    A list containing the elements at the specified index from each sublist.\n    \n    Raises:\n    IndexError: If the specified index is out of range for any sublist.\n    \"\"\"\n    extracted_elements = []\n    for sublist in two_d_list:\n        try:\n            # Attempt to access the element at the specified index\n            element = sublist[index]\n            extracted_elements.append(element)\n        except IndexError:\n            # Raise an IndexError with a specific message if the index is out of range\n            raise IndexError('Index out of range for sublist')\n    return extracted_elements\n\n# Example usage:\ntwo_d_list_example = [[1, 2, 3], [4, 5, 6, 7], [8, 9]]\nindex_to_extract = 2\ntry:\n    print(specified_element(two_d_list_example, index_to_extract))\nexcept IndexError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 50, "completion": "def min_length_list(list_of_lists):\n    # Check if the input is a list of lists\n    if not all(isinstance(i, list) for i in list_of_lists):\n        raise ValueError('Input must be a list of lists.')\n    \n    # Find the list with the minimum length using min() and a lambda function\n    return min(list_of_lists, key=lambda x: len(x))\n\n# Example usage:\ntry:\n    print(min_length_list([[1, 2], [3], [4, 5, 6], []]))  # Output: []\n    print(min_length_list([[], ['a', 'b'], ['c']]))       # Output: []\n    print(min_length_list(['not', 'a', 'list']))          # Raises ValueError\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6l0sy073.py\", line 14, in <module>\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nAssertionError", "passed": false}
{"task_id": 51, "completion": "def check_equilateral(a, b, c):\n    # Check if any side is non-positive\n    if a <= 0 or b <= 0 or c <= 0:\n        raise ValueError(\"All sides must be positive integers.\")\n    \n    # Check if the triangle is equilateral\n    if a == b == c:\n        return \"The triangle is equilateral.\"\n    else:\n        return \"The triangle is not equilateral.\"\n\n# Example usage:\ntry:\n    print(check_equilateral(5, 5, 5))  # Should print \"The triangle is equilateral.\"\n    print(check_equilateral(5, 4, 3))  # Should print \"The triangle is not equilateral.\"\n    print(check_equilateral(-1, 5, 5)) # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmptcojqih7.py\", line 17, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    # Check if both inputs are numerical\n    if not (isinstance(base, (int, float)) and isinstance(height, (int, float))):\n        raise TypeError(\"Both base and height must be numerical values.\")\n    \n    # Calculate the area of the parallelogram\n    area = base * height\n    \n    return area\n\n# Example usage:\ntry:\n    print(parallelogram_area(10, 5))  # Should print 50\n    print(parallelogram_area('10', 5))  # This will raise a TypeError\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(s):\n    # Check if the input is a string\n    if not isinstance(s, str):\n        raise TypeError('Input must be a string')\n    \n    # Check if the string has at least one character\n    if len(s) == 0:\n        return False\n    \n    # Compare the first and last character\n    return s[0] == s[-1]\n\n# Example usage:\ntry:\n    print(check_equality(\"radar\"))  # True\n    print(check_equality(\"hello\"))  # False\n    print(check_equality(\"\"))       # False\n    print(check_equality(123))      # Raises TypeError\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphk4dvcpb.py\", line 18, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 54, "completion": "def counting_sort(arr):\n    # Check if input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Check if the list is empty\n    if len(arr) == 0:\n        return []\n    \n    # Check if all elements are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements in the list must be integers.\")\n    \n    # Find the maximum and minimum values in the array\n    max_val = max(arr)\n    min_val = min(arr)\n    \n    # Initialize the count array\n    count_range = max_val - min_val + 1\n    count = [0] * count_range\n    \n    # Count the occurrences of each element\n    for num in arr:\n        count[num - min_val] += 1\n    \n    # Modify the count array by adding the previous counts (cumulative sum)\n    for i in range(1, count_range):\n        count[i] += count[i - 1]\n    \n    # Output array to store the sorted elements\n    output = [0] * len(arr)\n    \n    # Build the output array\n    for num in reversed(arr):\n        output[count[num - min_val] - 1] = num\n        count[num - min_val] -= 1\n    \n    return output\n\n# Example usage:\ntry:\n    print(counting_sort([4, 2, 2, 8, 3, 3, 1]))\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 55, "completion": "def tn_gp(a, r, n):\n    # Check if the term number is greater than 0\n    if n < 1:\n        raise ValueError('Term number must be greater than 0')\n    \n    # Calculate the n-th term of the geometric series\n    return a * (r ** (n - 1))\n\n# Example usage:\ntry:\n    print(tn_gp(2, 3, 4))  # Should print 54\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7i7c8nu4.py\", line 12, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def check(number):\n    # Check if the input is an integer\n    if not isinstance(number, int):\n        raise TypeError(\"Input must be an integer.\")\n    \n    # Convert the number to a string, reverse it, and convert back to an integer\n    reversed_number = int(str(abs(number))[::-1])\n    \n    # Check if the number is one less than twice its reverse\n    if number == 2 * reversed_number - 1:\n        return True\n    else:\n        return False\n\n# Example usage:\ntry:\n    print(check(12))  # True because 12 is one less than twice its reverse (21)\n    print(check(89))  # False\n    print(check('abc'))  # Raises TypeError\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 57, "completion": "def find_max_num(digits, num_digits):\n    # Check if the number of digits requested exceeds the length of the list\n    if num_digits > len(digits):\n        raise ValueError('Number of digits exceeds the length of the list.')\n    \n    # Sort the digits in descending order to get the largest possible number\n    sorted_digits = sorted(digits, reverse=True)\n    \n    # Take the first 'num_digits' from the sorted list\n    max_digits = sorted_digits[:num_digits]\n    \n    # Convert the list of digits back into an integer\n    max_number = int(''.join(map(str, max_digits)))\n    \n    return max_number\n\n# Example usage:\ntry:\n    print(find_max_num([5, 9, 3, 7], 2))  # Expected output: 97\n    print(find_max_num([4, 6, 2, 7, 9], 3))  # Expected output: 976\n    print(find_max_num([1, 2], 3))  # This should raise an error\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 58, "completion": "def opposite_signs(a, b):\n    # Check if both inputs are integers\n    if not (isinstance(a, int) and isinstance(b, int)):\n        raise TypeError(\"Both inputs must be integers\")\n    \n    # Check if the numbers have opposite signs\n    return (a < 0) != (b < 0)\n\n# Example usage:\ntry:\n    print(opposite_signs(10, -5))  # Should return True\n    print(opposite_signs(-3, -7))  # Should return False\n    print(opposite_signs(2, 4))    # Should return False\n    print(opposite_signs('a', 2))  # This will raise a TypeError\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 59, "completion": "def is_positive_integer(n):\n    \"\"\"Helper function to check if the input is a positive integer.\"\"\"\n    return isinstance(n, int) and n > 0\n\ndef nth_octagonal_number(n):\n    \"\"\"\n    Calculate the nth octagonal number.\n    \n    Parameters:\n    n (int): The position in the sequence of octagonal numbers.\n    \n    Returns:\n    int: The nth octagonal number.\n    \n    Raises:\n    ValueError: If n is not a positive integer.\n    \"\"\"\n    if not is_positive_integer(n):\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    # Formula to calculate the nth octagonal number\n    return n * (3 * n - 2)\n\n# Example usage:\ntry:\n    print(nth_octagonal_number(4))  # Should print 40\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpcwu0l_kb.py\", line 14, in <module>\n    assert is_octagonal(5) == 65\nNameError: name 'is_octagonal' is not defined", "passed": false}
{"task_id": 60, "completion": "def max_len_sub(arr, diff):\n    # Check if arr is a list and diff is an integer\n    if not isinstance(arr, list) or not isinstance(diff, int):\n        raise TypeError(\"Input array must be a list and the difference must be an integer.\")\n    \n    # Dictionary to store the length of the longest subsequence ending with a particular element\n    dp = {}\n    \n    # Variable to store the maximum length found\n    max_length = 0\n    \n    # Iterate over each element in the array\n    for num in arr:\n        # Calculate the possible previous element in the subsequence\n        prev1 = num - diff\n        prev2 = num + diff\n        \n        # Update the length of the longest subsequence ending with the current element\n        dp[num] = max((dp.get(prev1, 0) + 1), (dp.get(prev2, 0) + 1))\n        \n        # Update the maximum length found so far\n        max_length = max(max_length, dp[num])\n    \n    return max_length\n\n# Example usage:\nprint(max_len_sub([1, 5, 7, 10, 13], 2))  # Output: 3\nprint(max_len_sub([1, 2, 3, 4, 5], 1))    # Output: 5\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxa8jcudr.py\", line 22, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nAssertionError", "passed": false}

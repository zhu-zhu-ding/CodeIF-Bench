{"task_id": 11, "completion": "def remove_occ(s, char):\n    # Step 1: Find the first occurrence and remove it\n    if char in s:\n        s = s.replace(char, '', 1)  # Replace only the first occurrence\n        \n    # Step 2: Find the last occurrence and remove it\n    if char in s:\n        s = s[::-1]  # Reverse the string\n        s = s.replace(char, '', 1)  # Replace only the first occurrence (last in original)\n        s = s[::-1]  # Reverse back\n    \n    return s\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 14, "completion": "def find_volume(base, height_of_triangle, length_of_prism):\n    return (0.5 * base * height_of_triangle) * length_of_prism\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 15, "completion": "def split_lowerstring(s):\n    # Use a lambda function within a join operation to simulate the split logic.\n    return ''.join(f'{c}_' if c.islower() else c for c in s).strip('_').split('_')\n\n# Example usage:\nresult = split_lowerstring(\"HelloWorld\")\nprint(result)  # Output: ['H', 'ello', 'W', 'orld']\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8z439qtt.py\", line 7, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    # Define the regex pattern for sequences of lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    \n    # Search for the pattern in the provided text\n    match = re.search(pattern, text)\n    \n    # Check if any matches were found\n    if match:\n        return True\n    else:\n        return False\n\n# Example usage:\nexample_text = \"this_is_a_test_string\"\nprint(text_lowercase_underscore(example_text))  # Expected output: True\n\nexample_text2 = \"ThisIsAnotherString\"\nprint(text_lowercase_underscore(example_text2))  # Expected output: False\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpliraxxe9.py\", line 17, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    return 4 * side_length\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(x):\n    # Increment x by 1 to reverse the subtraction operation\n    x += 1\n    \n    # Check if x is a power of 2\n    while x > 0:\n        if x & (x - 1) == 0:\n            return True\n        x >>= 1\n    \n    return False\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqlqecu6r.py\", line 11, in <module>\n    assert is_woodall(254) == False\nAssertionError", "passed": false}
{"task_id": 21, "completion": "def multiples_of_num(n, m):\n    return [n * i for i in range(1, m + 1)]\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpe8hfnpyl.py\", line 3, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 24, "completion": "def binary_to_decimal(binary_str):\n    return int(binary_str, 2)\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9v56itfv.py\", line 3, in <module>\n    assert binary_to_decimal(100) == 4\n  File \"/tmp/tmp9v56itfv.py\", line 2, in binary_to_decimal\n    return int(binary_str, 2)\nTypeError: int() can't convert non-string with explicit base", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    # Initialize the largest prime factor variable\n    largest_prime = -1\n    \n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n    \n    # Now n must be odd, start checking from 3\n    for i in range(3, int(n**0.5) + 1, 2):\n        # While i divides n, replace largest_prime and divide n\n        while n % i == 0:\n            largest_prime = i\n            n //= i\n    \n    # If n became a prime number greater than 2\n    if n > 2:\n        largest_prime = n\n    \n    return largest_prime\n\n# Example usage:\nprint(max_prime_factors(13195))  # Output: 29\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(decimal_number):\n    # Convert decimal to binary and remove the '0b' prefix\n    return bin(decimal_number)[2:]\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpopowmx6a.py\", line 4, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    return n * (n + 1)\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 36, "completion": "def find_nth_digit(dividend, divisor, n):\n    \"\"\"\n    Find the nth digit after the decimal point in the division of dividend by divisor.\n    \n    :param dividend: The numerator of the fraction.\n    :param divisor: The denominator of the fraction.\n    :param n: The position of the digit to retrieve (1-based index).\n    :return: The nth digit after the decimal point as an integer.\n    \"\"\"\n    # Ensure n is valid\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    # Calculate the division\n    quotient = dividend / divisor\n    \n    # Convert the quotient to string to access digits\n    quotient_str = str(quotient)\n    \n    # Find the start of the decimal part\n    decimal_part_start = quotient_str.find('.')\n    \n    # Check if the division resulted in an integer\n    if decimal_part_start == -1:\n        raise ValueError(\"The division does not produce a decimal part.\")\n    \n    # Get the decimal part\n    decimal_part = quotient_str[decimal_part_start + 1:]\n    \n    # Ensure n is within the length of the decimal part\n    if n > len(decimal_part):\n        raise ValueError(\"n exceeds the length of the decimal part.\")\n    \n    # Return the nth digit as an integer\n    return int(decimal_part[n-1])\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 38, "completion": "def div_even_odd(numbers):\n    # Initialize variables to store the first even and odd numbers encountered\n    first_even = None\n    first_odd = None\n    \n    # Iterate through the list\n    for num in numbers:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        elif first_odd is None and num % 2 != 0:\n            first_odd = num\n        \n        # Check if both first even and odd numbers are found\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Perform division if both numbers are found, otherwise return an appropriate message\n    if first_even is not None and first_odd is not None:\n        return first_even / first_odd\n    else:\n        return \"Not enough distinct even/odd numbers in the list.\"\n\n# Example usage\nprint(div_even_odd([4, 5, 6, 7]))  # Output: 1.2\nprint(div_even_odd([2, 4, 6]))     # Output: \"Not enough distinct even/odd numbers in the list.\"\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpe0_d3x7m.py\", line 27, in <module>\n    assert cc_visit(inspect.getsource(div_even_odd))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 40, "completion": "from collections import Counter\nfrom itertools import chain\n\ndef freq_element(list_of_lists):\n    # Flatten the list of lists into a single list\n    flat_list = list(chain(*list_of_lists))\n    # Count the frequency of each element in the flattened list\n    return dict(Counter(flat_list))\n\n# Example usage:\nexample_list = [[1, 2, 3], [4, 5, 6], [1, 2, 3, 4]]\nprint(freq_element(example_list))  # Output will be a dictionary with frequencies\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 42, "completion": "from collections import Counter\n\ndef find_sum(arr):\n    # Step 1: Count occurrences of each element\n    counts = Counter(arr)\n    \n    # Step 2 & 3: Sum up elements that appear more than once\n    repeated_sum = sum(key * value for key, value in counts.items() if value > 1)\n    \n    return repeated_sum\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp42dq958o.py\", line 8, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    # Define the regex pattern to match sequences of lowercase letters joined by an underscore\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    \n    # Use re.findall() to find all occurrences of the pattern in the provided text\n    matches = re.findall(pattern, text)\n    \n    # Return the list of matches\n    return matches\n\n# Example usage:\nprint(text_match(\"an_example_text with_another_example\"))\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpe806sj_o.py\", line 11, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 45, "completion": "def get_gcd(arr):\n    from math import gcd\n    \n    if not arr:\n        return None  # Handle empty array case\n    \n    current_gcd = arr[0]\n    \n    for num in arr[1:]:\n        current_gcd = gcd(current_gcd, num)\n        \n        # Early exit if GCD becomes 1, as further computations won't change the result\n        if current_gcd == 1:\n            return 1\n            \n    return current_gcd\n\n# Example usage:\nprint(get_gcd([8, 12, 16]))  # Output: 4\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp12_huicm.py\", line 19, in <module>\n    assert cc_visit(inspect.getsource(get_gcd))[0].complexity <=1\nAssertionError", "passed": false}
{"task_id": 47, "completion": "def compute_last_digit(a, b):\n    # If b is greater than or equal to 5 and a is less than b, the result will always be 0\n    if b >= 5 and a < b:\n        return 0\n    \n    # Calculate the last digit of (b! / a!) for small values of a and b\n    last_digit = 1\n    for i in range(a + 1, b + 1):\n        last_digit *= i % 10\n        last_digit %= 10  # Keep only the last digit\n    \n    return last_digit\n\n# Example usage:\nprint(compute_last_digit(3, 5))  # Output should be 2\nprint(compute_last_digit(4, 6))  # Output should be 0\nprint(compute_last_digit(2, 3))  # Output should be 3\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwxn8x685.py\", line 16, in <module>\n    assert compute_last_digit(6,8) == 6\nAssertionError", "passed": false}
{"task_id": 51, "completion": "def check_equilateral(a, b, c):\n    # Check if all sides are equal\n    if a == b == c:\n        print(\"The triangle is equilateral.\")\n    else:\n        print(\"The triangle is not equilateral.\")\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_eiurxf1.py\", line 7, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    return base * height\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(s):\n    return s[0] == s[-1] if s else False\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpw0xjuu79.py\", line 3, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def reverse_number(n):\n    \"\"\"Helper function to reverse the digits of a number.\"\"\"\n    return int(str(n)[::-1])\n\ndef check(num):\n    reversed_num = reverse_number(num)\n    # Calculate twice the reversed number minus one\n    calculated_value = 2 * reversed_num - 1\n    # Check if the original number matches the calculated value\n    return num == calculated_value\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 58, "completion": "def opposite_signs(a, b):\n    return (a > 0) != (b > 0)\n", "requirement": "Code Complexity", "result": "passed", "passed": true}

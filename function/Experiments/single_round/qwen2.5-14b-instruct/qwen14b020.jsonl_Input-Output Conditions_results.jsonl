{"task_id": 14, "completion": "def find_volume(base_area, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    - base_area (float or int): The area of the triangular base.\n    - height (float or int): The height of the triangular base.\n    - length (float or int): The length of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    # Ensure all inputs are positive\n    if base_area <= 0 or height <= 0 or length <= 0:\n        raise ValueError(\"All input values must be positive.\")\n    \n    # Calculate the volume\n    volume = base_area * length\n    \n    return volume\n\n# Example usage:\nprint(find_volume(10, 5, 2))  # Should print 20.0\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqr2yvoy6.py\", line 10, in <module>\n    assert find_volume(10,8,6) == 240\nAssertionError", "passed": false}
{"task_id": 15, "completion": "def split_lowerstring(input_string):\n    # Initialize an empty list to store the result\n    result = []\n    # Initialize an empty string to build up the current segment\n    current_segment = \"\"\n    \n    for char in input_string:\n        # Check if the character is lowercase\n        if char.islower():\n            # If current_segment is not empty, it means we have reached a lowercase letter\n            # after collecting some characters, so we add the current segment to the result.\n            if current_segment:\n                result.append(current_segment)\n                # Reset current_segment as we start a new segment\n                current_segment = \"\"\n        # Append the current character to the current segment\n        current_segment += char\n    \n    # Add the last collected segment to the result\n    if current_segment:\n        result.append(current_segment)\n    \n    return result\n\n# Example usage:\nprint(split_lowerstring(\"aBcDeFgHiJkL\"))\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpfrsgpl5l.py\", line 23, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    # Define the regex pattern for sequences of lowercase letters joined by an underscore\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    \n    # Search for the pattern in the provided text\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\nprint(text_lowercase_underscore(\"example_text\"))  # Should return 'Found a match!'\nprint(text_lowercase_underscore(\"ExampleText\"))   # Should return 'Not matched!'\nprint(text_lowercase_underscore(\"text_example\"))  # Should return 'Found a match!'\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square given its side length.\n    \n    Parameters:\n    side_length (int): The length of a side of the square. Must be a non-negative integer.\n    \n    Returns:\n    int: The perimeter of the square.\n    \n    Raises:\n    ValueError: If the input is not a non-negative integer.\n    \"\"\"\n    if not isinstance(side_length, int) or side_length < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    return 4 * side_length\n\n# Example usage:\ntry:\n    print(square_perimeter(5))  # Expected output: 20\n    print(square_perimeter(-1)) # This will raise a ValueError\nexcept ValueError as e:\n    print(e)\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(str1, str2):\n    # Check if both strings contain only alphabetic characters\n    if not (str1.isalpha() and str2.isalpha()):\n        raise ValueError('Input strings must only contain alphabetic characters.')\n    \n    # Remove characters from str1 that are present in str2\n    result = ''.join([char for char in str1 if char not in str2])\n    \n    return result\n\n# Example usage:\ntry:\n    print(remove_dirty_chars(\"hello\", \"world\"))  # Expected output: \"heo\"\nexcept ValueError as e:\n    print(e)\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 19, "completion": "def test_duplicate(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Convert the list to a set and compare lengths\n    return len(arr) != len(set(arr))\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(num):\n    if num < 0:\n        return False  # Woodall numbers are positive\n    \n    n = 1\n    while True:\n        woodall_num = n * (2 ** n) - 1\n        if woodall_num == num:\n            return True\n        elif woodall_num > num:\n            break\n        n += 1\n    return False\n\n# Example usage:\nprint(is_woodall(7))   # True, because 7 = 2*2^2 - 1\nprint(is_woodall(15))  # True, because 15 = 3*2^3 - 1\nprint(is_woodall(23))  # False\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists):\n    \"\"\"\n    This function takes a list of lists of integers as input and returns the maximum sum of elements from any sublist.\n    \n    :param list_of_lists: List of lists containing integers\n    :return: Integer representing the maximum sum of elements from any sublist\n    \"\"\"\n    # Initialize a variable to keep track of the maximum sum found so far\n    max_sum = float('-inf')\n    \n    # Iterate over each sublist in the list of lists\n    for sublist in list_of_lists:\n        # Calculate the sum of the current sublist\n        current_sum = sum(sublist)\n        \n        # Update the maximum sum if the current sum is greater than the previously recorded maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    # Return the maximum sum found\n    return max_sum\n\n# Example usage:\nexample_list_of_lists = [[1, 2, 3], [4, 5, 6], [10, -1, 2]]\nprint(maximum_sum(example_list_of_lists))  # Output should be 15 (from the sublist [4, 5, 6])\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 25, "completion": "from collections import Counter\n\ndef find_product(arr):\n    # Count the frequency of each element in the array\n    freq = Counter(arr)\n    \n    # Filter out elements that occur more than once\n    non_repeated_elements = [num for num, count in freq.items() if count == 1]\n    \n    # Calculate the product of the non-repeated elements\n    product = 1\n    for num in non_repeated_elements:\n        product *= num\n    \n    return product\n\n# Example usage:\narr = [4, 5, 4, 6, 7, 8, 8]\nprint(find_product(arr))  # Output should be 5 * 6 * 7 = 210\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmptzmkydg5.py\", line 15, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(tuples_list, k):\n    \"\"\"\n    Check if each tuple in the given list has exactly k elements.\n\n    :param tuples_list: List of tuples to be checked.\n    :param k: Integer representing the exact number of elements each tuple should have.\n    :return: Boolean value indicating whether all tuples in the list contain exactly k elements.\n    \"\"\"\n    # Check each tuple in the list\n    for t in tuples_list:\n        if len(t) != k:\n            return False\n    return True\n\n# Example usage\nexample_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nk = 3\nprint(check_k_elements(example_list, k))  # Output: True\n\nexample_list = [(1, 2, 3), (4, 5), (7, 8, 9)]\nprint(check_k_elements(example_list, k))  # Output: False\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpr7vjo4jk.py\", line 13, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 28, "completion": "def binomial_coeff(n, k):\n    \"\"\"\n    Calculate the binomial coefficient (n choose k).\n    \n    Parameters:\n    n (int): Non-negative integer representing the total number of items.\n    k (int): Non-negative integer representing the number of items to choose.\n    \n    Returns:\n    int: The binomial coefficient.\n    \"\"\"\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    \n    # Optimization: Take advantage of symmetry, binomial(n, k) == binomial(n, n-k)\n    if k > n - k:\n        k = n - k\n    \n    result = 1\n    for i in range(1, k + 1):\n        result *= n - (k - i)\n        result //= i\n    \n    return result\n\n# Example usage:\nprint(binomial_coeff(5, 2))  # Output: 10\nprint(binomial_coeff(10, 3)) # Output: 120\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    \"\"\"\n    Counts all substrings starting and ending with the same character in the given string s.\n    \n    :param s: Input string\n    :type s: str\n    :return: Count of substrings starting and ending with the same character\n    :rtype: int\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        # For each character, count all substrings starting and ending with it\n        count += len(s) - i\n    return count\n\n# Example usage:\nprint(count_substring_with_equal_ends(\"abc\"))  # Output: 3\nprint(count_substring_with_equal_ends(\"aaa\"))  # Output: 6\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpi7_a3z3t.py\", line 10, in <module>\n    assert count_substring_with_equal_ends(\"abc\") == 3\nAssertionError", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    # Initialize the smallest prime factor\n    factor = 2\n    last_factor = 1\n    \n    # Divide n by 2 until it's odd\n    while n % factor == 0:\n        last_factor = factor\n        n //= factor\n    \n    # Check for odd factors from 3 onwards\n    factor = 3\n    max_factor = int(n**0.5) + 1  # Upper bound for checking factors\n    while factor <= max_factor:\n        while n % factor == 0:\n            last_factor = factor\n            n //= factor\n        factor += 2\n    \n    # If n is a prime number greater than 2\n    if n > 1:\n        last_factor = n\n    \n    return last_factor\n\n# Example usage:\nprint(max_prime_factors(13195))  # Output: 29\nprint(max_prime_factors(600851475143))  # Output: 6857\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 35, "completion": "def find_rect_num(n):\n    \"\"\"\n    Finds the n-th rectangular number.\n    \n    Args:\n    n (int): The position in the sequence of rectangular numbers.\n    \n    Returns:\n    int: The n-th rectangular number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    return n * (n + 1)\n\n# Example usage:\nprint(find_rect_num(0))  # Output: 0\nprint(find_rect_num(1))  # Output: 2\nprint(find_rect_num(2))  # Output: 6\nprint(find_rect_num(3))  # Output: 12\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator, n):\n    # Handle edge cases where the fraction is an integer\n    if numerator % denominator == 0:\n        return 0\n    \n    # Initialize variables\n    quotient, remainder = divmod(numerator, denominator)\n    decimal_digits = []\n    \n    # Dictionary to detect repeating sequences\n    seen_remainders = {}\n    \n    # Loop to find the nth digit\n    while len(decimal_digits) < n and remainder != 0:\n        # If we've seen this remainder before, there's a repeating sequence\n        if remainder in seen_remainders:\n            start_repeat = seen_remainders[remainder]\n            non_repeating = ''.join(map(str, decimal_digits[:start_repeat]))\n            repeating = ''.join(map(str, decimal_digits[start_repeat:]))\n            repeat_len = len(repeating)\n            return int(repeating[(n - start_repeat - 1) % repeat_len])\n        \n        # Store the position of this remainder\n        seen_remainders[remainder] = len(decimal_digits)\n        \n        # Perform the next division step\n        quotient_digit, remainder = divmod(remainder * 10, denominator)\n        decimal_digits.append(quotient_digit)\n    \n    # If we exited the loop because we reached n digits, return the nth digit\n    if len(decimal_digits) >= n:\n        return decimal_digits[n-1]\n    else:\n        # If we exit due to repeating sequence detected earlier, return the appropriate digit\n        return int(''.join(map(str, decimal_digits))[n])\n\n# Example usage:\nprint(find_nth_digit(1, 2, 3))  # Output: 5\nprint(find_nth_digit(4, 3, 2))  # Output: 3\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmps1nysivu.py\", line 31, in <module>\n    print(find_nth_digit(1, 2, 3))  # Output: 5\n  File \"/tmp/tmps1nysivu.py\", line 29, in find_nth_digit\n    return int(''.join(map(str, decimal_digits))[n])\nIndexError: string index out of range", "passed": false}
{"task_id": 38, "completion": "def div_even_odd(numbers):\n    \"\"\"\n    Finds the division of the first even number by the first odd number in the given list.\n    \n    Parameters:\n    numbers (list): A list of integers.\n    \n    Returns:\n    float: The division of the first even number by the first odd number.\n           If either an even or odd number is not found, returns None.\n    \"\"\"\n    first_even = None\n    first_odd = None\n    \n    for num in numbers:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is None or first_odd is None:\n        return None\n    \n    return first_even / first_odd\n\n# Example usage:\nprint(div_even_odd([5, 3, 2, 8]))  # Output should be 2/3 or approximately 0.6667\nprint(div_even_odd([10, 15, 20]))  # Output should be 10/15 or 0.6667\nprint(div_even_odd([1, 3, 5]))     # Output should be None because there's no even number\nprint(div_even_odd([2, 4, 6]))     # Output should be None because there's no odd number\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 39, "completion": "from collections import Counter\nimport heapq\n\ndef rearrange_string(s):\n    # Step 1: Count the frequency of each character\n    char_count = Counter(s)\n    \n    # Step 2: Create a max heap based on the frequency of characters\n    max_heap = [(-count, char) for char, count in char_count.items()]\n    heapq.heapify(max_heap)\n    \n    # Initialize the result string and the last used character\n    result = []\n    last_used = None\n    \n    while max_heap:\n        # Pop the most frequent character\n        count, char = heapq.heappop(max_heap)\n        \n        # If the most frequent character is the same as the last used one,\n        # pop the next most frequent character\n        if char == last_used:\n            if not max_heap:\n                # If there are no more characters left in the heap, it means\n                # we cannot rearrange the string to meet the condition\n                return \"\"\n            count_next, char_next = heapq.heappop(max_heap)\n            result.append(char_next)\n            if count_next < -1:\n                heapq.heappush(max_heap, (count_next + 1, char_next))\n            last_used = char_next\n            heapq.heappush(max_heap, (count, char))\n        else:\n            result.append(char)\n            last_used = char\n            if count < -1:\n                heapq.heappush(max_heap, (count + 1, char))\n    \n    # Join the list into a string and return\n    return ''.join(result)\n\n# Example usage:\nprint(rearrange_string(\"aab\"))  # Output could be \"aba\"\nprint(rearrange_string(\"aaab\")) # Output will be \"\", because it's impossible to rearrange\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpctez59kx.py\", line 38, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 42, "completion": "from collections import Counter\n\ndef find_sum(arr):\n    # Count the frequency of each element in the array\n    freq = Counter(arr)\n    \n    # Calculate the sum of elements that appear more than once\n    repeated_sum = sum(key * value for key, value in freq.items() if value > 1)\n    \n    return repeated_sum\n\n# Example usage:\nprint(find_sum([1, 2, 3, 2, 3, 4]))  # Output should be 5 (2+3)\nprint(find_sum([1, 2, 3, 4]))        # Output should be 0 (no duplicates)\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpuvg_nyza.py\", line 11, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    # Define the regex pattern for sequences of lowercase letters joined by an underscore\n    pattern = r'\\b[a-z]+\\_[a-z]+\\b'\n    \n    # Search for the pattern in the provided text\n    if re.search(pattern, text):\n        return re.search(pattern, text).group()\n    else:\n        return 'Not matched!'\n\n# Test cases\nprint(text_match(\"abc_def\"))  # Should match and return \"abc_def\"\nprint(text_match(\"hello_world\"))  # Should match and return \"hello_world\"\nprint(text_match(\"ABC_def\"))  # Should not match and return \"Not matched!\"\nprint(text_match(\"no_underscore_here\"))  # Should not match and return \"Not matched!\"\nprint(text_match(\"_separated_by_underscores\"))  # Should not match and return \"Not matched!\"\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmr1vdjtd.py\", line 16, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 46, "completion": "def test_distinct(numbers):\n    \"\"\"\n    Determines if all numbers in the list are distinct.\n    \n    Args:\n    - numbers (list): A list of integers.\n    \n    Returns:\n    - bool: True if all numbers are distinct, False otherwise.\n    \"\"\"\n    return len(numbers) == len(set(numbers))\n\n# Example usage:\nprint(test_distinct([1, 2, 3, 4]))  # Should return True\nprint(test_distinct([1, 2, 2, 3]))  # Should return False\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 48, "completion": "def odd_bit_set_number(n):\n    # Create a mask with 1s in all odd positions\n    mask = int('10101010101010101010101010101010', 2)\n    \n    # Apply the mask to the input number using bitwise OR\n    result = n | mask\n    \n    return result\n\n# Example usage:\nprint(bin(odd_bit_set_number(0b10110)))  # Output will be 0b10111\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpk05vn6vy.py\", line 9, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(two_dim_list, index):\n    \"\"\"\n    Extracts elements at a specified index from each sublist in a two-dimensional list.\n    \n    Parameters:\n    - two_dim_list: A two-dimensional list (list of lists).\n    - index: An integer representing the index of the element to extract from each sublist.\n    \n    Returns:\n    - A list of elements extracted from each sublist at the specified index.\n    If the input list is empty, returns an empty list.\n    \"\"\"\n    # Check if the list is empty\n    if not two_dim_list:\n        return []\n    \n    # Extract elements at the specified index\n    result = [sublist[index] for sublist in two_dim_list if index < len(sublist)]\n    \n    return result\n\n# Example usage:\nexample_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nindex_to_extract = 1\nprint(specified_element(example_list, index_to_extract))  # Output: [2, 5, 8]\n\nempty_list = []\nprint(specified_element(empty_list, 0))  # Output: []\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 50, "completion": "def min_length_list(list_of_lists):\n    # Find the sublist with the minimum length using the len function as the key\n    shortest_list = min(list_of_lists, key=lambda x: len(x))\n    # Return a tuple containing the length of the shortest list and the list itself\n    return (len(shortest_list), shortest_list)\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]\nresult = min_length_list(list_of_lists)\nprint(result)  # Output will be (1, [6])\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram given its base and height.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram.\n    \"\"\"\n    if base <= 0 or height <= 0:\n        raise ValueError(\"Base and height must be positive numbers.\")\n    \n    return base * height\n\n# Example usage:\nbase = 10\nheight = 5\nprint(f\"The area of the parallelogram with base {base} and height {height} is {parallelogram_area(base, height)}\")\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpj2b10ral.py\", line 13, in <module>\n    assert parallelogram_area(0, 10) == 0\n  File \"/tmp/tmpj2b10ral.py\", line 3, in parallelogram_area\n    raise ValueError(\"Base and height must be positive numbers.\")\nValueError: Base and height must be positive numbers.", "passed": false}
{"task_id": 53, "completion": "def check_equality(s):\n    \"\"\"\n    This function checks if the first and last characters of a given string are equal.\n    \n    Parameters:\n    s (str): The input string to be checked.\n    \n    Returns:\n    str: 'Equal' if the first and last characters are the same, 'Not Equal' otherwise.\n    \"\"\"\n    # Check if the input is a string and has at least one character\n    if not isinstance(s, str) or len(s) == 0:\n        raise ValueError(\"Input must be a non-empty string.\")\n    \n    # Compare the first and last character\n    if s[0] == s[-1]:\n        return 'Equal'\n    else:\n        return 'Not Equal'\n\n# Example usage:\nprint(check_equality(\"radar\"))  # Should print \"Equal\"\nprint(check_equality(\"hello\"))  # Should print \"Not Equal\"\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 54, "completion": "def counting_sort(arr):\n    # Check if the input is empty or contains only one element\n    if not arr:\n        return []\n    \n    # Find the maximum value in the array to determine the size of the count array\n    max_val = max(arr)\n    \n    # Initialize the count array with zeros\n    count = [0] * (max_val + 1)\n    \n    # Populate the count array with the frequency of each element in the input array\n    for num in arr:\n        count[num] += 1\n    \n    # Construct the sorted array from the count array\n    sorted_arr = []\n    for i, cnt in enumerate(count):\n        sorted_arr.extend([i] * cnt)\n    \n    return sorted_arr\n\n# Example usage:\nexample_array = [4, 2, 2, 8, 3, 3, 1]\nsorted_array = counting_sort(example_array)\nprint(sorted_array)  # Output should be [1, 2, 2, 3, 3, 4, 8]\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 57, "completion": "def find_max_num(digits, num_digits):\n    # Sort the digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n    \n    # Take the first num_digits from the sorted list\n    selected_digits = sorted_digits[:num_digits]\n    \n    # Convert the list of digits back to an integer\n    max_number = int(''.join(map(str, selected_digits)))\n    \n    return max_number\n\n# Example usage:\nprint(find_max_num([4, 6, 2, 7, 9], 3))  # Output should be 976\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 58, "completion": "def opposite_signs(a: int, b: int) -> bool:\n    \"\"\"\n    Checks if two integers have opposite signs.\n\n    Parameters:\n    a (int): First integer.\n    b (int): Second integer.\n\n    Returns:\n    bool: True if the integers have opposite signs, False otherwise.\n    \"\"\"\n    # Check if the product of the two numbers is negative\n    return (a > 0 and b < 0) or (a < 0 and b > 0)\n\n# Example usage:\nprint(opposite_signs(10, -5))  # Output: True\nprint(opposite_signs(-3, -2))  # Output: False\nprint(opposite_signs(0, 5))    # Output: False (0 does not have a sign)\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 60, "completion": "def max_len_sub(arr, diff):\n    \"\"\"\n    Finds the maximum length of a subsequence where the absolute difference\n    between adjacent elements is exactly diff.\n\n    :param arr: List[int] - The input array of integers.\n    :param diff: int - The required difference between adjacent elements.\n    :return: int - The maximum length of the subsequence meeting the criteria.\n    \"\"\"\n    # Dictionary to store the length of the longest subsequence ending at each element\n    dp = {}\n    \n    max_length = 0\n    \n    for num in arr:\n        # If there is a previous number in the sequence that satisfies the condition\n        prev_num = num - diff\n        if prev_num in dp:\n            # Extend the subsequence length by one\n            dp[num] = dp[prev_num] + 1\n        else:\n            # Start a new subsequence\n            dp[num] = 1\n        \n        # Update the maximum length found so far\n        max_length = max(max_length, dp[num])\n    \n    return max_length\n\n# Example usage:\narr = [1, 5, 9, 13, 17]\ndiff = 4\nprint(max_len_sub(arr, diff))  # Output: 5\n\narr = [1, 3, 5, 7, 9]\ndiff = 2\nprint(max_len_sub(arr, diff))  # Output: 5\n\narr = [10, 8, 6, 4, 2]\ndiff = -2\nprint(max_len_sub(arr, diff))  # Output: 5\n\narr = [1, 3, 6, 10, 5, 9, 13]\ndiff = 2\nprint(max_len_sub(arr, diff))  # Output: 4\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1r1wxlnb.py\", line 30, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nAssertionError", "passed": false}

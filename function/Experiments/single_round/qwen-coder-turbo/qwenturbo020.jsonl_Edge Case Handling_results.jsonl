{"task_id": 11, "completion": "def remove_occ(s, char):\n    # Find the index of the first occurrence of the character\n    first_index = s.find(char)\n    \n    # Find the index of the last occurrence of the character\n    last_index = s.rfind(char)\n    \n    # Check if the character exists in the string\n    if first_index == -1:\n        return s\n    \n    # Create a new string without the first and last occurrence of the character\n    new_string = s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]\n    \n    return new_string\n\n# Example usage:\nprint(remove_occ(\"hello world\", \"o\"))  # Output: \"hell wrld\"\nprint(remove_occ(\"banana\", \"a\"))     # Output: \"bnnan\"\nprint(remove_occ(\"apple\", \"z\"))      # Output: \"apple\" (character not found)\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 12, "completion": "def sort_matrix(matrix):\n    # Check if the matrix is empty\n    if not matrix:\n        return []\n    \n    # Sort the matrix based on the sum of each row\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    \n    return sorted_matrix\n\n# Example usage:\nmatrix = [\n    [3, 2, 1],\n    [6, 5, 4],\n    [9, 8, 7]\n]\n\nsorted_matrix = sort_matrix(matrix)\nprint(sorted_matrix)  # Output: [[3, 2, 1], [6, 5, 4], [9, 8, 7]]\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 13, "completion": "from collections import Counter\n\ndef count_common(words):\n    if not words:\n        return []\n    \n    # Count the occurrences of each word\n    word_counts = Counter(words)\n    \n    # Find the maximum occurrence count\n    max_count = max(word_counts.values(), default=0)\n    \n    # Collect all words with the maximum count\n    most_common_words = [word for word, count in word_counts.items() if count == max_count]\n    \n    return most_common_words\n\n# Example usage:\nwords_list = [\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\"]\nprint(count_common(words_list))  # Output: ['apple']\n\nempty_list = []\nprint(count_common(empty_list))  # Output: []\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0rvb01hk.py\", line 17, in <module>\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nAssertionError", "passed": false}
{"task_id": 14, "completion": "def find_volume(base, height, length):\n    # Check if any of the dimensions are non-positive\n    if base <= 0 or height <= 0 or length <= 0:\n        raise ValueError(\"All dimensions must be greater than zero.\")\n    \n    # Calculate the volume\n    volume = 0.5 * base * height * length\n    \n    return volume\n\n# Example usage:\ntry:\n    print(find_volume(3, 4, 5))  # Expected output: 30.0\n    print(find_volume(0.1, 0.2, 0.3))  # Expected output: 0.003\n    print(find_volume(-1, 2, 3))  # This will raise an error\nexcept ValueError as e:\n    print(e)\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 15, "completion": "def split_lowerstring(s):\n    # Initialize variables\n    result = []\n    current_substring = \"\"\n    \n    for char in s:\n        if char.islower():\n            if current_substring:\n                result.append(current_substring)\n            current_substring = char\n        else:\n            current_substring += char\n    \n    if current_substring:\n        result.append(current_substring)\n    \n    return result\n\n# Example usage:\ninput_string = \"HelloWorld\"\nprint(split_lowerstring(input_string))  # Output: ['Hello', 'World']\n\ninput_string_no_lowercase = \"HELLOWORLD\"\nprint(split_lowerstring(input_string_no_lowercase))  # Output: []\n\ninput_string_with_spaces = \"Hello World\"\nprint(split_lowerstring(input_string_with_spaces))  # Output: ['Hello', 'World']\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpebqa5m9i.py\", line 22, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    # Define the pattern for lowercase letters joined with an underscore\n    pattern = r'^[a-z]+_[a-z]+$'\n    \n    # Check if the input text matches the pattern\n    if not text:\n        return 'Not matched!'\n    elif re.match(pattern, text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'\n\n# Test cases\nprint(text_lowercase_underscore('hello_world'))  # Matched!\nprint(text_lowercase_underscore('Hello_world'))  # Not matched!\nprint(text_lowercase_underscore('helloWorld'))   # Not matched!\nprint(text_lowercase_underscore('hello_world_2'))  # Not matched!\nprint(text_lowercase_underscore(''))  # Not matched!\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpw837fo6f.py\", line 18, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    return 4 * side_length\n\n# Example usage:\ntry:\n    print(square_perimeter(5))  # Output: 20\n    print(square_perimeter(0))  # Output: 0\n    print(square_perimeter(-3)) # This will raise an error\nexcept ValueError as e:\n    print(e)\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(main_str, dirty_chars):\n    if not dirty_chars:\n        return main_str\n    \n    # Create a set of characters to be removed for faster lookup\n    dirty_set = set(dirty_chars)\n    \n    # Build a new string with characters not in the dirty_set\n    cleaned_str = ''.join(char for char in main_str if char not in dirty_set)\n    \n    return cleaned_str\n\n# Example usage:\noriginal_string = \"hello world\"\ndirty_characters = \"ad\"\nresult = remove_dirty_chars(original_string, dirty_characters)\nprint(result)  # Output: \"hello worl\"\n\nempty_dirty_chars = \"\"\nresult_empty = remove_dirty_chars(original_string, empty_dirty_chars)\nprint(result_empty)  # Output: \"hello world\"\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 19, "completion": "def test_duplicate(arr):\n    \"\"\"\n    Function to check if a given array of integers contains any duplicate elements.\n    \n    Args:\n    arr (list): The list of integers to check for duplicates.\n    \n    Returns:\n    bool: True if there is at least one duplicate element, False otherwise.\n    \"\"\"\n    # Edge case handling for empty list or single element list\n    if len(arr) <= 1:\n        return False\n    \n    # Using a set to track seen elements\n    seen = set()\n    \n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    \n    return False\n\n# Test cases\nprint(test_duplicate([]))  # Should return False\nprint(test_duplicate([5]))  # Should return False\nprint(test_duplicate([1, 2, 3, 4, 5]))  # Should return False\nprint(test_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]))  # Should return False\nprint(test_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1]))  # Should return True\nprint(test_duplicate([1, 2, 3, 4, 5, 2]))  # Should return True\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(num):\n    # Handle edge case: num must be odd and greater than 0\n    if num <= 0 or num % 2 == 0:\n        return False\n    \n    # Start with n = 1 and try to find a match\n    n = 1\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number > num:\n            return False\n        elif woodall_number == num:\n            return True\n        n += 1\n\n# Test cases\nprint(is_woodall(7))   # True (3 * 2^3 - 1)\nprint(is_woodall(15))  # False\nprint(is_woodall(8))   # False\nprint(is_woodall(0))   # False\nprint(is_woodall(-1))  # False\nprint(is_woodall(47))  # True (23 * 2^23 - 1)\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 21, "completion": "def multiples_of_num(m, n):\n    if m == 0:\n        return []\n    \n    multiples = []\n    for i in range(1, m + 1):\n        multiples.append(i * n)\n    \n    return multiples\n\n# Example usage:\nprint(multiples_of_num(5, 3))  # Output: [3, 6, 9, 12, 15]\nprint(multiples_of_num(0, 7))  # Output: []\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 22, "completion": "def find_first_duplicate(arr):\n    if not arr:\n        return -1\n    \n    seen = set()\n    \n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    \n    return -1\n\n# Example usage:\narr1 = [1, 2, 3, 2, 5]\nprint(find_first_duplicate(arr1))  # Output: 2\n\narr2 = [1, 2, 3, 4, 5]\nprint(find_first_duplicate(arr2))  # Output: -1\n\narr3 = []\nprint(find_first_duplicate(arr3))  # Output: -1\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists):\n    # Check if the input list is empty\n    if not list_of_lists:\n        return 0\n    \n    # Initialize the maximum sum to a very small number (negative infinity)\n    max_sum = float('-inf')\n    \n    # Iterate through each sublist\n    for sublist in list_of_lists:\n        # Check if the sublist is not empty\n        if sublist:\n            # Calculate the sum of the current sublist\n            current_sum = sum(sublist)\n            # Update the maximum sum if the current sum is greater\n            if current_sum > max_sum:\n                max_sum = current_sum\n    \n    # If no non-empty sublist was found, return 0\n    if max_sum == float('-inf'):\n        return 0\n    \n    return max_sum\n\n# Example usage:\nexample_list = [[1, 2, 3], [4, 5], [], [6]]\nprint(maximum_sum(example_list))  # Output: 15\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 24, "completion": "def binary_to_decimal(binary_str):\n    # Check if the input string is empty\n    if not binary_str:\n        return 0\n    \n    # Initialize the decimal value to 0\n    decimal_value = 0\n    \n    # Iterate over each character in the binary string\n    for i, char in enumerate(reversed(binary_str)):\n        if char == '1':\n            decimal_value += 2 ** i\n    \n    return decimal_value\n\n# Example usage:\nprint(binary_to_decimal(\"101\"))       # Output: 5\nprint(binary_to_decimal(\"1111\"))      # Output: 15\nprint(binary_to_decimal(\"\"))          # Output: 0\nprint(binary_to_decimal(\"10010\"))     # Output: 18\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkpljyiy_.py\", line 17, in <module>\n    assert binary_to_decimal(100) == 4\n  File \"/tmp/tmpkpljyiy_.py\", line 8, in binary_to_decimal\n    for i, char in enumerate(reversed(binary_str)):\nTypeError: 'int' object is not reversible", "passed": false}
{"task_id": 25, "completion": "def find_product(arr):\n    # Check if the input list is empty\n    if not arr:\n        return 1\n    \n    # Create a dictionary to count occurrences of each element\n    element_count = {}\n    \n    for num in arr:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n    \n    # Initialize the product to 1\n    product = 1\n    \n    # Iterate through the dictionary to calculate the product of non-repeated elements\n    for num, count in element_count.items():\n        if count == 1:\n            product *= num\n    \n    return product\n\n# Example usage:\narr = [2, 3, 4, 2, 5]\nprint(find_product(arr))  # Output: 60 (since 3 * 4 * 5 = 60)\n\nempty_arr = []\nprint(find_product(empty_arr))  # Output: 1\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp93o4y453.py\", line 24, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(tuple_list, k):\n    # Check if the list is empty or not\n    if len(tuple_list) == 0:\n        return False\n\n    # Iterate over each tuple in the list\n    for t in tuple_list:\n        # If any tuple doesn't have exactly k elements, return False\n        if len(t) != k:\n            return False\n\n    # If all tuples have exactly k elements, return True\n    return True\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3uvx5jb_.py\", line 12, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "completion": "def remove(strings):\n    result = []\n    \n    for string in strings:\n        new_string = ''.join([char for char in string if not char.isdigit()])\n        result.append(new_string)\n        \n    return result\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 28, "completion": "import math\n\ndef binomial_coeff(n, k):\n    # Handle edge cases\n    if n < 0 or k < 0:\n        raise ValueError(\"Both n and k must be non-negative integers.\")\n    \n    if n == 0 or k == 0:\n        return 1\n    \n    if k > n:\n        return 0\n    \n    # Use the property C(n, k) = C(n, n-k) to minimize computations\n    if k > n - k:\n        k = n - k\n    \n    # Calculate the binomial coefficient using the factorial function\n    numerator = math.factorial(n)\n    denominator = math.factorial(k) * math.factorial(n - k)\n    \n    return numerator // denominator\n\n# Example usage:\nprint(binomial_coeff(5, 2))  # Output: 10\nprint(binomial_coeff(6, 3))  # Output: 20\nprint(binomial_coeff(0, 0))  # Output: 1\nprint(binomial_coeff(4, 0))  # Output: 1\nprint(binomial_coeff(4, 4))  # Output: 1\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 29, "completion": "def get_odd_occurrence(arr):\n    if not arr:\n        return None\n    \n    # Create a dictionary to store the count of each element\n    count_dict = {}\n    \n    # Iterate through the array and populate the count dictionary\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Iterate through the dictionary to find the element with an odd count\n    for num, count in count_dict.items():\n        if count % 2 != 0:\n            return num\n    \n    # If no such element is found (though the problem guarantees one), return None\n    return None\n\n# Example usage:\narr = [20, 1, 1, 2, 2]\nprint(get_odd_occurrence(arr))  # Output: 20\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6de62vdp.py\", line 21, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    if not s:\n        return 0\n    \n    count = 0\n    n = len(s)\n    \n    # Iterate over all possible lengths of substrings\n    for length in range(1, n + 1):\n        # Iterate over all starting points of substrings\n        for start in range(n - length + 1):\n            substring = s[start:start + length]\n            if substring[0] == substring[-1]:\n                count += 1\n                \n    return count\n\n# Example usage:\ninput_string = \"abcab\"\nprint(count_substring_with_equal_ends(input_string))  # Output: 7\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 31, "completion": "import heapq\n\ndef func(lists, k):\n    # Initialize an empty dictionary to store the frequency of each number\n    freq = {}\n\n    # Iterate over each list in the input lists\n    for lst in lists:\n        # If the list is not empty\n        if lst:\n            # Get the first element of the list (since it's sorted)\n            num = lst[0]\n            \n            # If the number is already in the frequency dictionary\n            if num in freq:\n                # Increment its frequency\n                freq[num] += 1\n            else:\n                # Otherwise, add it to the dictionary with a frequency of 1\n                freq[num] = 1\n    \n    # Use a min-heap to keep track of the top k frequent numbers\n    min_heap = []\n\n    # Iterate over each item in the frequency dictionary\n    for num, count in freq.items():\n        # If the heap has less than k elements, push the current item onto the heap\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, (count, num))\n        # Otherwise, if the current item's frequency is greater than the smallest frequency in the heap,\n        elif count > min_heap[0][0]:\n            # Pop the smallest frequency item from the heap and push the current item onto the heap\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (count, num))\n\n    # Extract the numbers from the heap and sort them in descending order\n    result = [num for count, num in sorted(min_heap, reverse=True)]\n\n    # Return the result\n    return result\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpj7nfxrt1.py\", line 34, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    # Initialize the smallest prime number\n    largest_prime = -1\n    \n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n    \n    # n must be odd at this point, so we can skip one element (Note i = i + 2)\n    for i in range(3, int(n**0.5) + 1, 2):\n        # While i divides n, save i and divide n\n        while n % i == 0:\n            largest_prime = i\n            n //= i\n    \n    # This condition is to handle the case when n is a prime number greater than 2\n    if n > 2:\n        largest_prime = n\n    \n    return largest_prime\n\n# Example usage:\nprint(max_prime_factors(10))  # Output: 5\nprint(max_prime_factors(13195))  # Output: 29\nprint(max_prime_factors(600851475143))  # Output: 6857\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(decimal):\n    \"\"\"\n    Convert a decimal number to binary.\n    \n    Parameters:\n    - decimal (int): The decimal number to convert.\n    \n    Returns:\n    - str: The binary representation of the decimal number.\n    \"\"\"\n    if decimal == 0:\n        return \"0\"\n    \n    binary = \"\"\n    while decimal > 0:\n        remainder = decimal % 2\n        binary = str(remainder) + binary\n        decimal = decimal // 2\n    \n    return binary\n\n# Example usage:\nprint(decimal_to_binary(0))   # Output: \"0\"\nprint(decimal_to_binary(5))   # Output: \"101\"\nprint(decimal_to_binary(10))  # Output: \"1010\"\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3j54c_u_.py\", line 14, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "completion": "def find_missing(arr):\n    \"\"\"\n    Find the missing number in a sorted array.\n    \n    Args:\n    arr (list): A sorted list of integers with one missing number.\n    \n    Returns:\n    int: The missing number or -1 if no number is missing.\n    \"\"\"\n    if not arr:\n        return -1\n    \n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        # Check if the element at mid is equal to its index plus the first element\n        if arr[mid] == arr[0] + mid:\n            # If it is, the missing number must be on the right side\n            left = mid + 1\n        else:\n            # If it is not, the missing number could be on the left side or at mid\n            right = mid - 1\n    \n    # If left is out of bounds, it means the missing number is the smallest possible number\n    if left >= len(arr):\n        return arr[0]\n    \n    # Otherwise, the missing number is between arr[left-1] and arr[left]\n    return arr[0] + left\n\n# Example usage:\narr = [3, 4, 5, 7, 8, 9]\nprint(find_missing(arr))  # Output: 6\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpon6p2lx5.py\", line 22, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    if n == 1:\n        return 1\n    elif n < 1:\n        raise ValueError(\"The input must be a positive integer.\")\n    else:\n        return n\n\n# Example usage:\nprint(find_rect_num(1))  # Output: 1\nprint(find_rect_num(2))  # Output: 2\nprint(find_rect_num(3))  # Output: 3\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpd8d58yrr.py\", line 12, in <module>\n    assert find_rect_num(4) == 20\nAssertionError", "passed": false}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator):\n    # Handle the case where the numerator is zero\n    if numerator == 0:\n        return 0\n    \n    # Initialize variables\n    digits = []\n    remainder = numerator % denominator\n    \n    # Dictionary to store remainders and their corresponding positions\n    seen_remainders = {}\n    \n    # Position in the decimal part\n    position = 0\n    \n    while remainder != 0:\n        # Check if we have encountered this remainder before\n        if remainder in seen_remainders:\n            start = seen_remainders[remainder]\n            non_repeating = ''.join(map(str, digits[:start]))\n            repeating = ''.join(map(str, digits[start:position]))\n            break\n        \n        # Store the position of this remainder\n        seen_remainders[remainder] = position\n        \n        # Perform the division\n        remainder *= 10\n        digit = remainder // denominator\n        digits.append(digit)\n        \n        # Update the remainder\n        remainder %= denominator\n        \n        # Move to the next position\n        position += 1\n    \n    # If there was no repeating sequence, convert the list of digits to a string\n    if 'repeating' not in locals():\n        decimal_part = ''.join(map(str, digits))\n        non_repeating = decimal_part\n        repeating = ''\n    \n    # Get the n-th digit (1-based index)\n    if n <= len(non_repeating):\n        return int(non_repeating[n-1])\n    elif n > len(non_repeating) + len(repeating):\n        return -1  # Indicates that n is beyond the length of the decimal representation\n    else:\n        return int(repeating[n-len(non_repeating)-1])\n\n# Example usage:\nprint(find_nth_digit(1, 3))  # Output: 3 (since 1/3 = 0.333...)\nprint(find_nth_digit(2, 7))  # Output: 8 (since 2/7 = 0.285714285714...)\nprint(find_nth_digit(0, 5))  # Output: 0 (since 0/5 = 0)\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpps6bce1q.py\", line 42, in <module>\n    print(find_nth_digit(1, 3))  # Output: 3 (since 1/3 = 0.333...)\n  File \"/tmp/tmpps6bce1q.py\", line 35, in find_nth_digit\n    if n <= len(non_repeating):\nNameError: name 'n' is not defined", "passed": false}
{"task_id": 37, "completion": "def sort_mixed_list(mixed_list):\n    # Separate integers and strings into two lists\n    int_list = [item for item in mixed_list if isinstance(item, int)]\n    str_list = [item for item in mixed_list if isinstance(item, str)]\n    \n    # Sort the integer list and string list\n    int_list.sort()\n    str_list.sort()\n    \n    # Concatenate the sorted lists\n    sorted_list = int_list + str_list\n    \n    return sorted_list\n\n# Example usage:\nmixed_list = [3, \"apple\", 1, \"banana\", 2, \"cherry\"]\nsorted_list = sort_mixed_list(mixed_list)\nprint(sorted_list)  # Output: [1, 2, 3, 'apple', 'banana', 'cherry']\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 38, "completion": "def div_even_odd(numbers):\n    # Initialize variables to store the first even and odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Iterate through the list to find the first even and odd numbers\n    for num in numbers:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        elif first_odd is None and num % 2 != 0:\n            first_odd = num\n        \n        # Check if both first_even and first_odd have been found\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Check if either first_even or first_odd is still None\n    if first_even is None or first_odd is None:\n        return None  # Return None if either even or odd number is not found\n    \n    # Perform the division\n    result = first_even / first_odd\n    \n    # Handle the case where the first even number is zero\n    if first_even == 0:\n        return 0\n    \n    return result\n\n# Example usage:\nnumbers = [3, 5, 0, 4, 7]\nprint(div_even_odd(numbers))  # Output: 0 (since the first even number is zero)\n\nnumbers = [3, 5, 6, 7, 8]\nprint(div_even_odd(numbers))  # Output: 1.25 (since 6/5 = 1.25)\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 39, "completion": "import heapq\n\ndef rearrange_string(s):\n    # Count the frequency of each character in the string\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Create a max heap based on the count of each character\n    max_heap = []\n    for char, count in char_count.items():\n        heapq.heappush(max_heap, (-count, char))\n    \n    prev_char = None\n    prev_count = 0\n    result = []\n    \n    while max_heap or prev_count != 0:\n        if prev_count != 0:\n            heapq.heappush(max_heap, (prev_count, prev_char))\n        \n        if not max_heap:\n            return \"\"\n        \n        count, char = heapq.heappop(max_heap)\n        result.append(char)\n        prev_char = char\n        prev_count = count + 1\n    \n    return \"\".join(result)\n\n# Test the function\nprint(rearrange_string(\"aab\"))  # \"aba\"\nprint(rearrange_string(\"aaabbc\"))  # \"abcabc\"\nprint(rearrange_string(\"aaabc\"))  # \"\"\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3vjmk7e3.py\", line 31, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "completion": "from collections import Counter\n\ndef freq_element(list_of_lists):\n    # Flatten the list of lists into a single list\n    flattened_list = [item for sublist in list_of_lists for item in sublist]\n    \n    # Use Counter to count the frequency of each element\n    frequency_dict = dict(Counter(flattened_list))\n    \n    return frequency_dict\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [2, 3, 4], [4, 5]]\nprint(freq_element(list_of_lists))  # Output: {1: 1, 2: 2, 3: 2, 4: 2, 5: 1}\n\nempty_list = []\nprint(freq_element(empty_list))  # Output: {}\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 41, "completion": "def filter_evennumbers(numbers):\n    # Check if the input list is empty\n    if not numbers:\n        return []\n    \n    # Use a lambda function to filter even numbers\n    even_numbers = list(filter(lambda x: x % 2 == 0, numbers))\n    \n    return even_numbers\n\n# Example usage:\ninput_list = [1, 2, 3, 4, 5, 6]\nresult = filter_evennumbers(input_list)\nprint(result)  # Output: [2, 4, 6]\n\nempty_list = []\nresult_empty = filter_evennumbers(empty_list)\nprint(result_empty)  # Output: []\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 42, "completion": "def find_sum(arr):\n    # Check if the array is empty\n    if not arr:\n        return 0\n    \n    # Create a dictionary to count occurrences of each element\n    element_count = {}\n    \n    for num in arr:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n    \n    # Calculate the sum of repeated elements (elements that occur more than once)\n    repeated_sum = 0\n    for num, count in element_count.items():\n        if count > 1:\n            repeated_sum += num * count\n    \n    return repeated_sum\n\n# Example usage:\narr = [1, 2, 3, 2, 4, 3, 5]\nprint(find_sum(arr))  # Output: 10 (2 + 3)\n\nempty_arr = []\nprint(find_sum(empty_arr))  # Output: 0\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1vkvdab_.py\", line 23, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    if not text:\n        return 'Not matched!'\n    pattern = r'^[a-z]+_[a-z]+$'\n    if re.search(pattern, text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'\n\n# Test the function\nprint(text_match('hello_world'))  # Matched!\nprint(text_match('Hello_World'))  # Not matched!\nprint(text_match('helloWorld'))   # Not matched!\nprint(text_match('hello_world_2')) # Not matched!\nprint(text_match(''))             # Not matched!\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0hd68b4m.py\", line 16, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 44, "completion": "import re\n\ndef text_match_string(text):\n    pattern = r'^\\w+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4mo923r0.py\", line 8, in <module>\n    assert text_match_string(\" python\")==('Not matched!')\nAssertionError", "passed": false}
{"task_id": 46, "completion": "def test_distinct(numbers):\n    # Edge case: if the list is empty or has only one element, it is considered distinct\n    if len(numbers) <= 1:\n        return True\n    \n    # Use a set to store unique elements\n    seen = set()\n    \n    for number in numbers:\n        if number in seen:\n            return False\n        seen.add(number)\n    \n    return True\n\n# Test cases\nprint(test_distinct([]))  # Should return True (empty list)\nprint(test_distinct([5]))  # Should return True (single element)\nprint(test_distinct([1, 2, 3, 4, 5]))  # Should return True (all distinct)\nprint(test_distinct([1, 2, 3, 3, 5]))  # Should return False (not all distinct)\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 47, "completion": "def compute_last_digit(a, b):\n    # Edge case: if a equals b, return 1\n    if a == b:\n        return 1\n    \n    # Initialize result variable\n    last_digit = 1\n    \n    # If b > a, we need to calculate (factorial(b) / factorial(a)) % 10\n    for i in range(a + 1, b + 1):\n        last_digit = (last_digit * (i % 10)) % 10\n    \n    return last_digit\n\n# Example usage:\nprint(compute_last_digit(5, 5))  # Output: 1\nprint(compute_last_digit(3, 6))  # Output: 2\nprint(compute_last_digit(7, 9))  # Output: 4\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 48, "completion": "def odd_bit_set_number(n):\n    # Handle the edge case where the input is 0\n    if n == 0:\n        return 1\n    \n    # Initialize variables\n    result = 0\n    bit_position = 0\n    \n    # Iterate through each bit position\n    while n > 0:\n        # Set the bit at the current odd position\n        if bit_position % 2 == 0:\n            result |= (1 << bit_position)\n        \n        # Move to the next bit position\n        bit_position += 1\n        n >>= 1\n    \n    # Return the result with all odd bits set\n    return result\n\n# Example usage:\nprint(odd_bit_set_number(0))  # Output: 1\nprint(odd_bit_set_number(1))  # Output: 3 (binary: 01 -> 11)\nprint(odd_bit_set_number(2))  # Output: 5 (binary: 10 -> 101)\nprint(odd_bit_set_number(4))  # Output: 9 (binary: 100 -> 1001)\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1i9ugaw3.py\", line 23, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(two_d_list, index=0):\n    \"\"\"\n    Extracts the first or specified element from each sublist in a given two-dimensional list.\n    \n    Parameters:\n    - two_d_list: A two-dimensional list (list of lists).\n    - index: The index of the element to extract from each sublist. Default is 0 (first element).\n    \n    Returns:\n    - A list containing the extracted elements.\n    \"\"\"\n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate over each sublist in the two-dimensional list\n    for sublist in two_d_list:\n        # Check if the specified index is within the bounds of the current sublist\n        if index < len(sublist):\n            # Append the element at the specified index to the result list\n            result.append(sublist[index])\n        else:\n            # If the index is out of bounds, append None or some default value\n            result.append(None)\n    \n    return result\n\n# Example usage:\ntwo_d_list = [\n    [1, 2, 3],\n    [4, 5],\n    [6, 7, 8, 9]\n]\n\n# Extracting the first element from each sublist\nprint(specified_element(two_d_list))  # Output: [1, 4, 6]\n\n# Extracting the second element from each sublist\nprint(specified_element(two_d_list, 1))  # Output: [2, 5, 7]\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqluft56z.py\", line 27, in <module>\n    assert specified_element([[1, 2], [3], [4, 5, 6]], 1) == [2, 5]\nAssertionError", "passed": false}
{"task_id": 50, "completion": "def min_length_list(lists):\n    if not lists:\n        return None  # Return None if the input list is empty\n    \n    # Find the minimum length among the lists\n    min_len = min(len(lst) for lst in lists)\n    \n    # Use a lambda function to filter out the list(s) with the minimum length\n    min_length_lists = list(filter(lambda lst: len(lst) == min_len, lists))\n    \n    # Return the first list with the minimum length\n    return min_length_lists[0]\n\n# Example usage:\nlists = [[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]\nresult = min_length_list(lists)\nprint(result)  # Output: [4, 5]\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp__n76jxo.py\", line 14, in <module>\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nAssertionError", "passed": false}
{"task_id": 51, "completion": "def check_equilateral(a, b, c):\n    # Check if any side is zero\n    if a == 0 or b == 0 or c == 0:\n        return False\n    \n    # Check if all sides are equal\n    if a == b == c:\n        print(\"The triangle is equilateral.\")\n    else:\n        print(\"The triangle is not equilateral.\")\n\n# Example usage:\ncheck_equilateral(3, 3, 3)  # Output: The triangle is equilateral.\ncheck_equilateral(3, 4, 5)  # Output: The triangle is not equilateral.\ncheck_equilateral(0, 0, 0)  # Output: None (since it returns False)\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxua6xk4i.py\", line 14, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n    \n    Parameters:\n    - base (float): The length of the base of the parallelogram.\n    - height (float): The height of the parallelogram.\n    \n    Returns:\n    - float: The area of the parallelogram. If either base or height is zero, returns 0.\n    \"\"\"\n    if base <= 0 or height <= 0:\n        return 0\n    \n    area = base * height\n    return area\n\n# Example usage:\nbase = 5\nheight = 3\narea = parallelogram_area(base, height)\nprint(f\"The area of the parallelogram with base {base} and height {height} is {area}\")\n\n# Edge case: base is zero\nbase = 0\nheight = 3\narea = parallelogram_area(base, height)\nprint(f\"The area of the parallelogram with base {base} and height {height} is {area}\")\n\n# Edge case: height is zero\nbase = 5\nheight = 0\narea = parallelogram_area(base, height)\nprint(f\"The area of the parallelogram with base {base} and height {height} is {area}\")\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(s):\n    # Check if the string is empty\n    if len(s) == 0:\n        return 'Equal'\n    \n    # Get the first and last characters of the string\n    first_char = s[0]\n    last_char = s[-1]\n    \n    # Compare the first and last characters\n    if first_char == last_char:\n        return 'Equal'\n    else:\n        return 'Not Equal'\n\n# Example usage:\nprint(check_equality(\"radar\"))  # Output: 'Equal'\nprint(check_equality(\"hello\"))  # Output: 'Not Equal'\nprint(check_equality(\"\"))       # Output: 'Equal'\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 54, "completion": "def counting_sort(arr):\n    if not arr:\n        return []\n    \n    # Find the maximum value in the array to determine the size of the count array\n    max_val = max(arr)\n    \n    # Initialize the count array with zeros\n    count_arr = [0] * (max_val + 1)\n    \n    # Populate the count array\n    for num in arr:\n        count_arr[num] += 1\n    \n    # Reconstruct the sorted array\n    sorted_idx = 0\n    for i in range(len(count_arr)):\n        while count_arr[i] > 0:\n            arr[sorted_idx] = i\n            sorted_idx += 1\n            count_arr[i] -= 1\n    \n    return arr\n\n# Example usage:\narr = [4, 2, 2, 8, 3, 3, 1]\nsorted_arr = counting_sort(arr)\nprint(sorted_arr)  # Output: [1, 2, 2, 3, 3, 4, 8]\n\n# Edge case: empty list\nempty_list = []\nsorted_empty_list = counting_sort(empty_list)\nprint(sorted_empty_list)  # Output: []\n\n# Edge case: list with a single element\nsingle_element_list = [5]\nsorted_single_element_list = counting_sort(single_element_list)\nprint(sorted_single_element_list)  # Output: [5]\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 55, "completion": "def tn_gp(a, r, n):\n    \"\"\"\n    Calculate the t-nth term of a geometric series.\n\n    Parameters:\n    a (float): The first term of the geometric series.\n    r (float): The common ratio of the geometric series.\n    n (int): The term number to find.\n\n    Returns:\n    float: The t-nth term of the geometric series.\n    \"\"\"\n    if r == 0:\n        # If the common ratio is zero, all terms beyond the first are zero.\n        return 0 if n > 1 else a\n    \n    # Calculate the t-nth term using the formula a * r^(n-1)\n    return a * (r ** (n - 1))\n\n# Example usage:\na = 2  # First term\nr = 3  # Common ratio\nn = 5  # Term number\n\nprint(tn_gp(a, r, n))  # Output will be 486\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2t1mn2ny.py\", line 12, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def reverse_num(n):\n    return int(str(n)[::-1])\n\ndef check(n):\n    reversed_n = reverse_num(n)\n    return n == 2 * reversed_n - 1\n\n# Test the function with some test cases:\nprint(check(0))      # True (0 is one less than twice its reverse)\nprint(check(1))      # False (1 is not one less than twice its reverse)\nprint(check(9))      # True (9 is one less than twice its reverse)\nprint(check(18))     # True (18 is one less than twice its reverse)\nprint(check(36))     # True (36 is one less than twice its reverse)\nprint(check(54))     # True (54 is one less than twice its reverse)\nprint(check(72))     # True (72 is one less than twice its reverse)\nprint(check(90))     # True (90 is one less than twice its reverse)\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkryacek2.py\", line 19, in <module>\n    assert check(1) == False\nAssertionError", "passed": false}
{"task_id": 57, "completion": "def find_max_num(digits):\n    if not digits:\n        return 0\n    \n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n    \n    # Combine the sorted digits into a single number\n    max_num = int(''.join(map(str, digits)))\n    \n    return max_num\n\n# Example usage:\ndigits = [3, 1, 4, 2]\nprint(find_max_num(digits))  # Output: 4321\n\ndigits = []\nprint(find_max_num(digits))  # Output: 0\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpv761ezr5.py\", line 14, in <module>\n    assert find_max_num([1,2,3],3) == 321\nTypeError: find_max_num() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 58, "completion": "def opposite_signs(a, b):\n    # Check if the XOR of a and b is negative\n    return (a ^ b) < 0\n\n# Test cases\nprint(opposite_signs(10, -20))  # True\nprint(opposite_signs(-15, 30))  # True\nprint(opposite_signs(0, -1))   # True\nprint(opposite_signs(0, 0))    # False\nprint(opposite_signs(10**18, -10**18))  # True\nprint(opposite_signs(10**18, 10**18))   # False\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpg2uhx_xk.py\", line 15, in <module>\n    assert opposite_signs(0, 1) == True\nAssertionError", "passed": false}
{"task_id": 59, "completion": "def is_octagonal(n):\n    if n <= 0:\n        raise ValueError(\"The input must be a positive integer.\")\n    \n    # Calculate the nth octagonal number using the formula\n    return n * (3 * n - 2)\n\n# Example usage:\ntry:\n    print(is_octagonal(1))  # Output: 1\n    print(is_octagonal(2))  # Output: 8\n    print(is_octagonal(3))  # Output: 21\n    print(is_octagonal(4))  # Output: 40\nexcept ValueError as e:\n    print(e)\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 60, "completion": "def max_len_sub(arr):\n    n = len(arr)\n    \n    # If the array is empty, return 0\n    if n == 0:\n        return 0\n    \n    # Create an array dp where dp[i] represents the length of the longest \n    # subsequence ending at index i with difference between adjacent elements.\n    dp = [1]*n\n    \n    # Iterate over the array starting from the second element\n    for i in range(1, n):\n        \n        # Check all previous elements\n        for j in range(i):\n            \n            # If the absolute difference between arr[j] and arr[i] is 1,\n            # update dp[i]\n            if abs(arr[j]-arr[i]) == 1:\n                dp[i] = max(dp[i], dp[j]+1)\n                \n    # The result will be the maximum value in the dp array\n    return max(dp)\n\n# Test cases\nprint(max_len_sub([1,2,3])) # Expected output: 3\nprint(max_len_sub([1,2,2,3,4])) # Expected output: 4\nprint(max_len_sub([])) # Expected output: 0\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp81fb_wey.py\", line 23, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}

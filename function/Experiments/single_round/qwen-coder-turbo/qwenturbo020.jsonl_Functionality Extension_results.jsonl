{"task_id": 11, "completion": "def remove_occ(s, char, all=False):\n    if not s or not char:\n        return s\n    \n    # Remove the first occurrence\n    index = s.find(char)\n    if index != -1:\n        s = s[:index] + s[index+1:]\n    \n    # Remove the last occurrence if 'all' is False\n    if not all:\n        index = s.rfind(char)\n        if index != -1:\n            s = s[:index] + s[index+1:]\n    \n    # If 'all' is True, remove all occurrences\n    elif all:\n        s = s.replace(char, '')\n    \n    return s\n\n# Example usage:\nprint(remove_occ(\"hello world\", \"o\"))  # Output: \"hell wrld\"\nprint(remove_occ(\"hello world\", \"o\", all=True))  # Output: \"hell wrld\"\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 12, "completion": "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda row: sum(row or []))\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwm3w2oo6.py\", line 3, in <module>\n    assert sort_matrix([[1, 2, 3], [4, 5], [6]]) == [[6], [4, 5], [1, 2, 3]]\nAssertionError", "passed": false}
{"task_id": 13, "completion": "from collections import Counter\n\ndef count_common(word_dict, top_n=10):\n    \"\"\"\n    Counts the most common words in a dictionary.\n    \n    Parameters:\n    - word_dict (dict): A dictionary where keys are words and values are their frequencies.\n    - top_n (int, optional): The number of top frequent words to return. Defaults to 10.\n    \n    Returns:\n    - list: A list of tuples containing the top_n most common words and their frequencies.\n    \"\"\"\n    # Create a Counter object from the dictionary\n    counter = Counter(word_dict)\n    \n    # Get the most common words\n    most_common_words = counter.most_common(top_n)\n    \n    return most_common_words\n\n# Example usage:\nword_freq_dict = {\n    \"apple\": 4,\n    \"banana\": 2,\n    \"orange\": 3,\n    \"grape\": 5,\n    \"watermelon\": 1\n}\n\n# Count the top 3 most common words\ntop_3_words = count_common(word_freq_dict, top_n=3)\nprint(top_3_words)  # Output: [('grape', 5), ('apple', 4), ('orange', 3)]\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 14, "completion": "def find_volume(prism):\n    # Check if the input is a list or tuple with exactly 3 elements\n    if isinstance(prism, (list, tuple)) and len(prism) == 3:\n        # Unpack the elements into variables\n        base_area, height, length = prism\n        # Calculate the volume of the triangular prism\n        return base_area * height * length\n    else:\n        raise ValueError(\"Input must be a list or tuple of three elements\")\n\n# Test the function with some examples\nprint(find_volume([6, 4, 10]))  # Output: 240\nprint(find_volume((5, 3, 8)))   # Output: 120\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7j39e7b4.py\", line 13, in <module>\n    assert find_volume([10, 8, 6]) == 240\nAssertionError", "passed": false}
{"task_id": 15, "completion": "import re\n\ndef split_lowerstring(s, include_lower=False):\n    # Find all positions where a lowercase letter is followed by an uppercase letter or end of string\n    positions = [m.start() for m in re.finditer(r'[a-z][A-Z]', s)]\n    \n    # Add the position right after the last character if it's not already included\n    if positions[-1] != len(s) - 1:\n        positions.append(len(s))\n    \n    # Initialize variables to store the result and current segment start index\n    result = []\n    current_start = 0\n    \n    # Iterate through the positions to split the string\n    for pos in positions:\n        segment = s[current_start:pos]\n        \n        if include_lower:\n            # Include the lowercase part of the segment at the start of the next segment\n            if segment:\n                result.append(segment[0])\n                result.extend(segment[1:])\n            else:\n                result.append('')\n        else:\n            result.append(segment)\n        \n        # Update the current start index\n        current_start = pos\n    \n    return result\n\n# Example usage:\ns = \"SplitThisStringAtLowercaseLetters\"\nprint(split_lowerstring(s))  # Output: ['Split', 'This', 'String', 'At', 'Lowercase', 'Letters']\nprint(split_lowerstring(s, include_lower=True))  # Output: ['S', 'plit', 'T', 'his', 'S', 'tring', 'A', 't', 'L', 'owercase', 'L', 'etters']\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplk1m713f.py\", line 30, in <module>\n    assert split_lowerstring('AbCd', include_lower=True) == ['Ab', 'Cd']\nAssertionError", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    # Define the pattern for lowercase letters joined with an underscore\n    pattern = r'[a-z]+_[a-z]+'\n    \n    # Search for the pattern in the given text\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not found.'\n\n# Example usage:\nprint(text_lowercase_underscore(\"hello_world\"))  # Output: Found a match!\nprint(text_lowercase_underscore(\"Hello_World\"))  # Output: Not found.\nprint(text_lowercase_underscore(\"helloWorld\"))   # Output: Not found.\nprint(text_lowercase_underscore(\"hello_world_again\"))  # Output: Found a match!\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    # Round the side length to the nearest integer\n    rounded_side = round(side_length)\n    \n    # Calculate the perimeter of the square\n    perimeter = 4 * rounded_side\n    \n    return perimeter\n\n# Example usage:\nprint(square_perimeter(5))        # Output: 20\nprint(square_perimeter(3.7))      # Output: 16\nprint(square_perimeter(4.49))     # Output: 16\nprint(square_perimeter(-2.5))     # Output: -8 (Note: Negative values will also be rounded to the nearest integer)\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphv4zf9yn.py\", line 12, in <module>\n    assert square_perimeter(4.5) == 20\nAssertionError", "passed": false}
{"task_id": 18, "completion": "def remove_dirty_chars(str1, str2):\n    # Convert both strings to lowercase to make the operation case-insensitive\n    str1 = str1.lower()\n    str2 = str2.lower()\n    \n    # Create a set of characters to be removed for faster lookup\n    chars_to_remove = set(str2)\n    \n    # Use a list comprehension to filter out characters present in chars_to_remove\n    cleaned_str1 = ''.join([char for char in str1 if char not in chars_to_remove])\n    \n    return cleaned_str1\n\n# Example usage:\nstr1 = \"Hello World!\"\nstr2 = \"ld\"\nresult = remove_dirty_chars(str1, str2)\nprint(result)  # Output: \"Heo Wor!\"\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjvm2cnvm.py\", line 15, in <module>\n    assert remove_dirty_chars('HelloWorld', 'hELLO') == 'World', 'Function should handle case-insensitive character removal.'\nAssertionError: Function should handle case-insensitive character removal.", "passed": false}
{"task_id": 19, "completion": "def test_duplicate(arr):\n    # create an empty set\n    seen = set()\n    \n    # create an empty list to store duplicates\n    duplicates = []\n    \n    # iterate over each number in the array\n    for num in arr:\n        # check if the number has been seen before\n        if num in seen:\n            # if it has, add it to the duplicates list\n            duplicates.append(num)\n        else:\n            # if it hasn't, add it to the seen set\n            seen.add(num)\n    \n    # return the list of duplicates\n    return duplicates\n\n# Test the function with some example inputs\nprint(test_duplicate([1, 2, 3, 4, 5]))  # Output: []\nprint(test_duplicate([1, 2, 3, 2, 5]))  # Output: [2]\nprint(test_duplicate([1, 1, 1, 1, 1]))  # Output: [1]\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(n):\n    if isinstance(n, int) and n > 0:\n        for i in range(1, n+1):\n            woodall = i * (2 ** i) - 1\n            if woodall == n:\n                return True\n        return False\n    else:\n        raise ValueError(\"Input must be a positive integer.\")\n\ndef woodall_numbers_up_to_n(n):\n    if isinstance(n, int) and n > 0:\n        return [i * (2 ** i) - 1 for i in range(1, n + 1)]\n    else:\n        raise ValueError(\"Input must be a positive integer.\")\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgp7iy1wz.py\", line 15, in <module>\n    assert is_woodall(10) == [1, 7]\nAssertionError", "passed": false}
{"task_id": 21, "completion": "def multiples_of_num(n, m):\n    \"\"\"\n    Find m number of multiples of n.\n\n    Parameters:\n    n (int or float): The base number whose multiples are to be found.\n    m (int): The number of multiples to find.\n\n    Returns:\n    list: A list containing m multiples of n.\n    \"\"\"\n    if not isinstance(m, int) or m < 1:\n        raise ValueError(\"The second argument must be a positive integer.\")\n    \n    return [i * n for i in range(1, m + 1)]\n\n# Example usage:\nprint(multiples_of_num(3, 5))  # Output: [3, 6, 9, 12, 15]\nprint(multiples_of_num(0.5, 4))  # Output: [0.5, 1.0, 1.5, 2.0]\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpbvei2s_1.py\", line 8, in <module>\n    assert multiples_of_num(3, 2.5) == [2.5, 5.0, 7.5]\n  File \"/tmp/tmpbvei2s_1.py\", line 3, in multiples_of_num\n    raise ValueError(\"The second argument must be a positive integer.\")\nValueError: The second argument must be a positive integer.", "passed": false}
{"task_id": 22, "completion": "def find_first_duplicate(arr):\n    seen = set()\n    duplicates = []\n    \n    for num in arr:\n        if num in seen:\n            if num not in duplicates:\n                duplicates.append(num)\n        else:\n            seen.add(num)\n    \n    # Find the first duplicate element\n    first_duplicate = next((num for num in arr if arr.count(num) > 1), None)\n    \n    return first_duplicate, duplicates\n\n# Example usage:\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 2]\nfirst_dup, all_dups = find_first_duplicate(arr)\nprint(\"First Duplicate:\", first_dup)  # Output: First Duplicate: 2\nprint(\"All Duplicates:\", all_dups)      # Output: All Duplicates: [2]\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpfvecwj_d.py\", line 18, in <module>\n    assert find_first_duplicate([1, 2, 3, 2, 4, 5, 4]) == [2, 4]\nAssertionError", "passed": false}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists):\n    # Initialize the maximum sum to a very small number (negative infinity)\n    max_sum = float('-inf')\n    \n    # Iterate through each sublist in the list of lists\n    for sublist in list_of_lists:\n        # Calculate the sum of the current sublist\n        current_sum = sum(sublist)\n        \n        # Update the maximum sum if the current sum is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [-1, -2, -3], [4, 5, 6], [-4, -5, -6]]\nprint(maximum_sum(list_of_lists))  # Output should be 15\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 24, "completion": "def binary_to_decimal(binary_str):\n    # Remove any leading zeros from the binary string\n    binary_str = binary_str.lstrip('0')\n    \n    # Convert the binary string to a decimal integer\n    if not binary_str:\n        return 0  # If the string is empty after removing leading zeros, it should be 0\n    else:\n        return int(binary_str, 2)\n\n# Example usage:\nprint(binary_to_decimal(\"00101\"))  # Output: 5\nprint(binary_to_decimal(\"0000\"))   # Output: 0\nprint(binary_to_decimal(\"1111\"))   # Output: 15\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 25, "completion": "def find_product(arr):\n    from collections import Counter\n    \n    # Count the occurrences of each element in the array\n    count = Counter(arr)\n    \n    # Initialize the product to 1 (multiplicative identity)\n    product = 1\n    \n    # Iterate through the elements and their counts\n    for num, freq in count.items():\n        # If the element appears only once, multiply it to the product\n        if freq == 1:\n            product *= num\n    \n    return product\n\n# Example usage:\narr = [2, -3, 4, -3, 5]\nprint(find_product(arr))  # Output should be 2 * 4 * 5 = 40\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4p9vyl3f.py\", line 16, in <module>\n    assert find_product([-1, -2, 3, 3], 4) == 2\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(tuple_list, k):\n    count = 0\n    for tup in tuple_list:\n        if len(tup) == k:\n            count += 1\n    return count\n\n# Test the function\ntuples = [(1,2,3), (4,5), (6,7,8,9), (10,), (11,12,13)]\nprint(check_k_elements(tuples, 3))  # Output: 1\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 27, "completion": "def remove(strings, chars_to_remove=''):\n    \"\"\"\n    Remove all digits from a list of strings and optionally remove additional specified characters.\n\n    Parameters:\n    - strings (list of str): The list of strings from which to remove digits and specified characters.\n    - chars_to_remove (str, optional): A string containing characters to be removed in addition to digits. Defaults to ''.\n\n    Returns:\n    - list of str: A new list of strings with digits and specified characters removed.\n    \"\"\"\n    # Combine digits and additional characters to remove into one set\n    removal_set = set('0123456789' + chars_to_remove)\n    \n    # Function to remove specified characters from a single string\n    def remove_chars(s):\n        return ''.join(ch for ch in s if ch not in removal_set)\n    \n    # Apply the removal function to each string in the list\n    result = [remove_chars(s) for s in strings]\n    \n    return result\n\n# Example usage:\nstrings = [\"abc123\", \"def456ghi\", \"jkl789\"]\nresult = remove(strings, chars_to_remove='a')\nprint(result)  # Output: ['bc123', 'def456ghi', 'jkl789']\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5o53053p.py\", line 14, in <module>\n    assert remove_extended(['abcd123', '456defg'], 'abcdef') == ['d', 'g']\nNameError: name 'remove_extended' is not defined", "passed": false}
{"task_id": 28, "completion": "def binomial_coeff(n, k, memo=None):\n    if memo is None:\n        memo = {}\n    \n    # Base cases\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    \n    # Check if result is already computed\n    if (n, k) in memo:\n        return memo[(n, k)]\n    \n    # Recursive computation\n    memo[(n, k)] = binomial_coeff(n - 1, k - 1, memo) + binomial_coeff(n - 1, k, memo)\n    return memo[(n, k)]\n\n# Example usage:\nprint(binomial_coeff(5, 2))  # Output: 10\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 29, "completion": "def get_odd_occurrence(arr: list, arr_size: int) -> list:\n    # Dictionary to store the count of each element\n    count_dict = {}\n    \n    # Count occurrences of each element\n    for i in range(arr_size):\n        if arr[i] in count_dict:\n            count_dict[arr[i]] += 1\n        else:\n            count_dict[arr[i]] = 1\n    \n    # List to store elements occurring an odd number of times\n    result = []\n    \n    # Check which elements have an odd count\n    for key, value in count_dict.items():\n        if value % 2 != 0:\n            result.append(key)\n    \n    return result\n\n# Example usage:\narr = [1, 2, 3, 2, 3, 1, 3]\narr_size = len(arr)\nprint(get_odd_occurrence(arr, arr_size))  # Output: [3]\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphaeo4f72.py\", line 21, in <module>\n    assert get_odd_occurrence([1, 2, 3, 1, 2, 3, 1, 3]) == [1, 3]\nTypeError: get_odd_occurrence() missing 1 required positional argument: 'arr_size'", "passed": false}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    s = ''.join(e for e in s if e.isalpha())\n    count = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if s[i] == s[j - 1]:\n                count += 1\n    return count\n\n# Testing the function\nprint(count_substring_with_equal_ends(\"abcab\")) # Output: 7\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 31, "completion": "import heapq\nfrom collections import Counter\n\ndef func(lists, k):\n    # Check if k is zero, return an empty list\n    if k == 0:\n        return []\n\n    # Flatten the list of lists and count the frequency of each integer\n    counts = Counter(num for sublist in lists for num in sublist)\n\n    # Use a min-heap to keep track of the top k elements\n    heap = []\n    for num, freq in counts.items():\n        if len(heap) < k:\n            heapq.heappush(heap, (freq, num))\n        elif freq > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (freq, num))\n\n    # Extract the numbers from the heap and sort them in descending order\n    result = [num for freq, num in sorted(heap, reverse=True)]\n    \n    return result\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 32, "completion": "def max_prime_factors(n, return_all=False):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    prime_factors = []\n    \n    # Divide n by 2 until it's odd\n    while n % 2 == 0:\n        prime_factors.append(2)\n        n //= 2\n    \n    # Check for odd factors from 3 onwards\n    factor = 3\n    while factor * factor <= n:\n        while n % factor == 0:\n            prime_factors.append(factor)\n            n //= factor\n        factor += 2\n    \n    # If n is still greater than 2, then it must be a prime number\n    if n > 2:\n        prime_factors.append(n)\n    \n    if return_all:\n        return prime_factors\n    else:\n        return prime_factors[-1] if prime_factors else None\n\n# Example usage:\nnumber = 13195\nprint(max_prime_factors(number))          # Output: 29\nprint(max_prime_factors(number, True))   # Output: [5, 7, 13, 29]\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(decimal_number):\n    \"\"\"\n    Convert a single decimal number to its binary representation.\n    \n    :param decimal_number: An integer representing the decimal number.\n    :return: A string representing the binary equivalent of the decimal number.\n    \"\"\"\n    if not isinstance(decimal_number, int) or decimal_number < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    # Special case for 0\n    if decimal_number == 0:\n        return \"0\"\n    \n    binary_digits = []\n    while decimal_number > 0:\n        remainder = decimal_number % 2\n        binary_digits.append(str(remainder))\n        decimal_number //= 2\n    \n    # The binary digits are in reverse order, so we need to reverse them\n    binary_digits.reverse()\n    \n    return ''.join(binary_digits)\n\ndef decimal_list_to_binary(decimal_numbers):\n    \"\"\"\n    Convert a list of decimal numbers to their binary representations.\n    \n    :param decimal_numbers: A list of integers representing the decimal numbers.\n    :return: A list of strings representing the binary equivalents of the decimal numbers.\n    \"\"\"\n    if not all(isinstance(num, int) and num >= 0 for num in decimal_numbers):\n        raise ValueError(\"All elements in the input list must be non-negative integers.\")\n    \n    return [decimal_to_binary(num) for num in decimal_numbers]\n\n# Example usage:\nsingle_decimal = 13\nbinary_string = decimal_to_binary(single_decimal)\nprint(f\"Binary representation of {single_decimal}: {binary_string}\")\n\ndecimal_list = [13, 42, 56, 78]\nbinary_list = decimal_list_to_binary(decimal_list)\nprint(f\"Binary representations of {decimal_list}: {binary_list}\")\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpuhrq143v.py\", line 26, in <module>\n    assert decimal_to_binary([10, 1, 20]) == ['1010', '1', '10100']\n  File \"/tmp/tmpuhrq143v.py\", line 3, in decimal_to_binary\n    raise ValueError(\"Input must be a non-negative integer.\")\nValueError: Input must be a non-negative integer.", "passed": false}
{"task_id": 34, "completion": "def find_missing(nums):\n    if not nums:\n        return []\n    \n    start = 0\n    end = len(nums) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        \n        # If the element at mid position is equal to its index, \n        # then the missing elements must be in the right half.\n        if nums[mid] == mid + nums[0]:\n            start = mid + 1\n        else:\n            # Otherwise, the missing elements must be in the left half including mid.\n            end = mid - 1\n    \n    # At this point, 'start' should be the smallest index where the element is not equal to its expected value.\n    # We need to check for missing numbers from 'nums[0]' to 'start'.\n    missing_numbers = [i for i in range(nums[0], start + 1) if i not in nums]\n    \n    return missing_numbers\n\n# Example usage:\nsorted_array = [0, 1, 3, 4, 6, 7, 9]\nprint(find_missing(sorted_array))  # Output: [2, 5, 8]\n\nsorted_array_with_multiple_missing = [0, 1, 3, 4, 6, 7, 8, 10]\nprint(find_missing(sorted_array_with_multiple_missing))  # Output: [2, 5, 9]\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpeabxftnm.py\", line 24, in <module>\n    assert find_missing([1,3,6], 3) == [2, 4, 5]\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    \"\"\"\n    Find the n-th rectangular number.\n    \n    Args:\n    n (int): The position of the rectangular number.\n    \n    Returns:\n    int: The n-th rectangular number.\n    \"\"\"\n    return n * (n + 1) * (2 * n + 1) // 6\n\ndef find_rect_nums(nums):\n    \"\"\"\n    Find the rectangular numbers for a list of integers.\n    \n    Args:\n    nums (list of int): List of integers.\n    \n    Returns:\n    list of int: List of corresponding rectangular numbers.\n    \"\"\"\n    return [find_rect_num(num) for num in nums]\n\n# Example usage:\nprint(find_rect_num(3))  # Output: 14\nprint(find_rect_nums([1, 2, 3, 4]))  # Output: [1, 5, 14, 30]\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6kojcdwu.py\", line 8, in <module>\n    assert find_rect_num([1, 2, 3]) == [2, 6, 12]\n  File \"/tmp/tmp6kojcdwu.py\", line 2, in find_rect_num\n    return n * (n + 1) * (2 * n + 1) // 6\nTypeError: can only concatenate list (not \"int\") to list", "passed": false}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator):\n    # Check if the inputs are integers\n    assert isinstance(numerator, int) and isinstance(denominator, int)\n    \n    # Make sure the denominator is not zero\n    assert denominator != 0\n    \n    # If numerator is negative, make it positive\n    if numerator < 0:\n        numerator = -numerator\n        \n    # If denominator is negative, make it positive\n    if denominator < 0:\n        denominator = -denominator\n\n    # Get the integer part of the division\n    integer_part = numerator // denominator\n    \n    # Subtract the integer part from the numerator to get the remainder\n    remainder = numerator % denominator\n    \n    # Initialize an empty string to store the decimal digits\n    decimal_digits = ''\n    \n    # Loop until we have enough decimal digits or the remainder becomes zero\n    while len(decimal_digits) < n and remainder != 0:\n        # Multiply the remainder by 10\n        remainder *= 10\n        \n        # Append the quotient to the decimal digits\n        quotient = remainder // denominator\n        decimal_digits += str(quotient)\n        \n        # Update the remainder\n        remainder = remainder % denominator\n\n    # If the remainder is zero, there is no repeating sequence\n    if remainder == 0:\n        return None\n    \n    # Return the nth digit\n    return int(decimal_digits[n-1])\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmkzxnosu.py\", line 32, in <module>\n    assert find_nth_digit(-1, 2, 1) == 5\nTypeError: find_nth_digit() takes 2 positional arguments but 3 were given", "passed": false}
{"task_id": 37, "completion": "def sort_mixed_list(mixed_list, reverse_strings=False):\n    # Separate integers and strings into two lists\n    int_list = [item for item in mixed_list if isinstance(item, int)]\n    str_list = [item for item in mixed_list if isinstance(item, str)]\n\n    # Sort integer list\n    int_list.sort()\n\n    # Sort string list based on reverse_strings parameter\n    if reverse_strings:\n        str_list.sort(reverse=True)\n    else:\n        str_list.sort()\n\n    # Combine sorted lists and return\n    return int_list + str_list\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 38, "completion": "def div_even_odd(numbers):\n    # Initialize variables to store the first even and odd number found\n    first_even = None\n    first_odd = None\n    \n    # Iterate through the list to find the first even and odd number\n    for num in numbers:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        \n        # If both even and odd numbers are found, break the loop\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Check if both even and odd numbers were found\n    if first_even is not None and first_odd is not None:\n        result = first_even / first_odd\n        return result\n    else:\n        return \"No valid even or odd number found in the list\"\n\n# Example usage:\nnumbers = [3, -4, 5, -6, 7, 8]\nresult = div_even_odd(numbers)\nprint(f\"The division of the first even and odd number is: {result}\")\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 39, "completion": "import heapq\nfrom collections import Counter\n\ndef rearange_string(s):\n    # Count frequency of each character\n    counts = Counter(s)\n    max_heap = [(-freq, char) for char, freq in counts.items()]\n    heapq.heapify(max_heap)\n\n    prev_char = None\n    prev_freq = 0\n    result = []\n    results = []\n\n    while max_heap:\n        freq, char = heapq.heappop(max_heap)\n\n        if prev_char:\n            heapq.heappush(max_heap, (prev_freq, prev_char))\n\n        result.append(char)\n        prev_char = char\n        prev_freq = freq + 1\n\n        if len(result) == len(s):\n            results.append(''.join(result))\n            break\n\n    if max_heap:\n        return \"No valid arrangement\"\n\n    return results\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1kyvcs5l.py\", line 25, in <module>\n    assert set(rearange_string('aabb')) == {'abab', 'baba'}\nAssertionError", "passed": false}
{"task_id": 40, "completion": "from collections import Counter\n\ndef freq_element(nested_list):\n    # Helper function to flatten the nested list\n    def flatten(lst):\n        for item in lst:\n            if isinstance(item, list):\n                yield from flatten(item)\n            else:\n                yield item\n    \n    # Flatten the nested list and convert it to a Counter object\n    flat_list = list(flatten(nested_list))\n    counter = Counter(flat_list)\n    \n    return counter\n\n# Example usage:\nnested_list = [[1, 2, [3, 4]], [5, [6, 7, [8, 9]]], [10, 1, 2]]\nprint(freq_element(nested_list))\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 41, "completion": "def filter_evennumbers(lst):\n    # Filter out non-integer types\n    filtered_list = [x for x in lst if isinstance(x, int)]\n    \n    # Use a lambda function to filter even numbers\n    even_numbers = list(filter(lambda x: x % 2 == 0, filtered_list))\n    \n    return even_numbers\n\n# Example usage:\nexample_list = [1, 2, 'a', 3, 4, 'b', 5, 6]\nresult = filter_evennumbers(example_list)\nprint(result)  # Output: [2, 4, 6]\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 42, "completion": "def find_sum(arr):\n    # Create a dictionary to store the frequency of each element\n    freq = {}\n    for num in arr:\n        if num not in freq:\n            freq[num] = 1\n        else:\n            freq[num] += 1\n\n    # Initialize the sum of repeated elements to zero\n    sum_repeated = 0\n\n    # Iterate over the frequency dictionary and add up the sums of repeated elements\n    for num, count in freq.items():\n        if count > 1:\n            sum_repeated += num * count\n\n    return sum_repeated\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpk3r3hjss.py\", line 16, in <module>\n    assert find_sum([-1, -2, -3, -1, -1], 5) == -2\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    # Define the regex pattern for sequences of lowercase letters joined by one or more underscores\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    \n    # Find all matches in the given text\n    matches = re.findall(pattern, text)\n    \n    return matches\n\n# Example usage:\ntext = \"hello_world this_is_a_test example_text\"\nprint(text_match(text))  # Output: ['hello_world', 'this_is_a_test']\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgqgx5ay_.py\", line 11, in <module>\n    assert text_match('abc_def_ghi') == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 45, "completion": "def get_gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwlimk1vn.py\", line 5, in <module>\n    assert get_gcd([0, 0, 6, 9]) == 3\nTypeError: get_gcd() missing 1 required positional argument: 'b'", "passed": false}
{"task_id": 46, "completion": "def test_distinct(numbers):\n    \"\"\"\n    Determine if all numbers in the list are distinct.\n    \n    Parameters:\n    numbers (list): A list of numbers (integers or floats).\n    \n    Returns:\n    bool: True if all numbers are distinct, False otherwise.\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    unique_numbers = set(numbers)\n    \n    # Compare the length of the set with the length of the original list\n    return len(unique_numbers) == len(numbers)\n\n# Example usage:\nnumbers1 = [1, 2, 3, 4, 5]\nnumbers2 = [1, 2, 2, 4, 5]\nnumbers3 = [1.0, 2.0, 3.0, 4.0, 5.0]\nnumbers4 = [1.0, 2.0, 2.0, 4.0, 5.0]\n\nprint(test_distinct(numbers1))  # Output: True\nprint(test_distinct(numbers2))  # Output: False\nprint(test_distinct(numbers3))  # Output: True\nprint(test_distinct(numbers4))  # Output: False\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 47, "completion": "def compute_last_digit(a, b):\n    if a == 0 and b == 0:\n        return 1\n    elif a == 0:\n        return 1\n    elif b == 0:\n        return 1\n    \n    # Initialize the result as 1\n    last_digit = 1\n    \n    # Calculate the product of last digits from a+1 to b\n    for i in range(a + 1, b + 1):\n        last_digit = (last_digit * (i % 10)) % 10\n    \n    return last_digit\n\n# Example usage:\nprint(compute_last_digit(3, 6))  # Output should be 4 because 6! / 3! = 20\nprint(compute_last_digit(5, 10)) # Output should be 0 because 10! / 5! = 2520\nprint(compute_last_digit(0, 0))  # Output should be 1 because both factorials are 1\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 48, "completion": "def odd_bit_set_number(n):\n    # Handle negative numbers by converting them to their absolute value\n    n = abs(n)\n    \n    # Initialize a mask with all odd bits set to 1\n    mask = 0xAAAAAAAA  # This binary pattern has all odd bits set to 1\n    \n    # Use bitwise OR to set all odd bits of n to 1\n    result = n | mask\n    \n    return result\n\n# Example usage:\nprint(odd_bit_set_number(5))   # Output: 7\nprint(odd_bit_set_number(-5))  # Output: 7\nprint(odd_bit_set_number(10))  # Output: 15\nprint(odd_bit_set_number(-10)) # Output: 15\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4qe8kzpk.py\", line 14, in <module>\n    assert odd_bit_set_number(-10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(two_d_list, index=0):\n    \"\"\"\n    Extracts every first or specified element from a given two-dimensional list.\n    \n    Parameters:\n    - two_d_list: A two-dimensional list from which to extract elements.\n    - index: The index of the element to extract from each sublist. Default is 0 (first element).\n             Negative indices are allowed, indicating positions from the end of the sublists.\n             \n    Returns:\n    - A list containing the extracted elements.\n    \"\"\"\n    # Validate the input parameters\n    if not isinstance(two_d_list, list) or not all(isinstance(sublist, list) for sublist in two_d_list):\n        raise ValueError(\"The first argument must be a two-dimensional list.\")\n    \n    if not isinstance(index, int):\n        raise ValueError(\"The second argument must be an integer.\")\n    \n    # Extract elements based on the specified index\n    result = []\n    for sublist in two_d_list:\n        if 0 <= abs(index) < len(sublist):\n            result.append(sublist[index])\n        else:\n            # If the index is out of bounds, append None or handle as needed\n            result.append(None)\n    \n    return result\n\n# Example usage:\ntwo_d_list = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n\nprint(specified_element(two_d_list))          # Output: [1, 4, 7]\nprint(specified_element(two_d_list, 1))       # Output: [2, 5, 8]\nprint(specified_element(two_d_list, -1))      # Output: [3, 6, 9]\nprint(specified_element(two_d_list, -2))      # Output: [2, 5, 8]\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 51, "completion": "def check_equilateral(a, b, c):\n    \"\"\"\n    Check if a triangle with sides a, b, and c is equilateral or isosceles.\n    \n    Parameters:\n    a (float): Length of side a\n    b (float): Length of side b\n    c (float): Length of side c\n    \n    Returns:\n    str: 'equilateral' if the triangle is equilateral,\n         'isosceles' if the triangle is isosceles,\n         otherwise returns None\n    \"\"\"\n    # Check if the sides form a valid triangle using the triangle inequality theorem\n    if a + b > c and a + c > b and b + c > a:\n        # Check for equilateral triangle\n        if a == b == c:\n            return 'equilateral'\n        # Check for isosceles triangle\n        elif a == b or a == c or b == c:\n            return 'isosceles'\n    else:\n        return None\n\n# Example usage:\nprint(check_equilateral(3, 3, 3))  # Output: 'equilateral'\nprint(check_equilateral(3, 4, 4))  # Output: 'isosceles'\nprint(check_equilateral(3, 4, 5))  # Output: None\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 52, "completion": "def parallelogram_area(base_height_pairs):\n    \"\"\"\n    Calculate the area of a single parallelogram or a list of parallelograms.\n    \n    Parameters:\n    - base_height_pairs (list of tuples): A list where each tuple contains the base and height of a parallelogram.\n    \n    Returns:\n    - list: A list containing the areas of the parallelograms.\n    \"\"\"\n    # Initialize an empty list to store the areas\n    areas = []\n    \n    # Iterate through each pair in the input list\n    for base, height in base_height_pairs:\n        # Calculate the area of the current parallelogram\n        area = base * height\n        # Append the calculated area to the list\n        areas.append(area)\n    \n    return areas\n\n# Example usage:\n# Single parallelogram\nbase_height_pair = [(5, 3)]\nprint(parallelogram_area(base_height_pair))  # Output: [15]\n\n# List of parallelograms\nbase_height_pairs = [(5, 3), (4, 2), (6, 4)]\nprint(parallelogram_area(base_height_pairs))  # Output: [15, 8, 24]\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp19zm5xt3.py\", line 18, in <module>\n    assert parallelogram_area_list([(10, 20), (15, 20), (8, 9)]) == [200, 300, 72]\nNameError: name 'parallelogram_area_list' is not defined", "passed": false}
{"task_id": 53, "completion": "def check_equality(s):\n    if len(s) == 0:\n        return \"The string is empty.\"\n    else:\n        return s[0].lower() == s[-1].lower()\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpsk9x163c.py\", line 6, in <module>\n    assert check_equality('Abca') == 'Equal'\nAssertionError", "passed": false}
{"task_id": 54, "completion": "def counting_sort(arr):\n    if not arr:\n        return []\n\n    # Find the maximum and minimum values in the array\n    max_val = max(arr)\n    min_val = min(arr)\n\n    # Initialize the count array with zeros\n    range_size = max_val - min_val + 1\n    count_array = [0] * range_size\n\n    # Fill the count array with the frequency of each element\n    for num in arr:\n        count_array[num - min_val] += 1\n\n    # Reconstruct the sorted array\n    sorted_index = 0\n    for i in range(range_size):\n        while count_array[i] > 0:\n            arr[sorted_index] = i + min_val\n            sorted_index += 1\n            count_array[i] -= 1\n\n    return arr\n\n# Example usage:\narr = [4, 2, 2, 8, 3, 3, 1]\nprint(\"Original array:\", arr)\nsorted_arr = counting_sort(arr)\nprint(\"Sorted array:\", sorted_arr)\n\n# Handling negative integers\narr_negative = [-5, -3, -7, -2, -5, -3]\nprint(\"Original array with negative integers:\", arr_negative)\nsorted_arr_negative = counting_sort(arr_negative)\nprint(\"Sorted array with negative integers:\", sorted_arr_negative)\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 55, "completion": "def tn_gp(a, r, n):\n    \"\"\"\n    Calculate the n-th term of a geometric series.\n    \n    Parameters:\n    a (float): The first term of the geometric series.\n    r (float): The common ratio of the geometric series.\n    n (int): The term number to calculate.\n    \n    Returns:\n    float: The n-th term of the geometric series.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"The term number 'n' must be a positive integer.\")\n    \n    # Calculate the n-th term using the formula: a * r^(n-1)\n    nth_term = a * (r ** (n - 1))\n    \n    return nth_term\n\n# Example usage:\nfirst_term = 2.5\ncommon_ratio = 3.0\nterm_number = 4\n\nresult = tn_gp(first_term, common_ratio, term_number)\nprint(f\"The {term_number}-th term of the geometric series is: {result}\")\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 56, "completion": "def reverse(num):\n    return int(str(abs(num))[::-1]) * (num < 0) - int(str(abs(num))[::-1]) * (num >= 0)\n\ndef check(num):\n    return num == 2*reverse(num)-1\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplfafqu12.py\", line 6, in <module>\n    assert check(-37) == True\nAssertionError", "passed": false}
{"task_id": 57, "completion": "def find_max_num(digits):\n    # Convert each digit to a string\n    str_digits = [str(digit) for digit in digits]\n    \n    # Sort the digits in descending order based on their value when concatenated\n    str_digits.sort(key=lambda x: x*3, reverse=True)\n    \n    # Join the sorted digits to form the largest number\n    max_num_str = ''.join(str_digits)\n    \n    # Convert the result back to an integer\n    max_num = int(max_num_str)\n    \n    return max_num\n\n# Example usage:\ndigits = [3, 30, 34, 5, 9]\nprint(find_max_num(digits))  # Output: 9534330\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpibx9cwv9.py\", line 14, in <module>\n    assert find_max_num([1, 1, 2, 2], 4) == 2211\nTypeError: find_max_num() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 58, "completion": "def opposite_signs(a, b):\n    \"\"\"Check if two integers have opposite signs.\"\"\"\n    return (a ^ b) < 0\n\ndef opposite_signs_list(pairs):\n    \"\"\"Check if each pair in a list of integer pairs has opposite signs.\"\"\"\n    return [opposite_signs(pair[0], pair[1]) for pair in pairs]\n", "requirement": "Functionality Extension", "result": "passed", "passed": true}
{"task_id": 59, "completion": "def is_octagonal(n):\n    \"\"\"\n    Calculate the nth octagonal number or a list of the first n octagonal numbers.\n    \n    Args:\n    n (int or list): The position of the octagonal number(s) to calculate.\n    \n    Returns:\n    int or list: The nth octagonal number if n is an integer, otherwise a list of the first n octagonal numbers.\n    \"\"\"\n    if isinstance(n, list):\n        return [i * (3 * i - 2) for i in range(1, n + 1)]\n    elif isinstance(n, int):\n        return n * (3 * n - 2)\n    else:\n        raise ValueError(\"Input must be an integer or a list of integers.\")\n\n# Example usage:\nprint(is_octagonal(5))  # Output: 70\nprint(is_octagonal([1, 2, 3, 4, 5]))  # Output: [1, 8, 21, 40, 65]\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpbgm9111e.py\", line 10, in <module>\n    print(is_octagonal([1, 2, 3, 4, 5]))  # Output: [1, 8, 21, 40, 65]\n  File \"/tmp/tmpbgm9111e.py\", line 3, in is_octagonal\n    return [i * (3 * i - 2) for i in range(1, n + 1)]\nTypeError: can only concatenate list (not \"int\") to list", "passed": false}
{"task_id": 60, "completion": "def max_len_sub(arr):\n    n = len(arr)\n    dp = [1]*n\n\n    for i in range(1,n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j]+1)\n\n    return max(dp)\n\n# Test case\narr = [1,2,3,4,5]\nprint(max_len_sub(arr)) # Output: 5\n\narr = [1,3,5,7,9,8,6,4,2]\nprint(max_len_sub(arr)) # Output: 5\n", "requirement": "Functionality Extension", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5j7ufoq3.py\", line 14, in <module>\n    assert max_len_sub([10, 7, 4, 1, -2], -3) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}

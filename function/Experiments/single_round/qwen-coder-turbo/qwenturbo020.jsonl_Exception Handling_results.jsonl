{"task_id": 11, "completion": "def remove_occ(s, char):\n    # Check if the second parameter is a single character\n    if len(char) != 1:\n        raise ValueError('Second parameter must be a single character.')\n    \n    # Find the index of the first occurrence of the character\n    first_index = s.find(char)\n    \n    # Find the index of the last occurrence of the character\n    last_index = s.rfind(char)\n    \n    # If either the first or last index is -1, the character does not exist in the string\n    if first_index == -1 or last_index == -1:\n        return s\n    \n    # Remove the first occurrence\n    s = s[:first_index] + s[first_index+1:]\n    \n    # Remove the last occurrence (adjusting for the change in length)\n    s = s[:last_index] + s[last_index+1:]\n    \n    return s\n\n# Example usage:\nprint(remove_occ(\"hello world\", \"l\"))  # Output: \"heo word\"\nprint(remove_occ(\"banana\", \"a\"))       # Output: \"bnnan\"\ntry:\n    print(remove_occ(\"apple\", \"pp\"))     # Should raise ValueError\nexcept ValueError as e:\n    print(e)                            # Output: Second parameter must be a single character.\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpzwv1pkiy.py\", line 24, in <module>\n    assert remove_occ(\"hello\",\"l\") == \"heo\"\nAssertionError", "passed": false}
{"task_id": 12, "completion": "def sort_matrix(matrix):\n    # Check if input is a list of lists\n    if not all(isinstance(i, list) for i in matrix):\n        raise TypeError('Input must be a list of lists')\n\n    # Check if each row contains only integers\n    for row in matrix:\n        if not all(isinstance(i, int) for i in row):\n            raise TypeError('Each row must contain only integers')\n    \n    # Sort the matrix based on the sum of its rows\n    sorted_matrix = sorted(matrix, key=sum)\n    \n    return sorted_matrix\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 13, "completion": "from collections import Counter\n\ndef count_common(words):\n    # Check if the input is a list\n    if not isinstance(words, list):\n        raise TypeError(\"Input must be a list of strings\")\n    \n    # Check if all elements in the list are strings\n    for word in words:\n        if not isinstance(word, str):\n            raise TypeError(\"All elements in the list must be strings\")\n    \n    # Count the occurrences of each word\n    word_counts = Counter(words)\n    \n    # Find the most common words\n    most_common_words = word_counts.most_common()\n    \n    return most_common_words\n\n# Example usage:\nwords_list = [\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\"]\nprint(count_common(words_list))\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1fedl2mt.py\", line 18, in <module>\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nAssertionError", "passed": false}
{"task_id": 14, "completion": "def find_volume(base_length, base_height, prism_height):\n    # Check if all inputs are numeric\n    if not (isinstance(base_length, (int, float)) and isinstance(base_height, (int, float)) and isinstance(prism_height, (int, float))):\n        raise ValueError('All dimensions must be positive numbers.')\n    \n    # Check if all inputs are positive\n    if base_length <= 0 or base_height <= 0 or prism_height <= 0:\n        raise ValueError('All dimensions must be positive numbers.')\n    \n    # Calculate the area of the triangular base\n    base_area = 0.5 * base_length * base_height\n    \n    # Calculate the volume of the triangular prism\n    volume = base_area * prism_height\n    \n    return volume\n\n# Example usage:\ntry:\n    volume = find_volume(3, 4, 5)\n    print(f\"The volume of the triangular prism is: {volume}\")\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 15, "completion": "def split_lowerstring(s):\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    \n    result = []\n    current_word = \"\"\n    \n    for char in s:\n        if char.islower():\n            if current_word:\n                result.append(current_word)\n                current_word = char\n            else:\n                current_word = char\n        else:\n            current_word += char\n    \n    if current_word:\n        result.append(current_word)\n    \n    return result\n\n# Example usage:\nprint(split_lowerstring(\"HelloWorld\"))  # Output: ['Hello', 'World']\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpfet_ear8.py\", line 23\n    try: split_lowerstring(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    # Check if the input is a string\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Use regular expression to find sequences of lowercase letters joined with an underscore\n    pattern = r'[a-z]+_[a-z]+'\n    matches = re.findall(pattern, text)\n    \n    return matches\n\n# Example usage:\ntry:\n    result = text_lowercase_underscore(\"hello_world this_is_python example_text\")\n    print(result)  # Output: ['hello_world', 'this_is_python', 'example_text']\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp70pze9_u.py\", line 16, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Parameters:\n    side_length (float): The length of one side of the square.\n\n    Returns:\n    float: The perimeter of the square.\n\n    Raises:\n    ValueError: If the input side length is negative.\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    \n    return 4 * side_length\n\n# Example usage:\ntry:\n    print(square_perimeter(5))  # Expected output: 20\n    print(square_perimeter(-3)) # This will raise an exception\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(str1, str2):\n    # Check if both inputs are strings\n    if not isinstance(str1, str) or not isinstance(str2, str):\n        raise TypeError(\"Both inputs must be strings\")\n    \n    # Remove characters from str1 which are present in str2\n    return ''.join([char for char in str1 if char not in str2])\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 19, "completion": "def test_duplicate(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise ValueError('Input must be a list')\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise ValueError('All elements in the list must be integers')\n    \n    # Use a set to track seen elements\n    seen = set()\n    \n    for num in arr:\n        if num in seen:\n            return True  # Duplicate found\n        seen.add(num)\n    \n    return False  # No duplicates found\n\n# Example usage:\ntry:\n    print(test_duplicate([1, 2, 3, 4, 5]))  # Output: False\n    print(test_duplicate([1, 2, 3, 3, 4]))  # Output: True\n    print(test_duplicate(\"not a list\"))      # This will raise an error\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpbc66ufhm.py\", line 26, in <module>\n    test_duplicate(None)\n  File \"/tmp/tmpbc66ufhm.py\", line 4, in test_duplicate\n    raise ValueError('Input must be a list')\nValueError: Input must be a list", "passed": false}
{"task_id": 20, "completion": "def is_woodall(num):\n    # Check if the input is an integer\n    if not isinstance(num, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    # Check if the number is non-negative\n    if num < 0:\n        return False\n    \n    # Check if the number is zero (which is not a Woodall number)\n    if num == 0:\n        return False\n    \n    # Iterate over possible values of n\n    n = 1\n    while True:\n        woodall_number = n * 2**n - 1\n        if woodall_number == num:\n            return True\n        elif woodall_number > num:\n            return False\n        n += 1\n\n# Example usage:\ntry:\n    print(is_woodall(7))  # True, because 3 * 2^3 - 1 = 7\n    print(is_woodall(15)) # False, 15 is not a Woodall number\n    print(is_woodall(-1)) # False, negative numbers are not Woodall numbers\n    print(is_woodall(0))  # False, zero is not a Woodall number\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 21, "completion": "def multiples_of_num(m, n):\n    # Check if either m or n is negative\n    if m < 0 or n < 0:\n        raise ValueError(\"Both m and n must be non-negative integers.\")\n    \n    # Initialize an empty list to store the multiples\n    result = []\n    \n    # Calculate the first m multiples of n\n    for i in range(1, m + 1):\n        result.append(i * n)\n    \n    return result\n\n# Example usage:\ntry:\n    print(multiples_of_num(5, 3))  # Output: [3, 6, 9, 12, 15]\n    print(multiples_of_num(4, -2)) # This will raise a ValueError\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 22, "completion": "def find_first_duplicate(lst):\n    # Check if the input is a list\n    if not isinstance(lst, list):\n        raise TypeError('Input must be a list')\n        \n    # Create an empty set to store unique elements\n    seen = set()\n    \n    for num in lst:\n        # Check if the current number is already in the set\n        if num in seen:\n            return num\n        else:\n            seen.add(num)\n            \n    # If no duplicates were found, return None\n    return None\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjscoaly3.py\", line 16, in <module>\n    assert find_first_duplicate([1, 2, 3, 4])==-1\nAssertionError", "passed": false}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists):\n    # Check if the input is a list of lists\n    if not all(isinstance(sublist, list) for sublist in list_of_lists):\n        raise TypeError(\"Input must be a list of lists\")\n    \n    max_sum = float('-inf')\n    for sublist in list_of_lists:\n        # Check if each sublist contains only integers\n        if not all(isinstance(num, int) for num in sublist):\n            raise TypeError(\"All sublists must contain only integers\")\n        \n        # Calculate the sum of current sublist\n        sublist_sum = sum(sublist)\n        \n        # Update max_sum if current sublist sum is greater\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n    \n    return max_sum\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmp_vgtmb89.py\", line 19\n    try: maximum_sum([[1, 2], [3, 'a']]); assert False, 'Expected TypeError' except TypeError: pass\n                                                                             ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 24, "completion": "def binary_to_decimal(binary_str):\n    # Check if the input string is a valid binary number\n    if not all(char in '01' for char in binary_str):\n        raise ValueError(\"Invalid binary number\")\n    \n    # Convert the binary string to decimal\n    decimal_value = 0\n    length = len(binary_str)\n    \n    for i, char in enumerate(reversed(binary_str)):\n        decimal_value += int(char) * (2 ** i)\n    \n    return decimal_value\n\n# Example usage:\ntry:\n    print(binary_to_decimal('1101'))  # Output: 13\n    print(binary_to_decimal('1001'))  # Output: 9\n    print(binary_to_decimal('2'))     # This will raise a ValueError\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpf20uc1hi.py\", line 21\n    try: binary_to_decimal('102'); assert False, 'Expected ValueError' except ValueError as e: assert str(e) == 'Invalid binary number'\n                                                                       ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 25, "completion": "def find_product(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if all elements in the list are integers\n    for element in arr:\n        if not isinstance(element, int):\n            raise TypeError(\"All elements in the list must be integers\")\n    \n    # Create a dictionary to count occurrences of each element\n    count_dict = {}\n    for element in arr:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n    \n    # Calculate the product of non-repeated elements\n    product = 1\n    has_non_repeated = False\n    for element, count in count_dict.items():\n        if count == 1:\n            product *= element\n            has_non_repeated = True\n    \n    # If there are no non-repeated elements, return None\n    if not has_non_repeated:\n        return None\n    \n    return product\n\n# Example usage:\ntry:\n    result = find_product([2, 3, 4, 2, 5])\n    print(result)  # Output: 60 (since 3 * 4 * 5 = 60)\nexcept TypeError as e:\n    print(e)\n\ntry:\n    result = find_product([1, 2, 2, 3, 3, 4, 4])\n    print(result)  # Output: None (no non-repeated elements)\nexcept TypeError as e:\n    print(e)\n\ntry:\n    result = find_product([1, 'a', 3, 4])\n    print(result)\nexcept TypeError as e:\n    print(e)  # Output: All elements in the list must be integers\n\ntry:\n    result = find_product('not a list')\n    print(result)\nexcept TypeError as e:\n    print(e)  # Output: Input must be a list\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp01m_r928.py\", line 48, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(input_list, k):\n    # Check if the input is a list\n    if not isinstance(input_list, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if each element in the list is a tuple\n    for item in input_list:\n        if not isinstance(item, tuple):\n            raise TypeError(\"All items in the list must be tuples\")\n\n    # Check if k is an integer\n    if not isinstance(k, int):\n        raise TypeError(\"k must be an integer\")\n    \n    # Check if all tuples have k elements\n    for tup in input_list:\n        if len(tup) != k:\n            return False\n    \n    return True\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpc_fy4tfl.py\", line 17, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "completion": "import re\n\ndef remove(lst):\n    # Check if the input is a list\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    for item in lst:\n        # Check if the item is a string\n        if not isinstance(item, str):\n            raise TypeError(f\"All elements in the list must be strings, but found {type(item).__name__}\")\n        \n        # Remove digits using regular expression\n        cleaned_item = re.sub(r'\\d', '', item)\n        result.append(cleaned_item)\n    \n    return result\n\n# Example usage:\ntry:\n    input_list = [\"hello123\", \"world456\", \"test789\"]\n    output_list = remove(input_list)\n    print(output_list)  # Output: ['hello', 'world', 'test']\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 28, "completion": "def binomial_coeff(n, k):\n    # Check if inputs are non-negative integers\n    if not isinstance(n, int) or not isinstance(k, int):\n        raise TypeError(\"Both n and k must be integers\")\n    \n    if n < 0 or k < 0:\n        raise ValueError(\"Inputs must be non-negative\")\n    \n    # Check if k is greater than n\n    if k > n:\n        raise ValueError(\"k must not be greater than n\")\n    \n    # Initialize a table to store intermediate results\n    dp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n    \n    # Fill the table using bottom-up dynamic programming\n    for i in range(n + 1):\n        for j in range(min(i, k) + 1):\n            if j == 0 or j == i:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n    \n    return dp[n][k]\n\n# Example usage:\ntry:\n    print(binomial_coeff(5, 2))  # Output: 10\n    print(binomial_coeff(6, 3))  # Output: 20\n    print(binomial_coeff(-1, 2)) # This will raise an exception\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpfsyht83y.py\", line 30, in <module>\n    try: binomial_coeff(-1, 2)\n  File \"/tmp/tmpfsyht83y.py\", line 6, in binomial_coeff\n    raise ValueError(\"Inputs must be non-negative\")\nValueError: Inputs must be non-negative\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpfsyht83y.py\", line 31, in <module>\n    except ValueError as e: assert str(e) == 'Inputs must be non-negative and k must not be greater than n'\nAssertionError", "passed": false}
{"task_id": 29, "completion": "def get_odd_occurrence(lst):\n    # Check if the input is a list\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in lst):\n        raise TypeError(\"All elements in the list must be integers\")\n    \n    # Dictionary to store the count of each element\n    count_dict = {}\n    \n    # Count occurrences of each element\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Find the element with an odd occurrence\n    for num, count in count_dict.items():\n        if count % 2 != 0:\n            return num\n    \n    # If no such element is found (though this case shouldn't happen with valid inputs)\n    return None\n\n# Example usage:\ntry:\n    result = get_odd_occurrence([1, 2, 3, 2, 3, 1, 3])\n    print(result)  # Output: 3\nexcept TypeError as e:\n    print(e)\n\ntry:\n    result = get_odd_occurrence([4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 4, 5, 6, 7, 8, 9, 10, 11])\n    print(result)  # Output: 12\nexcept TypeError as e:\n    print(e)\n\ntry:\n    result = get_odd_occurrence([1, 2, 'a', 3])\n    print(result)\nexcept TypeError as e:\n    print(e)  # Output: All elements in the list must be integers\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0cos15vm.py\", line 38, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    # Check if the input is a string\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n\n    count = 0\n\n    # Iterate over all possible lengths of substrings\n    for length in range(1, len(s) + 1):\n        # Iterate over all possible starting positions of substrings\n        for start in range(len(s) - length + 1):\n            substring = s[start:start+length]\n            # If the first and last character of the substring are equal, increment count\n            if substring[0] == substring[-1]:\n                count += 1\n\n    return count\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpwh6_b2vi.py\", line 18\n    try: count_substring_with_equal_ends(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                                  ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 31, "completion": "import heapq\n\ndef func(lists, k):\n    # Flatten the list of lists and count the frequency of each integer.\n    counts = {}\n    for lst in lists:\n        for num in lst:\n            counts[num] = counts.get(num, 0) + 1\n    \n    # If k is greater than the number of distinct integers, raise a ValueError.\n    if k > len(counts):\n        raise ValueError('k cannot be greater than the number of distinct integers')\n    \n    # Use a min-heap to keep track of the top k integers.\n    heap = []\n    for num, count in counts.items():\n        # If the heap has less than k elements, add the current element.\n        if len(heap) < k:\n            heapq.heappush(heap, (count, num))\n        else:\n            # Otherwise, only add the current element if it's larger than the smallest element in the heap.\n            if count > heap[0][0]:\n                heapq.heapreplace(heap, (count, num))\n\n    # Return the elements in the heap, which are the top k integers.\n    return [num for count, num in sorted(heap, reverse=True)]\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxpviffq1.py\", line 23, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    # Check if the input is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError('Input must be a positive integer')\n    \n    # Initialize the maximum prime factor variable\n    max_prime = -1\n\n    # Divide n by 2 until it's odd\n    while n % 2 == 0:\n        max_prime = 2\n        n //= 2\n\n    # Now we know n must be odd, start from 3 and check for factors\n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i == 0:\n            max_prime = i\n            n //= i\n\n    # If n is still greater than 2 then it's the largest prime factor\n    if n > 2:\n        max_prime = n\n\n    return max_prime\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(decimal_number):\n    # Check if the input is a non-negative integer\n    if not isinstance(decimal_number, int) or decimal_number < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    # Handle the special case where the input is 0\n    if decimal_number == 0:\n        return \"0\"\n    \n    binary_number = \"\"\n    while decimal_number > 0:\n        remainder = decimal_number % 2\n        binary_number = str(remainder) + binary_number\n        decimal_number //= 2\n    \n    return binary_number\n\n# Example usage:\ntry:\n    print(decimal_to_binary(10))  # Output: \"1010\"\n    print(decimal_to_binary(0))   # Output: \"0\"\n    print(decimal_to_binary(-5))  # This will raise a ValueError\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpn97glpv6.py\", line 21, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "completion": "def find_missing(arr):\n    # Check if the array is sorted\n    if not all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1)):\n        raise ValueError('Input list must be sorted.')\n    \n    # Initialize the binary search bounds\n    left, right = 0, len(arr) - 1\n    \n    # Perform binary search\n    while left <= right:\n        mid = (left + right) // 2\n        \n        # Check if the middle element is at its correct position\n        if arr[mid] == mid:\n            left = mid + 1\n        else:\n            # Check if the previous element is at its correct position\n            if mid == 0 or arr[mid - 1] == mid - 1:\n                return mid\n            right = mid - 1\n    \n    # If no missing number is found in the middle of the array\n    return len(arr)\n\n# Example usage:\ntry:\n    print(find_missing([0, 1, 2, 3, 4, 6]))  # Output: 5\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(find_missing([0, 1, 2, 3, 5, 6]))  # Output: 4\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(find_missing([0, 1, 3, 4, 5, 6]))  # Output: 2\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8s0emss1.py\", line 33, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    # Check if the input is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    # Calculate the n-th rectangular number\n    return n * (n + 1) // 2\n\n# Example usage:\ntry:\n    print(find_rect_num(5))  # Output: 15\n    print(find_rect_num(-3)) # This will raise an error\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmps8wxbuj2.py\", line 13, in <module>\n    assert find_rect_num(4) == 20\nAssertionError", "passed": false}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator):\n    if denominator == 0:\n        raise ValueError('Denominator cannot be zero')\n    \n    remainder = numerator % denominator\n    digits = []\n    while remainder != 0 and len(digits) < n:\n        remainder *= 10\n        digit = remainder // denominator\n        digits.append(digit)\n        remainder %= denominator\n\n    return digits[n-1] if n <= len(digits) else None\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp976497pb.py\", line 12, in <module>\n    assert find_nth_digit(1,2,1) == 5\nTypeError: find_nth_digit() takes 2 positional arguments but 3 were given", "passed": false}
{"task_id": 37, "completion": "def sort_mixed_list(lst):\n    # Check if the input is a list\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Initialize two lists for sorting\n    int_list = []\n    str_list = []\n    \n    # Iterate through the input list\n    for item in lst:\n        # Check if the element is an integer\n        if isinstance(item, int):\n            int_list.append(item)\n        # Check if the element is a string\n        elif isinstance(item, str):\n            str_list.append(item)\n        else:\n            raise TypeError(\"List can only contain integers and strings\")\n    \n    # Sort the integer list\n    int_list.sort()\n    \n    # Sort the string list\n    str_list.sort()\n    \n    # Concatenate the sorted lists\n    result = int_list + str_list\n    \n    return result\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 38, "completion": "def div_even_odd(lst):\n    # Initialize variables to store the first even and odd numbers found\n    first_even = None\n    first_odd = None\n    \n    # Iterate through the list to find the first even and odd numbers\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        elif first_odd is None and num % 2 != 0:\n            first_odd = num\n        \n        # If both even and odd numbers have been found, break out of the loop\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Check if both even and odd numbers were found\n    if first_even is None or first_odd is None:\n        raise ValueError('List must contain at least one even and one odd number.')\n    \n    # Return the division of the first even and odd numbers\n    return first_even / first_odd\n\n# Example usage:\ntry:\n    result = div_even_odd([3, 5, 7, 2, 8])\n    print(\"Result:\", result)\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpapbknsku.py\", line 28\n    try: div_even_odd([2, 4, 6]); assert False; except ValueError as e: assert str(e) == 'List must contain at least one even and one odd number.'\n                                                ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 39, "completion": "import heapq\n\ndef rearange_string(s):\n    # Check if s is a string\n    if not isinstance(s, str):\n        raise ValueError('Input must be a string')\n    \n    # Check if all characters in s are lowercase letters\n    if not s.islower():\n        raise ValueError('String must contain only lowercase letters')\n\n    count = {}\n    for char in s:\n        count[char] = count.get(char, 0) + 1\n    \n    heap = [(-freq, char) for char, freq in count.items()]\n    heapq.heapify(heap)\n    \n    prev_freq, prev_char = None, None\n    result = []\n    \n    while heap:\n        freq, char = heapq.heappop(heap)\n        \n        if prev_freq is not None:\n            heapq.heappush(heap, (prev_freq, prev_char))\n        \n        result.append(char)\n        prev_freq, prev_char = freq + 1, char\n        \n        if not heap and prev_freq != 0:\n            raise ValueError('Cannot rearrange string to meet criteria')\n    \n    return ''.join(result)\n", "requirement": "Exception Handling", "result": "timed out", "passed": false}
{"task_id": 40, "completion": "from collections import Counter\n\ndef freq_element(input_list):\n    # Check if the input is a list of lists\n    if all(isinstance(sublist, list) for sublist in input_list):\n        # Flatten the list of lists into a single list\n        flattened_list = [item for sublist in input_list for item in sublist]\n        # Use Counter to count the frequency of each element\n        return dict(Counter(flattened_list))\n    else:\n        raise TypeError('Input should be a list of lists')\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpo223_6y5.py\", line 14\n    try: freq_element('not a list'); assert False; except TypeError: assert True\n                                                   ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 41, "completion": "def filter_evennumbers(numbers):\n    if isinstance(numbers, list) and all(isinstance(i, int) for i in numbers):\n        return list(filter(lambda x: x % 2 == 0, numbers))\n    else:\n        raise TypeError(\"Input must be a list of integers.\")\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 42, "completion": "def find_sum(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n\n    # Initialize a dictionary to store the count of each element\n    counts = {}\n\n    # Iterate over each item in the list\n    for num in arr:\n        # If the number is already in the dictionary, increment its count\n        if num in counts:\n            counts[num] += 1\n        # Otherwise, add the number to the dictionary with a count of 1\n        else:\n            counts[num] = 1\n\n    # Initialize a variable to store the sum of repeated elements\n    total_sum = 0\n\n    # Iterate over the items in the dictionary\n    for num, count in counts.items():\n        # If the count is greater than 1, this means the element was repeated\n        if count > 1:\n            # Add the repeated element to the total sum\n            total_sum += num * count\n\n    return total_sum\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1yerh45b.py\", line 24, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    # Check if the input is a string\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Define the regex pattern for sequences of lowercase letters joined with an underscore\n    pattern = r'^[a-z]+_[a-z]+$'\n    \n    # Search for the pattern in the input text\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\n# Example usage:\ntry:\n    print(text_match(\"hello_world\"))  # Should return True\n    print(text_match(\"Hello_World\"))  # Should raise an error\n    print(text_match(12345))          # Should raise an error\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpz6fv7yww.py\", line 20, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 44, "completion": "import re\n\ndef text_match_string(input_string):\n    # Check if the input is a string\n    if not isinstance(input_string, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Regular expression to match a word at the beginning of the string\n    pattern = r'^\\w+'\n    \n    # Search for the pattern in the input string\n    match = re.match(pattern, input_string)\n    \n    if match:\n        return True\n    else:\n        return False\n\n# Example usage:\ntry:\n    print(text_match_string(\"Hello world\"))  # Should return True\n    print(text_match_string(\"hello world\"))  # Should return False\n    print(text_match_string(12345))          # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpycbeblda.py\", line 24\n    try: text_match_string(123); assert False, 'TypeError not raised' except TypeError: pass\n                                                                      ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 45, "completion": "import math\n\ndef get_gcd(numbers):\n    if not numbers:\n        raise ValueError('Input list cannot be empty.')\n    \n    # Use reduce from functools to apply math.gcd across all elements\n    from functools import reduce\n    return reduce(math.gcd, numbers)\n\n# Example usage:\ntry:\n    result = get_gcd([12, 24, 36])\n    print(\"GCD:\", result)\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 46, "completion": "def test_distinct(lst):\n    # Check if the input is a list\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Check if all elements in the list are integers\n    for item in lst:\n        if not isinstance(item, int):\n            raise TypeError(\"All elements in the list must be integers.\")\n    \n    # Use a set to check for distinct elements\n    unique_elements = set(lst)\n    \n    # If the length of the set is equal to the length of the list,\n    # then all elements are distinct\n    return len(unique_elements) == len(lst)\n\n# Example usage:\ntry:\n    print(test_distinct([1, 2, 3, 4]))  # Should return True\n    print(test_distinct([1, 2, 2, 4]))  # Should return False\n    print(test_distinct([1, 2, 'a', 4]))  # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 47, "completion": "def compute_last_digit(a, b):\n    # Raise ValueError if a > b\n    if a > b:\n        raise ValueError('a should not be greater than b')\n\n    # Initialize result\n    res = 1\n\n    # Compute last digit in factorial of all numbers from a+1 to b\n    for i in range(a + 1, b + 1):\n        res = (res * (i % 10)) % 10\n\n    return res\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 48, "completion": "def odd_bit_set_number(num):\n    # Check if the input is an integer\n    if not isinstance(num, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    # Initialize variables\n    result = 0\n    bit_position = 0\n    \n    # Iterate through each bit position\n    while num >> bit_position:\n        # Set the bit at the current odd position\n        if bit_position % 2 == 0:\n            result |= (1 << bit_position)\n        \n        bit_position += 1\n    \n    return result\n\n# Example usage:\ntry:\n    print(odd_bit_set_number(10))  # Output will be 15\nexcept TypeError as e:\n    print(e)\n\ntry:\n    print(odd_bit_set_number('a'))  # This will raise a TypeError\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0cdk_3ob.py\", line 24, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(two_d_list, index=0):\n    \"\"\"\n    Extracts every first or specified element from a given two-dimensional list.\n    \n    Parameters:\n    - two_d_list: A two-dimensional list (list of lists).\n    - index: The index of the elements to be extracted from each sublist. Default is 0 (first element).\n    \n    Returns:\n    - A list containing the specified elements from each sublist.\n    \n    Raises:\n    - IndexError: If the specified index is out of range for any sublist.\n    \"\"\"\n    result = []\n    for sublist in two_d_list:\n        try:\n            result.append(sublist[index])\n        except IndexError:\n            raise IndexError(f\"Index out of range for sublist: {sublist}\")\n    return result\n\n# Example usage:\ntwo_d_list = [\n    [1, 2, 3],\n    [4, 5],\n    [6, 7, 8, 9]\n]\n\ntry:\n    print(specified_element(two_d_list))  # Output: [1, 4, 6]\n    print(specified_element(two_d_list, 1))  # Output: [2, 5, 7]\nexcept IndexError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpp5vspwce.py\", line 5, in specified_element\n    result.append(sublist[index])\nIndexError: list index out of range\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpp5vspwce.py\", line 23, in <module>\n    try: specified_element([[1, 2], [3, 4]], 3)\n  File \"/tmp/tmpp5vspwce.py\", line 7, in specified_element\n    raise IndexError(f\"Index out of range for sublist: {sublist}\")\nIndexError: Index out of range for sublist: [1, 2]\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpp5vspwce.py\", line 24, in <module>\n    except IndexError as e: assert str(e) == 'Index out of range for sublist'\nAssertionError", "passed": false}
{"task_id": 50, "completion": "def min_length_list(list_of_lists):\n    # Check if the input is a list of lists\n    if not all(isinstance(sublist, list) for sublist in list_of_lists):\n        raise ValueError('Input must be a list of lists.')\n\n    # Find and return the list with minimum length\n    return min(list_of_lists, key=lambda x: len(x))\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpsl1dgkiu.py\", line 7, in <module>\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nAssertionError", "passed": false}
{"task_id": 51, "completion": "def check_equilateral(a, b, c):\n    # Check if all sides are positive integers\n    if not (isinstance(a, int) and isinstance(b, int) and isinstance(c, int)) or \\\n       a <= 0 or b <= 0 or c <= 0:\n        raise ValueError(\"All sides must be positive integers\")\n\n    # Check if the triangle is equilateral\n    if a == b == c:\n        print(\"The triangle is equilateral\")\n    else:\n        print(\"The triangle is not equilateral\")\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpt8hmc0ut.py\", line 11, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    # Check if both inputs are numbers (int or float)\n    if not isinstance(base, (int, float)) or not isinstance(height, (int, float)):\n        raise TypeError(\"Both base and height must be numerical values.\")\n    \n    # Calculate the area of the parallelogram\n    area = base * height\n    \n    return area\n\n# Example usage:\ntry:\n    print(parallelogram_area(5, 3))  # Expected output: 15\n    print(parallelogram_area(4.5, 2))  # Expected output: 9.0\n    print(parallelogram_area('a', 3))  # This will raise a TypeError\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(input_string):\n    # Check if the input is a string\n    if not isinstance(input_string, str):\n        raise TypeError('Input must be a string')\n    \n    # Check if the first and last characters are equal\n    return input_string[0] == input_string[-1]\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpys1dzsnq.py\", line 7, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 54, "completion": "def counting_sort(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements in the list must be integers\")\n    \n    # If the list is empty, return it as is\n    if len(arr) == 0:\n        return arr\n    \n    # Find the maximum value in the list to determine the size of the count array\n    max_val = max(arr)\n    \n    # Initialize the count array with zeros\n    count = [0] * (max_val + 1)\n    \n    # Populate the count array\n    for num in arr:\n        count[num] += 1\n    \n    # Sort the array based on the count array\n    sorted_index = 0\n    for i in range(max_val + 1):\n        while count[i] > 0:\n            arr[sorted_index] = i\n            sorted_index += 1\n            count[i] -= 1\n    \n    return arr\n\n# Example usage:\ntry:\n    print(counting_sort([4, 2, 2, 8, 3, 3, 1]))\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 55, "completion": "def tn_gp(a, r, n):\n    \"\"\"\n    Calculate the n-th term of a geometric series.\n    \n    Parameters:\n    a (float): The first term of the geometric series.\n    r (float): The common ratio of the geometric series.\n    n (int): The term number to find.\n    \n    Returns:\n    float: The n-th term of the geometric series.\n    \n    Raises:\n    ValueError: If the term number (n) is less than 1.\n    \"\"\"\n    if n < 1:\n        raise ValueError('Term number must be greater than 0')\n    \n    # Calculate the n-th term using the formula a * r^(n-1)\n    nth_term = a * (r ** (n - 1))\n    \n    return nth_term\n\n# Example usage:\na = 2  # First term\nr = 3  # Common ratio\nn = 5  # Term number to find\n\ntry:\n    result = tn_gp(a, r, n)\n    print(f\"The {n}-th term of the geometric series is: {result}\")\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp54wr2pt4.py\", line 16, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def reverse_number(n):\n    \"\"\"Helper function to reverse the digits of a number.\"\"\"\n    reversed_n = 0\n    while n > 0:\n        reversed_n = reversed_n * 10 + n % 10\n        n //= 10\n    return reversed_n\n\ndef check(n):\n    \"\"\"Function to check if a given number is one less than twice its reverse.\"\"\"\n    \n    # Check if the input is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    # Calculate the reverse of the number\n    reversed_n = reverse_number(n)\n    \n    # Check the condition\n    return n == 2 * reversed_n - 1\n\n# Example usage:\ntry:\n    print(check(34))  # Should return True because 2*43-1=85\n    print(check(12))  # Should return False\n    print(check('abc'))  # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 57, "completion": "def find_max_num(digits, num_digits):\n    \"\"\"\n    Find the largest number that can be formed with the given digits.\n\n    Parameters:\n    digits (list): A list of integers representing the available digits.\n    num_digits (int): The number of digits to use in forming the number.\n\n    Returns:\n    int: The largest number that can be formed with the given digits.\n\n    Raises:\n    ValueError: If the number of digits specified is greater than the length of the list.\n    \"\"\"\n    # Check if the number of digits requested is greater than the length of the list\n    if num_digits > len(digits):\n        raise ValueError('Number of digits exceeds the length of the list.')\n    \n    # Sort the digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n    \n    # Form the largest number by concatenating the sorted digits\n    max_number = int(''.join(map(str, sorted_digits[:num_digits])))\n    \n    return max_number\n\n# Example usage:\ndigits = [3, 1, 4, 2]\nnum_digits = 3\nprint(find_max_num(digits, num_digits))  # Output: 432\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 58, "completion": "def opposite_signs(a, b):\n    # Check if both inputs are integers\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise TypeError(\"Both inputs must be integers\")\n    \n    # If the product of the two numbers is negative, they have opposite signs\n    return (a * b) < 0\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 59, "completion": "def is_octagonal(n):\n    # Check if the input is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    # Calculate the nth octagonal number\n    return n * (3 * n - 2)\n\n# Example usage:\ntry:\n    print(is_octagonal(1))  # Output: 1\n    print(is_octagonal(2))  # Output: 5\n    print(is_octagonal(3))  # Output: 13\n    print(is_octagonal(-1)) # This will raise an error\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 60, "completion": "def max_len_sub(arr):\n    # Check if arr is a list and n is an integer\n    if not isinstance(arr, list) or not isinstance(n, int):\n        raise TypeError(\"Input must be a list and second parameter must be an integer\")\n\n    n = len(arr)\n    \n    # Create an array dp[] to store the result.\n    # dp[i] will hold the maximum length of the subsequence ending at index i\n    dp = [1]*n\n\n    # Initialize the maximum length as 0\n    max_length = 0\n    \n    # Traverse through the array\n    for i in range(1, n):\n        for j in range(i):\n            # If the difference between current element and previous element is equal to 1,\n            # then update dp[i]\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j]+1)\n\n        # Update the maximum length\n        max_length = max(max_length, dp[i])\n        \n    return max_length\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpt5wzeeed.py\", line 21, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}

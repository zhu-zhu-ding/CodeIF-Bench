{"task_id": 14, "completion": "def find_volume(base_area, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    - base_area (float): The area of the triangular base.\n    - height (float): The height of the triangular prism.\n    - length (float): The length of the triangular prism.\n\n    Returns:\n    - float: The volume of the triangular prism.\n    \"\"\"\n    if not all(isinstance(x, (int, float)) and x > 0 for x in [base_area, height, length]):\n        raise ValueError(\"All inputs must be positive numbers.\")\n    \n    volume = base_area * height * length\n    return volume\n\n# Example usage:\nbase_area = 5.5  # Example base area\nheight = 10.2    # Example height\nlength = 3.7     # Example length\n\nvolume = find_volume(base_area, height, length)\nprint(f\"The volume of the triangular prism is: {volume}\")\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4f4nplow.py\", line 12, in <module>\n    assert find_volume(10,8,6) == 240\nAssertionError", "passed": false}
{"task_id": 15, "completion": "import re\n\ndef split_lowerstring(s):\n    # Use regular expression to find segments where lowercase letters transition to uppercase letters or start of the string\n    result = re.findall('[a-z][^a-z]*', s)\n    return result\n\n# Example usage:\ninput_string = \"HelloWorldThisIsAString\"\nprint(split_lowerstring(input_string))\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    # Define the pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'^[a-z]+_[a-z]+$'\n    \n    # Use re.match() to check if the pattern matches the entire string\n    if re.match(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\nprint(text_lowercase_underscore('hello_world'))  # Output: Found a match!\nprint(text_lowercase_underscore('Hello_World'))  # Output: Not matched!\nprint(text_lowercase_underscore('helloWorld'))   # Output: Not matched!\nprint(text_lowercase_underscore('hello_world_2'))  # Output: Not matched!\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    # Check if the input is a non-negative integer\n    if not isinstance(side_length, int) or side_length < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    # Calculate the perimeter of the square\n    perimeter = 4 * side_length\n    \n    # Return the calculated perimeter\n    return perimeter\n\n# Example usage:\ntry:\n    print(square_perimeter(5))  # Output: 20\n    print(square_perimeter(0))  # Output: 0\n    print(square_perimeter(-3)) # This will raise an error\nexcept ValueError as e:\n    print(e)\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(str1, str2):\n    # Check if both strings contain only alphabetic characters\n    assert str1.isalpha() and str2.isalpha(), 'Input strings must only contain alphabetic characters.'\n    \n    # Create a set of characters in the second string\n    dirty_chars = set(str2)\n    \n    # Remove characters from the first string that are present in the second string\n    clean_str1 = ''.join(char for char in str1 if char not in dirty_chars)\n    \n    return clean_str1\n\n# Test the function\nprint(remove_dirty_chars(\"hello world\", \"ad\"))  # Output: \"hello worl\"\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpl_7c_ea9.py\", line 10, in <module>\n    print(remove_dirty_chars(\"hello world\", \"ad\"))  # Output: \"hello worl\"\n  File \"/tmp/tmpl_7c_ea9.py\", line 3, in remove_dirty_chars\n    assert str1.isalpha() and str2.isalpha(), 'Input strings must only contain alphabetic characters.'\nAssertionError: Input strings must only contain alphabetic characters.", "passed": false}
{"task_id": 19, "completion": "def test_duplicate(arr):\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    \n    return False\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(num):\n    # A Woodall number must be odd\n    if num % 2 == 0:\n        return False\n    \n    # Start with n = 1 and keep checking until we either find a match or exceed the number\n    n = 1\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        \n        if woodall_number > num:\n            break\n        \n        if woodall_number == num:\n            return True\n        \n        n += 1\n    \n    return False\n\n# Example usage:\nprint(is_woodall(7))   # Output: True\nprint(is_woodall(15))  # Output: True\nprint(is_woodall(31))  # Output: True\nprint(is_woodall(8))   # Output: False\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists):\n    max_sum = float('-inf')  # initialize max_sum as negative infinity\n\n    for sublist in list_of_lists:\n        current_sum = sum(sublist)  # calculate sum of each sublist\n        if current_sum > max_sum:  # check if current sum is greater than max_sum\n            max_sum = current_sum  # update max_sum\n\n    return max_sum\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 25, "completion": "def find_product(lst):\n    from collections import Counter\n    \n    # Count the frequency of each element\n    count = Counter(lst)\n    \n    # Initialize the product\n    product = 1\n    \n    # Iterate over each item in the dictionary\n    for key, value in count.items():\n        # If the frequency is 1 (non-repeated), multiply it to the product\n        if value == 1:\n            product *= key\n            \n    # Return the final product\n    return product\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpn10psu68.py\", line 14, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(tuples_list, k):\n    for tup in tuples_list:\n        if len(tup) != k:\n            return False\n    return True\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphyvcmgrc.py\", line 6, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 28, "completion": "def binomial_coeff(n, k):\n    # Edge cases\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    \n    # Create a 2D array to store intermediate results\n    dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    \n    # Fill the dp array using the recursive relation\n    for i in range(n+1):\n        for j in range(min(i, k)+1):\n            if j == 0 or j == i:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n    \n    return dp[n][k]\n\n# Example usage:\nn = 5\nk = 2\nprint(f\"C({n}, {k}) = {binomial_coeff(n, k)}\")  # Output: C(5, 2) = 10\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    n = len(s)\n    count = 0\n\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n\n    return count\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return max(factors)\n\n# Testing the function\nprint(max_prime_factors(13195))  # Output: 29\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 35, "completion": "def find_rect_num(n):\n    \"\"\"\n    Calculate the n-th rectangular number.\n\n    Parameters:\n    n (int): A positive integer representing the position in the sequence of rectangular numbers.\n\n    Returns:\n    int: The n-th rectangular number.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return n * (n + 1)\n\n# Example usage:\n# print(find_rect_num(1))  # Output: 2\n# print(find_rect_num(2))  # Output: 6\n# print(find_rect_num(3))  # Output: 12\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator):\n    # Initialize variables\n    remainder = numerator % denominator\n    count = 0\n    \n    # Loop until we reach the nth digit or start repeating\n    while remainder != 0:\n        remainder *= 10\n        digit = remainder // denominator\n        remainder %= denominator\n        \n        count += 1\n        if count == n:\n            return digit\n            \n    # If we exit the loop without returning, there's no nth digit\n    return -1\n\n# Test the function\nprint(find_nth_digit(1, 3))  # Output: 3 (1/3 = 0.333...)\nprint(find_nth_digit(2, 7))  # Output: 8 (2/7 = 0.285714285714...)\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpd84ju0my.py\", line 16, in <module>\n    print(find_nth_digit(1, 3))  # Output: 3 (1/3 = 0.333...)\n  File \"/tmp/tmpd84ju0my.py\", line 11, in find_nth_digit\n    if count == n:\nNameError: name 'n' is not defined", "passed": false}
{"task_id": 38, "completion": "def div_even_odd(numbers):\n    # Find the first even number\n    first_even = next((n for n in numbers if n % 2 == 0), None)\n    \n    # Find the first odd number\n    first_odd = next((n for n in numbers if n % 2 != 0), None)\n    \n    # If either the first even or odd number doesn't exist, return None\n    if first_even is None or first_odd is None:\n        return None\n    \n    # Return the division of the first even number by the first odd number\n    return first_even / first_odd\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 39, "completion": "from collections import Counter\nimport heapq\n\ndef rearrange_string(s):\n    # Count the frequency of each character in the string\n    count = Counter(s)\n    \n    # Create a max heap based on the frequency of each character\n    max_heap = [(-freq, char) for char, freq in count.items()]\n    heapq.heapify(max_heap)\n\n    prev_freq, prev_char = None, None\n    result = []\n    \n    while max_heap or prev_freq:\n        if prev_freq:\n            heapq.heappush(max_heap, (prev_freq, prev_char))\n        \n        freq, char = heapq.heappop(max_heap)\n        result.append(char)\n        prev_char, prev_freq = char, freq + 1\n    \n    return ''.join(result) if len(result) == len(s) else \"Not possible\"\n\n# Testing\nprint(rearrange_string(\"aab\"))  # returns \"aba\"\nprint(rearrange_string(\"aaab\"))  # returns \"Not possible\"\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0ud9y6j2.py\", line 21, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 42, "completion": "def find_sum(arr):\n    # Create a dictionary to store the frequency of each element\n    freq = {}\n    \n    # Iterate through the array and count the frequency of each element\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Calculate the sum of elements that appear more than once\n    repeated_sum = 0\n    for num, count in freq.items():\n        if count > 1:\n            repeated_sum += num * count\n    \n    return repeated_sum\n\n# Example usage:\narr = [1, 2, 3, 2, 4, 5, 5, 6]\nprint(find_sum(arr))  # Output: 17 (2 + 2 + 5 + 5)\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpf44dq0r3.py\", line 19, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    pattern = r'^[a-z]+_[a-z]+$'\n    \n    if re.match(pattern, text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'\n\n# Test cases\nprint(text_match(\"hello_world\"))  # Should return 'Matched!'\nprint(text_match(\"Hello_World\"))  # Should return 'Not matched!'\nprint(text_match(\"helloWorld\"))   # Should return 'Not matched!'\nprint(text_match(\"hello_\"))       # Should return 'Not matched!'\nprint(text_match(\"_world\"))       # Should return 'Not matched!'\nprint(text_match(\"hello_world_2\")) # Should return 'Not matched!'\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpnqo6bhff.py\", line 15, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 46, "completion": "def test_distinct(numbers):\n    # Convert the list to a set to remove duplicates\n    unique_numbers = set(numbers)\n    \n    # Compare the length of the set with the original list\n    # If they are equal, all elements were unique\n    return len(unique_numbers) == len(numbers)\n\n# Example usage:\nnumbers_list = [1, 2, 3, 4, 5]\nprint(test_distinct(numbers_list))  # Output: True\n\nnumbers_list_with_duplicates = [1, 2, 3, 3, 5]\nprint(test_distinct(numbers_list_with_duplicates))  # Output: False\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 48, "completion": "def odd_bit_set_number(n):\n    # Initialize a mask with all odd bits set to 1\n    mask = 0\n    \n    # Determine the number of bits needed for the mask\n    num_bits = n.bit_length()\n    \n    # Set all odd bits in the mask\n    for i in range(0, num_bits, 2):\n        mask |= (1 << i)\n    \n    # Use bitwise OR to set all odd bits in the original number\n    result = n | mask\n    \n    return result\n\n# Example usage:\nprint(odd_bit_set_number(5))  # Output: 7\nprint(odd_bit_set_number(10)) # Output: 15\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 49, "completion": "def specified_element(lst, index):\n    # Check if the input list is empty\n    if not lst:\n        return []\n    \n    # Extract the specified element from each sublist\n    result = [sublist[index] for sublist in lst]\n    \n    return result\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 50, "completion": "def min_length_list(lists):\n    # Use the min function with key parameter as len to find the list with minimum length\n    # The min function will return the list with the minimum length\n    min_list = min(lists, key=len)\n    \n    # Get the length of the minimum list\n    min_length = len(min_list)\n    \n    # Return a tuple containing the length of the shortest list and the list itself\n    return (min_length, min_list)\n\n# Example usage:\nlists = [[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]\nresult = min_length_list(lists)\nprint(result)  # Output: (1, [6])\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram.\n    \"\"\"\n    if base <= 0 or height <= 0:\n        raise ValueError(\"Both base and height must be positive numbers.\")\n    \n    area = base * height\n    return area\n\n# Example usage:\nbase = 5\nheight = 3\nprint(f\"The area of the parallelogram with base {base} and height {height} is {parallelogram_area(base, height)}\")\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpp2kacfd0.py\", line 14, in <module>\n    assert parallelogram_area(0, 10) == 0\n  File \"/tmp/tmpp2kacfd0.py\", line 3, in parallelogram_area\n    raise ValueError(\"Both base and height must be positive numbers.\")\nValueError: Both base and height must be positive numbers.", "passed": false}
{"task_id": 53, "completion": "def check_equality(s):\n    # Check if the input is a string\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string\")\n    \n    # Get the first and last characters of the string\n    first_char = s[0] if s else None\n    last_char = s[-1] if s else None\n    \n    # Compare the first and last characters\n    if first_char == last_char:\n        return 'Equal'\n    else:\n        return 'Not Equal'\n\n# Example usage:\nprint(check_equality(\"radar\"))  # Output: Equal\nprint(check_equality(\"hello\"))  # Output: Not Equal\nprint(check_equality(\"\"))       # Output: Not Equal (empty string)\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 54, "completion": "def counting_sort(arr):\n    if not arr:  # If the array is empty, return it as is\n        return arr\n    \n    # Find the maximum value in the array to determine the size of the count array\n    max_val = max(arr)\n    \n    # Initialize the count array with zeros\n    count_array = [0] * (max_val + 1)\n    \n    # Populate the count array where each index represents a number and its value is the frequency of that number in the input array\n    for num in arr:\n        count_array[num] += 1\n    \n    # Reconstruct the sorted array based on the count array\n    sorted_index = 0\n    for i, count in enumerate(count_array):\n        for _ in range(count):\n            arr[sorted_index] = i\n            sorted_index += 1\n    \n    return arr\n\n# Example usage:\ninput_array = [4, 2, 2, 8, 3, 3, 1]\nsorted_array = counting_sort(input_array)\nprint(sorted_array)  # Output: [1, 2, 2, 3, 3, 4, 8]\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 57, "completion": "def find_max_num(digits, n):\n    # Convert each digit into string so we can sort them easily.\n    digits = [str(i) for i in digits]\n\n    # Sort digits in descending order.\n    digits.sort(reverse=True)\n\n    # Combine sorted digits to form the largest number.\n    max_num = int(''.join(digits))\n\n    return max_num\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 58, "completion": "def opposite_signs(a, b):\n    # Check if the product of a and b is negative\n    return (a ^ b) < 0\n\n# Example usage:\nprint(opposite_signs(5, -3))  # Output: True\nprint(opposite_signs(-4, 2))  # Output: True\nprint(opposite_signs(7, 9))   # Output: False\nprint(opposite_signs(-1, -2)) # Output: False\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 60, "completion": "def max_len_sub(arr, diff):\n    # Initialize a list to store the maximum length subsequence ending at each index\n    dp = [1] * len(arr)\n    \n    # Iterate through the array starting from the second element\n    for i in range(1, len(arr)):\n        # Check all previous elements to see if they can form a valid subsequence\n        for j in range(i):\n            # If the difference is within the allowed limit and it forms a longer subsequence\n            if abs(arr[i] - arr[j]) <= diff and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    \n    # The result will be the maximum value in the dp array\n    return max(dp)\n\n# Example usage:\narr = [1, 5, 8, 3, 2, 4]\ndiff = 4\nprint(max_len_sub(arr, diff))  # Output: 3 (subsequence could be [1, 3, 4])\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjn4rxc_1.py\", line 17, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nAssertionError", "passed": false}

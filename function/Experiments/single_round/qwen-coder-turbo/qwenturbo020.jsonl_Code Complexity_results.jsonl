{"task_id": 11, "completion": "def remove_occ(s, char):\n    # Find the index of the first occurrence\n    first_index = s.find(char)\n    \n    if first_index != -1:\n        # Remove the first occurrence\n        s = s[:first_index] + s[first_index+1:]\n        \n        # Find the index of the last occurrence\n        last_index = s.rfind(char)\n        \n        if last_index != -1:\n            # Remove the last occurrence\n            s = s[:last_index] + s[last_index+1:]\n    \n    return s\n\n# Example usage:\ninput_string = \"hello world\"\ncharacter_to_remove = \"o\"\nresult = remove_occ(input_string, character_to_remove)\nprint(result)  # Output: \"hell wrld\"\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 14, "completion": "def find_volume(base, height_of_triangle, height_of_prism):\n    return (0.5 * base * height_of_triangle) * height_of_prism\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 15, "completion": "def split_lowerstring(s):\n    return ''.join(c for c in s if c.islower())\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpf9ahxxea.py\", line 3, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    # Regular expression pattern for lowercase letters joined with an underscore\n    pattern = r'[a-z]+_[a-z]+'\n    \n    # Find all matches in the text\n    matches = re.findall(pattern, text)\n    \n    return matches\n\n# Example usage:\ntext = \"hello_world this_is_python\"\nresult = text_lowercase_underscore(text)\nprint(result)  # Output: ['hello_world', 'this_is']\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpnabl6kw8.py\", line 12, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square given its side length.\n    \n    Args:\n    side_length (float): The length of one side of the square.\n    \n    Returns:\n    float: The perimeter of the square.\n    \"\"\"\n    return 4 * side_length\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(n):\n    # Check if n is less than 1, as Woodall numbers must be greater than or equal to 1\n    if n < 1:\n        return False\n    \n    # Start checking from k = 1 upwards\n    k = 1\n    while True:\n        woodall_number = k * (2 ** k) - 1\n        \n        # If the generated Woodall number is greater than n, break the loop\n        if woodall_number > n:\n            break\n        \n        # If the generated Woodall number equals n, return True\n        if woodall_number == n:\n            return True\n        \n        # Increment k for the next iteration\n        k += 1\n    \n    # If no Woodall number matches n, return False\n    return False\n\n# Example usage:\nprint(is_woodall(7))  # True, because 3 * 2^3 - 1 = 7\nprint(is_woodall(15)) # False, because there is no k such that k * 2^k - 1 = 15\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpc2_d5o81.py\", line 27, in <module>\n    assert cc_visit(inspect.getsource(is_woodall))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 21, "completion": "def multiples_of_num(n, m):\n    \"\"\"\n    Returns a list of the first m multiples of n.\n    \n    Parameters:\n    n (int): The base number whose multiples are to be found.\n    m (int): The number of multiples to generate.\n    \n    Returns:\n    list: A list containing the first m multiples of n.\n    \"\"\"\n    return [n * i for i in range(1, m + 1)]\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp43ck4mmm.py\", line 3, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 24, "completion": "def binary_to_decimal(binary):\n    \"\"\"\n    Convert a binary number to its decimal equivalent.\n    \n    Args:\n    binary (int): The binary number to be converted.\n    \n    Returns:\n    int: The decimal equivalent of the binary number.\n    \"\"\"\n    decimal = 0\n    power = 0\n    \n    # Iterate over each digit in the binary number from right to left\n    while binary > 0:\n        # Get the last digit of the binary number\n        last_digit = binary % 10\n        \n        # Add the value of the last digit times 2 raised to the current power to the decimal result\n        decimal += last_digit * (2 ** power)\n        \n        # Remove the last digit from the binary number\n        binary //= 10\n        \n        # Increment the power\n        power += 1\n    \n    return decimal\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdb8suc6k.py\", line 20, in <module>\n    assert cc_visit(inspect.getsource(binary_to_decimal))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    # Initialize the largest prime factor variable\n    largest_prime = -1\n    \n    # Divide n by 2 until it becomes odd\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n    \n    # Check for odd factors from 3 onwards\n    factor = 3\n    while factor * factor <= n:\n        if n % factor == 0:\n            largest_prime = factor\n            n //= factor\n        else:\n            factor += 2\n    \n    # If n is still greater than 2, then n itself is a prime number\n    if n > 2:\n        largest_prime = n\n    \n    return largest_prime\n\n# Example usage:\nnumber = 600851475143\nprint(f\"The largest prime factor of {number} is {max_prime_factors(number)}\")\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(decimal_number):\n    if decimal_number == 0:\n        return \"0\"\n    \n    binary_result = []\n    while decimal_number > 0:\n        remainder = decimal_number % 2\n        binary_result.append(str(remainder))\n        decimal_number //= 2\n    \n    # The binary result is in reverse order, so we need to reverse it before returning\n    binary_result.reverse()\n    return ''.join(binary_result)\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpalolx98v.py\", line 12, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    return n * (n + 1) // 2\n\n# Example usage:\nn = 5\nprint(f\"The {n}-th rectangular number is: {find_rect_num(n)}\")\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1xqivw9a.py\", line 6, in <module>\n    assert find_rect_num(4) == 20\nAssertionError", "passed": false}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator, n):\n    \"\"\"\n    Find the nth digit in the decimal representation of the fraction numerator/denominator.\n    \n    :param numerator: Integer representing the numerator of the fraction.\n    :param denominator: Integer representing the denominator of the fraction.\n    :param n: Integer representing the position of the digit to find (1-based index).\n    :return: The nth digit as an integer.\n    \"\"\"\n    if not (0 < numerator < denominator) or not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Invalid input parameters.\")\n    \n    # Remove common factors between numerator and denominator\n    while numerator % 2 == 0 and denominator % 2 == 0:\n        numerator //= 2\n        denominator //= 2\n    \n    while numerator % 5 == 0 and denominator % 5 == 0:\n        numerator //= 5\n        denominator //= 5\n    \n    remainder = numerator % denominator\n    \n    for _ in range(n - 1):\n        remainder *= 10\n        digit = remainder // denominator\n        remainder %= denominator\n    \n    return remainder // denominator\n\n# Example usage:\nprint(find_nth_digit(1, 3, 1))  # Output: 3 (0.333...)\nprint(find_nth_digit(1, 3, 2))  # Output: 3\nprint(find_nth_digit(1, 3, 3))  # Output: 3\nprint(find_nth_digit(2, 7, 1))  # Output: 2 (0.285714285714...)\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp2vea6dm5.py\", line 22, in <module>\n    assert find_nth_digit(1,2,1) == 5\nAssertionError", "passed": false}
{"task_id": 38, "completion": "def div_even_odd(numbers):\n    # Initialize variables for the first even and odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Iterate through the list to find the first even and odd numbers\n    for num in numbers:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        elif first_odd is None and num % 2 != 0:\n            first_odd = num\n        \n        # If both even and odd numbers are found, break the loop\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Check if both even and odd numbers were found\n    if first_even is not None and first_odd is not None:\n        return first_even / first_odd\n    else:\n        raise ValueError(\"List must contain at least one even and one odd number\")\n\n# Example usage:\nnumbers = [1, 3, 5, 2, 4]\nresult = div_even_odd(numbers)\nprint(result)  # Output: 2.0\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpanqsrjhb.py\", line 28, in <module>\n    assert cc_visit(inspect.getsource(div_even_odd))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 40, "completion": "from collections import Counter\nfrom itertools import chain\n\ndef freq_element(list_of_lists):\n    # Flatten the list of lists into a single list\n    flattened_list = list(chain.from_iterable(list_of_lists))\n    \n    # Use Counter to count the frequency of each element\n    frequency_counter = Counter(flattened_list)\n    \n    return frequency_counter\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [2, 3, 4], [4, 5]]\nprint(freq_element(list_of_lists))  # Output: Counter({2: 2, 3: 2, 4: 2, 1: 1, 5: 1})\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 42, "completion": "def find_sum(arr):\n    # Dictionary to store the frequency of each element\n    freq = {}\n    \n    # Count the frequency of each element in the array\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Sum the values of elements that appear more than once\n    total_sum = 0\n    for num, count in freq.items():\n        if count > 1:\n            total_sum += num * count\n    \n    return total_sum\n\n# Example usage:\narr = [1, 2, 3, 2, 4, 1, 5]\nprint(find_sum(arr))  # Output will be 6 (since 1 + 2 = 3)\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9q568r_q.py\", line 19, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    \"\"\"\n    Find sequences of lowercase letters joined with an underscore using regex.\n    \n    Args:\n    text (str): The string to search for the pattern.\n    \n    Returns:\n    list: A list of all matches found in the text.\n    \"\"\"\n    # Define the regex pattern for lowercase letters joined with an underscore\n    pattern = r'[a-z]+_[a-z]+'\n    \n    # Use re.findall to find all occurrences of the pattern\n    matches = re.findall(pattern, text)\n    \n    return matches\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmprk4luwh0.py\", line 8, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 45, "completion": "from math import gcd\n\ndef get_gcd(arr):\n    if not arr:\n        return None\n    \n    result = arr[0]\n    \n    for num in arr[1:]:\n        result = gcd(result, num)\n        \n    return result\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpd7cenl_t.py\", line 14, in <module>\n    assert cc_visit(inspect.getsource(get_gcd))[0].complexity <=1\nAssertionError", "passed": false}
{"task_id": 47, "completion": "def compute_last_digit(a, b):\n    if a > b:\n        return 0\n    \n    last_digit = 1\n    for i in range(a + 1, b + 1):\n        last_digit = (last_digit * (i % 10)) % 10\n    \n    return last_digit\n\n# Example usage:\nprint(compute_last_digit(3, 7))  # Output: 4\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 51, "completion": "def check_equilateral(a, b, c):\n    if a == b == c:\n        print(\"The triangle is equilateral.\")\n    else:\n        print(\"The triangle is not equilateral.\")\n\n# Example usage:\ncheck_equilateral(3, 3, 3)  # Output: The triangle is equilateral.\ncheck_equilateral(3, 4, 5)  # Output: The triangle is not equilateral.\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgobuuqth.py\", line 9, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n    \n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram.\n    \n    Returns:\n    float: The area of the parallelogram.\n    \"\"\"\n    return base * height\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(s):\n    # Check if the first and last characters are equal\n    return s[0] == s[-1] if len(s) > 0 else False\n\n# Example usage:\nprint(check_equality(\"radar\"))  # Output: True\nprint(check_equality(\"hello\"))  # Output: False\nprint(check_equality(\"\"))       # Output: False\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8z4zrcph.py\", line 8, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def reverse_number(n):\n    return int(str(n)[::-1])\n\ndef check(n):\n    reversed_n = reverse_number(n)\n    return n == 2 * reversed_n - 1\n\n# Example usage:\nprint(check(32))  # True, because 32 is one less than twice its reverse (64)\nprint(check(18))  # False, because 18 is not one less than twice its reverse (81)\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 58, "completion": "def opposite_signs(a, b):\n    return (a ^ b) < 0\n", "requirement": "Code Complexity", "result": "passed", "passed": true}

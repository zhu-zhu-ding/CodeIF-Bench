{"task_id": 11, "completion": "def remove_occ(s: str, char: str) -> str:\n    # Check if the second parameter is a single character\n    if len(char) != 1:\n        raise ValueError('Second parameter must be a single character.')\n    \n    # Find the indices of the first and last occurrences of the character\n    first_index = s.find(char)\n    last_index = s.rfind(char)\n    \n    # If the character does not exist in the string, return the original string\n    if first_index == -1 or last_index == -1:\n        return s\n    \n    # Remove the first occurrence\n    s = s[:first_index] + s[first_index+1:]\n    \n    # Adjust the index for the last occurrence because we removed one character already\n    if first_index < last_index:\n        last_index -= 1\n    else:\n        last_index = len(s) - 1\n    \n    # Remove the last occurrence\n    s = s[:last_index] + s[last_index+1:]\n    \n    return s\n\n# Example usage:\nprint(remove_occ(\"abracadabra\", \"a\"))  # Output: \"brcdbr\"\nprint(remove_occ(\"hello\", \"l\"))        # Output: \"heo\"\nprint(remove_occ(\"world\", \"x\"))        # Output: \"world\"\ntry:\n    print(remove_occ(\"test\", \"te\"))    # Raises ValueError\nexcept ValueError as e:\n    print(e)                           # Output: Second parameter must be a single character.\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 12, "completion": "def sort_matrix(matrix):\n    # Check if the input is a list of lists\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise TypeError(\"Input must be a list of lists.\")\n    \n    # Check if all elements in the matrix are integers\n    for row in matrix:\n        if not all(isinstance(element, int) for element in row):\n            raise TypeError(\"All elements in the matrix must be integers.\")\n    \n    # Sort the matrix based on the sum of its rows\n    sorted_matrix = sorted(matrix, key=sum)\n    \n    return sorted_matrix\n\n# Example usage:\nmatrix = [\n    [3, 2, 1],\n    [6, 5, 4],\n    [9, 8, 7]\n]\n\ntry:\n    print(sort_matrix(matrix))\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 13, "completion": "from collections import Counter\n\ndef count_common(word_list):\n    # Check if the input is a list of strings\n    if not isinstance(word_list, list) or not all(isinstance(word, str) for word in word_list):\n        raise TypeError(\"Input must be a list of strings.\")\n    \n    # Count the occurrences of each word\n    word_counts = Counter(word_list)\n    \n    # Find the maximum count\n    max_count = max(word_counts.values(), default=0)\n    \n    # Filter the words that have the maximum count\n    most_common_words = {word: count for word, count in word_counts.items() if count == max_count}\n    \n    return most_common_words\n\n# Example usage:\nwords = [\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\"]\nprint(count_common(words))  # Output: {'apple': 3}\n\n# Incorrect input example:\ntry:\n    print(count_common([\"apple\", 123]))  # This will raise a TypeError\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpt_kk_ft3.py\", line 21, in <module>\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nAssertionError", "passed": false}
{"task_id": 14, "completion": "def find_volume(base_length, triangle_height, prism_length):\n    # Check if all inputs are positive numbers\n    if not (isinstance(base_length, (int, float)) and base_length > 0):\n        raise ValueError('All dimensions must be positive numbers.')\n    if not (isinstance(triangle_height, (int, float)) and triangle_height > 0):\n        raise ValueError('All dimensions must be positive numbers.')\n    if not (isinstance(prism_length, (int, float)) and prism_length > 0):\n        raise ValueError('All dimensions must be positive numbers.')\n    \n    # Calculate the area of the triangular base\n    base_area = 0.5 * base_length * triangle_height\n    \n    # Calculate the volume of the triangular prism\n    volume = base_area * prism_length\n    \n    return volume\n\n# Example usage:\ntry:\n    print(find_volume(3, 4, 5))  # Expected output: 30.0\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 15, "completion": "def split_lowerstring(input_string):\n    # Check if the input is a string\n    if not isinstance(input_string, str):\n        raise TypeError(\"Input must be a string\")\n\n    result = []\n    current_part = \"\"\n    \n    for char in input_string:\n        if char.islower():\n            if current_part:\n                result.append(current_part)\n            current_part = char\n        else:\n            current_part += char\n    \n    if current_part:\n        result.append(current_part)\n\n    return result\n\n# Example usage:\ntry:\n    print(split_lowerstring(\"HelloWorld\"))  # Output: ['H', 'e', 'l', 'l', 'oW', 'o', 'r', 'l', 'd']\n    print(split_lowerstring(\"123ABC\"))      # Output: ['123ABC']\n    print(split_lowerstring(123))           # Raises TypeError\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmp6rvevdid.py\", line 27\n    try: split_lowerstring(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(input_text):\n    # Check if the input is a string\n    if not isinstance(input_text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Define the pattern for sequences of lowercase letters joined with underscores\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    \n    # Use the pattern to find matches in the input text\n    matches = re.findall(pattern, input_text)\n    \n    return matches\n\n# Example usage:\ntry:\n    result = text_lowercase_underscore(\"hello_world this_is_a_test example\")\n    print(result)  # Output: ['hello_world', 'this_is_a_test']\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4vgb7kxo.py\", line 17, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Parameters:\n    side_length (float): The length of one side of the square.\n\n    Returns:\n    float: The perimeter of the square.\n\n    Raises:\n    ValueError: If the side_length is negative.\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    return 4 * side_length\n\n# Example usage:\ntry:\n    print(square_perimeter(5))  # Expected output: 20\n    print(square_perimeter(-3))  # This will raise a ValueError\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(clean_string, dirty_chars):\n    # Check if both inputs are strings\n    if not isinstance(clean_string, str) or not isinstance(dirty_chars, str):\n        raise TypeError(\"Both arguments must be strings\")\n    \n    # Create a set of characters to remove for faster lookup\n    dirty_set = set(dirty_chars)\n    \n    # Build the result string without the dirty characters\n    result = ''.join(char for char in clean_string if char not in dirty_set)\n    \n    return result\n\n# Example usage:\n# print(remove_dirty_chars(\"hello world\", \"ld\"))  # Output: \"heo wor\"\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 19, "completion": "def test_duplicate(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise ValueError('Input must be a list of integers')\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise ValueError('Input must be a list of integers')\n    \n    # Use a set to check for duplicates\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    \n    return False\n\n# Example usage:\ntry:\n    print(test_duplicate([1, 2, 3, 4]))  # Should return False\n    print(test_duplicate([1, 2, 3, 3]))  # Should return True\n    print(test_duplicate(\"not a list\"))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpse30drgb.py\", line 26, in <module>\n    test_duplicate(None)\n  File \"/tmp/tmpse30drgb.py\", line 4, in test_duplicate\n    raise ValueError('Input must be a list of integers')\nValueError: Input must be a list of integers", "passed": false}
{"task_id": 20, "completion": "def is_woodall(num):\n    # Check if the input is an integer\n    if not isinstance(num, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    # Iterate over possible values of n\n    n = 1\n    while True:\n        woodall_num = n * (2 ** n) - 1\n        if woodall_num == num:\n            return True\n        elif woodall_num > num:\n            return False\n        n += 1\n\n# Example usage:\nprint(is_woodall(7))   # True, because 3*2^3-1 = 7\nprint(is_woodall(23))  # True, because 4*2^4-1 = 23\nprint(is_woodall(10))  # False, 10 is not a Woodall number\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 21, "completion": "def multiples_of_num(n, m):\n    \"\"\"\n    Returns a list containing m number of multiples of n.\n    \n    Parameters:\n    n (int): The number whose multiples are to be found.\n    m (int): The number of multiples to generate.\n    \n    Raises:\n    ValueError: If either m or n is negative.\n    \n    Returns:\n    list: A list of m multiples of n.\n    \"\"\"\n    if m < 0 or n < 0:\n        raise ValueError(\"Both m and n must be non-negative integers.\")\n    \n    return [i * n for i in range(1, m + 1)]\n\n# Example usage:\ntry:\n    print(multiples_of_num(5, 3))  # Output: [5, 10, 15]\n    print(multiples_of_num(-5, 3)) # This will raise ValueError\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpg57wxp1f.py\", line 11, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "completion": "def find_first_duplicate(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements in the list must be integers.\")\n    \n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    \n    return None\n\n# Example usage:\ntry:\n    print(find_first_duplicate([1, 2, 3, 2, 4]))  # Should return 2\n    print(find_first_duplicate([1, 2, 3, 4]))     # Should return None\n    print(find_first_duplicate([1, 'a', 3, 4]))   # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0hgbmqh3.py\", line 22, in <module>\n    assert find_first_duplicate([1, 2, 3, 4])==-1\nAssertionError", "passed": false}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists):\n    # Check if the input is a list\n    if not isinstance(list_of_lists, list):\n        raise TypeError(\"Input must be a list of lists.\")\n    \n    max_sum = None\n    \n    for sublist in list_of_lists:\n        # Check if each element is a list\n        if not isinstance(sublist, list):\n            raise TypeError(\"Each element of the main list must be a list.\")\n        \n        current_sum = 0\n        \n        for item in sublist:\n            # Check if each item in the sublist is an integer\n            if not isinstance(item, int):\n                raise TypeError(\"All elements in the sublists must be integers.\")\n            \n            current_sum += item\n        \n        if max_sum is None or current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum\n\n# Example usage:\n# print(maximum_sum([[1, 2, 3], [4, 5], [6]]))  # Output: 9\n# print(maximum_sum([[1, 'a'], [2, 3]]))         # Raises TypeError\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmp_fmnrma2.py\", line 25\n    try: maximum_sum([[1, 2], [3, 'a']]); assert False, 'Expected TypeError' except TypeError: pass\n                                                                             ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 24, "completion": "def binary_to_decimal(binary_str):\n    # Check if the input is a valid binary string\n    if not all(char in '01' for char in binary_str):\n        raise ValueError('Invalid binary number')\n    \n    # Convert the binary string to a decimal number\n    decimal_number = int(binary_str, 2)\n    return decimal_number\n\n# Example usage:\ntry:\n    print(binary_to_decimal('1010'))  # Should print 10\n    print(binary_to_decimal('1020'))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)  # Prints 'Invalid binary number'\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpa5b1ia9g.py\", line 17\n    try: binary_to_decimal('102'); assert False, 'Expected ValueError' except ValueError as e: assert str(e) == 'Invalid binary number'\n                                                                       ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 25, "completion": "def find_product(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements in the list must be integers\")\n    \n    # Use a dictionary to count occurrences of each element\n    element_count = {}\n    for element in arr:\n        if element in element_count:\n            element_count[element] += 1\n        else:\n            element_count[element] = 1\n    \n    # Calculate the product of non-repeated elements\n    product = 1\n    found_non_repeated = False\n    for element, count in element_count.items():\n        if count == 1:\n            product *= element\n            found_non_repeated = True\n    \n    # If there are no non-repeated elements, return 1 (neutral element for multiplication)\n    if not found_non_repeated:\n        return 1\n    \n    return product\n\n# Example usage:\nprint(find_product([1, 2, 3, 4]))  # Output: 24\nprint(find_product([1, 1, 2, 3, 3]))  # Output: 2\nprint(find_product([1, 1, 2, 2]))  # Output: 1\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxcxle6qa.py\", line 30, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(tuples_list, k):\n    # Check if the input is a list\n    if not isinstance(tuples_list, list):\n        raise TypeError(\"The first argument must be a list.\")\n    \n    # Check if k is an integer\n    if not isinstance(k, int):\n        raise TypeError(\"The second argument must be an integer.\")\n    \n    # Check if every element in the list is a tuple\n    for item in tuples_list:\n        if not isinstance(item, tuple):\n            raise TypeError(\"All elements in the list must be tuples.\")\n        \n        # Check if the tuple has exactly k elements\n        if len(item) != k:\n            return False\n    \n    return True\n\n# Example usage:\n# print(check_k_elements([(1, 2), (3, 4)], 2))  # Returns True\n# print(check_k_elements([(1, 2), (3, 4, 5)], 2))  # Returns False\n# print(check_k_elements([(1, 2), (3, 4)], 'two'))  # Raises TypeError\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpnsivxfn4.py\", line 20, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "completion": "def remove(strings):\n    # Check if the input is a list\n    if not isinstance(strings, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Initialize an empty list to store the processed strings\n    result = []\n    \n    for item in strings:\n        # Check if each item in the list is a string\n        if not isinstance(item, str):\n            raise TypeError(\"All elements in the list must be strings\")\n        \n        # Remove all digits from the string\n        cleaned_string = ''.join(char for char in item if not char.isdigit())\n        result.append(cleaned_string)\n    \n    return result\n\n# Example usage:\ntry:\n    print(remove([\"abc123\", \"def456\", \"ghi789\"]))  # Output: ['abc', 'def', 'ghi']\n    print(remove([\"abc\", 123]))  # Raises TypeError\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 28, "completion": "def binomial_coeff(n, k):\n    # Check for invalid inputs\n    if n < 0 or k < 0:\n        raise ValueError('Inputs must be non-negative')\n    if k > n:\n        raise ValueError('k must not be greater than n')\n\n    # Calculate the binomial coefficient using an efficient method\n    if k > n - k:\n        k = n - k\n\n    result = 1\n    for i in range(k):\n        result *= (n - i)\n        result //= (i + 1)\n\n    return result\n\n# Example usage:\ntry:\n    print(binomial_coeff(5, 2))  # Expected output: 10\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpu7v1x41i.py\", line 23, in <module>\n    try: binomial_coeff(-1, 2)\n  File \"/tmp/tmpu7v1x41i.py\", line 4, in binomial_coeff\n    raise ValueError('Inputs must be non-negative')\nValueError: Inputs must be non-negative\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpu7v1x41i.py\", line 24, in <module>\n    except ValueError as e: assert str(e) == 'Inputs must be non-negative and k must not be greater than n'\nAssertionError", "passed": false}
{"task_id": 29, "completion": "def get_odd_occurrence(arr):\n    # Check if input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements in the list must be integers.\")\n    \n    # Initialize a dictionary to count occurrences\n    count_dict = {}\n    \n    # Count occurrences of each element\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Find the element with an odd occurrence\n    for key, value in count_dict.items():\n        if value % 2 != 0:\n            return key\n    \n    # If no such element is found, return None or raise an exception based on requirement\n    return None\n\n# Example usage:\n# print(get_odd_occurrence([1, 2, 3, 2, 3, 1, 3]))  # Output: 3\n# print(get_odd_occurrence([4, 1, 2, 2, 5, 1, 4]))  # Output: 5\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgynsjq1w.py\", line 25, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    # Check if the input is a string\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    \n    n = len(s)\n    count = 0\n    \n    # Iterate through each character in the string\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if s[i] == s[j - 1]:\n                count += 1\n                \n    return count\n\n# Example usage:\ntry:\n    print(count_substring_with_equal_ends(\"abc\"))  # Output will be 3 (a, b, c)\n    print(count_substring_with_equal_ends(\"aab\"))  # Output will be 5 (a, a, b, aa, aba)\n    print(count_substring_with_equal_ends(123))    # This will raise a TypeError\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmp5amjz3gj.py\", line 23\n    try: count_substring_with_equal_ends(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                                  ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 31, "completion": "import heapq\nfrom collections import Counter\n\ndef func(lists, k):\n    # Flatten the list of lists into a single list\n    flattened_list = [item for sublist in lists for item in sublist]\n    \n    # Count the frequency of each integer\n    freq_counter = Counter(flattened_list)\n    \n    # Check if k is greater than the number of distinct integers\n    if k > len(freq_counter):\n        raise ValueError('k cannot be greater than the number of distinct integers')\n    \n    # Use a min-heap to keep track of top k frequent elements\n    # We negate the frequency because heapq is a min-heap by default\n    min_heap = []\n    for num, freq in freq_counter.items():\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, (freq, num))\n        else:\n            heapq.heappushpop(min_heap, (freq, num))\n    \n    # Extract the numbers from the heap and sort them based on frequency (and value if frequencies are equal)\n    result = [num for freq, num in sorted(min_heap, reverse=True)]\n    \n    return result\n\n# Example usage:\nlists = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\nk = 2\nprint(func(lists, k))  # Output might vary depending on the input lists and k\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpixm4zci4.py\", line 26, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    # Check if the input is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError('Input must be a positive integer')\n    \n    # Initialize the largest prime factor variable\n    largest_prime = -1\n    \n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n    \n    # Now n must be odd, start checking from 3\n    factor = 3\n    while factor * factor <= n:\n        # While factor divides n, divide n\n        while n % factor == 0:\n            largest_prime = factor\n            n //= factor\n        factor += 2\n    \n    # If n becomes a prime number greater than 2\n    if n > 2:\n        largest_prime = n\n    \n    return largest_prime\n\n# Example usage:\n# print(max_prime_factors(60))  # Should output 5\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(decimal_number):\n    # Check if the input is an integer\n    if not isinstance(decimal_number, int):\n        raise ValueError(\"Input must be an integer.\")\n    \n    # Check if the input is non-negative\n    if decimal_number < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    # Convert the integer to binary and remove the '0b' prefix\n    binary_representation = bin(decimal_number)[2:]\n    \n    return binary_representation\n\n# Example usage:\ntry:\n    print(decimal_to_binary(10))  # Output: \"1010\"\n    print(decimal_to_binary(-5))  # Raises ValueError\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp62orrdv8.py\", line 17, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "completion": "def find_missing(arr):\n    # Check if the list is sorted\n    if arr != sorted(arr):\n        raise ValueError('Input list must be sorted.')\n    \n    # If the array has less than 2 elements, there's no way to determine a missing element\n    if len(arr) < 2:\n        return None\n    \n    # Calculate the common difference based on the first two elements\n    diff = arr[1] - arr[0]\n    \n    # Iterate through the array to find the missing number\n    for i in range(1, len(arr)):\n        expected_value = arr[i-1] + diff\n        if arr[i] != expected_value:\n            return expected_value\n    \n    # If no missing number is found (which shouldn't happen in a properly formed sequence),\n    # return None.\n    return None\n\n# Example usage:\ntry:\n    print(find_missing([1, 2, 3, 5]))  # Output should be 4\n    print(find_missing([2, 4, 6, 8, 10]))  # No missing number, so output should be None\n    print(find_missing([1, 3, 5, 7]))  # No missing number, so output should be None\n    print(find_missing([1, 3, 2]))  # Raises ValueError\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3v1pnz52.py\", line 26, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    # Check if the input is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n\n    # Calculate the n-th rectangular number\n    return n * (n + 1)\n\n# Example usage:\ntry:\n    print(find_rect_num(5))  # Output will be 30 because 5 * 6 = 30\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator, n):\n    \"\"\"\n    Finds the nth digit in the decimal part of the fraction numerator/denominator.\n    \n    Parameters:\n    - numerator (int): The numerator of the fraction.\n    - denominator (int): The denominator of the fraction.\n    - n (int): The position of the digit after the decimal point to return.\n    \n    Returns:\n    - int: The nth digit after the decimal point.\n    \n    Raises:\n    - ValueError: If the denominator is zero.\n    - ValueError: If n is less than 1 or too large for the precision supported.\n    \"\"\"\n    if denominator == 0:\n        raise ValueError(\"Denominator cannot be zero\")\n    \n    if n < 1:\n        raise ValueError(\"n must be at least 1\")\n    \n    # Calculate the fractional part\n    fractional_part = numerator / denominator - (numerator // denominator)\n    \n    # Convert the fractional part to a string to easily access digits\n    fractional_str = f\"{fractional_part:.50f}\"  # Using high precision\n    \n    # Remove \"0.\" from the start to get only the digits\n    digits = fractional_str.split('.')[1]\n    \n    # Check if n is within the length of the fractional part we have\n    if n > len(digits):\n        raise ValueError(f\"n ({n}) is larger than the available precision ({len(digits)})\")\n    \n    # Return the nth digit\n    return int(digits[n-1])\n\n# Example usage:\ntry:\n    print(find_nth_digit(1, 3, 2))  # Should return 3 as the decimal part of 1/3 is 0.3333...\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmptfehp60p.py\", line 23, in <module>\n    assert find_nth_digit(3,5,1) == 6\nAssertionError", "passed": false}
{"task_id": 37, "completion": "def sort_mixed_list(mixed_list):\n    # Check if the input is a list\n    if not isinstance(mixed_list, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Check if all elements in the list are either integers or strings\n    for item in mixed_list:\n        if not isinstance(item, (int, str)):\n            raise TypeError(\"All elements in the list must be either integers or strings.\")\n    \n    # Sort the list\n    sorted_list = sorted(mixed_list, key=lambda x: (isinstance(x, str), x))\n    return sorted_list\n\n# Example usage:\ntry:\n    print(sort_mixed_list([10, \"apple\", 5, \"banana\", \"cherry\", 2]))  # Output: [2, 5, 10, 'apple', 'banana', 'cherry']\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 38, "completion": "def div_even_odd(numbers):\n    # Initialize variables to store the first even and odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Iterate through the list to find the first even and odd numbers\n    for num in numbers:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        \n        # If both first_even and first_odd are found, break the loop\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Check if both even and odd numbers were found\n    if first_even is None or first_odd is None:\n        raise ValueError('List must contain at least one even and one odd number.')\n    \n    # Perform the division of the first even number by the first odd number\n    return first_even / first_odd\n\n# Example usage:\ntry:\n    print(div_even_odd([3, 4, 5, 6]))  # This will print the result of 4 / 3\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmp71bu0gl4.py\", line 27\n    try: div_even_odd([2, 4, 6]); assert False; except ValueError as e: assert str(e) == 'List must contain at least one even and one odd number.'\n                                                ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 39, "completion": "def rearrange_string(s):\n    # Check if the input is a string\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string.\")\n    \n    # Check if the string contains only lowercase letters\n    if not s.islower() or not s.isalpha():\n        raise ValueError(\"String must contain only lowercase letters.\")\n    \n    from collections import Counter\n    \n    # Count the frequency of each character\n    char_count = Counter(s)\n    \n    # Find the most frequent character\n    max_char_count = max(char_count.values())\n    \n    # If the most frequent character appears more than half the length of the string + 1,\n    # then it's impossible to rearrange the string as required.\n    if max_char_count > (len(s) + 1) // 2:\n        return False\n    \n    # If we reach this point, rearrangement is possible\n    return True\n\n# Example usage:\ntry:\n    print(rearrange_string(\"aabbcc\"))  # Should return True\n    print(rearrange_string(\"aaabc\"))   # Should return False\n    print(rearrange_string(\"123\"))     # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_fc9bqep.py\", line 26, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "completion": "from collections import Counter\n\ndef freq_element(list_of_lists):\n    # Check if the input is a list of lists\n    if not isinstance(list_of_lists, list) or not all(isinstance(sublist, list) for sublist in list_of_lists):\n        raise TypeError(\"Input must be a list of lists\")\n    \n    # Flatten the list of lists into a single list\n    flat_list = [item for sublist in list_of_lists for item in sublist]\n    \n    # Calculate the frequency of each element\n    frequency = Counter(flat_list)\n    \n    return frequency\n\n# Example usage:\ntry:\n    example_list = [['apple', 'banana'], ['banana', 'cherry'], ['apple']]\n    print(freq_element(example_list))\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpll4mhhqi.py\", line 20\n    try: freq_element('not a list'); assert False; except TypeError: assert True\n                                                   ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 41, "completion": "def filter_evennumbers(numbers):\n    # Check if the input is a list\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in numbers):\n        raise TypeError(\"All elements in the list must be integers.\")\n    \n    # Use filter with a lambda function to get even numbers\n    even_numbers = list(filter(lambda x: x % 2 == 0, numbers))\n    \n    return even_numbers\n\n# Example usage:\ntry:\n    print(filter_evennumbers([1, 2, 3, 4, 5, 6]))  # Output: [2, 4, 6]\n    print(filter_evennumbers([1, 'a', 3]))         # Raises TypeError\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 42, "completion": "def find_sum(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Initialize a dictionary to keep track of element counts\n    element_counts = {}\n    \n    # Iterate over the list and count occurrences of each element\n    for element in arr:\n        if element in element_counts:\n            element_counts[element] += 1\n        else:\n            element_counts[element] = 1\n    \n    # Calculate the sum of elements that appear more than once\n    repeated_elements_sum = sum(element * count for element, count in element_counts.items() if count > 1)\n    \n    return repeated_elements_sum\n\n# Example usage:\n# print(find_sum([1, 2, 3, 2, 3, 4]))  # Output: 10 (2+2+3+3)\n# print(find_sum([1, 2, 3]))           # Output: 0 (no repeated elements)\n# print(find_sum(\"not a list\"))        # Raises TypeError\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpjv8igopz.py\", line 20, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(s):\n    # Check if the input is a string\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Define the regex pattern for sequences of lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    \n    # Use re.search to find a match in the string\n    match = re.search(pattern, s)\n    \n    # Return True if a match was found, otherwise return False\n    return bool(match)\n\n# Example usage:\nprint(text_match(\"example_text\"))  # Should return True\nprint(text_match(\"Example_Text\"))  # Should return False because of uppercase letters\nprint(text_match(\"exampletext\"))   # Should return False because there's no underscore\ntry:\n    print(text_match(123))         # Should raise a TypeError\nexcept TypeError as e:\n    print(e)                       # Output: Input must be a string\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpakpq3csu.py\", line 20, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 44, "completion": "import re\n\ndef text_match_string(pattern, text):\n    # Check if the inputs are strings\n    if not isinstance(pattern, str) or not isinstance(text, str):\n        raise TypeError(\"Both pattern and text must be strings\")\n    \n    # Create a regex pattern to match the word at the beginning of the string\n    regex_pattern = r'^' + re.escape(pattern)\n    \n    # Use the search method from the re module to find a match\n    match = re.search(regex_pattern, text)\n    \n    # Return True if there's a match, False otherwise\n    return bool(match)\n\n# Example usage:\ntry:\n    print(text_match_string(\"hello\", \"hello world\"))  # Should return True\n    print(text_match_string(\"world\", \"hello world\"))  # Should return False\n    print(text_match_string(\"123\", 12345))            # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpxzb_c5nj.py\", line 22\n    try: text_match_string(123); assert False, 'TypeError not raised' except TypeError: pass\n                                                                      ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 45, "completion": "from math import gcd\nfrom functools import reduce\n\ndef get_gcd(numbers):\n    if not numbers:\n        raise ValueError('Input list cannot be empty.')\n    \n    return reduce(gcd, numbers)\n\n# Example usage:\ntry:\n    print(get_gcd([12, 18, 24]))  # Output will be 6\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 46, "completion": "def test_distinct(lst):\n    # Check if input is a list\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(item, int) for item in lst):\n        raise TypeError(\"All elements in the list must be integers.\")\n    \n    # Check if all elements are distinct\n    if len(lst) == len(set(lst)):\n        return True\n    else:\n        return False\n\n# Example usage:\ntry:\n    print(test_distinct([1, 2, 3, 4]))  # Should return True\n    print(test_distinct([1, 2, 2, 4]))  # Should return False\n    print(test_distinct('not a list'))  # Should raise TypeError\n    print(test_distinct([1, 'two', 3, 4]))  # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 47, "completion": "def compute_last_digit(a, b):\n    if a > b:\n        raise ValueError(\"a should not be greater than b\")\n    \n    # Initialize the last digit as 1 (neutral element for multiplication)\n    last_digit = 1\n    \n    # Compute the product of the last digits from (a+1) to b\n    for i in range(a + 1, b + 1):\n        last_digit = (last_digit * (i % 10)) % 10\n    \n    return last_digit\n\n# Example usage:\nprint(compute_last_digit(3, 5))  # Output: 2 (because 5! / 3! = 20, and the last digit is 0)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 48, "completion": "def odd_bit_set_number(number):\n    # Check if the input is an integer\n    if not isinstance(number, int):\n        raise TypeError(\"Input must be an integer.\")\n    \n    # Initialize a mask with all odd bits set to 1\n    mask = 0\n    bit_position = 0\n    \n    # Construct the mask by setting every odd bit to 1\n    while (1 << bit_position) <= number:\n        if bit_position % 2 == 0:\n            mask |= (1 << bit_position)\n        bit_position += 1\n    \n    # Set the odd bits in the original number using bitwise OR\n    result = number | mask\n    \n    return result\n\n# Example usage:\n# print(odd_bit_set_number(10))  # Output will depend on the binary representation of 10\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 49, "completion": "def specified_element(two_d_list, index=0):\n    \"\"\"\n    Extracts the element at the specified index from each sublist in a two-dimensional list.\n    \n    Parameters:\n        two_d_list (list of lists): The two-dimensional list from which to extract elements.\n        index (int): The index of the element to extract from each sublist. Default is 0 (first element).\n        \n    Returns:\n        list: A list containing the extracted elements.\n        \n    Raises:\n        IndexError: If the specified index is out of range for any sublist.\n    \"\"\"\n    result = []\n    for sublist in two_d_list:\n        try:\n            result.append(sublist[index])\n        except IndexError:\n            raise IndexError(f\"Index {index} out of range for sublist {sublist}\")\n    return result\n\n# Example usage:\nif __name__ == \"__main__\":\n    two_d_list = [[1, 2, 3], [4, 5], [6, 7, 8, 9]]\n    try:\n        print(specified_element(two_d_list, 1))  # Should print [2, 5, 7]\n        print(specified_element(two_d_list, 3))  # Should raise IndexError\n    except IndexError as e:\n        print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpa2f47y33.py\", line 5, in specified_element\n    result.append(sublist[index])\nIndexError: list index out of range\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpa2f47y33.py\", line 20, in <module>\n    try: specified_element([[1, 2], [3, 4]], 3)\n  File \"/tmp/tmpa2f47y33.py\", line 7, in specified_element\n    raise IndexError(f\"Index {index} out of range for sublist {sublist}\")\nIndexError: Index 3 out of range for sublist [1, 2]\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmpa2f47y33.py\", line 21, in <module>\n    except IndexError as e: assert str(e) == 'Index out of range for sublist'\nAssertionError", "passed": false}
{"task_id": 50, "completion": "def min_length_list(lists):\n    # Check if input is a list of lists\n    if not all(isinstance(item, list) for item in lists):\n        raise ValueError('Input must be a list of lists.')\n    \n    # Use min with a key function to find the shortest list\n    return min(lists, key=lambda x: len(x))\n\n# Example usage:\ntry:\n    print(min_length_list([[1, 2], [3, 4, 5], [], [6]]))  # Output will be []\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpq21548w3.py\", line 12, in <module>\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nAssertionError", "passed": false}
{"task_id": 51, "completion": "def check_equilateral(a, b, c):\n    # Check if any of the inputs are non-positive integers\n    if a <= 0 or b <= 0 or c <= 0:\n        raise ValueError(\"All side lengths must be positive integers\")\n    \n    # Check if the triangle is equilateral\n    if a == b == c:\n        print(\"The triangle is equilateral.\")\n    else:\n        print(\"The triangle is not equilateral.\")\n\n# Example usage:\ntry:\n    check_equilateral(5, 5, 5)  # This will print \"The triangle is equilateral.\"\n    check_equilateral(3, 4, 5)  # This will print \"The triangle is not equilateral.\"\n    check_equilateral(-1, 2, 2) # This will raise ValueError\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmph4a63vs2.py\", line 17, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    # Check if both inputs are numbers (int or float)\n    if not isinstance(base, (int, float)) or not isinstance(height, (int, float)):\n        raise TypeError(\"Both base and height must be numerical values.\")\n    \n    # Calculate the area of the parallelogram\n    area = base * height\n    \n    return area\n\n# Example usage:\ntry:\n    print(parallelogram_area(10, 5))  # Expected output: 50\n    print(parallelogram_area('10', 5))  # This will raise a TypeError\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(input_string):\n    # Check if the input is a string\n    if not isinstance(input_string, str):\n        raise TypeError('Input must be a string')\n    \n    # Handle empty strings or strings with only one character\n    if len(input_string) == 0:\n        return False\n    elif len(input_string) == 1:\n        return True\n    \n    # Compare the first and last characters\n    return input_string[0] == input_string[-1]\n\n# Example usage:\ntry:\n    print(check_equality(\"radar\"))  # Should return True\n    print(check_equality(\"hello\"))  # Should return False\n    print(check_equality(\"a\"))      # Should return True\n    print(check_equality(\"\"))       # Should return False\n    print(check_equality(123))      # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmptzbmer1k.py\", line 21, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 54, "completion": "def counting_sort(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements in the list must be integers\")\n\n    # Find the maximum element in the array\n    max_element = max(arr)\n    min_element = min(arr)\n    \n    # Create count array with range from min to max element\n    count_range = max_element - min_element + 1\n    count_arr = [0] * count_range\n    \n    # Count each element's occurrence in the original array\n    for number in arr:\n        count_arr[number - min_element] += 1\n    \n    # Modify count array by adding the previous counts (cumulative count)\n    for i in range(1, len(count_arr)):\n        count_arr[i] += count_arr[i - 1]\n    \n    # Output array to hold the sorted elements\n    output_arr = [0] * len(arr)\n    \n    # Build the output array\n    for number in reversed(arr):\n        index = count_arr[number - min_element] - 1\n        output_arr[index] = number\n        count_arr[number - min_element] -= 1\n    \n    return output_arr\n\n# Example usage:\ntry:\n    print(counting_sort([4, 2, 2, 8, 3, 3, 1]))  # Output: [1, 2, 2, 3, 3, 4, 8]\n    print(counting_sort([4, 2, \"a\", 8, 3, 3, 1]))  # Raises TypeError\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 55, "completion": "def tn_gp(a, r, n):\n    \"\"\"\n    Calculate the t-nth term of a geometric series.\n    \n    Parameters:\n    a (float): The first term of the geometric series.\n    r (float): The common ratio of the geometric series.\n    n (int): The term number to calculate.\n    \n    Returns:\n    float: The value of the t-nth term in the geometric series.\n    \n    Raises:\n    ValueError: If the term number (n) is less than 1.\n    \"\"\"\n    if n < 1:\n        raise ValueError('Term number must be greater than 0')\n    \n    # Calculate the nth term using the formula for a geometric series: a * r^(n-1)\n    return a * (r ** (n - 1))\n\n# Example usage:\n# print(tn_gp(2, 3, 4))  # Should output 54, since 2 * 3^3 = 54\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmprgrpgwvt.py\", line 8, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def check(num):\n    # Check if input is an integer\n    if not isinstance(num, int):\n        raise TypeError(\"Input must be an integer.\")\n    \n    # Reverse the number\n    reversed_num = int(str(abs(num))[::-1])  # Using abs to handle negative numbers\n    \n    # Check the condition\n    return num == 2 * reversed_num - 1\n\n# Example usage:\ntry:\n    print(check(19))  # Should return True because 19 is one less than twice its reverse (91)\n    print(check(23))  # Should return False\n    print(check('19'))  # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 57, "completion": "def find_max_num(digits, num_digits):\n    # Check if the number of digits requested exceeds the length of the list\n    if num_digits > len(digits):\n        raise ValueError('Number of digits exceeds the length of the list.')\n    \n    # Sort the digits in descending order to form the largest number\n    sorted_digits = sorted(digits, reverse=True)\n    \n    # Take the first 'num_digits' from the sorted list\n    max_digits = sorted_digits[:num_digits]\n    \n    # Combine the digits into a single integer\n    max_num = int(''.join(map(str, max_digits)))\n    \n    return max_num\n\n# Example usage:\ntry:\n    print(find_max_num([3, 6, 9, 2, 5], 3))  # Should print 965\n    print(find_max_num([1, 4, 3], 5))        # Should raise ValueError\nexcept ValueError as e:\n    print(e)                                 # Prints 'Number of digits exceeds the length of the list.'\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 58, "completion": "def opposite_signs(a, b):\n    # Check if both inputs are integers\n    if not (isinstance(a, int) and isinstance(b, int)):\n        raise TypeError(\"Both inputs must be integers.\")\n    \n    # Check if the numbers have opposite signs\n    return (a ^ b) < 0\n\n# Example usage:\ntry:\n    print(opposite_signs(10, -5))  # True\n    print(opposite_signs(-2, -3))  # False\n    print(opposite_signs(0, 1))    # False\n    print(opposite_signs('string', 5))  # Raises TypeError\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 59, "completion": "def is_octagonal(n):\n    # Check if the input is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    # Calculate the nth octagonal number\n    return n * (3 * n - 2)\n\n# Example usage:\ntry:\n    print(is_octagonal(5))  # Should print the 5th octagonal number\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 60, "completion": "def max_len_sub(arr, diff):\n    # Check if arr is a list and diff is an integer\n    if not isinstance(arr, list) or not isinstance(diff, int):\n        raise TypeError(\"The first argument must be a list and the second argument must be an integer.\")\n\n    # If the list is empty, return 0\n    if not arr:\n        return 0\n\n    # Dictionary to store the maximum length of subsequence ending with arr[i]\n    dp = {}\n    max_length = 1\n\n    for num in arr:\n        if num - diff in dp:\n            dp[num] = dp[num - diff] + 1\n        else:\n            dp[num] = 1\n        max_length = max(max_length, dp[num])\n\n    return max_length\n\n# Example usage:\n# print(max_len_sub([1, 5, 7, 8, 5, 3, 4, 2, 1], 2))  # Output: 4\n# print(max_len_sub([], 2))  # Output: 0\n# print(max_len_sub([1, 2, 3, 4], 1))  # Output: 4\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpub6c3wgi.py\", line 22, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nAssertionError", "passed": false}

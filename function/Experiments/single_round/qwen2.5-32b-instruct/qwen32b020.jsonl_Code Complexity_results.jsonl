{"task_id": 11, "completion": "def remove_occ(s, char):\n    # Check if the character exists in the string\n    if char not in s:\n        return s\n    \n    # Find the index of the first occurrence\n    first_index = s.find(char)\n    \n    # Find the index of the last occurrence\n    last_index = s.rfind(char)\n    \n    # Construct the new string without the first and last occurrence of the character\n    new_s = s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]\n    \n    return new_s\n\n# Example usage:\nprint(remove_occ(\"abracadabra\", \"a\"))  # Output: \"brcdbr\"\nprint(remove_occ(\"hello\", \"l\"))        # Output: \"heo\"\nprint(remove_occ(\"test\", \"x\"))         # Output: \"test\" (no 'x' in the string)\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 14, "completion": "def find_volume(base, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n    \n    Parameters:\n    base (float): The base of the triangular face.\n    height (float): The height of the triangular face.\n    length (float): The length of the prism.\n    \n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    return 0.5 * base * height * length\n\n# Example usage:\nvolume = find_volume(4, 3, 6)\nprint(f\"The volume of the triangular prism is: {volume}\")\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 15, "completion": "import re\n\ndef split_lowerstring(s):\n    # Split the string at each lowercase letter using a regular expression.\n    # The pattern '[a-z]' matches any lowercase letter.\n    # The split function will return a list of substrings divided by these matches.\n    return re.split('[a-z]', s)\n\n# Example usage:\nprint(split_lowerstring(\"HelloWorld\"))  # Output: ['H', '', 'W', '']\nprint(split_lowerstring(\"A1b2C3d\"))     # Output: ['A1', '2C3', '']\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0o5evb0j.py\", line 10, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    # Define the regex pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]+(?:_[a-z]+)*\\b'\n    \n    # Use re.findall to find all matches in the input text\n    matches = re.findall(pattern, text)\n    \n    return matches\n\n# Example usage:\nexample_text = \"This is_a_test of_lowercase_words_connected_with_underscores\"\nprint(text_lowercase_underscore(example_text))\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpu9k6inr3.py\", line 11, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    return 4 * side_length\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(num):\n    # We'll try to find an n such that num = n * 2**n - 1\n    # Since we're limited to cyclomatic complexity of 1, we'll limit our search to a small range.\n    # This won't cover all cases but demonstrates the concept.\n    for n in range(20):  # Limiting to a small range to keep it simple\n        if num == n * 2**n - 1:\n            return True\n    return False\n\n# Example usage:\nprint(is_woodall(7))  # True, since 3*2^3-1=7\nprint(is_woodall(23)) # True, since 4*2^4-1=23\nprint(is_woodall(15)) # False\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpz9uywkbw.py\", line 18, in <module>\n    assert cc_visit(inspect.getsource(is_woodall))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 21, "completion": "def multiples_of_num(n, m):\n    # Using list comprehension to generate m multiples of n\n    return [i * n for i in range(1, m + 1)]\n\n# Example usage:\nprint(multiples_of_num(3, 5))  # Output: [3, 6, 9, 12, 15]\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwqhq_uuk.py\", line 6, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 24, "completion": "def binary_to_decimal(binary_str):\n    return int(binary_str, 2)\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp92imkx9s.py\", line 3, in <module>\n    assert binary_to_decimal(100) == 4\n  File \"/tmp/tmp92imkx9s.py\", line 2, in binary_to_decimal\n    return int(binary_str, 2)\nTypeError: int() can't convert non-string with explicit base", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    # Initialize the maximum prime factor variable\n    max_prime = -1\n    \n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        max_prime = 2\n        n //= 2\n    \n    # Now n must be odd, start from 3 and check for factors\n    factor = 3\n    while factor * factor <= n:\n        while n % factor == 0:\n            max_prime = factor\n            n //= factor\n        factor += 2\n    \n    # This condition is to handle the case when n is a prime number greater than 2\n    if n > 2:\n        max_prime = n\n    \n    return max_prime\n\n# Example usage:\nprint(max_prime_factors(600851475143))  # Output will be the largest prime factor of the given number\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(decimal_number):\n    # Convert the decimal number to binary using the built-in bin function\n    # bin() returns a string prefixed with '0b', so we slice off the first two characters\n    return bin(decimal_number)[2:]\n\n# Example usage:\nprint(decimal_to_binary(10))  # Output will be '1010'\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpitgfcuhe.py\", line 7, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    return n * (n + 1)\n\n# Example usage:\nprint(find_rect_num(0))  # Output: 0\nprint(find_rect_num(1))  # Output: 2\nprint(find_rect_num(2))  # Output: 6\nprint(find_rect_num(3))  # Output: 12\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator, n):\n    \"\"\"\n    Finds the nth digit in the decimal part of the division of numerator by denominator.\n    \n    Parameters:\n    numerator (int): The numerator of the division.\n    denominator (int): The denominator of the division.\n    n (int): The position of the digit in the decimal part to return.\n    \n    Returns:\n    int: The nth digit in the decimal part.\n    \"\"\"\n    if denominator == 0:\n        raise ValueError(\"Denominator cannot be zero.\")\n    \n    # Perform the division\n    result = numerator / denominator\n    \n    # Get the fractional part\n    fractional_part = result - int(result)\n    \n    # Convert the fractional part to a string, remove the \"0.\"\n    fractional_str = str(fractional_part)[2:]\n    \n    # Check if n is within bounds\n    if n > len(fractional_str):\n        return None  # Or you could raise an error, depending on your preference\n    \n    # Return the nth digit (0-indexed)\n    return int(fractional_str[n-1])  # Adjusting for 1-indexed input\n\n# Example usage:\nprint(find_nth_digit(1, 3, 1))  # Output: 3 (for 0.333...)\nprint(find_nth_digit(1, 3, 2))  # Output: 3 (for 0.333...)\nprint(find_nth_digit(1, 3, 3))  # Output: 3 (for 0.333...)\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 38, "completion": "def div_even_odd(numbers):\n    even_num = None\n    odd_num = None\n    \n    for num in numbers:\n        if even_num is None and num % 2 == 0:\n            even_num = num\n        elif odd_num is None and num % 2 != 0:\n            odd_num = num\n        \n        # Break out of the loop once both even and odd numbers are found\n        if even_num is not None and odd_num is not None:\n            break\n    \n    if even_num is None or odd_num is None:\n        return None  # Return None if either even or odd number is not found\n    \n    return even_num / odd_num\n\n# Example usage:\nprint(div_even_odd([1, 3, 5, 2, 4]))  # Output: 0.4 (2/5)\nprint(div_even_odd([2, 4, 6, 8, 10]))  # Output: None (no odd number)\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkrwq_7y5.py\", line 23, in <module>\n    assert cc_visit(inspect.getsource(div_even_odd))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 40, "completion": "from collections import Counter\n\ndef freq_element(list_of_lists):\n    # Flatten the list of lists and count the frequency of each element\n    flattened_list = (item for sublist in list_of_lists for item in sublist)\n    return Counter(flattened_list)\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [4, 5, 6], [1, 2, 3, 4]]\nprint(freq_element(list_of_lists))\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5_bgj8v_.py\", line 14, in <module>\n    assert cc_visit(inspect.getsource(freq_element))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 42, "completion": "def find_sum(arr):\n    # Dictionary to store the count of each element\n    counts = {}\n    \n    # Count the occurrences of each element\n    for num in arr:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    \n    # Calculate the sum of elements that occur more than once\n    repeated_sum = sum(num * count for num, count in counts.items() if count > 1)\n    \n    return repeated_sum\n\n# Example usage:\nprint(find_sum([1, 2, 3, 2, 3, 4, 5]))  # Output should be 10 (2+2+3+3)\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphk72w4kj.py\", line 15, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(s):\n    # Define the regex pattern to match lowercase letters joined with an underscore\n    pattern = r'^[a-z]+_[a-z]+$'\n    \n    # Use re.match to check if the entire string matches the pattern\n    return bool(re.match(pattern, s))\n\n# Example usage:\nprint(text_match(\"abc_def\"))  # True\nprint(text_match(\"abc_def_ghi\"))  # False (contains more than one underscore)\nprint(text_match(\"Abc_def\"))  # False (contains uppercase letter)\nprint(text_match(\"abc_def1\"))  # False (contains digit)\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_txe8e0i.py\", line 12, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 45, "completion": "def gcd(a, b):\n    \"\"\"Helper function to calculate GCD of two numbers using Euclidean algorithm.\"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef get_gcd(arr):\n    \"\"\"\n    Calculate the GCD of all elements in the array.\n    \n    :param arr: List of integers\n    :return: GCD of all elements in the array\n    \"\"\"\n    if not arr:  # Check if the array is empty\n        raise ValueError(\"Array must contain at least one element.\")\n    \n    result = arr[0]  # Initialize result with the first element of the array\n    \n    for num in arr[1:]:\n        result = gcd(result, num)\n        \n        # Early exit if the GCD becomes 1, as it cannot get any smaller\n        if result == 1:\n            break\n            \n    return result\n\n# Example usage:\narr = [24, 36, 48]\nprint(get_gcd(arr))  # Output should be 12\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpokazt0cb.py\", line 24, in <module>\n    assert cc_visit(inspect.getsource(get_gcd))[0].complexity <=1\nAssertionError", "passed": false}
{"task_id": 47, "completion": "def compute_last_digit(a, b):\n    # Ensure a <= b\n    if a > b:\n        return \"Invalid input: a must not be greater than b\"\n    \n    # If b >= 5, the last digit is always 0 due to the presence of factors 2 and 5\n    if b >= 5:\n        return 0\n    \n    # Calculate the product of numbers from (a+1) to b\n    last_digit = 1\n    for i in range(a + 1, b + 1):\n        last_digit *= i\n        last_digit %= 10  # Keep only the last digit\n    \n    return last_digit\n\n# Example usage:\nprint(compute_last_digit(2, 4))  # Output should be 4 (since 4! / 2! = 12, and the last digit is 2)\nprint(compute_last_digit(3, 6))  # Output should be 0 (since 6! / 3! ends with 0)\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpl_70yqx9.py\", line 18, in <module>\n    assert compute_last_digit(6,8) == 6\nAssertionError", "passed": false}
{"task_id": 51, "completion": "def check_equilateral(side1, side2, side3):\n    \"\"\"\n    Checks if a triangle with sides side1, side2, and side3 is equilateral.\n    \n    Parameters:\n    side1 (float): Length of the first side of the triangle.\n    side2 (float): Length of the second side of the triangle.\n    side3 (float): Length of the third side of the triangle.\n    \n    Returns:\n    bool: True if the triangle is equilateral, False otherwise.\n    \"\"\"\n    # Since we want cyclomatic complexity of 1, we use a single condition without branching\n    return side1 == side2 == side3\n\n# Example usage\nprint(check_equilateral(5, 5, 5))  # Should print True\nprint(check_equilateral(5, 6, 5))  # Should print False\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram given its base and height.\n    \n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram.\n    \n    Returns:\n    float: The area of the parallelogram.\n    \"\"\"\n    return base * height\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(s):\n    # Check if the string is non-empty before accessing its characters.\n    return s[0] == s[-1] if s else False\n\n# Example usage:\nprint(check_equality(\"radar\"))  # Output: True\nprint(check_equality(\"hello\"))  # Output: False\nprint(check_equality(\"\"))       # Output: False\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp41twwjx4.py\", line 8, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def check(num):\n    # Convert the number to a string to easily reverse it\n    str_num = str(num)\n    # Reverse the string representation of the number\n    reversed_str_num = str_num[::-1]\n    # Convert the reversed string back to an integer\n    reversed_num = int(reversed_str_num)\n    # Calculate twice the reversed number\n    twice_reversed = 2 * reversed_num\n    # Check if the original number is one less than twice the reversed number\n    return num == twice_reversed - 1\n\n# Example usage:\nprint(check(7))   # False, because 7 is not one less than twice its reverse (7 -> 7, 2*7-1=13)\nprint(check(24))  # True, because 24 is one less than twice its reverse (24 -> 42, 2*42-1=83)\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 58, "completion": "def opposite_signs(a, b):\n    return (a ^ b) < 0\n", "requirement": "Code Complexity", "result": "passed", "passed": true}

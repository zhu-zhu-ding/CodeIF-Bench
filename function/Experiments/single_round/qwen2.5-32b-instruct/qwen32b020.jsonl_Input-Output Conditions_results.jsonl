{"task_id": 14, "completion": "def find_volume(base_area, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base_area (float): The area of the triangular base.\n    height (float): The height of the triangle that forms the base (not used directly in volume calculation).\n    length (float): The length of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    # Ensure all inputs are positive numbers\n    if base_area <= 0 or length <= 0:\n        raise ValueError(\"Base area and length must be positive numbers.\")\n    \n    # Calculate the volume\n    volume = base_area * length\n    \n    return volume\n\n# Example usage:\n# print(find_volume(10, 5, 20))  # This would print the volume based on the provided dimensions\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp95iweaim.py\", line 10, in <module>\n    assert find_volume(10,8,6) == 240\nAssertionError", "passed": false}
{"task_id": 15, "completion": "def split_lowerstring(input_string):\n    if not input_string:\n        return []\n    \n    # Initialize an empty list to hold the segments.\n    segments = []\n    current_segment = \"\"\n    \n    # Iterate through the characters in the string.\n    for i, char in enumerate(input_string):\n        current_segment += char\n        \n        # Check if the current character is a lowercase letter and not the last character.\n        if char.islower() and i < len(input_string) - 1:\n            segments.append(current_segment)\n            current_segment = \"\"\n    \n    # Append any remaining segment after the loop ends.\n    if current_segment:\n        segments.append(current_segment)\n    \n    return segments\n\n# Example usage:\nprint(split_lowerstring(\"HelloWorld\"))  # Output: ['H', 'e', 'l', 'l', 'oW', 'o', 'r', 'l', 'd']\nprint(split_lowerstring(\"SplitThisStringAtLowercaseLetters\"))  # Output: ['S', 'p', 'l', 'i', 'tT', 'h', 'i', 'sS', 't', 'r', 'i', 'n', 'gA', 'tL', 'o', 'w', 'e', 'r', 'c', 'a', 's', 'eL', 'e', 't', 't', 'e', 'r', 's']\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpop5esfoc.py\", line 21, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(input_string):\n    # Define the pattern to search for sequences of lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    \n    # Use re.search to look for the pattern in the input string\n    if re.search(pattern, input_string):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\nprint(text_lowercase_underscore(\"hello_world\"))  # Should return 'Found a match!'\nprint(text_lowercase_underscore(\"Hello_World\"))  # Should return 'Not matched!'\nprint(text_lowercase_underscore(\"hello_world_123\"))  # Should return 'Not matched!'\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n    \n    Parameters:\n    side_length (int): The length of a side of the square. Must be a non-negative integer.\n    \n    Returns:\n    int: The perimeter of the square.\n    \n    Raises:\n    ValueError: If side_length is not a non-negative integer.\n    \"\"\"\n    if not isinstance(side_length, int) or side_length < 0:\n        raise ValueError(\"side_length must be a non-negative integer\")\n    \n    return 4 * side_length\n\n# Example usage:\ntry:\n    print(square_perimeter(5))  # Expected output: 20\nexcept ValueError as e:\n    print(e)\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(clean_str, dirty_str):\n    # Check if both strings contain only alphabetic characters\n    if not (clean_str.isalpha() and dirty_str.isalpha()):\n        raise ValueError('Input strings must only contain alphabetic characters.')\n    \n    # Create a set of characters to be removed for faster lookup\n    dirty_chars = set(dirty_str)\n    \n    # Build the result string by excluding characters present in dirty_str\n    result = ''.join(char for char in clean_str if char not in dirty_chars)\n    \n    return result\n\n# Example usage:\ntry:\n    print(remove_dirty_chars(\"hello\", \"ld\"))  # Output: \"hee\"\n    print(remove_dirty_chars(\"world\", \"or\"))  # Output: \"wld\"\n    print(remove_dirty_chars(\"test\", \"123\"))  # This will raise ValueError\nexcept ValueError as e:\n    print(e)  # Output: Input strings must only contain alphabetic characters.\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 19, "completion": "def test_duplicate(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Use a set to track seen elements\n    seen = set()\n    \n    # Iterate over each element in the list\n    for num in arr:\n        # If the element is already in the set, it's a duplicate\n        if num in seen:\n            return True\n        # Otherwise, add the element to the set\n        seen.add(num)\n    \n    # No duplicates found\n    return False\n\n# Example usage:\n# print(test_duplicate([1, 2, 3, 4]))  # Output: False\n# print(test_duplicate([1, 2, 3, 4, 2]))  # Output: True\n# print(test_duplicate(\"not a list\"))  # Raises TypeError\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(number):\n    # We start from n = 1 and go upwards.\n    n = 1\n    while True:\n        # Calculate the Woodall number for the current n\n        woodall_number = n * (2 ** n) - 1\n        \n        # If the calculated Woodall number equals the input number, it's a Woodall number\n        if woodall_number == number:\n            return True\n        \n        # If the calculated Woodall number exceeds the input number, it cannot be a Woodall number\n        if woodall_number > number:\n            return False\n        \n        # Increment n for the next iteration\n        n += 1\n\n# Example usage:\nprint(is_woodall(7))  # True, because 3 * 2^3 - 1 = 7\nprint(is_woodall(23)) # True, because 4 * 2^4 - 1 = 23\nprint(is_woodall(20)) # False, 20 is not a Woodall number\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists):\n    # Calculate the sum of each sublist\n    sums = [sum(sublist) for sublist in list_of_lists]\n    \n    # Find and return the maximum sum\n    return max(sums)\n\n# Example usage:\nexample_list_of_lists = [[1, 2, 3], [4, 5], [6]]\nprint(maximum_sum(example_list_of_lists))  # Output: 9 (since the sum of [6] is 6, which is the largest)\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 25, "completion": "from collections import Counter\n\ndef find_product(arr):\n    # Count the occurrences of each element in the array\n    counts = Counter(arr)\n    \n    # Initialize the product to 1\n    product = 1\n    \n    # Iterate over the counts dictionary\n    for num, count in counts.items():\n        if count == 1:\n            product *= num\n    \n    return product\n\n# Example usage:\nexample_array = [2, 3, 3, 4, 5]\nprint(find_product(example_array))  # Output will be 2 * 4 * 5 = 40\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpyx1lxo6v.py\", line 15, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(tuples_list, k):\n    \"\"\"\n    Checks if all tuples in the provided list have exactly k elements.\n    \n    :param tuples_list: List of tuples to be checked.\n    :param k: Expected number of elements in each tuple.\n    :return: True if all tuples have exactly k elements, False otherwise.\n    \"\"\"\n    for tup in tuples_list:\n        if len(tup) != k:\n            return False\n    return True\n\n# Example usage:\ntuples = [(1, 2), (3, 4), (5, 6)]\nprint(check_k_elements(tuples, 2))  # Output: True\n\ntuples_with_mismatch = [(1, 2), (3, 4, 5), (6,)]\nprint(check_k_elements(tuples_with_mismatch, 2))  # Output: False\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmps1325pvm.py\", line 11, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 28, "completion": "def binomial_coeff(n, k):\n    \"\"\"\n    Calculate the binomial coefficient (n choose k).\n    \n    :param n: Non-negative integer representing the total number of items.\n    :param k: Non-negative integer representing the number of items to choose.\n    :return: The binomial coefficient as an integer.\n    \"\"\"\n    # Ensure that n and k are non-negative integers\n    if not (isinstance(n, int) and isinstance(k, int)):\n        raise ValueError(\"Both n and k must be integers.\")\n    if n < 0 or k < 0:\n        raise ValueError(\"Both n and k must be non-negative.\")\n    \n    # If k > n, the result is 0 because it's impossible to choose more items than available\n    if k > n:\n        return 0\n    \n    # Special cases where the result is 1\n    if k == 0 or k == n:\n        return 1\n    \n    # Calculate the binomial coefficient using a loop to avoid large intermediate factorials\n    result = 1\n    for i in range(1, k + 1):\n        result *= n - (i - 1)\n        result //= i\n    \n    return result\n\n# Example usage\nprint(binomial_coeff(5, 2))  # Output: 10\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    # Dictionary to store the frequency of each character\n    char_count = {}\n    count = 0\n    \n    # Iterate over each character in the string\n    for char in s:\n        # If the character is already in the dictionary, add its count to the total count\n        if char in char_count:\n            count += char_count[char]\n        \n        # Increment the count of the character in the dictionary\n        char_count[char] = char_count.get(char, 0) + 1\n    \n    # Every single character is also a substring that starts and ends with the same character\n    count += len(s)\n    \n    return count\n\n# Example usage\ns = \"abcba\"\nprint(count_substring_with_equal_ends(s))  # Output will be the number of substrings starting and ending with the same character\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    # Initialize the largest prime factor variable\n    largest_prime = -1\n    \n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n\n    # n must be odd at this point, so we can skip one element (Note i = i + 2)\n    for i in range(3, int(n**0.5) + 1, 2):\n        # While i divides n, divide n\n        while n % i == 0:\n            largest_prime = i\n            n //= i\n\n    # This condition is to check if n is a prime number greater than 2\n    if n > 2:\n        largest_prime = n\n\n    return largest_prime\n\n# Example usage:\nprint(max_prime_factors(60))  # Output: 5\nprint(max_prime_factors(13195))  # Output: 29\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 35, "completion": "def find_rect_num(n):\n    \"\"\"\n    Calculate the n-th rectangular number.\n    \n    Parameters:\n    n (int): The position of the rectangular number to calculate.\n    \n    Returns:\n    int: The n-th rectangular number.\n    \"\"\"\n    return n * (n + 1)\n\n# Example usage:\nprint(find_rect_num(1))  # Output: 2\nprint(find_rect_num(2))  # Output: 6\nprint(find_rect_num(3))  # Output: 12\nprint(find_rect_num(4))  # Output: 20\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator, n):\n    if numerator >= denominator:\n        raise ValueError(\"The fraction must be a proper fraction (numerator < denominator).\")\n    \n    # Calculate the decimal part of the fraction\n    quotient, remainder = divmod(numerator, denominator)\n    decimal_digits = []\n    \n    seen_remainders = {}\n    \n    while remainder != 0:\n        # Check for repeating decimals\n        if remainder in seen_remainders:\n            break\n        \n        seen_remainders[remainder] = len(decimal_digits)\n        \n        # Multiply by 10 and find the next digit\n        remainder *= 10\n        digit, remainder = divmod(remainder, denominator)\n        decimal_digits.append(str(digit))\n    \n    # If there's a repeating part, mark it\n    if remainder in seen_remainders:\n        start_index = seen_remainders[remainder]\n        non_repeating = ''.join(decimal_digits[:start_index])\n        repeating = ''.join(decimal_digits[start_index:])\n        decimal_str = f\"{non_repeating}({repeating})\"\n    else:\n        decimal_str = ''.join(decimal_digits)\n    \n    # Find the nth digit\n    if n > len(decimal_str):\n        raise IndexError(f\"The decimal part does not have {n} digits.\")\n    \n    # Skip the '(' if it exists and get the nth digit\n    if '(' in decimal_str:\n        index = n - 1  # Adjusting index because of '0.'\n        if index >= len(decimal_str):\n            index %= len(decimal_str) - 1  # Loop within the repeating part\n        nth_digit = decimal_str[index + 1]  # Skip the '.'\n    else:\n        nth_digit = decimal_str[n-1]  # Directly get the nth digit\n    \n    return int(nth_digit)\n\n# Example usage:\nprint(find_nth_digit(1, 3, 5))  # Output: 3 (because 1/3 = 0.(3))\nprint(find_nth_digit(1, 7, 4))  # Output: 8 (because 1/7 = 0.(142857))\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgcqzvaka.py\", line 38, in <module>\n    print(find_nth_digit(1, 3, 5))  # Output: 3 (because 1/3 = 0.(3))\n  File \"/tmp/tmpgcqzvaka.py\", line 27, in find_nth_digit\n    raise IndexError(f\"The decimal part does not have {n} digits.\")\nIndexError: The decimal part does not have 5 digits.", "passed": false}
{"task_id": 38, "completion": "def div_even_odd(numbers):\n    # Initialize variables to store the first even and odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Iterate through the list to find the first even and odd numbers\n    for num in numbers:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        \n        # If both first even and odd numbers are found, break the loop\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Check if both numbers were found\n    if first_even is not None and first_odd is not None:\n        return first_even / first_odd\n    else:\n        # Handle the case where there's no even or odd number in the list\n        raise ValueError(\"List must contain at least one even and one odd number.\")\n\n# Example usage:\nnumbers_list = [3, 5, 7, 10, 2, 4]\nresult = div_even_odd(numbers_list)\nprint(result)  # Output will be 10 / 3 which is approximately 3.3333333333333335\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 39, "completion": "from collections import Counter\n\ndef rearrange_string(s):\n    # Count the frequency of each character in the string\n    char_count = Counter(s)\n    \n    # Sort the characters by their frequency in descending order\n    sorted_chars = sorted(char_count.items(), key=lambda x: x[1], reverse=True)\n    \n    # If the highest frequency is more than half the length of the string,\n    # it's impossible to rearrange the string to meet the condition.\n    if sorted_chars[0][1] > (len(s) + 1) // 2:\n        return \"\"\n    \n    # Initialize the result list with None values\n    result = [None] * len(s)\n    \n    # Fill even indices first\n    index = 0\n    for char, count in sorted_chars:\n        while count > 0:\n            if index >= len(s):\n                index = 1  # Start filling odd indices\n            result[index] = char\n            index += 2\n            count -= 1\n    \n    # Convert the list of characters back into a string\n    return ''.join(result)\n\n# Example usage:\nprint(rearrange_string(\"aab\"))  # Possible outputs: \"aba\", \"baa\"\nprint(rearrange_string(\"aaab\"))  # Output: \"\" because it's impossible to rearrange\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpj7bzeu_l.py\", line 27, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 42, "completion": "def find_sum(arr):\n    # Create a dictionary to keep track of element counts\n    element_count = {}\n    \n    # Count the occurrences of each element\n    for element in arr:\n        if element in element_count:\n            element_count[element] += 1\n        else:\n            element_count[element] = 1\n    \n    # Calculate the sum of elements that appear more than once\n    repeated_sum = 0\n    for element, count in element_count.items():\n        if count > 1:\n            repeated_sum += element * count\n    \n    return repeated_sum\n\n# Example usage:\nprint(find_sum([1, 2, 3, 2, 4, 5, 1]))  # Output should be 6 because 1+1=2 and 2+2=4, so 2+4=6\nprint(find_sum([1, 2, 3, 4, 5]))         # Output should be 0 because there are no repeated elements\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7ha0603a.py\", line 19, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    # Define the regex pattern to match sequences of lowercase letters joined by an underscore\n    pattern = r'^[a-z]+_[a-z]+$'\n    \n    # Use the search method to look for the pattern in the text\n    match = re.search(pattern, text)\n    \n    # If there is a match, return the matched text; otherwise, return 'Not matched!'\n    if match:\n        return match.group()\n    else:\n        return 'Not matched!'\n\n# Example usage:\nprint(text_match(\"hello_world\"))  # Should return \"hello_world\"\nprint(text_match(\"Hello_World\"))  # Should return \"Not matched!\"\nprint(text_match(\"hello_world_123\"))  # Should return \"Not matched!\"\nprint(text_match(\"hello_world_test\"))  # Should return \"Not matched!\"\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpuvxq0vb2.py\", line 17, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 46, "completion": "def test_distinct(numbers):\n    \"\"\"\n    Check if all numbers in the list are distinct.\n    \n    :param numbers: List of integers\n    :return: Boolean indicating whether all numbers are distinct\n    \"\"\"\n    return len(numbers) == len(set(numbers))\n\n# Example usage:\nprint(test_distinct([1, 2, 3, 4]))  # Output: True\nprint(test_distinct([1, 2, 2, 3]))  # Output: False\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 48, "completion": "def odd_bit_set_number(n):\n    # Initialize the result variable\n    result = 0\n    \n    # Set all odd bits in the result variable\n    for i in range(0, 32, 2):  # Loop from 0 to 31 with step 2 to cover all 32 bits\n        result |= (1 << i)\n    \n    # Return the original number with all odd bits set\n    return n | result\n\n# Example usage:\nprint(bin(odd_bit_set_number(10)))  # Example input: 10 (binary: 1010), output will be 15 (binary: 1111)\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpagfz_tsm.py\", line 11, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(two_d_list, index):\n    # Check if the input list is empty\n    if not two_d_list:\n        return []\n    \n    # Extract the element at the specified index from each sublist\n    result = [sublist[index] for sublist in two_d_list if len(sublist) > index]\n    \n    return result\n\n# Example usage:\ntwo_d_list = [[10, 20, 30], [40, 50], [60, 70, 80, 90]]\nindex = 1\nprint(specified_element(two_d_list, index))  # Output: [20, 50, 70]\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 50, "completion": "def min_length_list(list_of_lists):\n    # Find the list with the minimum length using a lambda function\n    min_list = min(list_of_lists, key=lambda x: len(x))\n    # Return a tuple with the length of the shortest list and the list itself\n    return (len(min_list), min_list)\n\n# Example usage:\nexample_lists = [[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]\nprint(min_length_list(example_lists))  # Output will be (1, [6])\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram given its base and height.\n    \n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram.\n    \n    Returns:\n    float: The area of the parallelogram.\n    \"\"\"\n    if base <= 0 or height <= 0:\n        raise ValueError(\"Base and height must be positive numbers.\")\n    \n    area = base * height\n    return area\n\n# Example usage:\n# print(parallelogram_area(5, 3))  # Should return 15\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppr42_u4f.py\", line 12, in <module>\n    assert parallelogram_area(0, 10) == 0\n  File \"/tmp/tmppr42_u4f.py\", line 3, in parallelogram_area\n    raise ValueError(\"Base and height must be positive numbers.\")\nValueError: Base and height must be positive numbers.", "passed": false}
{"task_id": 53, "completion": "def check_equality(s):\n    # Check if the input is a string\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string\")\n    \n    # Check if the string is empty or has only one character\n    if len(s) <= 1:\n        return 'Equal'\n    \n    # Compare the first and last characters\n    if s[0] == s[-1]:\n        return 'Equal'\n    else:\n        return 'Not Equal'\n\n# Example usage:\nprint(check_equality(\"radar\"))  # Output: Equal\nprint(check_equality(\"hello\"))  # Output: Not Equal\nprint(check_equality(\"a\"))      # Output: Equal\nprint(check_equality(\"\"))       # Output: Equal\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 54, "completion": "def counting_sort(arr):\n    # Check if the input is a list of non-negative integers\n    if not all(isinstance(x, int) and x >= 0 for x in arr):\n        raise ValueError(\"All elements must be non-negative integers\")\n    \n    # Find the maximum value to know the range of counts\n    max_value = max(arr, default=0)\n    \n    # Initialize count array with zeros\n    count = [0] * (max_value + 1)\n    \n    # Store the count of each element in count array\n    for num in arr:\n        count[num] += 1\n    \n    # Modify count array such that each element at each index\n    # stores the sum of previous counts\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    \n    # Output array to store the sorted elements\n    output = [0] * len(arr)\n    \n    # Build the output array\n    for num in reversed(arr):\n        output[count[num] - 1] = num\n        count[num] -= 1\n    \n    return output\n\n# Example usage:\narr = [4, 2, 2, 8, 3, 3, 1]\nsorted_arr = counting_sort(arr)\nprint(sorted_arr)  # Output: [1, 2, 2, 3, 3, 4, 8]\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 57, "completion": "def find_max_num(digits, n):\n    # Sort the digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n    \n    # Select the first n digits\n    selected_digits = sorted_digits[:n]\n    \n    # Combine the digits to form the largest number\n    max_number = int(''.join(map(str, selected_digits)))\n    \n    return max_number\n\n# Example usage:\ndigits = [3, 30, 34, 5, 9]\nn = 3\nprint(find_max_num(digits, n))  # Output: 9534\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 58, "completion": "def opposite_signs(a, b):\n    # Check if both inputs are integers\n    if not (isinstance(a, int) and isinstance(b, int)):\n        raise ValueError(\"Both inputs must be integers\")\n    \n    # Check if the numbers have opposite signs\n    return (a ^ b) < 0\n\n# Example usage:\nprint(opposite_signs(10, -5))  # True\nprint(opposite_signs(-2, -3))  # False\nprint(opposite_signs(4, 7))    # False\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 60, "completion": "def max_len_sub(arr, k):\n    \"\"\"\n    Finds the maximum length of a subsequence in arr such that the absolute difference \n    between every pair of adjacent elements in the subsequence is at most k.\n    \n    :param arr: List[int] - The input array of integers.\n    :param k: int - The maximum allowed difference between adjacent elements in the subsequence.\n    :return: int - The maximum length of the desired subsequence.\n    \"\"\"\n    if not arr:\n        return 0\n\n    # Dictionary to store the maximum length of subsequence ending with a specific value\n    dp = {}\n    max_length = 1\n    \n    for num in arr:\n        # Check all possible values within the range [num-k, num+k]\n        current_max = 1\n        for diff in range(-k, k+1):\n            prev_num = num + diff\n            if prev_num in dp:\n                current_max = max(current_max, dp[prev_num] + 1)\n        \n        dp[num] = current_max\n        max_length = max(max_length, current_max)\n    \n    return max_length\n\n# Example usage:\nprint(max_len_sub([1, 2, 3, 4], 1))  # Output: 4\nprint(max_len_sub([1, 3, 5, 7], 2))  # Output: 2\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpp3haf91s.py\", line 20, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nAssertionError", "passed": false}

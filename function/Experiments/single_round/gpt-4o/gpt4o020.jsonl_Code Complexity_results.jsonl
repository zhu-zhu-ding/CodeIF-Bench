{"task_id": 11, "completion": "def remove_occ(s, char):\n    first_index = s.find(char)\n    last_index = s.rfind(char)\n    \n    if first_index == -1 or first_index == last_index:\n        return s\n    \n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]\n\n# Example usage:\nprint(remove_occ(\"abracadabra\", \"a\"))  # Output: \"bracadabr\"\nprint(remove_occ(\"hello\", \"l\"))        # Output: \"heo\"\nprint(remove_occ(\"test\", \"t\"))         # Output: \"es\"\nprint(remove_occ(\"example\", \"x\"))      # Output: \"example\"\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 14, "completion": "def find_volume(base: float, height: float, length: float) -> float:\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    - base (float): The base of the triangular face.\n    - height (float): The height of the triangular face.\n    - length (float): The length of the prism.\n\n    Returns:\n    - float: The volume of the triangular prism.\n    \"\"\"\n    return 0.5 * base * height * length\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 15, "completion": "import re\n\ndef split_lowerstring(s):\n    return re.split(r'(?<=[a-z])', s)\n\n# Example usage:\nresult = split_lowerstring(\"HelloWorld\")\nprint(result)  # Output: ['H', 'e', 'lloWorld']\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp17_6zhyl.py\", line 7, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Finds sequences of lowercase letters joined with an underscore in the given text.\n\n    Parameters:\n    text (str): The input string to search within.\n\n    Returns:\n    list: A list of matching sequences.\n    \"\"\"\n    return re.findall(r'\\b[a-z]+(?:_[a-z]+)+\\b', text)\n\n# Example usage:\nexample_text = \"this_is_a_test example_text anotherExample not_matching\"\nmatches = text_lowercase_underscore(example_text)\nprint(matches)  # Output: ['this_is_a_test', 'example_text']\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp71_r21q1.py\", line 8, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    return 4 * side_length\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(number):\n    # Calculate the inverse of the Woodall number formula\n    # n * 2^n - 1 = number => n * 2^n = number + 1\n    # We need to find if there exists an integer n such that n * 2^n = number + 1\n    \n    # Start with n = 1 and calculate n * 2^n\n    n = 1\n    current_woodall = n * (2 ** n)\n    \n    # Since we cannot use loops or conditionals, we will use a mathematical approach\n    # Calculate the potential n using logarithms\n    import math\n    if number < 0:\n        return False\n    \n    potential_n = math.log2(number + 1)\n    \n    # Check if potential_n is an integer\n    if potential_n.is_integer():\n        n = int(potential_n)\n        return n * (2 ** n) == number + 1\n    \n    return False\n\n# Example usage:\nprint(is_woodall(7))  # True, because 7 is a Woodall number (1 * 2^3 - 1)\nprint(is_woodall(8))  # False, because 8 is not a Woodall number\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4ow182nj.py\", line 22, in <module>\n    assert is_woodall(383) == True\nAssertionError", "passed": false}
{"task_id": 21, "completion": "def multiples_of_num(n, m):\n    return [n * i for i in range(1, m + 1)]\n\n# Example usage:\nprint(multiples_of_num(3, 5))  # Output: [3, 6, 9, 12, 15]\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp3vpj005l.py\", line 5, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 24, "completion": "def binary_to_decimal(binary_str):\n    return int(binary_str, 2)\n\n# Example usage:\nbinary_number = \"1011\"\ndecimal_number = binary_to_decimal(binary_number)\nprint(decimal_number)  # Output: 11\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpou12j1gu.py\", line 7, in <module>\n    assert binary_to_decimal(100) == 4\n  File \"/tmp/tmpou12j1gu.py\", line 2, in binary_to_decimal\n    return int(binary_str, 2)\nTypeError: int() can't convert non-string with explicit base", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    def largest_prime_factor(num):\n        max_prime = -1\n        # Check for number of 2s\n        while num % 2 == 0:\n            max_prime = 2\n            num //= 2\n        # Check for odd factors\n        for i in range(3, int(num**0.5) + 1, 2):\n            while num % i == 0:\n                max_prime = i\n                num //= i\n        # If num is a prime number greater than 2\n        if num > 2:\n            max_prime = num\n        return max_prime\n\n    return largest_prime_factor(n)\n\n# Example usage:\nprint(max_prime_factors(13195))  # Output: 29\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(decimal_number):\n    return bin(decimal_number)[2:]\n\n# Example usage:\nprint(decimal_to_binary(10))  # Output: '1010'\nprint(decimal_to_binary(255)) # Output: '11111111'\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmnvhbcs3.py\", line 6, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    return n * (n + 1)\n\n# Example usage:\n# print(find_rect_num(1))  # Output: 2\n# print(find_rect_num(2))  # Output: 6\n# print(find_rect_num(3))  # Output: 12\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator, n):\n    if denominator == 0:\n        raise ValueError(\"Denominator cannot be zero.\")\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    # Get the integer part and the initial remainder\n    integer_part = numerator // denominator\n    remainder = numerator % denominator\n    \n    # If n is 1, return the first digit after the decimal point\n    if n == 1:\n        remainder *= 10\n        return remainder // denominator\n    \n    # Iterate to find the nth digit\n    for _ in range(n - 1):\n        remainder *= 10\n        remainder %= denominator\n    \n    # Get the nth digit\n    remainder *= 10\n    nth_digit = remainder // denominator\n    \n    return nth_digit\n\n# Example usage:\n# Find the 3rd digit in the decimal representation of 1/7\nprint(find_nth_digit(1, 7, 3))  # Output: 4\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 38, "completion": "def div_even_odd(numbers):\n    even = None\n    odd = None\n    \n    for num in numbers:\n        if even is None and num % 2 == 0:\n            even = num\n        if odd is None and num % 2 != 0:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    \n    if even is not None and odd is not None:\n        return even / odd\n    else:\n        return None\n\n# Example usage:\nnumbers = [3, 5, 8, 10, 12]\nresult = div_even_odd(numbers)\nprint(result)  # Output: 8 / 3 = 2.666...\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpa2xetdio.py\", line 24, in <module>\n    assert cc_visit(inspect.getsource(div_even_odd))[0].complexity == 1\nAssertionError", "passed": false}
{"task_id": 40, "completion": "from collections import Counter\nfrom itertools import chain\n\ndef freq_element(list_of_lists):\n    return Counter(chain.from_iterable(list_of_lists))\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [4, 5, 6], [1, 2, 3, 4]]\nfrequency = freq_element(list_of_lists)\nprint(frequency)\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 42, "completion": "def find_sum(arr):\n    from collections import Counter\n    \n    # Count the occurrences of each element in the array\n    element_count = Counter(arr)\n    \n    # Calculate the sum of elements that appear more than once\n    repeated_sum = sum(element for element, count in element_count.items() if count > 1)\n    \n    return repeated_sum\n\n# Example usage:\n# arr = [1, 2, 2, 3, 4, 4, 4, 5]\n# print(find_sum(arr))  # Output: 6 (2 + 4)\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0815slnr.py\", line 11, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    \"\"\"\n    Find sequences of lowercase letters joined with an underscore in the given text.\n\n    Parameters:\n    text (str): The input string to search within.\n\n    Returns:\n    list: A list of all matches found.\n    \"\"\"\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    return re.findall(pattern, text)\n\n# Example usage:\n# matches = text_match(\"this_is_a_test example_with_no_match\")\n# print(matches)  # Output: ['this_is', 'example_with']\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpe641vso5.py\", line 8, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 45, "completion": "import math\nfrom functools import reduce\n\ndef get_gcd(arr):\n    if not arr:\n        return None  # Return None for an empty array\n    return reduce(math.gcd, arr)\n\n# Example usage:\nnumbers = [48, 64, 80]\nprint(get_gcd(numbers))  # Output: 16\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0z9btldq.py\", line 15, in <module>\n    assert cc_visit(inspect.getsource(get_gcd))[0].complexity <=1\nAssertionError", "passed": false}
{"task_id": 47, "completion": "def compute_last_digit(a, b):\n    if a > b:\n        return 0  # a! cannot divide b! if a > b\n\n    # Calculate the number of 5s and 2s in the factorization of b!\n    def count_factors(n, factor):\n        count = 0\n        while n > 0:\n            n //= factor\n            count += n\n        return count\n\n    # Count the number of 5s and 2s in a! and b!\n    count_5_b = count_factors(b, 5)\n    count_2_b = count_factors(b, 2)\n    count_5_a = count_factors(a, 5)\n    count_2_a = count_factors(a, 2)\n\n    # Calculate the number of 5s and 2s in the division b! / a!\n    count_5_div = count_5_b - count_5_a\n    count_2_div = count_2_b - count_2_a\n\n    # The number of trailing zeros in b! / a! is determined by the minimum of count_5_div and count_2_div\n    trailing_zeros = min(count_5_div, count_2_div)\n\n    # The last non-zero digit of b! / a! is influenced by the remaining factors\n    # We need to calculate the product of the remaining factors modulo 10\n    last_digit = 1\n    for i in range(a + 1, b + 1):\n        num = i\n        # Remove factors of 5 and 2\n        while num % 5 == 0:\n            num //= 5\n        while num % 2 == 0:\n            num //= 2\n        # Multiply the remaining part modulo 10\n        last_digit = (last_digit * num) % 10\n\n    # Adjust for the trailing zeros\n    last_digit = (last_digit * pow(2, count_2_div - trailing_zeros, 10)) % 10\n\n    return last_digit\n\n# Example usage:\nprint(compute_last_digit(5, 10))  # Output: 2\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpgvx7d17p.py\", line 43, in <module>\n    assert cc_visit(inspect.getsource(compute_last_digit))[0].complexity <=3\nAssertionError", "passed": false}
{"task_id": 51, "completion": "def check_equilateral(side1, side2, side3):\n    # Check if all sides are equal\n    is_equilateral = side1 == side2 == side3\n    print(\"The triangle is equilateral.\" if is_equilateral else \"The triangle is not equilateral.\")\n\n# Example usage:\ncheck_equilateral(5, 5, 5)  # Output: The triangle is equilateral.\ncheck_equilateral(5, 5, 3)  # Output: The triangle is not equilateral.\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpymb7vf5i.py\", line 8, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram.\n    \"\"\"\n    return base * height\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(s: str) -> bool:\n    return len(s) > 0 and s[0] == s[-1]\n\n# Example usage:\nprint(check_equality(\"radar\"))  # Output: True\nprint(check_equality(\"hello\"))  # Output: False\nprint(check_equality(\"a\"))      # Output: True\nprint(check_equality(\"\"))       # Output: False\n", "requirement": "Code Complexity", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpsti4q3di.py\", line 8, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def check(number):\n    # Convert the number to a string to reverse it\n    reversed_number = int(str(number)[::-1])\n    # Check if the number is one less than twice its reverse\n    return number == 2 * reversed_number - 1\n\n# Example usage:\n# print(check(21))  # True, because 21 is one less than twice its reverse (12 * 2 - 1 = 23)\n# print(check(10))  # False, because 10 is not one less than twice its reverse (1 * 2 - 1 = 1)\n", "requirement": "Code Complexity", "result": "passed", "passed": true}
{"task_id": 58, "completion": "def opposite_signs(a: int, b: int) -> bool:\n    return (a * b) < 0\n\n# Example usage:\nprint(opposite_signs(5, -3))  # Output: True\nprint(opposite_signs(-5, 3))  # Output: True\nprint(opposite_signs(5, 3))   # Output: False\nprint(opposite_signs(-5, -3)) # Output: False\n", "requirement": "Code Complexity", "result": "passed", "passed": true}

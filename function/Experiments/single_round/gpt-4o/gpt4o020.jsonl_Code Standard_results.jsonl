{"task_id": 11, "completion": "def remove_occ(input_string, char_to_remove):\n    \"\"\"\n    Remove the first and last occurrence of a given character from the string.\n\n    Parameters:\n    input_string (str): The string from which to remove the character.\n    char_to_remove (str): The character to remove from the string.\n\n    Returns:\n    str: The modified string with the first and last occurrence of the character removed.\n    \"\"\"\n    if not input_string or not char_to_remove:\n        return input_string\n\n    first_occurrence = input_string.find(char_to_remove)\n    last_occurrence = input_string.rfind(char_to_remove)\n\n    if first_occurrence == -1 or last_occurrence == -1:\n        return input_string\n\n    # Remove the first occurrence\n    modified_string = (input_string[:first_occurrence] +\n                       input_string[first_occurrence + 1:])\n\n    # Adjust last_occurrence index if it was after the first occurrence\n    if last_occurrence > first_occurrence:\n        last_occurrence -= 1\n\n    # Remove the last occurrence\n    modified_string = (modified_string[:last_occurrence] +\n                       modified_string[last_occurrence + 1:])\n\n    return modified_string\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 12, "completion": "def sort_matrix(matrix):\n    \"\"\"\n    Sorts a matrix in ascending order based on the sum of its rows.\n\n    Parameters:\n    matrix (list of list of int/float): A 2D list representing the matrix.\n\n    Returns:\n    list of list of int/float: The sorted matrix.\n    \"\"\"\n    # Sort the matrix using the sum of each row as the key\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    return sorted_matrix\n\n# Example usage:\nmatrix = [\n    [3, 4, 2],\n    [1, 2, 3],\n    [5, 0, 0]\n]\n\nsorted_matrix = sort_matrix(matrix)\nprint(sorted_matrix)\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 14, "completion": "def find_volume(base: float, height_of_triangle: float, height_of_prism: float) -> float:\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    :param base: The base length of the triangular face.\n    :param height_of_triangle: The height of the triangular face.\n    :param height_of_prism: The height (or length) of the prism.\n    :return: The volume of the triangular prism.\n    \"\"\"\n    base_area = 0.5 * base * height_of_triangle\n    volume = base_area * height_of_prism\n    return volume\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpbe7jnv1l.py\", line 22, in <module>\n    check_code_style(find_volume)\n  File \"/tmp/tmpbe7jnv1l.py\", line 18, in check_code_style\n    assert result.total_errors == 0, \"Code does not conform to PEP 8 standards.\"\nAssertionError: Code does not conform to PEP 8 standards.", "passed": false}
{"task_id": 15, "completion": "import re\n\ndef split_lowerstring(s):\n    \"\"\"\n    Splits a string at lowercase letters.\n\n    Parameters:\n    s (str): The input string to be split.\n\n    Returns:\n    list: A list of strings split at lowercase letters.\n    \"\"\"\n    # Use a regular expression to split the string at lowercase letters\n    return re.split(r'(?<=[a-z])', s)\n\n# Example usage:\ninput_string = \"HelloWorld\"\nresult = split_lowerstring(input_string)\nprint(result)  # Output: ['H', 'ello', 'W', 'orld']\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpg8uov9d0.py\", line 9, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Find sequences of lowercase letters joined with an underscore in the given text.\n\n    Parameters:\n    text (str): The input string to search for patterns.\n\n    Returns:\n    list: A list of matching sequences.\n    \"\"\"\n    pattern = r'\\b[a-z]+(?:_[a-z]+)+\\b'\n    matches = re.findall(pattern, text)\n    return matches\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpeqgmiso8.py\", line 6, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Parameters:\n    side_length (float): The length of one side of the square.\n\n    Returns:\n    float: The perimeter of the square.\n    \"\"\"\n    return 4 * side_length\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(source_string, chars_to_remove):\n    \"\"\"\n    Remove characters from the source_string that are present in chars_to_remove.\n\n    Parameters:\n    source_string (str): The string from which characters will be removed.\n    chars_to_remove (str): The string containing characters to be removed from the source_string.\n\n    Returns:\n    str: A new string with the specified characters removed.\n    \"\"\"\n    return ''.join(char for char in source_string if char not in chars_to_remove)\n\n# Example usage:\ncleaned_string = remove_dirty_chars(\"hello world\", \"lo\")\nprint(cleaned_string)  # Output: \"he wrd\"\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpeblg5jt8.py\", line 23, in <module>\n    check_code_style(remove_dirty_chars)\n  File \"/tmp/tmpeblg5jt8.py\", line 19, in check_code_style\n    assert result.total_errors == 0, \"Code does not conform to PEP 8 standards.\"\nAssertionError: Code does not conform to PEP 8 standards.", "passed": false}
{"task_id": 19, "completion": "def test_duplicate(numbers):\n    \"\"\"\n    Check if the given list of integers contains any duplicate elements.\n\n    :param numbers: List of integers to check for duplicates.\n    :return: True if duplicates are found, False otherwise.\n    \"\"\"\n    seen = set()\n    for number in numbers:\n        if number in seen:\n            return True\n        seen.add(number)\n    return False\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(number):\n    \"\"\"\n    Check if the given number is a Woodall number.\n\n    A Woodall number is of the form n * 2^n - 1 for some positive integer n.\n\n    :param number: The number to check.\n    :return: True if the number is a Woodall number, False otherwise.\n    \"\"\"\n    if number < 0:\n        return False\n\n    n = 1\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number == number:\n            return True\n        if woodall_number > number:\n            return False\n        n += 1\n\n# Example usage:\nprint(is_woodall(7))  # True, because 7 is 1 * 2^3 - 1\nprint(is_woodall(23)) # True, because 23 is 3 * 2^3 - 1\nprint(is_woodall(10)) # False, 10 is not a Woodall number\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 21, "completion": "def multiples_of_num(n, m):\n    \"\"\"\n    Find m multiples of n.\n\n    Parameters:\n    n (int): The number to find multiples of.\n    m (int): The number of multiples to find.\n\n    Returns:\n    list: A list containing m multiples of n.\n    \"\"\"\n    multiples = []\n    for i in range(1, m + 1):\n        multiples.append(n * i)\n    return multiples\n\n# Example usage:\n# print(multiples_of_num(5, 3))  # Output: [5, 10, 15]\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp54u5xacc.py\", line 8, in <module>\n    assert multiples_of_num(4,3)== [3,6,9,12]\nAssertionError", "passed": false}
{"task_id": 22, "completion": "def find_first_duplicate(arr):\n    \"\"\"\n    Find the first duplicate element in a given array of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The first duplicate element if found, otherwise None.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplq9zg4sv.py\", line 9, in <module>\n    assert find_first_duplicate([1, 2, 3, 4])==-1\nAssertionError", "passed": false}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists):\n    \"\"\"\n    Find the maximum sum of elements in a list of lists.\n\n    Parameters:\n    list_of_lists (list of list of int/float): A list containing lists of numbers.\n\n    Returns:\n    int/float: The maximum sum of elements from the lists.\n    \"\"\"\n    if not list_of_lists:\n        return 0\n\n    max_sum = float('-inf')\n    for sublist in list_of_lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 24, "completion": "def binary_to_decimal(binary_str):\n    \"\"\"\n    Convert a binary number (given as a string) to its decimal equivalent.\n\n    Parameters:\n    binary_str (str): A string representing a binary number.\n\n    Returns:\n    int: The decimal equivalent of the binary number.\n    \"\"\"\n    decimal_value = 0\n    binary_length = len(binary_str)\n\n    for i in range(binary_length):\n        # Convert the current character to an integer (0 or 1)\n        bit = int(binary_str[i])\n        # Calculate the power of 2 for the current position\n        power = binary_length - i - 1\n        # Add the value of the current bit to the decimal value\n        decimal_value += bit * (2 ** power)\n\n    return decimal_value\n\n# Example usage:\nbinary_number = \"1101\"\ndecimal_number = binary_to_decimal(binary_number)\nprint(f\"The decimal equivalent of binary {binary_number} is {decimal_number}.\")\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmprsgyxe36.py\", line 16, in <module>\n    assert binary_to_decimal(100) == 4\n  File \"/tmp/tmprsgyxe36.py\", line 3, in binary_to_decimal\n    binary_length = len(binary_str)\nTypeError: object of type 'int' has no len()", "passed": false}
{"task_id": 25, "completion": "def find_product(arr):\n    \"\"\"\n    Calculate the product of non-repeated elements in the given array.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The product of non-repeated elements. Returns 1 if there are no non-repeated elements.\n    \"\"\"\n    from collections import Counter\n\n    # Count the occurrences of each element in the array\n    element_count = Counter(arr)\n\n    # Initialize the product to 1 (multiplicative identity)\n    product = 1\n\n    # Flag to check if there are any non-repeated elements\n    has_non_repeated = False\n\n    # Iterate over the element counts\n    for element, count in element_count.items():\n        if count == 1:\n            product *= element\n            has_non_repeated = True\n\n    # If there are no non-repeated elements, return 1\n    return product if has_non_repeated else 1\n\n# Example usage:\n# arr = [2, 3, 4, 2, 5, 3]\n# print(find_product(arr))  # Output: 20 (4 * 5)\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdu4u4blv.py\", line 19, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(tuple_list, k):\n    \"\"\"\n    Check if all tuples in the given list have exactly k elements.\n\n    Parameters:\n    tuple_list (list of tuples): The list of tuples to check.\n    k (int): The required number of elements in each tuple.\n\n    Returns:\n    bool: True if all tuples have exactly k elements, False otherwise.\n    \"\"\"\n    for t in tuple_list:\n        if len(t) != k:\n            return False\n    return True\n\n# Example usage:\n# tuple_list = [(1, 2), (3, 4), (5, 6)]\n# k = 2\n# print(check_k_elements(tuple_list, k))  # Output: True\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpq8osw_j1.py\", line 10, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "completion": "def remove(strings):\n    \"\"\"\n    Remove all digits from a list of strings.\n\n    Parameters:\n    strings (list of str): A list of strings from which digits will be removed.\n\n    Returns:\n    list of str: A new list of strings with all digits removed.\n    \"\"\"\n    return [''.join(char for char in string if not char.isdigit()) for string in strings]\n\n# Example usage:\nstrings = [\"hello123\", \"world456\", \"python789\"]\ncleaned_strings = remove(strings)\nprint(cleaned_strings)  # Output: ['hello', 'world', 'python']\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpd8skio7z.py\", line 24, in <module>\n    check_code_style(remove)\n  File \"/tmp/tmpd8skio7z.py\", line 20, in check_code_style\n    assert result.total_errors == 0, \"Code does not conform to PEP 8 standards.\"\nAssertionError: Code does not conform to PEP 8 standards.", "passed": false}
{"task_id": 28, "completion": "def binomial_coeff(n, k):\n    \"\"\"Calculate the binomial coefficient C(n, k).\n\n    Args:\n        n (int): The number of items.\n        k (int): The number of items to choose.\n\n    Returns:\n        int: The binomial coefficient.\n    \"\"\"\n    if k < 0 or k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n\n    k = min(k, n - k)  # Take advantage of symmetry\n    c = 1\n    for i in range(k):\n        c = c * (n - i) // (i + 1)\n    return c\n\n# Example usage:\n# print(binomial_coeff(5, 2))  # Output: 10\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 29, "completion": "def get_odd_occurrence(arr):\n    \"\"\"\n    Find the element that occurs an odd number of times in the list.\n\n    Parameters:\n    arr (list): A list of integers where exactly one element occurs an odd number of times.\n\n    Returns:\n    int: The element that occurs an odd number of times.\n    \"\"\"\n    result = 0\n    for number in arr:\n        result ^= number\n    return result\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpg9phka9x.py\", line 6, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    \"\"\"\n    Count all substrings in the given string that start and end with the same character.\n\n    :param s: The input string\n    :return: The count of substrings with equal start and end characters\n    \"\"\"\n    from collections import defaultdict\n\n    # Dictionary to store the frequency of each character\n    char_count = defaultdict(int)\n\n    # Count occurrences of each character\n    for char in s:\n        char_count[char] += 1\n\n    # Calculate the number of substrings for each character\n    count = 0\n    for freq in char_count.values():\n        count += freq * (freq + 1) // 2\n\n    return count\n\n# Example usage:\n# s = \"abcab\"\n# print(count_substring_with_equal_ends(s))  # Output: 7\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 31, "completion": "from collections import defaultdict\nimport heapq\n\ndef func(lists, k):\n    \"\"\"\n    Find the top k integers that occur most frequently from given lists of sorted and distinct integers.\n\n    :param lists: List of lists, where each sublist contains sorted and distinct integers.\n    :param k: Integer, the number of top frequent elements to return.\n    :return: List of the top k integers that occur most frequently.\n    \"\"\"\n    # Dictionary to count the frequency of each integer\n    frequency = defaultdict(int)\n\n    # Count the frequency of each integer across all lists\n    for lst in lists:\n        for num in lst:\n            frequency[num] += 1\n\n    # Use a heap to find the top k frequent elements\n    # We use a min-heap of size k to keep track of the top k elements\n    heap = []\n\n    for num, freq in frequency.items():\n        # Push the negative frequency to simulate a max-heap using Python's min-heap\n        heapq.heappush(heap, (-freq, num))\n        if len(heap) > k:\n            heapq.heappop(heap)\n\n    # Extract the elements from the heap and return them\n    top_k = [heapq.heappop(heap)[1] for _ in range(len(heap))]\n    top_k.reverse()  # Reverse to get the elements in descending order of frequency\n\n    return top_k\n\n# Example usage:\nlists = [\n    [1, 2, 3],\n    [2, 3, 4],\n    [3, 4, 5]\n]\nk = 2\nprint(func(lists, k))  # Output: [3, 2]\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpyslm7vmi.py\", line 30, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "completion": "def is_prime(n):\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef max_prime_factors(number):\n    \"\"\"Find the largest prime factor of a given number.\"\"\"\n    if number <= 1:\n        return None\n\n    largest_prime = None\n\n    # Check for the smallest prime factor 2\n    while number % 2 == 0:\n        largest_prime = 2\n        number //= 2\n\n    # Check for odd factors from 3 onwards\n    factor = 3\n    while factor * factor <= number:\n        while number % factor == 0:\n            largest_prime = factor\n            number //= factor\n        factor += 2\n\n    # If number is still greater than 2, then it is prime\n    if number > 2:\n        largest_prime = number\n\n    return largest_prime\n\n# Example usage:\nprint(max_prime_factors(13195))  # Output: 29\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(decimal_number):\n    \"\"\"Convert a decimal number to its binary representation.\n\n    Args:\n        decimal_number (int): The decimal number to convert.\n\n    Returns:\n        str: The binary representation of the decimal number.\n    \"\"\"\n    if not isinstance(decimal_number, int):\n        raise ValueError(\"Input must be an integer.\")\n\n    if decimal_number == 0:\n        return \"0\"\n\n    binary_number = \"\"\n    is_negative = decimal_number < 0\n    decimal_number = abs(decimal_number)\n\n    while decimal_number > 0:\n        remainder = decimal_number % 2\n        binary_number = str(remainder) + binary_number\n        decimal_number = decimal_number // 2\n\n    if is_negative:\n        binary_number = \"-\" + binary_number\n\n    return binary_number\n\n# Example usage:\n# print(decimal_to_binary(10))  # Output: '1010'\n# print(decimal_to_binary(-10)) # Output: '-1010'\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppk8psedd.py\", line 25, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "completion": "def find_missing(arr):\n    \"\"\"\n    Find the missing number in a sorted array of consecutive numbers.\n\n    :param arr: List[int] - A sorted list of consecutive numbers with one missing.\n    :return: int - The missing number.\n    \"\"\"\n    if not arr:\n        raise ValueError(\"The array should not be empty.\")\n\n    n = len(arr)\n    expected_sum = (arr[0] + arr[-1]) * (n + 1) // 2\n    actual_sum = sum(arr)\n    \n    return expected_sum - actual_sum\n\n# Example usage:\n# arr = [1, 2, 3, 4, 6, 7, 8]\n# print(find_missing(arr))  # Output: 5\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphybq1mou.py\", line 11, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    \"\"\"\n    Calculate the n-th rectangular number.\n\n    Parameters:\n    n (int): The position of the rectangular number to find.\n\n    Returns:\n    int: The n-th rectangular number.\n    \"\"\"\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return n * (n + 1)\n\n# Example usage:\n# print(find_rect_num(5))  # Output: 30\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator, n):\n    \"\"\"\n    Find the nth digit in the decimal representation of the fraction numerator/denominator.\n\n    :param numerator: The numerator of the fraction.\n    :param denominator: The denominator of the fraction.\n    :param n: The position of the digit to find in the fractional part.\n    :return: The nth digit in the fractional part of the division.\n    \"\"\"\n    if denominator == 0:\n        raise ValueError(\"Denominator cannot be zero.\")\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    # Get the fractional part of the division\n    fractional_part = numerator % denominator\n    fractional_part *= 10\n\n    # Find the nth digit\n    for _ in range(n - 1):\n        fractional_part = (fractional_part % denominator) * 10\n\n    nth_digit = fractional_part // denominator\n    return nth_digit\n\n# Example usage:\n# Find the 3rd digit in the decimal representation of 1/3\nprint(find_nth_digit(1, 3, 3))  # Output: 3\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 37, "completion": "def sort_mixed_list(mixed_list):\n    \"\"\"\n    Sorts a mixed list of integers and strings. Integers are sorted in ascending order,\n    and strings are sorted in lexicographical order. The sorted integers come first,\n    followed by the sorted strings.\n\n    :param mixed_list: List containing integers and strings\n    :return: A new list with integers and strings sorted separately\n    \"\"\"\n    integers = [item for item in mixed_list if isinstance(item, int)]\n    strings = [item for item in mixed_list if isinstance(item, str)]\n\n    sorted_integers = sorted(integers)\n    sorted_strings = sorted(strings)\n\n    return sorted_integers + sorted_strings\n\n# Example usage:\nmixed_list = [3, 'apple', 1, 'banana', 2, 'cherry']\nsorted_list = sort_mixed_list(mixed_list)\nprint(sorted_list)  # Output: [1, 2, 3, 'apple', 'banana', 'cherry']\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 38, "completion": "def div_even_odd(numbers):\n    \"\"\"\n    Find the division of the first even and odd number in a given list.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    float: The result of dividing the first even number by the first odd number.\n    None: If no even or odd number is found in the list.\n    \"\"\"\n    first_even = None\n    first_odd = None\n\n    for number in numbers:\n        if first_even is None and number % 2 == 0:\n            first_even = number\n        if first_odd is None and number % 2 != 0:\n            first_odd = number\n        if first_even is not None and first_odd is not None:\n            break\n\n    if first_even is not None and first_odd is not None:\n        return first_even / first_odd\n    else:\n        return None\n\n# Example usage:\nnumbers = [5, 3, 8, 10, 7]\nresult = div_even_odd(numbers)\nprint(result)  # Output: 2.6666666666666665\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 39, "completion": "import heapq\nfrom collections import Counter\n\ndef rearrange_string(s: str) -> str:\n    # Count the frequency of each character\n    char_count = Counter(s)\n    \n    # Create a max heap based on the frequency of characters\n    max_heap = [(-freq, char) for char, freq in char_count.items()]\n    heapq.heapify(max_heap)\n    \n    # This will store the rearranged string\n    result = []\n    \n    # Previous character and its frequency\n    prev_freq, prev_char = 0, ''\n    \n    while max_heap:\n        # Get the character with the highest frequency\n        freq, char = heapq.heappop(max_heap)\n        \n        # Append the current character to the result\n        result.append(char)\n        \n        # If the previous character can still be used, push it back into the heap\n        if prev_freq < 0:\n            heapq.heappush(max_heap, (prev_freq, prev_char))\n        \n        # Update the previous character and its frequency\n        prev_freq, prev_char = freq + 1, char  # Increment frequency since it's negative\n    \n    # Join the result list to form the rearranged string\n    rearranged = ''.join(result)\n    \n    # Check if the rearranged string is valid\n    if len(rearranged) != len(s):\n        return \"\"  # Not possible to rearrange\n    \n    return rearranged\n\n# Example usage:\ns = \"aaabbc\"\nprint(rearrange_string(s))  # Output could be \"ababac\" or any valid rearrangement\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpal0osf5z.py\", line 32, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "completion": "from collections import Counter\nfrom typing import List, Any\n\ndef freq_element(list_of_lists: List[List[Any]]) -> Counter:\n    \"\"\"\n    Find the frequency of elements in a given list of lists.\n\n    Parameters:\n    list_of_lists (List[List[Any]]): A list of lists containing elements.\n\n    Returns:\n    Counter: A Counter object with elements as keys and their frequencies as values.\n    \"\"\"\n    # Flatten the list of lists into a single list\n    flat_list = [element for sublist in list_of_lists for element in sublist]\n    \n    # Use Counter to count the frequency of each element\n    element_counter = Counter(flat_list)\n    \n    return element_counter\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [4, 5, 6], [1, 2, 3, 4]]\nfrequency = freq_element(list_of_lists)\nprint(frequency)\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 41, "completion": "def filter_even_numbers(numbers):\n    \"\"\"\n    Filters even numbers from a list.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    list: A list containing only the even numbers from the input list.\n    \"\"\"\n    return list(filter(lambda x: x % 2 == 0, numbers))\n\n# Example usage:\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven_numbers = filter_even_numbers(numbers)\nprint(even_numbers)  # Output: [2, 4, 6, 8, 10]\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4dtc4rdj.py\", line 7, in <module>\n    assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\nNameError: name 'filter_evennumbers' is not defined", "passed": false}
{"task_id": 42, "completion": "def find_sum(arr):\n    \"\"\"\n    Calculate the sum of repeated elements in the given array.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The sum of elements that appear more than once in the array.\n    \"\"\"\n    element_count = {}\n    \n    # Count occurrences of each element\n    for element in arr:\n        if element in element_count:\n            element_count[element] += 1\n        else:\n            element_count[element] = 1\n    \n    # Calculate the sum of repeated elements\n    repeated_sum = sum(element for element, count in element_count.items() if count > 1)\n    \n    return repeated_sum\n\n# Example usage:\n# arr = [1, 2, 3, 2, 4, 5, 6, 1]\n# print(find_sum(arr))  # Output: 3 (since 1 and 2 are repeated)\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpq4n39r0w.py\", line 15, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    \"\"\"\n    Find sequences of lowercase letters joined with an underscore in the given text.\n\n    Parameters:\n    text (str): The input string to search for the pattern.\n\n    Returns:\n    list: A list of all matches found in the text.\n    \"\"\"\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    matches = re.findall(pattern, text)\n    return matches\n\n# Example usage:\nif __name__ == \"__main__\":\n    sample_text = \"Here are some examples: abc_def, ghi_jkl, and mno_pqr.\"\n    print(text_match(sample_text))\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpp_57wzmg.py\", line 10, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 44, "completion": "import re\n\ndef text_match_string(word, text):\n    \"\"\"\n    Check if the given text starts with the specified word.\n\n    Parameters:\n    word (str): The word to match at the beginning of the text.\n    text (str): The text to be checked.\n\n    Returns:\n    bool: True if the text starts with the word, False otherwise.\n    \"\"\"\n    pattern = r'^' + re.escape(word) + r'\\b'\n    match = re.match(pattern, text)\n    return match is not None\n\n# Example usage:\nprint(text_match_string(\"Hello\", \"Hello, world!\"))  # Output: True\nprint(text_match_string(\"world\", \"Hello, world!\"))  # Output: False\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpaprsql9v.py\", line 9, in <module>\n    assert text_match_string(\" python\")==('Not matched!')\nTypeError: text_match_string() missing 1 required positional argument: 'text'", "passed": false}
{"task_id": 45, "completion": "import math\nfrom functools import reduce\n\ndef get_gcd(numbers):\n    \"\"\"Calculate the GCD of a list of numbers.\n\n    Args:\n        numbers (list of int): A list of integers to find the GCD of.\n\n    Returns:\n        int: The greatest common divisor of the list of numbers.\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"The list of numbers cannot be empty.\")\n    \n    return reduce(math.gcd, numbers)\n\n# Example usage:\nnumbers = [48, 64, 80]\nprint(get_gcd(numbers))  # Output: 16\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 46, "completion": "def test_distinct(numbers):\n    \"\"\"\n    Determine whether all numbers in the list are distinct.\n\n    Args:\n        numbers (list): A list of numbers to check.\n\n    Returns:\n        bool: True if all numbers are distinct, False otherwise.\n    \"\"\"\n    return len(numbers) == len(set(numbers))\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 48, "completion": "def odd_bit_set_number(number):\n    \"\"\"\n    Set all odd bits of the given number.\n\n    Parameters:\n    number (int): The input number.\n\n    Returns:\n    int: The number with all odd bits set.\n    \"\"\"\n    # Initialize a mask with all odd bits set\n    mask = 0\n    bit_position = 1\n\n    # Create a mask with odd bits set up to the bit length of the number\n    while bit_position < number.bit_length() or bit_position < 32:  # Assuming at least 32 bits\n        mask |= (1 << bit_position)\n        bit_position += 2\n\n    # Set the odd bits of the number using the mask\n    return number | mask\n\n# Example usage:\nnumber = 10  # Binary: 1010\nresult = odd_bit_set_number(number)\nprint(f\"Original number: {number} (Binary: {bin(number)})\")\nprint(f\"Number with odd bits set: {result} (Binary: {bin(result)})\")\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7sf5ncct.py\", line 16, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(two_d_list, index=0):\n    \"\"\"\n    Extracts every first or specified element from a given two-dimensional list.\n\n    Parameters:\n    two_d_list (list of lists): The two-dimensional list from which to extract elements.\n    index (int): The index of the element to extract from each sublist. Defaults to 0.\n\n    Returns:\n    list: A list containing the extracted elements.\n    \"\"\"\n    extracted_elements = []\n    \n    for sublist in two_d_list:\n        if len(sublist) > index:\n            extracted_elements.append(sublist[index])\n    \n    return extracted_elements\n\n# Example usage:\ntwo_d_list = [[1, 2, 3], [4, 5, 6], [7, 8]]\nprint(specified_element(two_d_list))  # Output: [1, 4, 7]\nprint(specified_element(two_d_list, 1))  # Output: [2, 5, 8]\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 51, "completion": "def check_equilateral(side1, side2, side3):\n    \"\"\"\n    Check if a triangle is equilateral.\n\n    Parameters:\n    side1 (float): The length of the first side of the triangle.\n    side2 (float): The length of the second side of the triangle.\n    side3 (float): The length of the third side of the triangle.\n\n    Returns:\n    bool: True if the triangle is equilateral, False otherwise.\n    \"\"\"\n    if side1 == side2 == side3:\n        return True\n    else:\n        return False\n\n# Example usage:\n# print(check_equilateral(3, 3, 3))  # Output: True\n# print(check_equilateral(3, 4, 5))  # Output: False\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram.\n    \"\"\"\n    return base * height\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(s):\n    \"\"\"\n    Check if the first and last characters of a string are equal.\n\n    Parameters:\n    s (str): The string to check.\n\n    Returns:\n    bool: True if the first and last characters are equal, False otherwise.\n    \"\"\"\n    if not s:\n        return False\n\n    return s[0] == s[-1]\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpcy_8kype.py\", line 5, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 54, "completion": "def counting_sort(arr):\n    \"\"\"\n    Perform counting sort on the given array.\n\n    Parameters:\n    arr (list of int): The array to be sorted.\n\n    Returns:\n    list of int: The sorted array.\n    \"\"\"\n    if not arr:\n        return arr\n\n    # Find the maximum and minimum values in the array\n    max_val = max(arr)\n    min_val = min(arr)\n\n    # Initialize the count array\n    range_of_elements = max_val - min_val + 1\n    count = [0] * range_of_elements\n\n    # Store the count of each element\n    for num in arr:\n        count[num - min_val] += 1\n\n    # Modify the count array by adding the previous counts\n    for i in range(1, range_of_elements):\n        count[i] += count[i - 1]\n\n    # Output array to store the sorted elements\n    output = [0] * len(arr)\n\n    # Build the output array\n    for num in reversed(arr):\n        output[count[num - min_val] - 1] = num\n        count[num - min_val] -= 1\n\n    return output\n\n# Example usage:\nif __name__ == \"__main__\":\n    array = [4, 2, 2, 8, 3, 3, 1]\n    sorted_array = counting_sort(array)\n    print(\"Sorted array:\", sorted_array)\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 55, "completion": "def tn_gp(first_term, common_ratio, term_number):\n    \"\"\"\n    Calculate the t-th term of a geometric series.\n\n    Parameters:\n    first_term (float): The first term of the geometric series.\n    common_ratio (float): The common ratio of the geometric series.\n    term_number (int): The term number to find.\n\n    Returns:\n    float: The t-th term of the geometric series.\n    \"\"\"\n    if term_number < 1:\n        raise ValueError(\"Term number must be a positive integer.\")\n    \n    t_nth_term = first_term * (common_ratio ** (term_number - 1))\n    return t_nth_term\n\n# Example usage:\n# print(tn_gp(2, 3, 4))  # Output: 54\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppq7geem_.py\", line 8, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def check(number):\n    \"\"\"\n    Check if the given number is one less than twice its reverse.\n\n    Args:\n        number (int): The number to check.\n\n    Returns:\n        bool: True if the number is one less than twice its reverse, False otherwise.\n    \"\"\"\n    # Convert the number to a string to reverse it\n    reversed_number_str = str(number)[::-1]\n    \n    # Convert the reversed string back to an integer\n    reversed_number = int(reversed_number_str)\n    \n    # Check if the number is one less than twice its reverse\n    return number == 2 * reversed_number - 1\n\n# Example usage:\n# print(check(21))  # True, because 21 is one less than twice its reverse (12 * 2 = 24, 24 - 1 = 23)\n# print(check(10))  # False, because 10 is not one less than twice its reverse (01 * 2 = 2, 2 - 1 = 1)\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 57, "completion": "def find_max_num(digits):\n    \"\"\"\n    Find the largest number that can be formed with the given digits.\n\n    Parameters:\n    digits (list of int): A list of single-digit integers.\n\n    Returns:\n    int: The largest number that can be formed with the given digits.\n    \"\"\"\n    # Convert each digit to a string\n    str_digits = map(str, digits)\n    \n    # Sort the digits in descending order\n    sorted_digits = sorted(str_digits, reverse=True)\n    \n    # Join the sorted digits to form the largest number\n    max_num_str = ''.join(sorted_digits)\n    \n    # Convert the result back to an integer\n    max_num = int(max_num_str)\n    \n    return max_num\n\n# Example usage:\n# digits = [3, 1, 4, 1, 5, 9]\n# print(find_max_num(digits))  # Output: 954311\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqrgi7i6a.py\", line 14, in <module>\n    assert find_max_num([1,2,3],3) == 321\nTypeError: find_max_num() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 58, "completion": "def opposite_signs(num1, num2):\n    \"\"\"\n    Check if two integers have opposite signs.\n\n    Parameters:\n    num1 (int): The first integer.\n    num2 (int): The second integer.\n\n    Returns:\n    bool: True if the integers have opposite signs, False otherwise.\n    \"\"\"\n    return (num1 * num2) < 0\n\n# Example usage:\n# print(opposite_signs(10, -5))  # Output: True\n# print(opposite_signs(-10, 5))  # Output: True\n# print(opposite_signs(10, 5))   # Output: False\n# print(opposite_signs(-10, -5)) # Output: False\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 59, "completion": "def is_octagonal(n):\n    \"\"\"\n    Calculate the nth octagonal number.\n\n    Parameters:\n    n (int): The position of the octagonal number to calculate.\n\n    Returns:\n    int: The nth octagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    return n * (3 * n - 2)\n\n# Example usage:\n# print(is_octagonal(1))  # Output: 1\n# print(is_octagonal(2))  # Output: 8\n# print(is_octagonal(3))  # Output: 21\n", "requirement": "Code Standard", "result": "passed", "passed": true}
{"task_id": 60, "completion": "def max_len_sub(arr):\n    \"\"\"\n    Find the maximum length of a subsequence with the same difference between adjacent elements.\n\n    :param arr: List of integers\n    :return: Maximum length of the subsequence\n    \"\"\"\n    if not arr:\n        return 0\n\n    n = len(arr)\n    if n == 1:\n        return 1\n\n    # Dictionary to store the length of subsequence ending at each index with a given difference\n    dp = [{} for _ in range(n)]\n    max_length = 1\n\n    for i in range(n):\n        for j in range(i):\n            diff = arr[i] - arr[j]\n            if diff in dp[j]:\n                dp[i][diff] = dp[j][diff] + 1\n            else:\n                dp[i][diff] = 2  # At least two elements (arr[j] and arr[i]) form the subsequence\n\n            max_length = max(max_length, dp[i][diff])\n\n    return max_length\n\n# Example usage:\narr = [3, 6, 9, 12]\nprint(max_len_sub(arr))  # Output: 4\n", "requirement": "Code Standard", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpwg3gai8y.py\", line 22, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}

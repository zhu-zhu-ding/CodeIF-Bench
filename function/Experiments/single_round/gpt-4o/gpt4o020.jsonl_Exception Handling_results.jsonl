{"task_id": 11, "completion": "def remove_occ(s: str, char: str) -> str:\n    if len(char) != 1:\n        raise ValueError('Second parameter must be a single character.')\n    \n    first_index = s.find(char)\n    last_index = s.rfind(char)\n    \n    if first_index == -1 or last_index == -1 or first_index == last_index:\n        return s\n    \n    # Remove the first occurrence\n    s = s[:first_index] + s[first_index + 1:]\n    \n    # Adjust last_index since the string has been modified\n    last_index -= 1\n    \n    # Remove the last occurrence\n    s = s[:last_index] + s[last_index + 1:]\n    \n    return s\n\n# Example usage:\n# result = remove_occ(\"abracadabra\", \"a\")\n# print(result)  # Output: \"bracadabr\"\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 12, "completion": "def sort_matrix(matrix):\n    # Check if the input is a list of lists\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise TypeError(\"Input must be a list of lists\")\n    \n    # Check if all elements in the matrix are integers\n    for row in matrix:\n        if not all(isinstance(element, int) for element in row):\n            raise TypeError(\"All elements in the matrix must be integers\")\n    \n    # Sort the matrix based on the sum of each row\n    sorted_matrix = sorted(matrix, key=sum)\n    \n    return sorted_matrix\n\n# Example usage:\nmatrix = [\n    [3, 4, 2],\n    [1, 2, 3],\n    [5, 0, 0]\n]\n\nsorted_matrix = sort_matrix(matrix)\nprint(sorted_matrix)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 13, "completion": "from collections import Counter\n\ndef count_common(words):\n    # Check if the input is a list\n    if not isinstance(words, list):\n        raise TypeError(\"Input must be a list of strings.\")\n    \n    # Check if all elements in the list are strings\n    if not all(isinstance(word, str) for word in words):\n        raise TypeError(\"All elements in the list must be strings.\")\n    \n    # Use Counter to count occurrences of each word\n    word_counts = Counter(words)\n    \n    # Find the most common word(s)\n    most_common = word_counts.most_common()\n    \n    return most_common\n\n# Example usage:\nwords = [\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\"]\nprint(count_common(words))\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpa78wz7oj.py\", line 17, in <module>\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nAssertionError", "passed": false}
{"task_id": 14, "completion": "def find_volume(base, height, length):\n    # Check if all inputs are numbers and positive\n    if not all(isinstance(x, (int, float)) and x > 0 for x in [base, height, length]):\n        raise ValueError(\"All dimensions must be positive numbers.\")\n    \n    # Calculate the volume of the triangular prism\n    volume = 0.5 * base * height * length\n    return volume\n\n# Example usage:\n# volume = find_volume(3, 4, 5)\n# print(volume)  # Output should be 30.0\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 15, "completion": "import re\n\ndef split_lowerstring(s):\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string.\")\n    \n    # Use a regular expression to split the string at lowercase letters\n    # The pattern '(?=[a-z])' is a lookahead assertion that matches a position\n    # before a lowercase letter.\n    result = re.split(r'(?=[a-z])', s)\n    \n    return result\n\n# Example usage:\ntry:\n    print(split_lowerstring(\"HelloWorld\"))  # ['H', 'elloW', 'orld']\n    print(split_lowerstring(\"Python3.9\"))  # ['P', 'ython3.9']\n    print(split_lowerstring(\"123abc456\"))  # ['123', 'a', 'bc456']\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpijhrnxe1.py\", line 20\n    try: split_lowerstring(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                    ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(input_string):\n    if not isinstance(input_string, str):\n        raise TypeError(\"Input must be a string.\")\n    \n    # Regular expression pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    \n    # Find all matches in the input string\n    matches = re.findall(pattern, input_string)\n    \n    return matches\n\n# Example usage:\n# result = text_lowercase_underscore(\"this is a test_string with some lower_case_words and mixedCASE_words\")\n# print(result)  # Output: ['test_string', 'lower_case_words']\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpcgx7i2j1.py\", line 13, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Parameters:\n    side_length (float): The length of one side of the square.\n\n    Returns:\n    float: The perimeter of the square.\n\n    Raises:\n    ValueError: If the side_length is negative.\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    \n    return 4 * side_length\n\n# Example usage:\ntry:\n    print(square_perimeter(5))  # Output: 20\n    print(square_perimeter(-3)) # This will raise a ValueError\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(source, dirty):\n    # Check if both inputs are strings\n    if not isinstance(source, str) or not isinstance(dirty, str):\n        raise TypeError(\"Both inputs must be strings.\")\n    \n    # Create a set of characters to remove for faster lookup\n    dirty_set = set(dirty)\n    \n    # Use a list comprehension to filter out dirty characters\n    cleaned_string = ''.join(char for char in source if char not in dirty_set)\n    \n    return cleaned_string\n\n# Example usage:\ntry:\n    result = remove_dirty_chars(\"hello world\", \"lo\")\n    print(result)  # Output: \"he wrd\"\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 19, "completion": "def test_duplicate(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise ValueError('Input must be a list of integers')\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise ValueError('Input must be a list of integers')\n    \n    # Use a set to track seen elements\n    seen = set()\n    \n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    \n    return False\n\n# Example usage:\ntry:\n    print(test_duplicate([1, 2, 3, 4, 5]))  # Output: False\n    print(test_duplicate([1, 2, 3, 4, 5, 3]))  # Output: True\n    print(test_duplicate(\"not a list\"))  # Raises ValueError\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpy66mcp5_.py\", line 26, in <module>\n    test_duplicate(None)\n  File \"/tmp/tmpy66mcp5_.py\", line 4, in test_duplicate\n    raise ValueError('Input must be a list of integers')\nValueError: Input must be a list of integers", "passed": false}
{"task_id": 20, "completion": "def is_woodall(number):\n    if not isinstance(number, int):\n        raise TypeError(\"Input must be an integer.\")\n    \n    if number < 0:\n        return False\n    \n    n = 1\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number == number:\n            return True\n        if woodall_number > number:\n            return False\n        n += 1\n\n# Example usage:\nprint(is_woodall(7))  # True, because 7 is a Woodall number (1 * 2^3 - 1)\nprint(is_woodall(8))  # False, because 8 is not a Woodall number\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 21, "completion": "def multiples_of_num(m, n):\n    if m < 0 or n < 0:\n        raise ValueError(\"Both m and n must be non-negative integers.\")\n    \n    return [n * i for i in range(1, m + 1)]\n\n# Example usage:\ntry:\n    print(multiples_of_num(5, 3))  # Output: [3, 6, 9, 12, 15]\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 22, "completion": "def find_first_duplicate(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list of integers.\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements in the list must be integers.\")\n    \n    # Use a set to track seen elements\n    seen = set()\n    \n    # Iterate through the list\n    for num in arr:\n        # If the number is already in the set, it's a duplicate\n        if num in seen:\n            return num\n        # Otherwise, add the number to the set\n        seen.add(num)\n    \n    # If no duplicates are found, return None\n    return None\n\n# Example usage:\n# print(find_first_duplicate([1, 2, 3, 4, 5, 3, 6]))  # Output: 3\n# print(find_first_duplicate([1, 2, 3, 4, 5]))        # Output: None\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpsck1souv.py\", line 23, in <module>\n    assert find_first_duplicate([1, 2, 3, 4])==-1\nAssertionError", "passed": false}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists):\n    # Check if the input is a list\n    if not isinstance(list_of_lists, list):\n        raise TypeError(\"Input must be a list of lists.\")\n    \n    # Initialize a variable to keep track of the maximum sum\n    max_sum = None\n    \n    for sublist in list_of_lists:\n        # Check if each element in the main list is a list\n        if not isinstance(sublist, list):\n            raise TypeError(\"Input must be a list of lists.\")\n        \n        # Check if all elements in the sublist are integers\n        if not all(isinstance(item, int) for item in sublist):\n            raise TypeError(\"All elements in sublists must be integers.\")\n        \n        # Calculate the sum of the current sublist\n        current_sum = sum(sublist)\n        \n        # Update max_sum if current_sum is greater\n        if max_sum is None or current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum\n\n# Example usage:\n# list_of_lists = [[1, 2, 3], [4, 5], [6, 7, 8, 9]]\n# print(maximum_sum(list_of_lists))  # Output: 30\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmp7g9m7imh.py\", line 26\n    try: maximum_sum([[1, 2], [3, 'a']]); assert False, 'Expected TypeError' except TypeError: pass\n                                                                             ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 24, "completion": "def binary_to_decimal(binary_str):\n    # Check if the input is a valid binary string\n    if not isinstance(binary_str, str) or any(char not in '01' for char in binary_str):\n        raise ValueError(\"Invalid binary number\")\n    \n    # Convert the binary string to a decimal number\n    decimal_value = 0\n    for index, char in enumerate(reversed(binary_str)):\n        if char == '1':\n            decimal_value += 2 ** index\n    \n    return decimal_value\n\n# Example usage:\ntry:\n    print(binary_to_decimal(\"1011\"))  # Output: 11\n    print(binary_to_decimal(\"10010\")) # Output: 18\n    print(binary_to_decimal(\"2\"))     # Raises ValueError\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmp7_p6wmgz.py\", line 21\n    try: binary_to_decimal('102'); assert False, 'Expected ValueError' except ValueError as e: assert str(e) == 'Invalid binary number'\n                                                                       ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 25, "completion": "def find_product(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list of integers.\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements in the list must be integers.\")\n    \n    # Create a dictionary to count occurrences of each element\n    element_count = {}\n    for num in arr:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n    \n    # Calculate the product of non-repeated elements\n    product = 1\n    non_repeated_found = False\n    for num, count in element_count.items():\n        if count == 1:\n            product *= num\n            non_repeated_found = True\n    \n    # If no non-repeated elements are found, return 0\n    if not non_repeated_found:\n        return 0\n    \n    return product\n\n# Example usage:\n# print(find_product([2, 3, 4, 2, 5]))  # Output: 60 (3 * 4 * 5)\n# print(find_product([1, 1, 1, 1]))     # Output: 0 (no non-repeated elements)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp0mag0fuj.py\", line 29, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(tuple_list, k):\n    # Check if k is an integer\n    if not isinstance(k, int):\n        raise TypeError(\"k must be an integer\")\n    \n    # Check if tuple_list is a list\n    if not isinstance(tuple_list, list):\n        raise TypeError(\"Input must be a list of tuples\")\n    \n    # Check if all elements in the list are tuples\n    if not all(isinstance(t, tuple) for t in tuple_list):\n        raise TypeError(\"Input must be a list of tuples\")\n    \n    # Check if each tuple has exactly k elements\n    for t in tuple_list:\n        if len(t) != k:\n            return False\n    \n    return True\n\n# Example usage:\ntry:\n    result = check_k_elements([(1, 2), (3, 4), (5, 6)], 2)\n    print(\"All tuples have 2 elements:\", result)\nexcept TypeError as e:\n    print(\"Error:\", e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_84wix9k.py\", line 22, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "completion": "def remove(strings):\n    # Check if the input is a list\n    if not isinstance(strings, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Check if all elements in the list are strings\n    for item in strings:\n        if not isinstance(item, str):\n            raise TypeError(\"All elements in the list must be strings.\")\n    \n    # Function to remove digits from a single string\n    def remove_digits(s):\n        return ''.join(char for char in s if not char.isdigit())\n    \n    # Apply the remove_digits function to each string in the list\n    return [remove_digits(s) for s in strings]\n\n# Example usage:\n# strings = [\"hello123\", \"world456\", \"python789\"]\n# print(remove(strings))  # Output: ['hello', 'world', 'python']\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 28, "completion": "def binomial_coeff(n, k):\n    if n < 0 or k < 0 or k > n:\n        raise ValueError(\"Inputs must be non-negative and k must not be greater than n\")\n    \n    # Calculate factorial using a helper function\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        result = 1\n        for i in range(2, x + 1):\n            result *= i\n        return result\n    \n    # Calculate binomial coefficient\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\n# Example usage:\ntry:\n    print(binomial_coeff(5, 2))  # Output: 10\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 29, "completion": "def get_odd_occurrence(arr):\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list of integers.\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements in the list must be integers.\")\n    \n    # Use a dictionary to count occurrences of each element\n    occurrence_count = {}\n    \n    for num in arr:\n        if num in occurrence_count:\n            occurrence_count[num] += 1\n        else:\n            occurrence_count[num] = 1\n    \n    # Find and return the element with an odd occurrence\n    for num, count in occurrence_count.items():\n        if count % 2 != 0:\n            return num\n    \n    # If no element is found with an odd occurrence, return None\n    return None\n\n# Example usage:\n# arr = [1, 2, 3, 2, 3, 1, 3]\n# print(get_odd_occurrence(arr))  # Output: 3\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_mmdvln1.py\", line 24, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Dictionary to store the frequency of each character\n    char_count = {}\n    \n    # Count the frequency of each character in the string\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Calculate the number of substrings for each character\n    count = 0\n    for freq in char_count.values():\n        count += freq * (freq + 1) // 2\n    \n    return count\n\n# Example usage:\n# print(count_substring_with_equal_ends(\"abcab\"))  # Output: 7\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmp6eum2l7t.py\", line 22\n    try: count_substring_with_equal_ends(123); assert False, 'Expected TypeError' except TypeError: pass\n                                                                                  ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 31, "completion": "from collections import defaultdict\nimport heapq\n\ndef func(lists, k):\n    # Dictionary to count the frequency of each integer\n    frequency = defaultdict(int)\n    \n    # Count the frequency of each integer across all lists\n    for lst in lists:\n        for num in lst:\n            frequency[num] += 1\n    \n    # Check if k is greater than the number of distinct integers\n    if k > len(frequency):\n        raise ValueError(\"k cannot be greater than the number of distinct integers\")\n    \n    # Use a heap to find the top k elements with the highest frequency\n    # We use a min-heap of size k to keep track of the top k elements\n    min_heap = []\n    \n    for num, freq in frequency.items():\n        # Push the current number and its frequency as a tuple into the heap\n        heapq.heappush(min_heap, (freq, num))\n        \n        # If the heap size exceeds k, remove the smallest element\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    \n    # Extract the numbers from the heap, which are the top k frequent elements\n    top_k = [num for freq, num in min_heap]\n    \n    # Return the top k elements sorted by their frequency in descending order\n    return sorted(top_k, key=lambda x: frequency[x], reverse=True)\n\n# Example usage:\nlists = [\n    [1, 2, 3],\n    [2, 3, 4],\n    [3, 4, 5]\n]\nk = 2\nprint(func(lists, k))  # Output: [3, 2]\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7n2x7xpp.py\", line 34, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    def largest_prime_factor(num):\n        max_prime = -1\n\n        # Check for number of 2s that divide num\n        while num % 2 == 0:\n            max_prime = 2\n            num //= 2\n\n        # num must be odd at this point, so a skip of 2 (i.e., i = i + 2) can be used\n        for i in range(3, int(num**0.5) + 1, 2):\n            while num % i == 0:\n                max_prime = i\n                num //= i\n\n        # This condition is to check if num is a prime number greater than 2\n        if num > 2:\n            max_prime = num\n\n        return max_prime\n\n    return largest_prime_factor(n)\n\n# Example usage:\n# print(max_prime_factors(13195))  # Output: 29\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(n):\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    if n == 0:\n        return \"0\"\n    \n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    \n    return binary\n\n# Example usage:\n# print(decimal_to_binary(10))  # Output: \"1010\"\n# print(decimal_to_binary(0))   # Output: \"0\"\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpl5uecf9n.py\", line 14, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "completion": "def find_missing(arr):\n    # Check if the list is sorted\n    if arr != sorted(arr):\n        raise ValueError(\"Input list must be sorted.\")\n    \n    # Calculate the expected sum of the sequence if no numbers were missing\n    n = len(arr) + 1  # Since one number is missing, the length should be n+1\n    expected_sum = (n * (arr[0] + arr[-1])) // 2\n    \n    # Calculate the actual sum of the array\n    actual_sum = sum(arr)\n    \n    # The missing number is the difference between the expected sum and the actual sum\n    missing_number = expected_sum - actual_sum\n    \n    return missing_number\n\n# Example usage:\n# sorted_array = [1, 2, 3, 4, 6]\n# print(find_missing(sorted_array))  # Output: 5\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxw9mv83t.py\", line 16, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return n * (n + 1)\n\n# Example usage:\ntry:\n    print(find_rect_num(5))  # Output: 30\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator, n):\n    if denominator == 0:\n        raise ValueError(\"Denominator cannot be zero\")\n    \n    # Calculate the absolute value of the fraction\n    fraction = abs(numerator) / abs(denominator)\n    \n    # Convert the fraction to a string, skipping the \"0.\" part\n    fraction_str = str(fraction)[2:]\n    \n    # Check if n is within the length of the fraction string\n    if n <= 0 or n > len(fraction_str):\n        return None  # or raise an error if you prefer\n    \n    # Return the nth digit\n    return int(fraction_str[n - 1])\n\n# Example usage:\n# find_nth_digit(1, 3, 1) should return 3, since 1/3 = 0.3333...\n# find_nth_digit(1, 3, 2) should return 3, since 1/3 = 0.3333...\n# find_nth_digit(1, 2, 1) should return 5, since 1/2 = 0.5\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 37, "completion": "def sort_mixed_list(mixed_list):\n    if not isinstance(mixed_list, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    integers = []\n    strings = []\n    \n    for item in mixed_list:\n        if isinstance(item, int):\n            integers.append(item)\n        elif isinstance(item, str):\n            strings.append(item)\n        else:\n            raise TypeError(\"List must contain only integers and strings.\")\n    \n    # Sort both lists\n    integers.sort()\n    strings.sort()\n    \n    # Combine the sorted lists with integers first\n    return integers + strings\n\n# Example usage:\ntry:\n    result = sort_mixed_list([3, \"apple\", 1, \"banana\", 2, \"cherry\"])\n    print(result)  # Output: [1, 2, 3, 'apple', 'banana', 'cherry']\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 38, "completion": "def div_even_odd(numbers):\n    first_even = None\n    first_odd = None\n    \n    for num in numbers:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        \n        # If both numbers are found, we can break out of the loop early\n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is None or first_odd is None:\n        raise ValueError(\"List must contain at least one even and one odd number.\")\n    \n    return first_even / first_odd\n\n# Example usage:\n# numbers = [3, 5, 8, 10]\n# result = div_even_odd(numbers)\n# print(result)  # Output will be 8 / 3 = 2.666...\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpklhj3pl_.py\", line 22\n    try: div_even_odd([2, 4, 6]); assert False; except ValueError as e: assert str(e) == 'List must contain at least one even and one odd number.'\n                                                ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 39, "completion": "def rearrange_string(s):\n    if not isinstance(s, str) or not s.islower():\n        raise ValueError(\"Input must be a string containing only lowercase letters.\")\n    \n    from collections import Counter\n    \n    # Count the frequency of each character\n    char_count = Counter(s)\n    \n    # Find the maximum frequency\n    max_freq = max(char_count.values())\n    \n    # Check if the most frequent character can be rearranged\n    if max_freq > (len(s) + 1) // 2:\n        return False\n    \n    return True\n\n# Example usage:\n# print(rearrange_string(\"aab\"))  # Should return True\n# print(rearrange_string(\"aaab\")) # Should return False\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqum9960o.py\", line 16, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "completion": "from collections import Counter\n\ndef freq_element(list_of_lists):\n    # Check if the input is a list of lists\n    if not isinstance(list_of_lists, list) or not all(isinstance(sublist, list) for sublist in list_of_lists):\n        raise TypeError(\"Input must be a list of lists.\")\n    \n    # Flatten the list of lists\n    flat_list = [item for sublist in list_of_lists for item in sublist]\n    \n    # Use Counter to count the frequency of each element\n    frequency = Counter(flat_list)\n    \n    return frequency\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [4, 5, 6], [1, 2, 2]]\nprint(freq_element(list_of_lists))\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmpwvwp8ozr.py\", line 17\n    try: freq_element('not a list'); assert False; except TypeError: assert True\n                                                   ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 41, "completion": "def filter_evennumbers(numbers):\n    # Check if the input is a list\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list of integers.\")\n    \n    # Check if all elements in the list are integers\n    if not all(isinstance(num, int) for num in numbers):\n        raise TypeError(\"All elements in the list must be integers.\")\n    \n    # Use filter with a lambda function to filter even numbers\n    even_numbers = list(filter(lambda x: x % 2 == 0, numbers))\n    \n    return even_numbers\n\n# Example usage:\ntry:\n    result = filter_evennumbers([1, 2, 3, 4, 5, 6])\n    print(\"Filtered even numbers:\", result)\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 42, "completion": "def find_sum(arr):\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    from collections import Counter\n    \n    # Count the occurrences of each element in the list\n    element_count = Counter(arr)\n    \n    # Calculate the sum of elements that appear more than once\n    repeated_sum = sum(element for element, count in element_count.items() if count > 1)\n    \n    return repeated_sum\n\n# Example usage:\n# result = find_sum([1, 2, 2, 3, 4, 4, 4, 5])\n# print(result)  # Output: 6 (2 + 4)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmplm37yra9.py\", line 13, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Regular expression pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    \n    # Find all matches in the input text\n    matches = re.findall(pattern, text)\n    \n    return matches\n\n# Example usage:\ntry:\n    result = text_match(\"this_is_a_test with some more_text and another_example\")\n    print(result)  # Output: ['this_is', 'more_text', 'another_example']\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp1g0dkdxa.py\", line 16, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 44, "completion": "import re\n\ndef text_match_string(input_string):\n    if not isinstance(input_string, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Regular expression to match a word at the beginning of the string\n    pattern = r'^\\w+'\n    \n    match = re.match(pattern, input_string)\n    \n    if match:\n        return match.group()\n    else:\n        return None\n\n# Example usage:\ntry:\n    print(text_match_string(\"Hello world\"))  # Output: \"Hello\"\n    print(text_match_string(\"123 start with numbers\"))  # Output: \"123\"\n    print(text_match_string(\"!@# special characters\"))  # Output: None\n    print(text_match_string(123))  # Raises TypeError\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: File \"/tmp/tmptapr_zjm.py\", line 23\n    try: text_match_string(123); assert False, 'TypeError not raised' except TypeError: pass\n                                                                      ^\nSyntaxError: invalid syntax", "passed": false}
{"task_id": 45, "completion": "import math\nfrom functools import reduce\n\ndef get_gcd(numbers):\n    if not numbers:\n        raise ValueError('Input list cannot be empty.')\n    \n    # Use reduce to apply the gcd function across the entire list\n    return reduce(math.gcd, numbers)\n\n# Example usage:\n# numbers = [48, 64, 80]\n# print(get_gcd(numbers))  # Output: 16\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 46, "completion": "def test_distinct(numbers):\n    # Check if the input is a list\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Check if all elements in the list are integers\n    for num in numbers:\n        if not isinstance(num, int):\n            raise TypeError(\"All elements in the list must be integers.\")\n    \n    # Check if all numbers are distinct\n    return len(numbers) == len(set(numbers))\n\n# Example usage:\ntry:\n    print(test_distinct([1, 2, 3, 4]))  # Should return True\n    print(test_distinct([1, 2, 2, 4]))  # Should return False\n    print(test_distinct([1, '2', 3, 4]))  # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 47, "completion": "def compute_last_digit(a, b):\n    if a > b:\n        raise ValueError('a should not be greater than b')\n    \n    # Initialize the product to 1 (neutral element for multiplication)\n    product = 1\n    \n    # Calculate the product of numbers from a+1 to b\n    for i in range(a + 1, b + 1):\n        product *= i\n        # Only keep the last digit of the product\n        product %= 10\n    \n    return product\n\n# Example usage:\n# compute_last_digit(3, 5) should return the last digit of (5! / 3!) = 4 * 5 = 20, so it should return 0\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 48, "completion": "def odd_bit_set_number(n):\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    \n    # Create a mask with all odd bits set to 1\n    # For a 32-bit integer, the mask would be: 0b01010101010101010101010101010101\n    # This is 0x55555555 in hexadecimal\n    mask = 0x55555555\n    \n    # Set the odd bits of n using bitwise OR\n    result = n | mask\n    \n    return result\n\n# Example usage:\n# Input: 0 (binary: 00000000000000000000000000000000)\n# Output: 1431655765 (binary: 01010101010101010101010101010101)\nprint(odd_bit_set_number(0))\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpemt2s78g.py\", line 15, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(two_d_list, index=0):\n    \"\"\"\n    Extracts the specified element from each sublist in a two-dimensional list.\n    \n    Parameters:\n    two_d_list (list of lists): The two-dimensional list from which to extract elements.\n    index (int): The index of the element to extract from each sublist. Defaults to 0.\n    \n    Returns:\n    list: A list containing the extracted elements from each sublist.\n    \n    Raises:\n    IndexError: If the specified index is out of range for any sublist.\n    \"\"\"\n    result = []\n    for sublist in two_d_list:\n        if index < 0 or index >= len(sublist):\n            raise IndexError(\"Index out of range for sublist\")\n        result.append(sublist[index])\n    return result\n\n# Example usage:\ntwo_d_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\ntry:\n    print(specified_element(two_d_list, 1))  # Output: [2, 5, 8]\n    print(specified_element(two_d_list, 3))  # This will raise an IndexError\nexcept IndexError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 50, "completion": "def min_length_list(lists):\n    # Check if the input is a list of lists\n    if not isinstance(lists, list) or not all(isinstance(lst, list) for lst in lists):\n        raise ValueError('Input must be a list of lists.')\n    \n    # Use the min function with a lambda to find the list with the minimum length\n    return min(lists, key=lambda lst: len(lst))\n\n# Example usage:\ntry:\n    result = min_length_list([[1, 2, 3], [4, 5], [6]])\n    print(\"List with minimum length:\", result)\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpnxdt3r3q.py\", line 13, in <module>\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nAssertionError", "passed": false}
{"task_id": 51, "completion": "def check_equilateral(side1, side2, side3):\n    # Check if any of the sides are non-positive\n    if side1 <= 0 or side2 <= 0 or side3 <= 0:\n        raise ValueError(\"All sides must be positive integers.\")\n    \n    # Check if all sides are equal\n    if side1 == side2 == side3:\n        print(\"The triangle is equilateral.\")\n    else:\n        print(\"The triangle is not equilateral.\")\n\n# Example usage:\ntry:\n    check_equilateral(3, 3, 3)  # This should print \"The triangle is equilateral.\"\n    check_equilateral(3, 4, 5)  # This should print \"The triangle is not equilateral.\"\n    check_equilateral(0, 3, 3)  # This should raise a ValueError\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpdgixb_kf.py\", line 17, in <module>\n    assert check_equilateral(6,8,12)==False \nAssertionError", "passed": false}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float or int): The base length of the parallelogram.\n    height (float or int): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram.\n\n    Raises:\n    TypeError: If either base or height is not a numerical value.\n    \"\"\"\n    if not isinstance(base, (int, float)) or not isinstance(height, (int, float)):\n        raise TypeError(\"Both base and height must be numerical values (int or float).\")\n    \n    return base * height\n\n# Example usage:\ntry:\n    area = parallelogram_area(5, 10)\n    print(f\"The area of the parallelogram is: {area}\")\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(s):\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    \n    if len(s) == 0:\n        return False  # Assuming empty string should return False\n    \n    return s[0] == s[-1]\n\n# Example usage:\n# print(check_equality(\"radar\"))  # Output: True\n# print(check_equality(\"hello\"))  # Output: False\n# print(check_equality(\"\"))       # Output: False\n# print(check_equality(123))      # Raises TypeError: Input must be a string\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5aulhqfl.py\", line 12, in <module>\n    assert check_equality(\"abcda\") == \"Equal\"\nAssertionError", "passed": false}
{"task_id": 54, "completion": "def counting_sort(arr):\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements in the list must be integers.\")\n    \n    if len(arr) == 0:\n        return arr\n\n    # Find the maximum and minimum values in the array\n    max_val = max(arr)\n    min_val = min(arr)\n\n    # Create a count array with a size based on the range of input values\n    range_of_elements = max_val - min_val + 1\n    count = [0] * range_of_elements\n\n    # Store the count of each element in the count array\n    for num in arr:\n        count[num - min_val] += 1\n\n    # Modify the count array by adding the previous counts (cumulative count)\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n\n    # Output array to store the sorted elements\n    output = [0] * len(arr)\n\n    # Build the output array using the count array\n    for num in reversed(arr):\n        output[count[num - min_val] - 1] = num\n        count[num - min_val] -= 1\n\n    return output\n\n# Example usage:\ntry:\n    sorted_array = counting_sort([4, 2, 2, 8, 3, 3, 1])\n    print(\"Sorted array:\", sorted_array)\nexcept TypeError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 55, "completion": "def tn_gp(a, r, n):\n    \"\"\"\n    Calculate the t-nth term of a geometric series.\n\n    Parameters:\n    a (float): The first term of the series.\n    r (float): The common ratio of the series.\n    n (int): The term number to find.\n\n    Returns:\n    float: The t-nth term of the geometric series.\n\n    Raises:\n    ValueError: If the term number n is less than 1.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Term number must be greater than 0\")\n    \n    return a * (r ** (n - 1))\n\n# Example usage:\n# a = 2, r = 3, n = 4\n# The series is: 2, 6, 18, 54, ...\n# The 4th term is 54\nprint(tn_gp(2, 3, 4))  # Output: 54\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmphnp6vpcq.py\", line 10, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def check(number):\n    # Check if the input is an integer\n    if not isinstance(number, int):\n        raise TypeError(\"Input must be an integer.\")\n    \n    # Convert the number to a string to reverse it\n    reversed_number = int(str(abs(number))[::-1])\n    \n    # Check if the number is one less than twice its reverse\n    return number == 2 * reversed_number - 1\n\n# Example usage:\n# print(check(21))  # True, because 21 is one less than twice its reverse (12 * 2 = 24, 24 - 1 = 23)\n# print(check(10))  # False, because 10 is not one less than twice its reverse (01 * 2 = 2, 2 - 1 = 1)\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 57, "completion": "def find_max_num(digits, num_digits):\n    # Check if the number of digits requested is greater than the length of the list\n    if num_digits > len(digits):\n        raise ValueError('Number of digits exceeds the length of the list.')\n    \n    # Sort the digits in descending order to form the largest number\n    sorted_digits = sorted(digits, reverse=True)\n    \n    # Select the top 'num_digits' digits to form the largest number\n    selected_digits = sorted_digits[:num_digits]\n    \n    # Convert the list of digits to a single integer\n    max_number = int(''.join(map(str, selected_digits)))\n    \n    return max_number\n\n# Example usage:\n# digits = [3, 1, 4, 1, 5, 9]\n# num_digits = 3\n# print(find_max_num(digits, num_digits))  # Output: 954\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 58, "completion": "def opposite_signs(a, b):\n    # Check if both inputs are integers\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise TypeError(\"Both inputs must be integers.\")\n    \n    # Check if the product of a and b is negative\n    return (a * b) < 0\n\n# Example usage:\n# print(opposite_signs(10, -5))  # True\n# print(opposite_signs(-10, 5))  # True\n# print(opposite_signs(10, 5))   # False\n# print(opposite_signs(-10, -5)) # False\n", "requirement": "Exception Handling", "result": "passed", "passed": true}
{"task_id": 59, "completion": "def is_octagonal(n):\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    # Calculate the nth octagonal number using the formula\n    octagonal_number = n * (3 * n - 2)\n    return octagonal_number\n\n# Example usage:\ntry:\n    print(is_octagonal(1))  # Output: 1\n    print(is_octagonal(2))  # Output: 8\n    print(is_octagonal(3))  # Output: 21\n    print(is_octagonal(4))  # Output: 40\nexcept ValueError as e:\n    print(e)\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp4e9utkfx.py\", line 19, in <module>\n    is_octagonal(-1)\n  File \"/tmp/tmp4e9utkfx.py\", line 3, in is_octagonal\n    raise ValueError(\"Input must be a positive integer.\")\nValueError: Input must be a positive integer.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/tmp4e9utkfx.py\", line 21, in <module>\n    assert str(e) == 'Input must be a positive integer'\nAssertionError", "passed": false}
{"task_id": 60, "completion": "def max_len_sub(arr, diff):\n    # Check if the input is valid\n    if not isinstance(arr, list):\n        raise TypeError(\"The first parameter must be a list.\")\n    if not isinstance(diff, int):\n        raise TypeError(\"The second parameter must be an integer.\")\n    \n    # Initialize variables to keep track of the maximum length\n    max_length = 0\n    current_length = 0\n    \n    # Iterate through the array to find the maximum length subsequence\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i - 1] == diff:\n            current_length += 1\n        else:\n            current_length = 0\n        \n        # Update the maximum length found\n        max_length = max(max_length, current_length)\n    \n    # Add 1 to max_length to account for the first element in the subsequence\n    return max_length + 1 if max_length > 0 else 0\n\n# Example usage:\narr = [1, 3, 5, 7, 9, 11]\ndiff = 2\nprint(max_len_sub(arr, diff))  # Output: 6\n", "requirement": "Exception Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkqor41en.py\", line 24, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nAssertionError", "passed": false}

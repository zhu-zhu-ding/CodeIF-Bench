{"task_id": 14, "completion": "def find_volume(base_area, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base_area (float or int): The area of the triangular base.\n    height (float or int): The height of the triangular base.\n    length (float or int): The length of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    # Ensure the inputs are positive numbers\n    if base_area <= 0 or height <= 0 or length <= 0:\n        raise ValueError(\"All inputs must be positive numbers.\")\n    \n    # Calculate the volume\n    volume = base_area * length\n    \n    return volume\n\n# Example usage:\n# base_area = 10.0, height = 5.0, length = 7.0\n# volume = find_volume(10.0, 5.0, 7.0)\n# print(volume)  # Output: 70.0\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpemxm804t.py\", line 12, in <module>\n    assert find_volume(10,8,6) == 240\nAssertionError", "passed": false}
{"task_id": 15, "completion": "import re\n\ndef split_lowerstring(s):\n    # Use a regular expression to split the string at lowercase letters\n    # The pattern '(?=[a-z])' is a positive lookahead assertion that matches a position\n    # before a lowercase letter, effectively splitting the string at each lowercase letter.\n    segments = re.split(r'(?=[a-z])', s)\n    \n    # Filter out any empty strings that may result from the split\n    return [segment for segment in segments if segment]\n\n# Example usage:\ninput_string = \"HelloWorldPython\"\nresult = split_lowerstring(input_string)\nprint(result)  # Output: ['H', 'ello', 'W', 'orld', 'P', 'ython']\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp5hca6ryf.py\", line 13, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(input_string):\n    # Define the regular expression pattern\n    pattern = r'^[a-z]+(_[a-z]+)+$'\n    \n    # Use re.match to check if the pattern matches the input string\n    if re.match(pattern, input_string):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\nprint(text_lowercase_underscore(\"hello_world\"))  # Output: Found a match!\nprint(text_lowercase_underscore(\"Hello_World\"))  # Output: Not matched!\nprint(text_lowercase_underscore(\"hello_world_test\"))  # Output: Found a match!\nprint(text_lowercase_underscore(\"helloWorld\"))  # Output: Not matched!\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    if not isinstance(side_length, int) or side_length < 0:\n        raise ValueError(\"The side length must be a non-negative integer.\")\n    return 4 * side_length\n\n# Example usage:\n# perimeter = square_perimeter(5)\n# print(perimeter)  # Output: 20\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(s1, s2):\n    # Check if both strings contain only alphabetic characters\n    if not (s1.isalpha() and s2.isalpha()):\n        raise ValueError('Input strings must only contain alphabetic characters.')\n    \n    # Create a set of characters from the second string for quick lookup\n    dirty_chars = set(s2)\n    \n    # Build the result string by including only characters not in the dirty_chars set\n    result = ''.join(char for char in s1 if char not in dirty_chars)\n    \n    return result\n\n# Example usage:\n# result = remove_dirty_chars(\"hello\", \"world\")\n# print(result)  # Output: \"he\"\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 19, "completion": "def test_duplicate(arr):\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    \n    return False\n\n# Example usage:\n# print(test_duplicate([1, 2, 3, 4, 5]))  # Output: False\n# print(test_duplicate([1, 2, 3, 4, 5, 3]))  # Output: True\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(number):\n    if number < 0:\n        return False\n    \n    n = 0\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number == number:\n            return True\n        elif woodall_number > number:\n            return False\n        n += 1\n\n# Example usage:\nprint(is_woodall(7))  # True, because 7 is 1 * 2^3 - 1\nprint(is_woodall(17)) # False, 17 is not a Woodall number\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists):\n    # Initialize a variable to keep track of the maximum sum\n    max_sum = float('-inf')  # Start with the smallest possible number\n\n    # Iterate through each sublist in the list of lists\n    for sublist in list_of_lists:\n        # Calculate the sum of the current sublist\n        current_sum = sum(sublist)\n        \n        # Update max_sum if the current_sum is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum\n\n# Example usage:\nlist_of_lists = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [10, -2, 3],\n    [7, 8, 9]\n]\n\nprint(maximum_sum(list_of_lists))  # Output: 24\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 25, "completion": "def find_product(arr):\n    # Step 1: Count occurrences of each element\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Step 2: Identify non-repeated elements\n    non_repeated_elements = [num for num, count in count_dict.items() if count == 1]\n    \n    # Step 3: Calculate the product of non-repeated elements\n    product = 1\n    for num in non_repeated_elements:\n        product *= num\n    \n    # Step 4: Return the product\n    return product\n\n# Example usage:\n# arr = [2, 3, 4, 2, 5, 3]\n# The non-repeated elements are [4, 5]\n# The product of non-repeated elements is 4 * 5 = 20\n# print(find_product(arr))  # Output: 20\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8qlrdwm4.py\", line 22, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(tuple_list, k):\n    # Iterate over each tuple in the list\n    for t in tuple_list:\n        # Check if the length of the tuple is not equal to k\n        if len(t) != k:\n            return False\n    # If all tuples have exactly k elements, return True\n    return True\n\n# Example usage:\ntuple_list = [(1, 2), (3, 4), (5, 6)]\nk = 2\nprint(check_k_elements(tuple_list, k))  # Output: True\n\ntuple_list = [(1, 2, 3), (4, 5), (6, 7, 8)]\nk = 3\nprint(check_k_elements(tuple_list, k))  # Output: False\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpiy6ud_91.py\", line 16, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 28, "completion": "def binomial_coeff(n, k):\n    if k < 0 or n < 0:\n        raise ValueError(\"n and k must be non-negative integers.\")\n    if k > n:\n        return 0\n    \n    # Calculate factorial using a helper function\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        result = 1\n        for i in range(2, x + 1):\n            result *= i\n        return result\n    \n    # Calculate binomial coefficient\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\n# Example usage:\nprint(binomial_coeff(5, 2))  # Output: 10\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s: str) -> int:\n    # Dictionary to store the frequency of each character\n    char_count = {}\n    \n    # Count the frequency of each character in the string\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Calculate the number of substrings for each character\n    count = 0\n    for freq in char_count.values():\n        count += (freq * (freq + 1)) // 2\n    \n    return count\n\n# Example usage:\n# print(count_substring_with_equal_ends(\"abcab\"))  # Output: 7\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    # Initialize the largest prime factor\n    largest_prime = -1\n    \n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n    \n    # Now n must be odd, so we can skip even numbers\n    # Check for factors from 3 to sqrt(n)\n    factor = 3\n    while factor * factor <= n:\n        while n % factor == 0:\n            largest_prime = factor\n            n //= factor\n        factor += 2\n    \n    # If n is still greater than 2, then it must be a prime number\n    if n > 2:\n        largest_prime = n\n    \n    return largest_prime\n\n# Example usage:\nnumber = 13195\nprint(max_prime_factors(number))  # Output: 29\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 35, "completion": "def find_rect_num(n):\n    \"\"\"\n    Calculate the n-th rectangular number.\n\n    Parameters:\n    n (int): The position of the rectangular number to find.\n\n    Returns:\n    int: The n-th rectangular number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return n * (n + 1)\n\n# Example usage:\n# print(find_rect_num(1))  # Output: 2\n# print(find_rect_num(2))  # Output: 6\n# print(find_rect_num(3))  # Output: 12\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator, n):\n    if denominator == 0:\n        raise ValueError(\"Denominator cannot be zero.\")\n    \n    # Get the integer part and the initial remainder\n    integer_part = numerator // denominator\n    remainder = numerator % denominator\n    \n    # If n is 0, return the integer part\n    if n == 0:\n        return integer_part\n    \n    # Initialize a counter for the digits after the decimal point\n    digit_count = 0\n    \n    # Loop to find the nth digit after the decimal point\n    while digit_count < n:\n        # Multiply remainder by 10 to get the next digit\n        remainder *= 10\n        digit = remainder // denominator\n        remainder = remainder % denominator\n        digit_count += 1\n    \n    return digit\n\n# Example usage:\nnumerator = 1\ndenominator = 3\nn = 5\nprint(find_nth_digit(numerator, denominator, n))  # Output: 3\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 38, "completion": "def div_even_odd(numbers):\n    first_even = None\n    first_odd = None\n    \n    for num in numbers:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is None:\n        raise ValueError(\"No even number found in the list.\")\n    if first_odd is None:\n        raise ValueError(\"No odd number found in the list.\")\n    \n    return first_even / first_odd\n\n# Example usage:\nnumbers = [3, 5, 8, 10, 7]\nresult = div_even_odd(numbers)\nprint(result)  # Output will be 8 / 3 = 2.6666666666666665\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 39, "completion": "import heapq\nfrom collections import Counter\n\ndef rearrange_string(s: str) -> str:\n    # Count the frequency of each character\n    char_count = Counter(s)\n    \n    # Create a max-heap based on the frequency of characters\n    max_heap = [(-freq, char) for char, freq in char_count.items()]\n    heapq.heapify(max_heap)\n    \n    # This will store the rearranged result\n    result = []\n    \n    # Previous character and its remaining count\n    prev_char = None\n    prev_freq = 0\n    \n    while max_heap or prev_freq < 0:\n        if prev_freq < 0:\n            # Push the previous character back into the heap if it still has remaining count\n            heapq.heappush(max_heap, (prev_freq, prev_char))\n        \n        if not max_heap:\n            # If the heap is empty and we still have a previous character with remaining count,\n            # it means we cannot rearrange the string to meet the criteria\n            return \"\"\n        \n        # Pop the most frequent character from the heap\n        freq, char = heapq.heappop(max_heap)\n        \n        # Append the character to the result\n        result.append(char)\n        \n        # Update the previous character and its frequency\n        prev_char = char\n        prev_freq = freq + 1  # Decrease the frequency since we've used one instance of this character\n    \n    return ''.join(result)\n\n# Example usage:\nprint(rearrange_string(\"aab\"))  # Output could be \"aba\"\nprint(rearrange_string(\"aaab\")) # Output should be \"\" (impossible to rearrange)\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpqwiwsa1w.py\", line 33, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 42, "completion": "def find_sum(arr):\n    # Dictionary to store the count of each element\n    element_count = {}\n    \n    # Count occurrences of each element\n    for element in arr:\n        if element in element_count:\n            element_count[element] += 1\n        else:\n            element_count[element] = 1\n    \n    # Calculate the sum of repeated elements\n    repeated_sum = 0\n    for element, count in element_count.items():\n        if count > 1:\n            repeated_sum += element\n    \n    return repeated_sum\n\n# Example usage:\n# arr = [1, 2, 3, 2, 4, 5, 6, 1]\n# print(find_sum(arr))  # Output: 3 (since 1 and 2 are repeated)\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp57yulnno.py\", line 19, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    # Define the regex pattern for sequences of lowercase letters joined with an underscore\n    pattern = r'^[a-z]+_[a-z]+$'\n    \n    # Use re.match to check if the entire string matches the pattern\n    if re.match(pattern, text):\n        return text\n    else:\n        return 'Not matched!'\n\n# Example usage:\nprint(text_match(\"hello_world\"))  # Should return 'hello_world'\nprint(text_match(\"Hello_world\"))  # Should return 'Not matched!'\nprint(text_match(\"hello_World\"))  # Should return 'Not matched!'\nprint(text_match(\"helloworld\"))   # Should return 'Not matched!'\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpls3td8g4.py\", line 15, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 46, "completion": "def test_distinct(numbers):\n    \"\"\"\n    Determine if all numbers in the list are distinct.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    bool: True if all numbers are distinct, False otherwise.\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    unique_numbers = set(numbers)\n    \n    # Compare the length of the set with the original list\n    return len(unique_numbers) == len(numbers)\n\n# Example usage:\nprint(test_distinct([1, 2, 3, 4, 5]))  # Output: True\nprint(test_distinct([1, 2, 2, 4, 5]))  # Output: False\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 48, "completion": "def odd_bit_set_number(n):\n    # Create a bitmask with all odd bits set\n    # For a 32-bit integer, the bitmask would be: 0b01010101010101010101010101010101\n    # This is equivalent to 0x55555555 in hexadecimal\n    bitmask = 0x55555555\n    \n    # Use bitwise OR to set the odd bits in the number\n    result = n | bitmask\n    \n    return result\n\n# Example usage:\nnumber = 42  # Binary: 101010\nresult = odd_bit_set_number(number)\nprint(f\"Original number: {number} (Binary: {bin(number)})\")\nprint(f\"Number with odd bits set: {result} (Binary: {bin(result)})\")\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpcoze7vfv.py\", line 14, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(two_d_list, index):\n    # Check if the input list is empty\n    if not two_d_list:\n        return []\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate over each sublist in the two-dimensional list\n    for sublist in two_d_list:\n        # Check if the index is within the bounds of the sublist\n        if index < len(sublist):\n            # Append the element at the specified index to the result list\n            result.append(sublist[index])\n    \n    return result\n\n# Example usage:\ntwo_d_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nindex = 1\nprint(specified_element(two_d_list, index))  # Output: [2, 5, 8]\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 50, "completion": "def min_length_list(lists):\n    # Use the min function with a lambda to find the list with the minimum length\n    min_list = min(lists, key=lambda x: len(x))\n    # Return a tuple containing the length of the shortest list and the list itself\n    return (len(min_list), min_list)\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]\nresult = min_length_list(list_of_lists)\nprint(result)  # Output: (1, [10])\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float): The base length of the parallelogram. Must be a positive number.\n    height (float): The height of the parallelogram. Must be a positive number.\n\n    Returns:\n    float: The area of the parallelogram.\n    \"\"\"\n    if base <= 0 or height <= 0:\n        raise ValueError(\"Both base and height must be positive numbers.\")\n    \n    area = base * height\n    return area\n\n# Example usage:\n# base = 5, height = 10\n# area = parallelogram_area(5, 10)\n# print(area)  # Output: 50\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpmituegoj.py\", line 14, in <module>\n    assert parallelogram_area(0, 10) == 0\n  File \"/tmp/tmpmituegoj.py\", line 3, in parallelogram_area\n    raise ValueError(\"Both base and height must be positive numbers.\")\nValueError: Both base and height must be positive numbers.", "passed": false}
{"task_id": 53, "completion": "def check_equality(s):\n    # Check if the input is a string\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string\")\n    \n    # Check if the string is empty\n    if len(s) == 0:\n        return 'Not Equal'\n    \n    # Compare the first and last characters\n    if s[0] == s[-1]:\n        return 'Equal'\n    else:\n        return 'Not Equal'\n\n# Example usage:\nprint(check_equality(\"radar\"))  # Output: Equal\nprint(check_equality(\"hello\"))  # Output: Not Equal\nprint(check_equality(\"a\"))      # Output: Equal\nprint(check_equality(\"\"))       # Output: Not Equal\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 54, "completion": "def counting_sort(arr):\n    if not all(isinstance(x, int) and x >= 0 for x in arr):\n        raise ValueError(\"Input should be a list of non-negative integers.\")\n    \n    if len(arr) == 0:\n        return arr\n\n    # Find the maximum value in the array to determine the range of the count array\n    max_val = max(arr)\n\n    # Initialize the count array with zeros\n    count = [0] * (max_val + 1)\n\n    # Count the occurrences of each element in the input array\n    for num in arr:\n        count[num] += 1\n\n    # Build the sorted output array\n    sorted_arr = []\n    for num, freq in enumerate(count):\n        sorted_arr.extend([num] * freq)\n\n    return sorted_arr\n\n# Example usage:\n# arr = [4, 2, 2, 8, 3, 3, 1]\n# sorted_arr = counting_sort(arr)\n# print(sorted_arr)  # Output: [1, 2, 2, 3, 3, 4, 8]\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 57, "completion": "def find_max_num(digits_list, num_digits):\n    # Convert each integer to a string\n    str_digits = [str(digit) for digit in digits_list]\n    \n    # Sort the digits in descending order\n    str_digits.sort(reverse=True)\n    \n    # Concatenate the largest possible digits up to the specified number of digits\n    max_num_str = ''.join(str_digits[:num_digits])\n    \n    # Convert the concatenated string back to an integer\n    max_num = int(max_num_str)\n    \n    return max_num\n\n# Example usage:\ndigits_list = [3, 30, 34, 5, 9]\nnum_digits = 3\nprint(find_max_num(digits_list, num_digits))  # Output: 953\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 58, "completion": "def opposite_signs(a: int, b: int) -> bool:\n    \"\"\"\n    Check if two integers have opposite signs.\n\n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n\n    Returns:\n    bool: True if the integers have opposite signs, False otherwise.\n    \"\"\"\n    # Ensure both inputs are integers\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both inputs must be integers.\")\n    \n    # Check if the product of a and b is negative\n    return (a * b) < 0\n\n# Example usage:\n# print(opposite_signs(10, -5))  # Output: True\n# print(opposite_signs(-10, 5))  # Output: True\n# print(opposite_signs(10, 5))   # Output: False\n# print(opposite_signs(-10, -5)) # Output: False\n", "requirement": "Input-Output Conditions", "result": "passed", "passed": true}
{"task_id": 60, "completion": "def max_len_sub(arr, diff):\n    if not arr:\n        return 0\n\n    # Dictionary to store the length of the longest subsequence ending at each element\n    dp = {}\n    max_length = 0\n\n    for num in arr:\n        # Calculate the previous number in the subsequence\n        prev_num = num - diff\n\n        # If the previous number is in the dictionary, extend the subsequence\n        if prev_num in dp:\n            dp[num] = dp[prev_num] + 1\n        else:\n            # Otherwise, start a new subsequence with the current number\n            dp[num] = 1\n\n        # Update the maximum length found\n        max_length = max(max_length, dp[num])\n\n    return max_length\n\n# Example usage:\narr = [1, 5, 7, 8, 5, 3, 4, 2, 1]\ndiff = 2\nprint(max_len_sub(arr, diff))  # Output: 4\n", "requirement": "Input-Output Conditions", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpc1dxjlze.py\", line 23, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nAssertionError", "passed": false}

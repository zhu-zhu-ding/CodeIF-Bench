{"task_id": 11, "completion": "def remove_occ(s, char):\n    # Check if the character exists in the string\n    if char not in s:\n        return s\n    \n    # Find the first occurrence of the character\n    first_occurrence = s.find(char)\n    \n    # Find the last occurrence of the character\n    last_occurrence = s.rfind(char)\n    \n    # If the first and last occurrence are the same, remove only one occurrence\n    if first_occurrence == last_occurrence:\n        return s[:first_occurrence] + s[first_occurrence+1:]\n    \n    # Remove the first and last occurrence\n    return s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]\n\n# Example usage:\nstring = \"abracadabra\"\nchar_to_remove = \"a\"\nresult = remove_occ(string, char_to_remove)\nprint(result)  # Output: \"bracadabr\"\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 12, "completion": "def sort_matrix(matrix):\n    # Check if the matrix is empty\n    if not matrix:\n        return []\n    \n    # Sort the matrix based on the sum of each row\n    sorted_matrix = sorted(matrix, key=sum)\n    \n    return sorted_matrix\n\n# Example usage:\nmatrix = [\n    [3, 4, 2],\n    [1, 2, 3],\n    [5, 0, 0]\n]\n\nsorted_matrix = sort_matrix(matrix)\nprint(sorted_matrix)\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 13, "completion": "from collections import Counter\n\ndef count_common(words, n=None):\n    \"\"\"\n    Count the most common words in a list.\n\n    Parameters:\n    words (list): A list of words (strings).\n    n (int, optional): The number of most common words to return. If None, return all.\n\n    Returns:\n    list: A list of tuples containing the most common words and their counts.\n    \"\"\"\n    if not words:\n        return []\n\n    # Create a Counter object to count the frequency of each word\n    word_counts = Counter(words)\n\n    # Get the most common words\n    # If n is None, return all items sorted by frequency\n    most_common_words = word_counts.most_common(n)\n\n    return most_common_words\n\n# Example usage:\nwords = ['apple', 'banana', 'apple', 'orange', 'banana', 'apple']\nprint(count_common(words, 2))  # Output: [('apple', 3), ('banana', 2)]\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp9k4e8kdz.py\", line 14, in <module>\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nAssertionError", "passed": false}
{"task_id": 14, "completion": "def find_volume(base, triangle_height, prism_height):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    - base: The base length of the triangular face.\n    - triangle_height: The height of the triangular face.\n    - prism_height: The height (or length) of the prism.\n\n    Returns:\n    - The volume of the triangular prism.\n    \"\"\"\n    # Ensure all dimensions are positive\n    if base <= 0 or triangle_height <= 0 or prism_height <= 0:\n        raise ValueError(\"All dimensions must be positive numbers greater than zero.\")\n    \n    # Calculate the area of the triangular base\n    base_area = 0.5 * base * triangle_height\n    \n    # Calculate the volume of the prism\n    volume = base_area * prism_height\n    \n    return volume\n\n# Example usage:\n# volume = find_volume(3, 4, 5)\n# print(volume)  # Output: 30.0\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 15, "completion": "import re\n\ndef split_lowerstring(s):\n    # Use a regular expression to split the string at lowercase letters\n    # The pattern '(?=[a-z])' is a positive lookahead that matches a position before a lowercase letter\n    parts = re.split('(?=[a-z])', s)\n    \n    # Filter out any empty strings that may result from the split\n    parts = [part for part in parts if part]\n    \n    # Return an empty list if no lowercase letters were found\n    if not any(c.islower() for c in s):\n        return []\n    \n    return parts\n\n# Example usage:\nprint(split_lowerstring(\"HelloWorld\"))  # Output: ['H', 'ello', 'W', 'orld']\nprint(split_lowerstring(\"HELLO\"))       # Output: []\nprint(split_lowerstring(\"helloWorld\"))  # Output: ['h', 'ello', 'W', 'orld']\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpovq0njvj.py\", line 16, in <module>\n    assert split_lowerstring(\"AbCd\")==['bC','d']\nAssertionError", "passed": false}
{"task_id": 16, "completion": "import re\n\ndef text_lowercase_underscore(text):\n    # Define the regular expression pattern\n    pattern = r'\\b[a-z]+(?:_[a-z]+)+\\b'\n    \n    # Use re.search to find a match\n    match = re.search(pattern, text)\n    \n    # Check if a match was found\n    if match:\n        return match.group()\n    else:\n        return 'Not matched!'\n\n# Example usage:\nprint(text_lowercase_underscore(\"this_is_a_test\"))  # Output: this_is_a_test\nprint(text_lowercase_underscore(\"ThisIsNotMatched\"))  # Output: Not matched!\nprint(text_lowercase_underscore(\"\"))  # Output: Not matched!\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpxk5st5kk.py\", line 16, in <module>\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nAssertionError", "passed": false}
{"task_id": 17, "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square given the side length.\n\n    Parameters:\n    side_length (float): The length of one side of the square.\n\n    Returns:\n    float: The perimeter of the square.\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    \n    return 4 * side_length\n\n# Example usage:\nprint(square_perimeter(5))  # Output: 20\nprint(square_perimeter(0))  # Output: 0\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 18, "completion": "def remove_dirty_chars(original_string, dirty_chars):\n    if not dirty_chars:\n        return original_string\n    \n    # Create a set of characters to remove for faster lookup\n    dirty_set = set(dirty_chars)\n    \n    # Use a list comprehension to filter out the dirty characters\n    cleaned_string = ''.join(char for char in original_string if char not in dirty_set)\n    \n    return cleaned_string\n\n# Example usage:\noriginal = \"hello world\"\ndirty = \"lo\"\nresult = remove_dirty_chars(original, dirty)\nprint(result)  # Output: \"he wrd\"\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 19, "completion": "def test_duplicate(arr):\n    \"\"\"\n    This function checks if there are any duplicate elements in the given array of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    bool: True if there are duplicates, False otherwise.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\n# Example usage:\nprint(test_duplicate([1, 2, 3, 4, 5]))  # Output: False\nprint(test_duplicate([1, 2, 3, 4, 5, 3]))  # Output: True\nprint(test_duplicate([]))  # Output: False\nprint(test_duplicate([1]))  # Output: False\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 20, "completion": "def is_woodall(number):\n    if number < 0:\n        return False\n    if number == 0:\n        return False\n    \n    n = 1\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number == number:\n            return True\n        if woodall_number > number:\n            return False\n        n += 1\n\n# Example usage:\nprint(is_woodall(7))  # True, because 7 is 1 * 2^3 - 1\nprint(is_woodall(23)) # True, because 23 is 3 * 2^3 - 1\nprint(is_woodall(0))  # False, 0 is not a Woodall number\nprint(is_woodall(1))  # False, 1 is not a Woodall number\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 21, "completion": "def multiples_of_num(m, n):\n    \"\"\"\n    Returns a list of the first m multiples of n.\n    \n    Parameters:\n    m (int): The number of multiples to find.\n    n (int): The number whose multiples are to be found.\n    \n    Returns:\n    list: A list containing the first m multiples of n.\n    \"\"\"\n    if m == 0:\n        return []\n    \n    return [n * i for i in range(1, m + 1)]\n\n# Example usage:\nprint(multiples_of_num(5, 3))  # Output: [3, 6, 9, 12, 15]\nprint(multiples_of_num(0, 3))  # Output: []\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 22, "completion": "def find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1\n\n# Example usage:\n# print(find_first_duplicate([1, 2, 3, 4, 5, 3, 6]))  # Output: 3\n# print(find_first_duplicate([1, 2, 3, 4, 5]))       # Output: -1\n# print(find_first_duplicate([]))                    # Output: -1\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 23, "completion": "def maximum_sum(list_of_lists):\n    # Check if the input list is empty\n    if not list_of_lists:\n        return 0\n    \n    # Initialize the maximum sum to 0\n    max_sum = 0\n    \n    # Iterate through each sublist in the list of lists\n    for sublist in list_of_lists:\n        # Calculate the sum of the current sublist\n        current_sum = sum(sublist)\n        \n        # Update the maximum sum if the current sum is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum\n\n# Example usage:\nprint(maximum_sum([[1, 2, 3], [4, 5], [6], []]))  # Output: 9\nprint(maximum_sum([[], [], []]))  # Output: 0\nprint(maximum_sum([]))  # Output: 0\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 24, "completion": "def binary_to_decimal(binary_str):\n    # Handle the edge case of an empty string\n    if not binary_str:\n        return 0\n    \n    # Initialize the decimal value\n    decimal_value = 0\n    \n    # Iterate over the binary string\n    for index, digit in enumerate(reversed(binary_str)):\n        # Convert the character to an integer (0 or 1)\n        if digit not in '01':\n            raise ValueError(\"Input string is not a valid binary number.\")\n        \n        # Calculate the value of the current bit and add it to the decimal value\n        decimal_value += int(digit) * (2 ** index)\n    \n    return decimal_value\n\n# Example usage:\nprint(binary_to_decimal(\"1101\"))  # Output: 13\nprint(binary_to_decimal(\"\"))      # Output: 0\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpj01i2w8a.py\", line 18, in <module>\n    assert binary_to_decimal(100) == 4\n  File \"/tmp/tmpj01i2w8a.py\", line 8, in binary_to_decimal\n    for index, digit in enumerate(reversed(binary_str)):\nTypeError: 'int' object is not reversible", "passed": false}
{"task_id": 25, "completion": "def find_product(arr):\n    if not arr:\n        return 1\n    \n    # Create a dictionary to count occurrences of each element\n    element_count = {}\n    \n    for num in arr:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n    \n    # Calculate the product of non-repeated elements\n    product = 1\n    has_non_repeated = False\n    \n    for num, count in element_count.items():\n        if count == 1:\n            product *= num\n            has_non_repeated = True\n    \n    # If there are no non-repeated elements, return 1\n    return product if has_non_repeated else 1\n\n# Example usage:\nprint(find_product([2, 3, 4, 2, 5]))  # Output: 60 (3 * 4 * 5)\nprint(find_product([1, 1, 1, 1]))     # Output: 1 (no non-repeated elements)\nprint(find_product([]))               # Output: 1 (empty list)\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp8yc6xgwf.py\", line 24, in <module>\n    assert find_product([1,1,2,3],4) == 6\nTypeError: find_product() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 26, "completion": "def check_k_elements(tuple_list, k):\n    \"\"\"\n    Check if each tuple in the given list has exactly k elements.\n\n    Parameters:\n    tuple_list (list of tuples): The list of tuples to check.\n    k (int): The number of elements each tuple should have.\n\n    Returns:\n    bool: True if all tuples have exactly k elements, False otherwise.\n    \"\"\"\n    # Check if the list is empty\n    if not tuple_list:\n        return False\n\n    # Iterate over each tuple in the list\n    for t in tuple_list:\n        # Check if the current tuple has exactly k elements\n        if len(t) != k:\n            return False\n\n    # If all tuples have exactly k elements, return True\n    return True\n\n# Example usage:\ntuple_list = [(1, 2), (3, 4), (5, 6)]\nk = 2\nprint(check_k_elements(tuple_list, k))  # Output: True\n\ntuple_list = [(1, 2, 3), (4, 5), (6, 7)]\nk = 2\nprint(check_k_elements(tuple_list, k))  # Output: False\n\ntuple_list = []\nk = 2\nprint(check_k_elements(tuple_list, k))  # Output: False\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpktci5gjt.py\", line 22, in <module>\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError", "passed": false}
{"task_id": 27, "completion": "def remove(strings):\n    \"\"\"\n    Remove all digits from a list of strings.\n\n    Parameters:\n    strings (list of str): A list of strings from which digits should be removed.\n\n    Returns:\n    list of str: A new list of strings with all digits removed.\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(strings, list):\n        raise TypeError(\"Input should be a list of strings.\")\n    \n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate over each string in the list\n    for s in strings:\n        # Check if the current element is a string\n        if not isinstance(s, str):\n            raise ValueError(\"All elements in the list should be strings.\")\n        \n        # Remove digits from the string using a list comprehension\n        cleaned_string = ''.join(char for char in s if not char.isdigit())\n        \n        # Append the cleaned string to the result list\n        result.append(cleaned_string)\n    \n    return result\n\n# Example usage:\nstrings = [\"hello123\", \"world456\", \"no_digits_here\", \"\"]\nprint(remove(strings))  # Output: ['hello', 'world', 'no_digits_here', '']\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 28, "completion": "def binomial_coeff(n, k):\n    # Handle edge cases\n    if k < 0 or n < 0:\n        raise ValueError(\"n and k must be non-negative integers.\")\n    if k > n:\n        return 0\n    if k == 0 or n == k:\n        return 1\n    \n    # Calculate the binomial coefficient using an iterative approach\n    # to avoid large intermediate factorials\n    k = min(k, n - k)  # Take advantage of symmetry C(n, k) == C(n, n-k)\n    c = 1\n    for i in range(k):\n        c = c * (n - i) // (i + 1)\n    return c\n\n# Example usage:\nprint(binomial_coeff(5, 2))  # Output: 10\nprint(binomial_coeff(5, 0))  # Output: 1\nprint(binomial_coeff(5, 5))  # Output: 1\nprint(binomial_coeff(5, 6))  # Output: 0\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 29, "completion": "def get_odd_occurrence(lst):\n    if not lst:\n        return None\n    \n    occurrence_count = {}\n    \n    # Count occurrences of each element\n    for element in lst:\n        if element in occurrence_count:\n            occurrence_count[element] += 1\n        else:\n            occurrence_count[element] = 1\n    \n    # Find the element with an odd occurrence\n    for element, count in occurrence_count.items():\n        if count % 2 != 0:\n            return element\n    \n    return None\n\n# Example usage:\nprint(get_odd_occurrence([1, 2, 3, 2, 3, 1, 3]))  # Output: 3\nprint(get_odd_occurrence([]))  # Output: None\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpkw7_9bya.py\", line 19, in <module>\n    assert get_odd_occurrence([1,2,3,1,2,3,1],7) == 1\nTypeError: get_odd_occurrence() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 30, "completion": "def count_substring_with_equal_ends(s):\n    if not s:\n        return 0\n\n    # Dictionary to store the frequency of each character\n    char_count = {}\n\n    # Count the frequency of each character in the string\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Calculate the number of substrings for each character\n    count = 0\n    for freq in char_count.values():\n        count += (freq * (freq + 1)) // 2\n\n    return count\n\n# Example usage:\n# print(count_substring_with_equal_ends(\"abcab\"))  # Output: 7\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 31, "completion": "import heapq\nfrom collections import defaultdict\n\ndef func(lists, k):\n    if not lists or k <= 0:\n        return []\n    \n    # Step 1: Count frequencies of each integer\n    frequency = defaultdict(int)\n    for lst in lists:\n        for num in lst:\n            frequency[num] += 1\n    \n    # Step 2: Use a min-heap to find the top k frequent elements\n    min_heap = []\n    \n    for num, freq in frequency.items():\n        heapq.heappush(min_heap, (freq, num))\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    \n    # Step 3: Extract the top k elements from the heap\n    top_k = [num for freq, num in min_heap]\n    \n    return top_k\n\n# Example usage:\nlists = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\nk = 2\nprint(func(lists, k))  # Output: [3, 2] or [2, 3] depending on heap order\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpluc2qt6o.py\", line 24, in <module>\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nAssertionError", "passed": false}
{"task_id": 32, "completion": "def max_prime_factors(n):\n    # Handle the smallest prime number\n    if n <= 1:\n        return None  # No prime factors for numbers <= 1\n    if n == 2:\n        return 2  # 2 is the smallest prime number\n\n    # Initialize the largest prime factor\n    largest_prime = None\n\n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n\n    # Check for odd factors from 3 onwards\n    factor = 3\n    while factor * factor <= n:\n        while n % factor == 0:\n            largest_prime = factor\n            n //= factor\n        factor += 2\n\n    # If n is still greater than 2, then it is a prime number\n    if n > 2:\n        largest_prime = n\n\n    return largest_prime\n\n# Example usage:\nprint(max_prime_factors(10))  # Output: 5\nprint(max_prime_factors(15))  # Output: 5\nprint(max_prime_factors(2))   # Output: 2\nprint(max_prime_factors(13195))  # Output: 29\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 33, "completion": "def decimal_to_binary(decimal_number):\n    if decimal_number == 0:\n        return '0'\n    \n    binary_number = ''\n    while decimal_number > 0:\n        remainder = decimal_number % 2\n        binary_number = str(remainder) + binary_number\n        decimal_number = decimal_number // 2\n    \n    return binary_number\n\n# Example usage:\nprint(decimal_to_binary(0))   # Output: '0'\nprint(decimal_to_binary(5))   # Output: '101'\nprint(decimal_to_binary(10))  # Output: '1010'\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpyojwswwy.py\", line 14, in <module>\n    assert decimal_to_binary(10) == 1010\nAssertionError", "passed": false}
{"task_id": 34, "completion": "def find_missing(arr):\n    \"\"\"\n    Find the missing number in a sorted array of consecutive numbers.\n    \n    :param arr: List[int] - A sorted list of integers with one missing number.\n    :return: int - The missing number.\n    \"\"\"\n    if not arr:\n        raise ValueError(\"Array is empty\")\n\n    # Check if the missing number is the smallest number\n    if arr[0] != arr[1] - 1:\n        return arr[0] - 1\n\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        # Check if the missing number is at the mid position\n        if arr[mid] != arr[0] + mid:\n            # If the missing number is in the left half\n            right = mid - 1\n        else:\n            # If the missing number is in the right half\n            left = mid + 1\n\n    # The missing number is the expected number at the 'left' index\n    return arr[0] + left\n\n# Example usage:\narr = [1, 2, 3, 4, 6, 7, 8]\nmissing_number = find_missing(arr)\nprint(f\"The missing number is: {missing_number}\")\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmph5otmnyo.py\", line 23, in <module>\n    assert find_missing([1,2,3,5],4) == 4\nTypeError: find_missing() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 35, "completion": "def find_rect_num(n):\n    \"\"\"\n    Find the n-th rectangular number.\n\n    Parameters:\n    n (int): The position of the rectangular number to find.\n\n    Returns:\n    int: The n-th rectangular number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    return n * (n + 1)\n\n# Example usage:\nprint(find_rect_num(1))  # Output: 2\nprint(find_rect_num(2))  # Output: 6\nprint(find_rect_num(3))  # Output: 12\nprint(find_rect_num(4))  # Output: 20\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 36, "completion": "def find_nth_digit(numerator, denominator, n):\n    # Handle the case where the numerator is zero\n    if numerator == 0:\n        return 0\n    \n    # Calculate the integer part and the initial remainder\n    integer_part = numerator // denominator\n    remainder = numerator % denominator\n    \n    # If n is 0, return the integer part\n    if n == 0:\n        return integer_part\n    \n    # Initialize a variable to store the nth digit\n    nth_digit = 0\n    \n    # Iterate to find the nth digit after the decimal point\n    for i in range(n):\n        # Multiply the remainder by 10 to get the next digit\n        remainder *= 10\n        nth_digit = remainder // denominator\n        remainder = remainder % denominator\n    \n    return nth_digit\n\n# Example usage:\nprint(find_nth_digit(1, 3, 1))  # Output: 3 (since 1/3 = 0.333..., the 1st digit is 3)\nprint(find_nth_digit(1, 2, 1))  # Output: 5 (since 1/2 = 0.5, the 1st digit is 5)\nprint(find_nth_digit(0, 5, 3))  # Output: 0 (since 0/5 = 0, any nth digit is 0)\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 37, "completion": "def sort_mixed_list(mixed_list):\n    # Separate integers and strings\n    int_list = [item for item in mixed_list if isinstance(item, int)]\n    str_list = [item for item in mixed_list if isinstance(item, str)]\n    \n    # Sort each list individually\n    int_list.sort()\n    str_list.sort()\n    \n    # Combine the sorted lists\n    sorted_list = int_list + str_list\n    \n    return sorted_list\n\n# Example usage:\nprint(sort_mixed_list([3, 'apple', 1, 'banana', 2, 'cherry']))  # Output: [1, 2, 3, 'apple', 'banana', 'cherry']\nprint(sort_mixed_list([]))  # Output: []\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 38, "completion": "def div_even_odd(numbers):\n    first_even = None\n    first_odd = None\n    \n    for num in numbers:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        \n        # If both first_even and first_odd are found, we can break early\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # If the first even number is zero, return zero\n    if first_even == 0:\n        return 0\n    \n    # If either first_even or first_odd is not found, return None\n    if first_even is None or first_odd is None:\n        return None\n    \n    # Return the division of the first even number by the first odd number\n    return first_even / first_odd\n\n# Example usage:\nnumbers = [5, 3, 0, 8, 2, 7]\nresult = div_even_odd(numbers)\nprint(result)  # Output will be 0.0 because the first even number is 0\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 39, "completion": "import heapq\nfrom collections import Counter\n\ndef rearrange_string(s: str) -> str:\n    # Count the frequency of each character\n    char_count = Counter(s)\n    \n    # Create a max heap based on character frequency\n    max_heap = [(-freq, char) for char, freq in char_count.items()]\n    heapq.heapify(max_heap)\n    \n    # The result list to build the rearranged string\n    result = []\n    \n    # Previous character and its frequency\n    prev_freq, prev_char = 0, ''\n    \n    while max_heap:\n        # Pop the most frequent character\n        freq, char = heapq.heappop(max_heap)\n        \n        # Append the current character to the result\n        result.append(char)\n        \n        # If there's a previous character, push it back into the heap\n        if prev_freq < 0:\n            heapq.heappush(max_heap, (prev_freq, prev_char))\n        \n        # Update the previous character and its frequency\n        prev_freq, prev_char = freq + 1, char  # Increment frequency since it's negative\n    \n    # Join the result list to form the final string\n    rearranged = ''.join(result)\n    \n    # Check if the rearranged string is valid\n    if len(rearranged) != len(s):\n        return \"\"\n    \n    return rearranged\n\n# Example usage:\nprint(rearrange_string(\"aabb\"))  # Possible output: \"abab\"\nprint(rearrange_string(\"aaab\"))  # Output: \"\"\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp6dy4tse_.py\", line 32, in <module>\n    assert rearange_string(\"aab\")==('aba')\nNameError: name 'rearange_string' is not defined", "passed": false}
{"task_id": 40, "completion": "from collections import Counter\n\ndef freq_element(list_of_lists):\n    # Check if the input list is empty\n    if not list_of_lists:\n        return {}\n    \n    # Flatten the list of lists into a single list\n    flat_list = [element for sublist in list_of_lists for element in sublist]\n    \n    # Use Counter to count the frequency of each element\n    frequency = Counter(flat_list)\n    \n    # Convert the Counter object to a dictionary and return it\n    return dict(frequency)\n\n# Example usage:\nlist_of_lists = [[1, 2, 2], [3, 4, 4, 4], [5, 6, 6]]\nresult = freq_element(list_of_lists)\nprint(result)  # Output: {1: 1, 2: 2, 3: 1, 4: 3, 5: 1, 6: 2}\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 41, "completion": "def filter_evennumbers(numbers):\n    # Use filter with a lambda function to filter even numbers\n    even_numbers = list(filter(lambda x: x % 2 == 0, numbers))\n    return even_numbers\n\n# Example usage:\n# print(filter_evennumbers([1, 2, 3, 4, 5, 6]))  # Output: [2, 4, 6]\n# print(filter_evennumbers([]))  # Output: []\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 42, "completion": "def find_sum(arr):\n    if not arr:\n        return 0\n\n    element_count = {}\n    for element in arr:\n        if element in element_count:\n            element_count[element] += 1\n        else:\n            element_count[element] = 1\n\n    sum_of_repeated = sum(element for element, count in element_count.items() if count > 1)\n    \n    return sum_of_repeated\n\n# Example usage:\n# print(find_sum([1, 2, 2, 3, 4, 4, 4, 5]))  # Output: 6 (2 + 4)\n# print(find_sum([1, 1, 2, 3, 3, 3, 4]))    # Output: 4 (1 + 3)\n# print(find_sum([]))                       # Output: 0\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpync13xfa.py\", line 16, in <module>\n    assert find_sum([1,2,3,1,1,4,5,6],8) == 3\nTypeError: find_sum() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 43, "completion": "import re\n\ndef text_match(text):\n    # Check if the input is an empty string\n    if not text:\n        return 'Not matched!'\n    \n    # Define the regex pattern for sequences of lowercase letters joined with an underscore\n    pattern = r'^[a-z]+_[a-z]+$'\n    \n    # Use re.match to check if the entire string matches the pattern\n    if re.match(pattern, text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\nprint(text_match(\"abc_def\"))  # Output: Matched!\nprint(text_match(\"abc_def_ghi\"))  # Output: Not matched!\nprint(text_match(\"abcDef\"))  # Output: Not matched!\nprint(text_match(\"\"))  # Output: Not matched!\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpuk0dhkeq.py\", line 18, in <module>\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\nAssertionError", "passed": false}
{"task_id": 44, "completion": "import re\n\ndef text_match_string(s):\n    # Strip leading and trailing spaces to handle strings with only spaces\n    s = s.strip()\n    \n    # Check if the string is empty after stripping\n    if not s:\n        return False\n    \n    # Use regular expression to match a word at the beginning of the string\n    # \\w+ matches one or more word characters (letters, digits, or underscores)\n    match = re.match(r'^\\w+', s)\n    \n    # Return True if a match is found, otherwise False\n    return match is not None\n\n# Example usage:\nprint(text_match_string(\"Hello world\"))  # True\nprint(text_match_string(\"  Hello world\"))  # True\nprint(text_match_string(\"123 start\"))  # True\nprint(text_match_string(\"   \"))  # False\nprint(text_match_string(\"\"))  # False\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp7hcdnah5.py\", line 19, in <module>\n    assert text_match_string(\" python\")==('Not matched!')\nAssertionError", "passed": false}
{"task_id": 46, "completion": "def test_distinct(numbers):\n    \"\"\"\n    Determine if all numbers in the list are distinct.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    bool: True if all numbers are distinct, False otherwise.\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    unique_numbers = set(numbers)\n    \n    # Compare the length of the set with the original list\n    return len(unique_numbers) == len(numbers)\n\n# Example usage:\nprint(test_distinct([]))          # True, because an empty list has no duplicates\nprint(test_distinct([1]))         # True, because a single element list has no duplicates\nprint(test_distinct([1, 2, 3]))   # True, all elements are distinct\nprint(test_distinct([1, 2, 2]))   # False, because 2 is repeated\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 47, "completion": "def compute_last_digit(a, b):\n    if a == b:\n        return 1\n    \n    product = 1\n    for i in range(a + 1, b + 1):\n        product *= i\n        # We only care about the last digit, so we can take modulo 10\n        product %= 10\n    \n    return product\n\n# Example usage:\n# compute_last_digit(5, 7) should return the last digit of 6 * 7 = 42, which is 2\nprint(compute_last_digit(5, 7))  # Output: 2\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 48, "completion": "def odd_bit_set_number(num):\n    if num == 0:\n        return 1\n    \n    # Create a mask with all odd bits set to 1\n    # For a 32-bit integer, the mask would be 0b01010101010101010101010101010101\n    # This can be represented in hexadecimal as 0x55555555\n    mask = 0x55555555\n    \n    # Set the odd bits using bitwise OR\n    result = num | mask\n    \n    return result\n\n# Example usage:\nprint(odd_bit_set_number(0))  # Output: 1\nprint(odd_bit_set_number(10)) # Output: 15 (0b1010 | 0b0101 = 0b1111)\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmppur5h3vb.py\", line 14, in <module>\n    assert odd_bit_set_number(10) == 15\nAssertionError", "passed": false}
{"task_id": 49, "completion": "def specified_element(two_d_list, index=0):\n    \"\"\"\n    Extracts the specified element from each sublist in a two-dimensional list.\n    \n    Parameters:\n    two_d_list (list of lists): The two-dimensional list from which to extract elements.\n    index (int): The index of the element to extract from each sublist. Defaults to 0.\n    \n    Returns:\n    list: A list containing the extracted elements.\n    \"\"\"\n    extracted_elements = []\n    \n    for sublist in two_d_list:\n        # Check if the index is valid for the current sublist\n        if index < len(sublist):\n            extracted_elements.append(sublist[index])\n    \n    return extracted_elements\n\n# Example usage:\ntwo_d_list = [\n    [1, 2, 3],\n    [4, 5],\n    [6],\n    [],\n    [7, 8, 9, 10]\n]\n\n# Extract the first element from each sublist\nprint(specified_element(two_d_list))  # Output: [1, 4, 6, 7]\n\n# Extract the second element from each sublist\nprint(specified_element(two_d_list, 1))  # Output: [2, 5, 8]\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 50, "completion": "def min_length_list(lists):\n    \"\"\"\n    Finds the list with the minimum length from a list of lists.\n    If multiple lists have the same minimum length, the first one is returned.\n\n    :param lists: A list of lists to be evaluated.\n    :return: The list with the minimum length.\n    \"\"\"\n    if not lists:\n        return None  # Return None if the input list is empty\n\n    # Use the min function with a lambda to find the list with the minimum length\n    return min(lists, key=lambda x: len(x))\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [4, 5], [6, 7, 8, 9], [10, 11]]\nresult = min_length_list(list_of_lists)\nprint(result)  # Output: [4, 5]\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpa7zombf9.py\", line 10, in <module>\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nAssertionError", "passed": false}
{"task_id": 51, "completion": "def check_equilateral(side1, side2, side3):\n    \"\"\"\n    Check if a triangle is equilateral.\n\n    Parameters:\n    side1 (float): The length of the first side of the triangle.\n    side2 (float): The length of the second side of the triangle.\n    side3 (float): The length of the third side of the triangle.\n\n    Returns:\n    bool: True if the triangle is equilateral, False otherwise.\n    \"\"\"\n    # Check if all sides are equal and non-zero\n    if side1 == side2 == side3 and side1 != 0:\n        return True\n    else:\n        return False\n\n# Example usage:\nprint(check_equilateral(3, 3, 3))  # Output: True\nprint(check_equilateral(3, 3, 0))  # Output: False\nprint(check_equilateral(0, 0, 0))  # Output: False\nprint(check_equilateral(3, 4, 5))  # Output: False\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 52, "completion": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculate the area of a parallelogram.\n\n    Parameters:\n    base (float): The length of the base of the parallelogram.\n    height (float): The height of the parallelogram.\n\n    Returns:\n    float: The area of the parallelogram. Returns 0 if base or height is zero.\n    \"\"\"\n    if base <= 0 or height <= 0:\n        return 0\n    return base * height\n\n# Example usage:\nprint(parallelogram_area(5, 10))  # Output: 50\nprint(parallelogram_area(0, 10))  # Output: 0\nprint(parallelogram_area(5, 0))   # Output: 0\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 53, "completion": "def check_equality(s: str) -> str:\n    if not s:  # Check if the string is empty\n        return 'Equal'\n    return 'Equal' if s[0] == s[-1] else 'Not Equal'\n\n# Example usage:\nprint(check_equality(\"radar\"))  # Output: Equal\nprint(check_equality(\"hello\"))  # Output: Not Equal\nprint(check_equality(\"\"))       # Output: Equal\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 54, "completion": "def counting_sort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    # Find the maximum and minimum values in the array\n    max_val = max(arr)\n    min_val = min(arr)\n\n    # Create a count array to store the count of each unique number\n    count_range = max_val - min_val + 1\n    count = [0] * count_range\n\n    # Fill the count array\n    for num in arr:\n        count[num - min_val] += 1\n\n    # Reconstruct the sorted array\n    sorted_index = 0\n    for i in range(count_range):\n        while count[i] > 0:\n            arr[sorted_index] = i + min_val\n            sorted_index += 1\n            count[i] -= 1\n\n    return arr\n\n# Example usage:\n# arr = [4, 2, 2, 8, 3, 3, 1]\n# sorted_arr = counting_sort(arr)\n# print(sorted_arr)  # Output: [1, 2, 2, 3, 3, 4, 8]\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 55, "completion": "def tn_gp(a, r, t):\n    \"\"\"\n    Calculate the t-th term of a geometric series.\n\n    Parameters:\n    a (float): The first term of the geometric series.\n    r (float): The common ratio of the geometric series.\n    t (int): The term number to find (1-based index).\n\n    Returns:\n    float: The t-th term of the geometric series.\n    \"\"\"\n    if t < 1:\n        raise ValueError(\"The term number t must be a positive integer.\")\n    \n    if r == 0:\n        # If the common ratio is zero, all terms beyond the first are zero.\n        return a if t == 1 else 0\n    \n    # Calculate the t-th term using the formula\n    return a * (r ** (t - 1))\n\n# Example usage:\n# First term (a) = 3, common ratio (r) = 2, find the 4th term\nprint(tn_gp(3, 2, 4))  # Output: 24\n\n# First term (a) = 5, common ratio (r) = 0, find the 3rd term\nprint(tn_gp(5, 0, 3))  # Output: 0\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmp_tcdwb7w.py\", line 14, in <module>\n    assert tn_gp(1,5,2)==16\nAssertionError", "passed": false}
{"task_id": 56, "completion": "def check(number):\n    # Convert the number to a string to reverse it\n    str_number = str(number)\n    \n    # Reverse the string and convert it back to an integer\n    reversed_number = int(str_number[::-1])\n    \n    # Calculate twice the reversed number\n    twice_reversed = 2 * reversed_number\n    \n    # Check if the original number is one less than twice the reversed number\n    return number == twice_reversed - 1\n\n# Test cases\nprint(check(0))    # False, because 0 is not one less than twice its reverse (0)\nprint(check(1))    # False, because 1 is not one less than twice its reverse (2)\nprint(check(9))    # False, because 9 is not one less than twice its reverse (18)\nprint(check(36))   # True, because 36 is one less than twice its reverse (63 * 2 = 126)\nprint(check(21))   # False, because 21 is not one less than twice its reverse (12 * 2 = 24)\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpewxeise4.py\", line 20, in <module>\n    assert check(1) == False\nAssertionError", "passed": false}
{"task_id": 57, "completion": "def find_max_num(digits):\n    # Check if the list is empty\n    if not digits:\n        return 0\n    \n    # Convert all digits to strings to facilitate sorting\n    digits_str = map(str, digits)\n    \n    # Sort the digits in descending order\n    sorted_digits = sorted(digits_str, reverse=True)\n    \n    # Join the sorted digits to form the largest number\n    max_num_str = ''.join(sorted_digits)\n    \n    # Convert the result back to an integer\n    max_num = int(max_num_str)\n    \n    return max_num\n\n# Example usage:\nprint(find_max_num([3, 1, 4, 1, 5, 9]))  # Output: 954311\nprint(find_max_num([]))                  # Output: 0\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpji1cgzi6.py\", line 17, in <module>\n    assert find_max_num([1,2,3],3) == 321\nTypeError: find_max_num() takes 1 positional argument but 2 were given", "passed": false}
{"task_id": 58, "completion": "def opposite_signs(x, y):\n    # XOR the two numbers and check the sign bit\n    return (x ^ y) < 0\n\n# Test cases\nprint(opposite_signs(10, -5))  # True, because 10 and -5 have opposite signs\nprint(opposite_signs(-10, 5))  # True, because -10 and 5 have opposite signs\nprint(opposite_signs(10, 5))   # False, because 10 and 5 have the same sign\nprint(opposite_signs(-10, -5)) # False, because -10 and -5 have the same sign\nprint(opposite_signs(0, 5))    # False, because 0 and 5 do not have opposite signs\nprint(opposite_signs(0, -5))   # True, because 0 and -5 have opposite signs\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpigsjsx9b.py\", line 15, in <module>\n    assert opposite_signs(0, 1) == True\nAssertionError", "passed": false}
{"task_id": 59, "completion": "def is_octagonal(n):\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    return n * (3 * n - 2)\n\n# Example usage:\nprint(is_octagonal(1))  # Output: 1\nprint(is_octagonal(2))  # Output: 8\nprint(is_octagonal(3))  # Output: 21\n", "requirement": "Edge Case Handling", "result": "passed", "passed": true}
{"task_id": 60, "completion": "def max_len_sub(arr):\n    if not arr:\n        return 0\n\n    n = len(arr)\n    if n == 1:\n        return 1\n\n    # Dictionary to store the length of subsequence ending at each index with a given difference\n    dp = [{} for _ in range(n)]\n    max_length = 1\n\n    for i in range(n):\n        for j in range(i):\n            diff = arr[i] - arr[j]\n            # If there is already a subsequence ending at j with this difference, extend it\n            if diff in dp[j]:\n                dp[i][diff] = dp[j][diff] + 1\n            else:\n                # Otherwise, start a new subsequence with length 2 (arr[j], arr[i])\n                dp[i][diff] = 2\n            # Update the maximum length found\n            max_length = max(max_length, dp[i][diff])\n\n    return max_length\n\n# Example usage:\narr = [1, 7, 10, 15, 27, 29]\nprint(max_len_sub(arr))  # Output: 3 (subsequence: [1, 10, 29] with difference 9)\n", "requirement": "Edge Case Handling", "result": "failed: Traceback (most recent call last):\n  File \"/tmp/tmpajss2i62.py\", line 25, in <module>\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nTypeError: max_len_sub() takes 1 positional argument but 2 were given", "passed": false}
